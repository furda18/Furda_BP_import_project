
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
			msg->flags & I2C_MSG_READ ? 'R' : 'W', msg->len);
		if (!(msg->flags & I2C_MSG_READ)) {
			LOG_HEXDUMP_DBG(msg->buf, msg->len, "contents:");
		}
	}
}
   0:	20006220 	.word	0x20006220
   4:	00013bcd 	.word	0x00013bcd
   8:	00024db9 	.word	0x00024db9
   c:	00013bb9 	.word	0x00013bb9
  10:	00013bb9 	.word	0x00013bb9
  14:	00013bb9 	.word	0x00013bb9
  18:	00013bb9 	.word	0x00013bb9
	...
  2c:	00013955 	.word	0x00013955
  30:	00013bb9 	.word	0x00013bb9
  34:	00000000 	.word	0x00000000
  38:	00013901 	.word	0x00013901
  3c:	00013bb9 	.word	0x00013bb9

00000040 <_irq_vector_table>:
  40:	000138b9 00027c81 000138b9 000138b9     .8...|...8...8..
  50:	000138b9 000138b9 000138b9 000138b9     .8...8...8...8..
  60:	00027c49 000138b9 000138b9 00027c67     I|...8...8..g|..
  70:	000138b9 000138b9 000138b9 000138b9     .8...8...8...8..
  80:	000138b9 000138b9 000138b9 000138b9     .8...8...8...8..
  90:	000138b9 000138b9 000138b9 000138b9     .8...8...8...8..
  a0:	000138b9 000138b9 000138b9 000138b9     .8...8...8...8..
  b0:	000138b9 000138b9 000138b9 000138b9     .8...8...8...8..
  c0:	000138b9 000138b9 000138b9 000138b9     .8...8...8...8..
  d0:	000138b9 000138b9 000138b9              .8...8...8..

Disassembly of section text:

000000e0 <__aeabi_uldivmod>:
      e0:	b953      	cbnz	r3, f8 <__aeabi_uldivmod+0x18>
      e2:	b94a      	cbnz	r2, f8 <__aeabi_uldivmod+0x18>
      e4:	2900      	cmp	r1, #0
      e6:	bf08      	it	eq
      e8:	2800      	cmpeq	r0, #0
      ea:	bf1c      	itt	ne
      ec:	f04f 31ff 	movne.w	r1, #4294967295
      f0:	f04f 30ff 	movne.w	r0, #4294967295
      f4:	f000 b96c 	b.w	3d0 <__aeabi_idiv0>
      f8:	f1ad 0c08 	sub.w	ip, sp, #8
      fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     100:	f000 f806 	bl	110 <__udivmoddi4>
     104:	f8dd e004 	ldr.w	lr, [sp, #4]
     108:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     10c:	b004      	add	sp, #16
     10e:	4770      	bx	lr

00000110 <__udivmoddi4>:
     110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     114:	9e08      	ldr	r6, [sp, #32]
     116:	460d      	mov	r5, r1
     118:	4604      	mov	r4, r0
     11a:	468e      	mov	lr, r1
     11c:	2b00      	cmp	r3, #0
     11e:	f040 8082 	bne.w	226 <CONFIG_FLASH_SIZE+0x26>
     122:	428a      	cmp	r2, r1
     124:	4617      	mov	r7, r2
     126:	d946      	bls.n	1b6 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6c>
     128:	fab2 f282 	clz	r2, r2
     12c:	b14a      	cbz	r2, 142 <CONFIG_IDLE_STACK_SIZE+0x2>
     12e:	f1c2 0120 	rsb	r1, r2, #32
     132:	fa05 f302 	lsl.w	r3, r5, r2
     136:	fa20 f101 	lsr.w	r1, r0, r1
     13a:	4097      	lsls	r7, r2
     13c:	ea41 0e03 	orr.w	lr, r1, r3
     140:	4094      	lsls	r4, r2
     142:	ea4f 4817 	mov.w	r8, r7, lsr #16
     146:	0c23      	lsrs	r3, r4, #16
     148:	fbbe fcf8 	udiv	ip, lr, r8
     14c:	b2b9      	uxth	r1, r7
     14e:	fb08 ee1c 	mls	lr, r8, ip, lr
     152:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     156:	fb0c f001 	mul.w	r0, ip, r1
     15a:	4298      	cmp	r0, r3
     15c:	d90a      	bls.n	174 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x2a>
     15e:	18fb      	adds	r3, r7, r3
     160:	f10c 35ff 	add.w	r5, ip, #4294967295
     164:	f080 8116 	bcs.w	394 <CONFIG_BT_RPA_TIMEOUT+0x10>
     168:	4298      	cmp	r0, r3
     16a:	f240 8113 	bls.w	394 <CONFIG_BT_RPA_TIMEOUT+0x10>
     16e:	f1ac 0c02 	sub.w	ip, ip, #2
     172:	443b      	add	r3, r7
     174:	1a1b      	subs	r3, r3, r0
     176:	b2a4      	uxth	r4, r4
     178:	fbb3 f0f8 	udiv	r0, r3, r8
     17c:	fb08 3310 	mls	r3, r8, r0, r3
     180:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     184:	fb00 f101 	mul.w	r1, r0, r1
     188:	42a1      	cmp	r1, r4
     18a:	d909      	bls.n	1a0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x56>
     18c:	193c      	adds	r4, r7, r4
     18e:	f100 33ff 	add.w	r3, r0, #4294967295
     192:	f080 8101 	bcs.w	398 <CONFIG_BT_RPA_TIMEOUT+0x14>
     196:	42a1      	cmp	r1, r4
     198:	f240 80fe 	bls.w	398 <CONFIG_BT_RPA_TIMEOUT+0x14>
     19c:	3802      	subs	r0, #2
     19e:	443c      	add	r4, r7
     1a0:	1a64      	subs	r4, r4, r1
     1a2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1a6:	2100      	movs	r1, #0
     1a8:	b11e      	cbz	r6, 1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
     1aa:	40d4      	lsrs	r4, r2
     1ac:	2300      	movs	r3, #0
     1ae:	e9c6 4300 	strd	r4, r3, [r6]
     1b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1b6:	b902      	cbnz	r2, 1ba <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x70>
     1b8:	deff      	udf	#255	; 0xff
     1ba:	fab2 f282 	clz	r2, r2
     1be:	2a00      	cmp	r2, #0
     1c0:	d14f      	bne.n	262 <CONFIG_FLASH_SIZE+0x62>
     1c2:	1bcb      	subs	r3, r1, r7
     1c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1c8:	fa1f f887 	uxth.w	r8, r7
     1cc:	2101      	movs	r1, #1
     1ce:	fbb3 fcfe 	udiv	ip, r3, lr
     1d2:	0c25      	lsrs	r5, r4, #16
     1d4:	fb0e 331c 	mls	r3, lr, ip, r3
     1d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1dc:	fb08 f30c 	mul.w	r3, r8, ip
     1e0:	42ab      	cmp	r3, r5
     1e2:	d907      	bls.n	1f4 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xaa>
     1e4:	197d      	adds	r5, r7, r5
     1e6:	f10c 30ff 	add.w	r0, ip, #4294967295
     1ea:	d202      	bcs.n	1f2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa8>
     1ec:	42ab      	cmp	r3, r5
     1ee:	f200 80e7 	bhi.w	3c0 <CONFIG_BT_RPA_TIMEOUT+0x3c>
     1f2:	4684      	mov	ip, r0
     1f4:	1aed      	subs	r5, r5, r3
     1f6:	b2a3      	uxth	r3, r4
     1f8:	fbb5 f0fe 	udiv	r0, r5, lr
     1fc:	fb0e 5510 	mls	r5, lr, r0, r5
     200:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     204:	fb08 f800 	mul.w	r8, r8, r0
     208:	45a0      	cmp	r8, r4
     20a:	d907      	bls.n	21c <CONFIG_FLASH_SIZE+0x1c>
     20c:	193c      	adds	r4, r7, r4
     20e:	f100 33ff 	add.w	r3, r0, #4294967295
     212:	d202      	bcs.n	21a <CONFIG_FLASH_SIZE+0x1a>
     214:	45a0      	cmp	r8, r4
     216:	f200 80d7 	bhi.w	3c8 <CONFIG_BT_RPA_TIMEOUT+0x44>
     21a:	4618      	mov	r0, r3
     21c:	eba4 0408 	sub.w	r4, r4, r8
     220:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     224:	e7c0      	b.n	1a8 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x5e>
     226:	428b      	cmp	r3, r1
     228:	d908      	bls.n	23c <CONFIG_FLASH_SIZE+0x3c>
     22a:	2e00      	cmp	r6, #0
     22c:	f000 80af 	beq.w	38e <CONFIG_BT_RPA_TIMEOUT+0xa>
     230:	2100      	movs	r1, #0
     232:	e9c6 0500 	strd	r0, r5, [r6]
     236:	4608      	mov	r0, r1
     238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     23c:	fab3 f183 	clz	r1, r3
     240:	2900      	cmp	r1, #0
     242:	d14b      	bne.n	2dc <CONFIG_FLASH_SIZE+0xdc>
     244:	42ab      	cmp	r3, r5
     246:	d302      	bcc.n	24e <CONFIG_FLASH_SIZE+0x4e>
     248:	4282      	cmp	r2, r0
     24a:	f200 80b7 	bhi.w	3bc <CONFIG_BT_RPA_TIMEOUT+0x38>
     24e:	1a84      	subs	r4, r0, r2
     250:	eb65 0303 	sbc.w	r3, r5, r3
     254:	2001      	movs	r0, #1
     256:	469e      	mov	lr, r3
     258:	2e00      	cmp	r6, #0
     25a:	d0aa      	beq.n	1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
     25c:	e9c6 4e00 	strd	r4, lr, [r6]
     260:	e7a7      	b.n	1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
     262:	f1c2 0c20 	rsb	ip, r2, #32
     266:	fa01 f302 	lsl.w	r3, r1, r2
     26a:	4097      	lsls	r7, r2
     26c:	fa20 f00c 	lsr.w	r0, r0, ip
     270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     274:	fa21 fc0c 	lsr.w	ip, r1, ip
     278:	4318      	orrs	r0, r3
     27a:	fbbc f1fe 	udiv	r1, ip, lr
     27e:	0c05      	lsrs	r5, r0, #16
     280:	fb0e cc11 	mls	ip, lr, r1, ip
     284:	fa1f f887 	uxth.w	r8, r7
     288:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     28c:	fb01 f308 	mul.w	r3, r1, r8
     290:	42ab      	cmp	r3, r5
     292:	fa04 f402 	lsl.w	r4, r4, r2
     296:	d909      	bls.n	2ac <CONFIG_FLASH_SIZE+0xac>
     298:	197d      	adds	r5, r7, r5
     29a:	f101 3cff 	add.w	ip, r1, #4294967295
     29e:	f080 808b 	bcs.w	3b8 <CONFIG_BT_RPA_TIMEOUT+0x34>
     2a2:	42ab      	cmp	r3, r5
     2a4:	f240 8088 	bls.w	3b8 <CONFIG_BT_RPA_TIMEOUT+0x34>
     2a8:	3902      	subs	r1, #2
     2aa:	443d      	add	r5, r7
     2ac:	1aeb      	subs	r3, r5, r3
     2ae:	b285      	uxth	r5, r0
     2b0:	fbb3 f0fe 	udiv	r0, r3, lr
     2b4:	fb0e 3310 	mls	r3, lr, r0, r3
     2b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2bc:	fb00 f308 	mul.w	r3, r0, r8
     2c0:	42ab      	cmp	r3, r5
     2c2:	d907      	bls.n	2d4 <CONFIG_FLASH_SIZE+0xd4>
     2c4:	197d      	adds	r5, r7, r5
     2c6:	f100 3cff 	add.w	ip, r0, #4294967295
     2ca:	d271      	bcs.n	3b0 <CONFIG_BT_RPA_TIMEOUT+0x2c>
     2cc:	42ab      	cmp	r3, r5
     2ce:	d96f      	bls.n	3b0 <CONFIG_BT_RPA_TIMEOUT+0x2c>
     2d0:	3802      	subs	r0, #2
     2d2:	443d      	add	r5, r7
     2d4:	1aeb      	subs	r3, r5, r3
     2d6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2da:	e778      	b.n	1ce <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x84>
     2dc:	f1c1 0c20 	rsb	ip, r1, #32
     2e0:	408b      	lsls	r3, r1
     2e2:	fa22 f70c 	lsr.w	r7, r2, ip
     2e6:	431f      	orrs	r7, r3
     2e8:	fa20 f40c 	lsr.w	r4, r0, ip
     2ec:	fa05 f301 	lsl.w	r3, r5, r1
     2f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     2f4:	fa25 f50c 	lsr.w	r5, r5, ip
     2f8:	431c      	orrs	r4, r3
     2fa:	0c23      	lsrs	r3, r4, #16
     2fc:	fbb5 f9fe 	udiv	r9, r5, lr
     300:	fa1f f887 	uxth.w	r8, r7
     304:	fb0e 5519 	mls	r5, lr, r9, r5
     308:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     30c:	fb09 fa08 	mul.w	sl, r9, r8
     310:	45aa      	cmp	sl, r5
     312:	fa02 f201 	lsl.w	r2, r2, r1
     316:	fa00 f301 	lsl.w	r3, r0, r1
     31a:	d908      	bls.n	32e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x2e>
     31c:	197d      	adds	r5, r7, r5
     31e:	f109 30ff 	add.w	r0, r9, #4294967295
     322:	d247      	bcs.n	3b4 <CONFIG_BT_RPA_TIMEOUT+0x30>
     324:	45aa      	cmp	sl, r5
     326:	d945      	bls.n	3b4 <CONFIG_BT_RPA_TIMEOUT+0x30>
     328:	f1a9 0902 	sub.w	r9, r9, #2
     32c:	443d      	add	r5, r7
     32e:	eba5 050a 	sub.w	r5, r5, sl
     332:	b2a4      	uxth	r4, r4
     334:	fbb5 f0fe 	udiv	r0, r5, lr
     338:	fb0e 5510 	mls	r5, lr, r0, r5
     33c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     340:	fb00 f808 	mul.w	r8, r0, r8
     344:	45a0      	cmp	r8, r4
     346:	d907      	bls.n	358 <CONFIG_BT_DEVICE_APPEARANCE+0x17>
     348:	193c      	adds	r4, r7, r4
     34a:	f100 35ff 	add.w	r5, r0, #4294967295
     34e:	d22d      	bcs.n	3ac <CONFIG_BT_RPA_TIMEOUT+0x28>
     350:	45a0      	cmp	r8, r4
     352:	d92b      	bls.n	3ac <CONFIG_BT_RPA_TIMEOUT+0x28>
     354:	3802      	subs	r0, #2
     356:	443c      	add	r4, r7
     358:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     35c:	eba4 0408 	sub.w	r4, r4, r8
     360:	fba0 8902 	umull	r8, r9, r0, r2
     364:	454c      	cmp	r4, r9
     366:	46c6      	mov	lr, r8
     368:	464d      	mov	r5, r9
     36a:	d319      	bcc.n	3a0 <CONFIG_BT_RPA_TIMEOUT+0x1c>
     36c:	d016      	beq.n	39c <CONFIG_BT_RPA_TIMEOUT+0x18>
     36e:	b15e      	cbz	r6, 388 <CONFIG_BT_RPA_TIMEOUT+0x4>
     370:	ebb3 020e 	subs.w	r2, r3, lr
     374:	eb64 0405 	sbc.w	r4, r4, r5
     378:	fa04 fc0c 	lsl.w	ip, r4, ip
     37c:	40ca      	lsrs	r2, r1
     37e:	ea4c 0202 	orr.w	r2, ip, r2
     382:	40cc      	lsrs	r4, r1
     384:	e9c6 2400 	strd	r2, r4, [r6]
     388:	2100      	movs	r1, #0
     38a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     38e:	4631      	mov	r1, r6
     390:	4630      	mov	r0, r6
     392:	e70e      	b.n	1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
     394:	46ac      	mov	ip, r5
     396:	e6ed      	b.n	174 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x2a>
     398:	4618      	mov	r0, r3
     39a:	e701      	b.n	1a0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x56>
     39c:	4543      	cmp	r3, r8
     39e:	d2e6      	bcs.n	36e <CONFIG_BT_DEVICE_APPEARANCE+0x2d>
     3a0:	ebb8 0e02 	subs.w	lr, r8, r2
     3a4:	eb69 0507 	sbc.w	r5, r9, r7
     3a8:	3801      	subs	r0, #1
     3aa:	e7e0      	b.n	36e <CONFIG_BT_DEVICE_APPEARANCE+0x2d>
     3ac:	4628      	mov	r0, r5
     3ae:	e7d3      	b.n	358 <CONFIG_BT_DEVICE_APPEARANCE+0x17>
     3b0:	4660      	mov	r0, ip
     3b2:	e78f      	b.n	2d4 <CONFIG_FLASH_SIZE+0xd4>
     3b4:	4681      	mov	r9, r0
     3b6:	e7ba      	b.n	32e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x2e>
     3b8:	4661      	mov	r1, ip
     3ba:	e777      	b.n	2ac <CONFIG_FLASH_SIZE+0xac>
     3bc:	4608      	mov	r0, r1
     3be:	e74b      	b.n	258 <CONFIG_FLASH_SIZE+0x58>
     3c0:	f1ac 0c02 	sub.w	ip, ip, #2
     3c4:	443d      	add	r5, r7
     3c6:	e715      	b.n	1f4 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xaa>
     3c8:	3802      	subs	r0, #2
     3ca:	443c      	add	r4, r7
     3cc:	e726      	b.n	21c <CONFIG_FLASH_SIZE+0x1c>
     3ce:	bf00      	nop

000003d0 <__aeabi_idiv0>:
     3d0:	4770      	bx	lr
     3d2:	bf00      	nop

000003d4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
     3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3d6:	4615      	mov	r5, r2
     3d8:	4a0a      	ldr	r2, [pc, #40]	; (404 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x4>)
     3da:	461c      	mov	r4, r3
     3dc:	6856      	ldr	r6, [r2, #4]
     3de:	b12e      	cbz	r6, 3ec <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x4>
     3e0:	b001      	add	sp, #4
     3e2:	462a      	mov	r2, r5
     3e4:	46b4      	mov	ip, r6
     3e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
     3ea:	4760      	bx	ip
     3ec:	2000      	movs	r0, #0
     3ee:	f88d 0000 	strb.w	r0, [sp]
     3f2:	4668      	mov	r0, sp
     3f4:	f00b f9da 	bl	b7ac <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
     3f8:	f89d 0000 	ldrb.w	r0, [sp]
     3fc:	1a28      	subs	r0, r5, r0
     3fe:	7020      	strb	r0, [r4, #0]
     400:	2000      	movs	r0, #0
     402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     404:	20000000 	.word	0x20000000
     408:	2800      	cmp	r0, #0
     40a:	d019      	beq.n	440 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x40>
     40c:	7803      	ldrb	r3, [r0, #0]
     40e:	4913      	ldr	r1, [pc, #76]	; (45c <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x5c>)
     410:	4a13      	ldr	r2, [pc, #76]	; (460 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x60>)
     412:	b113      	cbz	r3, 41a <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x1a>
     414:	2b01      	cmp	r3, #1
     416:	d00e      	beq.n	436 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x36>
     418:	e011      	b.n	43e <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x3e>
     41a:	7903      	ldrb	r3, [r0, #4]
     41c:	2b01      	cmp	r3, #1
     41e:	d000      	beq.n	422 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x22>
     420:	b96b      	cbnz	r3, 43e <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x3e>
     422:	7943      	ldrb	r3, [r0, #5]
     424:	b10b      	cbz	r3, 42a <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x2a>
     426:	2b01      	cmp	r3, #1
     428:	d109      	bne.n	43e <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x3e>
     42a:	6883      	ldr	r3, [r0, #8]
     42c:	3b64      	subs	r3, #100	; 0x64
     42e:	428b      	cmp	r3, r1
     430:	d205      	bcs.n	43e <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x3e>
     432:	68c0      	ldr	r0, [r0, #12]
     434:	e00e      	b.n	454 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x54>
     436:	7903      	ldrb	r3, [r0, #4]
     438:	2b01      	cmp	r3, #1
     43a:	d002      	beq.n	442 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x42>
     43c:	b10b      	cbz	r3, 442 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x42>
     43e:	2000      	movs	r0, #0
     440:	4770      	bx	lr
     442:	7943      	ldrb	r3, [r0, #5]
     444:	b10b      	cbz	r3, 44a <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x4a>
     446:	2b01      	cmp	r3, #1
     448:	d1f9      	bne.n	43e <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x3e>
     44a:	68c3      	ldr	r3, [r0, #12]
     44c:	3b64      	subs	r3, #100	; 0x64
     44e:	428b      	cmp	r3, r1
     450:	d2f5      	bcs.n	43e <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x3e>
     452:	6880      	ldr	r0, [r0, #8]
     454:	4290      	cmp	r0, r2
     456:	d8f2      	bhi.n	43e <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x3e>
     458:	2001      	movs	r0, #1
     45a:	4770      	bx	lr
     45c:	0001863d 	.word	0x0001863d
     460:	07a11fff 	.word	0x07a11fff
     464:	b510      	push	{r4, lr}
     466:	4c05      	ldr	r4, [pc, #20]	; (47c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x8>)
     468:	6820      	ldr	r0, [r4, #0]
     46a:	b110      	cbz	r0, 472 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x72>
     46c:	4780      	blx	r0
     46e:	2000      	movs	r0, #0
     470:	6020      	str	r0, [r4, #0]
     472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     476:	f001 bfd5 	b.w	2424 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
     47a:	0000      	.short	0x0000
     47c:	20000008 	.word	0x20000008

00000480 <mpsl_timeslot_session_open>:
     480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     484:	460e      	mov	r6, r1
     486:	0005      	movs	r5, r0
     488:	d004      	beq.n	494 <mpsl_timeslot_session_open+0x14>
     48a:	f000 f845 	bl	518 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
     48e:	4607      	mov	r7, r0
     490:	2400      	movs	r4, #0
     492:	e00a      	b.n	4aa <mpsl_timeslot_session_open+0x2a>
     494:	f06f 0015 	mvn.w	r0, #21
     498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     49c:	4620      	mov	r0, r4
     49e:	f000 f841 	bl	524 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
     4a2:	7880      	ldrb	r0, [r0, #2]
     4a4:	b138      	cbz	r0, 4b6 <mpsl_timeslot_session_open+0x36>
     4a6:	1c64      	adds	r4, r4, #1
     4a8:	b2e4      	uxtb	r4, r4
     4aa:	42bc      	cmp	r4, r7
     4ac:	d3f6      	bcc.n	49c <mpsl_timeslot_session_open+0x1c>
     4ae:	bf00      	nop
     4b0:	f06f 000b 	mvn.w	r0, #11
     4b4:	e7f0      	b.n	498 <mpsl_timeslot_session_open+0x18>
     4b6:	4627      	mov	r7, r4
     4b8:	2cff      	cmp	r4, #255	; 0xff
     4ba:	d0f9      	beq.n	4b0 <mpsl_timeslot_session_open+0x30>
     4bc:	4620      	mov	r0, r4
     4be:	f000 f831 	bl	524 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
     4c2:	4604      	mov	r4, r0
     4c4:	f00b fb15 	bl	baf2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x346>
     4c8:	7127      	strb	r7, [r4, #4]
     4ca:	4621      	mov	r1, r4
     4cc:	4807      	ldr	r0, [pc, #28]	; (4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>)
     4ce:	f001 ff81 	bl	23d4 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
     4d2:	70e0      	strb	r0, [r4, #3]
     4d4:	2820      	cmp	r0, #32
     4d6:	d005      	beq.n	4e4 <mpsl_timeslot_session_open+0x64>
     4d8:	2001      	movs	r0, #1
     4da:	60a5      	str	r5, [r4, #8]
     4dc:	70a0      	strb	r0, [r4, #2]
     4de:	7037      	strb	r7, [r6, #0]
     4e0:	2000      	movs	r0, #0
     4e2:	e7d9      	b.n	498 <mpsl_timeslot_session_open+0x18>
     4e4:	f06f 0022 	mvn.w	r0, #34	; 0x22
     4e8:	e7d6      	b.n	498 <mpsl_timeslot_session_open+0x18>
     4ea:	0000      	.short	0x0000
     4ec:	0000b853 	.word	0x0000b853

000004f0 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>:
     4f0:	b510      	push	{r4, lr}
     4f2:	0782      	lsls	r2, r0, #30
     4f4:	d002      	beq.n	4fc <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0xc>
     4f6:	f06f 000d 	mvn.w	r0, #13
     4fa:	bd10      	pop	{r4, pc}
     4fc:	4a05      	ldr	r2, [pc, #20]	; (514 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x24>)
     4fe:	7011      	strb	r1, [r2, #0]
     500:	6050      	str	r0, [r2, #4]
     502:	b128      	cbz	r0, 510 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x20>
     504:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
     508:	008a      	lsls	r2, r1, #2
     50a:	2100      	movs	r1, #0
     50c:	f00b fd77 	bl	bffe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     510:	2000      	movs	r0, #0
     512:	bd10      	pop	{r4, pc}
     514:	2000000c 	.word	0x2000000c

00000518 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     518:	4801      	ldr	r0, [pc, #4]	; (520 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     51a:	7800      	ldrb	r0, [r0, #0]
     51c:	4770      	bx	lr
     51e:	0000      	.short	0x0000
     520:	2000000c 	.word	0x2000000c

00000524 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     524:	4905      	ldr	r1, [pc, #20]	; (53c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
     526:	780a      	ldrb	r2, [r1, #0]
     528:	4290      	cmp	r0, r2
     52a:	d301      	bcc.n	530 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     52c:	2000      	movs	r0, #0
     52e:	4770      	bx	lr
     530:	6849      	ldr	r1, [r1, #4]
     532:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
     536:	eb01 0080 	add.w	r0, r1, r0, lsl #2
     53a:	4770      	bx	lr
     53c:	2000000c 	.word	0x2000000c
     540:	b570      	push	{r4, r5, r6, lr}
     542:	4605      	mov	r5, r0
     544:	2a20      	cmp	r2, #32
     546:	d027      	beq.n	598 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x74>
     548:	4819      	ldr	r0, [pc, #100]	; (5b0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c>)
     54a:	4c1a      	ldr	r4, [pc, #104]	; (5b4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x90>)
     54c:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     550:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     554:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     558:	2920      	cmp	r1, #32
     55a:	d022      	beq.n	5a2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7e>
     55c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     560:	7840      	ldrb	r0, [r0, #1]
     562:	784c      	ldrb	r4, [r1, #1]
     564:	7048      	strb	r0, [r1, #1]
     566:	4620      	mov	r0, r4
     568:	4601      	mov	r1, r0
     56a:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     56e:	4291      	cmp	r1, r2
     570:	7005      	strb	r5, [r0, #0]
     572:	7840      	ldrb	r0, [r0, #1]
     574:	d1f8      	bne.n	568 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x44>
     576:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
     57a:	2a20      	cmp	r2, #32
     57c:	bf1a      	itte	ne
     57e:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     582:	7054      	strbne	r4, [r2, #1]
     584:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
     588:	2220      	movs	r2, #32
     58a:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     58e:	f88c 2001 	strb.w	r2, [ip, #1]
     592:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
     596:	bd70      	pop	{r4, r5, r6, pc}
     598:	f240 217e 	movw	r1, #638	; 0x27e
     59c:	2070      	movs	r0, #112	; 0x70
     59e:	f003 f999 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     5a2:	f893 4020 	ldrb.w	r4, [r3, #32]
     5a6:	7840      	ldrb	r0, [r0, #1]
     5a8:	f883 0020 	strb.w	r0, [r3, #32]
     5ac:	e7db      	b.n	566 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x42>
     5ae:	0000      	.short	0x0000
     5b0:	20000fcc 	.word	0x20000fcc
     5b4:	2000104c 	.word	0x2000104c
     5b8:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5bc:	b085      	sub	sp, #20
     5be:	4615      	mov	r5, r2
     5c0:	460c      	mov	r4, r1
     5c2:	f002 f8ef 	bl	27a4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     5c6:	4428      	add	r0, r5
     5c8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     5cc:	9002      	str	r0, [sp, #8]
     5ce:	6821      	ldr	r1, [r4, #0]
     5d0:	1a08      	subs	r0, r1, r0
     5d2:	0200      	lsls	r0, r0, #8
     5d4:	17c1      	asrs	r1, r0, #31
     5d6:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     5da:	1200      	asrs	r0, r0, #8
     5dc:	2800      	cmp	r0, #0
     5de:	f300 80d5 	bgt.w	78c <CONFIG_BT_HCI_TX_STACK_SIZE+0x18c>
     5e2:	48ac      	ldr	r0, [pc, #688]	; (894 <CONFIG_ISR_STACK_SIZE+0x94>)
     5e4:	9f08      	ldr	r7, [sp, #32]
     5e6:	4eac      	ldr	r6, [pc, #688]	; (898 <CONFIG_ISR_STACK_SIZE+0x98>)
     5e8:	eb00 0087 	add.w	r0, r0, r7, lsl #2
     5ec:	9003      	str	r0, [sp, #12]
     5ee:	f890 5020 	ldrb.w	r5, [r0, #32]
     5f2:	2020      	movs	r0, #32
     5f4:	46e9      	mov	r9, sp
     5f6:	f10d 0804 	add.w	r8, sp, #4
     5fa:	f88d 0000 	strb.w	r0, [sp]
     5fe:	f506 7a40 	add.w	sl, r6, #768	; 0x300
     602:	2d20      	cmp	r5, #32
     604:	bf18      	it	ne
     606:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
     60a:	d025      	beq.n	658 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     60c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     610:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
     614:	6822      	ldr	r2, [r4, #0]
     616:	68c1      	ldr	r1, [r0, #12]
     618:	1a51      	subs	r1, r2, r1
     61a:	0209      	lsls	r1, r1, #8
     61c:	17ca      	asrs	r2, r1, #31
     61e:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     622:	3008      	adds	r0, #8
     624:	1209      	asrs	r1, r1, #8
     626:	d417      	bmi.n	658 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     628:	8961      	ldrh	r1, [r4, #10]
     62a:	b171      	cbz	r1, 64a <CONFIG_BT_HCI_TX_STACK_SIZE+0x4a>
     62c:	8941      	ldrh	r1, [r0, #10]
     62e:	b961      	cbnz	r1, 64a <CONFIG_BT_HCI_TX_STACK_SIZE+0x4a>
     630:	f000 fdb4 	bl	119c <CONFIG_BT_RX_STACK_SIZE+0x19c>
     634:	f002 f8b6 	bl	27a4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     638:	6821      	ldr	r1, [r4, #0]
     63a:	1a08      	subs	r0, r1, r0
     63c:	0200      	lsls	r0, r0, #8
     63e:	17c1      	asrs	r1, r0, #31
     640:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     644:	1200      	asrs	r0, r0, #8
     646:	2833      	cmp	r0, #51	; 0x33
     648:	db06      	blt.n	658 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     64a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     64e:	f889 5000 	strb.w	r5, [r9]
     652:	7845      	ldrb	r5, [r0, #1]
     654:	2d20      	cmp	r5, #32
     656:	d1d9      	bne.n	60c <CONFIG_BT_HCI_TX_STACK_SIZE+0xc>
     658:	f899 0000 	ldrb.w	r0, [r9]
     65c:	f888 0000 	strb.w	r0, [r8]
     660:	46a1      	mov	r9, r4
     662:	2d20      	cmp	r5, #32
     664:	bf1c      	itt	ne
     666:	488d      	ldrne	r0, [pc, #564]	; (89c <CONFIG_ISR_STACK_SIZE+0x9c>)
     668:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
     66c:	f000 810e 	beq.w	88c <CONFIG_ISR_STACK_SIZE+0x8c>
     670:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     674:	eb06 0ac1 	add.w	sl, r6, r1, lsl #3
     678:	f8d9 2004 	ldr.w	r2, [r9, #4]
     67c:	f8da 1008 	ldr.w	r1, [sl, #8]
     680:	4648      	mov	r0, r9
     682:	1a89      	subs	r1, r1, r2
     684:	0209      	lsls	r1, r1, #8
     686:	17ca      	asrs	r2, r1, #31
     688:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     68c:	f10a 0708 	add.w	r7, sl, #8
     690:	1209      	asrs	r1, r1, #8
     692:	d415      	bmi.n	6c0 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc0>
     694:	8979      	ldrh	r1, [r7, #10]
     696:	2900      	cmp	r1, #0
     698:	f000 80f8 	beq.w	88c <CONFIG_ISR_STACK_SIZE+0x8c>
     69c:	8941      	ldrh	r1, [r0, #10]
     69e:	2900      	cmp	r1, #0
     6a0:	f040 80f4 	bne.w	88c <CONFIG_ISR_STACK_SIZE+0x8c>
     6a4:	f000 fd7a 	bl	119c <CONFIG_BT_RX_STACK_SIZE+0x19c>
     6a8:	f002 f87c 	bl	27a4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     6ac:	6839      	ldr	r1, [r7, #0]
     6ae:	1a08      	subs	r0, r1, r0
     6b0:	0200      	lsls	r0, r0, #8
     6b2:	17c1      	asrs	r1, r0, #31
     6b4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     6b8:	1200      	asrs	r0, r0, #8
     6ba:	2833      	cmp	r0, #51	; 0x33
     6bc:	f280 80e6 	bge.w	88c <CONFIG_ISR_STACK_SIZE+0x8c>
     6c0:	f888 5000 	strb.w	r5, [r8]
     6c4:	f89a 1014 	ldrb.w	r1, [sl, #20]
     6c8:	f899 000c 	ldrb.w	r0, [r9, #12]
     6cc:	4281      	cmp	r1, r0
     6ce:	d906      	bls.n	6de <CONFIG_BT_HCI_TX_STACK_SIZE+0xde>
     6d0:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     6d4:	7845      	ldrb	r5, [r0, #1]
     6d6:	2d20      	cmp	r5, #32
     6d8:	d1ca      	bne.n	670 <CONFIG_BT_HCI_TX_STACK_SIZE+0x70>
     6da:	f000 b8d7 	b.w	88c <CONFIG_ISR_STACK_SIZE+0x8c>
     6de:	f89d 0004 	ldrb.w	r0, [sp, #4]
     6e2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     6e6:	eb06 05c0 	add.w	r5, r6, r0, lsl #3
     6ea:	8a68      	ldrh	r0, [r5, #18]
     6ec:	68ef      	ldr	r7, [r5, #12]
     6ee:	2800      	cmp	r0, #0
     6f0:	d143      	bne.n	77a <CONFIG_BT_HCI_TX_STACK_SIZE+0x17a>
     6f2:	8960      	ldrh	r0, [r4, #10]
     6f4:	b3e8      	cbz	r0, 772 <CONFIG_BT_HCI_TX_STACK_SIZE+0x172>
     6f6:	68a8      	ldr	r0, [r5, #8]
     6f8:	f00b fa99 	bl	bc2e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     6fc:	8a69      	ldrh	r1, [r5, #18]
     6fe:	7c2a      	ldrb	r2, [r5, #16]
     700:	4b67      	ldr	r3, [pc, #412]	; (8a0 <CONFIG_ISR_STACK_SIZE+0xa0>)
     702:	4411      	add	r1, r2
     704:	1c49      	adds	r1, r1, #1
     706:	1842      	adds	r2, r0, r1
     708:	4298      	cmp	r0, r3
     70a:	d904      	bls.n	716 <CONFIG_BT_HCI_TX_STACK_SIZE+0x116>
     70c:	f240 6109 	movw	r1, #1545	; 0x609
     710:	2070      	movs	r0, #112	; 0x70
     712:	f003 f8df 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     716:	4863      	ldr	r0, [pc, #396]	; (8a4 <CONFIG_ISR_STACK_SIZE+0xa4>)
     718:	4281      	cmp	r1, r0
     71a:	dd04      	ble.n	726 <CONFIG_BT_HCI_TX_STACK_SIZE+0x126>
     71c:	f240 610a 	movw	r1, #1546	; 0x60a
     720:	2070      	movs	r0, #112	; 0x70
     722:	f003 f8d7 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     726:	4860      	ldr	r0, [pc, #384]	; (8a8 <CONFIG_ISR_STACK_SIZE+0xa8>)
     728:	4281      	cmp	r1, r0
     72a:	da04      	bge.n	736 <CONFIG_BT_HCI_TX_STACK_SIZE+0x136>
     72c:	f240 610b 	movw	r1, #1547	; 0x60b
     730:	2070      	movs	r0, #112	; 0x70
     732:	f003 f8cf 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     736:	485d      	ldr	r0, [pc, #372]	; (8ac <CONFIG_ISR_STACK_SIZE+0xac>)
     738:	4290      	cmp	r0, r2
     73a:	bfdc      	itt	le
     73c:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
     740:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
     744:	dd05      	ble.n	752 <CONFIG_BT_HCI_TX_STACK_SIZE+0x152>
     746:	2a00      	cmp	r2, #0
     748:	bfbc      	itt	lt
     74a:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
     74e:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
     752:	4610      	mov	r0, r2
     754:	f002 f826 	bl	27a4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     758:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     75c:	1a78      	subs	r0, r7, r1
     75e:	0200      	lsls	r0, r0, #8
     760:	17c2      	asrs	r2, r0, #31
     762:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     766:	1200      	asrs	r0, r0, #8
     768:	2833      	cmp	r0, #51	; 0x33
     76a:	bfb8      	it	lt
     76c:	f101 0033 	addlt.w	r0, r1, #51	; 0x33
     770:	e000      	b.n	774 <CONFIG_BT_HCI_TX_STACK_SIZE+0x174>
     772:	e002      	b.n	77a <CONFIG_BT_HCI_TX_STACK_SIZE+0x17a>
     774:	bfb8      	it	lt
     776:	f020 477f 	biclt.w	r7, r0, #4278190080	; 0xff000000
     77a:	9802      	ldr	r0, [sp, #8]
     77c:	1a38      	subs	r0, r7, r0
     77e:	0200      	lsls	r0, r0, #8
     780:	17c1      	asrs	r1, r0, #31
     782:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     786:	1200      	asrs	r0, r0, #8
     788:	2800      	cmp	r0, #0
     78a:	dd03      	ble.n	794 <CONFIG_BT_HCI_TX_STACK_SIZE+0x194>
     78c:	b009      	add	sp, #36	; 0x24
     78e:	2000      	movs	r0, #0
     790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     794:	e9d4 1000 	ldrd	r1, r0, [r4]
     798:	1a40      	subs	r0, r0, r1
     79a:	4438      	add	r0, r7
     79c:	f027 417f 	bic.w	r1, r7, #4278190080	; 0xff000000
     7a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     7a4:	e9c4 1000 	strd	r1, r0, [r4]
     7a8:	9803      	ldr	r0, [sp, #12]
     7aa:	f8dd 8020 	ldr.w	r8, [sp, #32]
     7ae:	466f      	mov	r7, sp
     7b0:	f890 5020 	ldrb.w	r5, [r0, #32]
     7b4:	2020      	movs	r0, #32
     7b6:	f10d 0a04 	add.w	sl, sp, #4
     7ba:	f88d 0000 	strb.w	r0, [sp]
     7be:	2d20      	cmp	r5, #32
     7c0:	bf1c      	itt	ne
     7c2:	4836      	ldrne	r0, [pc, #216]	; (89c <CONFIG_ISR_STACK_SIZE+0x9c>)
     7c4:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
     7c8:	d025      	beq.n	816 <CONFIG_ISR_STACK_SIZE+0x16>
     7ca:	bf00      	nop
     7cc:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     7d0:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
     7d4:	6822      	ldr	r2, [r4, #0]
     7d6:	68c1      	ldr	r1, [r0, #12]
     7d8:	1a51      	subs	r1, r2, r1
     7da:	0209      	lsls	r1, r1, #8
     7dc:	17ca      	asrs	r2, r1, #31
     7de:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     7e2:	3008      	adds	r0, #8
     7e4:	1209      	asrs	r1, r1, #8
     7e6:	d416      	bmi.n	816 <CONFIG_ISR_STACK_SIZE+0x16>
     7e8:	8961      	ldrh	r1, [r4, #10]
     7ea:	b171      	cbz	r1, 80a <CONFIG_ISR_STACK_SIZE+0xa>
     7ec:	8941      	ldrh	r1, [r0, #10]
     7ee:	b961      	cbnz	r1, 80a <CONFIG_ISR_STACK_SIZE+0xa>
     7f0:	f000 fcd4 	bl	119c <CONFIG_BT_RX_STACK_SIZE+0x19c>
     7f4:	f001 ffd6 	bl	27a4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     7f8:	6821      	ldr	r1, [r4, #0]
     7fa:	1a08      	subs	r0, r1, r0
     7fc:	0200      	lsls	r0, r0, #8
     7fe:	17c1      	asrs	r1, r0, #31
     800:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     804:	1200      	asrs	r0, r0, #8
     806:	2833      	cmp	r0, #51	; 0x33
     808:	db05      	blt.n	816 <CONFIG_ISR_STACK_SIZE+0x16>
     80a:	eb09 0045 	add.w	r0, r9, r5, lsl #1
     80e:	703d      	strb	r5, [r7, #0]
     810:	7845      	ldrb	r5, [r0, #1]
     812:	2d20      	cmp	r5, #32
     814:	d1da      	bne.n	7cc <CONFIG_BT_HCI_TX_STACK_SIZE+0x1cc>
     816:	7838      	ldrb	r0, [r7, #0]
     818:	f88a 0000 	strb.w	r0, [sl]
     81c:	4627      	mov	r7, r4
     81e:	2d20      	cmp	r5, #32
     820:	bf1c      	itt	ne
     822:	481e      	ldrne	r0, [pc, #120]	; (89c <CONFIG_ISR_STACK_SIZE+0x9c>)
     824:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     828:	d030      	beq.n	88c <CONFIG_ISR_STACK_SIZE+0x8c>
     82a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     82e:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
     832:	6879      	ldr	r1, [r7, #4]
     834:	f8d9 2008 	ldr.w	r2, [r9, #8]
     838:	4638      	mov	r0, r7
     83a:	1a51      	subs	r1, r2, r1
     83c:	0209      	lsls	r1, r1, #8
     83e:	17ca      	asrs	r2, r1, #31
     840:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     844:	f109 0808 	add.w	r8, r9, #8
     848:	1209      	asrs	r1, r1, #8
     84a:	d412      	bmi.n	872 <CONFIG_ISR_STACK_SIZE+0x72>
     84c:	f8b8 100a 	ldrh.w	r1, [r8, #10]
     850:	b1e1      	cbz	r1, 88c <CONFIG_ISR_STACK_SIZE+0x8c>
     852:	8941      	ldrh	r1, [r0, #10]
     854:	b9d1      	cbnz	r1, 88c <CONFIG_ISR_STACK_SIZE+0x8c>
     856:	f000 fca1 	bl	119c <CONFIG_BT_RX_STACK_SIZE+0x19c>
     85a:	f001 ffa3 	bl	27a4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     85e:	f8d8 1000 	ldr.w	r1, [r8]
     862:	1a08      	subs	r0, r1, r0
     864:	0200      	lsls	r0, r0, #8
     866:	17c1      	asrs	r1, r0, #31
     868:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     86c:	1200      	asrs	r0, r0, #8
     86e:	2833      	cmp	r0, #51	; 0x33
     870:	da0c      	bge.n	88c <CONFIG_ISR_STACK_SIZE+0x8c>
     872:	f88a 5000 	strb.w	r5, [sl]
     876:	f899 0014 	ldrb.w	r0, [r9, #20]
     87a:	7b39      	ldrb	r1, [r7, #12]
     87c:	4288      	cmp	r0, r1
     87e:	f67f af2e 	bls.w	6de <CONFIG_BT_HCI_TX_STACK_SIZE+0xde>
     882:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     886:	7845      	ldrb	r5, [r0, #1]
     888:	2d20      	cmp	r5, #32
     88a:	d1ce      	bne.n	82a <CONFIG_ISR_STACK_SIZE+0x2a>
     88c:	b009      	add	sp, #36	; 0x24
     88e:	2001      	movs	r0, #1
     890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     894:	2000104c 	.word	0x2000104c
     898:	20000ccc 	.word	0x20000ccc
     89c:	20000fcc 	.word	0x20000fcc
     8a0:	1e847fff 	.word	0x1e847fff
     8a4:	07a12000 	.word	0x07a12000
     8a8:	f85ee000 	.word	0xf85ee000
     8ac:	1e848000 	.word	0x1e848000
     8b0:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     8b4:	4604      	mov	r4, r0
     8b6:	483c      	ldr	r0, [pc, #240]	; (9a8 <__data_size+0xda>)
     8b8:	460e      	mov	r6, r1
     8ba:	eb00 0086 	add.w	r0, r0, r6, lsl #2
     8be:	4f3b      	ldr	r7, [pc, #236]	; (9ac <__data_size+0xde>)
     8c0:	f890 5020 	ldrb.w	r5, [r0, #32]
     8c4:	2020      	movs	r0, #32
     8c6:	4698      	mov	r8, r3
     8c8:	4692      	mov	sl, r2
     8ca:	7010      	strb	r0, [r2, #0]
     8cc:	f507 7940 	add.w	r9, r7, #768	; 0x300
     8d0:	2d20      	cmp	r5, #32
     8d2:	bf18      	it	ne
     8d4:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
     8d8:	d028      	beq.n	92c <__data_size+0x5e>
     8da:	bf00      	nop
     8dc:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     8e0:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
     8e4:	f100 0108 	add.w	r1, r0, #8
     8e8:	68c0      	ldr	r0, [r0, #12]
     8ea:	6822      	ldr	r2, [r4, #0]
     8ec:	1a10      	subs	r0, r2, r0
     8ee:	0200      	lsls	r0, r0, #8
     8f0:	17c2      	asrs	r2, r0, #31
     8f2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     8f6:	1200      	asrs	r0, r0, #8
     8f8:	d418      	bmi.n	92c <__data_size+0x5e>
     8fa:	8960      	ldrh	r0, [r4, #10]
     8fc:	b178      	cbz	r0, 91e <__data_size+0x50>
     8fe:	8948      	ldrh	r0, [r1, #10]
     900:	b968      	cbnz	r0, 91e <__data_size+0x50>
     902:	4608      	mov	r0, r1
     904:	f000 fc4a 	bl	119c <CONFIG_BT_RX_STACK_SIZE+0x19c>
     908:	f001 ff4c 	bl	27a4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     90c:	6821      	ldr	r1, [r4, #0]
     90e:	1a08      	subs	r0, r1, r0
     910:	0200      	lsls	r0, r0, #8
     912:	17c1      	asrs	r1, r0, #31
     914:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     918:	1200      	asrs	r0, r0, #8
     91a:	2833      	cmp	r0, #51	; 0x33
     91c:	db06      	blt.n	92c <__data_size+0x5e>
     91e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     922:	f88a 5000 	strb.w	r5, [sl]
     926:	7845      	ldrb	r5, [r0, #1]
     928:	2d20      	cmp	r5, #32
     92a:	d1d7      	bne.n	8dc <__data_size+0xe>
     92c:	f89a 0000 	ldrb.w	r0, [sl]
     930:	f888 0000 	strb.w	r0, [r8]
     934:	2d20      	cmp	r5, #32
     936:	bf18      	it	ne
     938:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
     93c:	d030      	beq.n	9a0 <__data_size+0xd2>
     93e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     942:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
     946:	6861      	ldr	r1, [r4, #4]
     948:	f8d9 2008 	ldr.w	r2, [r9, #8]
     94c:	4620      	mov	r0, r4
     94e:	1a51      	subs	r1, r2, r1
     950:	0209      	lsls	r1, r1, #8
     952:	17ca      	asrs	r2, r1, #31
     954:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     958:	f109 0608 	add.w	r6, r9, #8
     95c:	1209      	asrs	r1, r1, #8
     95e:	d410      	bmi.n	982 <__data_size+0xb4>
     960:	8971      	ldrh	r1, [r6, #10]
     962:	b1e9      	cbz	r1, 9a0 <__data_size+0xd2>
     964:	8941      	ldrh	r1, [r0, #10]
     966:	b9d9      	cbnz	r1, 9a0 <__data_size+0xd2>
     968:	f000 fc18 	bl	119c <CONFIG_BT_RX_STACK_SIZE+0x19c>
     96c:	f001 ff1a 	bl	27a4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     970:	6831      	ldr	r1, [r6, #0]
     972:	1a08      	subs	r0, r1, r0
     974:	0200      	lsls	r0, r0, #8
     976:	17c1      	asrs	r1, r0, #31
     978:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     97c:	1200      	asrs	r0, r0, #8
     97e:	2833      	cmp	r0, #51	; 0x33
     980:	da0e      	bge.n	9a0 <__data_size+0xd2>
     982:	f888 5000 	strb.w	r5, [r8]
     986:	f899 0014 	ldrb.w	r0, [r9, #20]
     98a:	7b21      	ldrb	r1, [r4, #12]
     98c:	4288      	cmp	r0, r1
     98e:	d802      	bhi.n	996 <__data_size+0xc8>
     990:	2000      	movs	r0, #0
     992:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     996:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
     99a:	7845      	ldrb	r5, [r0, #1]
     99c:	2d20      	cmp	r5, #32
     99e:	d1ce      	bne.n	93e <__data_size+0x70>
     9a0:	2001      	movs	r0, #1
     9a2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     9a6:	0000      	.short	0x0000
     9a8:	2000104c 	.word	0x2000104c
     9ac:	20000ccc 	.word	0x20000ccc
     9b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9b4:	b098      	sub	sp, #96	; 0x60
     9b6:	4616      	mov	r6, r2
     9b8:	460d      	mov	r5, r1
     9ba:	f04f 0800 	mov.w	r8, #0
     9be:	f04f 0b01 	mov.w	fp, #1
     9c2:	f002 f971 	bl	2ca8 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
     9c6:	4604      	mov	r4, r0
     9c8:	2d01      	cmp	r5, #1
     9ca:	bf18      	it	ne
     9cc:	2d02      	cmpne	r5, #2
     9ce:	d005      	beq.n	9dc <__data_size+0x10e>
     9d0:	f640 1194 	movw	r1, #2452	; 0x994
     9d4:	f04f 0070 	mov.w	r0, #112	; 0x70
     9d8:	f002 ff7c 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     9dc:	49f9      	ldr	r1, [pc, #996]	; (dc4 <__data_size+0x4f6>)
     9de:	2001      	movs	r0, #1
     9e0:	6008      	str	r0, [r1, #0]
     9e2:	49f9      	ldr	r1, [pc, #996]	; (dc8 <__data_size+0x4fa>)
     9e4:	6889      	ldr	r1, [r1, #8]
     9e6:	6008      	str	r0, [r1, #0]
     9e8:	2000      	movs	r0, #0
     9ea:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
     9ee:	900c      	str	r0, [sp, #48]	; 0x30
     9f0:	1e40      	subs	r0, r0, #1
     9f2:	900e      	str	r0, [sp, #56]	; 0x38
     9f4:	49f5      	ldr	r1, [pc, #980]	; (dcc <__data_size+0x4fe>)
     9f6:	eb06 0046 	add.w	r0, r6, r6, lsl #1
     9fa:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
     9fe:	3308      	adds	r3, #8
     a00:	af0f      	add	r7, sp, #60	; 0x3c
     a02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     a04:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
     a08:	a80f      	add	r0, sp, #60	; 0x3c
     a0a:	f000 fbc7 	bl	119c <CONFIG_BT_RX_STACK_SIZE+0x19c>
     a0e:	900d      	str	r0, [sp, #52]	; 0x34
     a10:	48ee      	ldr	r0, [pc, #952]	; (dcc <__data_size+0x4fe>)
     a12:	f8bd 9046 	ldrh.w	r9, [sp, #70]	; 0x46
     a16:	f8b0 039c 	ldrh.w	r0, [r0, #924]	; 0x39c
     a1a:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
     a1e:	f1b9 0f00 	cmp.w	r9, #0
     a22:	bf14      	ite	ne
     a24:	f04f 0a01 	movne.w	sl, #1
     a28:	f04f 0a00 	moveq.w	sl, #0
     a2c:	980f      	ldr	r0, [sp, #60]	; 0x3c
     a2e:	9014      	str	r0, [sp, #80]	; 0x50
     a30:	f1ba 0f00 	cmp.w	sl, #0
     a34:	d009      	beq.n	a4a <__data_size+0x17c>
     a36:	48e6      	ldr	r0, [pc, #920]	; (dd0 <__data_size+0x502>)
     a38:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
     a3c:	b928      	cbnz	r0, a4a <__data_size+0x17c>
     a3e:	f002 fed1 	bl	37e4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     a42:	2800      	cmp	r0, #0
     a44:	bf08      	it	eq
     a46:	2701      	moveq	r7, #1
     a48:	d000      	beq.n	a4c <__data_size+0x17e>
     a4a:	2700      	movs	r7, #0
     a4c:	48e1      	ldr	r0, [pc, #900]	; (dd4 <__data_size+0x506>)
     a4e:	2200      	movs	r2, #0
     a50:	9215      	str	r2, [sp, #84]	; 0x54
     a52:	7800      	ldrb	r0, [r0, #0]
     a54:	4616      	mov	r6, r2
     a56:	2801      	cmp	r0, #1
     a58:	bf18      	it	ne
     a5a:	2803      	cmpne	r0, #3
     a5c:	d140      	bne.n	ae0 <__data_size+0x212>
     a5e:	48dd      	ldr	r0, [pc, #884]	; (dd4 <__data_size+0x506>)
     a60:	f8b0 8002 	ldrh.w	r8, [r0, #2]
     a64:	eba8 0009 	sub.w	r0, r8, r9
     a68:	9015      	str	r0, [sp, #84]	; 0x54
     a6a:	45c8      	cmp	r8, r9
     a6c:	d938      	bls.n	ae0 <__data_size+0x212>
     a6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     a70:	ea6f 0108 	mvn.w	r1, r8
     a74:	f8df e360 	ldr.w	lr, [pc, #864]	; dd8 <__data_size+0x50a>
     a78:	1858      	adds	r0, r3, r1
     a7a:	f10d 0c0c 	add.w	ip, sp, #12
     a7e:	aa17      	add	r2, sp, #92	; 0x5c
     a80:	4573      	cmp	r3, lr
     a82:	d904      	bls.n	a8e <__data_size+0x1c0>
     a84:	f240 6109 	movw	r1, #1545	; 0x609
     a88:	2070      	movs	r0, #112	; 0x70
     a8a:	f002 ff23 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     a8e:	4bd3      	ldr	r3, [pc, #844]	; (ddc <__data_size+0x50e>)
     a90:	4299      	cmp	r1, r3
     a92:	dd04      	ble.n	a9e <__data_size+0x1d0>
     a94:	f240 610a 	movw	r1, #1546	; 0x60a
     a98:	2070      	movs	r0, #112	; 0x70
     a9a:	f002 ff1b 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     a9e:	4bd0      	ldr	r3, [pc, #832]	; (de0 <__data_size+0x512>)
     aa0:	4299      	cmp	r1, r3
     aa2:	da04      	bge.n	aae <__data_size+0x1e0>
     aa4:	f240 610b 	movw	r1, #1547	; 0x60b
     aa8:	2070      	movs	r0, #112	; 0x70
     aaa:	f002 ff13 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     aae:	49cd      	ldr	r1, [pc, #820]	; (de4 <__data_size+0x516>)
     ab0:	4281      	cmp	r1, r0
     ab2:	bfdc      	itt	le
     ab4:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     ab8:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     abc:	dd05      	ble.n	aca <__data_size+0x1fc>
     abe:	2800      	cmp	r0, #0
     ac0:	bfbc      	itt	lt
     ac2:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     ac6:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     aca:	4661      	mov	r1, ip
     acc:	f001 fe86 	bl	27dc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     ad0:	9803      	ldr	r0, [sp, #12]
     ad2:	990f      	ldr	r1, [sp, #60]	; 0x3c
     ad4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     ad8:	9003      	str	r0, [sp, #12]
     ada:	1a08      	subs	r0, r1, r0
     adc:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
     ae0:	2f00      	cmp	r7, #0
     ae2:	bf18      	it	ne
     ae4:	2632      	movne	r6, #50	; 0x32
     ae6:	d104      	bne.n	af2 <__data_size+0x224>
     ae8:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     aec:	2800      	cmp	r0, #0
     aee:	bf18      	it	ne
     af0:	2602      	movne	r6, #2
     af2:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     af6:	d008      	beq.n	b0a <__data_size+0x23c>
     af8:	980f      	ldr	r0, [sp, #60]	; 0x3c
     afa:	1b00      	subs	r0, r0, r4
     afc:	0200      	lsls	r0, r0, #8
     afe:	17c1      	asrs	r1, r0, #31
     b00:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     b04:	1200      	asrs	r0, r0, #8
     b06:	2801      	cmp	r0, #1
     b08:	da02      	bge.n	b10 <__data_size+0x242>
     b0a:	2004      	movs	r0, #4
     b0c:	9918      	ldr	r1, [sp, #96]	; 0x60
     b0e:	e00b      	b.n	b28 <__data_size+0x25a>
     b10:	b147      	cbz	r7, b24 <__data_size+0x256>
     b12:	48af      	ldr	r0, [pc, #700]	; (dd0 <__data_size+0x502>)
     b14:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     b18:	b120      	cbz	r0, b24 <__data_size+0x256>
     b1a:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     b1e:	1c06      	adds	r6, r0, #0
     b20:	bf18      	it	ne
     b22:	2602      	movne	r6, #2
     b24:	4621      	mov	r1, r4
     b26:	2001      	movs	r0, #1
     b28:	f1b9 0f00 	cmp.w	r9, #0
     b2c:	d002      	beq.n	b34 <__data_size+0x266>
     b2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
     b30:	2b1e      	cmp	r3, #30
     b32:	da02      	bge.n	b3a <__data_size+0x26c>
     b34:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
     b38:	b113      	cbz	r3, b40 <__data_size+0x272>
     b3a:	f04f 0b00 	mov.w	fp, #0
     b3e:	1e40      	subs	r0, r0, #1
     b40:	1983      	adds	r3, r0, r6
     b42:	48a4      	ldr	r0, [pc, #656]	; (dd4 <__data_size+0x506>)
     b44:	f89d e04d 	ldrb.w	lr, [sp, #77]	; 0x4d
     b48:	7800      	ldrb	r0, [r0, #0]
     b4a:	9015      	str	r0, [sp, #84]	; 0x54
     b4c:	980f      	ldr	r0, [sp, #60]	; 0x3c
     b4e:	1a80      	subs	r0, r0, r2
     b50:	f020 4c7f 	bic.w	ip, r0, #4278190080	; 0xff000000
     b54:	ebac 0001 	sub.w	r0, ip, r1
     b58:	0200      	lsls	r0, r0, #8
     b5a:	17c6      	asrs	r6, r0, #31
     b5c:	eb00 6016 	add.w	r0, r0, r6, lsr #24
     b60:	1200      	asrs	r0, r0, #8
     b62:	4298      	cmp	r0, r3
     b64:	db18      	blt.n	b98 <__data_size+0x2ca>
     b66:	2a00      	cmp	r2, #0
     b68:	bf18      	it	ne
     b6a:	f8cd c03c 	strne.w	ip, [sp, #60]	; 0x3c
     b6e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
     b70:	9705      	str	r7, [sp, #20]
     b72:	2700      	movs	r7, #0
     b74:	f001 ff90 	bl	2a98 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
     b78:	1a30      	subs	r0, r6, r0
     b7a:	0200      	lsls	r0, r0, #8
     b7c:	17c1      	asrs	r1, r0, #31
     b7e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     b82:	1200      	asrs	r0, r0, #8
     b84:	283e      	cmp	r0, #62	; 0x3e
     b86:	da3f      	bge.n	c08 <__data_size+0x33a>
     b88:	2d01      	cmp	r5, #1
     b8a:	d020      	beq.n	bce <__data_size+0x300>
     b8c:	1e70      	subs	r0, r6, #1
     b8e:	9905      	ldr	r1, [sp, #20]
     b90:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     b94:	b319      	cbz	r1, bde <__data_size+0x310>
     b96:	e02d      	b.n	bf4 <__data_size+0x326>
     b98:	b182      	cbz	r2, bbc <__data_size+0x2ee>
     b9a:	f1be 0f00 	cmp.w	lr, #0
     b9e:	bf04      	itt	eq
     ba0:	9815      	ldreq	r0, [sp, #84]	; 0x54
     ba2:	2803      	cmpeq	r0, #3
     ba4:	d00a      	beq.n	bbc <__data_size+0x2ee>
     ba6:	b927      	cbnz	r7, bb2 <__data_size+0x2e4>
     ba8:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     bac:	2800      	cmp	r0, #0
     bae:	bf18      	it	ne
     bb0:	1e9b      	subne	r3, r3, #2
     bb2:	2200      	movs	r2, #0
     bb4:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
     bb8:	4690      	mov	r8, r2
     bba:	e7c7      	b.n	b4c <__data_size+0x27e>
     bbc:	bb07      	cbnz	r7, c00 <__data_size+0x332>
     bbe:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     bc2:	b1e8      	cbz	r0, c00 <__data_size+0x332>
     bc4:	2000      	movs	r0, #0
     bc6:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
     bca:	1e9b      	subs	r3, r3, #2
     bcc:	e7be      	b.n	b4c <__data_size+0x27e>
     bce:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     bd2:	d120      	bne.n	c16 <__data_size+0x348>
     bd4:	f640 110d 	movw	r1, #2317	; 0x90d
     bd8:	2070      	movs	r0, #112	; 0x70
     bda:	f002 fe7b 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     bde:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     be2:	d007      	beq.n	bf4 <__data_size+0x326>
     be4:	1a21      	subs	r1, r4, r0
     be6:	0209      	lsls	r1, r1, #8
     be8:	17ca      	asrs	r2, r1, #31
     bea:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     bee:	1209      	asrs	r1, r1, #8
     bf0:	2904      	cmp	r1, #4
     bf2:	dd03      	ble.n	bfc <__data_size+0x32e>
     bf4:	4604      	mov	r4, r0
     bf6:	f001 ff55 	bl	2aa4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     bfa:	e00c      	b.n	c16 <__data_size+0x348>
     bfc:	2900      	cmp	r1, #0
     bfe:	dd0a      	ble.n	c16 <__data_size+0x348>
     c00:	b01b      	add	sp, #108	; 0x6c
     c02:	2000      	movs	r0, #0
     c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c08:	1e70      	subs	r0, r6, #1
     c0a:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
     c0e:	4620      	mov	r0, r4
     c10:	f001 ff48 	bl	2aa4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     c14:	4657      	mov	r7, sl
     c16:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     c1a:	d024      	beq.n	c66 <__data_size+0x398>
     c1c:	980f      	ldr	r0, [sp, #60]	; 0x3c
     c1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
     c20:	1b00      	subs	r0, r0, r4
     c22:	1b1b      	subs	r3, r3, r4
     c24:	4a70      	ldr	r2, [pc, #448]	; (de8 <__data_size+0x51a>)
     c26:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     c2a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     c2e:	4583      	cmp	fp, r0
     c30:	bf98      	it	ls
     c32:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
     c36:	d2e3      	bcs.n	c00 <__data_size+0x332>
     c38:	429a      	cmp	r2, r3
     c3a:	d3e1      	bcc.n	c00 <__data_size+0x332>
     c3c:	4620      	mov	r0, r4
     c3e:	f00a fff6 	bl	bc2e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     c42:	4965      	ldr	r1, [pc, #404]	; (dd8 <__data_size+0x50a>)
     c44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
     c46:	1c4b      	adds	r3, r1, #1
     c48:	1a16      	subs	r6, r2, r0
     c4a:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
     c4e:	bf24      	itt	cs
     c50:	eba0 0c02 	subcs.w	ip, r0, r2
     c54:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
     c58:	d310      	bcc.n	c7c <__data_size+0x3ae>
     c5a:	42b1      	cmp	r1, r6
     c5c:	d208      	bcs.n	c70 <__data_size+0x3a2>
     c5e:	1a08      	subs	r0, r1, r0
     c60:	4410      	add	r0, r2
     c62:	1c46      	adds	r6, r0, #1
     c64:	e00a      	b.n	c7c <__data_size+0x3ae>
     c66:	f640 212d 	movw	r1, #2605	; 0xa2d
     c6a:	2070      	movs	r0, #112	; 0x70
     c6c:	f002 fe32 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c70:	4561      	cmp	r1, ip
     c72:	d22c      	bcs.n	cce <__data_size+0x400>
     c74:	1a89      	subs	r1, r1, r2
     c76:	4408      	add	r0, r1
     c78:	1c40      	adds	r0, r0, #1
     c7a:	4246      	negs	r6, r0
     c7c:	4854      	ldr	r0, [pc, #336]	; (dd0 <__data_size+0x502>)
     c7e:	7f80      	ldrb	r0, [r0, #30]
     c80:	b350      	cbz	r0, cd8 <__data_size+0x40a>
     c82:	4628      	mov	r0, r5
     c84:	4645      	mov	r5, r8
     c86:	f04f 0b00 	mov.w	fp, #0
     c8a:	46d8      	mov	r8, fp
     c8c:	2801      	cmp	r0, #1
     c8e:	d005      	beq.n	c9c <__data_size+0x3ce>
     c90:	2002      	movs	r0, #2
     c92:	f002 f95f 	bl	2f54 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     c96:	2001      	movs	r0, #1
     c98:	f002 f95c 	bl	2f54 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     c9c:	45a9      	cmp	r9, r5
     c9e:	d227      	bcs.n	cf0 <__data_size+0x422>
     ca0:	eba6 0105 	sub.w	r1, r6, r5
     ca4:	f04f 0301 	mov.w	r3, #1
     ca8:	f04f 0203 	mov.w	r2, #3
     cac:	f04f 0002 	mov.w	r0, #2
     cb0:	f002 f87c 	bl	2dac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     cb4:	2800      	cmp	r0, #0
     cb6:	bf08      	it	eq
     cb8:	f04f 0801 	moveq.w	r8, #1
     cbc:	f1b9 0f00 	cmp.w	r9, #0
     cc0:	d030      	beq.n	d24 <__data_size+0x456>
     cc2:	2301      	movs	r3, #1
     cc4:	eba6 0109 	sub.w	r1, r6, r9
     cc8:	2203      	movs	r2, #3
     cca:	4618      	mov	r0, r3
     ccc:	e01e      	b.n	d0c <__data_size+0x43e>
     cce:	f640 310c 	movw	r1, #2828	; 0xb0c
     cd2:	2070      	movs	r0, #112	; 0x70
     cd4:	f002 fdfe 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     cd8:	45c1      	cmp	r9, r8
     cda:	bf34      	ite	cc
     cdc:	4640      	movcc	r0, r8
     cde:	4648      	movcs	r0, r9
     ce0:	4458      	add	r0, fp
     ce2:	42b0      	cmp	r0, r6
     ce4:	dbcd      	blt.n	c82 <__data_size+0x3b4>
     ce6:	f44f 6124 	mov.w	r1, #2624	; 0xa40
     cea:	2070      	movs	r0, #112	; 0x70
     cec:	f002 fdf2 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     cf0:	d910      	bls.n	d14 <__data_size+0x446>
     cf2:	2301      	movs	r3, #1
     cf4:	eba6 0109 	sub.w	r1, r6, r9
     cf8:	2203      	movs	r2, #3
     cfa:	4618      	mov	r0, r3
     cfc:	f002 f856 	bl	2dac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d00:	b328      	cbz	r0, d4e <__data_size+0x480>
     d02:	b17d      	cbz	r5, d24 <__data_size+0x456>
     d04:	1b71      	subs	r1, r6, r5
     d06:	2301      	movs	r3, #1
     d08:	2203      	movs	r2, #3
     d0a:	2002      	movs	r0, #2
     d0c:	f002 f84e 	bl	2dac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d10:	b1e8      	cbz	r0, d4e <__data_size+0x480>
     d12:	e007      	b.n	d24 <__data_size+0x456>
     d14:	ea55 0009 	orrs.w	r0, r5, r9
     d18:	d004      	beq.n	d24 <__data_size+0x456>
     d1a:	f640 1177 	movw	r1, #2423	; 0x977
     d1e:	2070      	movs	r0, #112	; 0x70
     d20:	f002 fdd8 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d24:	2301      	movs	r3, #1
     d26:	2203      	movs	r2, #3
     d28:	4631      	mov	r1, r6
     d2a:	2000      	movs	r0, #0
     d2c:	f002 f83e 	bl	2dac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d30:	b168      	cbz	r0, d4e <__data_size+0x480>
     d32:	2501      	movs	r5, #1
     d34:	f1b8 0f00 	cmp.w	r8, #0
     d38:	d003      	beq.n	d42 <__data_size+0x474>
     d3a:	9814      	ldr	r0, [sp, #80]	; 0x50
     d3c:	900f      	str	r0, [sp, #60]	; 0x3c
     d3e:	f88d b04c 	strb.w	fp, [sp, #76]	; 0x4c
     d42:	f8df 80a8 	ldr.w	r8, [pc, #168]	; dec <__data_size+0x51e>
     d46:	f1ba 0f00 	cmp.w	sl, #0
     d4a:	d10e      	bne.n	d6a <__data_size+0x49c>
     d4c:	e009      	b.n	d62 <__data_size+0x494>
     d4e:	2002      	movs	r0, #2
     d50:	f002 f900 	bl	2f54 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     d54:	2001      	movs	r0, #1
     d56:	f002 f8fd 	bl	2f54 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     d5a:	b01b      	add	sp, #108	; 0x6c
     d5c:	2000      	movs	r0, #0
     d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d62:	481b      	ldr	r0, [pc, #108]	; (dd0 <__data_size+0x502>)
     d64:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     d68:	b100      	cbz	r0, d6c <__data_size+0x49e>
     d6a:	b34f      	cbz	r7, dc0 <__data_size+0x4f2>
     d6c:	f8df a060 	ldr.w	sl, [pc, #96]	; dd0 <__data_size+0x502>
     d70:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
     d74:	b118      	cbz	r0, d7e <__data_size+0x4b0>
     d76:	f002 fbdf 	bl	3538 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
     d7a:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
     d7e:	b307      	cbz	r7, dc2 <__data_size+0x4f4>
     d80:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
     d84:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     d88:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     d8c:	f8c8 0000 	str.w	r0, [r8]
     d90:	2300      	movs	r3, #0
     d92:	2203      	movs	r2, #3
     d94:	2005      	movs	r0, #5
     d96:	f002 f809 	bl	2dac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d9a:	b368      	cbz	r0, df8 <__data_size+0x52a>
     d9c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
     da0:	2005      	movs	r0, #5
     da2:	f002 f9bd 	bl	3120 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
     da6:	4912      	ldr	r1, [pc, #72]	; (df0 <__data_size+0x522>)
     da8:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
     dac:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
     db0:	4910      	ldr	r1, [pc, #64]	; (df4 <__data_size+0x526>)
     db2:	12e0      	asrs	r0, r4, #11
     db4:	6008      	str	r0, [r1, #0]
     db6:	4c06      	ldr	r4, [pc, #24]	; (dd0 <__data_size+0x502>)
     db8:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
     dbc:	b3e8      	cbz	r0, e3a <__data_size+0x56c>
     dbe:	e030      	b.n	e22 <__data_size+0x554>
     dc0:	e01b      	b.n	dfa <__data_size+0x52c>
     dc2:	e01f      	b.n	e04 <__data_size+0x536>
     dc4:	40000508 	.word	0x40000508
     dc8:	20000014 	.word	0x20000014
     dcc:	20000ccc 	.word	0x20000ccc
     dd0:	2000104c 	.word	0x2000104c
     dd4:	20000016 	.word	0x20000016
     dd8:	1e847fff 	.word	0x1e847fff
     ddc:	07a12000 	.word	0x07a12000
     de0:	f85ee000 	.word	0xf85ee000
     de4:	1e848000 	.word	0x1e848000
     de8:	003fffff 	.word	0x003fffff
     dec:	4001f508 	.word	0x4001f508
     df0:	4001f098 	.word	0x4001f098
     df4:	4001f504 	.word	0x4001f504
     df8:	e025      	b.n	e46 <__data_size+0x578>
     dfa:	f8df a0b8 	ldr.w	sl, [pc, #184]	; eb4 <__data_size+0x5e6>
     dfe:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
     e02:	b1c8      	cbz	r0, e38 <__data_size+0x56a>
     e04:	4c2b      	ldr	r4, [pc, #172]	; (eb4 <__data_size+0x5e6>)
     e06:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
     e0a:	b150      	cbz	r0, e22 <__data_size+0x554>
     e0c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     e10:	f8c8 0000 	str.w	r0, [r8]
     e14:	2005      	movs	r0, #5
     e16:	f002 f89d 	bl	2f54 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     e1a:	f002 fbf5 	bl	3608 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
     e1e:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
     e22:	eba6 0009 	sub.w	r0, r6, r9
     e26:	f1a0 0119 	sub.w	r1, r0, #25
     e2a:	2900      	cmp	r1, #0
     e2c:	dc15      	bgt.n	e5a <__data_size+0x58c>
     e2e:	f640 2171 	movw	r1, #2673	; 0xa71
     e32:	2070      	movs	r0, #112	; 0x70
     e34:	f002 fd4e 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e38:	e000      	b.n	e3c <__data_size+0x56e>
     e3a:	e009      	b.n	e50 <__data_size+0x582>
     e3c:	f002 fb98 	bl	3570 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
     e40:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
     e44:	e79b      	b.n	d7e <__data_size+0x4b0>
     e46:	f240 313e 	movw	r1, #830	; 0x33e
     e4a:	2070      	movs	r0, #112	; 0x70
     e4c:	f002 fd42 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e50:	f002 fbcc 	bl	35ec <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
     e54:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
     e58:	e7e3      	b.n	e22 <__data_size+0x554>
     e5a:	2203      	movs	r2, #3
     e5c:	2301      	movs	r3, #1
     e5e:	4610      	mov	r0, r2
     e60:	f001 ffa4 	bl	2dac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     e64:	b308      	cbz	r0, eaa <__data_size+0x5dc>
     e66:	4814      	ldr	r0, [pc, #80]	; (eb8 <__data_size+0x5ea>)
     e68:	6880      	ldr	r0, [r0, #8]
     e6a:	f8c0 b000 	str.w	fp, [r0]
     e6e:	4813      	ldr	r0, [pc, #76]	; (ebc <__data_size+0x5ee>)
     e70:	f8c0 b000 	str.w	fp, [r0]
     e74:	ac0c      	add	r4, sp, #48	; 0x30
     e76:	4812      	ldr	r0, [pc, #72]	; (ec0 <__data_size+0x5f2>)
     e78:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     e7c:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
     e80:	f8c0 2384 	str.w	r2, [r0, #900]	; 0x384
     e84:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
     e88:	f8c0 c38c 	str.w	ip, [r0, #908]	; 0x38c
     e8c:	ac10      	add	r4, sp, #64	; 0x40
     e8e:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     e92:	f8c0 1390 	str.w	r1, [r0, #912]	; 0x390
     e96:	f8c0 2394 	str.w	r2, [r0, #916]	; 0x394
     e9a:	f8c0 3398 	str.w	r3, [r0, #920]	; 0x398
     e9e:	f8c0 c39c 	str.w	ip, [r0, #924]	; 0x39c
     ea2:	b01b      	add	sp, #108	; 0x6c
     ea4:	2001      	movs	r0, #1
     ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     eaa:	f640 2179 	movw	r1, #2681	; 0xa79
     eae:	2070      	movs	r0, #112	; 0x70
     eb0:	f002 fd10 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     eb4:	2000104c 	.word	0x2000104c
     eb8:	20000014 	.word	0x20000014
     ebc:	40000508 	.word	0x40000508
     ec0:	20000ccc 	.word	0x20000ccc
     ec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     ec8:	4606      	mov	r6, r0
     eca:	b083      	sub	sp, #12
     ecc:	7808      	ldrb	r0, [r1, #0]
     ece:	7390      	strb	r0, [r2, #14]
     ed0:	7acf      	ldrb	r7, [r1, #11]
     ed2:	7357      	strb	r7, [r2, #13]
     ed4:	7a88      	ldrb	r0, [r1, #10]
     ed6:	7310      	strb	r0, [r2, #12]
     ed8:	8908      	ldrh	r0, [r1, #8]
     eda:	4614      	mov	r4, r2
     edc:	8150      	strh	r0, [r2, #10]
     ede:	460d      	mov	r5, r1
     ee0:	780a      	ldrb	r2, [r1, #0]
     ee2:	495f      	ldr	r1, [pc, #380]	; (1060 <CONFIG_BT_RX_STACK_SIZE+0x60>)
     ee4:	4699      	mov	r9, r3
     ee6:	ea4f 0c81 	mov.w	ip, r1, lsl #2
     eea:	424b      	negs	r3, r1
     eec:	f1ac 0801 	sub.w	r8, ip, #1
     ef0:	b15a      	cbz	r2, f0a <__data_size+0x63c>
     ef2:	43c0      	mvns	r0, r0
     ef4:	f8d5 8004 	ldr.w	r8, [r5, #4]
     ef8:	f104 0208 	add.w	r2, r4, #8
     efc:	4288      	cmp	r0, r1
     efe:	dd3d      	ble.n	f7c <__data_size+0x6ae>
     f00:	f240 610a 	movw	r1, #1546	; 0x60a
     f04:	2070      	movs	r0, #112	; 0x70
     f06:	f002 fce5 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f0a:	68ee      	ldr	r6, [r5, #12]
     f0c:	686d      	ldr	r5, [r5, #4]
     f0e:	ea6f 0900 	mvn.w	r9, r0
     f12:	f104 0208 	add.w	r2, r4, #8
     f16:	eb06 0009 	add.w	r0, r6, r9
     f1a:	4546      	cmp	r6, r8
     f1c:	d904      	bls.n	f28 <__data_size+0x65a>
     f1e:	f240 6109 	movw	r1, #1545	; 0x609
     f22:	2070      	movs	r0, #112	; 0x70
     f24:	f002 fcd6 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f28:	4589      	cmp	r9, r1
     f2a:	dce9      	bgt.n	f00 <__data_size+0x632>
     f2c:	4599      	cmp	r9, r3
     f2e:	db28      	blt.n	f82 <__data_size+0x6b4>
     f30:	4584      	cmp	ip, r0
     f32:	bfdc      	itt	le
     f34:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     f38:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     f3c:	dd05      	ble.n	f4a <__data_size+0x67c>
     f3e:	2800      	cmp	r0, #0
     f40:	bfbc      	itt	lt
     f42:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     f46:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     f4a:	4621      	mov	r1, r4
     f4c:	f001 fc46 	bl	27dc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     f50:	6820      	ldr	r0, [r4, #0]
     f52:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     f56:	1970      	adds	r0, r6, r5
     f58:	1c40      	adds	r0, r0, #1
     f5a:	6021      	str	r1, [r4, #0]
     f5c:	2f00      	cmp	r7, #0
     f5e:	bf08      	it	eq
     f60:	307a      	addeq	r0, #122	; 0x7a
     f62:	d003      	beq.n	f6c <__data_size+0x69e>
     f64:	2f01      	cmp	r7, #1
     f66:	bf08      	it	eq
     f68:	3048      	addeq	r0, #72	; 0x48
     f6a:	d12d      	bne.n	fc8 <__data_size+0x6fa>
     f6c:	f001 fc1a 	bl	27a4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     f70:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     f74:	6060      	str	r0, [r4, #4]
     f76:	b003      	add	sp, #12
     f78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     f7c:	4601      	mov	r1, r0
     f7e:	4298      	cmp	r0, r3
     f80:	da04      	bge.n	f8c <__data_size+0x6be>
     f82:	f240 610b 	movw	r1, #1547	; 0x60b
     f86:	2070      	movs	r0, #112	; 0x70
     f88:	f002 fca4 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f8c:	4584      	cmp	ip, r0
     f8e:	bfdc      	itt	le
     f90:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
     f94:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
     f98:	dd05      	ble.n	fa6 <__data_size+0x6d8>
     f9a:	2800      	cmp	r0, #0
     f9c:	bfbc      	itt	lt
     f9e:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
     fa2:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
     fa6:	4621      	mov	r1, r4
     fa8:	f001 fc18 	bl	27dc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     fac:	6820      	ldr	r0, [r4, #0]
     fae:	2f00      	cmp	r7, #0
     fb0:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     fb4:	f108 0001 	add.w	r0, r8, #1
     fb8:	6021      	str	r1, [r4, #0]
     fba:	bf08      	it	eq
     fbc:	307a      	addeq	r0, #122	; 0x7a
     fbe:	d008      	beq.n	fd2 <__data_size+0x704>
     fc0:	2f01      	cmp	r7, #1
     fc2:	bf08      	it	eq
     fc4:	3048      	addeq	r0, #72	; 0x48
     fc6:	d004      	beq.n	fd2 <__data_size+0x704>
     fc8:	f240 61b1 	movw	r1, #1713	; 0x6b1
     fcc:	2070      	movs	r0, #112	; 0x70
     fce:	f002 fc81 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     fd2:	f001 fbe7 	bl	27a4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     fd6:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     fda:	6061      	str	r1, [r4, #4]
     fdc:	8960      	ldrh	r0, [r4, #10]
     fde:	aa01      	add	r2, sp, #4
     fe0:	4669      	mov	r1, sp
     fe2:	f001 fbfb 	bl	27dc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     fe6:	481f      	ldr	r0, [pc, #124]	; (1064 <CONFIG_BT_RX_STACK_SIZE+0x64>)
     fe8:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
     fec:	2920      	cmp	r1, #32
     fee:	d023      	beq.n	1038 <CONFIG_BT_RX_STACK_SIZE+0x38>
     ff0:	6900      	ldr	r0, [r0, #16]
     ff2:	1d40      	adds	r0, r0, #5
     ff4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     ff8:	e9d4 2100 	ldrd	r2, r1, [r4]
     ffc:	1a89      	subs	r1, r1, r2
     ffe:	6020      	str	r0, [r4, #0]
    1000:	4408      	add	r0, r1
    1002:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1006:	6060      	str	r0, [r4, #4]
    1008:	464b      	mov	r3, r9
    100a:	4632      	mov	r2, r6
    100c:	4621      	mov	r1, r4
    100e:	68e8      	ldr	r0, [r5, #12]
    1010:	f7ff fad2 	bl	5b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    1014:	2800      	cmp	r0, #0
    1016:	bf1c      	itt	ne
    1018:	b003      	addne	sp, #12
    101a:	e8bd 83f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    101e:	e9d4 1000 	ldrd	r1, r0, [r4]
    1022:	1a40      	subs	r0, r0, r1
    1024:	4430      	add	r0, r6
    1026:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
    102a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    102e:	e9c4 1000 	strd	r1, r0, [r4]
    1032:	b003      	add	sp, #12
    1034:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1038:	8960      	ldrh	r0, [r4, #10]
    103a:	f106 0709 	add.w	r7, r6, #9
    103e:	b120      	cbz	r0, 104a <CONFIG_BT_RX_STACK_SIZE+0x4a>
    1040:	f002 fbd0 	bl	37e4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1044:	2800      	cmp	r0, #0
    1046:	bf08      	it	eq
    1048:	3732      	addeq	r7, #50	; 0x32
    104a:	4807      	ldr	r0, [pc, #28]	; (1068 <CONFIG_BT_RX_STACK_SIZE+0x68>)
    104c:	7841      	ldrb	r1, [r0, #1]
    104e:	9800      	ldr	r0, [sp, #0]
    1050:	4281      	cmp	r1, r0
    1052:	bf84      	itt	hi
    1054:	1a08      	subhi	r0, r1, r0
    1056:	4407      	addhi	r7, r0
    1058:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    105c:	e7cc      	b.n	ff8 <__data_size+0x72a>
    105e:	0000      	.short	0x0000
    1060:	07a12000 	.word	0x07a12000
    1064:	2000104c 	.word	0x2000104c
    1068:	20000016 	.word	0x20000016
    106c:	b510      	push	{r4, lr}
    106e:	4c15      	ldr	r4, [pc, #84]	; (10c4 <CONFIG_BT_RX_STACK_SIZE+0xc4>)
    1070:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1074:	2820      	cmp	r0, #32
    1076:	bf18      	it	ne
    1078:	bd10      	popne	{r4, pc}
    107a:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    107e:	eb04 0082 	add.w	r0, r4, r2, lsl #2
    1082:	f890 1020 	ldrb.w	r1, [r0, #32]
    1086:	2920      	cmp	r1, #32
    1088:	d017      	beq.n	10ba <CONFIG_BT_RX_STACK_SIZE+0xba>
    108a:	f8df c03c 	ldr.w	ip, [pc, #60]	; 10c8 <CONFIG_BT_RX_STACK_SIZE+0xc8>
    108e:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
    1092:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    1096:	785b      	ldrb	r3, [r3, #1]
    1098:	f880 3020 	strb.w	r3, [r0, #32]
    109c:	2301      	movs	r3, #1
    109e:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
    10a2:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    10a6:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    10aa:	2002      	movs	r0, #2
    10ac:	f000 f8b0 	bl	1210 <CONFIG_BT_RX_STACK_SIZE+0x210>
    10b0:	2000      	movs	r0, #0
    10b2:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    10b6:	77a0      	strb	r0, [r4, #30]
    10b8:	bd10      	pop	{r4, pc}
    10ba:	f240 318b 	movw	r1, #907	; 0x38b
    10be:	2070      	movs	r0, #112	; 0x70
    10c0:	f002 fc08 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10c4:	2000104c 	.word	0x2000104c
    10c8:	20000fcc 	.word	0x20000fcc
    10cc:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    10d0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 118c <CONFIG_BT_RX_STACK_SIZE+0x18c>
    10d4:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    10d8:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    10dc:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    10e0:	2c20      	cmp	r4, #32
    10e2:	bf08      	it	eq
    10e4:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    10e8:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 1190 <CONFIG_BT_RX_STACK_SIZE+0x190>
    10ec:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 1194 <CONFIG_BT_RX_STACK_SIZE+0x194>
    10f0:	f5aa 7940 	sub.w	r9, sl, #768	; 0x300
    10f4:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    10f8:	2607      	movs	r6, #7
    10fa:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    10fe:	2801      	cmp	r0, #1
    1100:	d00e      	beq.n	1120 <CONFIG_BT_RX_STACK_SIZE+0x120>
    1102:	2804      	cmp	r0, #4
    1104:	bf08      	it	eq
    1106:	2602      	moveq	r6, #2
    1108:	d00a      	beq.n	1120 <CONFIG_BT_RX_STACK_SIZE+0x120>
    110a:	2805      	cmp	r0, #5
    110c:	bf0c      	ite	eq
    110e:	2603      	moveq	r6, #3
    1110:	2806      	cmpne	r0, #6
    1112:	d005      	beq.n	1120 <CONFIG_BT_RX_STACK_SIZE+0x120>
    1114:	f640 01d9 	movw	r1, #2265	; 0x8d9
    1118:	f04f 0070 	mov.w	r0, #112	; 0x70
    111c:	f002 fbda 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1120:	f1bb 0f00 	cmp.w	fp, #0
    1124:	bf18      	it	ne
    1126:	f3af 8000 	nopne.w
    112a:	f3ef 8010 	mrs	r0, PRIMASK
    112e:	b672      	cpsid	i
    1130:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    1134:	784a      	ldrb	r2, [r1, #1]
    1136:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    113a:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    113e:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    1142:	42a2      	cmp	r2, r4
    1144:	bf04      	itt	eq
    1146:	2220      	moveq	r2, #32
    1148:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    114c:	b1b8      	cbz	r0, 117e <CONFIG_BT_RX_STACK_SIZE+0x17e>
    114e:	462a      	mov	r2, r5
    1150:	4621      	mov	r1, r4
    1152:	2001      	movs	r0, #1
    1154:	f000 f85c 	bl	1210 <CONFIG_BT_RX_STACK_SIZE+0x210>
    1158:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    115c:	eb09 00c1 	add.w	r0, r9, r1, lsl #3
    1160:	f859 2031 	ldr.w	r2, [r9, r1, lsl #3]
    1164:	6840      	ldr	r0, [r0, #4]
    1166:	4631      	mov	r1, r6
    1168:	4790      	blx	r2
    116a:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    116e:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    1172:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1176:	2c20      	cmp	r4, #32
    1178:	d1bc      	bne.n	10f4 <CONFIG_BT_RX_STACK_SIZE+0xf4>
    117a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    117e:	4806      	ldr	r0, [pc, #24]	; (1198 <CONFIG_BT_RX_STACK_SIZE+0x198>)
    1180:	2800      	cmp	r0, #0
    1182:	bf18      	it	ne
    1184:	f3af 8000 	nopne.w
    1188:	b662      	cpsie	i
    118a:	e7e0      	b.n	114e <CONFIG_BT_RX_STACK_SIZE+0x14e>
    118c:	2000104c 	.word	0x2000104c
    1190:	00000000 	.word	0x00000000
    1194:	20000fcc 	.word	0x20000fcc
    1198:	00000000 	.word	0x00000000
    119c:	b510      	push	{r4, lr}
    119e:	4604      	mov	r4, r0
    11a0:	6800      	ldr	r0, [r0, #0]
    11a2:	f00a fd44 	bl	bc2e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    11a6:	4602      	mov	r2, r0
    11a8:	8960      	ldrh	r0, [r4, #10]
    11aa:	7a21      	ldrb	r1, [r4, #8]
    11ac:	4b14      	ldr	r3, [pc, #80]	; (1200 <CONFIG_BT_RX_STACK_SIZE+0x200>)
    11ae:	4408      	add	r0, r1
    11b0:	1c41      	adds	r1, r0, #1
    11b2:	1850      	adds	r0, r2, r1
    11b4:	429a      	cmp	r2, r3
    11b6:	d904      	bls.n	11c2 <CONFIG_BT_RX_STACK_SIZE+0x1c2>
    11b8:	f240 6109 	movw	r1, #1545	; 0x609
    11bc:	2070      	movs	r0, #112	; 0x70
    11be:	f002 fb89 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    11c2:	4a10      	ldr	r2, [pc, #64]	; (1204 <CONFIG_BT_RX_STACK_SIZE+0x204>)
    11c4:	4291      	cmp	r1, r2
    11c6:	dd04      	ble.n	11d2 <CONFIG_BT_RX_STACK_SIZE+0x1d2>
    11c8:	f240 610a 	movw	r1, #1546	; 0x60a
    11cc:	2070      	movs	r0, #112	; 0x70
    11ce:	f002 fb81 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    11d2:	4a0d      	ldr	r2, [pc, #52]	; (1208 <CONFIG_BT_RX_STACK_SIZE+0x208>)
    11d4:	4291      	cmp	r1, r2
    11d6:	da04      	bge.n	11e2 <CONFIG_BT_RX_STACK_SIZE+0x1e2>
    11d8:	f240 610b 	movw	r1, #1547	; 0x60b
    11dc:	2070      	movs	r0, #112	; 0x70
    11de:	f002 fb79 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    11e2:	490a      	ldr	r1, [pc, #40]	; (120c <CONFIG_BT_RX_STACK_SIZE+0x20c>)
    11e4:	4281      	cmp	r1, r0
    11e6:	bfde      	ittt	le
    11e8:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    11ec:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    11f0:	bd10      	pople	{r4, pc}
    11f2:	2800      	cmp	r0, #0
    11f4:	bfbc      	itt	lt
    11f6:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    11fa:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    11fe:	bd10      	pop	{r4, pc}
    1200:	1e847fff 	.word	0x1e847fff
    1204:	07a12000 	.word	0x07a12000
    1208:	f85ee000 	.word	0xf85ee000
    120c:	1e848000 	.word	0x1e848000
    1210:	f8df c054 	ldr.w	ip, [pc, #84]	; 1268 <CONFIG_BT_RX_STACK_SIZE+0x268>
    1214:	b510      	push	{r4, lr}
    1216:	2300      	movs	r3, #0
    1218:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    121c:	2807      	cmp	r0, #7
    121e:	d21e      	bcs.n	125e <CONFIG_BT_RX_STACK_SIZE+0x25e>
    1220:	e8df f000 	tbb	[pc, r0]
    1224:	05050505 	.word	0x05050505
    1228:	00040404 	.word	0x00040404
    122c:	2301      	movs	r3, #1
    122e:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    1232:	2b00      	cmp	r3, #0
    1234:	bf08      	it	eq
    1236:	bd10      	popeq	{r4, pc}
    1238:	480c      	ldr	r0, [pc, #48]	; (126c <CONFIG_BT_RX_STACK_SIZE+0x26c>)
    123a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    123e:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    1242:	2820      	cmp	r0, #32
    1244:	bf0e      	itee	eq
    1246:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    124a:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    124e:	7041      	strbne	r1, [r0, #1]
    1250:	2020      	movs	r0, #32
    1252:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    1256:	7058      	strb	r0, [r3, #1]
    1258:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    125c:	bd10      	pop	{r4, pc}
    125e:	f44f 7115 	mov.w	r1, #596	; 0x254
    1262:	2070      	movs	r0, #112	; 0x70
    1264:	f002 fb36 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1268:	20000fcc 	.word	0x20000fcc
    126c:	2000104c 	.word	0x2000104c
    1270:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1274:	b083      	sub	sp, #12
    1276:	485c      	ldr	r0, [pc, #368]	; (13e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x60>)
    1278:	9904      	ldr	r1, [sp, #16]
    127a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    127e:	9001      	str	r0, [sp, #4]
    1280:	f890 4020 	ldrb.w	r4, [r0, #32]
    1284:	9803      	ldr	r0, [sp, #12]
    1286:	4625      	mov	r5, r4
    1288:	2801      	cmp	r0, #1
    128a:	bf18      	it	ne
    128c:	2802      	cmpne	r0, #2
    128e:	d005      	beq.n	129c <CONFIG_BT_RX_STACK_SIZE+0x29c>
    1290:	f44f 612b 	mov.w	r1, #2736	; 0xab0
    1294:	f04f 0070 	mov.w	r0, #112	; 0x70
    1298:	f002 fb1c 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    129c:	2700      	movs	r7, #0
    129e:	2d20      	cmp	r5, #32
    12a0:	d04a      	beq.n	1338 <CONFIG_BT_RX_STACK_SIZE+0x338>
    12a2:	4851      	ldr	r0, [pc, #324]	; (13e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x60>)
    12a4:	9100      	str	r1, [sp, #0]
    12a6:	2600      	movs	r6, #0
    12a8:	7f80      	ldrb	r0, [r0, #30]
    12aa:	2800      	cmp	r0, #0
    12ac:	bf08      	it	eq
    12ae:	2602      	moveq	r6, #2
    12b0:	f001 fbf2 	bl	2a98 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    12b4:	f8df a138 	ldr.w	sl, [pc, #312]	; 13f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x68>
    12b8:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    12bc:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
    12c0:	f8df 9128 	ldr.w	r9, [pc, #296]	; 13ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x64>
    12c4:	688a      	ldr	r2, [r1, #8]
    12c6:	68c9      	ldr	r1, [r1, #12]
    12c8:	1a12      	subs	r2, r2, r0
    12ca:	1a09      	subs	r1, r1, r0
    12cc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    12d0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    12d4:	4296      	cmp	r6, r2
    12d6:	bf98      	it	ls
    12d8:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    12dc:	d201      	bcs.n	12e2 <CONFIG_BT_RX_STACK_SIZE+0x2e2>
    12de:	4589      	cmp	r9, r1
    12e0:	d228      	bcs.n	1334 <CONFIG_BT_RX_STACK_SIZE+0x334>
    12e2:	4a44      	ldr	r2, [pc, #272]	; (13f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c>)
    12e4:	9900      	ldr	r1, [sp, #0]
    12e6:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    12ea:	4622      	mov	r2, r4
    12ec:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    12f0:	784c      	ldrb	r4, [r1, #1]
    12f2:	2c20      	cmp	r4, #32
    12f4:	d016      	beq.n	1324 <CONFIG_BT_RX_STACK_SIZE+0x324>
    12f6:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    12fa:	eb0a 0cc1 	add.w	ip, sl, r1, lsl #3
    12fe:	f8dc 8008 	ldr.w	r8, [ip, #8]
    1302:	f8dc c00c 	ldr.w	ip, [ip, #12]
    1306:	eba8 0800 	sub.w	r8, r8, r0
    130a:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    130e:	ebac 0100 	sub.w	r1, ip, r0
    1312:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1316:	4546      	cmp	r6, r8
    1318:	bf98      	it	ls
    131a:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    131e:	d2e4      	bcs.n	12ea <CONFIG_BT_RX_STACK_SIZE+0x2ea>
    1320:	4589      	cmp	r9, r1
    1322:	d3e2      	bcc.n	12ea <CONFIG_BT_RX_STACK_SIZE+0x2ea>
    1324:	2a20      	cmp	r2, #32
    1326:	d005      	beq.n	1334 <CONFIG_BT_RX_STACK_SIZE+0x334>
    1328:	2120      	movs	r1, #32
    132a:	2004      	movs	r0, #4
    132c:	9b00      	ldr	r3, [sp, #0]
    132e:	f7ff f907 	bl	540 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1332:	4604      	mov	r4, r0
    1334:	42ac      	cmp	r4, r5
    1336:	d115      	bne.n	1364 <CONFIG_BT_RX_STACK_SIZE+0x364>
    1338:	482f      	ldr	r0, [pc, #188]	; (13f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x70>)
    133a:	2800      	cmp	r0, #0
    133c:	bf18      	it	ne
    133e:	f3af 8000 	nopne.w
    1342:	f001 fba9 	bl	2a98 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1346:	4c28      	ldr	r4, [pc, #160]	; (13e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x60>)
    1348:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    134c:	2920      	cmp	r1, #32
    134e:	d00d      	beq.n	136c <CONFIG_BT_RX_STACK_SIZE+0x36c>
    1350:	68e1      	ldr	r1, [r4, #12]
    1352:	1c82      	adds	r2, r0, #2
    1354:	1a51      	subs	r1, r2, r1
    1356:	0209      	lsls	r1, r1, #8
    1358:	17ca      	asrs	r2, r1, #31
    135a:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    135e:	1209      	asrs	r1, r1, #8
    1360:	2900      	cmp	r1, #0
    1362:	dd03      	ble.n	136c <CONFIG_BT_RX_STACK_SIZE+0x36c>
    1364:	b005      	add	sp, #20
    1366:	2000      	movs	r0, #0
    1368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    136c:	2d20      	cmp	r5, #32
    136e:	d00d      	beq.n	138c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4>
    1370:	462a      	mov	r2, r5
    1372:	9903      	ldr	r1, [sp, #12]
    1374:	f7ff fb1c 	bl	9b0 <__data_size+0xe2>
    1378:	b358      	cbz	r0, 13d2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4a>
    137a:	9801      	ldr	r0, [sp, #4]
    137c:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    1380:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    1384:	b005      	add	sp, #20
    1386:	2001      	movs	r0, #1
    1388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    138c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1390:	b118      	cbz	r0, 139a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12>
    1392:	f002 f8d1 	bl	3538 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1396:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    139a:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    139e:	b150      	cbz	r0, 13b6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2e>
    13a0:	4916      	ldr	r1, [pc, #88]	; (13fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x74>)
    13a2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    13a6:	6008      	str	r0, [r1, #0]
    13a8:	2005      	movs	r0, #5
    13aa:	f001 fdd3 	bl	2f54 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    13ae:	f002 f92b 	bl	3608 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    13b2:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    13b6:	2004      	movs	r0, #4
    13b8:	f001 fdcc 	bl	2f54 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    13bc:	f001 fe38 	bl	3030 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    13c0:	2020      	movs	r0, #32
    13c2:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    13c6:	480e      	ldr	r0, [pc, #56]	; (1400 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x78>)
    13c8:	6880      	ldr	r0, [r0, #8]
    13ca:	6007      	str	r7, [r0, #0]
    13cc:	480d      	ldr	r0, [pc, #52]	; (1404 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7c>)
    13ce:	6007      	str	r7, [r0, #0]
    13d0:	e7d8      	b.n	1384 <CONFIG_BT_RX_STACK_SIZE+0x384>
    13d2:	462a      	mov	r2, r5
    13d4:	2120      	movs	r1, #32
    13d6:	2004      	movs	r0, #4
    13d8:	9b04      	ldr	r3, [sp, #16]
    13da:	f7ff f8b1 	bl	540 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    13de:	b005      	add	sp, #20
    13e0:	2000      	movs	r0, #0
    13e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    13e6:	0000      	.short	0x0000
    13e8:	2000104c 	.word	0x2000104c
    13ec:	003fffff 	.word	0x003fffff
    13f0:	20000ccc 	.word	0x20000ccc
    13f4:	20000fcc 	.word	0x20000fcc
    13f8:	00000000 	.word	0x00000000
    13fc:	4001f508 	.word	0x4001f508
    1400:	20000014 	.word	0x20000014
    1404:	40000508 	.word	0x40000508

00001408 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    1408:	4906      	ldr	r1, [pc, #24]	; (1424 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    140a:	b510      	push	{r4, lr}
    140c:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    1410:	2a20      	cmp	r2, #32
    1412:	bf1c      	itt	ne
    1414:	7788      	strbne	r0, [r1, #30]
    1416:	bd10      	popne	{r4, pc}
    1418:	f240 31ea 	movw	r1, #1002	; 0x3ea
    141c:	2070      	movs	r0, #112	; 0x70
    141e:	f002 fa59 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1422:	0000      	.short	0x0000
    1424:	2000104c 	.word	0x2000104c

00001428 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    1428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    142c:	4e5b      	ldr	r6, [pc, #364]	; (159c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    142e:	4681      	mov	r9, r0
    1430:	b085      	sub	sp, #20
    1432:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1436:	468a      	mov	sl, r1
    1438:	2820      	cmp	r0, #32
    143a:	d04d      	beq.n	14d8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xb0>
    143c:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1440:	f106 040c 	add.w	r4, r6, #12
    1444:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1448:	f5a6 7860 	sub.w	r8, r6, #896	; 0x380
    144c:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    1450:	2020      	movs	r0, #32
    1452:	f88d 0000 	strb.w	r0, [sp]
    1456:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    145a:	aa03      	add	r2, sp, #12
    145c:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    1460:	a901      	add	r1, sp, #4
    1462:	f890 5020 	ldrb.w	r5, [r0, #32]
    1466:	6930      	ldr	r0, [r6, #16]
    1468:	9002      	str	r0, [sp, #8]
    146a:	6830      	ldr	r0, [r6, #0]
    146c:	4448      	add	r0, r9
    146e:	f001 f9b5 	bl	27dc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1472:	68f8      	ldr	r0, [r7, #12]
    1474:	9901      	ldr	r1, [sp, #4]
    1476:	4a4a      	ldr	r2, [pc, #296]	; (15a0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>)
    1478:	4408      	add	r0, r1
    147a:	f1a9 0165 	sub.w	r1, r9, #101	; 0x65
    147e:	4291      	cmp	r1, r2
    1480:	d82f      	bhi.n	14e2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    1482:	68b9      	ldr	r1, [r7, #8]
    1484:	1a41      	subs	r1, r0, r1
    1486:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    148a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    148e:	d228      	bcs.n	14e2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    1490:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1494:	6060      	str	r0, [r4, #4]
    1496:	4630      	mov	r0, r6
    1498:	f884 a00c 	strb.w	sl, [r4, #12]
    149c:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    14a0:	46ea      	mov	sl, sp
    14a2:	2d20      	cmp	r5, #32
    14a4:	bf1c      	itt	ne
    14a6:	493f      	ldrne	r1, [pc, #252]	; (15a4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    14a8:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    14ac:	d03c      	beq.n	1528 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    14ae:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    14b2:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    14b6:	6860      	ldr	r0, [r4, #4]
    14b8:	68ba      	ldr	r2, [r7, #8]
    14ba:	4621      	mov	r1, r4
    14bc:	1a10      	subs	r0, r2, r0
    14be:	0200      	lsls	r0, r0, #8
    14c0:	17c2      	asrs	r2, r0, #31
    14c2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    14c6:	f107 0608 	add.w	r6, r7, #8
    14ca:	1200      	asrs	r0, r0, #8
    14cc:	d41b      	bmi.n	1506 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xde>
    14ce:	8970      	ldrh	r0, [r6, #10]
    14d0:	b350      	cbz	r0, 1528 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    14d2:	8948      	ldrh	r0, [r1, #10]
    14d4:	b148      	cbz	r0, 14ea <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc2>
    14d6:	e027      	b.n	1528 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    14d8:	f640 317b 	movw	r1, #2939	; 0xb7b
    14dc:	2070      	movs	r0, #112	; 0x70
    14de:	f002 f9f9 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14e2:	b005      	add	sp, #20
    14e4:	2001      	movs	r0, #1
    14e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    14ea:	4620      	mov	r0, r4
    14ec:	f7ff fe56 	bl	119c <CONFIG_BT_RX_STACK_SIZE+0x19c>
    14f0:	f001 f958 	bl	27a4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    14f4:	6831      	ldr	r1, [r6, #0]
    14f6:	1a08      	subs	r0, r1, r0
    14f8:	0200      	lsls	r0, r0, #8
    14fa:	17c1      	asrs	r1, r0, #31
    14fc:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1500:	1200      	asrs	r0, r0, #8
    1502:	2833      	cmp	r0, #51	; 0x33
    1504:	da10      	bge.n	1528 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    1506:	f88a 5000 	strb.w	r5, [sl]
    150a:	7d39      	ldrb	r1, [r7, #20]
    150c:	7b20      	ldrb	r0, [r4, #12]
    150e:	4281      	cmp	r1, r0
    1510:	d805      	bhi.n	151e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xf6>
    1512:	9802      	ldr	r0, [sp, #8]
    1514:	6060      	str	r0, [r4, #4]
    1516:	b005      	add	sp, #20
    1518:	2002      	movs	r0, #2
    151a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    151e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1522:	7845      	ldrb	r5, [r0, #1]
    1524:	2d20      	cmp	r5, #32
    1526:	d1c2      	bne.n	14ae <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x86>
    1528:	2005      	movs	r0, #5
    152a:	f001 fd13 	bl	2f54 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    152e:	4c1b      	ldr	r4, [pc, #108]	; (159c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    1530:	f04f 30ff 	mov.w	r0, #4294967295
    1534:	60a0      	str	r0, [r4, #8]
    1536:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    153a:	f89d 2000 	ldrb.w	r2, [sp]
    153e:	2120      	movs	r1, #32
    1540:	2a20      	cmp	r2, #32
    1542:	bf13      	iteet	ne
    1544:	2005      	movne	r0, #5
    1546:	eb04 0083 	addeq.w	r0, r4, r3, lsl #2
    154a:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    154e:	f7fe fff7 	blne	540 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1552:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    1556:	4913      	ldr	r1, [pc, #76]	; (15a4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    1558:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    155c:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    1560:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    1564:	7048      	strb	r0, [r1, #1]
    1566:	6820      	ldr	r0, [r4, #0]
    1568:	4448      	add	r0, r9
    156a:	6020      	str	r0, [r4, #0]
    156c:	2001      	movs	r0, #1
    156e:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    1572:	7e60      	ldrb	r0, [r4, #25]
    1574:	2801      	cmp	r0, #1
    1576:	d105      	bne.n	1584 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x15c>
    1578:	6920      	ldr	r0, [r4, #16]
    157a:	1e40      	subs	r0, r0, #1
    157c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1580:	f001 fb2e 	bl	2be0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1584:	f89d 0000 	ldrb.w	r0, [sp]
    1588:	2820      	cmp	r0, #32
    158a:	d003      	beq.n	1594 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16c>
    158c:	4806      	ldr	r0, [pc, #24]	; (15a8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x180>)
    158e:	7840      	ldrb	r0, [r0, #1]
    1590:	f002 fa70 	bl	3a74 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1594:	b005      	add	sp, #20
    1596:	2000      	movs	r0, #0
    1598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    159c:	2000104c 	.word	0x2000104c
    15a0:	07a11f9b 	.word	0x07a11f9b
    15a4:	20000fcc 	.word	0x20000fcc
    15a8:	20000014 	.word	0x20000014

000015ac <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    15ac:	4806      	ldr	r0, [pc, #24]	; (15c8 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    15ae:	b510      	push	{r4, lr}
    15b0:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    15b4:	2920      	cmp	r1, #32
    15b6:	bf1c      	itt	ne
    15b8:	7e00      	ldrbne	r0, [r0, #24]
    15ba:	bd10      	popne	{r4, pc}
    15bc:	f640 3174 	movw	r1, #2932	; 0xb74
    15c0:	2070      	movs	r0, #112	; 0x70
    15c2:	f002 f987 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15c6:	0000      	.short	0x0000
    15c8:	2000104c 	.word	0x2000104c

000015cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    15cc:	4602      	mov	r2, r0
    15ce:	4b14      	ldr	r3, [pc, #80]	; (1620 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x54>)
    15d0:	b510      	push	{r4, lr}
    15d2:	4408      	add	r0, r1
    15d4:	429a      	cmp	r2, r3
    15d6:	d904      	bls.n	15e2 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x16>
    15d8:	f240 6109 	movw	r1, #1545	; 0x609
    15dc:	2070      	movs	r0, #112	; 0x70
    15de:	f002 f979 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15e2:	4a10      	ldr	r2, [pc, #64]	; (1624 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>)
    15e4:	4291      	cmp	r1, r2
    15e6:	dd04      	ble.n	15f2 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x26>
    15e8:	f240 610a 	movw	r1, #1546	; 0x60a
    15ec:	2070      	movs	r0, #112	; 0x70
    15ee:	f002 f971 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15f2:	4a0d      	ldr	r2, [pc, #52]	; (1628 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    15f4:	4291      	cmp	r1, r2
    15f6:	da04      	bge.n	1602 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x36>
    15f8:	f240 610b 	movw	r1, #1547	; 0x60b
    15fc:	2070      	movs	r0, #112	; 0x70
    15fe:	f002 f969 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1602:	490a      	ldr	r1, [pc, #40]	; (162c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    1604:	4281      	cmp	r1, r0
    1606:	bfde      	ittt	le
    1608:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    160c:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1610:	bd10      	pople	{r4, pc}
    1612:	2800      	cmp	r0, #0
    1614:	bfbc      	itt	lt
    1616:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    161a:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    161e:	bd10      	pop	{r4, pc}
    1620:	1e847fff 	.word	0x1e847fff
    1624:	07a12000 	.word	0x07a12000
    1628:	f85ee000 	.word	0xf85ee000
    162c:	1e848000 	.word	0x1e848000

00001630 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    1630:	4a10      	ldr	r2, [pc, #64]	; (1674 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    1632:	1a0b      	subs	r3, r1, r0
    1634:	f102 0c01 	add.w	ip, r2, #1
    1638:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    163c:	bf3c      	itt	cc
    163e:	4618      	movcc	r0, r3
    1640:	4770      	bxcc	lr
    1642:	b510      	push	{r4, lr}
    1644:	1a44      	subs	r4, r0, r1
    1646:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    164a:	bf3c      	itt	cc
    164c:	4618      	movcc	r0, r3
    164e:	bd10      	popcc	{r4, pc}
    1650:	429a      	cmp	r2, r3
    1652:	d203      	bcs.n	165c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    1654:	1a10      	subs	r0, r2, r0
    1656:	4408      	add	r0, r1
    1658:	1c40      	adds	r0, r0, #1
    165a:	bd10      	pop	{r4, pc}
    165c:	42a2      	cmp	r2, r4
    165e:	d204      	bcs.n	166a <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    1660:	1a51      	subs	r1, r2, r1
    1662:	4408      	add	r0, r1
    1664:	1c40      	adds	r0, r0, #1
    1666:	4240      	negs	r0, r0
    1668:	bd10      	pop	{r4, pc}
    166a:	f640 310c 	movw	r1, #2828	; 0xb0c
    166e:	2070      	movs	r0, #112	; 0x70
    1670:	f002 f930 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1674:	1e847fff 	.word	0x1e847fff

00001678 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    1678:	4907      	ldr	r1, [pc, #28]	; (1698 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x20>)
    167a:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
    167e:	4282      	cmp	r2, r0
    1680:	bf04      	itt	eq
    1682:	6848      	ldreq	r0, [r1, #4]
    1684:	4770      	bxeq	lr
    1686:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    168a:	4904      	ldr	r1, [pc, #16]	; (169c <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x24>)
    168c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    1690:	3008      	adds	r0, #8
    1692:	f7ff bd83 	b.w	119c <CONFIG_BT_RX_STACK_SIZE+0x19c>
    1696:	0000      	.short	0x0000
    1698:	2000104c 	.word	0x2000104c
    169c:	20000ccc 	.word	0x20000ccc

000016a0 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    16a0:	490e      	ldr	r1, [pc, #56]	; (16dc <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x3c>)
    16a2:	b510      	push	{r4, lr}
    16a4:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    16a8:	2820      	cmp	r0, #32
    16aa:	d012      	beq.n	16d2 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x32>
    16ac:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    16b0:	f5a1 7260 	sub.w	r2, r1, #896	; 0x380
    16b4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    16b8:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    16bc:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    16c0:	6840      	ldr	r0, [r0, #4]
    16c2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    16c6:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
    16ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    16ce:	2104      	movs	r1, #4
    16d0:	4710      	bx	r2
    16d2:	f640 01bc 	movw	r1, #2236	; 0x8bc
    16d6:	2070      	movs	r0, #112	; 0x70
    16d8:	f002 f8fc 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16dc:	2000104c 	.word	0x2000104c

000016e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    16e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    16e2:	4d6d      	ldr	r5, [pc, #436]	; (1898 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    16e4:	496d      	ldr	r1, [pc, #436]	; (189c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1bc>)
    16e6:	2601      	movs	r6, #1
    16e8:	f505 7460 	add.w	r4, r5, #896	; 0x380
    16ec:	2808      	cmp	r0, #8
    16ee:	d273      	bcs.n	17d8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    16f0:	e8df f000 	tbb	[pc, r0]
    16f4:	af9d6704 	.word	0xaf9d6704
    16f8:	b9b444cd 	.word	0xb9b444cd
    16fc:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1700:	b918      	cbnz	r0, 170a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    1702:	f001 ff35 	bl	3570 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1706:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    170a:	8ae0      	ldrh	r0, [r4, #22]
    170c:	b110      	cbz	r0, 1714 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    170e:	f002 f869 	bl	37e4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1712:	b188      	cbz	r0, 1738 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    1714:	f7ff fcaa 	bl	106c <CONFIG_BT_RX_STACK_SIZE+0x6c>
    1718:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    171c:	68a1      	ldr	r1, [r4, #8]
    171e:	f1b1 3fff 	cmp.w	r1, #4294967295
    1722:	d005      	beq.n	1730 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    1724:	2301      	movs	r3, #1
    1726:	2203      	movs	r2, #3
    1728:	2005      	movs	r0, #5
    172a:	f001 fb3f 	bl	2dac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    172e:	b140      	cbz	r0, 1742 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    1730:	7e60      	ldrb	r0, [r4, #25]
    1732:	2801      	cmp	r0, #1
    1734:	d110      	bne.n	1758 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    1736:	e009      	b.n	174c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    1738:	f44f 6107 	mov.w	r1, #2160	; 0x870
    173c:	2070      	movs	r0, #112	; 0x70
    173e:	f002 f8c9 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1742:	f640 0175 	movw	r1, #2165	; 0x875
    1746:	2070      	movs	r0, #112	; 0x70
    1748:	f002 f8c4 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    174c:	6920      	ldr	r0, [r4, #16]
    174e:	1e40      	subs	r0, r0, #1
    1750:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1754:	f001 fa44 	bl	2be0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1758:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    175c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1760:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1764:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1768:	6840      	ldr	r0, [r0, #4]
    176a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    176e:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1772:	b001      	add	sp, #4
    1774:	2101      	movs	r1, #1
    1776:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    177a:	4710      	bx	r2
    177c:	f7ff fc76 	bl	106c <CONFIG_BT_RX_STACK_SIZE+0x6c>
    1780:	f04f 30ff 	mov.w	r0, #4294967295
    1784:	60a0      	str	r0, [r4, #8]
    1786:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    178a:	f88d 0000 	strb.w	r0, [sp]
    178e:	f89d 0000 	ldrb.w	r0, [sp]
    1792:	b188      	cbz	r0, 17b8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xd8>
    1794:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1798:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    179c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    17a0:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    17a4:	6840      	ldr	r0, [r0, #4]
    17a6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    17aa:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    17ae:	b001      	add	sp, #4
    17b0:	2106      	movs	r1, #6
    17b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    17b6:	4710      	bx	r2
    17b8:	f640 0186 	movw	r1, #2182	; 0x886
    17bc:	2070      	movs	r0, #112	; 0x70
    17be:	f002 f889 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17c2:	f7ff fc53 	bl	106c <CONFIG_BT_RX_STACK_SIZE+0x6c>
    17c6:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    17ca:	f002 f80b 	bl	37e4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    17ce:	b120      	cbz	r0, 17da <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfa>
    17d0:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    17d4:	b130      	cbz	r0, 17e4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x104>
    17d6:	e009      	b.n	17ec <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    17d8:	e059      	b.n	188e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1ae>
    17da:	f640 0196 	movw	r1, #2198	; 0x896
    17de:	2070      	movs	r0, #112	; 0x70
    17e0:	f002 f878 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17e4:	f001 fec4 	bl	3570 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    17e8:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    17ec:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    17f0:	b158      	cbz	r0, 180a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x12a>
    17f2:	492b      	ldr	r1, [pc, #172]	; (18a0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    17f4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    17f8:	6008      	str	r0, [r1, #0]
    17fa:	2005      	movs	r0, #5
    17fc:	f001 fbaa 	bl	2f54 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1800:	f001 ff02 	bl	3608 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    1804:	2000      	movs	r0, #0
    1806:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    180a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    180e:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1812:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1816:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    181a:	6840      	ldr	r0, [r0, #4]
    181c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1820:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1824:	b001      	add	sp, #4
    1826:	2100      	movs	r1, #0
    1828:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    182c:	4710      	bx	r2
    182e:	f001 fc49 	bl	30c4 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    1832:	8ae0      	ldrh	r0, [r4, #22]
    1834:	b110      	cbz	r0, 183c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x15c>
    1836:	f001 ffd5 	bl	37e4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    183a:	b128      	cbz	r0, 1848 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    183c:	4819      	ldr	r0, [pc, #100]	; (18a4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    183e:	7800      	ldrb	r0, [r0, #0]
    1840:	2803      	cmp	r0, #3
    1842:	bf08      	it	eq
    1844:	7766      	strbeq	r6, [r4, #29]
    1846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1848:	f640 01a1 	movw	r1, #2209	; 0x8a1
    184c:	2070      	movs	r0, #112	; 0x70
    184e:	f002 f841 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1852:	4815      	ldr	r0, [pc, #84]	; (18a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    1854:	6006      	str	r6, [r0, #0]
    1856:	6888      	ldr	r0, [r1, #8]
    1858:	6006      	str	r6, [r0, #0]
    185a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    185c:	7808      	ldrb	r0, [r1, #0]
    185e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    1862:	f002 b907 	b.w	3a74 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1866:	f7ff fc01 	bl	106c <CONFIG_BT_RX_STACK_SIZE+0x6c>
    186a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    186e:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1872:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1876:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    187a:	6840      	ldr	r0, [r0, #4]
    187c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1880:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1884:	b001      	add	sp, #4
    1886:	2105      	movs	r1, #5
    1888:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    188c:	4710      	bx	r2
    188e:	f640 01b4 	movw	r1, #2228	; 0x8b4
    1892:	2070      	movs	r0, #112	; 0x70
    1894:	f002 f81e 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1898:	20000ccc 	.word	0x20000ccc
    189c:	20000014 	.word	0x20000014
    18a0:	4001f508 	.word	0x4001f508
    18a4:	20000016 	.word	0x20000016
    18a8:	40000508 	.word	0x40000508

000018ac <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    18ac:	4803      	ldr	r0, [pc, #12]	; (18bc <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI+0x10>)
    18ae:	b510      	push	{r4, lr}
    18b0:	7840      	ldrb	r0, [r0, #1]
    18b2:	f00a f9bc 	bl	bc2e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    18b6:	b280      	uxth	r0, r0
    18b8:	bd10      	pop	{r4, pc}
    18ba:	0000      	.short	0x0000
    18bc:	20000016 	.word	0x20000016

000018c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    18c0:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    18c4:	4682      	mov	sl, r0
    18c6:	48dc      	ldr	r0, [pc, #880]	; (1c38 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>)
    18c8:	b08b      	sub	sp, #44	; 0x2c
    18ca:	6800      	ldr	r0, [r0, #0]
    18cc:	4ddb      	ldr	r5, [pc, #876]	; (1c3c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37c>)
    18ce:	05c0      	lsls	r0, r0, #23
    18d0:	0dc0      	lsrs	r0, r0, #23
    18d2:	d00e      	beq.n	18f2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    18d4:	3810      	subs	r0, #16
    18d6:	b240      	sxtb	r0, r0
    18d8:	2800      	cmp	r0, #0
    18da:	bfb8      	it	lt
    18dc:	f000 000f 	andlt.w	r0, r0, #15
    18e0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    18e4:	bfac      	ite	ge
    18e6:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    18ea:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    18ee:	0940      	lsrs	r0, r0, #5
    18f0:	d00d      	beq.n	190e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    18f2:	980c      	ldr	r0, [sp, #48]	; 0x30
    18f4:	f04f 0b00 	mov.w	fp, #0
    18f8:	7800      	ldrb	r0, [r0, #0]
    18fa:	2800      	cmp	r0, #0
    18fc:	bf18      	it	ne
    18fe:	2801      	cmpne	r0, #1
    1900:	d018      	beq.n	1934 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    1902:	f240 714f 	movw	r1, #1871	; 0x74f
    1906:	f04f 0070 	mov.w	r0, #112	; 0x70
    190a:	f001 ffe3 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    190e:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    1912:	f04f 0b01 	mov.w	fp, #1
    1916:	2820      	cmp	r0, #32
    1918:	d007      	beq.n	192a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    191a:	980c      	ldr	r0, [sp, #48]	; 0x30
    191c:	7800      	ldrb	r0, [r0, #0]
    191e:	b148      	cbz	r0, 1934 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    1920:	f240 714b 	movw	r1, #1867	; 0x74b
    1924:	2070      	movs	r0, #112	; 0x70
    1926:	f001 ffd5 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    192a:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    192e:	2070      	movs	r0, #112	; 0x70
    1930:	f001 ffd0 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1934:	4cc2      	ldr	r4, [pc, #776]	; (1c40 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x380>)
    1936:	b124      	cbz	r4, 1942 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    1938:	2100      	movs	r1, #0
    193a:	f240 7052 	movw	r0, #1874	; 0x752
    193e:	f3af 8000 	nop.w
    1942:	49c0      	ldr	r1, [pc, #768]	; (1c44 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x384>)
    1944:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    1948:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    194c:	f04f 0801 	mov.w	r8, #1
    1950:	9000      	str	r0, [sp, #0]
    1952:	b124      	cbz	r4, 195e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9e>
    1954:	2100      	movs	r1, #0
    1956:	f240 705a 	movw	r0, #1882	; 0x75a
    195a:	f3af 8000 	nop.w
    195e:	f1b8 0f00 	cmp.w	r8, #0
    1962:	d009      	beq.n	1978 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb8>
    1964:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    1968:	f04f 0900 	mov.w	r9, #0
    196c:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    1970:	f1bb 0f00 	cmp.w	fp, #0
    1974:	d007      	beq.n	1986 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    1976:	e032      	b.n	19de <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x11e>
    1978:	48b3      	ldr	r0, [pc, #716]	; (1c48 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    197a:	2800      	cmp	r0, #0
    197c:	bf18      	it	ne
    197e:	f3af 8000 	nopne.w
    1982:	b662      	cpsie	i
    1984:	e7ee      	b.n	1964 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    1986:	4637      	mov	r7, r6
    1988:	2001      	movs	r0, #1
    198a:	ea20 0607 	bic.w	r6, r0, r7
    198e:	48af      	ldr	r0, [pc, #700]	; (1c4c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    1990:	2240      	movs	r2, #64	; 0x40
    1992:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    1996:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    199a:	f00a fab6 	bl	bf0a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    199e:	b124      	cbz	r4, 19aa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xea>
    19a0:	2100      	movs	r1, #0
    19a2:	f240 50cd 	movw	r0, #1485	; 0x5cd
    19a6:	f3af 8000 	nop.w
    19aa:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    19ae:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    19b2:	6a09      	ldr	r1, [r1, #32]
    19b4:	6201      	str	r1, [r0, #32]
    19b6:	b124      	cbz	r4, 19c2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x102>
    19b8:	2100      	movs	r1, #0
    19ba:	f240 50d1 	movw	r0, #1489	; 0x5d1
    19be:	f3af 8000 	nop.w
    19c2:	b124      	cbz	r4, 19ce <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x10e>
    19c4:	2100      	movs	r1, #0
    19c6:	f240 7064 	movw	r0, #1892	; 0x764
    19ca:	f3af 8000 	nop.w
    19ce:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    19d2:	f88d 0004 	strb.w	r0, [sp, #4]
    19d6:	f89d 0004 	ldrb.w	r0, [sp, #4]
    19da:	2800      	cmp	r0, #0
    19dc:	d1b9      	bne.n	1952 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    19de:	b124      	cbz	r4, 19ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x12a>
    19e0:	2100      	movs	r1, #0
    19e2:	f240 706e 	movw	r0, #1902	; 0x76e
    19e6:	f3af 8000 	nop.w
    19ea:	f001 f855 	bl	2a98 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    19ee:	4680      	mov	r8, r0
    19f0:	4633      	mov	r3, r6
    19f2:	aa06      	add	r2, sp, #24
    19f4:	990c      	ldr	r1, [sp, #48]	; 0x30
    19f6:	f7ff fa65 	bl	ec4 <__data_size+0x5f6>
    19fa:	b124      	cbz	r4, 1a06 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x146>
    19fc:	2100      	movs	r1, #0
    19fe:	f240 7075 	movw	r0, #1909	; 0x775
    1a02:	f3af 8000 	nop.w
    1a06:	4991      	ldr	r1, [pc, #580]	; (1c4c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    1a08:	a806      	add	r0, sp, #24
    1a0a:	eb01 1786 	add.w	r7, r1, r6, lsl #6
    1a0e:	f817 101a 	ldrb.w	r1, [r7, sl, lsl #1]
    1a12:	2901      	cmp	r1, #1
    1a14:	bf18      	it	ne
    1a16:	2902      	cmpne	r1, #2
    1a18:	d13c      	bne.n	1a94 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    1a1a:	9906      	ldr	r1, [sp, #24]
    1a1c:	9b07      	ldr	r3, [sp, #28]
    1a1e:	eba1 0108 	sub.w	r1, r1, r8
    1a22:	4a8b      	ldr	r2, [pc, #556]	; (1c50 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x390>)
    1a24:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1a28:	eba3 0308 	sub.w	r3, r3, r8
    1a2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1a30:	2902      	cmp	r1, #2
    1a32:	d371      	bcc.n	1b18 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    1a34:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    1a38:	d26e      	bcs.n	1b18 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    1a3a:	429a      	cmp	r2, r3
    1a3c:	d36c      	bcc.n	1b18 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    1a3e:	f04f 0901 	mov.w	r9, #1
    1a42:	ab01      	add	r3, sp, #4
    1a44:	aa05      	add	r2, sp, #20
    1a46:	4631      	mov	r1, r6
    1a48:	f7fe ff32 	bl	8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
    1a4c:	2800      	cmp	r0, #0
    1a4e:	d06b      	beq.n	1b28 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x268>
    1a50:	f89d 1014 	ldrb.w	r1, [sp, #20]
    1a54:	f89d 2004 	ldrb.w	r2, [sp, #4]
    1a58:	4633      	mov	r3, r6
    1a5a:	428a      	cmp	r2, r1
    1a5c:	d068      	beq.n	1b30 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    1a5e:	2005      	movs	r0, #5
    1a60:	f7fe fd6e 	bl	540 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1a64:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    1a68:	7048      	strb	r0, [r1, #1]
    1a6a:	f89d 0014 	ldrb.w	r0, [sp, #20]
    1a6e:	2820      	cmp	r0, #32
    1a70:	bf03      	ittte	eq
    1a72:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    1a76:	f880 a020 	strbeq.w	sl, [r0, #32]
    1a7a:	f880 9023 	strbeq.w	r9, [r0, #35]	; 0x23
    1a7e:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    1a82:	bf18      	it	ne
    1a84:	f880 a001 	strbne.w	sl, [r0, #1]
    1a88:	4632      	mov	r2, r6
    1a8a:	4651      	mov	r1, sl
    1a8c:	f05f 0003 	movs.w	r0, #3
    1a90:	f7ff fbbe 	bl	1210 <CONFIG_BT_RX_STACK_SIZE+0x210>
    1a94:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1a98:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    1a9c:	f88d 0004 	strb.w	r0, [sp, #4]
    1aa0:	f89d 7004 	ldrb.w	r7, [sp, #4]
    1aa4:	b124      	cbz	r4, 1ab0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f0>
    1aa6:	2100      	movs	r1, #0
    1aa8:	f240 707c 	movw	r0, #1916	; 0x77c
    1aac:	f3af 8000 	nop.w
    1ab0:	4868      	ldr	r0, [pc, #416]	; (1c54 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x394>)
    1ab2:	2800      	cmp	r0, #0
    1ab4:	bf18      	it	ne
    1ab6:	f3af 8000 	nopne.w
    1aba:	f3ef 8810 	mrs	r8, PRIMASK
    1abe:	b672      	cpsid	i
    1ac0:	b124      	cbz	r4, 1acc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x20c>
    1ac2:	2100      	movs	r1, #0
    1ac4:	f240 7082 	movw	r0, #1922	; 0x782
    1ac8:	f3af 8000 	nop.w
    1acc:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1ad0:	f88d 0004 	strb.w	r0, [sp, #4]
    1ad4:	f89d 0004 	ldrb.w	r0, [sp, #4]
    1ad8:	2800      	cmp	r0, #0
    1ada:	f47f af3a 	bne.w	1952 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1ade:	b124      	cbz	r4, 1aea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x22a>
    1ae0:	2100      	movs	r1, #0
    1ae2:	f240 708a 	movw	r0, #1930	; 0x78a
    1ae6:	f3af 8000 	nop.w
    1aea:	f10d 0e18 	add.w	lr, sp, #24
    1aee:	9800      	ldr	r0, [sp, #0]
    1af0:	e89e 100e 	ldmia.w	lr, {r1, r2, r3, ip}
    1af4:	f100 0008 	add.w	r0, r0, #8
    1af8:	f1b9 0f00 	cmp.w	r9, #0
    1afc:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    1b00:	d044      	beq.n	1b8c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    1b02:	b124      	cbz	r4, 1b0e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x24e>
    1b04:	2100      	movs	r1, #0
    1b06:	f240 7097 	movw	r0, #1943	; 0x797
    1b0a:	f3af 8000 	nop.w
    1b0e:	f1bb 0f00 	cmp.w	fp, #0
    1b12:	d12c      	bne.n	1b6e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1b14:	e016      	b.n	1b44 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x284>
    1b16:	e7ff      	b.n	1b18 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    1b18:	4632      	mov	r2, r6
    1b1a:	4651      	mov	r1, sl
    1b1c:	2004      	movs	r0, #4
    1b1e:	f7ff fb77 	bl	1210 <CONFIG_BT_RX_STACK_SIZE+0x210>
    1b22:	f04f 0901 	mov.w	r9, #1
    1b26:	e7b5      	b.n	1a94 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    1b28:	4632      	mov	r2, r6
    1b2a:	4651      	mov	r1, sl
    1b2c:	2004      	movs	r0, #4
    1b2e:	e7af      	b.n	1a90 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d0>
    1b30:	2920      	cmp	r1, #32
    1b32:	bf19      	ittee	ne
    1b34:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    1b38:	7840      	ldrbne	r0, [r0, #1]
    1b3a:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    1b3e:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    1b42:	e78f      	b.n	1a64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a4>
    1b44:	b19f      	cbz	r7, 1b6e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1b46:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    1b4a:	2820      	cmp	r0, #32
    1b4c:	d10f      	bne.n	1b6e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1b4e:	b124      	cbz	r4, 1b5a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x29a>
    1b50:	2100      	movs	r1, #0
    1b52:	f240 709c 	movw	r0, #1948	; 0x79c
    1b56:	f3af 8000 	nop.w
    1b5a:	4631      	mov	r1, r6
    1b5c:	2002      	movs	r0, #2
    1b5e:	f7ff fb87 	bl	1270 <CONFIG_BT_RX_STACK_SIZE+0x270>
    1b62:	b920      	cbnz	r0, 1b6e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1b64:	980c      	ldr	r0, [sp, #48]	; 0x30
    1b66:	7800      	ldrb	r0, [r0, #0]
    1b68:	b3f0      	cbz	r0, 1be8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    1b6a:	2801      	cmp	r0, #1
    1b6c:	d04c      	beq.n	1c08 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x348>
    1b6e:	b124      	cbz	r4, 1b7a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
    1b70:	2100      	movs	r1, #0
    1b72:	f240 70b9 	movw	r0, #1977	; 0x7b9
    1b76:	f3af 8000 	nop.w
    1b7a:	f1bb 0f00 	cmp.w	fp, #0
    1b7e:	bf18      	it	ne
    1b80:	2001      	movne	r0, #1
    1b82:	d04a      	beq.n	1c1a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35a>
    1b84:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    1b88:	f04f 0901 	mov.w	r9, #1
    1b8c:	b124      	cbz	r4, 1b98 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d8>
    1b8e:	2100      	movs	r1, #0
    1b90:	f240 70ca 	movw	r0, #1994	; 0x7ca
    1b94:	f3af 8000 	nop.w
    1b98:	f1b8 0f00 	cmp.w	r8, #0
    1b9c:	d045      	beq.n	1c2a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    1b9e:	b124      	cbz	r4, 1baa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ea>
    1ba0:	2100      	movs	r1, #0
    1ba2:	f240 70ce 	movw	r0, #1998	; 0x7ce
    1ba6:	f3af 8000 	nop.w
    1baa:	f1b9 0f00 	cmp.w	r9, #0
    1bae:	d011      	beq.n	1bd4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    1bb0:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1bb4:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1bb8:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    1bbc:	2820      	cmp	r0, #32
    1bbe:	d009      	beq.n	1bd4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    1bc0:	b124      	cbz	r4, 1bcc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30c>
    1bc2:	2100      	movs	r1, #0
    1bc4:	f240 70d5 	movw	r0, #2005	; 0x7d5
    1bc8:	f3af 8000 	nop.w
    1bcc:	4822      	ldr	r0, [pc, #136]	; (1c58 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x398>)
    1bce:	7840      	ldrb	r0, [r0, #1]
    1bd0:	f001 ff50 	bl	3a74 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1bd4:	b124      	cbz	r4, 1be0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x320>
    1bd6:	2100      	movs	r1, #0
    1bd8:	f240 70da 	movw	r0, #2010	; 0x7da
    1bdc:	f3af 8000 	nop.w
    1be0:	b00d      	add	sp, #52	; 0x34
    1be2:	4648      	mov	r0, r9
    1be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1be8:	e7ff      	b.n	1bea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32a>
    1bea:	b124      	cbz	r4, 1bf6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x336>
    1bec:	2100      	movs	r1, #0
    1bee:	f240 70a4 	movw	r0, #1956	; 0x7a4
    1bf2:	f3af 8000 	nop.w
    1bf6:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    1bfa:	4651      	mov	r1, sl
    1bfc:	2004      	movs	r0, #4
    1bfe:	f7ff fb07 	bl	1210 <CONFIG_BT_RX_STACK_SIZE+0x210>
    1c02:	f04f 0901 	mov.w	r9, #1
    1c06:	e7c1      	b.n	1b8c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    1c08:	2c00      	cmp	r4, #0
    1c0a:	f43f aea2 	beq.w	1952 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1c0e:	2100      	movs	r1, #0
    1c10:	f240 70af 	movw	r0, #1967	; 0x7af
    1c14:	f3af 8000 	nop.w
    1c18:	e69b      	b.n	1952 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1c1a:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
    1c1e:	2001      	movs	r0, #1
    1c20:	ea20 0101 	bic.w	r1, r0, r1
    1c24:	f885 102e 	strb.w	r1, [r5, #46]	; 0x2e
    1c28:	e7ac      	b.n	1b84 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c4>
    1c2a:	4807      	ldr	r0, [pc, #28]	; (1c48 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    1c2c:	2800      	cmp	r0, #0
    1c2e:	bf18      	it	ne
    1c30:	f3af 8000 	nopne.w
    1c34:	b662      	cpsie	i
    1c36:	e7b2      	b.n	1b9e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2de>
    1c38:	e000ed04 	.word	0xe000ed04
    1c3c:	2000104c 	.word	0x2000104c
    1c40:	00000000 	.word	0x00000000
    1c44:	20000ccc 	.word	0x20000ccc
    1c48:	00000000 	.word	0x00000000
    1c4c:	20000fcc 	.word	0x20000fcc
    1c50:	003fffff 	.word	0x003fffff
    1c54:	00000000 	.word	0x00000000
    1c58:	20000014 	.word	0x20000014

00001c5c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    1c5c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c60:	48a5      	ldr	r0, [pc, #660]	; (1ef8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ac>)
    1c62:	b08c      	sub	sp, #48	; 0x30
    1c64:	6800      	ldr	r0, [r0, #0]
    1c66:	05c0      	lsls	r0, r0, #23
    1c68:	0dc0      	lsrs	r0, r0, #23
    1c6a:	d011      	beq.n	1c90 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    1c6c:	3810      	subs	r0, #16
    1c6e:	b240      	sxtb	r0, r0
    1c70:	2800      	cmp	r0, #0
    1c72:	bfb8      	it	lt
    1c74:	f000 000f 	andlt.w	r0, r0, #15
    1c78:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1c7c:	bfac      	ite	ge
    1c7e:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1c82:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    1c86:	0940      	lsrs	r0, r0, #5
    1c88:	bf08      	it	eq
    1c8a:	f04f 0901 	moveq.w	r9, #1
    1c8e:	d001      	beq.n	1c94 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    1c90:	f04f 0900 	mov.w	r9, #0
    1c94:	980c      	ldr	r0, [sp, #48]	; 0x30
    1c96:	7800      	ldrb	r0, [r0, #0]
    1c98:	2800      	cmp	r0, #0
    1c9a:	f04f 0000 	mov.w	r0, #0
    1c9e:	bf1c      	itt	ne
    1ca0:	b00d      	addne	sp, #52	; 0x34
    1ca2:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ca6:	f8df a254 	ldr.w	sl, [pc, #596]	; 1efc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b0>
    1caa:	4d95      	ldr	r5, [pc, #596]	; (1f00 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b4>)
    1cac:	4c95      	ldr	r4, [pc, #596]	; (1f04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b8>)
    1cae:	f04f 0b00 	mov.w	fp, #0
    1cb2:	900b      	str	r0, [sp, #44]	; 0x2c
    1cb4:	b125      	cbz	r5, 1cc0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x64>
    1cb6:	2100      	movs	r1, #0
    1cb8:	f44f 60cb 	mov.w	r0, #1624	; 0x658
    1cbc:	f3af 8000 	nop.w
    1cc0:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    1cc4:	f884 b02b 	strb.w	fp, [r4, #43]	; 0x2b
    1cc8:	f04f 0800 	mov.w	r8, #0
    1ccc:	b125      	cbz	r5, 1cd8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x7c>
    1cce:	2100      	movs	r1, #0
    1cd0:	f240 605d 	movw	r0, #1629	; 0x65d
    1cd4:	f3af 8000 	nop.w
    1cd8:	f1b9 0f00 	cmp.w	r9, #0
    1cdc:	d11d      	bne.n	1d1a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    1cde:	4637      	mov	r7, r6
    1ce0:	2001      	movs	r0, #1
    1ce2:	ea20 0607 	bic.w	r6, r0, r7
    1ce6:	4888      	ldr	r0, [pc, #544]	; (1f08 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1bc>)
    1ce8:	2240      	movs	r2, #64	; 0x40
    1cea:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    1cee:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    1cf2:	f00a f90a 	bl	bf0a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1cf6:	b125      	cbz	r5, 1d02 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa6>
    1cf8:	2100      	movs	r1, #0
    1cfa:	f240 50cd 	movw	r0, #1485	; 0x5cd
    1cfe:	f3af 8000 	nop.w
    1d02:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    1d06:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    1d0a:	6a09      	ldr	r1, [r1, #32]
    1d0c:	6201      	str	r1, [r0, #32]
    1d0e:	b125      	cbz	r5, 1d1a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    1d10:	2100      	movs	r1, #0
    1d12:	f240 50d1 	movw	r0, #1489	; 0x5d1
    1d16:	f3af 8000 	nop.w
    1d1a:	b125      	cbz	r5, 1d26 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xca>
    1d1c:	2100      	movs	r1, #0
    1d1e:	f240 6065 	movw	r0, #1637	; 0x665
    1d22:	f3af 8000 	nop.w
    1d26:	f000 feb7 	bl	2a98 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1d2a:	4607      	mov	r7, r0
    1d2c:	4633      	mov	r3, r6
    1d2e:	466a      	mov	r2, sp
    1d30:	990c      	ldr	r1, [sp, #48]	; 0x30
    1d32:	f7ff f8c7 	bl	ec4 <__data_size+0x5f6>
    1d36:	b125      	cbz	r5, 1d42 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe6>
    1d38:	2100      	movs	r1, #0
    1d3a:	f240 606b 	movw	r0, #1643	; 0x66b
    1d3e:	f3af 8000 	nop.w
    1d42:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1d46:	2820      	cmp	r0, #32
    1d48:	d014      	beq.n	1d74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28>
    1d4a:	6920      	ldr	r0, [r4, #16]
    1d4c:	9900      	ldr	r1, [sp, #0]
    1d4e:	1a09      	subs	r1, r1, r0
    1d50:	0209      	lsls	r1, r1, #8
    1d52:	17ca      	asrs	r2, r1, #31
    1d54:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1d58:	1209      	asrs	r1, r1, #8
    1d5a:	d50b      	bpl.n	1d74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28>
    1d5c:	e9dd 2100 	ldrd	r2, r1, [sp]
    1d60:	1a89      	subs	r1, r1, r2
    1d62:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    1d66:	4408      	add	r0, r1
    1d68:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d6c:	e9cd 2000 	strd	r2, r0, [sp]
    1d70:	f04f 0801 	mov.w	r8, #1
    1d74:	b14d      	cbz	r5, 1d8a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e>
    1d76:	2100      	movs	r1, #0
    1d78:	f240 6075 	movw	r0, #1653	; 0x675
    1d7c:	f3af 8000 	nop.w
    1d80:	2100      	movs	r1, #0
    1d82:	f240 607b 	movw	r0, #1659	; 0x67b
    1d86:	f3af 8000 	nop.w
    1d8a:	9800      	ldr	r0, [sp, #0]
    1d8c:	9901      	ldr	r1, [sp, #4]
    1d8e:	1bc0      	subs	r0, r0, r7
    1d90:	1bc9      	subs	r1, r1, r7
    1d92:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1d9a:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    1d9e:	d205      	bcs.n	1dac <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x60>
    1da0:	458a      	cmp	sl, r1
    1da2:	d303      	bcc.n	1dac <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x60>
    1da4:	f1b9 0f00 	cmp.w	r9, #0
    1da8:	d10c      	bne.n	1dc4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x78>
    1daa:	e003      	b.n	1db4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x68>
    1dac:	f1b9 0f00 	cmp.w	r9, #0
    1db0:	d038      	beq.n	1e24 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd8>
    1db2:	e094      	b.n	1ede <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x192>
    1db4:	4633      	mov	r3, r6
    1db6:	463a      	mov	r2, r7
    1db8:	4669      	mov	r1, sp
    1dba:	4854      	ldr	r0, [pc, #336]	; (1f0c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c0>)
    1dbc:	f7fe fbfc 	bl	5b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    1dc0:	ea48 0800 	orr.w	r8, r8, r0
    1dc4:	f1b8 0f00 	cmp.w	r8, #0
    1dc8:	d022      	beq.n	1e10 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc4>
    1dca:	9800      	ldr	r0, [sp, #0]
    1dcc:	f009 ff2f 	bl	bc2e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1dd0:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    1dd4:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1dd8:	4b4d      	ldr	r3, [pc, #308]	; (1f10 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c4>)
    1dda:	4411      	add	r1, r2
    1ddc:	1c49      	adds	r1, r1, #1
    1dde:	1842      	adds	r2, r0, r1
    1de0:	4298      	cmp	r0, r3
    1de2:	d841      	bhi.n	1e68 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x11c>
    1de4:	4849      	ldr	r0, [pc, #292]	; (1f0c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c0>)
    1de6:	4281      	cmp	r1, r0
    1de8:	dc5a      	bgt.n	1ea0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x154>
    1dea:	4240      	negs	r0, r0
    1dec:	4281      	cmp	r1, r0
    1dee:	db5f      	blt.n	1eb0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x164>
    1df0:	1c58      	adds	r0, r3, #1
    1df2:	4290      	cmp	r0, r2
    1df4:	bfdc      	itt	le
    1df6:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    1dfa:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    1dfe:	dd05      	ble.n	1e0c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc0>
    1e00:	2a00      	cmp	r2, #0
    1e02:	bfbc      	itt	lt
    1e04:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    1e08:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    1e0c:	980c      	ldr	r0, [sp, #48]	; 0x30
    1e0e:	60c2      	str	r2, [r0, #12]
    1e10:	2001      	movs	r0, #1
    1e12:	900b      	str	r0, [sp, #44]	; 0x2c
    1e14:	2d00      	cmp	r5, #0
    1e16:	d062      	beq.n	1ede <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x192>
    1e18:	2100      	movs	r1, #0
    1e1a:	f240 608e 	movw	r0, #1678	; 0x68e
    1e1e:	f3af 8000 	nop.w
    1e22:	e05c      	b.n	1ede <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x192>
    1e24:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    1e28:	aa08      	add	r2, sp, #32
    1e2a:	a907      	add	r1, sp, #28
    1e2c:	f000 fcd6 	bl	27dc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1e30:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1e34:	2820      	cmp	r0, #32
    1e36:	d01c      	beq.n	1e72 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x126>
    1e38:	6920      	ldr	r0, [r4, #16]
    1e3a:	1d40      	adds	r0, r0, #5
    1e3c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1e40:	e9dd 2100 	ldrd	r2, r1, [sp]
    1e44:	1a89      	subs	r1, r1, r2
    1e46:	4401      	add	r1, r0
    1e48:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1e4c:	e9cd 0100 	strd	r0, r1, [sp]
    1e50:	f009 feed 	bl	bc2e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1e54:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    1e58:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1e5c:	4b2c      	ldr	r3, [pc, #176]	; (1f10 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c4>)
    1e5e:	4411      	add	r1, r2
    1e60:	1c4a      	adds	r2, r1, #1
    1e62:	1881      	adds	r1, r0, r2
    1e64:	4298      	cmp	r0, r3
    1e66:	d918      	bls.n	1e9a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x14e>
    1e68:	f240 6109 	movw	r1, #1545	; 0x609
    1e6c:	2070      	movs	r0, #112	; 0x70
    1e6e:	f001 fd31 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e72:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    1e76:	f107 0609 	add.w	r6, r7, #9
    1e7a:	b120      	cbz	r0, 1e86 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x13a>
    1e7c:	f001 fcb2 	bl	37e4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1e80:	2800      	cmp	r0, #0
    1e82:	bf08      	it	eq
    1e84:	3632      	addeq	r6, #50	; 0x32
    1e86:	4823      	ldr	r0, [pc, #140]	; (1f14 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c8>)
    1e88:	7841      	ldrb	r1, [r0, #1]
    1e8a:	9807      	ldr	r0, [sp, #28]
    1e8c:	4281      	cmp	r1, r0
    1e8e:	bf84      	itt	hi
    1e90:	1a08      	subhi	r0, r1, r0
    1e92:	4406      	addhi	r6, r0
    1e94:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    1e98:	e7d2      	b.n	1e40 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf4>
    1e9a:	481c      	ldr	r0, [pc, #112]	; (1f0c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c0>)
    1e9c:	4282      	cmp	r2, r0
    1e9e:	dd04      	ble.n	1eaa <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x15e>
    1ea0:	f240 610a 	movw	r1, #1546	; 0x60a
    1ea4:	2070      	movs	r0, #112	; 0x70
    1ea6:	f001 fd15 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1eaa:	481b      	ldr	r0, [pc, #108]	; (1f18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1cc>)
    1eac:	4282      	cmp	r2, r0
    1eae:	da04      	bge.n	1eba <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x16e>
    1eb0:	f240 610b 	movw	r1, #1547	; 0x60b
    1eb4:	2070      	movs	r0, #112	; 0x70
    1eb6:	f001 fd0d 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1eba:	4818      	ldr	r0, [pc, #96]	; (1f1c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d0>)
    1ebc:	4288      	cmp	r0, r1
    1ebe:	bfdc      	itt	le
    1ec0:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    1ec4:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    1ec8:	dd05      	ble.n	1ed6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x18a>
    1eca:	2900      	cmp	r1, #0
    1ecc:	bfbc      	itt	lt
    1ece:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    1ed2:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    1ed6:	980c      	ldr	r0, [sp, #48]	; 0x30
    1ed8:	60c1      	str	r1, [r0, #12]
    1eda:	2001      	movs	r0, #1
    1edc:	900b      	str	r0, [sp, #44]	; 0x2c
    1ede:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    1ee2:	f88d 0010 	strb.w	r0, [sp, #16]
    1ee6:	f89d 0010 	ldrb.w	r0, [sp, #16]
    1eea:	2800      	cmp	r0, #0
    1eec:	f47f aee2 	bne.w	1cb4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    1ef0:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1ef2:	b00d      	add	sp, #52	; 0x34
    1ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ef8:	e000ed04 	.word	0xe000ed04
    1efc:	003fffff 	.word	0x003fffff
    1f00:	00000000 	.word	0x00000000
    1f04:	2000104c 	.word	0x2000104c
    1f08:	20000fcc 	.word	0x20000fcc
    1f0c:	07a12000 	.word	0x07a12000
    1f10:	1e847fff 	.word	0x1e847fff
    1f14:	20000016 	.word	0x20000016
    1f18:	f85ee000 	.word	0xf85ee000
    1f1c:	1e848000 	.word	0x1e848000

00001f20 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    1f20:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f24:	4d88      	ldr	r5, [pc, #544]	; (2148 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x148>)
    1f26:	b08c      	sub	sp, #48	; 0x30
    1f28:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1f2c:	2000      	movs	r0, #0
    1f2e:	9009      	str	r0, [sp, #36]	; 0x24
    1f30:	2001      	movs	r0, #1
    1f32:	4c86      	ldr	r4, [pc, #536]	; (214c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x14c>)
    1f34:	f04f 0900 	mov.w	r9, #0
    1f38:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    1f3c:	4680      	mov	r8, r0
    1f3e:	9008      	str	r0, [sp, #32]
    1f40:	b124      	cbz	r4, 1f4c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    1f42:	2100      	movs	r1, #0
    1f44:	f240 70e9 	movw	r0, #2025	; 0x7e9
    1f48:	f3af 8000 	nop.w
    1f4c:	9808      	ldr	r0, [sp, #32]
    1f4e:	2800      	cmp	r0, #0
    1f50:	d037      	beq.n	1fc2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa2>
    1f52:	bf00      	nop
    1f54:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    1f58:	b124      	cbz	r4, 1f64 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    1f5a:	2100      	movs	r1, #0
    1f5c:	f240 70ee 	movw	r0, #2030	; 0x7ee
    1f60:	f3af 8000 	nop.w
    1f64:	f895 a02e 	ldrb.w	sl, [r5, #46]	; 0x2e
    1f68:	2240      	movs	r2, #64	; 0x40
    1f6a:	ea28 060a 	bic.w	r6, r8, sl
    1f6e:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    1f72:	eb07 118a 	add.w	r1, r7, sl, lsl #6
    1f76:	4683      	mov	fp, r0
    1f78:	f009 ffc7 	bl	bf0a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1f7c:	b124      	cbz	r4, 1f88 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    1f7e:	2100      	movs	r1, #0
    1f80:	f240 50cd 	movw	r0, #1485	; 0x5cd
    1f84:	f3af 8000 	nop.w
    1f88:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1f8c:	eb05 018a 	add.w	r1, r5, sl, lsl #2
    1f90:	9000      	str	r0, [sp, #0]
    1f92:	6a09      	ldr	r1, [r1, #32]
    1f94:	6201      	str	r1, [r0, #32]
    1f96:	b124      	cbz	r4, 1fa2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x82>
    1f98:	2100      	movs	r1, #0
    1f9a:	f240 50d1 	movw	r0, #1489	; 0x5d1
    1f9e:	f3af 8000 	nop.w
    1fa2:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1fa6:	f88d 0008 	strb.w	r0, [sp, #8]
    1faa:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1fae:	b178      	cbz	r0, 1fd0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb0>
    1fb0:	2c00      	cmp	r4, #0
    1fb2:	bf1c      	itt	ne
    1fb4:	2100      	movne	r1, #0
    1fb6:	f240 70f4 	movwne	r0, #2036	; 0x7f4
    1fba:	d0c1      	beq.n	1f40 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1fbc:	f3af 8000 	nop.w
    1fc0:	e7be      	b.n	1f40 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1fc2:	4863      	ldr	r0, [pc, #396]	; (2150 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x150>)
    1fc4:	2800      	cmp	r0, #0
    1fc6:	bf18      	it	ne
    1fc8:	f3af 8000 	nopne.w
    1fcc:	b662      	cpsie	i
    1fce:	e7c1      	b.n	1f54 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    1fd0:	b124      	cbz	r4, 1fdc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    1fd2:	2100      	movs	r1, #0
    1fd4:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    1fd8:	f3af 8000 	nop.w
    1fdc:	980c      	ldr	r0, [sp, #48]	; 0x30
    1fde:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    1fe2:	2803      	cmp	r0, #3
    1fe4:	d172      	bne.n	20cc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xcc>
    1fe6:	f8dd a000 	ldr.w	sl, [sp]
    1fea:	f8cd a018 	str.w	sl, [sp, #24]
    1fee:	990c      	ldr	r1, [sp, #48]	; 0x30
    1ff0:	f89a 0020 	ldrb.w	r0, [sl, #32]
    1ff4:	4288      	cmp	r0, r1
    1ff6:	bf14      	ite	ne
    1ff8:	f04f 0b00 	movne.w	fp, #0
    1ffc:	f04f 0b01 	moveq.w	fp, #1
    2000:	f10a 0c20 	add.w	ip, sl, #32
    2004:	4686      	mov	lr, r0
    2006:	2220      	movs	r2, #32
    2008:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    200c:	e003      	b.n	2016 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x16>
    200e:	4602      	mov	r2, r0
    2010:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    2014:	7840      	ldrb	r0, [r0, #1]
    2016:	4288      	cmp	r0, r1
    2018:	d002      	beq.n	2020 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x20>
    201a:	2820      	cmp	r0, #32
    201c:	d00a      	beq.n	2034 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x34>
    201e:	e7f6      	b.n	200e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xe>
    2020:	2820      	cmp	r0, #32
    2022:	d007      	beq.n	2034 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x34>
    2024:	4586      	cmp	lr, r0
    2026:	d107      	bne.n	2038 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x38>
    2028:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    202c:	7840      	ldrb	r0, [r0, #1]
    202e:	f88c 0000 	strb.w	r0, [ip]
    2032:	e007      	b.n	2044 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x44>
    2034:	4648      	mov	r0, r9
    2036:	e00c      	b.n	2052 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x52>
    2038:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    203c:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    2040:	7840      	ldrb	r0, [r0, #1]
    2042:	7048      	strb	r0, [r1, #1]
    2044:	b124      	cbz	r4, 2050 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x50>
    2046:	2100      	movs	r1, #0
    2048:	f240 5037 	movw	r0, #1335	; 0x537
    204c:	f3af 8000 	nop.w
    2050:	4640      	mov	r0, r8
    2052:	ea10 0f0b 	tst.w	r0, fp
    2056:	bf18      	it	ne
    2058:	f88a 8023 	strbne.w	r8, [sl, #35]	; 0x23
    205c:	2800      	cmp	r0, #0
    205e:	d052      	beq.n	2106 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x106>
    2060:	b124      	cbz	r4, 206c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x6c>
    2062:	2100      	movs	r1, #0
    2064:	f240 70fd 	movw	r0, #2045	; 0x7fd
    2068:	f3af 8000 	nop.w
    206c:	4632      	mov	r2, r6
    206e:	2001      	movs	r0, #1
    2070:	990c      	ldr	r1, [sp, #48]	; 0x30
    2072:	f7ff f8cd 	bl	1210 <CONFIG_BT_RX_STACK_SIZE+0x210>
    2076:	9806      	ldr	r0, [sp, #24]
    2078:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    207c:	f88d 0008 	strb.w	r0, [sp, #8]
    2080:	f89d a008 	ldrb.w	sl, [sp, #8]
    2084:	b124      	cbz	r4, 2090 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x90>
    2086:	2100      	movs	r1, #0
    2088:	f640 0008 	movw	r0, #2056	; 0x808
    208c:	f3af 8000 	nop.w
    2090:	4830      	ldr	r0, [pc, #192]	; (2154 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x154>)
    2092:	2800      	cmp	r0, #0
    2094:	bf18      	it	ne
    2096:	f3af 8000 	nopne.w
    209a:	f3ef 8010 	mrs	r0, PRIMASK
    209e:	b672      	cpsid	i
    20a0:	9008      	str	r0, [sp, #32]
    20a2:	b124      	cbz	r4, 20ae <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xae>
    20a4:	2100      	movs	r1, #0
    20a6:	f640 000d 	movw	r0, #2061	; 0x80d
    20aa:	f3af 8000 	nop.w
    20ae:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    20b2:	f88d 0008 	strb.w	r0, [sp, #8]
    20b6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    20ba:	b140      	cbz	r0, 20ce <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xce>
    20bc:	2c00      	cmp	r4, #0
    20be:	bf1c      	itt	ne
    20c0:	2100      	movne	r1, #0
    20c2:	f640 0011 	movwne	r0, #2065	; 0x811
    20c6:	f43f af3b 	beq.w	1f40 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    20ca:	e777      	b.n	1fbc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x9c>
    20cc:	e01b      	b.n	2106 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x106>
    20ce:	f1ba 0f00 	cmp.w	sl, #0
    20d2:	d008      	beq.n	20e6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xe6>
    20d4:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    20d8:	2820      	cmp	r0, #32
    20da:	d104      	bne.n	20e6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xe6>
    20dc:	4631      	mov	r1, r6
    20de:	2002      	movs	r0, #2
    20e0:	f7ff f8c6 	bl	1270 <CONFIG_BT_RX_STACK_SIZE+0x270>
    20e4:	b308      	cbz	r0, 212a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x12a>
    20e6:	b124      	cbz	r4, 20f2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xf2>
    20e8:	2100      	movs	r1, #0
    20ea:	f640 0025 	movw	r0, #2085	; 0x825
    20ee:	f3af 8000 	nop.w
    20f2:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    20f6:	ea28 0000 	bic.w	r0, r8, r0
    20fa:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
    20fe:	f885 802b 	strb.w	r8, [r5, #43]	; 0x2b
    2102:	2001      	movs	r0, #1
    2104:	9009      	str	r0, [sp, #36]	; 0x24
    2106:	b124      	cbz	r4, 2112 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x112>
    2108:	2100      	movs	r1, #0
    210a:	f640 002e 	movw	r0, #2094	; 0x82e
    210e:	f3af 8000 	nop.w
    2112:	9808      	ldr	r0, [sp, #32]
    2114:	b188      	cbz	r0, 213a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x13a>
    2116:	b124      	cbz	r4, 2122 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x122>
    2118:	2100      	movs	r1, #0
    211a:	f640 0032 	movw	r0, #2098	; 0x832
    211e:	f3af 8000 	nop.w
    2122:	9809      	ldr	r0, [sp, #36]	; 0x24
    2124:	b00d      	add	sp, #52	; 0x34
    2126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    212a:	2c00      	cmp	r4, #0
    212c:	d0f1      	beq.n	2112 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x112>
    212e:	2100      	movs	r1, #0
    2130:	f44f 6002 	mov.w	r0, #2080	; 0x820
    2134:	f3af 8000 	nop.w
    2138:	e7e6      	b.n	2108 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x108>
    213a:	4805      	ldr	r0, [pc, #20]	; (2150 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x150>)
    213c:	2800      	cmp	r0, #0
    213e:	bf18      	it	ne
    2140:	f3af 8000 	nopne.w
    2144:	b662      	cpsie	i
    2146:	e7e6      	b.n	2116 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x116>
    2148:	2000104c 	.word	0x2000104c
	...

00002158 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    2158:	2820      	cmp	r0, #32
    215a:	bf24      	itt	cs
    215c:	2000      	movcs	r0, #0
    215e:	4770      	bxcs	lr
    2160:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2164:	4b03      	ldr	r3, [pc, #12]	; (2174 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x1c>)
    2166:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
    216a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    216e:	6042      	str	r2, [r0, #4]
    2170:	2001      	movs	r0, #1
    2172:	4770      	bx	lr
    2174:	20000ccc 	.word	0x20000ccc

00002178 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    2178:	b510      	push	{r4, lr}
    217a:	2820      	cmp	r0, #32
    217c:	d211      	bcs.n	21a2 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    217e:	490e      	ldr	r1, [pc, #56]	; (21b8 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    2180:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    2184:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    2188:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    218c:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    2190:	b13b      	cbz	r3, 21a2 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    2192:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    2196:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    219a:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    219e:	2a01      	cmp	r2, #1
    21a0:	d001      	beq.n	21a6 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    21a2:	2000      	movs	r0, #0
    21a4:	bd10      	pop	{r4, pc}
    21a6:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    21aa:	4601      	mov	r1, r0
    21ac:	2000      	movs	r0, #0
    21ae:	f7ff f82f 	bl	1210 <CONFIG_BT_RX_STACK_SIZE+0x210>
    21b2:	2001      	movs	r0, #1
    21b4:	bd10      	pop	{r4, pc}
    21b6:	0000      	.short	0x0000
    21b8:	2000104c 	.word	0x2000104c

000021bc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    21bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    21c0:	4e80      	ldr	r6, [pc, #512]	; (23c4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    21c2:	4680      	mov	r8, r0
    21c4:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    21c8:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    21cc:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    21d0:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    21d4:	2800      	cmp	r0, #0
    21d6:	d068      	beq.n	22aa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xee>
    21d8:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    21dc:	4d7a      	ldr	r5, [pc, #488]	; (23c8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    21de:	b125      	cbz	r5, 21ea <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    21e0:	2100      	movs	r1, #0
    21e2:	f640 30c1 	movw	r0, #3009	; 0xbc1
    21e6:	f3af 8000 	nop.w
    21ea:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    21ee:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    21f2:	2801      	cmp	r0, #1
    21f4:	d018      	beq.n	2228 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    21f6:	b2c0      	uxtb	r0, r0
    21f8:	2804      	cmp	r0, #4
    21fa:	bf1c      	itt	ne
    21fc:	2805      	cmpne	r0, #5
    21fe:	2806      	cmpne	r0, #6
    2200:	d058      	beq.n	22b4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    2202:	b12d      	cbz	r5, 2210 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    2204:	f04f 0100 	mov.w	r1, #0
    2208:	f640 30cd 	movw	r0, #3021	; 0xbcd
    220c:	f3af 8000 	nop.w
    2210:	f001 fc86 	bl	3b20 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    2214:	b125      	cbz	r5, 2220 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    2216:	2100      	movs	r1, #0
    2218:	f640 30d1 	movw	r0, #3025	; 0xbd1
    221c:	f3af 8000 	nop.w
    2220:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2224:	2801      	cmp	r0, #1
    2226:	d1e6      	bne.n	21f6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    2228:	2401      	movs	r4, #1
    222a:	b125      	cbz	r5, 2236 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    222c:	2100      	movs	r1, #0
    222e:	f640 30d8 	movw	r0, #3032	; 0xbd8
    2232:	f3af 8000 	nop.w
    2236:	2c00      	cmp	r4, #0
    2238:	d042      	beq.n	22c0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x104>
    223a:	2000      	movs	r0, #0
    223c:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    2240:	b125      	cbz	r5, 224c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    2242:	2100      	movs	r1, #0
    2244:	f640 30dd 	movw	r0, #3037	; 0xbdd
    2248:	f3af 8000 	nop.w
    224c:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    2250:	2001      	movs	r0, #1
    2252:	ea20 090b 	bic.w	r9, r0, fp
    2256:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    225a:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    225e:	2240      	movs	r2, #64	; 0x40
    2260:	f009 fe53 	bl	bf0a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2264:	b125      	cbz	r5, 2270 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    2266:	2100      	movs	r1, #0
    2268:	f240 50cd 	movw	r0, #1485	; 0x5cd
    226c:	f3af 8000 	nop.w
    2270:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    2274:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    2278:	6a00      	ldr	r0, [r0, #32]
    227a:	f8ca 0020 	str.w	r0, [sl, #32]
    227e:	b125      	cbz	r5, 228a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xce>
    2280:	2100      	movs	r1, #0
    2282:	f240 50d1 	movw	r0, #1489	; 0x5d1
    2286:	f3af 8000 	nop.w
    228a:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    228e:	f88d 0000 	strb.w	r0, [sp]
    2292:	f89d 0000 	ldrb.w	r0, [sp]
    2296:	b1d0      	cbz	r0, 22ce <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x112>
    2298:	2d00      	cmp	r5, #0
    229a:	bf1c      	itt	ne
    229c:	2100      	movne	r1, #0
    229e:	f640 30e3 	movwne	r0, #3043	; 0xbe3
    22a2:	d0c2      	beq.n	222a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    22a4:	f3af 8000 	nop.w
    22a8:	e7bf      	b.n	222a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    22aa:	f640 31b8 	movw	r1, #3000	; 0xbb8
    22ae:	2070      	movs	r0, #112	; 0x70
    22b0:	f001 fb10 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    22b4:	464a      	mov	r2, r9
    22b6:	4641      	mov	r1, r8
    22b8:	2001      	movs	r0, #1
    22ba:	f7fe ffa9 	bl	1210 <CONFIG_BT_RX_STACK_SIZE+0x210>
    22be:	e7a9      	b.n	2214 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    22c0:	4842      	ldr	r0, [pc, #264]	; (23cc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    22c2:	2800      	cmp	r0, #0
    22c4:	bf18      	it	ne
    22c6:	f3af 8000 	nopne.w
    22ca:	b662      	cpsie	i
    22cc:	e7b5      	b.n	223a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    22ce:	b125      	cbz	r5, 22da <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x11e>
    22d0:	2100      	movs	r1, #0
    22d2:	f640 30e7 	movw	r0, #3047	; 0xbe7
    22d6:	f3af 8000 	nop.w
    22da:	f89a 2021 	ldrb.w	r2, [sl, #33]	; 0x21
    22de:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    22e2:	4614      	mov	r4, r2
    22e4:	f04f 0b20 	mov.w	fp, #32
    22e8:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    22ec:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    22f0:	e003      	b.n	22fa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13e>
    22f2:	46a3      	mov	fp, r4
    22f4:	eb00 034b 	add.w	r3, r0, fp, lsl #1
    22f8:	785c      	ldrb	r4, [r3, #1]
    22fa:	4544      	cmp	r4, r8
    22fc:	d002      	beq.n	2304 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x148>
    22fe:	2c20      	cmp	r4, #32
    2300:	d02b      	beq.n	235a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    2302:	e7f6      	b.n	22f2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x136>
    2304:	2c20      	cmp	r4, #32
    2306:	d028      	beq.n	235a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    2308:	42a2      	cmp	r2, r4
    230a:	d104      	bne.n	2316 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15a>
    230c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    2310:	7840      	ldrb	r0, [r0, #1]
    2312:	7008      	strb	r0, [r1, #0]
    2314:	e005      	b.n	2322 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x166>
    2316:	eb00 0144 	add.w	r1, r0, r4, lsl #1
    231a:	eb00 004b 	add.w	r0, r0, fp, lsl #1
    231e:	7849      	ldrb	r1, [r1, #1]
    2320:	7041      	strb	r1, [r0, #1]
    2322:	f1ba 0f00 	cmp.w	sl, #0
    2326:	d011      	beq.n	234c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    2328:	b125      	cbz	r5, 2334 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x178>
    232a:	2100      	movs	r1, #0
    232c:	f240 502f 	movw	r0, #1327	; 0x52f
    2330:	f3af 8000 	nop.w
    2334:	f89a 0000 	ldrb.w	r0, [sl]
    2338:	42a0      	cmp	r0, r4
    233a:	d107      	bne.n	234c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    233c:	b125      	cbz	r5, 2348 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18c>
    233e:	2100      	movs	r1, #0
    2340:	f240 5032 	movw	r0, #1330	; 0x532
    2344:	f3af 8000 	nop.w
    2348:	f88a b000 	strb.w	fp, [sl]
    234c:	b15d      	cbz	r5, 2366 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    234e:	2100      	movs	r1, #0
    2350:	f240 5037 	movw	r0, #1335	; 0x537
    2354:	f3af 8000 	nop.w
    2358:	e000      	b.n	235c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a0>
    235a:	b125      	cbz	r5, 2366 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    235c:	2100      	movs	r1, #0
    235e:	f640 30eb 	movw	r0, #3051	; 0xbeb
    2362:	f3af 8000 	nop.w
    2366:	481a      	ldr	r0, [pc, #104]	; (23d0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x214>)
    2368:	2800      	cmp	r0, #0
    236a:	bf18      	it	ne
    236c:	f3af 8000 	nopne.w
    2370:	f3ef 8410 	mrs	r4, PRIMASK
    2374:	b672      	cpsid	i
    2376:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    237a:	f88d 0000 	strb.w	r0, [sp]
    237e:	f89d 0000 	ldrb.w	r0, [sp]
    2382:	b138      	cbz	r0, 2394 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1d8>
    2384:	2d00      	cmp	r5, #0
    2386:	bf1c      	itt	ne
    2388:	2100      	movne	r1, #0
    238a:	f640 30f1 	movwne	r0, #3057	; 0xbf1
    238e:	f43f af4c 	beq.w	222a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2392:	e787      	b.n	22a4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    2394:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    2398:	2001      	movs	r0, #1
    239a:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    239e:	b154      	cbz	r4, 23b6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    23a0:	2d00      	cmp	r5, #0
    23a2:	bf08      	it	eq
    23a4:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23a8:	2100      	movs	r1, #0
    23aa:	f640 30fe 	movw	r0, #3070	; 0xbfe
    23ae:	f3af 8000 	nop.w
    23b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23b6:	4805      	ldr	r0, [pc, #20]	; (23cc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    23b8:	2800      	cmp	r0, #0
    23ba:	bf18      	it	ne
    23bc:	f3af 8000 	nopne.w
    23c0:	b662      	cpsie	i
    23c2:	e7ed      	b.n	23a0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1e4>
    23c4:	2000104c 	.word	0x2000104c
	...

000023d4 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    23d4:	b570      	push	{r4, r5, r6, lr}
    23d6:	460d      	mov	r5, r1
    23d8:	4606      	mov	r6, r0
    23da:	f001 f9f1 	bl	37c0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    23de:	480f      	ldr	r0, [pc, #60]	; (241c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    23e0:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    23e4:	2400      	movs	r4, #0
    23e6:	3880      	subs	r0, #128	; 0x80
    23e8:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    23ec:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    23f0:	b129      	cbz	r1, 23fe <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    23f2:	1c61      	adds	r1, r4, #1
    23f4:	b2cc      	uxtb	r4, r1
    23f6:	2c20      	cmp	r4, #32
    23f8:	d3f8      	bcc.n	23ec <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    23fa:	2020      	movs	r0, #32
    23fc:	bd70      	pop	{r4, r5, r6, pc}
    23fe:	4808      	ldr	r0, [pc, #32]	; (2420 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    2400:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2404:	f840 6031 	str.w	r6, [r0, r1, lsl #3]
    2408:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    240c:	4621      	mov	r1, r4
    240e:	6045      	str	r5, [r0, #4]
    2410:	2001      	movs	r0, #1
    2412:	f7fe fefd 	bl	1210 <CONFIG_BT_RX_STACK_SIZE+0x210>
    2416:	4620      	mov	r0, r4
    2418:	bd70      	pop	{r4, r5, r6, pc}
    241a:	0000      	.short	0x0000
    241c:	2000104c 	.word	0x2000104c
    2420:	20000ccc 	.word	0x20000ccc

00002424 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    2424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2428:	b083      	sub	sp, #12
    242a:	f000 fb35 	bl	2a98 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    242e:	4605      	mov	r5, r0
    2430:	f000 fdfe 	bl	3030 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    2434:	4c67      	ldr	r4, [pc, #412]	; (25d4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    2436:	68a0      	ldr	r0, [r4, #8]
    2438:	f1b0 3fff 	cmp.w	r0, #4294967295
    243c:	bf1c      	itt	ne
    243e:	f04f 30ff 	movne.w	r0, #4294967295
    2442:	60a0      	strne	r0, [r4, #8]
    2444:	7fa0      	ldrb	r0, [r4, #30]
    2446:	f8df b190 	ldr.w	fp, [pc, #400]	; 25d8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    244a:	b9a8      	cbnz	r0, 2478 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x54>
    244c:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    2450:	1a08      	subs	r0, r1, r0
    2452:	0200      	lsls	r0, r0, #8
    2454:	17c1      	asrs	r1, r0, #31
    2456:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    245a:	1200      	asrs	r0, r0, #8
    245c:	f44f 710c 	mov.w	r1, #560	; 0x230
    2460:	f009 fc12 	bl	bc88 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    2464:	6921      	ldr	r1, [r4, #16]
    2466:	4408      	add	r0, r1
    2468:	1a28      	subs	r0, r5, r0
    246a:	0200      	lsls	r0, r0, #8
    246c:	17c1      	asrs	r1, r0, #31
    246e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2472:	1200      	asrs	r0, r0, #8
    2474:	0fc0      	lsrs	r0, r0, #31
    2476:	d013      	beq.n	24a0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x7c>
    2478:	7e60      	ldrb	r0, [r4, #25]
    247a:	b328      	cbz	r0, 24c8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    247c:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    2480:	f88d 0000 	strb.w	r0, [sp]
    2484:	f89d 0000 	ldrb.w	r0, [sp]
    2488:	b1f0      	cbz	r0, 24c8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    248a:	f000 fc13 	bl	2cb4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    248e:	bf00      	nop
    2490:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    2494:	b1f0      	cbz	r0, 24d4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xb0>
    2496:	f240 4147 	movw	r1, #1095	; 0x447
    249a:	2070      	movs	r0, #112	; 0x70
    249c:	f001 fa1a 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24a0:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    24a4:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    24a8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    24ac:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    24b0:	6840      	ldr	r0, [r0, #4]
    24b2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    24b6:	f85b 2031 	ldr.w	r2, [fp, r1, lsl #3]
    24ba:	2108      	movs	r1, #8
    24bc:	4790      	blx	r2
    24be:	f44f 6186 	mov.w	r1, #1072	; 0x430
    24c2:	2070      	movs	r0, #112	; 0x70
    24c4:	f001 fa06 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24c8:	1ce8      	adds	r0, r5, #3
    24ca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    24ce:	f000 fae9 	bl	2aa4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    24d2:	e7dd      	b.n	2490 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x6c>
    24d4:	f04f 0a01 	mov.w	sl, #1
    24d8:	f884 a02a 	strb.w	sl, [r4, #42]	; 0x2a
    24dc:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    24e0:	2820      	cmp	r0, #32
    24e2:	d024      	beq.n	252e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10a>
    24e4:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
    24e8:	2020      	movs	r0, #32
    24ea:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    24ee:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    24f2:	2600      	movs	r6, #0
    24f4:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    24f8:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    24fc:	4837      	ldr	r0, [pc, #220]	; (25dc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b8>)
    24fe:	6026      	str	r6, [r4, #0]
    2500:	7800      	ldrb	r0, [r0, #0]
    2502:	2802      	cmp	r0, #2
    2504:	bf16      	itet	ne
    2506:	2803      	cmpne	r0, #3
    2508:	2001      	moveq	r0, #1
    250a:	2000      	movne	r0, #0
    250c:	7720      	strb	r0, [r4, #28]
    250e:	f894 702e 	ldrb.w	r7, [r4, #46]	; 0x2e
    2512:	eb04 0987 	add.w	r9, r4, r7, lsl #2
    2516:	f899 0020 	ldrb.w	r0, [r9, #32]
    251a:	2820      	cmp	r0, #32
    251c:	d031      	beq.n	2582 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    251e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2522:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    2526:	7d81      	ldrb	r1, [r0, #22]
    2528:	2901      	cmp	r1, #1
    252a:	d005      	beq.n	2538 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x114>
    252c:	e029      	b.n	2582 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    252e:	f240 414a 	movw	r1, #1098	; 0x44a
    2532:	2070      	movs	r0, #112	; 0x70
    2534:	f001 f9ce 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2538:	46ab      	mov	fp, r5
    253a:	f100 0508 	add.w	r5, r0, #8
    253e:	8a40      	ldrh	r0, [r0, #18]
    2540:	aa01      	add	r2, sp, #4
    2542:	4669      	mov	r1, sp
    2544:	f000 f94a 	bl	27dc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2548:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    254c:	2820      	cmp	r0, #32
    254e:	d004      	beq.n	255a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x136>
    2550:	6920      	ldr	r0, [r4, #16]
    2552:	1d40      	adds	r0, r0, #5
    2554:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2558:	e00b      	b.n	2572 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    255a:	8968      	ldrh	r0, [r5, #10]
    255c:	f10b 0b09 	add.w	fp, fp, #9
    2560:	b128      	cbz	r0, 256e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14a>
    2562:	f001 f93f 	bl	37e4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2566:	2800      	cmp	r0, #0
    2568:	bf08      	it	eq
    256a:	f10b 0b32 	addeq.w	fp, fp, #50	; 0x32
    256e:	f02b 407f 	bic.w	r0, fp, #4278190080	; 0xff000000
    2572:	e9d5 2100 	ldrd	r2, r1, [r5]
    2576:	1a89      	subs	r1, r1, r2
    2578:	6028      	str	r0, [r5, #0]
    257a:	4408      	add	r0, r1
    257c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2580:	6068      	str	r0, [r5, #4]
    2582:	4639      	mov	r1, r7
    2584:	2001      	movs	r0, #1
    2586:	f7fe fe73 	bl	1270 <CONFIG_BT_RX_STACK_SIZE+0x270>
    258a:	2800      	cmp	r0, #0
    258c:	d0f9      	beq.n	2582 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    258e:	4814      	ldr	r0, [pc, #80]	; (25e0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1bc>)
    2590:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    2594:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2598:	2802      	cmp	r0, #2
    259a:	d104      	bne.n	25a6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x182>
    259c:	463a      	mov	r2, r7
    259e:	4641      	mov	r1, r8
    25a0:	2006      	movs	r0, #6
    25a2:	f7fe fe35 	bl	1210 <CONFIG_BT_RX_STACK_SIZE+0x210>
    25a6:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
    25aa:	f899 0021 	ldrb.w	r0, [r9, #33]	; 0x21
    25ae:	2820      	cmp	r0, #32
    25b0:	d003      	beq.n	25ba <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x196>
    25b2:	480c      	ldr	r0, [pc, #48]	; (25e4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>)
    25b4:	7840      	ldrb	r0, [r0, #1]
    25b6:	f001 fa5d 	bl	3a74 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    25ba:	7f20      	ldrb	r0, [r4, #28]
    25bc:	2800      	cmp	r0, #0
    25be:	bf04      	itt	eq
    25c0:	b003      	addeq	sp, #12
    25c2:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    25c6:	f000 fd7d 	bl	30c4 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    25ca:	7726      	strb	r6, [r4, #28]
    25cc:	7766      	strb	r6, [r4, #29]
    25ce:	b003      	add	sp, #12
    25d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    25d4:	2000104c 	.word	0x2000104c
    25d8:	20000ccc 	.word	0x20000ccc
    25dc:	20000016 	.word	0x20000016
    25e0:	20000fcc 	.word	0x20000fcc
    25e4:	20000014 	.word	0x20000014

000025e8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    25e8:	b510      	push	{r4, lr}
    25ea:	4c32      	ldr	r4, [pc, #200]	; (26b4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    25ec:	b082      	sub	sp, #8
    25ee:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    25f2:	2920      	cmp	r1, #32
    25f4:	d008      	beq.n	2608 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    25f6:	68a1      	ldr	r1, [r4, #8]
    25f8:	f1b1 3fff 	cmp.w	r1, #4294967295
    25fc:	d009      	beq.n	2612 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    25fe:	f640 21e9 	movw	r1, #2793	; 0xae9
    2602:	2070      	movs	r0, #112	; 0x70
    2604:	f001 f966 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2608:	f640 21e8 	movw	r1, #2792	; 0xae8
    260c:	2070      	movs	r0, #112	; 0x70
    260e:	f001 f961 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2612:	6862      	ldr	r2, [r4, #4]
    2614:	4601      	mov	r1, r0
    2616:	4b28      	ldr	r3, [pc, #160]	; (26b8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    2618:	1850      	adds	r0, r2, r1
    261a:	429a      	cmp	r2, r3
    261c:	d904      	bls.n	2628 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x40>
    261e:	f240 6109 	movw	r1, #1545	; 0x609
    2622:	2070      	movs	r0, #112	; 0x70
    2624:	f001 f956 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2628:	4a24      	ldr	r2, [pc, #144]	; (26bc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    262a:	4291      	cmp	r1, r2
    262c:	dd04      	ble.n	2638 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x50>
    262e:	f240 610a 	movw	r1, #1546	; 0x60a
    2632:	2070      	movs	r0, #112	; 0x70
    2634:	f001 f94e 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2638:	4a21      	ldr	r2, [pc, #132]	; (26c0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd8>)
    263a:	4291      	cmp	r1, r2
    263c:	da04      	bge.n	2648 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x60>
    263e:	f240 610b 	movw	r1, #1547	; 0x60b
    2642:	2070      	movs	r0, #112	; 0x70
    2644:	f001 f946 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2648:	491e      	ldr	r1, [pc, #120]	; (26c4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xdc>)
    264a:	4281      	cmp	r1, r0
    264c:	bfdc      	itt	le
    264e:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    2652:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    2656:	dd05      	ble.n	2664 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    2658:	2800      	cmp	r0, #0
    265a:	bfbc      	itt	lt
    265c:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    2660:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    2664:	aa01      	add	r2, sp, #4
    2666:	4669      	mov	r1, sp
    2668:	f000 f8b8 	bl	27dc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    266c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2670:	280f      	cmp	r0, #15
    2672:	bf8c      	ite	hi
    2674:	2001      	movhi	r0, #1
    2676:	2000      	movls	r0, #0
    2678:	9900      	ldr	r1, [sp, #0]
    267a:	4408      	add	r0, r1
    267c:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    2680:	60a1      	str	r1, [r4, #8]
    2682:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    2686:	f88d 0000 	strb.w	r0, [sp]
    268a:	f89d 0000 	ldrb.w	r0, [sp]
    268e:	2800      	cmp	r0, #0
    2690:	bf04      	itt	eq
    2692:	b002      	addeq	sp, #8
    2694:	bd10      	popeq	{r4, pc}
    2696:	2301      	movs	r3, #1
    2698:	2203      	movs	r2, #3
    269a:	2005      	movs	r0, #5
    269c:	f000 fb86 	bl	2dac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    26a0:	2800      	cmp	r0, #0
    26a2:	bf1c      	itt	ne
    26a4:	b002      	addne	sp, #8
    26a6:	bd10      	popne	{r4, pc}
    26a8:	f640 21f1 	movw	r1, #2801	; 0xaf1
    26ac:	2070      	movs	r0, #112	; 0x70
    26ae:	f001 f911 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    26b2:	0000      	.short	0x0000
    26b4:	2000104c 	.word	0x2000104c
    26b8:	1e847fff 	.word	0x1e847fff
    26bc:	07a12000 	.word	0x07a12000
    26c0:	f85ee000 	.word	0xf85ee000
    26c4:	1e848000 	.word	0x1e848000

000026c8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    26c8:	b570      	push	{r4, r5, r6, lr}
    26ca:	4c1e      	ldr	r4, [pc, #120]	; (2744 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    26cc:	2120      	movs	r1, #32
    26ce:	f884 1020 	strb.w	r1, [r4, #32]
    26d2:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    26d6:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    26da:	2000      	movs	r0, #0
    26dc:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    26e0:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    26e4:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    26e8:	1e42      	subs	r2, r0, #1
    26ea:	60a2      	str	r2, [r4, #8]
    26ec:	6020      	str	r0, [r4, #0]
    26ee:	77a0      	strb	r0, [r4, #30]
    26f0:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    26f4:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    26f8:	7720      	strb	r0, [r4, #28]
    26fa:	7760      	strb	r0, [r4, #29]
    26fc:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    2700:	4911      	ldr	r1, [pc, #68]	; (2748 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    2702:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    2706:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    270a:	7008      	strb	r0, [r1, #0]
    270c:	7048      	strb	r0, [r1, #1]
    270e:	8048      	strh	r0, [r1, #2]
    2710:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    2714:	2210      	movs	r2, #16
    2716:	7088      	strb	r0, [r1, #2]
    2718:	f801 0f04 	strb.w	r0, [r1, #4]!
    271c:	1e52      	subs	r2, r2, #1
    271e:	d1fa      	bne.n	2716 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4e>
    2720:	4d0a      	ldr	r5, [pc, #40]	; (274c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    2722:	2601      	movs	r6, #1
    2724:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    2728:	20ff      	movs	r0, #255	; 0xff
    272a:	7028      	strb	r0, [r5, #0]
    272c:	4808      	ldr	r0, [pc, #32]	; (2750 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    272e:	f001 f983 	bl	3a38 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    2732:	7068      	strb	r0, [r5, #1]
    2734:	f001 f9de 	bl	3af4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    2738:	60a8      	str	r0, [r5, #8]
    273a:	f000 fd0b 	bl	3154 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    273e:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    2742:	bd70      	pop	{r4, r5, r6, pc}
    2744:	2000104c 	.word	0x2000104c
    2748:	20000016 	.word	0x20000016
    274c:	20000014 	.word	0x20000014
    2750:	000010cd 	.word	0x000010cd

00002754 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    2754:	b570      	push	{r4, r5, r6, lr}
    2756:	4604      	mov	r4, r0
    2758:	4615      	mov	r5, r2
    275a:	4608      	mov	r0, r1
    275c:	f009 fa67 	bl	bc2e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2760:	4a0f      	ldr	r2, [pc, #60]	; (27a0 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x4c>)
    2762:	1b01      	subs	r1, r0, r4
    2764:	1c53      	adds	r3, r2, #1
    2766:	ebb1 0f93 	cmp.w	r1, r3, lsr #2
    276a:	bf24      	itt	cs
    276c:	eba4 0c00 	subcs.w	ip, r4, r0
    2770:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
    2774:	d30b      	bcc.n	278e <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    2776:	428a      	cmp	r2, r1
    2778:	d203      	bcs.n	2782 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x2e>
    277a:	1b11      	subs	r1, r2, r4
    277c:	4408      	add	r0, r1
    277e:	1c41      	adds	r1, r0, #1
    2780:	e005      	b.n	278e <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    2782:	4562      	cmp	r2, ip
    2784:	d207      	bcs.n	2796 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x42>
    2786:	1a10      	subs	r0, r2, r0
    2788:	4420      	add	r0, r4
    278a:	1c40      	adds	r0, r0, #1
    278c:	4241      	negs	r1, r0
    278e:	f101 000f 	add.w	r0, r1, #15
    2792:	1a28      	subs	r0, r5, r0
    2794:	bd70      	pop	{r4, r5, r6, pc}
    2796:	f640 310c 	movw	r1, #2828	; 0xb0c
    279a:	2070      	movs	r0, #112	; 0x70
    279c:	f001 f89a 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    27a0:	1e847fff 	.word	0x1e847fff

000027a4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    27a4:	0b41      	lsrs	r1, r0, #13
    27a6:	f248 6237 	movw	r2, #34359	; 0x8637
    27aa:	4351      	muls	r1, r2
    27ac:	0c0a      	lsrs	r2, r1, #16
    27ae:	4b09      	ldr	r3, [pc, #36]	; (27d4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    27b0:	0251      	lsls	r1, r2, #9
    27b2:	fb02 0203 	mla	r2, r2, r3, r0
    27b6:	4808      	ldr	r0, [pc, #32]	; (27d8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    27b8:	4350      	muls	r0, r2
    27ba:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    27be:	306e      	adds	r0, #110	; 0x6e
    27c0:	0d40      	lsrs	r0, r0, #21
    27c2:	425b      	negs	r3, r3
    27c4:	fb10 f303 	smulbb	r3, r0, r3
    27c8:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    27cc:	bf88      	it	hi
    27ce:	1c49      	addhi	r1, r1, #1
    27d0:	4408      	add	r0, r1
    27d2:	4770      	bx	lr
    27d4:	ffffc2f7 	.word	0xffffc2f7
    27d8:	00010c6f 	.word	0x00010c6f

000027dc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    27dc:	0b43      	lsrs	r3, r0, #13
    27de:	f248 6c37 	movw	ip, #34359	; 0x8637
    27e2:	fb03 f30c 	mul.w	r3, r3, ip
    27e6:	b430      	push	{r4, r5}
    27e8:	0c1b      	lsrs	r3, r3, #16
    27ea:	f8df c044 	ldr.w	ip, [pc, #68]	; 2830 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    27ee:	025c      	lsls	r4, r3, #9
    27f0:	fb03 030c 	mla	r3, r3, ip, r0
    27f4:	480f      	ldr	r0, [pc, #60]	; (2834 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    27f6:	4358      	muls	r0, r3
    27f8:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    27fc:	eb04 000c 	add.w	r0, r4, ip
    2800:	f643 5409 	movw	r4, #15625	; 0x3d09
    2804:	fb1c f404 	smulbb	r4, ip, r4
    2808:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    280c:	f643 5508 	movw	r5, #15624	; 0x3d08
    2810:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    2814:	442c      	add	r4, r5
    2816:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    281a:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    281e:	bf84      	itt	hi
    2820:	f04f 0c00 	movhi.w	ip, #0
    2824:	1c40      	addhi	r0, r0, #1
    2826:	6008      	str	r0, [r1, #0]
    2828:	f882 c000 	strb.w	ip, [r2]
    282c:	bc30      	pop	{r4, r5}
    282e:	4770      	bx	lr
    2830:	ffffc2f7 	.word	0xffffc2f7
    2834:	00010c6f 	.word	0x00010c6f

00002838 <MPSL_IRQ_RTC0_Handler>:
    2838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    283c:	4c36      	ldr	r4, [pc, #216]	; (2918 <MPSL_IRQ_RTC0_Handler+0xe0>)
    283e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2842:	f44f 6600 	mov.w	r6, #2048	; 0x800
    2846:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    284a:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    284e:	f04f 0500 	mov.w	r5, #0
    2852:	d019      	beq.n	2888 <MPSL_IRQ_RTC0_Handler+0x50>
    2854:	4831      	ldr	r0, [pc, #196]	; (291c <MPSL_IRQ_RTC0_Handler+0xe4>)
    2856:	6800      	ldr	r0, [r0, #0]
    2858:	b1b0      	cbz	r0, 2888 <MPSL_IRQ_RTC0_Handler+0x50>
    285a:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    285e:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2862:	482f      	ldr	r0, [pc, #188]	; (2920 <MPSL_IRQ_RTC0_Handler+0xe8>)
    2864:	6800      	ldr	r0, [r0, #0]
    2866:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    286a:	1a40      	subs	r0, r0, r1
    286c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2870:	2802      	cmp	r0, #2
    2872:	d302      	bcc.n	287a <MPSL_IRQ_RTC0_Handler+0x42>
    2874:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2878:	d306      	bcc.n	2888 <MPSL_IRQ_RTC0_Handler+0x50>
    287a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    287e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    2882:	2004      	movs	r0, #4
    2884:	f7fe ff2c 	bl	16e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2888:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    288c:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    2890:	d019      	beq.n	28c6 <MPSL_IRQ_RTC0_Handler+0x8e>
    2892:	4824      	ldr	r0, [pc, #144]	; (2924 <MPSL_IRQ_RTC0_Handler+0xec>)
    2894:	6800      	ldr	r0, [r0, #0]
    2896:	b1b0      	cbz	r0, 28c6 <MPSL_IRQ_RTC0_Handler+0x8e>
    2898:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    289c:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    28a0:	4821      	ldr	r0, [pc, #132]	; (2928 <MPSL_IRQ_RTC0_Handler+0xf0>)
    28a2:	6800      	ldr	r0, [r0, #0]
    28a4:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    28a8:	1a40      	subs	r0, r0, r1
    28aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    28ae:	2802      	cmp	r0, #2
    28b0:	d302      	bcc.n	28b8 <MPSL_IRQ_RTC0_Handler+0x80>
    28b2:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    28b6:	d306      	bcc.n	28c6 <MPSL_IRQ_RTC0_Handler+0x8e>
    28b8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    28bc:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    28c0:	2005      	movs	r0, #5
    28c2:	f7fe ff0d 	bl	16e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    28c6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    28ca:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    28ce:	bf08      	it	eq
    28d0:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    28d4:	4815      	ldr	r0, [pc, #84]	; (292c <MPSL_IRQ_RTC0_Handler+0xf4>)
    28d6:	6800      	ldr	r0, [r0, #0]
    28d8:	2800      	cmp	r0, #0
    28da:	bf08      	it	eq
    28dc:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    28e0:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    28e4:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    28e8:	4811      	ldr	r0, [pc, #68]	; (2930 <MPSL_IRQ_RTC0_Handler+0xf8>)
    28ea:	6800      	ldr	r0, [r0, #0]
    28ec:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    28f0:	1a40      	subs	r0, r0, r1
    28f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    28f6:	2802      	cmp	r0, #2
    28f8:	d304      	bcc.n	2904 <MPSL_IRQ_RTC0_Handler+0xcc>
    28fa:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    28fe:	bf38      	it	cc
    2900:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    2904:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    2908:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    290c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2910:	2006      	movs	r0, #6
    2912:	f7fe bee5 	b.w	16e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2916:	0000      	.short	0x0000
    2918:	4000b000 	.word	0x4000b000
    291c:	4000b140 	.word	0x4000b140
    2920:	4000b540 	.word	0x4000b540
    2924:	4000b144 	.word	0x4000b144
    2928:	4000b544 	.word	0x4000b544
    292c:	4000b148 	.word	0x4000b148
    2930:	4000b548 	.word	0x4000b548

00002934 <MPSL_IRQ_TIMER0_Handler>:
    2934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2938:	4d38      	ldr	r5, [pc, #224]	; (2a1c <MPSL_IRQ_TIMER0_Handler+0xe8>)
    293a:	7828      	ldrb	r0, [r5, #0]
    293c:	2804      	cmp	r0, #4
    293e:	d068      	beq.n	2a12 <MPSL_IRQ_TIMER0_Handler+0xde>
    2940:	1ce8      	adds	r0, r5, #3
    2942:	2201      	movs	r2, #1
    2944:	7801      	ldrb	r1, [r0, #0]
    2946:	b159      	cbz	r1, 2960 <MPSL_IRQ_TIMER0_Handler+0x2c>
    2948:	2901      	cmp	r1, #1
    294a:	bf08      	it	eq
    294c:	706a      	strbeq	r2, [r5, #1]
    294e:	d002      	beq.n	2956 <MPSL_IRQ_TIMER0_Handler+0x22>
    2950:	7869      	ldrb	r1, [r5, #1]
    2952:	2900      	cmp	r1, #0
    2954:	d058      	beq.n	2a08 <MPSL_IRQ_TIMER0_Handler+0xd4>
    2956:	2102      	movs	r1, #2
    2958:	7001      	strb	r1, [r0, #0]
    295a:	7840      	ldrb	r0, [r0, #1]
    295c:	f000 fafa 	bl	2f54 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2960:	4c2f      	ldr	r4, [pc, #188]	; (2a20 <MPSL_IRQ_TIMER0_Handler+0xec>)
    2962:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2966:	f04f 0800 	mov.w	r8, #0
    296a:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    296e:	f44f 7780 	mov.w	r7, #256	; 0x100
    2972:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    2976:	d00a      	beq.n	298e <MPSL_IRQ_TIMER0_Handler+0x5a>
    2978:	482a      	ldr	r0, [pc, #168]	; (2a24 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    297a:	6800      	ldr	r0, [r0, #0]
    297c:	b138      	cbz	r0, 298e <MPSL_IRQ_TIMER0_Handler+0x5a>
    297e:	2003      	movs	r0, #3
    2980:	f000 fae8 	bl	2f54 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2984:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    2988:	2003      	movs	r0, #3
    298a:	f7fe fea9 	bl	16e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    298e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2992:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    2996:	d00a      	beq.n	29ae <MPSL_IRQ_TIMER0_Handler+0x7a>
    2998:	4823      	ldr	r0, [pc, #140]	; (2a28 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    299a:	6800      	ldr	r0, [r0, #0]
    299c:	b138      	cbz	r0, 29ae <MPSL_IRQ_TIMER0_Handler+0x7a>
    299e:	2002      	movs	r0, #2
    29a0:	f000 fad8 	bl	2f54 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    29a4:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    29a8:	2002      	movs	r0, #2
    29aa:	f7fe fe99 	bl	16e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    29ae:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    29b2:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    29b6:	d00a      	beq.n	29ce <MPSL_IRQ_TIMER0_Handler+0x9a>
    29b8:	481c      	ldr	r0, [pc, #112]	; (2a2c <MPSL_IRQ_TIMER0_Handler+0xf8>)
    29ba:	6800      	ldr	r0, [r0, #0]
    29bc:	b138      	cbz	r0, 29ce <MPSL_IRQ_TIMER0_Handler+0x9a>
    29be:	2001      	movs	r0, #1
    29c0:	f000 fac8 	bl	2f54 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    29c4:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    29c8:	2001      	movs	r0, #1
    29ca:	f7fe fe89 	bl	16e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    29ce:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    29d2:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    29d6:	bf08      	it	eq
    29d8:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    29dc:	4814      	ldr	r0, [pc, #80]	; (2a30 <MPSL_IRQ_TIMER0_Handler+0xfc>)
    29de:	6800      	ldr	r0, [r0, #0]
    29e0:	2800      	cmp	r0, #0
    29e2:	bf08      	it	eq
    29e4:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    29e8:	2000      	movs	r0, #0
    29ea:	f000 fab3 	bl	2f54 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    29ee:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    29f2:	2004      	movs	r0, #4
    29f4:	7028      	strb	r0, [r5, #0]
    29f6:	f8c5 8008 	str.w	r8, [r5, #8]
    29fa:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    29fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2a02:	2000      	movs	r0, #0
    2a04:	f7fe be6c 	b.w	16e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2a08:	f240 316a 	movw	r1, #874	; 0x36a
    2a0c:	206c      	movs	r0, #108	; 0x6c
    2a0e:	f000 ff61 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2a16:	2007      	movs	r0, #7
    2a18:	f7fe be62 	b.w	16e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2a1c:	20000020 	.word	0x20000020
    2a20:	40008000 	.word	0x40008000
    2a24:	4000814c 	.word	0x4000814c
    2a28:	40008148 	.word	0x40008148
    2a2c:	40008144 	.word	0x40008144
    2a30:	40008140 	.word	0x40008140
    2a34:	2201      	movs	r2, #1
    2a36:	0211      	lsls	r1, r2, #8
    2a38:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2a3c:	2000      	movs	r0, #0
    2a3e:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    2a42:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    2a46:	f3bf 8f4f 	dsb	sy
    2a4a:	f3bf 8f6f 	isb	sy
    2a4e:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    2a52:	490e      	ldr	r1, [pc, #56]	; (2a8c <MPSL_IRQ_TIMER0_Handler+0x158>)
    2a54:	f841 2f04 	str.w	r2, [r1, #4]!
    2a58:	1e43      	subs	r3, r0, #1
    2a5a:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    2a5e:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    2a62:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    2a66:	4b0a      	ldr	r3, [pc, #40]	; (2a90 <MPSL_IRQ_TIMER0_Handler+0x15c>)
    2a68:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2a6c:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2a70:	1d1b      	adds	r3, r3, #4
    2a72:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2a76:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2a7a:	1d1b      	adds	r3, r3, #4
    2a7c:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2a80:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    2a84:	60ca      	str	r2, [r1, #12]
    2a86:	4903      	ldr	r1, [pc, #12]	; (2a94 <MPSL_IRQ_TIMER0_Handler+0x160>)
    2a88:	7048      	strb	r0, [r1, #1]
    2a8a:	4770      	bx	lr
    2a8c:	40008000 	.word	0x40008000
    2a90:	40008004 	.word	0x40008004
    2a94:	20000020 	.word	0x20000020

00002a98 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    2a98:	4801      	ldr	r0, [pc, #4]	; (2aa0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    2a9a:	6800      	ldr	r0, [r0, #0]
    2a9c:	4770      	bx	lr
    2a9e:	0000      	.short	0x0000
    2aa0:	4000b504 	.word	0x4000b504

00002aa4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    2aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2aa8:	4e47      	ldr	r6, [pc, #284]	; (2bc8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    2aaa:	4605      	mov	r5, r0
    2aac:	1ef7      	subs	r7, r6, #3
    2aae:	7832      	ldrb	r2, [r6, #0]
    2ab0:	68f9      	ldr	r1, [r7, #12]
    2ab2:	2a01      	cmp	r2, #1
    2ab4:	bf04      	itt	eq
    2ab6:	42a9      	cmpeq	r1, r5
    2ab8:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2abc:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    2ac0:	4b42      	ldr	r3, [pc, #264]	; (2bcc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    2ac2:	6018      	str	r0, [r3, #0]
    2ac4:	4842      	ldr	r0, [pc, #264]	; (2bd0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    2ac6:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    2aca:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    2ace:	f100 0304 	add.w	r3, r0, #4
    2ad2:	f04f 0400 	mov.w	r4, #0
    2ad6:	2a00      	cmp	r2, #0
    2ad8:	d061      	beq.n	2b9e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfa>
    2ada:	f46f 2ca0 	mvn.w	ip, #327680	; 0x50000
    2ade:	f8c0 c348 	str.w	ip, [r0, #840]	; 0x348
    2ae2:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    2ae6:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    2aea:	4b3a      	ldr	r3, [pc, #232]	; (2bd4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    2aec:	681b      	ldr	r3, [r3, #0]
    2aee:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    2af2:	f04f 0801 	mov.w	r8, #1
    2af6:	2b00      	cmp	r3, #0
    2af8:	bf04      	itt	eq
    2afa:	f44f 6300 	moveq.w	r3, #2048	; 0x800
    2afe:	f8c9 3280 	streq.w	r3, [r9, #640]	; 0x280
    2b02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2b06:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    2b0a:	f8c0 3348 	str.w	r3, [r0, #840]	; 0x348
    2b0e:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    2b12:	f8d0 3504 	ldr.w	r3, [r0, #1284]	; 0x504
    2b16:	1aeb      	subs	r3, r5, r3
    2b18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2b1c:	2b02      	cmp	r3, #2
    2b1e:	d34b      	bcc.n	2bb8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>
    2b20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    2b24:	d248      	bcs.n	2bb8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>
    2b26:	f8c0 5540 	str.w	r5, [r0, #1344]	; 0x540
    2b2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2b2e:	f8c0 3344 	str.w	r3, [r0, #836]	; 0x344
    2b32:	b132      	cbz	r2, 2b42 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9e>
    2b34:	f8d0 2504 	ldr.w	r2, [r0, #1284]	; 0x504
    2b38:	1a8a      	subs	r2, r1, r2
    2b3a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2b3e:	2a02      	cmp	r2, #2
    2b40:	d3f8      	bcc.n	2b34 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x90>
    2b42:	f8c7 8008 	str.w	r8, [r7, #8]
    2b46:	703c      	strb	r4, [r7, #0]
    2b48:	f7ff ff74 	bl	2a34 <MPSL_IRQ_TIMER0_Handler+0x100>
    2b4c:	4822      	ldr	r0, [pc, #136]	; (2bd8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x134>)
    2b4e:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    2b52:	f364 0101 	bfi	r1, r4, #0, #2
    2b56:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    2b5a:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    2b5e:	2102      	movs	r1, #2
    2b60:	f361 0201 	bfi	r2, r1, #0, #2
    2b64:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    2b68:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    2b6c:	2104      	movs	r1, #4
    2b6e:	f361 0203 	bfi	r2, r1, #0, #4
    2b72:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    2b76:	f8c0 800c 	str.w	r8, [r0, #12]
    2b7a:	68b9      	ldr	r1, [r7, #8]
    2b7c:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    2b80:	1580      	asrs	r0, r0, #22
    2b82:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    2b86:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    2b8a:	4914      	ldr	r1, [pc, #80]	; (2bdc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>)
    2b8c:	05c0      	lsls	r0, r0, #23
    2b8e:	6008      	str	r0, [r1, #0]
    2b90:	2004      	movs	r0, #4
    2b92:	60fd      	str	r5, [r7, #12]
    2b94:	7070      	strb	r0, [r6, #1]
    2b96:	f886 8000 	strb.w	r8, [r6]
    2b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2b9e:	f46f 2c80 	mvn.w	ip, #262144	; 0x40000
    2ba2:	f8c0 c348 	str.w	ip, [r0, #840]	; 0x348
    2ba6:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    2baa:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    2bae:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    2bb2:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    2bb6:	e798      	b.n	2aea <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x46>
    2bb8:	2100      	movs	r1, #0
    2bba:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2bbe:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    2bc2:	206c      	movs	r0, #108	; 0x6c
    2bc4:	f000 fe86 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2bc8:	20000023 	.word	0x20000023
    2bcc:	4001f508 	.word	0x4001f508
    2bd0:	4000b000 	.word	0x4000b000
    2bd4:	4000b148 	.word	0x4000b148
    2bd8:	40008000 	.word	0x40008000
    2bdc:	4001f504 	.word	0x4001f504

00002be0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    2be0:	b570      	push	{r4, r5, r6, lr}
    2be2:	4c2c      	ldr	r4, [pc, #176]	; (2c94 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    2be4:	68e2      	ldr	r2, [r4, #12]
    2be6:	4282      	cmp	r2, r0
    2be8:	bf14      	ite	ne
    2bea:	2101      	movne	r1, #1
    2bec:	2100      	moveq	r1, #0
    2bee:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 2c98 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    2bf2:	f89c 5000 	ldrb.w	r5, [ip]
    2bf6:	2d02      	cmp	r5, #2
    2bf8:	d002      	beq.n	2c00 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    2bfa:	2900      	cmp	r1, #0
    2bfc:	d037      	beq.n	2c6e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x8e>
    2bfe:	e002      	b.n	2c06 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    2c00:	2900      	cmp	r1, #0
    2c02:	bf08      	it	eq
    2c04:	bd70      	popeq	{r4, r5, r6, pc}
    2c06:	7861      	ldrb	r1, [r4, #1]
    2c08:	b381      	cbz	r1, 2c6c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x8c>
    2c0a:	4b24      	ldr	r3, [pc, #144]	; (2c9c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    2c0c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2c10:	6019      	str	r1, [r3, #0]
    2c12:	138b      	asrs	r3, r1, #14
    2c14:	4922      	ldr	r1, [pc, #136]	; (2ca0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    2c16:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2c1a:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2c1e:	2300      	movs	r3, #0
    2c20:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
    2c24:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
    2c28:	1ac3      	subs	r3, r0, r3
    2c2a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2c2e:	2b02      	cmp	r3, #2
    2c30:	d327      	bcc.n	2c82 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa2>
    2c32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    2c36:	d224      	bcs.n	2c82 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa2>
    2c38:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    2c3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2c40:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    2c44:	b13d      	cbz	r5, 2c56 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x76>
    2c46:	bf00      	nop
    2c48:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
    2c4c:	1ad3      	subs	r3, r2, r3
    2c4e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2c52:	2b02      	cmp	r3, #2
    2c54:	d3f8      	bcc.n	2c48 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x68>
    2c56:	4b13      	ldr	r3, [pc, #76]	; (2ca4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    2c58:	2102      	movs	r1, #2
    2c5a:	074a      	lsls	r2, r1, #29
    2c5c:	601a      	str	r2, [r3, #0]
    2c5e:	60e0      	str	r0, [r4, #12]
    2c60:	2004      	movs	r0, #4
    2c62:	f88c 0001 	strb.w	r0, [ip, #1]
    2c66:	f88c 1000 	strb.w	r1, [ip]
    2c6a:	bd70      	pop	{r4, r5, r6, pc}
    2c6c:	e004      	b.n	2c78 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x98>
    2c6e:	f240 2102 	movw	r1, #514	; 0x202
    2c72:	206c      	movs	r0, #108	; 0x6c
    2c74:	f000 fe2e 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c78:	f240 2106 	movw	r1, #518	; 0x206
    2c7c:	206c      	movs	r0, #108	; 0x6c
    2c7e:	f000 fe29 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c82:	2000      	movs	r0, #0
    2c84:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    2c88:	f240 2112 	movw	r1, #530	; 0x212
    2c8c:	206c      	movs	r0, #108	; 0x6c
    2c8e:	f000 fe21 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c92:	0000      	.short	0x0000
    2c94:	20000020 	.word	0x20000020
    2c98:	20000023 	.word	0x20000023
    2c9c:	4001f508 	.word	0x4001f508
    2ca0:	4000b000 	.word	0x4000b000
    2ca4:	4001f504 	.word	0x4001f504

00002ca8 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    2ca8:	4801      	ldr	r0, [pc, #4]	; (2cb0 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    2caa:	68c0      	ldr	r0, [r0, #12]
    2cac:	4770      	bx	lr
    2cae:	0000      	.short	0x0000
    2cb0:	20000020 	.word	0x20000020

00002cb4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    2cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2cb8:	4936      	ldr	r1, [pc, #216]	; (2d94 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    2cba:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    2cbe:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    2cc2:	4d35      	ldr	r5, [pc, #212]	; (2d98 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    2cc4:	1d0b      	adds	r3, r1, #4
    2cc6:	2200      	movs	r2, #0
    2cc8:	7828      	ldrb	r0, [r5, #0]
    2cca:	b168      	cbz	r0, 2ce8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x34>
    2ccc:	f46f 2ca0 	mvn.w	ip, #327680	; 0x50000
    2cd0:	f8c1 c348 	str.w	ip, [r1, #840]	; 0x348
    2cd4:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    2cd8:	f8c1 2144 	str.w	r2, [r1, #324]	; 0x144
    2cdc:	4b2f      	ldr	r3, [pc, #188]	; (2d9c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    2cde:	681b      	ldr	r3, [r3, #0]
    2ce0:	f04f 0c01 	mov.w	ip, #1
    2ce4:	b99b      	cbnz	r3, 2d0e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5a>
    2ce6:	e00c      	b.n	2d02 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4e>
    2ce8:	f46f 2c80 	mvn.w	ip, #262144	; 0x40000
    2cec:	f8c1 c348 	str.w	ip, [r1, #840]	; 0x348
    2cf0:	f8c1 2540 	str.w	r2, [r1, #1344]	; 0x540
    2cf4:	f8c1 2140 	str.w	r2, [r1, #320]	; 0x140
    2cf8:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    2cfc:	f8c1 2144 	str.w	r2, [r1, #324]	; 0x144
    2d00:	e7ec      	b.n	2cdc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    2d02:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    2d06:	f44f 6300 	mov.w	r3, #2048	; 0x800
    2d0a:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
    2d0e:	2802      	cmp	r0, #2
    2d10:	d004      	beq.n	2d1c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x68>
    2d12:	f240 211e 	movw	r1, #542	; 0x21e
    2d16:	206c      	movs	r0, #108	; 0x6c
    2d18:	f000 fddc 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d1c:	f8d1 0504 	ldr.w	r0, [r1, #1284]	; 0x504
    2d20:	4c1f      	ldr	r4, [pc, #124]	; (2da0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    2d22:	1cc0      	adds	r0, r0, #3
    2d24:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2d28:	68e3      	ldr	r3, [r4, #12]
    2d2a:	4e1e      	ldr	r6, [pc, #120]	; (2da4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    2d2c:	4298      	cmp	r0, r3
    2d2e:	d00c      	beq.n	2d4a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    2d30:	f8d1 7504 	ldr.w	r7, [r1, #1284]	; 0x504
    2d34:	1bdf      	subs	r7, r3, r7
    2d36:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    2d3a:	2f04      	cmp	r7, #4
    2d3c:	d305      	bcc.n	2d4a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    2d3e:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    2d42:	d202      	bcs.n	2d4a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    2d44:	f7ff feae 	bl	2aa4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2d48:	e01f      	b.n	2d8a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd6>
    2d4a:	f8d1 0504 	ldr.w	r0, [r1, #1284]	; 0x504
    2d4e:	1a18      	subs	r0, r3, r0
    2d50:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2d54:	2802      	cmp	r0, #2
    2d56:	d315      	bcc.n	2d84 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    2d58:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2d5c:	d212      	bcs.n	2d84 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    2d5e:	4912      	ldr	r1, [pc, #72]	; (2da8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    2d60:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2d64:	6008      	str	r0, [r1, #0]
    2d66:	f8c4 c008 	str.w	ip, [r4, #8]
    2d6a:	7022      	strb	r2, [r4, #0]
    2d6c:	f8c6 c004 	str.w	ip, [r6, #4]
    2d70:	f8c6 c00c 	str.w	ip, [r6, #12]
    2d74:	0040      	lsls	r0, r0, #1
    2d76:	1f09      	subs	r1, r1, #4
    2d78:	6008      	str	r0, [r1, #0]
    2d7a:	2004      	movs	r0, #4
    2d7c:	7068      	strb	r0, [r5, #1]
    2d7e:	f885 c000 	strb.w	ip, [r5]
    2d82:	e002      	b.n	2d8a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd6>
    2d84:	f8c4 c008 	str.w	ip, [r4, #8]
    2d88:	7022      	strb	r2, [r4, #0]
    2d8a:	68a0      	ldr	r0, [r4, #8]
    2d8c:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    2d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2d94:	4000b000 	.word	0x4000b000
    2d98:	20000023 	.word	0x20000023
    2d9c:	4000b148 	.word	0x4000b148
    2da0:	20000020 	.word	0x20000020
    2da4:	40008000 	.word	0x40008000
    2da8:	4001f508 	.word	0x4001f508

00002dac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    2dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2db0:	f8df c190 	ldr.w	ip, [pc, #400]	; 2f44 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x198>
    2db4:	2600      	movs	r6, #0
    2db6:	2701      	movs	r7, #1
    2db8:	f89c 4000 	ldrb.w	r4, [ip]
    2dbc:	f89c c001 	ldrb.w	ip, [ip, #1]
    2dc0:	f44f 75a0 	mov.w	r5, #320	; 0x140
    2dc4:	2807      	cmp	r0, #7
    2dc6:	d27b      	bcs.n	2ec0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    2dc8:	e8df f000 	tbb	[pc, r0]
    2dcc:	04040404 	.word	0x04040404
    2dd0:	006c6c6c 	.word	0x006c6c6c
    2dd4:	f8df 8170 	ldr.w	r8, [pc, #368]	; 2f48 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x19c>
    2dd8:	f8d8 900c 	ldr.w	r9, [r8, #12]
    2ddc:	f1b9 7f80 	cmp.w	r9, #16777216	; 0x1000000
    2de0:	bf04      	itt	eq
    2de2:	f898 8001 	ldrbeq.w	r8, [r8, #1]
    2de6:	f1b8 0f00 	cmpeq.w	r8, #0
    2dea:	d002      	beq.n	2df2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    2dec:	2c02      	cmp	r4, #2
    2dee:	d005      	beq.n	2dfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x50>
    2df0:	e02c      	b.n	2e4c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa0>
    2df2:	f240 2151 	movw	r1, #593	; 0x251
    2df6:	206c      	movs	r0, #108	; 0x6c
    2df8:	f000 fd6c 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2dfc:	f1ac 0804 	sub.w	r8, ip, #4
    2e00:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    2e04:	eb05 0588 	add.w	r5, r5, r8, lsl #2
    2e08:	f105 4880 	add.w	r8, r5, #1073741824	; 0x40000000
    2e0c:	f508 4830 	add.w	r8, r8, #45056	; 0xb000
    2e10:	2500      	movs	r5, #0
    2e12:	2c01      	cmp	r4, #1
    2e14:	d002      	beq.n	2e1c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x70>
    2e16:	2c02      	cmp	r4, #2
    2e18:	d00b      	beq.n	2e32 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x86>
    2e1a:	e014      	b.n	2e46 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x9a>
    2e1c:	f1bc 0f04 	cmp.w	ip, #4
    2e20:	bf24      	itt	cs
    2e22:	f8d8 9000 	ldrcs.w	r9, [r8]
    2e26:	f1b9 0f00 	cmpcs.w	r9, #0
    2e2a:	bf08      	it	eq
    2e2c:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    2e30:	e009      	b.n	2e46 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x9a>
    2e32:	f1bc 0f04 	cmp.w	ip, #4
    2e36:	bf24      	itt	cs
    2e38:	f8d8 9000 	ldrcs.w	r9, [r8]
    2e3c:	f1b9 0f00 	cmpcs.w	r9, #0
    2e40:	bf08      	it	eq
    2e42:	f045 4580 	orreq.w	r5, r5, #1073741824	; 0x40000000
    2e46:	f015 4f80 	tst.w	r5, #1073741824	; 0x40000000
    2e4a:	d1e1      	bne.n	2e10 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x64>
    2e4c:	4c3f      	ldr	r4, [pc, #252]	; (2f4c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a0>)
    2e4e:	f100 0c10 	add.w	ip, r0, #16
    2e52:	fa07 fc0c 	lsl.w	ip, r7, ip
    2e56:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    2e5a:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    2e5e:	b1c2      	cbz	r2, 2e92 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe6>
    2e60:	f04f 0840 	mov.w	r8, #64	; 0x40
    2e64:	eb08 0880 	add.w	r8, r8, r0, lsl #2
    2e68:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    2e6c:	44a0      	add	r8, r4
    2e6e:	f8c8 7000 	str.w	r7, [r8]
    2e72:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    2e76:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    2e7a:	eba1 0000 	sub.w	r0, r1, r0
    2e7e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2e82:	4282      	cmp	r2, r0
    2e84:	bf98      	it	ls
    2e86:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
    2e8a:	bf28      	it	cs
    2e8c:	f8c5 6540 	strcs.w	r6, [r5, #1344]	; 0x540
    2e90:	d250      	bcs.n	2f34 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    2e92:	f8c5 1540 	str.w	r1, [r5, #1344]	; 0x540
    2e96:	2b01      	cmp	r3, #1
    2e98:	bf08      	it	eq
    2e9a:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    2e9e:	2001      	movs	r0, #1
    2ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2ea4:	b134      	cbz	r4, 2eb4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x108>
    2ea6:	4584      	cmp	ip, r0
    2ea8:	d104      	bne.n	2eb4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x108>
    2eaa:	f44f 711d 	mov.w	r1, #628	; 0x274
    2eae:	206c      	movs	r0, #108	; 0x6c
    2eb0:	f000 fd10 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2eb4:	f1a0 0c04 	sub.w	ip, r0, #4
    2eb8:	f00c 04ff 	and.w	r4, ip, #255	; 0xff
    2ebc:	2b01      	cmp	r3, #1
    2ebe:	e000      	b.n	2ec2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    2ec0:	e03b      	b.n	2f3a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18e>
    2ec2:	bf0c      	ite	eq
    2ec4:	f04f 0801 	moveq.w	r8, #1
    2ec8:	f04f 0800 	movne.w	r8, #0
    2ecc:	2c03      	cmp	r4, #3
    2ece:	d304      	bcc.n	2eda <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x12e>
    2ed0:	f240 114d 	movw	r1, #333	; 0x14d
    2ed4:	206c      	movs	r0, #108	; 0x6c
    2ed6:	f000 fcfd 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2eda:	f8df c074 	ldr.w	ip, [pc, #116]	; 2f50 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a4>
    2ede:	f104 0310 	add.w	r3, r4, #16
    2ee2:	fa07 f303 	lsl.w	r3, r7, r3
    2ee6:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    2eea:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    2eee:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    2ef2:	f84c 6004 	str.w	r6, [ip, r4]
    2ef6:	1f00      	subs	r0, r0, #4
    2ef8:	b2c0      	uxtb	r0, r0
    2efa:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    2efe:	b16a      	cbz	r2, 2f1c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x170>
    2f00:	f8dc 4504 	ldr.w	r4, [ip, #1284]	; 0x504
    2f04:	1b0c      	subs	r4, r1, r4
    2f06:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    2f0a:	42a2      	cmp	r2, r4
    2f0c:	bf98      	it	ls
    2f0e:	f5b4 0f80 	cmpls.w	r4, #4194304	; 0x400000
    2f12:	bf24      	itt	cs
    2f14:	2100      	movcs	r1, #0
    2f16:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    2f1a:	d20b      	bcs.n	2f34 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    2f1c:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2f20:	f1b8 0f00 	cmp.w	r8, #0
    2f24:	bf18      	it	ne
    2f26:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    2f2a:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    2f2e:	2001      	movs	r0, #1
    2f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2f34:	2000      	movs	r0, #0
    2f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2f3a:	f240 2179 	movw	r1, #633	; 0x279
    2f3e:	206c      	movs	r0, #108	; 0x6c
    2f40:	f000 fcc8 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f44:	20000023 	.word	0x20000023
    2f48:	20000020 	.word	0x20000020
    2f4c:	40008000 	.word	0x40008000
    2f50:	4000b000 	.word	0x4000b000

00002f54 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    2f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2f58:	2600      	movs	r6, #0
    2f5a:	f44f 77a0 	mov.w	r7, #320	; 0x140
    2f5e:	f04f 0801 	mov.w	r8, #1
    2f62:	2807      	cmp	r0, #7
    2f64:	d251      	bcs.n	300a <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb6>
    2f66:	e8df f000 	tbb	[pc, r0]
    2f6a:	0404      	.short	0x0404
    2f6c:	19190404 	.word	0x19190404
    2f70:	0019      	.short	0x0019
    2f72:	f100 0110 	add.w	r1, r0, #16
    2f76:	fa08 f201 	lsl.w	r2, r8, r1
    2f7a:	4926      	ldr	r1, [pc, #152]	; (3014 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    2f7c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    2f80:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    2f84:	2200      	movs	r2, #0
    2f86:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    2f8a:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    2f8e:	508e      	str	r6, [r1, r2]
    2f90:	4921      	ldr	r1, [pc, #132]	; (3018 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    2f92:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    2f96:	9000      	str	r0, [sp, #0]
    2f98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2f9c:	4d1f      	ldr	r5, [pc, #124]	; (301c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    2f9e:	1f01      	subs	r1, r0, #4
    2fa0:	b2cc      	uxtb	r4, r1
    2fa2:	7829      	ldrb	r1, [r5, #0]
    2fa4:	b179      	cbz	r1, 2fc6 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x72>
    2fa6:	786a      	ldrb	r2, [r5, #1]
    2fa8:	4282      	cmp	r2, r0
    2faa:	d10c      	bne.n	2fc6 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x72>
    2fac:	4a1c      	ldr	r2, [pc, #112]	; (3020 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    2fae:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    2fb2:	6010      	str	r0, [r2, #0]
    2fb4:	2901      	cmp	r1, #1
    2fb6:	bf08      	it	eq
    2fb8:	f7ff fd3c 	bleq	2a34 <MPSL_IRQ_TIMER0_Handler+0x100>
    2fbc:	702e      	strb	r6, [r5, #0]
    2fbe:	4919      	ldr	r1, [pc, #100]	; (3024 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    2fc0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    2fc4:	60c8      	str	r0, [r1, #12]
    2fc6:	f104 0010 	add.w	r0, r4, #16
    2fca:	fa08 f100 	lsl.w	r1, r8, r0
    2fce:	4816      	ldr	r0, [pc, #88]	; (3028 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    2fd0:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    2fd4:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    2fd8:	00a1      	lsls	r1, r4, #2
    2fda:	4401      	add	r1, r0
    2fdc:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
    2fe0:	f8d0 2504 	ldr.w	r2, [r0, #1284]	; 0x504
    2fe4:	1a89      	subs	r1, r1, r2
    2fe6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2fea:	2902      	cmp	r1, #2
    2fec:	d307      	bcc.n	2ffe <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xaa>
    2fee:	eb00 0284 	add.w	r2, r0, r4, lsl #2
    2ff2:	2100      	movs	r1, #0
    2ff4:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    2ff8:	eb07 0184 	add.w	r1, r7, r4, lsl #2
    2ffc:	5046      	str	r6, [r0, r1]
    2ffe:	480b      	ldr	r0, [pc, #44]	; (302c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    3000:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    3004:	9000      	str	r0, [sp, #0]
    3006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    300a:	f240 21f1 	movw	r1, #753	; 0x2f1
    300e:	206c      	movs	r0, #108	; 0x6c
    3010:	f000 fc60 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3014:	40008000 	.word	0x40008000
    3018:	40008140 	.word	0x40008140
    301c:	20000023 	.word	0x20000023
    3020:	4001f508 	.word	0x4001f508
    3024:	20000020 	.word	0x20000020
    3028:	4000b000 	.word	0x4000b000
    302c:	4000b140 	.word	0x4000b140

00003030 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    3030:	4920      	ldr	r1, [pc, #128]	; (30b4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    3032:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    3036:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    303a:	481f      	ldr	r0, [pc, #124]	; (30b8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    303c:	1d0a      	adds	r2, r1, #4
    303e:	7803      	ldrb	r3, [r0, #0]
    3040:	2000      	movs	r0, #0
    3042:	b15b      	cbz	r3, 305c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x2c>
    3044:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    3048:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    304c:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    3050:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3054:	4919      	ldr	r1, [pc, #100]	; (30bc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    3056:	6809      	ldr	r1, [r1, #0]
    3058:	b999      	cbnz	r1, 3082 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x52>
    305a:	e00c      	b.n	3076 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x46>
    305c:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    3060:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3064:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    3068:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    306c:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    3070:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3074:	e7ee      	b.n	3054 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x24>
    3076:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    307a:	f44f 6100 	mov.w	r1, #2048	; 0x800
    307e:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    3082:	490f      	ldr	r1, [pc, #60]	; (30c0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    3084:	f04f 32ff 	mov.w	r2, #4294967295
    3088:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    308c:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    3090:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    3094:	1d0a      	adds	r2, r1, #4
    3096:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    309a:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    309e:	1d12      	adds	r2, r2, #4
    30a0:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    30a4:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    30a8:	1d12      	adds	r2, r2, #4
    30aa:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    30ae:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    30b2:	4770      	bx	lr
    30b4:	4000b000 	.word	0x4000b000
    30b8:	20000023 	.word	0x20000023
    30bc:	4000b148 	.word	0x4000b148
    30c0:	40008000 	.word	0x40008000

000030c4 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    30c4:	4808      	ldr	r0, [pc, #32]	; (30e8 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    30c6:	f990 0002 	ldrsb.w	r0, [r0, #2]
    30ca:	2800      	cmp	r0, #0
    30cc:	bfb8      	it	lt
    30ce:	4770      	bxlt	lr
    30d0:	f000 011f 	and.w	r1, r0, #31
    30d4:	2201      	movs	r2, #1
    30d6:	fa02 f101 	lsl.w	r1, r2, r1
    30da:	0940      	lsrs	r0, r0, #5
    30dc:	0080      	lsls	r0, r0, #2
    30de:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    30e2:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    30e6:	4770      	bx	lr
    30e8:	20000020 	.word	0x20000020

000030ec <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    30ec:	b510      	push	{r4, lr}
    30ee:	2807      	cmp	r0, #7
    30f0:	d20d      	bcs.n	310e <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    30f2:	e8df f000 	tbb	[pc, r0]
    30f6:	0404      	.short	0x0404
    30f8:	06060404 	.word	0x06060404
    30fc:	0006      	.short	0x0006
    30fe:	4906      	ldr	r1, [pc, #24]	; (3118 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    3100:	e002      	b.n	3108 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    3102:	1f00      	subs	r0, r0, #4
    3104:	4905      	ldr	r1, [pc, #20]	; (311c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    3106:	b2c0      	uxtb	r0, r0
    3108:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    310c:	bd10      	pop	{r4, pc}
    310e:	f240 219d 	movw	r1, #669	; 0x29d
    3112:	206c      	movs	r0, #108	; 0x6c
    3114:	f000 fbde 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3118:	40008140 	.word	0x40008140
    311c:	4000b140 	.word	0x4000b140

00003120 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    3120:	b510      	push	{r4, lr}
    3122:	2807      	cmp	r0, #7
    3124:	d20d      	bcs.n	3142 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    3126:	e8df f000 	tbb	[pc, r0]
    312a:	0404      	.short	0x0404
    312c:	06060404 	.word	0x06060404
    3130:	0006      	.short	0x0006
    3132:	4906      	ldr	r1, [pc, #24]	; (314c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    3134:	e002      	b.n	313c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    3136:	1f00      	subs	r0, r0, #4
    3138:	4905      	ldr	r1, [pc, #20]	; (3150 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    313a:	b2c0      	uxtb	r0, r0
    313c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    3140:	bd10      	pop	{r4, pc}
    3142:	f240 219d 	movw	r1, #669	; 0x29d
    3146:	206c      	movs	r0, #108	; 0x6c
    3148:	f000 fbc4 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    314c:	40008140 	.word	0x40008140
    3150:	4000b140 	.word	0x4000b140

00003154 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    3154:	b510      	push	{r4, lr}
    3156:	481c      	ldr	r0, [pc, #112]	; (31c8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    3158:	2400      	movs	r4, #0
    315a:	2104      	movs	r1, #4
    315c:	7004      	strb	r4, [r0, #0]
    315e:	1ec0      	subs	r0, r0, #3
    3160:	7001      	strb	r1, [r0, #0]
    3162:	0589      	lsls	r1, r1, #22
    3164:	60c1      	str	r1, [r0, #12]
    3166:	f7ff fc65 	bl	2a34 <MPSL_IRQ_TIMER0_Handler+0x100>
    316a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    316e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    3172:	f04f 0c01 	mov.w	ip, #1
    3176:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    317a:	f3bf 8f4f 	dsb	sy
    317e:	f3bf 8f6f 	isb	sy
    3182:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    3186:	4811      	ldr	r0, [pc, #68]	; (31cc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x78>)
    3188:	f8c0 c004 	str.w	ip, [r0, #4]
    318c:	f8c0 c008 	str.w	ip, [r0, #8]
    3190:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    3194:	2900      	cmp	r1, #0
    3196:	d1fb      	bne.n	3190 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x3c>
    3198:	1e49      	subs	r1, r1, #1
    319a:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    319e:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    31a2:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    31a6:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    31aa:	4909      	ldr	r1, [pc, #36]	; (31d0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x7c>)
    31ac:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    31b0:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    31b4:	1d09      	adds	r1, r1, #4
    31b6:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    31ba:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    31be:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    31c2:	f8c0 c000 	str.w	ip, [r0]
    31c6:	bd10      	pop	{r4, pc}
    31c8:	20000023 	.word	0x20000023
    31cc:	4000b000 	.word	0x4000b000
    31d0:	4000b004 	.word	0x4000b004

000031d4 <MPSL_IRQ_CLOCK_Handler>:
    31d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    31d8:	4c16      	ldr	r4, [pc, #88]	; (3234 <MPSL_IRQ_CLOCK_Handler+0x60>)
    31da:	7a60      	ldrb	r0, [r4, #9]
    31dc:	2800      	cmp	r0, #0
    31de:	d027      	beq.n	3230 <MPSL_IRQ_CLOCK_Handler+0x5c>
    31e0:	f44f 7180 	mov.w	r1, #256	; 0x100
    31e4:	058d      	lsls	r5, r1, #22
    31e6:	4628      	mov	r0, r5
    31e8:	f008 fd72 	bl	bcd0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    31ec:	4680      	mov	r8, r0
    31ee:	f44f 7182 	mov.w	r1, #260	; 0x104
    31f2:	4628      	mov	r0, r5
    31f4:	f008 fd6c 	bl	bcd0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    31f8:	2600      	movs	r6, #0
    31fa:	4607      	mov	r7, r0
    31fc:	f1b8 0f00 	cmp.w	r8, #0
    3200:	d009      	beq.n	3216 <MPSL_IRQ_CLOCK_Handler+0x42>
    3202:	2001      	movs	r0, #1
    3204:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3208:	7920      	ldrb	r0, [r4, #4]
    320a:	b120      	cbz	r0, 3216 <MPSL_IRQ_CLOCK_Handler+0x42>
    320c:	7126      	strb	r6, [r4, #4]
    320e:	69e0      	ldr	r0, [r4, #28]
    3210:	b108      	cbz	r0, 3216 <MPSL_IRQ_CLOCK_Handler+0x42>
    3212:	4780      	blx	r0
    3214:	61e6      	str	r6, [r4, #28]
    3216:	b137      	cbz	r7, 3226 <MPSL_IRQ_CLOCK_Handler+0x52>
    3218:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    321c:	2002      	movs	r0, #2
    321e:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3222:	f000 fa8b 	bl	373c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    3226:	4640      	mov	r0, r8
    3228:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    322c:	f000 b85a 	b.w	32e4 <MPSL_IRQ_CLOCK_Handler+0x110>
    3230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3234:	20000030 	.word	0x20000030
    3238:	b510      	push	{r4, lr}
    323a:	f008 fdf3 	bl	be24 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    323e:	b930      	cbnz	r0, 324e <MPSL_IRQ_CLOCK_Handler+0x7a>
    3240:	f008 fe11 	bl	be66 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3244:	b918      	cbnz	r0, 324e <MPSL_IRQ_CLOCK_Handler+0x7a>
    3246:	f008 fe44 	bl	bed2 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    324a:	2800      	cmp	r0, #0
    324c:	d002      	beq.n	3254 <MPSL_IRQ_CLOCK_Handler+0x80>
    324e:	4902      	ldr	r1, [pc, #8]	; (3258 <MPSL_IRQ_CLOCK_Handler+0x84>)
    3250:	2002      	movs	r0, #2
    3252:	6008      	str	r0, [r1, #0]
    3254:	bd10      	pop	{r4, pc}
    3256:	0000      	.short	0x0000
    3258:	40000c34 	.word	0x40000c34
    325c:	b570      	push	{r4, r5, r6, lr}
    325e:	f000 f987 	bl	3570 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3262:	f000 fabf 	bl	37e4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3266:	4c09      	ldr	r4, [pc, #36]	; (328c <MPSL_IRQ_CLOCK_Handler+0xb8>)
    3268:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    326c:	b130      	cbz	r0, 327c <MPSL_IRQ_CLOCK_Handler+0xa8>
    326e:	f7ff ffe3 	bl	3238 <MPSL_IRQ_CLOCK_Handler+0x64>
    3272:	2001      	movs	r0, #1
    3274:	6128      	str	r0, [r5, #16]
    3276:	2004      	movs	r0, #4
    3278:	72a0      	strb	r0, [r4, #10]
    327a:	e004      	b.n	3286 <MPSL_IRQ_CLOCK_Handler+0xb2>
    327c:	2003      	movs	r0, #3
    327e:	72a0      	strb	r0, [r4, #10]
    3280:	2001      	movs	r0, #1
    3282:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3286:	2000      	movs	r0, #0
    3288:	71e0      	strb	r0, [r4, #7]
    328a:	bd70      	pop	{r4, r5, r6, pc}
    328c:	20000030 	.word	0x20000030
    3290:	b570      	push	{r4, r5, r6, lr}
    3292:	4c13      	ldr	r4, [pc, #76]	; (32e0 <MPSL_IRQ_CLOCK_Handler+0x10c>)
    3294:	79a0      	ldrb	r0, [r4, #6]
    3296:	b1f0      	cbz	r0, 32d6 <MPSL_IRQ_CLOCK_Handler+0x102>
    3298:	2801      	cmp	r0, #1
    329a:	d003      	beq.n	32a4 <MPSL_IRQ_CLOCK_Handler+0xd0>
    329c:	79e1      	ldrb	r1, [r4, #7]
    329e:	1e40      	subs	r0, r0, #1
    32a0:	4281      	cmp	r1, r0
    32a2:	da18      	bge.n	32d6 <MPSL_IRQ_CLOCK_Handler+0x102>
    32a4:	f000 fa9e 	bl	37e4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    32a8:	4605      	mov	r5, r0
    32aa:	f000 fb83 	bl	39b4 <mpsl_temperature_get>
    32ae:	79a1      	ldrb	r1, [r4, #6]
    32b0:	2901      	cmp	r1, #1
    32b2:	d902      	bls.n	32ba <MPSL_IRQ_CLOCK_Handler+0xe6>
    32b4:	79e1      	ldrb	r1, [r4, #7]
    32b6:	1c49      	adds	r1, r1, #1
    32b8:	71e1      	strb	r1, [r4, #7]
    32ba:	b10d      	cbz	r5, 32c0 <MPSL_IRQ_CLOCK_Handler+0xec>
    32bc:	6961      	ldr	r1, [r4, #20]
    32be:	e000      	b.n	32c2 <MPSL_IRQ_CLOCK_Handler+0xee>
    32c0:	6921      	ldr	r1, [r4, #16]
    32c2:	1a41      	subs	r1, r0, r1
    32c4:	2902      	cmp	r1, #2
    32c6:	da02      	bge.n	32ce <MPSL_IRQ_CLOCK_Handler+0xfa>
    32c8:	f111 0f02 	cmn.w	r1, #2
    32cc:	dc07      	bgt.n	32de <MPSL_IRQ_CLOCK_Handler+0x10a>
    32ce:	b10d      	cbz	r5, 32d4 <MPSL_IRQ_CLOCK_Handler+0x100>
    32d0:	6160      	str	r0, [r4, #20]
    32d2:	e000      	b.n	32d6 <MPSL_IRQ_CLOCK_Handler+0x102>
    32d4:	6120      	str	r0, [r4, #16]
    32d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    32da:	f7ff bfbf 	b.w	325c <MPSL_IRQ_CLOCK_Handler+0x88>
    32de:	bd70      	pop	{r4, r5, r6, pc}
    32e0:	20000030 	.word	0x20000030
    32e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    32e8:	4606      	mov	r6, r0
    32ea:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    32ee:	f44f 7186 	mov.w	r1, #268	; 0x10c
    32f2:	4628      	mov	r0, r5
    32f4:	f008 fcec 	bl	bcd0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    32f8:	4680      	mov	r8, r0
    32fa:	f44f 7188 	mov.w	r1, #272	; 0x110
    32fe:	4628      	mov	r0, r5
    3300:	f008 fce6 	bl	bcd0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3304:	4c27      	ldr	r4, [pc, #156]	; (33a4 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    3306:	4682      	mov	sl, r0
    3308:	7827      	ldrb	r7, [r4, #0]
    330a:	f104 0008 	add.w	r0, r4, #8
    330e:	f008 fd53 	bl	bdb8 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    3312:	b110      	cbz	r0, 331a <MPSL_IRQ_CLOCK_Handler+0x146>
    3314:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    3318:	e016      	b.n	3348 <MPSL_IRQ_CLOCK_Handler+0x174>
    331a:	f04f 0901 	mov.w	r9, #1
    331e:	b146      	cbz	r6, 3332 <MPSL_IRQ_CLOCK_Handler+0x15e>
    3320:	7aa0      	ldrb	r0, [r4, #10]
    3322:	2803      	cmp	r0, #3
    3324:	d105      	bne.n	3332 <MPSL_IRQ_CLOCK_Handler+0x15e>
    3326:	2004      	movs	r0, #4
    3328:	72a0      	strb	r0, [r4, #10]
    332a:	f7ff ff85 	bl	3238 <MPSL_IRQ_CLOCK_Handler+0x64>
    332e:	f8c5 9010 	str.w	r9, [r5, #16]
    3332:	2600      	movs	r6, #0
    3334:	f1b8 0f00 	cmp.w	r8, #0
    3338:	d018      	beq.n	336c <MPSL_IRQ_CLOCK_Handler+0x198>
    333a:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    333e:	7aa0      	ldrb	r0, [r4, #10]
    3340:	2804      	cmp	r0, #4
    3342:	d004      	beq.n	334e <MPSL_IRQ_CLOCK_Handler+0x17a>
    3344:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    3348:	206d      	movs	r0, #109	; 0x6d
    334a:	f000 fac3 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    334e:	f008 fd69 	bl	be24 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    3352:	b928      	cbnz	r0, 3360 <MPSL_IRQ_CLOCK_Handler+0x18c>
    3354:	f008 fd87 	bl	be66 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3358:	b910      	cbnz	r0, 3360 <MPSL_IRQ_CLOCK_Handler+0x18c>
    335a:	f008 fdba 	bl	bed2 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    335e:	b108      	cbz	r0, 3364 <MPSL_IRQ_CLOCK_Handler+0x190>
    3360:	4811      	ldr	r0, [pc, #68]	; (33a8 <MPSL_IRQ_CLOCK_Handler+0x1d4>)
    3362:	6006      	str	r6, [r0, #0]
    3364:	2002      	movs	r0, #2
    3366:	72a0      	strb	r0, [r4, #10]
    3368:	f000 f8e6 	bl	3538 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    336c:	f1ba 0f00 	cmp.w	sl, #0
    3370:	d008      	beq.n	3384 <MPSL_IRQ_CLOCK_Handler+0x1b0>
    3372:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    3376:	7aa0      	ldrb	r0, [r4, #10]
    3378:	2802      	cmp	r0, #2
    337a:	d101      	bne.n	3380 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    337c:	f7ff ff88 	bl	3290 <MPSL_IRQ_CLOCK_Handler+0xbc>
    3380:	f8c5 9014 	str.w	r9, [r5, #20]
    3384:	b13f      	cbz	r7, 3396 <MPSL_IRQ_CLOCK_Handler+0x1c2>
    3386:	7026      	strb	r6, [r4, #0]
    3388:	7aa0      	ldrb	r0, [r4, #10]
    338a:	2802      	cmp	r0, #2
    338c:	d101      	bne.n	3392 <MPSL_IRQ_CLOCK_Handler+0x1be>
    338e:	f7ff ff65 	bl	325c <MPSL_IRQ_CLOCK_Handler+0x88>
    3392:	f000 f8d1 	bl	3538 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3396:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    339a:	4802      	ldr	r0, [pc, #8]	; (33a4 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    339c:	3008      	adds	r0, #8
    339e:	f008 bd22 	b.w	bde6 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    33a2:	0000      	.short	0x0000
    33a4:	20000030 	.word	0x20000030
    33a8:	40000c34 	.word	0x40000c34
    33ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    33b0:	4c5c      	ldr	r4, [pc, #368]	; (3524 <MPSL_IRQ_CLOCK_Handler+0x350>)
    33b2:	f04f 0800 	mov.w	r8, #0
    33b6:	4606      	mov	r6, r0
    33b8:	f8c4 8018 	str.w	r8, [r4, #24]
    33bc:	7843      	ldrb	r3, [r0, #1]
    33be:	7882      	ldrb	r2, [r0, #2]
    33c0:	7800      	ldrb	r0, [r0, #0]
    33c2:	72e0      	strb	r0, [r4, #11]
    33c4:	7163      	strb	r3, [r4, #5]
    33c6:	2701      	movs	r7, #1
    33c8:	71a2      	strb	r2, [r4, #6]
    33ca:	07bd      	lsls	r5, r7, #30
    33cc:	f884 8007 	strb.w	r8, [r4, #7]
    33d0:	2805      	cmp	r0, #5
    33d2:	d224      	bcs.n	341e <MPSL_IRQ_CLOCK_Handler+0x24a>
    33d4:	e8df f000 	tbb	[pc, r0]
    33d8:	1f05030f 	.word	0x1f05030f
    33dc:	0021      	.short	0x0021
    33de:	61a7      	str	r7, [r4, #24]
    33e0:	e009      	b.n	33f6 <MPSL_IRQ_CLOCK_Handler+0x222>
    33e2:	f000 f8c5 	bl	3570 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    33e6:	2101      	movs	r1, #1
    33e8:	4628      	mov	r0, r5
    33ea:	f008 fc76 	bl	bcda <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    33ee:	2800      	cmp	r0, #0
    33f0:	d0f9      	beq.n	33e6 <MPSL_IRQ_CLOCK_Handler+0x212>
    33f2:	2002      	movs	r0, #2
    33f4:	61a0      	str	r0, [r4, #24]
    33f6:	f008 fc9c 	bl	bd32 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    33fa:	b1b0      	cbz	r0, 342a <MPSL_IRQ_CLOCK_Handler+0x256>
    33fc:	f000 fa0c 	bl	3818 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    3400:	7e21      	ldrb	r1, [r4, #24]
    3402:	f001 0103 	and.w	r1, r1, #3
    3406:	4288      	cmp	r0, r1
    3408:	d10f      	bne.n	342a <MPSL_IRQ_CLOCK_Handler+0x256>
    340a:	79b0      	ldrb	r0, [r6, #6]
    340c:	b150      	cbz	r0, 3424 <MPSL_IRQ_CLOCK_Handler+0x250>
    340e:	2002      	movs	r0, #2
    3410:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3414:	e06a      	b.n	34ec <MPSL_IRQ_CLOCK_Handler+0x318>
    3416:	4844      	ldr	r0, [pc, #272]	; (3528 <MPSL_IRQ_CLOCK_Handler+0x354>)
    3418:	e7ec      	b.n	33f4 <MPSL_IRQ_CLOCK_Handler+0x220>
    341a:	4844      	ldr	r0, [pc, #272]	; (352c <MPSL_IRQ_CLOCK_Handler+0x358>)
    341c:	e7ea      	b.n	33f4 <MPSL_IRQ_CLOCK_Handler+0x220>
    341e:	f240 312d 	movw	r1, #813	; 0x32d
    3422:	e049      	b.n	34b8 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    3424:	f000 f9cc 	bl	37c0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3428:	e060      	b.n	34ec <MPSL_IRQ_CLOCK_Handler+0x318>
    342a:	60ef      	str	r7, [r5, #12]
    342c:	f44f 7a82 	mov.w	sl, #260	; 0x104
    3430:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    3434:	69a0      	ldr	r0, [r4, #24]
    3436:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    343a:	f008 fcdf 	bl	bdfc <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    343e:	b940      	cbnz	r0, 3452 <MPSL_IRQ_CLOCK_Handler+0x27e>
    3440:	f008 fce6 	bl	be10 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3444:	b928      	cbnz	r0, 3452 <MPSL_IRQ_CLOCK_Handler+0x27e>
    3446:	f008 fcfa 	bl	be3e <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    344a:	b910      	cbnz	r0, 3452 <MPSL_IRQ_CLOCK_Handler+0x27e>
    344c:	f008 fd0b 	bl	be66 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3450:	b138      	cbz	r0, 3462 <MPSL_IRQ_CLOCK_Handler+0x28e>
    3452:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    3456:	4836      	ldr	r0, [pc, #216]	; (3530 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    3458:	f8d1 1244 	ldr.w	r1, [r1, #580]	; 0x244
    345c:	f3c1 3142 	ubfx	r1, r1, #13, #3
    3460:	6001      	str	r1, [r0, #0]
    3462:	f008 fccb 	bl	bdfc <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3466:	b940      	cbnz	r0, 347a <MPSL_IRQ_CLOCK_Handler+0x2a6>
    3468:	f008 fcd2 	bl	be10 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    346c:	b928      	cbnz	r0, 347a <MPSL_IRQ_CLOCK_Handler+0x2a6>
    346e:	f008 fce6 	bl	be3e <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3472:	b910      	cbnz	r0, 347a <MPSL_IRQ_CLOCK_Handler+0x2a6>
    3474:	f008 fcf7 	bl	be66 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3478:	b110      	cbz	r0, 3480 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    347a:	482d      	ldr	r0, [pc, #180]	; (3530 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    347c:	3010      	adds	r0, #16
    347e:	6007      	str	r7, [r0, #0]
    3480:	60af      	str	r7, [r5, #8]
    3482:	2002      	movs	r0, #2
    3484:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3488:	79b0      	ldrb	r0, [r6, #6]
    348a:	bb78      	cbnz	r0, 34ec <MPSL_IRQ_CLOCK_Handler+0x318>
    348c:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    3490:	f010 0f02 	tst.w	r0, #2
    3494:	d00e      	beq.n	34b4 <MPSL_IRQ_CLOCK_Handler+0x2e0>
    3496:	f8df 909c 	ldr.w	r9, [pc, #156]	; 3534 <MPSL_IRQ_CLOCK_Handler+0x360>
    349a:	f8d9 1000 	ldr.w	r1, [r9]
    349e:	43c9      	mvns	r1, r1
    34a0:	f341 1700 	sbfx	r7, r1, #4, #1
    34a4:	f8d9 1000 	ldr.w	r1, [r9]
    34a8:	f041 0110 	orr.w	r1, r1, #16
    34ac:	f8c9 1000 	str.w	r1, [r9]
    34b0:	1c7f      	adds	r7, r7, #1
    34b2:	e007      	b.n	34c4 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    34b4:	f240 21ee 	movw	r1, #750	; 0x2ee
    34b8:	206d      	movs	r0, #109	; 0x6d
    34ba:	f000 fa0b 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    34be:	bf00      	nop
    34c0:	f000 fb2e 	bl	3b20 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    34c4:	4651      	mov	r1, sl
    34c6:	4628      	mov	r0, r5
    34c8:	f008 fc02 	bl	bcd0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    34cc:	2800      	cmp	r0, #0
    34ce:	d0f7      	beq.n	34c0 <MPSL_IRQ_CLOCK_Handler+0x2ec>
    34d0:	f000 f976 	bl	37c0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    34d4:	b92f      	cbnz	r7, 34e2 <MPSL_IRQ_CLOCK_Handler+0x30e>
    34d6:	f8d9 1000 	ldr.w	r1, [r9]
    34da:	f021 0110 	bic.w	r1, r1, #16
    34de:	f8c9 1000 	str.w	r1, [r9]
    34e2:	2002      	movs	r0, #2
    34e4:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    34e8:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    34ec:	79a0      	ldrb	r0, [r4, #6]
    34ee:	b170      	cbz	r0, 350e <MPSL_IRQ_CLOCK_Handler+0x33a>
    34f0:	7830      	ldrb	r0, [r6, #0]
    34f2:	b960      	cbnz	r0, 350e <MPSL_IRQ_CLOCK_Handler+0x33a>
    34f4:	f000 f976 	bl	37e4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    34f8:	4606      	mov	r6, r0
    34fa:	f000 fa5b 	bl	39b4 <mpsl_temperature_get>
    34fe:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    3502:	b116      	cbz	r6, 350a <MPSL_IRQ_CLOCK_Handler+0x336>
    3504:	e9c4 2004 	strd	r2, r0, [r4, #16]
    3508:	e001      	b.n	350e <MPSL_IRQ_CLOCK_Handler+0x33a>
    350a:	e9c4 0204 	strd	r0, r2, [r4, #16]
    350e:	2101      	movs	r1, #1
    3510:	4628      	mov	r0, r5
    3512:	f008 fbe2 	bl	bcda <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3516:	b108      	cbz	r0, 351c <MPSL_IRQ_CLOCK_Handler+0x348>
    3518:	f000 f95e 	bl	37d8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    351c:	f884 800a 	strb.w	r8, [r4, #10]
    3520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3524:	20000030 	.word	0x20000030
    3528:	00020001 	.word	0x00020001
    352c:	00030001 	.word	0x00030001
    3530:	4000053c 	.word	0x4000053c
    3534:	e000ed10 	.word	0xe000ed10

00003538 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    3538:	b510      	push	{r4, lr}
    353a:	f3ef 8410 	mrs	r4, PRIMASK
    353e:	b672      	cpsid	i
    3540:	480a      	ldr	r0, [pc, #40]	; (356c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    3542:	7841      	ldrb	r1, [r0, #1]
    3544:	b129      	cbz	r1, 3552 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    3546:	7841      	ldrb	r1, [r0, #1]
    3548:	1e49      	subs	r1, r1, #1
    354a:	7041      	strb	r1, [r0, #1]
    354c:	7841      	ldrb	r1, [r0, #1]
    354e:	b129      	cbz	r1, 355c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    3550:	e008      	b.n	3564 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3552:	f240 110d 	movw	r1, #269	; 0x10d
    3556:	206d      	movs	r0, #109	; 0x6d
    3558:	f000 f9bc 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    355c:	7880      	ldrb	r0, [r0, #2]
    355e:	b908      	cbnz	r0, 3564 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3560:	f000 f94e 	bl	3800 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3564:	2c00      	cmp	r4, #0
    3566:	d100      	bne.n	356a <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    3568:	b662      	cpsie	i
    356a:	bd10      	pop	{r4, pc}
    356c:	20000030 	.word	0x20000030

00003570 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    3570:	b510      	push	{r4, lr}
    3572:	f3ef 8410 	mrs	r4, PRIMASK
    3576:	b672      	cpsid	i
    3578:	4806      	ldr	r0, [pc, #24]	; (3594 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    357a:	7841      	ldrb	r1, [r0, #1]
    357c:	1c49      	adds	r1, r1, #1
    357e:	7041      	strb	r1, [r0, #1]
    3580:	7840      	ldrb	r0, [r0, #1]
    3582:	2801      	cmp	r0, #1
    3584:	d101      	bne.n	358a <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    3586:	f008 fbbf 	bl	bd08 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    358a:	2c00      	cmp	r4, #0
    358c:	d100      	bne.n	3590 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    358e:	b662      	cpsie	i
    3590:	bd10      	pop	{r4, pc}
    3592:	0000      	.short	0x0000
    3594:	20000030 	.word	0x20000030

00003598 <mpsl_clock_hfclk_release>:
    3598:	4805      	ldr	r0, [pc, #20]	; (35b0 <mpsl_clock_hfclk_release+0x18>)
    359a:	b510      	push	{r4, lr}
    359c:	78c1      	ldrb	r1, [r0, #3]
    359e:	b121      	cbz	r1, 35aa <mpsl_clock_hfclk_release+0x12>
    35a0:	2100      	movs	r1, #0
    35a2:	7101      	strb	r1, [r0, #4]
    35a4:	70c1      	strb	r1, [r0, #3]
    35a6:	f7ff ffc7 	bl	3538 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    35aa:	2000      	movs	r0, #0
    35ac:	bd10      	pop	{r4, pc}
    35ae:	0000      	.short	0x0000
    35b0:	20000030 	.word	0x20000030

000035b4 <mpsl_clock_hfclk_request>:
    35b4:	b570      	push	{r4, r5, r6, lr}
    35b6:	4c0c      	ldr	r4, [pc, #48]	; (35e8 <mpsl_clock_hfclk_request+0x34>)
    35b8:	78e1      	ldrb	r1, [r4, #3]
    35ba:	b961      	cbnz	r1, 35d6 <mpsl_clock_hfclk_request+0x22>
    35bc:	2501      	movs	r5, #1
    35be:	70e5      	strb	r5, [r4, #3]
    35c0:	61e0      	str	r0, [r4, #28]
    35c2:	f7ff ffd5 	bl	3570 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    35c6:	f000 f90d 	bl	37e4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    35ca:	b130      	cbz	r0, 35da <mpsl_clock_hfclk_request+0x26>
    35cc:	69e0      	ldr	r0, [r4, #28]
    35ce:	b110      	cbz	r0, 35d6 <mpsl_clock_hfclk_request+0x22>
    35d0:	4780      	blx	r0
    35d2:	2000      	movs	r0, #0
    35d4:	61e0      	str	r0, [r4, #28]
    35d6:	2000      	movs	r0, #0
    35d8:	bd70      	pop	{r4, r5, r6, pc}
    35da:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    35de:	7125      	strb	r5, [r4, #4]
    35e0:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    35e4:	e7f7      	b.n	35d6 <mpsl_clock_hfclk_request+0x22>
    35e6:	0000      	.short	0x0000
    35e8:	20000030 	.word	0x20000030

000035ec <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
    35ec:	f3ef 8010 	mrs	r0, PRIMASK
    35f0:	b672      	cpsid	i
    35f2:	4904      	ldr	r1, [pc, #16]	; (3604 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
    35f4:	788a      	ldrb	r2, [r1, #2]
    35f6:	1c52      	adds	r2, r2, #1
    35f8:	708a      	strb	r2, [r1, #2]
    35fa:	2800      	cmp	r0, #0
    35fc:	d100      	bne.n	3600 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
    35fe:	b662      	cpsie	i
    3600:	4770      	bx	lr
    3602:	0000      	.short	0x0000
    3604:	20000030 	.word	0x20000030

00003608 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
    3608:	b510      	push	{r4, lr}
    360a:	f3ef 8410 	mrs	r4, PRIMASK
    360e:	b672      	cpsid	i
    3610:	480a      	ldr	r0, [pc, #40]	; (363c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
    3612:	7881      	ldrb	r1, [r0, #2]
    3614:	b129      	cbz	r1, 3622 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
    3616:	7881      	ldrb	r1, [r0, #2]
    3618:	1e49      	subs	r1, r1, #1
    361a:	7081      	strb	r1, [r0, #2]
    361c:	7841      	ldrb	r1, [r0, #1]
    361e:	b129      	cbz	r1, 362c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
    3620:	e008      	b.n	3634 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    3622:	f240 1125 	movw	r1, #293	; 0x125
    3626:	206d      	movs	r0, #109	; 0x6d
    3628:	f000 f954 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    362c:	7880      	ldrb	r0, [r0, #2]
    362e:	b908      	cbnz	r0, 3634 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    3630:	f000 f8e6 	bl	3800 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3634:	2c00      	cmp	r4, #0
    3636:	d100      	bne.n	363a <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
    3638:	b662      	cpsie	i
    363a:	bd10      	pop	{r4, pc}
    363c:	20000030 	.word	0x20000030

00003640 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    3640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3644:	0004      	movs	r4, r0
    3646:	f06f 0015 	mvn.w	r0, #21
    364a:	d03c      	beq.n	36c6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    364c:	7821      	ldrb	r1, [r4, #0]
    364e:	2904      	cmp	r1, #4
    3650:	d839      	bhi.n	36c6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3652:	2900      	cmp	r1, #0
    3654:	7861      	ldrb	r1, [r4, #1]
    3656:	d038      	beq.n	36ca <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
    3658:	2900      	cmp	r1, #0
    365a:	d134      	bne.n	36c6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    365c:	78a1      	ldrb	r1, [r4, #2]
    365e:	2900      	cmp	r1, #0
    3660:	d131      	bne.n	36c6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3662:	2000      	movs	r0, #0
    3664:	f008 faff 	bl	bc66 <MPSL_IRQ_RADIO_Handler+0x1e>
    3668:	2000      	movs	r0, #0
    366a:	f008 faef 	bl	bc4c <MPSL_IRQ_RADIO_Handler+0x4>
    366e:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    3672:	f04f 31ff 	mov.w	r1, #4294967295
    3676:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    367a:	2600      	movs	r6, #0
    367c:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    3680:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    3684:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    3688:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    368c:	4f14      	ldr	r7, [pc, #80]	; (36e0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    368e:	707e      	strb	r6, [r7, #1]
    3690:	88a0      	ldrh	r0, [r4, #4]
    3692:	81b8      	strh	r0, [r7, #12]
    3694:	f008 fb2f 	bl	bcf6 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    3698:	2501      	movs	r5, #1
    369a:	b108      	cbz	r0, 36a0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    369c:	70fd      	strb	r5, [r7, #3]
    369e:	707d      	strb	r5, [r7, #1]
    36a0:	2101      	movs	r1, #1
    36a2:	4640      	mov	r0, r8
    36a4:	f008 fb19 	bl	bcda <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    36a8:	b108      	cbz	r0, 36ae <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    36aa:	f000 f895 	bl	37d8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    36ae:	4620      	mov	r0, r4
    36b0:	f7ff fe7c 	bl	33ac <MPSL_IRQ_CLOCK_Handler+0x1d8>
    36b4:	727d      	strb	r5, [r7, #9]
    36b6:	2000      	movs	r0, #0
    36b8:	f008 fac8 	bl	bc4c <MPSL_IRQ_RADIO_Handler+0x4>
    36bc:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    36c0:	4630      	mov	r0, r6
    36c2:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
    36c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    36ca:	2900      	cmp	r1, #0
    36cc:	d0fb      	beq.n	36c6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    36ce:	2920      	cmp	r1, #32
    36d0:	d8f9      	bhi.n	36c6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    36d2:	78a1      	ldrb	r1, [r4, #2]
    36d4:	2921      	cmp	r1, #33	; 0x21
    36d6:	d8f6      	bhi.n	36c6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    36d8:	2901      	cmp	r1, #1
    36da:	d1c2      	bne.n	3662 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    36dc:	e7f3      	b.n	36c6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    36de:	0000      	.short	0x0000
    36e0:	20000030 	.word	0x20000030

000036e4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    36e4:	4801      	ldr	r0, [pc, #4]	; (36ec <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    36e6:	8980      	ldrh	r0, [r0, #12]
    36e8:	4770      	bx	lr
    36ea:	0000      	.short	0x0000
    36ec:	20000030 	.word	0x20000030

000036f0 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    36f0:	b510      	push	{r4, lr}
    36f2:	480d      	ldr	r0, [pc, #52]	; (3728 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    36f4:	f008 fb60 	bl	bdb8 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    36f8:	490b      	ldr	r1, [pc, #44]	; (3728 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    36fa:	3908      	subs	r1, #8
    36fc:	b148      	cbz	r0, 3712 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    36fe:	2001      	movs	r0, #1
    3700:	7008      	strb	r0, [r1, #0]
    3702:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3706:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    370a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    370e:	f7ff bf2f 	b.w	3570 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3712:	7a88      	ldrb	r0, [r1, #10]
    3714:	2802      	cmp	r0, #2
    3716:	d101      	bne.n	371c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    3718:	f7ff fda0 	bl	325c <MPSL_IRQ_CLOCK_Handler+0x88>
    371c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3720:	4801      	ldr	r0, [pc, #4]	; (3728 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    3722:	f008 bb60 	b.w	bde6 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    3726:	0000      	.short	0x0000
    3728:	20000038 	.word	0x20000038

0000372c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    372c:	4802      	ldr	r0, [pc, #8]	; (3738 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    372e:	7a80      	ldrb	r0, [r0, #10]
    3730:	2800      	cmp	r0, #0
    3732:	d000      	beq.n	3736 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    3734:	2001      	movs	r0, #1
    3736:	4770      	bx	lr
    3738:	20000030 	.word	0x20000030

0000373c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    373c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    373e:	4d1f      	ldr	r5, [pc, #124]	; (37bc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3740:	7ae8      	ldrb	r0, [r5, #11]
    3742:	2800      	cmp	r0, #0
    3744:	d10f      	bne.n	3766 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3746:	7e28      	ldrb	r0, [r5, #24]
    3748:	f000 0003 	and.w	r0, r0, #3
    374c:	f008 fae1 	bl	bd12 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3750:	2800      	cmp	r0, #0
    3752:	d008      	beq.n	3766 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3754:	f3ef 8110 	mrs	r1, PRIMASK
    3758:	b672      	cpsid	i
    375a:	f7ff ffe7 	bl	372c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    375e:	b118      	cbz	r0, 3768 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    3760:	2900      	cmp	r1, #0
    3762:	d100      	bne.n	3766 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3764:	b662      	cpsie	i
    3766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3768:	2601      	movs	r6, #1
    376a:	72ae      	strb	r6, [r5, #10]
    376c:	b901      	cbnz	r1, 3770 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    376e:	b662      	cpsie	i
    3770:	2018      	movs	r0, #24
    3772:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    3776:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    377a:	61a6      	str	r6, [r4, #24]
    377c:	f44f 7020 	mov.w	r0, #640	; 0x280
    3780:	f8ad 0000 	strh.w	r0, [sp]
    3784:	f8bd 0000 	ldrh.w	r0, [sp]
    3788:	1e41      	subs	r1, r0, #1
    378a:	f8ad 1000 	strh.w	r1, [sp]
    378e:	d2f9      	bcs.n	3784 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    3790:	2700      	movs	r7, #0
    3792:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    3796:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    379a:	4808      	ldr	r0, [pc, #32]	; (37bc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    379c:	3008      	adds	r0, #8
    379e:	f008 fb1e 	bl	bdde <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    37a2:	702f      	strb	r7, [r5, #0]
    37a4:	f7ff fd5a 	bl	325c <MPSL_IRQ_CLOCK_Handler+0x88>
    37a8:	6166      	str	r6, [r4, #20]
    37aa:	7968      	ldrb	r0, [r5, #5]
    37ac:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    37b0:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    37b4:	2018      	movs	r0, #24
    37b6:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    37ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    37bc:	20000030 	.word	0x20000030

000037c0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    37c0:	b510      	push	{r4, lr}
    37c2:	4c04      	ldr	r4, [pc, #16]	; (37d4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    37c4:	7e20      	ldrb	r0, [r4, #24]
    37c6:	f000 0003 	and.w	r0, r0, #3
    37ca:	f008 faa2 	bl	bd12 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    37ce:	2800      	cmp	r0, #0
    37d0:	d0f8      	beq.n	37c4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    37d2:	bd10      	pop	{r4, pc}
    37d4:	20000030 	.word	0x20000030

000037d8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    37d8:	4901      	ldr	r1, [pc, #4]	; (37e0 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    37da:	2001      	movs	r0, #1
    37dc:	7008      	strb	r0, [r1, #0]
    37de:	4770      	bx	lr
    37e0:	20000294 	.word	0x20000294

000037e4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    37e4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    37e8:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    37ec:	b918      	cbnz	r0, 37f6 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    37ee:	4803      	ldr	r0, [pc, #12]	; (37fc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    37f0:	7800      	ldrb	r0, [r0, #0]
    37f2:	2800      	cmp	r0, #0
    37f4:	d000      	beq.n	37f8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    37f6:	2001      	movs	r0, #1
    37f8:	4770      	bx	lr
    37fa:	0000      	.short	0x0000
    37fc:	20000294 	.word	0x20000294

00003800 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    3800:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3804:	2101      	movs	r1, #1
    3806:	6041      	str	r1, [r0, #4]
    3808:	2100      	movs	r1, #0
    380a:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    380e:	4801      	ldr	r0, [pc, #4]	; (3814 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    3810:	7001      	strb	r1, [r0, #0]
    3812:	4770      	bx	lr
    3814:	20000294 	.word	0x20000294

00003818 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    3818:	4802      	ldr	r0, [pc, #8]	; (3824 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    381a:	6800      	ldr	r0, [r0, #0]
    381c:	f000 0003 	and.w	r0, r0, #3
    3820:	4770      	bx	lr
    3822:	0000      	.short	0x0000
    3824:	4000041c 	.word	0x4000041c
    3828:	b510      	push	{r4, lr}
    382a:	b131      	cbz	r1, 383a <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    382c:	2901      	cmp	r1, #1
    382e:	d007      	beq.n	3840 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    3830:	f240 3102 	movw	r1, #770	; 0x302
    3834:	a005      	add	r0, pc, #20	; (adr r0, 384c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    3836:	f000 f821 	bl	387c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    383a:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    383e:	e001      	b.n	3844 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    3840:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    3844:	f000 0001 	and.w	r0, r0, #1
    3848:	bd10      	pop	{r4, pc}
    384a:	0000      	.short	0x0000
    384c:	5f66726e 	.word	0x5f66726e
    3850:	636f6c63 	.word	0x636f6c63
    3854:	00682e6b 	.word	0x00682e6b
    3858:	f3bf 8f4f 	dsb	sy
    385c:	4805      	ldr	r0, [pc, #20]	; (3874 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    385e:	6801      	ldr	r1, [r0, #0]
    3860:	4a05      	ldr	r2, [pc, #20]	; (3878 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    3862:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    3866:	4311      	orrs	r1, r2
    3868:	6001      	str	r1, [r0, #0]
    386a:	f3bf 8f4f 	dsb	sy
    386e:	bf00      	nop
    3870:	e7fd      	b.n	386e <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    3872:	0000      	.short	0x0000
    3874:	e000ed0c 	.word	0xe000ed0c
    3878:	05fa0004 	.word	0x05fa0004

0000387c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    387c:	b672      	cpsid	i
    387e:	4a03      	ldr	r2, [pc, #12]	; (388c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    3880:	6852      	ldr	r2, [r2, #4]
    3882:	b102      	cbz	r2, 3886 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    3884:	4790      	blx	r2
    3886:	f7ff ffe7 	bl	3858 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    388a:	0000      	.short	0x0000
    388c:	20000050 	.word	0x20000050
    3890:	4806      	ldr	r0, [pc, #24]	; (38ac <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    3892:	b510      	push	{r4, lr}
    3894:	2100      	movs	r1, #0
    3896:	6001      	str	r1, [r0, #0]
    3898:	2101      	movs	r1, #1
    389a:	6001      	str	r1, [r0, #0]
    389c:	4608      	mov	r0, r1
    389e:	f008 fa5f 	bl	bd60 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    38a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    38a6:	2001      	movs	r0, #1
    38a8:	f008 ba4d 	b.w	bd46 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    38ac:	40001ffc 	.word	0x40001ffc
    38b0:	4807      	ldr	r0, [pc, #28]	; (38d0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    38b2:	b510      	push	{r4, lr}
    38b4:	2101      	movs	r1, #1
    38b6:	6041      	str	r1, [r0, #4]
    38b8:	1e89      	subs	r1, r1, #2
    38ba:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    38be:	200c      	movs	r0, #12
    38c0:	f008 fa4e 	bl	bd60 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    38c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    38c8:	200c      	movs	r0, #12
    38ca:	f008 ba3c 	b.w	bd46 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    38ce:	0000      	.short	0x0000
    38d0:	4000c000 	.word	0x4000c000

000038d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    38d4:	b50e      	push	{r1, r2, r3, lr}
    38d6:	b672      	cpsid	i
    38d8:	4a0f      	ldr	r2, [pc, #60]	; (3918 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    38da:	6855      	ldr	r5, [r2, #4]
    38dc:	b1d5      	cbz	r5, 3914 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    38de:	2200      	movs	r2, #0
    38e0:	4603      	mov	r3, r0
    38e2:	466e      	mov	r6, sp
    38e4:	240a      	movs	r4, #10
    38e6:	e003      	b.n	38f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    38e8:	fbb0 f0f4 	udiv	r0, r0, r4
    38ec:	1c52      	adds	r2, r2, #1
    38ee:	b2d2      	uxtb	r2, r2
    38f0:	2800      	cmp	r0, #0
    38f2:	d1f9      	bne.n	38e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    38f4:	54b0      	strb	r0, [r6, r2]
    38f6:	e009      	b.n	390c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    38f8:	fbb3 f0f4 	udiv	r0, r3, r4
    38fc:	fb04 3010 	mls	r0, r4, r0, r3
    3900:	fbb3 f3f4 	udiv	r3, r3, r4
    3904:	1e52      	subs	r2, r2, #1
    3906:	b2d2      	uxtb	r2, r2
    3908:	3030      	adds	r0, #48	; 0x30
    390a:	54b0      	strb	r0, [r6, r2]
    390c:	2a00      	cmp	r2, #0
    390e:	d1f3      	bne.n	38f8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    3910:	4630      	mov	r0, r6
    3912:	47a8      	blx	r5
    3914:	f7ff ffa0 	bl	3858 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    3918:	20000050 	.word	0x20000050

0000391c <mpsl_init>:
    391c:	b570      	push	{r4, r5, r6, lr}
    391e:	4c17      	ldr	r4, [pc, #92]	; (397c <mpsl_init+0x60>)
    3920:	4606      	mov	r6, r0
    3922:	460d      	mov	r5, r1
    3924:	7860      	ldrb	r0, [r4, #1]
    3926:	b110      	cbz	r0, 392e <mpsl_init+0x12>
    3928:	f04f 30ff 	mov.w	r0, #4294967295
    392c:	bd70      	pop	{r4, r5, r6, pc}
    392e:	b906      	cbnz	r6, 3932 <mpsl_init+0x16>
    3930:	4e13      	ldr	r6, [pc, #76]	; (3980 <mpsl_init+0x64>)
    3932:	6062      	str	r2, [r4, #4]
    3934:	7025      	strb	r5, [r4, #0]
    3936:	f7ff ffab 	bl	3890 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    393a:	f7ff ffb9 	bl	38b0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    393e:	4630      	mov	r0, r6
    3940:	f7ff fe7e 	bl	3640 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    3944:	0006      	movs	r6, r0
    3946:	d1f1      	bne.n	392c <mpsl_init+0x10>
    3948:	f7fe febe 	bl	26c8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    394c:	f7ff fef6 	bl	373c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    3950:	f008 f8d4 	bl	bafc <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    3954:	4628      	mov	r0, r5
    3956:	f008 f9f6 	bl	bd46 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    395a:	2001      	movs	r0, #1
    395c:	2d00      	cmp	r5, #0
    395e:	db09      	blt.n	3974 <mpsl_init+0x58>
    3960:	f005 011f 	and.w	r1, r5, #31
    3964:	fa00 f101 	lsl.w	r1, r0, r1
    3968:	096a      	lsrs	r2, r5, #5
    396a:	0092      	lsls	r2, r2, #2
    396c:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    3970:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    3974:	7060      	strb	r0, [r4, #1]
    3976:	4630      	mov	r0, r6
    3978:	bd70      	pop	{r4, r5, r6, pc}
    397a:	0000      	.short	0x0000
    397c:	20000050 	.word	0x20000050
    3980:	0000bd82 	.word	0x0000bd82

00003984 <mpsl_is_initialized>:
    3984:	4801      	ldr	r0, [pc, #4]	; (398c <mpsl_is_initialized+0x8>)
    3986:	7840      	ldrb	r0, [r0, #1]
    3988:	4770      	bx	lr
    398a:	0000      	.short	0x0000
    398c:	20000050 	.word	0x20000050

00003990 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    3990:	4807      	ldr	r0, [pc, #28]	; (39b0 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    3992:	f990 0000 	ldrsb.w	r0, [r0]
    3996:	2800      	cmp	r0, #0
    3998:	db09      	blt.n	39ae <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    399a:	f000 021f 	and.w	r2, r0, #31
    399e:	2101      	movs	r1, #1
    39a0:	4091      	lsls	r1, r2
    39a2:	0940      	lsrs	r0, r0, #5
    39a4:	0080      	lsls	r0, r0, #2
    39a6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    39aa:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    39ae:	4770      	bx	lr
    39b0:	20000050 	.word	0x20000050

000039b4 <mpsl_temperature_get>:
    39b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    39b8:	2601      	movs	r6, #1
    39ba:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    39be:	0331      	lsls	r1, r6, #12
    39c0:	f04f 0800 	mov.w	r8, #0
    39c4:	4640      	mov	r0, r8
    39c6:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    39ca:	f3bf 8f4f 	dsb	sy
    39ce:	f3bf 8f6f 	isb	sy
    39d2:	4c16      	ldr	r4, [pc, #88]	; (3a2c <mpsl_temperature_get+0x78>)
    39d4:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    39d8:	200c      	movs	r0, #12
    39da:	f008 f9e0 	bl	bd9e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    39de:	4d14      	ldr	r5, [pc, #80]	; (3a30 <mpsl_temperature_get+0x7c>)
    39e0:	6828      	ldr	r0, [r5, #0]
    39e2:	43c0      	mvns	r0, r0
    39e4:	f340 1700 	sbfx	r7, r0, #4, #1
    39e8:	6828      	ldr	r0, [r5, #0]
    39ea:	f040 0010 	orr.w	r0, r0, #16
    39ee:	6028      	str	r0, [r5, #0]
    39f0:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    39f4:	6026      	str	r6, [r4, #0]
    39f6:	1c7f      	adds	r7, r7, #1
    39f8:	e002      	b.n	3a00 <mpsl_temperature_get+0x4c>
    39fa:	bf00      	nop
    39fc:	f000 f890 	bl	3b20 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3a00:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    3a04:	2800      	cmp	r0, #0
    3a06:	d0f9      	beq.n	39fc <mpsl_temperature_get+0x48>
    3a08:	b91f      	cbnz	r7, 3a12 <mpsl_temperature_get+0x5e>
    3a0a:	6828      	ldr	r0, [r5, #0]
    3a0c:	f020 0010 	bic.w	r0, r0, #16
    3a10:	6028      	str	r0, [r5, #0]
    3a12:	4808      	ldr	r0, [pc, #32]	; (3a34 <mpsl_temperature_get+0x80>)
    3a14:	6805      	ldr	r5, [r0, #0]
    3a16:	6066      	str	r6, [r4, #4]
    3a18:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    3a1c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    3a20:	200c      	movs	r0, #12
    3a22:	f008 f9bc 	bl	bd9e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    3a26:	4628      	mov	r0, r5
    3a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3a2c:	4000c000 	.word	0x4000c000
    3a30:	e000ed10 	.word	0xe000ed10
    3a34:	4000c508 	.word	0x4000c508

00003a38 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    3a38:	b510      	push	{r4, lr}
    3a3a:	4602      	mov	r2, r0
    3a3c:	2005      	movs	r0, #5
    3a3e:	490c      	ldr	r1, [pc, #48]	; (3a70 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    3a40:	e004      	b.n	3a4c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    3a42:	bf00      	nop
    3a44:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    3a48:	791b      	ldrb	r3, [r3, #4]
    3a4a:	b133      	cbz	r3, 3a5a <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    3a4c:	1e40      	subs	r0, r0, #1
    3a4e:	b2c0      	uxtb	r0, r0
    3a50:	d2f8      	bcs.n	3a44 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    3a52:	2148      	movs	r1, #72	; 0x48
    3a54:	2069      	movs	r0, #105	; 0x69
    3a56:	f7ff ff3d 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3a5a:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    3a5e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    3a62:	2200      	movs	r2, #0
    3a64:	714a      	strb	r2, [r1, #5]
    3a66:	718a      	strb	r2, [r1, #6]
    3a68:	2201      	movs	r2, #1
    3a6a:	710a      	strb	r2, [r1, #4]
    3a6c:	bd10      	pop	{r4, pc}
    3a6e:	0000      	.short	0x0000
    3a70:	20001080 	.word	0x20001080

00003a74 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    3a74:	b510      	push	{r4, lr}
    3a76:	2805      	cmp	r0, #5
    3a78:	d301      	bcc.n	3a7e <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    3a7a:	2158      	movs	r1, #88	; 0x58
    3a7c:	e006      	b.n	3a8c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    3a7e:	490a      	ldr	r1, [pc, #40]	; (3aa8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    3a80:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    3a84:	7901      	ldrb	r1, [r0, #4]
    3a86:	2901      	cmp	r1, #1
    3a88:	d003      	beq.n	3a92 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    3a8a:	2159      	movs	r1, #89	; 0x59
    3a8c:	2069      	movs	r0, #105	; 0x69
    3a8e:	f7ff ff21 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3a92:	7941      	ldrb	r1, [r0, #5]
    3a94:	7982      	ldrb	r2, [r0, #6]
    3a96:	1c49      	adds	r1, r1, #1
    3a98:	b2c9      	uxtb	r1, r1
    3a9a:	428a      	cmp	r2, r1
    3a9c:	d000      	beq.n	3aa0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    3a9e:	7141      	strb	r1, [r0, #5]
    3aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3aa4:	f7ff bf74 	b.w	3990 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    3aa8:	20001080 	.word	0x20001080

00003aac <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    3aac:	b570      	push	{r4, r5, r6, lr}
    3aae:	2505      	movs	r5, #5
    3ab0:	4e0e      	ldr	r6, [pc, #56]	; (3aec <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    3ab2:	4c0f      	ldr	r4, [pc, #60]	; (3af0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    3ab4:	e016      	b.n	3ae4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    3ab6:	7821      	ldrb	r1, [r4, #0]
    3ab8:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    3abc:	7902      	ldrb	r2, [r0, #4]
    3abe:	2a01      	cmp	r2, #1
    3ac0:	d108      	bne.n	3ad4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    3ac2:	7942      	ldrb	r2, [r0, #5]
    3ac4:	7983      	ldrb	r3, [r0, #6]
    3ac6:	429a      	cmp	r2, r3
    3ac8:	d004      	beq.n	3ad4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    3aca:	7942      	ldrb	r2, [r0, #5]
    3acc:	7182      	strb	r2, [r0, #6]
    3ace:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    3ad2:	4780      	blx	r0
    3ad4:	7820      	ldrb	r0, [r4, #0]
    3ad6:	1c40      	adds	r0, r0, #1
    3ad8:	b2c0      	uxtb	r0, r0
    3ada:	7020      	strb	r0, [r4, #0]
    3adc:	2805      	cmp	r0, #5
    3ade:	d301      	bcc.n	3ae4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    3ae0:	2000      	movs	r0, #0
    3ae2:	7020      	strb	r0, [r4, #0]
    3ae4:	1e6d      	subs	r5, r5, #1
    3ae6:	b2ed      	uxtb	r5, r5
    3ae8:	d2e5      	bcs.n	3ab6 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    3aea:	bd70      	pop	{r4, r5, r6, pc}
    3aec:	20001080 	.word	0x20001080
    3af0:	20000295 	.word	0x20000295

00003af4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    3af4:	b500      	push	{lr}
    3af6:	f008 f981 	bl	bdfc <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3afa:	b940      	cbnz	r0, 3b0e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3afc:	f008 f988 	bl	be10 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3b00:	b928      	cbnz	r0, 3b0e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3b02:	f008 f99c 	bl	be3e <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3b06:	b910      	cbnz	r0, 3b0e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3b08:	f008 f9ad 	bl	be66 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3b0c:	b108      	cbz	r0, 3b12 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    3b0e:	4802      	ldr	r0, [pc, #8]	; (3b18 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    3b10:	bd00      	pop	{pc}
    3b12:	4802      	ldr	r0, [pc, #8]	; (3b1c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    3b14:	bd00      	pop	{pc}
    3b16:	0000      	.short	0x0000
    3b18:	4000050c 	.word	0x4000050c
    3b1c:	4001e700 	.word	0x4001e700

00003b20 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    3b20:	b510      	push	{r4, lr}
    3b22:	f008 f9a0 	bl	be66 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3b26:	b330      	cbz	r0, 3b76 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    3b28:	f3ef 8010 	mrs	r0, PRIMASK
    3b2c:	b1c8      	cbz	r0, 3b62 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    3b2e:	2100      	movs	r1, #0
    3b30:	b672      	cpsid	i
    3b32:	4812      	ldr	r0, [pc, #72]	; (3b7c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    3b34:	6802      	ldr	r2, [r0, #0]
    3b36:	6803      	ldr	r3, [r0, #0]
    3b38:	f3c2 1200 	ubfx	r2, r2, #4, #1
    3b3c:	f043 0310 	orr.w	r3, r3, #16
    3b40:	6003      	str	r3, [r0, #0]
    3b42:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3b46:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    3b4a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    3b4e:	431c      	orrs	r4, r3
    3b50:	d000      	beq.n	3b54 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    3b52:	bf40      	sev
    3b54:	bf20      	wfe
    3b56:	bf00      	nop
    3b58:	bf00      	nop
    3b5a:	bf00      	nop
    3b5c:	bf00      	nop
    3b5e:	b112      	cbz	r2, 3b66 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    3b60:	e005      	b.n	3b6e <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    3b62:	2101      	movs	r1, #1
    3b64:	e7e4      	b.n	3b30 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    3b66:	6802      	ldr	r2, [r0, #0]
    3b68:	f022 0210 	bic.w	r2, r2, #16
    3b6c:	6002      	str	r2, [r0, #0]
    3b6e:	2900      	cmp	r1, #0
    3b70:	d000      	beq.n	3b74 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    3b72:	b662      	cpsie	i
    3b74:	bd10      	pop	{r4, pc}
    3b76:	bf20      	wfe
    3b78:	bd10      	pop	{r4, pc}
    3b7a:	0000      	.short	0x0000
    3b7c:	e000ed10 	.word	0xe000ed10

00003b80 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    3b80:	0000c0d7 0000c0f3 0000c0e1 0000c0ed     ................
    3b90:	0000c0db 0000c0d5 0000c0d3 0000c0f9     ................
    3ba0:	0000c0e7 0000c0cd 0000c0c5 0000c0c9     ................
    3bb0:	0000c0bf                                ....

00003bb4 <mpsl_fem_disable>:
    3bb4:	4801      	ldr	r0, [pc, #4]	; (3bbc <mpsl_fem_disable+0x8>)
    3bb6:	6800      	ldr	r0, [r0, #0]
    3bb8:	6800      	ldr	r0, [r0, #0]
    3bba:	4700      	bx	r0
    3bbc:	20000058 	.word	0x20000058

00003bc0 <mpsl_fem_lna_configuration_clear>:
    3bc0:	4801      	ldr	r0, [pc, #4]	; (3bc8 <mpsl_fem_lna_configuration_clear+0x8>)
    3bc2:	6800      	ldr	r0, [r0, #0]
    3bc4:	6900      	ldr	r0, [r0, #16]
    3bc6:	4700      	bx	r0
    3bc8:	20000058 	.word	0x20000058

00003bcc <mpsl_fem_lna_configuration_set>:
    3bcc:	4a01      	ldr	r2, [pc, #4]	; (3bd4 <mpsl_fem_lna_configuration_set+0x8>)
    3bce:	6812      	ldr	r2, [r2, #0]
    3bd0:	6892      	ldr	r2, [r2, #8]
    3bd2:	4710      	bx	r2
    3bd4:	20000058 	.word	0x20000058

00003bd8 <mpsl_fem_pa_configuration_clear>:
    3bd8:	4801      	ldr	r0, [pc, #4]	; (3be0 <mpsl_fem_pa_configuration_clear+0x8>)
    3bda:	6800      	ldr	r0, [r0, #0]
    3bdc:	68c0      	ldr	r0, [r0, #12]
    3bde:	4700      	bx	r0
    3be0:	20000058 	.word	0x20000058

00003be4 <mpsl_fem_pa_configuration_set>:
    3be4:	4a01      	ldr	r2, [pc, #4]	; (3bec <mpsl_fem_pa_configuration_set+0x8>)
    3be6:	6812      	ldr	r2, [r2, #0]
    3be8:	6852      	ldr	r2, [r2, #4]
    3bea:	4710      	bx	r2
    3bec:	20000058 	.word	0x20000058

00003bf0 <mpsl_fem_pa_is_configured>:
    3bf0:	4901      	ldr	r1, [pc, #4]	; (3bf8 <mpsl_fem_pa_is_configured+0x8>)
    3bf2:	6809      	ldr	r1, [r1, #0]
    3bf4:	6a09      	ldr	r1, [r1, #32]
    3bf6:	4708      	bx	r1
    3bf8:	20000058 	.word	0x20000058

00003bfc <mpsl_fem_device_config_254_apply_get>:
    3bfc:	4801      	ldr	r0, [pc, #4]	; (3c04 <mpsl_fem_device_config_254_apply_get+0x8>)
    3bfe:	7800      	ldrb	r0, [r0, #0]
    3c00:	4770      	bx	lr
    3c02:	0000      	.short	0x0000
    3c04:	20000296 	.word	0x20000296
    3c08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3c0a:	4c17      	ldr	r4, [pc, #92]	; (3c68 <mpsl_fem_device_config_254_apply_get+0x6c>)
    3c0c:	7a20      	ldrb	r0, [r4, #8]
    3c0e:	2802      	cmp	r0, #2
    3c10:	d200      	bcs.n	3c14 <mpsl_fem_device_config_254_apply_get+0x18>
    3c12:	2002      	movs	r0, #2
    3c14:	f88d 0001 	strb.w	r0, [sp, #1]
    3c18:	79e0      	ldrb	r0, [r4, #7]
    3c1a:	2803      	cmp	r0, #3
    3c1c:	d200      	bcs.n	3c20 <mpsl_fem_device_config_254_apply_get+0x24>
    3c1e:	2003      	movs	r0, #3
    3c20:	f88d 0000 	strb.w	r0, [sp]
    3c24:	79a0      	ldrb	r0, [r4, #6]
    3c26:	f8ad 0004 	strh.w	r0, [sp, #4]
    3c2a:	7960      	ldrb	r0, [r4, #5]
    3c2c:	f8ad 0002 	strh.w	r0, [sp, #2]
    3c30:	4668      	mov	r0, sp
    3c32:	f006 f95b 	bl	9eec <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    3c36:	b108      	cbz	r0, 3c3c <mpsl_fem_device_config_254_apply_get+0x40>
    3c38:	2184      	movs	r1, #132	; 0x84
    3c3a:	e010      	b.n	3c5e <mpsl_fem_device_config_254_apply_get+0x62>
    3c3c:	68e0      	ldr	r0, [r4, #12]
    3c3e:	9002      	str	r0, [sp, #8]
    3c40:	a802      	add	r0, sp, #8
    3c42:	f006 f969 	bl	9f18 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    3c46:	b108      	cbz	r0, 3c4c <mpsl_fem_device_config_254_apply_get+0x50>
    3c48:	2188      	movs	r1, #136	; 0x88
    3c4a:	e008      	b.n	3c5e <mpsl_fem_device_config_254_apply_get+0x62>
    3c4c:	4807      	ldr	r0, [pc, #28]	; (3c6c <mpsl_fem_device_config_254_apply_get+0x70>)
    3c4e:	6800      	ldr	r0, [r0, #0]
    3c50:	9003      	str	r0, [sp, #12]
    3c52:	a803      	add	r0, sp, #12
    3c54:	f00b fb41 	bl	f2da <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    3c58:	2800      	cmp	r0, #0
    3c5a:	d003      	beq.n	3c64 <mpsl_fem_device_config_254_apply_get+0x68>
    3c5c:	218c      	movs	r1, #140	; 0x8c
    3c5e:	2003      	movs	r0, #3
    3c60:	f000 f8e4 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3c64:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    3c66:	0000      	.short	0x0000
    3c68:	200010a8 	.word	0x200010a8
    3c6c:	00003f14 	.word	0x00003f14

00003c70 <sdc_build_revision_get>:
    3c70:	b510      	push	{r4, lr}
    3c72:	b128      	cbz	r0, 3c80 <sdc_build_revision_get+0x10>
    3c74:	2214      	movs	r2, #20
    3c76:	4904      	ldr	r1, [pc, #16]	; (3c88 <sdc_build_revision_get+0x18>)
    3c78:	f008 f947 	bl	bf0a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3c7c:	2000      	movs	r0, #0
    3c7e:	bd10      	pop	{r4, pc}
    3c80:	f06f 0015 	mvn.w	r0, #21
    3c84:	bd10      	pop	{r4, pc}
    3c86:	0000      	.short	0x0000
    3c88:	00003f30 	.word	0x00003f30

00003c8c <sdc_cfg_set>:
    3c8c:	b570      	push	{r4, r5, r6, lr}
    3c8e:	0003      	movs	r3, r0
    3c90:	f06f 002c 	mvn.w	r0, #44	; 0x2c
    3c94:	d103      	bne.n	3c9e <sdc_cfg_set+0x12>
    3c96:	4c29      	ldr	r4, [pc, #164]	; (3d3c <sdc_cfg_set+0xb0>)
    3c98:	7863      	ldrb	r3, [r4, #1]
    3c9a:	b10b      	cbz	r3, 3ca0 <sdc_cfg_set+0x14>
    3c9c:	1180      	asrs	r0, r0, #6
    3c9e:	bd70      	pop	{r4, r5, r6, pc}
    3ca0:	b309      	cbz	r1, 3ce6 <sdc_cfg_set+0x5a>
    3ca2:	f06f 0515 	mvn.w	r5, #21
    3ca6:	b37a      	cbz	r2, 3d08 <sdc_cfg_set+0x7c>
    3ca8:	4b25      	ldr	r3, [pc, #148]	; (3d40 <sdc_cfg_set+0xb4>)
    3caa:	290c      	cmp	r1, #12
    3cac:	d241      	bcs.n	3d32 <sdc_cfg_set+0xa6>
    3cae:	e8df f001 	tbb	[pc, r1]
    3cb2:	0640      	.short	0x0640
    3cb4:	13100c09 	.word	0x13100c09
    3cb8:	2616231b 	.word	0x2616231b
    3cbc:	312c      	.short	0x312c
    3cbe:	7810      	ldrb	r0, [r2, #0]
    3cc0:	7018      	strb	r0, [r3, #0]
    3cc2:	e02b      	b.n	3d1c <sdc_cfg_set+0x90>
    3cc4:	7810      	ldrb	r0, [r2, #0]
    3cc6:	7058      	strb	r0, [r3, #1]
    3cc8:	e028      	b.n	3d1c <sdc_cfg_set+0x90>
    3cca:	6810      	ldr	r0, [r2, #0]
    3ccc:	f8c3 0005 	str.w	r0, [r3, #5]
    3cd0:	e024      	b.n	3d1c <sdc_cfg_set+0x90>
    3cd2:	6810      	ldr	r0, [r2, #0]
    3cd4:	60d8      	str	r0, [r3, #12]
    3cd6:	e021      	b.n	3d1c <sdc_cfg_set+0x90>
    3cd8:	7810      	ldrb	r0, [r2, #0]
    3cda:	7098      	strb	r0, [r3, #2]
    3cdc:	e01e      	b.n	3d1c <sdc_cfg_set+0x90>
    3cde:	7811      	ldrb	r1, [r2, #0]
    3ce0:	2900      	cmp	r1, #0
    3ce2:	d1dc      	bne.n	3c9e <sdc_cfg_set+0x12>
    3ce4:	70d9      	strb	r1, [r3, #3]
    3ce6:	e019      	b.n	3d1c <sdc_cfg_set+0x90>
    3ce8:	78e0      	ldrb	r0, [r4, #3]
    3cea:	b110      	cbz	r0, 3cf2 <sdc_cfg_set+0x66>
    3cec:	7810      	ldrb	r0, [r2, #0]
    3cee:	2802      	cmp	r0, #2
    3cf0:	d31f      	bcc.n	3d32 <sdc_cfg_set+0xa6>
    3cf2:	7810      	ldrb	r0, [r2, #0]
    3cf4:	7418      	strb	r0, [r3, #16]
    3cf6:	e011      	b.n	3d1c <sdc_cfg_set+0x90>
    3cf8:	8810      	ldrh	r0, [r2, #0]
    3cfa:	8258      	strh	r0, [r3, #18]
    3cfc:	e00e      	b.n	3d1c <sdc_cfg_set+0x90>
    3cfe:	7811      	ldrb	r1, [r2, #0]
    3d00:	2900      	cmp	r1, #0
    3d02:	d1cc      	bne.n	3c9e <sdc_cfg_set+0x12>
    3d04:	7119      	strb	r1, [r3, #4]
    3d06:	e009      	b.n	3d1c <sdc_cfg_set+0x90>
    3d08:	e013      	b.n	3d32 <sdc_cfg_set+0xa6>
    3d0a:	7810      	ldrb	r0, [r2, #0]
    3d0c:	2802      	cmp	r0, #2
    3d0e:	d310      	bcc.n	3d32 <sdc_cfg_set+0xa6>
    3d10:	7518      	strb	r0, [r3, #20]
    3d12:	e003      	b.n	3d1c <sdc_cfg_set+0x90>
    3d14:	7811      	ldrb	r1, [r2, #0]
    3d16:	2900      	cmp	r1, #0
    3d18:	d1c1      	bne.n	3c9e <sdc_cfg_set+0x12>
    3d1a:	7559      	strb	r1, [r3, #21]
    3d1c:	2201      	movs	r2, #1
    3d1e:	4908      	ldr	r1, [pc, #32]	; (3d40 <sdc_cfg_set+0xb4>)
    3d20:	2000      	movs	r0, #0
    3d22:	f008 f9eb 	bl	c0fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    3d26:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    3d2a:	db04      	blt.n	3d36 <sdc_cfg_set+0xaa>
    3d2c:	f06f 000b 	mvn.w	r0, #11
    3d30:	bd70      	pop	{r4, r5, r6, pc}
    3d32:	4628      	mov	r0, r5
    3d34:	bd70      	pop	{r4, r5, r6, pc}
    3d36:	2101      	movs	r1, #1
    3d38:	70a1      	strb	r1, [r4, #2]
    3d3a:	bd70      	pop	{r4, r5, r6, pc}
    3d3c:	2000005c 	.word	0x2000005c
    3d40:	200010a8 	.word	0x200010a8

00003d44 <sdc_enable>:
    3d44:	b570      	push	{r4, r5, r6, lr}
    3d46:	460c      	mov	r4, r1
    3d48:	0005      	movs	r5, r0
    3d4a:	d019      	beq.n	3d80 <sdc_enable+0x3c>
    3d4c:	b1c4      	cbz	r4, 3d80 <sdc_enable+0x3c>
    3d4e:	f000 f915 	bl	3f7c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    3d52:	b1c0      	cbz	r0, 3d86 <sdc_enable+0x42>
    3d54:	4628      	mov	r0, r5
    3d56:	f7ff fe6f 	bl	3a38 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    3d5a:	4d0c      	ldr	r5, [pc, #48]	; (3d8c <sdc_enable+0x48>)
    3d5c:	2200      	movs	r2, #0
    3d5e:	490c      	ldr	r1, [pc, #48]	; (3d90 <sdc_enable+0x4c>)
    3d60:	7028      	strb	r0, [r5, #0]
    3d62:	4620      	mov	r0, r4
    3d64:	f008 f9ca 	bl	c0fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    3d68:	f00b ff20 	bl	fbac <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    3d6c:	2100      	movs	r1, #0
    3d6e:	7828      	ldrb	r0, [r5, #0]
    3d70:	f006 fb12 	bl	a398 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    3d74:	f7ff ff48 	bl	3c08 <mpsl_fem_device_config_254_apply_get+0xc>
    3d78:	2001      	movs	r0, #1
    3d7a:	7068      	strb	r0, [r5, #1]
    3d7c:	2000      	movs	r0, #0
    3d7e:	bd70      	pop	{r4, r5, r6, pc}
    3d80:	f06f 0015 	mvn.w	r0, #21
    3d84:	bd70      	pop	{r4, r5, r6, pc}
    3d86:	f04f 30ff 	mov.w	r0, #4294967295
    3d8a:	bd70      	pop	{r4, r5, r6, pc}
    3d8c:	2000005c 	.word	0x2000005c
    3d90:	200010a8 	.word	0x200010a8

00003d94 <sdc_init>:
    3d94:	b530      	push	{r4, r5, lr}
    3d96:	b087      	sub	sp, #28
    3d98:	0005      	movs	r5, r0
    3d9a:	d00c      	beq.n	3db6 <sdc_init+0x22>
    3d9c:	f7ff fdf2 	bl	3984 <mpsl_is_initialized>
    3da0:	f04f 34ff 	mov.w	r4, #4294967295
    3da4:	b120      	cbz	r0, 3db0 <sdc_init+0x1c>
    3da6:	f7ff fc9d 	bl	36e4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    3daa:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    3dae:	d905      	bls.n	3dbc <sdc_init+0x28>
    3db0:	4620      	mov	r0, r4
    3db2:	b007      	add	sp, #28
    3db4:	bd30      	pop	{r4, r5, pc}
    3db6:	f06f 0015 	mvn.w	r0, #21
    3dba:	e7fa      	b.n	3db2 <sdc_init+0x1e>
    3dbc:	4c15      	ldr	r4, [pc, #84]	; (3e14 <sdc_init+0x80>)
    3dbe:	4816      	ldr	r0, [pc, #88]	; (3e18 <sdc_init+0x84>)
    3dc0:	6065      	str	r5, [r4, #4]
    3dc2:	f000 f9eb 	bl	419c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    3dc6:	2000      	movs	r0, #0
    3dc8:	7060      	strb	r0, [r4, #1]
    3dca:	70a0      	strb	r0, [r4, #2]
    3dcc:	70e0      	strb	r0, [r4, #3]
    3dce:	4601      	mov	r1, r0
    3dd0:	2218      	movs	r2, #24
    3dd2:	4668      	mov	r0, sp
    3dd4:	f008 f913 	bl	bffe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3dd8:	2218      	movs	r2, #24
    3dda:	4910      	ldr	r1, [pc, #64]	; (3e1c <sdc_init+0x88>)
    3ddc:	4668      	mov	r0, sp
    3dde:	f008 f894 	bl	bf0a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3de2:	2218      	movs	r2, #24
    3de4:	4669      	mov	r1, sp
    3de6:	480e      	ldr	r0, [pc, #56]	; (3e20 <sdc_init+0x8c>)
    3de8:	f008 f88f 	bl	bf0a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3dec:	f3ef 8410 	mrs	r4, PRIMASK
    3df0:	b672      	cpsid	i
    3df2:	480c      	ldr	r0, [pc, #48]	; (3e24 <sdc_init+0x90>)
    3df4:	f06f 010c 	mvn.w	r1, #12
    3df8:	f000 fd9e 	bl	4938 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    3dfc:	480a      	ldr	r0, [pc, #40]	; (3e28 <sdc_init+0x94>)
    3dfe:	f000 fe6b 	bl	4ad8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    3e02:	b118      	cbz	r0, 3e0c <sdc_init+0x78>
    3e04:	219a      	movs	r1, #154	; 0x9a
    3e06:	2003      	movs	r0, #3
    3e08:	f000 f810 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e0c:	b904      	cbnz	r4, 3e10 <sdc_init+0x7c>
    3e0e:	b662      	cpsie	i
    3e10:	2000      	movs	r0, #0
    3e12:	e7ce      	b.n	3db2 <sdc_init+0x1e>
    3e14:	2000005c 	.word	0x2000005c
    3e18:	00003c09 	.word	0x00003c09
    3e1c:	00003f18 	.word	0x00003f18
    3e20:	200010a8 	.word	0x200010a8
    3e24:	4000c000 	.word	0x4000c000
    3e28:	00003fa9 	.word	0x00003fa9

00003e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    3e2c:	b50e      	push	{r1, r2, r3, lr}
    3e2e:	b672      	cpsid	i
    3e30:	4a15      	ldr	r2, [pc, #84]	; (3e88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    3e32:	6855      	ldr	r5, [r2, #4]
    3e34:	b1d5      	cbz	r5, 3e6c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    3e36:	2200      	movs	r2, #0
    3e38:	4603      	mov	r3, r0
    3e3a:	466e      	mov	r6, sp
    3e3c:	240a      	movs	r4, #10
    3e3e:	e003      	b.n	3e48 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    3e40:	fbb0 f0f4 	udiv	r0, r0, r4
    3e44:	1c52      	adds	r2, r2, #1
    3e46:	b2d2      	uxtb	r2, r2
    3e48:	2800      	cmp	r0, #0
    3e4a:	d1f9      	bne.n	3e40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    3e4c:	54b0      	strb	r0, [r6, r2]
    3e4e:	e009      	b.n	3e64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    3e50:	fbb3 f0f4 	udiv	r0, r3, r4
    3e54:	fb04 3010 	mls	r0, r4, r0, r3
    3e58:	fbb3 f3f4 	udiv	r3, r3, r4
    3e5c:	1e52      	subs	r2, r2, #1
    3e5e:	b2d2      	uxtb	r2, r2
    3e60:	3030      	adds	r0, #48	; 0x30
    3e62:	54b0      	strb	r0, [r6, r2]
    3e64:	2a00      	cmp	r2, #0
    3e66:	d1f3      	bne.n	3e50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    3e68:	4630      	mov	r0, r6
    3e6a:	47a8      	blx	r5
    3e6c:	f3bf 8f4f 	dsb	sy
    3e70:	4806      	ldr	r0, [pc, #24]	; (3e8c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    3e72:	6801      	ldr	r1, [r0, #0]
    3e74:	4a06      	ldr	r2, [pc, #24]	; (3e90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    3e76:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    3e7a:	4311      	orrs	r1, r2
    3e7c:	6001      	str	r1, [r0, #0]
    3e7e:	f3bf 8f4f 	dsb	sy
    3e82:	bf00      	nop
    3e84:	e7fd      	b.n	3e82 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    3e86:	0000      	.short	0x0000
    3e88:	2000005c 	.word	0x2000005c
    3e8c:	e000ed0c 	.word	0xe000ed0c
    3e90:	05fa0004 	.word	0x05fa0004

00003e94 <sdc_support_adv>:
    3e94:	4806      	ldr	r0, [pc, #24]	; (3eb0 <sdc_support_adv+0x1c>)
    3e96:	b510      	push	{r4, lr}
    3e98:	7881      	ldrb	r1, [r0, #2]
    3e9a:	7840      	ldrb	r0, [r0, #1]
    3e9c:	4301      	orrs	r1, r0
    3e9e:	d002      	beq.n	3ea6 <sdc_support_adv+0x12>
    3ea0:	f04f 30ff 	mov.w	r0, #4294967295
    3ea4:	bd10      	pop	{r4, pc}
    3ea6:	f006 fa97 	bl	a3d8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    3eaa:	2000      	movs	r0, #0
    3eac:	bd10      	pop	{r4, pc}
    3eae:	0000      	.short	0x0000
    3eb0:	2000005c 	.word	0x2000005c

00003eb4 <sdc_support_dle>:
    3eb4:	4806      	ldr	r0, [pc, #24]	; (3ed0 <sdc_support_dle+0x1c>)
    3eb6:	b510      	push	{r4, lr}
    3eb8:	7881      	ldrb	r1, [r0, #2]
    3eba:	7840      	ldrb	r0, [r0, #1]
    3ebc:	4301      	orrs	r1, r0
    3ebe:	d002      	beq.n	3ec6 <sdc_support_dle+0x12>
    3ec0:	f04f 30ff 	mov.w	r0, #4294967295
    3ec4:	bd10      	pop	{r4, pc}
    3ec6:	f006 f83f 	bl	9f48 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
    3eca:	2000      	movs	r0, #0
    3ecc:	bd10      	pop	{r4, pc}
    3ece:	0000      	.short	0x0000
    3ed0:	2000005c 	.word	0x2000005c

00003ed4 <sdc_support_le_2m_phy>:
    3ed4:	4806      	ldr	r0, [pc, #24]	; (3ef0 <sdc_support_le_2m_phy+0x1c>)
    3ed6:	b510      	push	{r4, lr}
    3ed8:	7881      	ldrb	r1, [r0, #2]
    3eda:	7840      	ldrb	r0, [r0, #1]
    3edc:	4301      	orrs	r1, r0
    3ede:	d002      	beq.n	3ee6 <sdc_support_le_2m_phy+0x12>
    3ee0:	f04f 30ff 	mov.w	r0, #4294967295
    3ee4:	bd10      	pop	{r4, pc}
    3ee6:	f00b fbc8 	bl	f67a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    3eea:	2000      	movs	r0, #0
    3eec:	bd10      	pop	{r4, pc}
    3eee:	0000      	.short	0x0000
    3ef0:	2000005c 	.word	0x2000005c

00003ef4 <sdc_support_slave>:
    3ef4:	4806      	ldr	r0, [pc, #24]	; (3f10 <sdc_support_slave+0x1c>)
    3ef6:	b510      	push	{r4, lr}
    3ef8:	7881      	ldrb	r1, [r0, #2]
    3efa:	7840      	ldrb	r0, [r0, #1]
    3efc:	4301      	orrs	r1, r0
    3efe:	d002      	beq.n	3f06 <sdc_support_slave+0x12>
    3f00:	f04f 30ff 	mov.w	r0, #4294967295
    3f04:	bd10      	pop	{r4, pc}
    3f06:	f006 fa79 	bl	a3fc <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    3f0a:	2000      	movs	r0, #0
    3f0c:	bd10      	pop	{r4, pc}
    3f0e:	0000      	.short	0x0000
    3f10:	2000005c 	.word	0x2000005c
    3f14:	00000001 	.word	0x00000001
    3f18:	00010101 	.word	0x00010101
    3f1c:	031b1b00 	.word	0x031b1b00
    3f20:	00000002 	.word	0x00000002
    3f24:	00001d4c 	.word	0x00001d4c
    3f28:	001f0003 	.word	0x001f0003
    3f2c:	00000000 	.word	0x00000000
    3f30:	66c5e70e 	.word	0x66c5e70e
    3f34:	ac3c1867 	.word	0xac3c1867
    3f38:	81ccd2b3 	.word	0x81ccd2b3
    3f3c:	c0f1dca3 	.word	0xc0f1dca3
    3f40:	220236c0 	.word	0x220236c0

00003f44 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    3f44:	4a05      	ldr	r2, [pc, #20]	; (3f5c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    3f46:	b510      	push	{r4, lr}
    3f48:	6852      	ldr	r2, [r2, #4]
    3f4a:	b112      	cbz	r2, 3f52 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    3f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3f50:	4710      	bx	r2
    3f52:	2183      	movs	r1, #131	; 0x83
    3f54:	2004      	movs	r0, #4
    3f56:	f7ff ff69 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f5a:	0000      	.short	0x0000
    3f5c:	200010c0 	.word	0x200010c0

00003f60 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    3f60:	4a05      	ldr	r2, [pc, #20]	; (3f78 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    3f62:	b510      	push	{r4, lr}
    3f64:	6892      	ldr	r2, [r2, #8]
    3f66:	b112      	cbz	r2, 3f6e <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    3f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3f6c:	4710      	bx	r2
    3f6e:	2189      	movs	r1, #137	; 0x89
    3f70:	2004      	movs	r0, #4
    3f72:	f7ff ff5b 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f76:	0000      	.short	0x0000
    3f78:	200010c0 	.word	0x200010c0

00003f7c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    3f7c:	4805      	ldr	r0, [pc, #20]	; (3f94 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    3f7e:	6801      	ldr	r1, [r0, #0]
    3f80:	b129      	cbz	r1, 3f8e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3f82:	6841      	ldr	r1, [r0, #4]
    3f84:	b119      	cbz	r1, 3f8e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3f86:	6880      	ldr	r0, [r0, #8]
    3f88:	b108      	cbz	r0, 3f8e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3f8a:	2001      	movs	r0, #1
    3f8c:	4770      	bx	lr
    3f8e:	2000      	movs	r0, #0
    3f90:	4770      	bx	lr
    3f92:	0000      	.short	0x0000
    3f94:	200010c0 	.word	0x200010c0

00003f98 <sdc_rand_source_register>:
    3f98:	4902      	ldr	r1, [pc, #8]	; (3fa4 <sdc_rand_source_register+0xc>)
    3f9a:	c80d      	ldmia	r0, {r0, r2, r3}
    3f9c:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    3fa0:	2000      	movs	r0, #0
    3fa2:	4770      	bx	lr
    3fa4:	200010c0 	.word	0x200010c0

00003fa8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    3fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3faa:	4c12      	ldr	r4, [pc, #72]	; (3ff4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    3fac:	2600      	movs	r6, #0
    3fae:	6825      	ldr	r5, [r4, #0]
    3fb0:	e011      	b.n	3fd6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3fb2:	9800      	ldr	r0, [sp, #0]
    3fb4:	2802      	cmp	r0, #2
    3fb6:	d002      	beq.n	3fbe <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    3fb8:	2803      	cmp	r0, #3
    3fba:	d10c      	bne.n	3fd6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3fbc:	e006      	b.n	3fcc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    3fbe:	6820      	ldr	r0, [r4, #0]
    3fc0:	b110      	cbz	r0, 3fc8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    3fc2:	2000      	movs	r0, #0
    3fc4:	6026      	str	r6, [r4, #0]
    3fc6:	e005      	b.n	3fd4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    3fc8:	2128      	movs	r1, #40	; 0x28
    3fca:	e00c      	b.n	3fe6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3fcc:	6820      	ldr	r0, [r4, #0]
    3fce:	b168      	cbz	r0, 3fec <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    3fd0:	2001      	movs	r0, #1
    3fd2:	6026      	str	r6, [r4, #0]
    3fd4:	47a8      	blx	r5
    3fd6:	4668      	mov	r0, sp
    3fd8:	f000 fd50 	bl	4a7c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    3fdc:	2800      	cmp	r0, #0
    3fde:	d0e8      	beq.n	3fb2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    3fe0:	2805      	cmp	r0, #5
    3fe2:	d005      	beq.n	3ff0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    3fe4:	2135      	movs	r1, #53	; 0x35
    3fe6:	2004      	movs	r0, #4
    3fe8:	f7ff ff20 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3fec:	212d      	movs	r1, #45	; 0x2d
    3fee:	e7fa      	b.n	3fe6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ff2:	0000      	.short	0x0000
    3ff4:	20000064 	.word	0x20000064
    3ff8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    3ffa:	4c1f      	ldr	r4, [pc, #124]	; (4078 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd0>)
    3ffc:	4605      	mov	r5, r0
    3ffe:	7820      	ldrb	r0, [r4, #0]
    4000:	b140      	cbz	r0, 4014 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    4002:	78a2      	ldrb	r2, [r4, #2]
    4004:	1c61      	adds	r1, r4, #1
    4006:	4628      	mov	r0, r5
    4008:	1c92      	adds	r2, r2, #2
    400a:	f007 ff7e 	bl	bf0a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    400e:	2000      	movs	r0, #0
    4010:	7020      	strb	r0, [r4, #0]
    4012:	e021      	b.n	4058 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    4014:	4819      	ldr	r0, [pc, #100]	; (407c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    4016:	f002 f837 	bl	6088 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    401a:	2800      	cmp	r0, #0
    401c:	d01d      	beq.n	405a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    401e:	4c17      	ldr	r4, [pc, #92]	; (407c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    4020:	7820      	ldrb	r0, [r4, #0]
    4022:	2811      	cmp	r0, #17
    4024:	d104      	bne.n	4030 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x88>
    4026:	210a      	movs	r1, #10
    4028:	203e      	movs	r0, #62	; 0x3e
    402a:	f008 f90c 	bl	c246 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    402e:	b118      	cbz	r0, 4038 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x90>
    4030:	7820      	ldrb	r0, [r4, #0]
    4032:	2808      	cmp	r0, #8
    4034:	d005      	beq.n	4042 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x9a>
    4036:	e009      	b.n	404c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa4>
    4038:	4910      	ldr	r1, [pc, #64]	; (407c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    403a:	4628      	mov	r0, r5
    403c:	f008 fb0b 	bl	c656 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    4040:	e00a      	b.n	4058 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    4042:	2105      	movs	r1, #5
    4044:	203e      	movs	r0, #62	; 0x3e
    4046:	f008 f8fe 	bl	c246 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    404a:	b138      	cbz	r0, 405c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb4>
    404c:	490b      	ldr	r1, [pc, #44]	; (407c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    404e:	4628      	mov	r0, r5
    4050:	f008 f957 	bl	c302 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    4054:	2800      	cmp	r0, #0
    4056:	d000      	beq.n	405a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    4058:	2001      	movs	r0, #1
    405a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    405c:	88a0      	ldrh	r0, [r4, #4]
    405e:	f8ad 0000 	strh.w	r0, [sp]
    4062:	a901      	add	r1, sp, #4
    4064:	4668      	mov	r0, sp
    4066:	f008 fc14 	bl	c892 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    406a:	2800      	cmp	r0, #0
    406c:	d0f5      	beq.n	405a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    406e:	219b      	movs	r1, #155	; 0x9b
    4070:	2008      	movs	r0, #8
    4072:	f7ff fedb 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4076:	0000      	.short	0x0000
    4078:	2000125e 	.word	0x2000125e
    407c:	2000115c 	.word	0x2000115c
    4080:	b570      	push	{r4, r5, r6, lr}
    4082:	780a      	ldrb	r2, [r1, #0]
    4084:	7082      	strb	r2, [r0, #2]
    4086:	b33a      	cbz	r2, 40d8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
    4088:	2a01      	cmp	r2, #1
    408a:	d825      	bhi.n	40d8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
    408c:	2313      	movs	r3, #19
    408e:	7003      	strb	r3, [r0, #0]
    4090:	2300      	movs	r3, #0
    4092:	e00a      	b.n	40aa <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x102>
    4094:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    4098:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    409c:	78a6      	ldrb	r6, [r4, #2]
    409e:	70ee      	strb	r6, [r5, #3]
    40a0:	8864      	ldrh	r4, [r4, #2]
    40a2:	0a24      	lsrs	r4, r4, #8
    40a4:	1c5b      	adds	r3, r3, #1
    40a6:	712c      	strb	r4, [r5, #4]
    40a8:	b2db      	uxtb	r3, r3
    40aa:	4293      	cmp	r3, r2
    40ac:	d3f2      	bcc.n	4094 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xec>
    40ae:	2300      	movs	r3, #0
    40b0:	e00b      	b.n	40ca <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x122>
    40b2:	bf00      	nop
    40b4:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    40b8:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    40bc:	792e      	ldrb	r6, [r5, #4]
    40be:	7166      	strb	r6, [r4, #5]
    40c0:	88ad      	ldrh	r5, [r5, #4]
    40c2:	0a2d      	lsrs	r5, r5, #8
    40c4:	1c5b      	adds	r3, r3, #1
    40c6:	71a5      	strb	r5, [r4, #6]
    40c8:	b2db      	uxtb	r3, r3
    40ca:	4293      	cmp	r3, r2
    40cc:	d3f2      	bcc.n	40b4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x10c>
    40ce:	2101      	movs	r1, #1
    40d0:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    40d4:	b2c0      	uxtb	r0, r0
    40d6:	bd70      	pop	{r4, r5, r6, pc}
    40d8:	2000      	movs	r0, #0
    40da:	bd70      	pop	{r4, r5, r6, pc}

000040dc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    40dc:	2101      	movs	r1, #1
    40de:	4a0c      	ldr	r2, [pc, #48]	; (4110 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    40e0:	2840      	cmp	r0, #64	; 0x40
    40e2:	d20c      	bcs.n	40fe <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    40e4:	2820      	cmp	r0, #32
    40e6:	d803      	bhi.n	40f0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    40e8:	1e40      	subs	r0, r0, #1
    40ea:	4081      	lsls	r1, r0
    40ec:	6810      	ldr	r0, [r2, #0]
    40ee:	e002      	b.n	40f6 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    40f0:	3821      	subs	r0, #33	; 0x21
    40f2:	4081      	lsls	r1, r0
    40f4:	6850      	ldr	r0, [r2, #4]
    40f6:	4201      	tst	r1, r0
    40f8:	d107      	bne.n	410a <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    40fa:	2000      	movs	r0, #0
    40fc:	4770      	bx	lr
    40fe:	28ff      	cmp	r0, #255	; 0xff
    4100:	d003      	beq.n	410a <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    4102:	3840      	subs	r0, #64	; 0x40
    4104:	4081      	lsls	r1, r0
    4106:	6890      	ldr	r0, [r2, #8]
    4108:	e7f5      	b.n	40f6 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    410a:	2001      	movs	r0, #1
    410c:	4770      	bx	lr
    410e:	0000      	.short	0x0000
    4110:	20000068 	.word	0x20000068

00004114 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    4114:	2101      	movs	r1, #1
    4116:	1e40      	subs	r0, r0, #1
    4118:	4081      	lsls	r1, r0
    411a:	4804      	ldr	r0, [pc, #16]	; (412c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    411c:	68c0      	ldr	r0, [r0, #12]
    411e:	4201      	tst	r1, r0
    4120:	d001      	beq.n	4126 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    4122:	2001      	movs	r0, #1
    4124:	4770      	bx	lr
    4126:	2000      	movs	r0, #0
    4128:	4770      	bx	lr
    412a:	0000      	.short	0x0000
    412c:	20000068 	.word	0x20000068

00004130 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    4130:	4901      	ldr	r1, [pc, #4]	; (4138 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    4132:	6800      	ldr	r0, [r0, #0]
    4134:	60c8      	str	r0, [r1, #12]
    4136:	4770      	bx	lr
    4138:	20000068 	.word	0x20000068

0000413c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    413c:	4904      	ldr	r1, [pc, #16]	; (4150 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    413e:	6802      	ldr	r2, [r0, #0]
    4140:	6840      	ldr	r0, [r0, #4]
    4142:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    4146:	600a      	str	r2, [r1, #0]
    4148:	4a02      	ldr	r2, [pc, #8]	; (4154 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    414a:	4310      	orrs	r0, r2
    414c:	6048      	str	r0, [r1, #4]
    414e:	4770      	bx	lr
    4150:	20000068 	.word	0x20000068
    4154:	024007f8 	.word	0x024007f8

00004158 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    4158:	4901      	ldr	r1, [pc, #4]	; (4160 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
    415a:	6800      	ldr	r0, [r0, #0]
    415c:	6088      	str	r0, [r1, #8]
    415e:	4770      	bx	lr
    4160:	20000068 	.word	0x20000068

00004164 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    4164:	4805      	ldr	r0, [pc, #20]	; (417c <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    4166:	f04f 31ff 	mov.w	r1, #4294967295
    416a:	6001      	str	r1, [r0, #0]
    416c:	0cc9      	lsrs	r1, r1, #19
    416e:	6041      	str	r1, [r0, #4]
    4170:	2100      	movs	r1, #0
    4172:	6081      	str	r1, [r0, #8]
    4174:	211f      	movs	r1, #31
    4176:	60c1      	str	r1, [r0, #12]
    4178:	4770      	bx	lr
    417a:	0000      	.short	0x0000
    417c:	20000068 	.word	0x20000068

00004180 <sdc_hci_cmd_cb_reset>:
    4180:	b510      	push	{r4, lr}
    4182:	f7ff ffef 	bl	4164 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    4186:	f00b f9ec 	bl	f562 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    418a:	4604      	mov	r4, r0
    418c:	4802      	ldr	r0, [pc, #8]	; (4198 <sdc_hci_cmd_cb_reset+0x18>)
    418e:	6800      	ldr	r0, [r0, #0]
    4190:	b100      	cbz	r0, 4194 <sdc_hci_cmd_cb_reset+0x14>
    4192:	4780      	blx	r0
    4194:	4620      	mov	r0, r4
    4196:	bd10      	pop	{r4, pc}
    4198:	20000078 	.word	0x20000078

0000419c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    419c:	4901      	ldr	r1, [pc, #4]	; (41a4 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    419e:	6008      	str	r0, [r1, #0]
    41a0:	4770      	bx	lr
    41a2:	0000      	.short	0x0000
    41a4:	20000078 	.word	0x20000078

000041a8 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    41a8:	2102      	movs	r1, #2
    41aa:	8001      	strh	r1, [r0, #0]
    41ac:	8041      	strh	r1, [r0, #2]
    41ae:	2100      	movs	r1, #0
    41b0:	7101      	strb	r1, [r0, #4]
    41b2:	210e      	movs	r1, #14
    41b4:	7141      	strb	r1, [r0, #5]
    41b6:	f24c 51e7 	movw	r1, #50663	; 0xc5e7
    41ba:	80c1      	strh	r1, [r0, #6]
    41bc:	4901      	ldr	r1, [pc, #4]	; (41c4 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    41be:	6081      	str	r1, [r0, #8]
    41c0:	2000      	movs	r0, #0
    41c2:	4770      	bx	lr
    41c4:	3c186766 	.word	0x3c186766

000041c8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    41c8:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    41ca:	4604      	mov	r4, r0
    41cc:	4669      	mov	r1, sp
    41ce:	f008 febe 	bl	cf4e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    41d2:	b170      	cbz	r0, 41f2 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    41d4:	f240 215a 	movw	r1, #602	; 0x25a
    41d8:	e008      	b.n	41ec <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x24>
    41da:	bf00      	nop
    41dc:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    41e0:	4621      	mov	r1, r4
    41e2:	f000 f8ab 	bl	433c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    41e6:	b120      	cbz	r0, 41f2 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    41e8:	f240 215f 	movw	r1, #607	; 0x25f
    41ec:	2017      	movs	r0, #23
    41ee:	f7ff fe1d 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    41f2:	4668      	mov	r0, sp
    41f4:	f000 f852 	bl	429c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    41f8:	2800      	cmp	r0, #0
    41fa:	d0ef      	beq.n	41dc <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x14>
    41fc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

00004200 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    4200:	b510      	push	{r4, lr}
    4202:	2802      	cmp	r0, #2
    4204:	d304      	bcc.n	4210 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    4206:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    420a:	2017      	movs	r0, #23
    420c:	f7ff fe0e 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4210:	4901      	ldr	r1, [pc, #4]	; (4218 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    4212:	5c08      	ldrb	r0, [r1, r0]
    4214:	bd10      	pop	{r4, pc}
    4216:	0000      	.short	0x0000
    4218:	200010cc 	.word	0x200010cc

0000421c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    421c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    421e:	0005      	movs	r5, r0
    4220:	9500      	str	r5, [sp, #0]
    4222:	d010      	beq.n	4246 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2a>
    4224:	2600      	movs	r6, #0
    4226:	7808      	ldrb	r0, [r1, #0]
    4228:	7849      	ldrb	r1, [r1, #1]
    422a:	4604      	mov	r4, r0
    422c:	42a1      	cmp	r1, r4
    422e:	d900      	bls.n	4232 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x16>
    4230:	460c      	mov	r4, r1
    4232:	1cea      	adds	r2, r5, #3
    4234:	f022 0203 	bic.w	r2, r2, #3
    4238:	42aa      	cmp	r2, r5
    423a:	d006      	beq.n	424a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2e>
    423c:	f240 1179 	movw	r1, #377	; 0x179
    4240:	2017      	movs	r0, #23
    4242:	f7ff fdf3 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4246:	2601      	movs	r6, #1
    4248:	e7ed      	b.n	4226 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xa>
    424a:	4f13      	ldr	r7, [pc, #76]	; (4298 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x7c>)
    424c:	7038      	strb	r0, [r7, #0]
    424e:	7079      	strb	r1, [r7, #1]
    4250:	4631      	mov	r1, r6
    4252:	4668      	mov	r0, sp
    4254:	f000 f8ee 	bl	4434 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf8>
    4258:	2100      	movs	r1, #0
    425a:	460b      	mov	r3, r1
    425c:	9800      	ldr	r0, [sp, #0]
    425e:	1cc0      	adds	r0, r0, #3
    4260:	f020 0003 	bic.w	r0, r0, #3
    4264:	9000      	str	r0, [sp, #0]
    4266:	b96e      	cbnz	r6, 4284 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x68>
    4268:	eb07 0281 	add.w	r2, r7, r1, lsl #2
    426c:	60d0      	str	r0, [r2, #12]
    426e:	2000      	movs	r0, #0
    4270:	e006      	b.n	4280 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    4272:	bf00      	nop
    4274:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    4278:	f84c 3020 	str.w	r3, [ip, r0, lsl #2]
    427c:	1c40      	adds	r0, r0, #1
    427e:	b2c0      	uxtb	r0, r0
    4280:	42a0      	cmp	r0, r4
    4282:	d3f7      	bcc.n	4274 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
    4284:	9800      	ldr	r0, [sp, #0]
    4286:	1c49      	adds	r1, r1, #1
    4288:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    428c:	b2c9      	uxtb	r1, r1
    428e:	9000      	str	r0, [sp, #0]
    4290:	2902      	cmp	r1, #2
    4292:	d3e3      	bcc.n	425c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x40>
    4294:	1b40      	subs	r0, r0, r5
    4296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4298:	200010cc 	.word	0x200010cc

0000429c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    429c:	b570      	push	{r4, r5, r6, lr}
    429e:	4604      	mov	r4, r0
    42a0:	f008 ffce 	bl	d240 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    42a4:	b108      	cbz	r0, 42aa <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    42a6:	2010      	movs	r0, #16
    42a8:	bd70      	pop	{r4, r5, r6, pc}
    42aa:	7825      	ldrb	r5, [r4, #0]
    42ac:	f000 f8fe 	bl	44ac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    42b0:	4602      	mov	r2, r0
    42b2:	480c      	ldr	r0, [pc, #48]	; (42e4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    42b4:	8861      	ldrh	r1, [r4, #2]
    42b6:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    42ba:	e00e      	b.n	42da <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    42bc:	68c3      	ldr	r3, [r0, #12]
    42be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    42c2:	b143      	cbz	r3, 42d6 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    42c4:	1c4a      	adds	r2, r1, #1
    42c6:	8062      	strh	r2, [r4, #2]
    42c8:	80a1      	strh	r1, [r4, #4]
    42ca:	68c0      	ldr	r0, [r0, #12]
    42cc:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    42d0:	60a0      	str	r0, [r4, #8]
    42d2:	2000      	movs	r0, #0
    42d4:	bd70      	pop	{r4, r5, r6, pc}
    42d6:	1c49      	adds	r1, r1, #1
    42d8:	b289      	uxth	r1, r1
    42da:	4291      	cmp	r1, r2
    42dc:	d3ee      	bcc.n	42bc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    42de:	8061      	strh	r1, [r4, #2]
    42e0:	2005      	movs	r0, #5
    42e2:	bd70      	pop	{r4, r5, r6, pc}
    42e4:	200010cc 	.word	0x200010cc

000042e8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    42e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    42ec:	b121      	cbz	r1, 42f8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    42ee:	2901      	cmp	r1, #1
    42f0:	d002      	beq.n	42f8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    42f2:	2000      	movs	r0, #0
    42f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    42f8:	4c0f      	ldr	r4, [pc, #60]	; (4338 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>)
    42fa:	2700      	movs	r7, #0
    42fc:	463b      	mov	r3, r7
    42fe:	f64f 76ff 	movw	r6, #65535	; 0xffff
    4302:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    4306:	f814 c001 	ldrb.w	ip, [r4, r1]
    430a:	e00a      	b.n	4322 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3a>
    430c:	19dc      	adds	r4, r3, r7
    430e:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    4312:	b2a4      	uxth	r4, r4
    4314:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    4318:	f1be 0f00 	cmp.w	lr, #0
    431c:	d004      	beq.n	4328 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x40>
    431e:	1c5b      	adds	r3, r3, #1
    4320:	b29b      	uxth	r3, r3
    4322:	459c      	cmp	ip, r3
    4324:	d8f2      	bhi.n	430c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x24>
    4326:	4634      	mov	r4, r6
    4328:	8004      	strh	r4, [r0, #0]
    432a:	4620      	mov	r0, r4
    432c:	42b4      	cmp	r4, r6
    432e:	d0e0      	beq.n	42f2 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xa>
    4330:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4334:	f000 b834 	b.w	43a0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    4338:	200010cc 	.word	0x200010cc

0000433c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    433c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4340:	4606      	mov	r6, r0
    4342:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    4346:	460c      	mov	r4, r1
    4348:	f243 0702 	movw	r7, #12290	; 0x3002
    434c:	38ff      	subs	r0, #255	; 0xff
    434e:	d020      	beq.n	4392 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4350:	2c02      	cmp	r4, #2
    4352:	d302      	bcc.n	435a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    4354:	2007      	movs	r0, #7
    4356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    435a:	4630      	mov	r0, r6
    435c:	f000 f85a 	bl	4414 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>
    4360:	0005      	movs	r5, r0
    4362:	d016      	beq.n	4392 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4364:	480c      	ldr	r0, [pc, #48]	; (4398 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    4366:	4629      	mov	r1, r5
    4368:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    436c:	4630      	mov	r0, r6
    436e:	4790      	blx	r2
    4370:	480a      	ldr	r0, [pc, #40]	; (439c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    4372:	2100      	movs	r1, #0
    4374:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    4378:	68f8      	ldr	r0, [r7, #12]
    437a:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    437e:	4620      	mov	r0, r4
    4380:	f000 f88a 	bl	4498 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    4384:	4602      	mov	r2, r0
    4386:	4629      	mov	r1, r5
    4388:	6878      	ldr	r0, [r7, #4]
    438a:	f008 fdbf 	bl	cf0c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    438e:	2000      	movs	r0, #0
    4390:	e7e1      	b.n	4356 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    4392:	4638      	mov	r0, r7
    4394:	e7df      	b.n	4356 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    4396:	0000      	.short	0x0000
    4398:	000044cc 	.word	0x000044cc
    439c:	200010cc 	.word	0x200010cc
    43a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    43a4:	4690      	mov	r8, r2
    43a6:	460d      	mov	r5, r1
    43a8:	4607      	mov	r7, r0
    43aa:	f008 fde1 	bl	cf70 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    43ae:	b148      	cbz	r0, 43c4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    43b0:	4816      	ldr	r0, [pc, #88]	; (440c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    43b2:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    43b6:	68f0      	ldr	r0, [r6, #12]
    43b8:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    43bc:	b128      	cbz	r0, 43ca <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    43be:	f44f 719d 	mov.w	r1, #314	; 0x13a
    43c2:	e015      	b.n	43f0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    43c4:	f240 1139 	movw	r1, #313	; 0x139
    43c8:	e012      	b.n	43f0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    43ca:	6870      	ldr	r0, [r6, #4]
    43cc:	2800      	cmp	r0, #0
    43ce:	d01a      	beq.n	4406 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xca>
    43d0:	4628      	mov	r0, r5
    43d2:	f000 f861 	bl	4498 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    43d6:	4601      	mov	r1, r0
    43d8:	6870      	ldr	r0, [r6, #4]
    43da:	f008 fd49 	bl	ce70 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    43de:	0004      	movs	r4, r0
    43e0:	d010      	beq.n	4404 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc8>
    43e2:	68f0      	ldr	r0, [r6, #12]
    43e4:	2d02      	cmp	r5, #2
    43e6:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    43ea:	d304      	bcc.n	43f6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xba>
    43ec:	f240 1145 	movw	r1, #325	; 0x145
    43f0:	2017      	movs	r0, #23
    43f2:	f7ff fd1b 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    43f6:	4806      	ldr	r0, [pc, #24]	; (4410 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>)
    43f8:	4642      	mov	r2, r8
    43fa:	4621      	mov	r1, r4
    43fc:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
    4400:	4638      	mov	r0, r7
    4402:	4798      	blx	r3
    4404:	4620      	mov	r0, r4
    4406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    440a:	0000      	.short	0x0000
    440c:	200010cc 	.word	0x200010cc
    4410:	000044c4 	.word	0x000044c4
    4414:	b570      	push	{r4, r5, r6, lr}
    4416:	460c      	mov	r4, r1
    4418:	4605      	mov	r5, r0
    441a:	f008 fda9 	bl	cf70 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    441e:	2800      	cmp	r0, #0
    4420:	d005      	beq.n	442e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf2>
    4422:	4803      	ldr	r0, [pc, #12]	; (4430 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf4>)
    4424:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4428:	68c0      	ldr	r0, [r0, #12]
    442a:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    442e:	bd70      	pop	{r4, r5, r6, pc}
    4430:	200010cc 	.word	0x200010cc
    4434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4438:	4e16      	ldr	r6, [pc, #88]	; (4494 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    443a:	4688      	mov	r8, r1
    443c:	4605      	mov	r5, r0
    443e:	2400      	movs	r4, #0
    4440:	6828      	ldr	r0, [r5, #0]
    4442:	1cc0      	adds	r0, r0, #3
    4444:	f020 0003 	bic.w	r0, r0, #3
    4448:	6028      	str	r0, [r5, #0]
    444a:	4620      	mov	r0, r4
    444c:	f000 f824 	bl	4498 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    4450:	5d31      	ldrb	r1, [r6, r4]
    4452:	4348      	muls	r0, r1
    4454:	f1b8 0f00 	cmp.w	r8, #0
    4458:	d001      	beq.n	445e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    445a:	2200      	movs	r2, #0
    445c:	e000      	b.n	4460 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    445e:	682a      	ldr	r2, [r5, #0]
    4460:	4601      	mov	r1, r0
    4462:	9200      	str	r2, [sp, #0]
    4464:	b132      	cbz	r2, 4474 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    4466:	2700      	movs	r7, #0
    4468:	ea4f 000d 	mov.w	r0, sp
    446c:	f008 fd2d 	bl	ceca <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4470:	b11f      	cbz	r7, 447a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13e>
    4472:	e006      	b.n	4482 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x146>
    4474:	2701      	movs	r7, #1
    4476:	2000      	movs	r0, #0
    4478:	e7f8      	b.n	446c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x130>
    447a:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    447e:	9a00      	ldr	r2, [sp, #0]
    4480:	604a      	str	r2, [r1, #4]
    4482:	6829      	ldr	r1, [r5, #0]
    4484:	1c64      	adds	r4, r4, #1
    4486:	4408      	add	r0, r1
    4488:	b2e4      	uxtb	r4, r4
    448a:	6028      	str	r0, [r5, #0]
    448c:	2c02      	cmp	r4, #2
    448e:	d3d7      	bcc.n	4440 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x104>
    4490:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4494:	200010cc 	.word	0x200010cc
    4498:	4903      	ldr	r1, [pc, #12]	; (44a8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16c>)
    449a:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    449e:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    44a2:	1cc0      	adds	r0, r0, #3
    44a4:	4008      	ands	r0, r1
    44a6:	4770      	bx	lr
    44a8:	000044c0 	.word	0x000044c0
    44ac:	4903      	ldr	r1, [pc, #12]	; (44bc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x180>)
    44ae:	7808      	ldrb	r0, [r1, #0]
    44b0:	7849      	ldrb	r1, [r1, #1]
    44b2:	4288      	cmp	r0, r1
    44b4:	d200      	bcs.n	44b8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x17c>
    44b6:	4608      	mov	r0, r1
    44b8:	4770      	bx	lr
    44ba:	0000      	.short	0x0000
    44bc:	200010cc 	.word	0x200010cc
    44c0:	00d40218 	.word	0x00d40218
    44c4:	0000cf85 	.word	0x0000cf85
    44c8:	0000cf85 	.word	0x0000cf85
    44cc:	0000eb45 	.word	0x0000eb45
    44d0:	0000df33 	.word	0x0000df33

000044d4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    44d4:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    44d8:	4c26      	ldr	r4, [pc, #152]	; (4574 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    44da:	4680      	mov	r8, r0
    44dc:	b081      	sub	sp, #4
    44de:	6820      	ldr	r0, [r4, #0]
    44e0:	469a      	mov	sl, r3
    44e2:	4693      	mov	fp, r2
    44e4:	b158      	cbz	r0, 44fe <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    44e6:	7a02      	ldrb	r2, [r0, #8]
    44e8:	4542      	cmp	r2, r8
    44ea:	d903      	bls.n	44f4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    44ec:	6841      	ldr	r1, [r0, #4]
    44ee:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    44f2:	b140      	cbz	r0, 4506 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    44f4:	f243 0002 	movw	r0, #12290	; 0x3002
    44f8:	b005      	add	sp, #20
    44fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    44fe:	21a5      	movs	r1, #165	; 0xa5
    4500:	2018      	movs	r0, #24
    4502:	f7ff fc93 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4506:	4619      	mov	r1, r3
    4508:	9802      	ldr	r0, [sp, #8]
    450a:	f008 fd53 	bl	cfb4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    450e:	b286      	uxth	r6, r0
    4510:	4658      	mov	r0, fp
    4512:	990e      	ldr	r1, [sp, #56]	; 0x38
    4514:	f008 fd45 	bl	cfa2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    4518:	b285      	uxth	r5, r0
    451a:	1970      	adds	r0, r6, r5
    451c:	1d00      	adds	r0, r0, #4
    451e:	b287      	uxth	r7, r0
    4520:	6820      	ldr	r0, [r4, #0]
    4522:	46a1      	mov	r9, r4
    4524:	4639      	mov	r1, r7
    4526:	6800      	ldr	r0, [r0, #0]
    4528:	f008 fca2 	bl	ce70 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    452c:	0004      	movs	r4, r0
    452e:	d01f      	beq.n	4570 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    4530:	8067      	strh	r7, [r4, #2]
    4532:	8025      	strh	r5, [r4, #0]
    4534:	4629      	mov	r1, r5
    4536:	1d20      	adds	r0, r4, #4
    4538:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    453a:	4607      	mov	r7, r0
    453c:	465a      	mov	r2, fp
    453e:	2301      	movs	r3, #1
    4540:	9500      	str	r5, [sp, #0]
    4542:	f008 fbf5 	bl	cd30 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4546:	8820      	ldrh	r0, [r4, #0]
    4548:	4631      	mov	r1, r6
    454a:	4438      	add	r0, r7
    454c:	2301      	movs	r3, #1
    454e:	9a02      	ldr	r2, [sp, #8]
    4550:	f8cd a000 	str.w	sl, [sp]
    4554:	f008 fbec 	bl	cd30 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4558:	8820      	ldrh	r0, [r4, #0]
    455a:	19c1      	adds	r1, r0, r7
    455c:	4638      	mov	r0, r7
    455e:	f008 fc18 	bl	cd92 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    4562:	f8d9 0000 	ldr.w	r0, [r9]
    4566:	6841      	ldr	r1, [r0, #4]
    4568:	2000      	movs	r0, #0
    456a:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    456e:	e7c3      	b.n	44f8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4570:	2004      	movs	r0, #4
    4572:	e7c1      	b.n	44f8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4574:	2000007c 	.word	0x2000007c

00004578 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    4578:	b570      	push	{r4, r5, r6, lr}
    457a:	4c14      	ldr	r4, [pc, #80]	; (45cc <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    457c:	6823      	ldr	r3, [r4, #0]
    457e:	b18b      	cbz	r3, 45a4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    4580:	7a19      	ldrb	r1, [r3, #8]
    4582:	4281      	cmp	r1, r0
    4584:	d912      	bls.n	45ac <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    4586:	685a      	ldr	r2, [r3, #4]
    4588:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    458c:	b171      	cbz	r1, 45ac <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    458e:	2500      	movs	r5, #0
    4590:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    4594:	884a      	ldrh	r2, [r1, #2]
    4596:	6818      	ldr	r0, [r3, #0]
    4598:	f008 fcb8 	bl	cf0c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    459c:	6821      	ldr	r1, [r4, #0]
    459e:	2000      	movs	r0, #0
    45a0:	7a0a      	ldrb	r2, [r1, #8]
    45a2:	e00c      	b.n	45be <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    45a4:	21c8      	movs	r1, #200	; 0xc8
    45a6:	2018      	movs	r0, #24
    45a8:	f7ff fc40 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    45ac:	f243 0002 	movw	r0, #12290	; 0x3002
    45b0:	bd70      	pop	{r4, r5, r6, pc}
    45b2:	684b      	ldr	r3, [r1, #4]
    45b4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    45b8:	b933      	cbnz	r3, 45c8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    45ba:	1c40      	adds	r0, r0, #1
    45bc:	b2c0      	uxtb	r0, r0
    45be:	4282      	cmp	r2, r0
    45c0:	d8f7      	bhi.n	45b2 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    45c2:	6808      	ldr	r0, [r1, #0]
    45c4:	f008 fc97 	bl	cef6 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    45c8:	2000      	movs	r0, #0
    45ca:	bd70      	pop	{r4, r5, r6, pc}
    45cc:	2000007c 	.word	0x2000007c

000045d0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    45d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    45d4:	460d      	mov	r5, r1
    45d6:	0004      	movs	r4, r0
    45d8:	4690      	mov	r8, r2
    45da:	f04f 0600 	mov.w	r6, #0
    45de:	d009      	beq.n	45f4 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    45e0:	2700      	movs	r7, #0
    45e2:	1ce0      	adds	r0, r4, #3
    45e4:	f020 0003 	bic.w	r0, r0, #3
    45e8:	42a0      	cmp	r0, r4
    45ea:	d005      	beq.n	45f8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    45ec:	2186      	movs	r1, #134	; 0x86
    45ee:	2018      	movs	r0, #24
    45f0:	f7ff fc1c 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    45f4:	2701      	movs	r7, #1
    45f6:	e7f4      	b.n	45e2 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    45f8:	b1cd      	cbz	r5, 462e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    45fa:	4611      	mov	r1, r2
    45fc:	2000      	movs	r0, #0
    45fe:	f008 fc64 	bl	ceca <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4602:	300c      	adds	r0, #12
    4604:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    4608:	b98f      	cbnz	r7, 462e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    460a:	4f0a      	ldr	r7, [pc, #40]	; (4634 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    460c:	f104 000c 	add.w	r0, r4, #12
    4610:	00aa      	lsls	r2, r5, #2
    4612:	603c      	str	r4, [r7, #0]
    4614:	7225      	strb	r5, [r4, #8]
    4616:	6060      	str	r0, [r4, #4]
    4618:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    461c:	6020      	str	r0, [r4, #0]
    461e:	2100      	movs	r1, #0
    4620:	6860      	ldr	r0, [r4, #4]
    4622:	f007 fcec 	bl	bffe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4626:	4641      	mov	r1, r8
    4628:	6838      	ldr	r0, [r7, #0]
    462a:	f008 fc4e 	bl	ceca <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    462e:	4630      	mov	r0, r6
    4630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4634:	2000007c 	.word	0x2000007c

00004638 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    4638:	b570      	push	{r4, r5, r6, lr}
    463a:	4d08      	ldr	r5, [pc, #32]	; (465c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    463c:	6828      	ldr	r0, [r5, #0]
    463e:	2800      	cmp	r0, #0
    4640:	d00a      	beq.n	4658 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    4642:	2400      	movs	r4, #0
    4644:	e004      	b.n	4650 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    4646:	4620      	mov	r0, r4
    4648:	f7ff ff96 	bl	4578 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    464c:	1c64      	adds	r4, r4, #1
    464e:	b2e4      	uxtb	r4, r4
    4650:	6828      	ldr	r0, [r5, #0]
    4652:	7a00      	ldrb	r0, [r0, #8]
    4654:	42a0      	cmp	r0, r4
    4656:	d8f6      	bhi.n	4646 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    4658:	bd70      	pop	{r4, r5, r6, pc}
    465a:	0000      	.short	0x0000
    465c:	2000007c 	.word	0x2000007c

00004660 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    4660:	4909      	ldr	r1, [pc, #36]	; (4688 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    4662:	b510      	push	{r4, lr}
    4664:	4602      	mov	r2, r0
    4666:	6809      	ldr	r1, [r1, #0]
    4668:	2000      	movs	r0, #0
    466a:	b149      	cbz	r1, 4680 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    466c:	7a0b      	ldrb	r3, [r1, #8]
    466e:	4293      	cmp	r3, r2
    4670:	d905      	bls.n	467e <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4672:	6849      	ldr	r1, [r1, #4]
    4674:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4678:	2900      	cmp	r1, #0
    467a:	d000      	beq.n	467e <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    467c:	1d08      	adds	r0, r1, #4
    467e:	bd10      	pop	{r4, pc}
    4680:	21ee      	movs	r1, #238	; 0xee
    4682:	2018      	movs	r0, #24
    4684:	f7ff fbd2 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4688:	2000007c 	.word	0x2000007c

0000468c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    468c:	490a      	ldr	r1, [pc, #40]	; (46b8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    468e:	b510      	push	{r4, lr}
    4690:	4602      	mov	r2, r0
    4692:	6809      	ldr	r1, [r1, #0]
    4694:	2000      	movs	r0, #0
    4696:	b159      	cbz	r1, 46b0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    4698:	7a0b      	ldrb	r3, [r1, #8]
    469a:	4293      	cmp	r3, r2
    469c:	d907      	bls.n	46ae <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    469e:	6849      	ldr	r1, [r1, #4]
    46a0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    46a4:	2900      	cmp	r1, #0
    46a6:	d002      	beq.n	46ae <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    46a8:	f831 0b04 	ldrh.w	r0, [r1], #4
    46ac:	4408      	add	r0, r1
    46ae:	bd10      	pop	{r4, pc}
    46b0:	21fc      	movs	r1, #252	; 0xfc
    46b2:	2018      	movs	r0, #24
    46b4:	f7ff fbba 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46b8:	2000007c 	.word	0x2000007c
    46bc:	b570      	push	{r4, r5, r6, lr}
    46be:	4b1e      	ldr	r3, [pc, #120]	; (4738 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
    46c0:	6845      	ldr	r5, [r0, #4]
    46c2:	4604      	mov	r4, r0
    46c4:	2200      	movs	r2, #0
    46c6:	b1a1      	cbz	r1, 46f2 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
    46c8:	2001      	movs	r0, #1
    46ca:	7060      	strb	r0, [r4, #1]
    46cc:	8858      	ldrh	r0, [r3, #2]
    46ce:	0881      	lsrs	r1, r0, #2
    46d0:	f05f 0000 	movs.w	r0, #0
    46d4:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    46d8:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    46dc:	831a      	strh	r2, [r3, #24]
    46de:	8419      	strh	r1, [r3, #32]
    46e0:	fb00 5301 	mla	r3, r0, r1, r5
    46e4:	6073      	str	r3, [r6, #4]
    46e6:	1823      	adds	r3, r4, r0
    46e8:	1c40      	adds	r0, r0, #1
    46ea:	751a      	strb	r2, [r3, #20]
    46ec:	2804      	cmp	r0, #4
    46ee:	d3f1      	bcc.n	46d4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    46f0:	bd70      	pop	{r4, r5, r6, pc}
    46f2:	7062      	strb	r2, [r4, #1]
    46f4:	f05f 0000 	movs.w	r0, #0
    46f8:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    46fc:	830a      	strh	r2, [r1, #24]
    46fe:	840a      	strh	r2, [r1, #32]
    4700:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    4704:	604a      	str	r2, [r1, #4]
    4706:	1821      	adds	r1, r4, r0
    4708:	1c40      	adds	r0, r0, #1
    470a:	750a      	strb	r2, [r1, #20]
    470c:	2804      	cmp	r0, #4
    470e:	d3f3      	bcc.n	46f8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    4710:	8858      	ldrh	r0, [r3, #2]
    4712:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    4716:	d201      	bcs.n	471c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
    4718:	0846      	lsrs	r6, r0, #1
    471a:	e000      	b.n	471e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
    471c:	26ff      	movs	r6, #255	; 0xff
    471e:	f008 fcbc 	bl	d09a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x114>
    4722:	6065      	str	r5, [r4, #4]
    4724:	8420      	strh	r0, [r4, #32]
    4726:	1829      	adds	r1, r5, r0
    4728:	60a1      	str	r1, [r4, #8]
    472a:	8466      	strh	r6, [r4, #34]	; 0x22
    472c:	60e5      	str	r5, [r4, #12]
    472e:	84a0      	strh	r0, [r4, #36]	; 0x24
    4730:	6121      	str	r1, [r4, #16]
    4732:	84e6      	strh	r6, [r4, #38]	; 0x26
    4734:	bd70      	pop	{r4, r5, r6, pc}
    4736:	0000      	.short	0x0000
    4738:	20000080 	.word	0x20000080

0000473c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    473c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4740:	b170      	cbz	r0, 4760 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x24>
    4742:	2500      	movs	r5, #0
    4744:	4411      	add	r1, r2
    4746:	b2cc      	uxtb	r4, r1
    4748:	4e24      	ldr	r6, [pc, #144]	; (47dc <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0xa0>)
    474a:	1cc1      	adds	r1, r0, #3
    474c:	2700      	movs	r7, #0
    474e:	f021 0103 	bic.w	r1, r1, #3
    4752:	7034      	strb	r4, [r6, #0]
    4754:	4281      	cmp	r1, r0
    4756:	d005      	beq.n	4764 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x28>
    4758:	214e      	movs	r1, #78	; 0x4e
    475a:	2009      	movs	r0, #9
    475c:	f7ff fb66 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4760:	2501      	movs	r5, #1
    4762:	e7ef      	b.n	4744 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    4764:	2b1f      	cmp	r3, #31
    4766:	d804      	bhi.n	4772 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x36>
    4768:	f64f 71ff 	movw	r1, #65535	; 0xffff
    476c:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    4770:	e009      	b.n	4786 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4a>
    4772:	0059      	lsls	r1, r3, #1
    4774:	2bff      	cmp	r3, #255	; 0xff
    4776:	d90b      	bls.n	4790 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x54>
    4778:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    477c:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    4780:	d200      	bcs.n	4784 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    4782:	4611      	mov	r1, r2
    4784:	b289      	uxth	r1, r1
    4786:	1cc9      	adds	r1, r1, #3
    4788:	f021 0303 	bic.w	r3, r1, #3
    478c:	b135      	cbz	r5, 479c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x60>
    478e:	e007      	b.n	47a0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x64>
    4790:	227c      	movs	r2, #124	; 0x7c
    4792:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    4796:	d3f5      	bcc.n	4784 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    4798:	217c      	movs	r1, #124	; 0x7c
    479a:	e7f3      	b.n	4784 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    479c:	6070      	str	r0, [r6, #4]
    479e:	8073      	strh	r3, [r6, #2]
    47a0:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    47a4:	eb07 02c1 	add.w	r2, r7, r1, lsl #3
    47a8:	2100      	movs	r1, #0
    47aa:	6876      	ldr	r6, [r6, #4]
    47ac:	f04f 0c01 	mov.w	ip, #1
    47b0:	e00d      	b.n	47ce <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x92>
    47b2:	b94d      	cbnz	r5, 47c8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8c>
    47b4:	eb01 0781 	add.w	r7, r1, r1, lsl #2
    47b8:	eb00 0e02 	add.w	lr, r0, r2
    47bc:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    47c0:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    47c4:	f8c7 e004 	str.w	lr, [r7, #4]
    47c8:	1c49      	adds	r1, r1, #1
    47ca:	441a      	add	r2, r3
    47cc:	b2c9      	uxtb	r1, r1
    47ce:	42a1      	cmp	r1, r4
    47d0:	d3ef      	bcc.n	47b2 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x76>
    47d2:	1dd2      	adds	r2, r2, #7
    47d4:	f022 0007 	bic.w	r0, r2, #7
    47d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    47dc:	20000080 	.word	0x20000080

000047e0 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    47e0:	b570      	push	{r4, r5, r6, lr}
    47e2:	4a10      	ldr	r2, [pc, #64]	; (4824 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    47e4:	2000      	movs	r0, #0
    47e6:	6851      	ldr	r1, [r2, #4]
    47e8:	7812      	ldrb	r2, [r2, #0]
    47ea:	e014      	b.n	4816 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    47ec:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    47f0:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    47f4:	b16b      	cbz	r3, 4812 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    47f6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    47fa:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    47fe:	d00c      	beq.n	481a <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
    4800:	2500      	movs	r5, #0
    4802:	70a5      	strb	r5, [r4, #2]
    4804:	2101      	movs	r1, #1
    4806:	4620      	mov	r0, r4
    4808:	f7ff ff58 	bl	46bc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    480c:	7025      	strb	r5, [r4, #0]
    480e:	4620      	mov	r0, r4
    4810:	bd70      	pop	{r4, r5, r6, pc}
    4812:	1c40      	adds	r0, r0, #1
    4814:	b2c0      	uxtb	r0, r0
    4816:	4290      	cmp	r0, r2
    4818:	d3e8      	bcc.n	47ec <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    481a:	21a9      	movs	r1, #169	; 0xa9
    481c:	2009      	movs	r0, #9
    481e:	f7ff fb05 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4822:	0000      	.short	0x0000
    4824:	20000080 	.word	0x20000080

00004828 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    4828:	4804      	ldr	r0, [pc, #16]	; (483c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    482a:	b510      	push	{r4, lr}
    482c:	8840      	ldrh	r0, [r0, #2]
    482e:	0884      	lsrs	r4, r0, #2
    4830:	f008 fc33 	bl	d09a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x114>
    4834:	4284      	cmp	r4, r0
    4836:	d300      	bcc.n	483a <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    4838:	4620      	mov	r0, r4
    483a:	bd10      	pop	{r4, pc}
    483c:	20000080 	.word	0x20000080
    4840:	4909      	ldr	r1, [pc, #36]	; (4868 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x40>)
    4842:	b510      	push	{r4, lr}
    4844:	4807      	ldr	r0, [pc, #28]	; (4864 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x3c>)
    4846:	6008      	str	r0, [r1, #0]
    4848:	4b08      	ldr	r3, [pc, #32]	; (486c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x44>)
    484a:	2011      	movs	r0, #17
    484c:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    4850:	2200      	movs	r2, #0
    4852:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    4856:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    485a:	1c40      	adds	r0, r0, #1
    485c:	b2c0      	uxtb	r0, r0
    485e:	2814      	cmp	r0, #20
    4860:	d3f4      	bcc.n	484c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x24>
    4862:	bd10      	pop	{r4, pc}
    4864:	fffe0000 	.word	0xfffe0000
    4868:	4001f508 	.word	0x4001f508
    486c:	4001f000 	.word	0x4001f000
    4870:	b570      	push	{r4, r5, r6, lr}
    4872:	2420      	movs	r4, #32
    4874:	2100      	movs	r1, #0
    4876:	2301      	movs	r3, #1
    4878:	fa20 f201 	lsr.w	r2, r0, r1
    487c:	07d2      	lsls	r2, r2, #31
    487e:	d020      	beq.n	48c2 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x9a>
    4880:	b24a      	sxtb	r2, r1
    4882:	2a00      	cmp	r2, #0
    4884:	db10      	blt.n	48a8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x80>
    4886:	bf00      	nop
    4888:	ea4f 1652 	mov.w	r6, r2, lsr #5
    488c:	ea4f 0686 	mov.w	r6, r6, lsl #2
    4890:	f002 051f 	and.w	r5, r2, #31
    4894:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
    4898:	fa03 f505 	lsl.w	r5, r3, r5
    489c:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
    48a0:	f3bf 8f4f 	dsb	sy
    48a4:	f3bf 8f6f 	isb	sy
    48a8:	db0b      	blt.n	48c2 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x9a>
    48aa:	f002 051f 	and.w	r5, r2, #31
    48ae:	ea4f 1252 	mov.w	r2, r2, lsr #5
    48b2:	ea4f 0282 	mov.w	r2, r2, lsl #2
    48b6:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    48ba:	fa03 f505 	lsl.w	r5, r3, r5
    48be:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
    48c2:	f101 0101 	add.w	r1, r1, #1
    48c6:	42a1      	cmp	r1, r4
    48c8:	d3d6      	bcc.n	4878 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>
    48ca:	bd70      	pop	{r4, r5, r6, pc}
    48cc:	b570      	push	{r4, r5, r6, lr}
    48ce:	0042      	lsls	r2, r0, #1
    48d0:	f04f 0100 	mov.w	r1, #0
    48d4:	d501      	bpl.n	48da <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xb2>
    48d6:	4a14      	ldr	r2, [pc, #80]	; (4928 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x100>)
    48d8:	6011      	str	r1, [r2, #0]
    48da:	f3c0 3280 	ubfx	r2, r0, #14, #1
    48de:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    48e2:	429a      	cmp	r2, r3
    48e4:	d003      	beq.n	48ee <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xc6>
    48e6:	2169      	movs	r1, #105	; 0x69
    48e8:	201b      	movs	r0, #27
    48ea:	f7ff fa9f 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    48ee:	f410 4f40 	tst.w	r0, #49152	; 0xc000
    48f2:	d014      	beq.n	491e <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xf6>
    48f4:	4a0d      	ldr	r2, [pc, #52]	; (492c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x104>)
    48f6:	2001      	movs	r0, #1
    48f8:	6050      	str	r0, [r2, #4]
    48fa:	1e83      	subs	r3, r0, #2
    48fc:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4900:	4a0b      	ldr	r2, [pc, #44]	; (4930 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x108>)
    4902:	6090      	str	r0, [r2, #8]
    4904:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    4908:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    490c:	4c09      	ldr	r4, [pc, #36]	; (4934 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x10c>)
    490e:	6021      	str	r1, [r4, #0]
    4910:	1d25      	adds	r5, r4, #4
    4912:	6028      	str	r0, [r5, #0]
    4914:	6090      	str	r0, [r2, #8]
    4916:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    491a:	6021      	str	r1, [r4, #0]
    491c:	6028      	str	r0, [r5, #0]
    491e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4922:	f7ff bf8d 	b.w	4840 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    4926:	0000      	.short	0x0000
    4928:	4001e504 	.word	0x4001e504
    492c:	4000e000 	.word	0x4000e000
    4930:	4000f000 	.word	0x4000f000
    4934:	4000f500 	.word	0x4000f500

00004938 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    4938:	b570      	push	{r4, r5, r6, lr}
    493a:	4c0a      	ldr	r4, [pc, #40]	; (4964 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>)
    493c:	460d      	mov	r5, r1
    493e:	6020      	str	r0, [r4, #0]
    4940:	f7ff ffc4 	bl	48cc <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xa4>
    4944:	6820      	ldr	r0, [r4, #0]
    4946:	f7ff ff93 	bl	4870 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x48>
    494a:	f000 f883 	bl	4a54 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    494e:	f7ff ff77 	bl	4840 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    4952:	f008 fc6a 	bl	d22a <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
    4956:	4628      	mov	r0, r5
    4958:	f000 f8b6 	bl	4ac8 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    495c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4960:	f000 b8ce 	b.w	4b00 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    4964:	20000088 	.word	0x20000088

00004968 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    4968:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    496c:	4c36      	ldr	r4, [pc, #216]	; (4a48 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe0>)
    496e:	b082      	sub	sp, #8
    4970:	f8d4 b504 	ldr.w	fp, [r4, #1284]	; 0x504
    4974:	2601      	movs	r6, #1
    4976:	4835      	ldr	r0, [pc, #212]	; (4a4c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>)
    4978:	f007 fa1e 	bl	bdb8 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    497c:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 4a4c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>
    4980:	b920      	cbnz	r0, 498c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
    4982:	2600      	movs	r6, #0
    4984:	f109 0001 	add.w	r0, r9, #1
    4988:	f007 fa2d 	bl	bde6 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    498c:	f44f 7580 	mov.w	r5, #256	; 0x100
    4990:	f04f 0800 	mov.w	r8, #0
    4994:	1d2f      	adds	r7, r5, #4
    4996:	2101      	movs	r1, #1
    4998:	6061      	str	r1, [r4, #4]
    499a:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    499e:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    49a2:	9802      	ldr	r0, [sp, #8]
    49a4:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
    49a8:	6021      	str	r1, [r4, #0]
    49aa:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 4a50 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe8>
    49ae:	e01c      	b.n	49ea <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    49b0:	f8da 0000 	ldr.w	r0, [sl]
    49b4:	06c0      	lsls	r0, r0, #27
    49b6:	d518      	bpl.n	49ea <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    49b8:	200e      	movs	r0, #14
    49ba:	f008 fc22 	bl	d202 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    49be:	f3ef 8010 	mrs	r0, PRIMASK
    49c2:	9000      	str	r0, [sp, #0]
    49c4:	b672      	cpsid	i
    49c6:	2103      	movs	r1, #3
    49c8:	4620      	mov	r0, r4
    49ca:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    49ce:	4629      	mov	r1, r5
    49d0:	f008 fc24 	bl	d21c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    49d4:	b930      	cbnz	r0, 49e4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x7c>
    49d6:	4639      	mov	r1, r7
    49d8:	4620      	mov	r0, r4
    49da:	f008 fc1f 	bl	d21c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    49de:	b908      	cbnz	r0, 49e4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x7c>
    49e0:	f7ff f89e 	bl	3b20 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    49e4:	9800      	ldr	r0, [sp, #0]
    49e6:	b900      	cbnz	r0, 49ea <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    49e8:	b662      	cpsie	i
    49ea:	4629      	mov	r1, r5
    49ec:	4620      	mov	r0, r4
    49ee:	f008 fc15 	bl	d21c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    49f2:	b928      	cbnz	r0, 4a00 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x98>
    49f4:	4639      	mov	r1, r7
    49f6:	4620      	mov	r0, r4
    49f8:	f008 fc10 	bl	d21c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    49fc:	2800      	cmp	r0, #0
    49fe:	d0d7      	beq.n	49b0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x48>
    4a00:	4639      	mov	r1, r7
    4a02:	4620      	mov	r0, r4
    4a04:	f008 fc0a 	bl	d21c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    4a08:	2800      	cmp	r0, #0
    4a0a:	d1c4      	bne.n	4996 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2e>
    4a0c:	b136      	cbz	r6, 4a1c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xb4>
    4a0e:	f8c4 b504 	str.w	fp, [r4, #1284]	; 0x504
    4a12:	f109 0001 	add.w	r0, r9, #1
    4a16:	f007 f9cf 	bl	bdb8 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4a1a:	e012      	b.n	4a42 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xda>
    4a1c:	f109 0001 	add.w	r0, r9, #1
    4a20:	f007 f9ca 	bl	bdb8 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4a24:	2800      	cmp	r0, #0
    4a26:	d1ad      	bne.n	4984 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
    4a28:	2003      	movs	r0, #3
    4a2a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    4a2e:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    4a32:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    4a36:	200e      	movs	r0, #14
    4a38:	f008 fbe3 	bl	d202 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    4a3c:	4803      	ldr	r0, [pc, #12]	; (4a4c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>)
    4a3e:	f007 f9d2 	bl	bde6 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4a42:	2000      	movs	r0, #0
    4a44:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4a48:	4000e000 	.word	0x4000e000
    4a4c:	20000297 	.word	0x20000297
    4a50:	e000ed10 	.word	0xe000ed10

00004a54 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    4a54:	b510      	push	{r4, lr}
    4a56:	4808      	ldr	r0, [pc, #32]	; (4a78 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    4a58:	f007 f9c1 	bl	bdde <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4a5c:	b108      	cbz	r0, 4a62 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
    4a5e:	2125      	movs	r1, #37	; 0x25
    4a60:	e006      	b.n	4a70 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
    4a62:	4805      	ldr	r0, [pc, #20]	; (4a78 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    4a64:	1c40      	adds	r0, r0, #1
    4a66:	f007 f9ba 	bl	bdde <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4a6a:	2800      	cmp	r0, #0
    4a6c:	d003      	beq.n	4a76 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
    4a6e:	2129      	movs	r1, #41	; 0x29
    4a70:	201d      	movs	r0, #29
    4a72:	f7ff f9db 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4a76:	bd10      	pop	{r4, pc}
    4a78:	20000297 	.word	0x20000297

00004a7c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    4a7c:	b570      	push	{r4, r5, r6, lr}
    4a7e:	4911      	ldr	r1, [pc, #68]	; (4ac4 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    4a80:	680a      	ldr	r2, [r1, #0]
    4a82:	b1ea      	cbz	r2, 4ac0 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    4a84:	2300      	movs	r3, #0
    4a86:	461d      	mov	r5, r3
    4a88:	2401      	movs	r4, #1
    4a8a:	684a      	ldr	r2, [r1, #4]
    4a8c:	1c52      	adds	r2, r2, #1
    4a8e:	604a      	str	r2, [r1, #4]
    4a90:	2a09      	cmp	r2, #9
    4a92:	d300      	bcc.n	4a96 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    4a94:	604d      	str	r5, [r1, #4]
    4a96:	790e      	ldrb	r6, [r1, #4]
    4a98:	fa04 f206 	lsl.w	r2, r4, r6
    4a9c:	680e      	ldr	r6, [r1, #0]
    4a9e:	4216      	tst	r6, r2
    4aa0:	d00b      	beq.n	4aba <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    4aa2:	f3ef 8310 	mrs	r3, PRIMASK
    4aa6:	b672      	cpsid	i
    4aa8:	680c      	ldr	r4, [r1, #0]
    4aaa:	4394      	bics	r4, r2
    4aac:	600c      	str	r4, [r1, #0]
    4aae:	b903      	cbnz	r3, 4ab2 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    4ab0:	b662      	cpsie	i
    4ab2:	6849      	ldr	r1, [r1, #4]
    4ab4:	6001      	str	r1, [r0, #0]
    4ab6:	2000      	movs	r0, #0
    4ab8:	bd70      	pop	{r4, r5, r6, pc}
    4aba:	1c5b      	adds	r3, r3, #1
    4abc:	2b09      	cmp	r3, #9
    4abe:	d3e4      	bcc.n	4a8a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    4ac0:	2005      	movs	r0, #5
    4ac2:	bd70      	pop	{r4, r5, r6, pc}
    4ac4:	2000008c 	.word	0x2000008c

00004ac8 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    4ac8:	4802      	ldr	r0, [pc, #8]	; (4ad4 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    4aca:	2100      	movs	r1, #0
    4acc:	6001      	str	r1, [r0, #0]
    4ace:	6041      	str	r1, [r0, #4]
    4ad0:	4770      	bx	lr
    4ad2:	0000      	.short	0x0000
    4ad4:	2000008c 	.word	0x2000008c

00004ad8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    4ad8:	b510      	push	{r4, lr}
    4ada:	4c08      	ldr	r4, [pc, #32]	; (4afc <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    4adc:	7861      	ldrb	r1, [r4, #1]
    4ade:	b109      	cbz	r1, 4ae4 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    4ae0:	200f      	movs	r0, #15
    4ae2:	bd10      	pop	{r4, pc}
    4ae4:	f7fe ffa8 	bl	3a38 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    4ae8:	7020      	strb	r0, [r4, #0]
    4aea:	28ff      	cmp	r0, #255	; 0xff
    4aec:	d001      	beq.n	4af2 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    4aee:	2000      	movs	r0, #0
    4af0:	bd10      	pop	{r4, pc}
    4af2:	2176      	movs	r1, #118	; 0x76
    4af4:	201f      	movs	r0, #31
    4af6:	f7ff f999 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4afa:	0000      	.short	0x0000
    4afc:	20000094 	.word	0x20000094

00004b00 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    4b00:	4901      	ldr	r1, [pc, #4]	; (4b08 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    4b02:	2000      	movs	r0, #0
    4b04:	7048      	strb	r0, [r1, #1]
    4b06:	4770      	bx	lr
    4b08:	20000094 	.word	0x20000094

00004b0c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    4b0c:	4806      	ldr	r0, [pc, #24]	; (4b28 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    4b0e:	4a07      	ldr	r2, [pc, #28]	; (4b2c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    4b10:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    4b12:	8852      	ldrh	r2, [r2, #2]
    4b14:	4291      	cmp	r1, r2
    4b16:	d104      	bne.n	4b22 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    4b18:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    4b1c:	b108      	cbz	r0, 4b22 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    4b1e:	2000      	movs	r0, #0
    4b20:	4770      	bx	lr
    4b22:	2001      	movs	r0, #1
    4b24:	4770      	bx	lr
    4b26:	0000      	.short	0x0000
    4b28:	20001360 	.word	0x20001360
    4b2c:	2000027c 	.word	0x2000027c

00004b30 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    4b30:	4901      	ldr	r1, [pc, #4]	; (4b38 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    4b32:	8048      	strh	r0, [r1, #2]
    4b34:	4770      	bx	lr
    4b36:	0000      	.short	0x0000
    4b38:	2000027c 	.word	0x2000027c

00004b3c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    4b3c:	4808      	ldr	r0, [pc, #32]	; (4b60 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    4b3e:	4a09      	ldr	r2, [pc, #36]	; (4b64 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    4b40:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    4b42:	8852      	ldrh	r2, [r2, #2]
    4b44:	4291      	cmp	r1, r2
    4b46:	d109      	bne.n	4b5c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    4b48:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4b4c:	8481      	strh	r1, [r0, #36]	; 0x24
    4b4e:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    4b52:	b119      	cbz	r1, 4b5c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    4b54:	2100      	movs	r1, #0
    4b56:	7001      	strb	r1, [r0, #0]
    4b58:	2001      	movs	r0, #1
    4b5a:	4770      	bx	lr
    4b5c:	2000      	movs	r0, #0
    4b5e:	4770      	bx	lr
    4b60:	20001360 	.word	0x20001360
    4b64:	2000027c 	.word	0x2000027c

00004b68 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    4b68:	4807      	ldr	r0, [pc, #28]	; (4b88 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    4b6a:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    4b6e:	2901      	cmp	r1, #1
    4b70:	d007      	beq.n	4b82 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    4b72:	2101      	movs	r1, #1
    4b74:	7001      	strb	r1, [r0, #0]
    4b76:	4805      	ldr	r0, [pc, #20]	; (4b8c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    4b78:	4903      	ldr	r1, [pc, #12]	; (4b88 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    4b7a:	8800      	ldrh	r0, [r0, #0]
    4b7c:	8488      	strh	r0, [r1, #36]	; 0x24
    4b7e:	2001      	movs	r0, #1
    4b80:	4770      	bx	lr
    4b82:	2000      	movs	r0, #0
    4b84:	4770      	bx	lr
    4b86:	0000      	.short	0x0000
    4b88:	20001360 	.word	0x20001360
    4b8c:	2000027c 	.word	0x2000027c

00004b90 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    4b90:	4906      	ldr	r1, [pc, #24]	; (4bac <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    4b92:	4b07      	ldr	r3, [pc, #28]	; (4bb0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    4b94:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4b96:	885b      	ldrh	r3, [r3, #2]
    4b98:	429a      	cmp	r2, r3
    4b9a:	d105      	bne.n	4ba8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    4b9c:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    4ba0:	b112      	cbz	r2, 4ba8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    4ba2:	6001      	str	r1, [r0, #0]
    4ba4:	2001      	movs	r0, #1
    4ba6:	4770      	bx	lr
    4ba8:	2000      	movs	r0, #0
    4baa:	4770      	bx	lr
    4bac:	20001360 	.word	0x20001360
    4bb0:	2000027c 	.word	0x2000027c

00004bb4 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    4bb4:	4909      	ldr	r1, [pc, #36]	; (4bdc <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    4bb6:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4bb8:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    4bbc:	3bff      	subs	r3, #255	; 0xff
    4bbe:	d002      	beq.n	4bc6 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    4bc0:	2100      	movs	r1, #0
    4bc2:	6001      	str	r1, [r0, #0]
    4bc4:	e007      	b.n	4bd6 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    4bc6:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    4bca:	4904      	ldr	r1, [pc, #16]	; (4bdc <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    4bcc:	2a01      	cmp	r2, #1
    4bce:	d002      	beq.n	4bd6 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    4bd0:	6001      	str	r1, [r0, #0]
    4bd2:	2001      	movs	r0, #1
    4bd4:	4770      	bx	lr
    4bd6:	2000      	movs	r0, #0
    4bd8:	4770      	bx	lr
    4bda:	0000      	.short	0x0000
    4bdc:	20001360 	.word	0x20001360

00004be0 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    4be0:	4901      	ldr	r1, [pc, #4]	; (4be8 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    4be2:	8008      	strh	r0, [r1, #0]
    4be4:	4770      	bx	lr
    4be6:	0000      	.short	0x0000
    4be8:	2000027c 	.word	0x2000027c

00004bec <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    4bec:	4905      	ldr	r1, [pc, #20]	; (4c04 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    4bee:	2000      	movs	r0, #0
    4bf0:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    4bf4:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4bf8:	8488      	strh	r0, [r1, #36]	; 0x24
    4bfa:	4903      	ldr	r1, [pc, #12]	; (4c08 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    4bfc:	8008      	strh	r0, [r1, #0]
    4bfe:	8048      	strh	r0, [r1, #2]
    4c00:	4770      	bx	lr
    4c02:	0000      	.short	0x0000
    4c04:	20001360 	.word	0x20001360
    4c08:	2000027c 	.word	0x2000027c
    4c0c:	4905      	ldr	r1, [pc, #20]	; (4c24 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    4c0e:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4c10:	4282      	cmp	r2, r0
    4c12:	d105      	bne.n	4c20 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    4c14:	2000      	movs	r0, #0
    4c16:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    4c1a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4c1e:	8488      	strh	r0, [r1, #36]	; 0x24
    4c20:	4770      	bx	lr
    4c22:	0000      	.short	0x0000
    4c24:	20001360 	.word	0x20001360

00004c28 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    4c28:	4a0a      	ldr	r2, [pc, #40]	; (4c54 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    4c2a:	b110      	cbz	r0, 4c32 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    4c2c:	2801      	cmp	r0, #1
    4c2e:	d007      	beq.n	4c40 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    4c30:	e00e      	b.n	4c50 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4c32:	7850      	ldrb	r0, [r2, #1]
    4c34:	b160      	cbz	r0, 4c50 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4c36:	f8d2 0002 	ldr.w	r0, [r2, #2]
    4c3a:	6008      	str	r0, [r1, #0]
    4c3c:	88d0      	ldrh	r0, [r2, #6]
    4c3e:	e004      	b.n	4c4a <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    4c40:	7810      	ldrb	r0, [r2, #0]
    4c42:	b128      	cbz	r0, 4c50 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4c44:	6890      	ldr	r0, [r2, #8]
    4c46:	6008      	str	r0, [r1, #0]
    4c48:	8990      	ldrh	r0, [r2, #12]
    4c4a:	8088      	strh	r0, [r1, #4]
    4c4c:	2001      	movs	r0, #1
    4c4e:	4770      	bx	lr
    4c50:	2000      	movs	r0, #0
    4c52:	4770      	bx	lr
    4c54:	20000299 	.word	0x20000299

00004c58 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    4c58:	4a08      	ldr	r2, [pc, #32]	; (4c7c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    4c5a:	2301      	movs	r3, #1
    4c5c:	b138      	cbz	r0, 4c6e <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    4c5e:	2801      	cmp	r0, #1
    4c60:	d104      	bne.n	4c6c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    4c62:	7013      	strb	r3, [r2, #0]
    4c64:	6808      	ldr	r0, [r1, #0]
    4c66:	6090      	str	r0, [r2, #8]
    4c68:	8888      	ldrh	r0, [r1, #4]
    4c6a:	8190      	strh	r0, [r2, #12]
    4c6c:	4770      	bx	lr
    4c6e:	7053      	strb	r3, [r2, #1]
    4c70:	6808      	ldr	r0, [r1, #0]
    4c72:	f8c2 0002 	str.w	r0, [r2, #2]
    4c76:	8888      	ldrh	r0, [r1, #4]
    4c78:	80d0      	strh	r0, [r2, #6]
    4c7a:	4770      	bx	lr
    4c7c:	20000299 	.word	0x20000299

00004c80 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    4c80:	4906      	ldr	r1, [pc, #24]	; (4c9c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    4c82:	b110      	cbz	r0, 4c8a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    4c84:	2801      	cmp	r0, #1
    4c86:	d002      	beq.n	4c8e <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    4c88:	e005      	b.n	4c96 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    4c8a:	7848      	ldrb	r0, [r1, #1]
    4c8c:	e000      	b.n	4c90 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    4c8e:	7808      	ldrb	r0, [r1, #0]
    4c90:	b108      	cbz	r0, 4c96 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    4c92:	2001      	movs	r0, #1
    4c94:	4770      	bx	lr
    4c96:	2000      	movs	r0, #0
    4c98:	4770      	bx	lr
    4c9a:	0000      	.short	0x0000
    4c9c:	20000299 	.word	0x20000299

00004ca0 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    4ca0:	4901      	ldr	r1, [pc, #4]	; (4ca8 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    4ca2:	7448      	strb	r0, [r1, #17]
    4ca4:	4770      	bx	lr
    4ca6:	0000      	.short	0x0000
    4ca8:	20000cba 	.word	0x20000cba

00004cac <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    4cac:	4801      	ldr	r0, [pc, #4]	; (4cb4 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    4cae:	78c0      	ldrb	r0, [r0, #3]
    4cb0:	4770      	bx	lr
    4cb2:	0000      	.short	0x0000
    4cb4:	200000b0 	.word	0x200000b0

00004cb8 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    4cb8:	4801      	ldr	r0, [pc, #4]	; (4cc0 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    4cba:	7900      	ldrb	r0, [r0, #4]
    4cbc:	4770      	bx	lr
    4cbe:	0000      	.short	0x0000
    4cc0:	200000b0 	.word	0x200000b0

00004cc4 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
    4cc4:	b578      	push	{r3, r4, r5, r6, lr}
    4cc6:	4913      	ldr	r1, [pc, #76]	; (4d14 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x50>)
    4cc8:	7c4a      	ldrb	r2, [r1, #17]
    4cca:	b30a      	cbz	r2, 4d10 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    4ccc:	7c0a      	ldrb	r2, [r1, #16]
    4cce:	f88d 2000 	strb.w	r2, [sp]
    4cd2:	9a00      	ldr	r2, [sp, #0]
    4cd4:	9200      	str	r2, [sp, #0]
    4cd6:	f89d 2000 	ldrb.w	r2, [sp]
    4cda:	b1ca      	cbz	r2, 4d10 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    4cdc:	2300      	movs	r3, #0
    4cde:	f101 0210 	add.w	r2, r1, #16
    4ce2:	241a      	movs	r4, #26
    4ce4:	f1a1 0552 	sub.w	r5, r1, #82	; 0x52
    4ce8:	7c0e      	ldrb	r6, [r1, #16]
    4cea:	f88d 6000 	strb.w	r6, [sp]
    4cee:	9e00      	ldr	r6, [sp, #0]
    4cf0:	9600      	str	r6, [sp, #0]
    4cf2:	f89d 6000 	ldrb.w	r6, [sp]
    4cf6:	b14e      	cbz	r6, 4d0c <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x48>
    4cf8:	7013      	strb	r3, [r2, #0]
    4cfa:	7043      	strb	r3, [r0, #1]
    4cfc:	7004      	strb	r4, [r0, #0]
    4cfe:	f8d5 605a 	ldr.w	r6, [r5, #90]	; 0x5a
    4d02:	6046      	str	r6, [r0, #4]
    4d04:	f8d5 605e 	ldr.w	r6, [r5, #94]	; 0x5e
    4d08:	6086      	str	r6, [r0, #8]
    4d0a:	e7ed      	b.n	4ce8 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x24>
    4d0c:	2001      	movs	r0, #1
    4d0e:	bd78      	pop	{r3, r4, r5, r6, pc}
    4d10:	2000      	movs	r0, #0
    4d12:	bd78      	pop	{r3, r4, r5, r6, pc}
    4d14:	20000cba 	.word	0x20000cba

00004d18 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    4d18:	b510      	push	{r4, lr}
    4d1a:	4604      	mov	r4, r0
    4d1c:	f000 f956 	bl	4fcc <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    4d20:	b118      	cbz	r0, 4d2a <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    4d22:	21bd      	movs	r1, #189	; 0xbd
    4d24:	2027      	movs	r0, #39	; 0x27
    4d26:	f7ff f881 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d2a:	4803      	ldr	r0, [pc, #12]	; (4d38 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    4d2c:	2101      	movs	r1, #1
    4d2e:	f008 fe44 	bl	d9ba <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    4d32:	4802      	ldr	r0, [pc, #8]	; (4d3c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    4d34:	62c4      	str	r4, [r0, #44]	; 0x2c
    4d36:	bd10      	pop	{r4, pc}
    4d38:	20000c98 	.word	0x20000c98
    4d3c:	200000b0 	.word	0x200000b0

00004d40 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    4d40:	4901      	ldr	r1, [pc, #4]	; (4d48 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    4d42:	2001      	movs	r0, #1
    4d44:	7188      	strb	r0, [r1, #6]
    4d46:	4770      	bx	lr
    4d48:	200000b0 	.word	0x200000b0

00004d4c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    4d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4d50:	4d5f      	ldr	r5, [pc, #380]	; (4ed0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    4d52:	9c08      	ldr	r4, [sp, #32]
    4d54:	782e      	ldrb	r6, [r5, #0]
    4d56:	2e00      	cmp	r6, #0
    4d58:	d16b      	bne.n	4e32 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    4d5a:	2a00      	cmp	r2, #0
    4d5c:	d069      	beq.n	4e32 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    4d5e:	2b00      	cmp	r3, #0
    4d60:	d067      	beq.n	4e32 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    4d62:	2c00      	cmp	r4, #0
    4d64:	d065      	beq.n	4e32 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    4d66:	f105 0614 	add.w	r6, r5, #20
    4d6a:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
    4d6e:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    4d72:	2700      	movs	r7, #0
    4d74:	71af      	strb	r7, [r5, #6]
    4d76:	716f      	strb	r7, [r5, #5]
    4d78:	70ef      	strb	r7, [r5, #3]
    4d7a:	70af      	strb	r7, [r5, #2]
    4d7c:	712f      	strb	r7, [r5, #4]
    4d7e:	81af      	strh	r7, [r5, #12]
    4d80:	81ef      	strh	r7, [r5, #14]
    4d82:	f000 f95b 	bl	503c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4d86:	4606      	mov	r6, r0
    4d88:	f000 f952 	bl	5030 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    4d8c:	4604      	mov	r4, r0
    4d8e:	f006 f825 	bl	addc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    4d92:	f005 fcb9 	bl	a708 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    4d96:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    4d9a:	f006 f8a5 	bl	aee8 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    4d9e:	f104 0018 	add.w	r0, r4, #24
    4da2:	f006 f97f 	bl	b0a4 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    4da6:	6920      	ldr	r0, [r4, #16]
    4da8:	f006 f972 	bl	b090 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    4dac:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    4db0:	f006 f996 	bl	b0e0 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    4db4:	f105 0038 	add.w	r0, r5, #56	; 0x38
    4db8:	6840      	ldr	r0, [r0, #4]
    4dba:	f890 0174 	ldrb.w	r0, [r0, #372]	; 0x174
    4dbe:	b108      	cbz	r0, 4dc4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x78>
    4dc0:	f005 ff56 	bl	ac70 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    4dc4:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    4dc8:	2001      	movs	r0, #1
    4dca:	f005 fe81 	bl	aad0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    4dce:	2800      	cmp	r0, #0
    4dd0:	d076      	beq.n	4ec0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x174>
    4dd2:	4840      	ldr	r0, [pc, #256]	; (4ed4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    4dd4:	f005 fef8 	bl	abc8 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    4dd8:	8820      	ldrh	r0, [r4, #0]
    4dda:	f7ff fc57 	bl	468c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    4dde:	6328      	str	r0, [r5, #48]	; 0x30
    4de0:	8820      	ldrh	r0, [r4, #0]
    4de2:	f7ff fc3d 	bl	4660 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    4de6:	f106 0160 	add.w	r1, r6, #96	; 0x60
    4dea:	6368      	str	r0, [r5, #52]	; 0x34
    4dec:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 4ed8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>
    4df0:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    4df4:	f109 0808 	add.w	r8, r9, #8
    4df8:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    4dfc:	6f31      	ldr	r1, [r6, #112]	; 0x70
    4dfe:	f8c9 1021 	str.w	r1, [r9, #33]	; 0x21
    4e02:	6f71      	ldr	r1, [r6, #116]	; 0x74
    4e04:	f8c9 1025 	str.w	r1, [r9, #37]	; 0x25
    4e08:	f000 f98a 	bl	5120 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    4e0c:	4601      	mov	r1, r0
    4e0e:	8f20      	ldrh	r0, [r4, #56]	; 0x38
    4e10:	46ba      	mov	sl, r7
    4e12:	f008 fb6a 	bl	d4ea <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    4e16:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    4e18:	4281      	cmp	r1, r0
    4e1a:	d200      	bcs.n	4e1e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xd2>
    4e1c:	4608      	mov	r0, r1
    4e1e:	7228      	strb	r0, [r5, #8]
    4e20:	46a8      	mov	r8, r5
    4e22:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    4e26:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    4e28:	7cf7      	ldrb	r7, [r6, #19]
    4e2a:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
    4e2c:	2908      	cmp	r1, #8
    4e2e:	d104      	bne.n	4e3a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xee>
    4e30:	e002      	b.n	4e38 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    4e32:	f44f 718a 	mov.w	r1, #276	; 0x114
    4e36:	e047      	b.n	4ec8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17c>
    4e38:	2104      	movs	r1, #4
    4e3a:	f008 fb56 	bl	d4ea <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    4e3e:	b90f      	cbnz	r7, 4e44 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf8>
    4e40:	1d00      	adds	r0, r0, #4
    4e42:	b280      	uxth	r0, r0
    4e44:	4285      	cmp	r5, r0
    4e46:	d200      	bcs.n	4e4a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    4e48:	4628      	mov	r0, r5
    4e4a:	b2c5      	uxtb	r5, r0
    4e4c:	f888 5009 	strb.w	r5, [r8, #9]
    4e50:	7cf1      	ldrb	r1, [r6, #19]
    4e52:	2900      	cmp	r1, #0
    4e54:	d002      	beq.n	4e5c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x110>
    4e56:	bf00      	nop
    4e58:	f04f 0104 	mov.w	r1, #4
    4e5c:	4429      	add	r1, r5
    4e5e:	f888 1007 	strb.w	r1, [r8, #7]
    4e62:	4657      	mov	r7, sl
    4e64:	d016      	beq.n	4e94 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x148>
    4e66:	481c      	ldr	r0, [pc, #112]	; (4ed8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>)
    4e68:	f04f 0101 	mov.w	r1, #1
    4e6c:	f100 0008 	add.w	r0, r0, #8
    4e70:	7601      	strb	r1, [r0, #24]
    4e72:	e9d6 1216 	ldrd	r1, r2, [r6, #88]	; 0x58
    4e76:	e9c0 1204 	strd	r1, r2, [r0, #16]
    4e7a:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4e7e:	f008 fa3a 	bl	d2f6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    4e82:	4915      	ldr	r1, [pc, #84]	; (4ed8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>)
    4e84:	4603      	mov	r3, r0
    4e86:	462a      	mov	r2, r5
    4e88:	3108      	adds	r1, #8
    4e8a:	2001      	movs	r0, #1
    4e8c:	f005 fc86 	bl	a79c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    4e90:	f005 fcba 	bl	a808 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    4e94:	2001      	movs	r0, #1
    4e96:	f000 fb73 	bl	5580 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x598>
    4e9a:	4810      	ldr	r0, [pc, #64]	; (4edc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x190>)
    4e9c:	6800      	ldr	r0, [r0, #0]
    4e9e:	2803      	cmp	r0, #3
    4ea0:	d010      	beq.n	4ec4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x178>
    4ea2:	280b      	cmp	r0, #11
    4ea4:	d00e      	beq.n	4ec4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x178>
    4ea6:	4648      	mov	r0, r9
    4ea8:	f840 7f52 	str.w	r7, [r0, #82]!
    4eac:	6047      	str	r7, [r0, #4]
    4eae:	480a      	ldr	r0, [pc, #40]	; (4ed8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>)
    4eb0:	88b1      	ldrh	r1, [r6, #4]
    4eb2:	3052      	adds	r0, #82	; 0x52
    4eb4:	8041      	strh	r1, [r0, #2]
    4eb6:	8821      	ldrh	r1, [r4, #0]
    4eb8:	8001      	strh	r1, [r0, #0]
    4eba:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
    4ebe:	7101      	strb	r1, [r0, #4]
    4ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4ec4:	f240 11c1 	movw	r1, #449	; 0x1c1
    4ec8:	2027      	movs	r0, #39	; 0x27
    4eca:	f7fe ffaf 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ece:	0000      	.short	0x0000
    4ed0:	200000b0 	.word	0x200000b0
    4ed4:	00005784 	.word	0x00005784
    4ed8:	20000c68 	.word	0x20000c68
    4edc:	40001550 	.word	0x40001550

00004ee0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    4ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4ee4:	4605      	mov	r5, r0
    4ee6:	f000 f8a9 	bl	503c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4eea:	4e33      	ldr	r6, [pc, #204]	; (4fb8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd8>)
    4eec:	4604      	mov	r4, r0
    4eee:	6a70      	ldr	r0, [r6, #36]	; 0x24
    4ef0:	7847      	ldrb	r7, [r0, #1]
    4ef2:	b10d      	cbz	r5, 4ef8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x18>
    4ef4:	2d01      	cmp	r5, #1
    4ef6:	d103      	bne.n	4f00 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    4ef8:	6b71      	ldr	r1, [r6, #52]	; 0x34
    4efa:	f007 f97c 	bl	c1f6 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
    4efe:	7070      	strb	r0, [r6, #1]
    4f00:	7870      	ldrb	r0, [r6, #1]
    4f02:	f04f 0800 	mov.w	r8, #0
    4f06:	f04f 0901 	mov.w	r9, #1
    4f0a:	b150      	cbz	r0, 4f22 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x42>
    4f0c:	2801      	cmp	r0, #1
    4f0e:	d01a      	beq.n	4f46 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    4f10:	2802      	cmp	r0, #2
    4f12:	d034      	beq.n	4f7e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9e>
    4f14:	2803      	cmp	r0, #3
    4f16:	d048      	beq.n	4faa <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xca>
    4f18:	f240 4115 	movw	r1, #1045	; 0x415
    4f1c:	2027      	movs	r0, #39	; 0x27
    4f1e:	f7fe ff85 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f22:	2d01      	cmp	r5, #1
    4f24:	d032      	beq.n	4f8c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    4f26:	f000 f8e7 	bl	50f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>
    4f2a:	4639      	mov	r1, r7
    4f2c:	2201      	movs	r2, #1
    4f2e:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4f30:	f007 fd88 	bl	ca44 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4f34:	e028      	b.n	4f88 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    4f36:	bf00      	nop
    4f38:	f884 8008 	strb.w	r8, [r4, #8]
    4f3c:	e031      	b.n	4fa2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4f3e:	bf00      	nop
    4f40:	f884 9008 	strb.w	r9, [r4, #8]
    4f44:	e02d      	b.n	4fa2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4f46:	2d01      	cmp	r5, #1
    4f48:	d008      	beq.n	4f5c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x7c>
    4f4a:	f000 f8d5 	bl	50f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>
    4f4e:	4639      	mov	r1, r7
    4f50:	2200      	movs	r2, #0
    4f52:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4f54:	f007 fd76 	bl	ca44 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4f58:	2d02      	cmp	r5, #2
    4f5a:	d00b      	beq.n	4f74 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4f5c:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    4f60:	1c40      	adds	r0, r0, #1
    4f62:	f141 0100 	adc.w	r1, r1, #0
    4f66:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    4f6a:	7a20      	ldrb	r0, [r4, #8]
    4f6c:	2801      	cmp	r0, #1
    4f6e:	d003      	beq.n	4f78 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x98>
    4f70:	f884 9008 	strb.w	r9, [r4, #8]
    4f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4f78:	f884 8008 	strb.w	r8, [r4, #8]
    4f7c:	e7fa      	b.n	4f74 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4f7e:	2d01      	cmp	r5, #1
    4f80:	d004      	beq.n	4f8c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    4f82:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4f84:	f007 ff6f 	bl	ce66 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4f88:	2d02      	cmp	r5, #2
    4f8a:	d0f3      	beq.n	4f74 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4f8c:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    4f90:	1c40      	adds	r0, r0, #1
    4f92:	f141 0100 	adc.w	r1, r1, #0
    4f96:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    4f9a:	7a20      	ldrb	r0, [r4, #8]
    4f9c:	2801      	cmp	r0, #1
    4f9e:	d1cf      	bne.n	4f40 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x60>
    4fa0:	e7ca      	b.n	4f38 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x58>
    4fa2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4fa6:	f001 b8cd 	b.w	6144 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    4faa:	2d01      	cmp	r5, #1
    4fac:	d0e2      	beq.n	4f74 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4fae:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4fb0:	f007 ff59 	bl	ce66 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4fb4:	e7f5      	b.n	4fa2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4fb6:	0000      	.short	0x0000
    4fb8:	200000b0 	.word	0x200000b0

00004fbc <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
    4fbc:	4802      	ldr	r0, [pc, #8]	; (4fc8 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
    4fbe:	89c0      	ldrh	r0, [r0, #14]
    4fc0:	f3c0 2080 	ubfx	r0, r0, #10, #1
    4fc4:	4770      	bx	lr
    4fc6:	0000      	.short	0x0000
    4fc8:	200000b0 	.word	0x200000b0

00004fcc <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    4fcc:	4804      	ldr	r0, [pc, #16]	; (4fe0 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    4fce:	7800      	ldrb	r0, [r0, #0]
    4fd0:	b108      	cbz	r0, 4fd6 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    4fd2:	200c      	movs	r0, #12
    4fd4:	4770      	bx	lr
    4fd6:	4903      	ldr	r1, [pc, #12]	; (4fe4 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    4fd8:	2000      	movs	r0, #0
    4fda:	7448      	strb	r0, [r1, #17]
    4fdc:	4770      	bx	lr
    4fde:	0000      	.short	0x0000
    4fe0:	200000b0 	.word	0x200000b0
    4fe4:	20000cba 	.word	0x20000cba

00004fe8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    4fe8:	480c      	ldr	r0, [pc, #48]	; (501c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>)
    4fea:	b510      	push	{r4, lr}
    4fec:	7801      	ldrb	r1, [r0, #0]
    4fee:	b149      	cbz	r1, 5004 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    4ff0:	f100 0138 	add.w	r1, r0, #56	; 0x38
    4ff4:	7800      	ldrb	r0, [r0, #0]
    4ff6:	2802      	cmp	r0, #2
    4ff8:	d008      	beq.n	500c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24>
    4ffa:	f240 11dd 	movw	r1, #477	; 0x1dd
    4ffe:	2027      	movs	r0, #39	; 0x27
    5000:	f7fe ff14 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5008:	f000 b9d8 	b.w	53bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    500c:	6848      	ldr	r0, [r1, #4]
    500e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    5012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5016:	f005 bddf 	b.w	abd8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    501a:	0000      	.short	0x0000
    501c:	200000b0 	.word	0x200000b0
    5020:	4a02      	ldr	r2, [pc, #8]	; (502c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44>)
    5022:	8993      	ldrh	r3, [r2, #12]
    5024:	4303      	orrs	r3, r0
    5026:	8193      	strh	r3, [r2, #12]
    5028:	6952      	ldr	r2, [r2, #20]
    502a:	4710      	bx	r2
    502c:	200000b0 	.word	0x200000b0
    5030:	4801      	ldr	r0, [pc, #4]	; (5038 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>)
    5032:	6840      	ldr	r0, [r0, #4]
    5034:	4770      	bx	lr
    5036:	0000      	.short	0x0000
    5038:	200000e8 	.word	0x200000e8
    503c:	4801      	ldr	r0, [pc, #4]	; (5044 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    503e:	6840      	ldr	r0, [r0, #4]
    5040:	3070      	adds	r0, #112	; 0x70
    5042:	4770      	bx	lr
    5044:	200000e8 	.word	0x200000e8
    5048:	4a01      	ldr	r2, [pc, #4]	; (5050 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    504a:	2100      	movs	r1, #0
    504c:	6952      	ldr	r2, [r2, #20]
    504e:	4710      	bx	r2
    5050:	200000b0 	.word	0x200000b0
    5054:	b570      	push	{r4, r5, r6, lr}
    5056:	f7ff fff1 	bl	503c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    505a:	4604      	mov	r4, r0
    505c:	f7ff ffe8 	bl	5030 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5060:	4605      	mov	r5, r0
    5062:	4621      	mov	r1, r4
    5064:	f008 fac4 	bl	d5f0 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    5068:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
    506c:	2901      	cmp	r1, #1
    506e:	d114      	bne.n	509a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb2>
    5070:	2800      	cmp	r0, #0
    5072:	d012      	beq.n	509a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb2>
    5074:	4809      	ldr	r0, [pc, #36]	; (509c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>)
    5076:	6842      	ldr	r2, [r0, #4]
    5078:	8828      	ldrh	r0, [r5, #0]
    507a:	f8a2 01f6 	strh.w	r0, [r2, #502]	; 0x1f6
    507e:	7a60      	ldrb	r0, [r4, #9]
    5080:	f882 01f8 	strb.w	r0, [r2, #504]	; 0x1f8
    5084:	7aa0      	ldrb	r0, [r4, #10]
    5086:	f882 01f9 	strb.w	r0, [r2, #505]	; 0x1f9
    508a:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
    508e:	2001      	movs	r0, #1
    5090:	7010      	strb	r0, [r2, #0]
    5092:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5096:	f001 b855 	b.w	6144 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    509a:	bd70      	pop	{r4, r5, r6, pc}
    509c:	200000e8 	.word	0x200000e8
    50a0:	b570      	push	{r4, r5, r6, lr}
    50a2:	4605      	mov	r5, r0
    50a4:	2901      	cmp	r1, #1
    50a6:	d818      	bhi.n	50da <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    50a8:	4c12      	ldr	r4, [pc, #72]	; (50f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>)
    50aa:	69a1      	ldr	r1, [r4, #24]
    50ac:	4788      	blx	r1
    50ae:	b1a0      	cbz	r0, 50da <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    50b0:	7960      	ldrb	r0, [r4, #5]
    50b2:	b990      	cbnz	r0, 50da <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    50b4:	b9e5      	cbnz	r5, 50f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    50b6:	f104 0010 	add.w	r0, r4, #16
    50ba:	7801      	ldrb	r1, [r0, #0]
    50bc:	06c8      	lsls	r0, r1, #27
    50be:	d405      	bmi.n	50cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    50c0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    50c2:	7800      	ldrb	r0, [r0, #0]
    50c4:	06c0      	lsls	r0, r0, #27
    50c6:	d401      	bmi.n	50cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    50c8:	2001      	movs	r0, #1
    50ca:	e000      	b.n	50ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe6>
    50cc:	2000      	movs	r0, #0
    50ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    50d0:	b92a      	cbnz	r2, 50de <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    50d2:	8962      	ldrh	r2, [r4, #10]
    50d4:	b11a      	cbz	r2, 50de <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    50d6:	06c9      	lsls	r1, r1, #27
    50d8:	d401      	bmi.n	50de <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    50da:	2001      	movs	r0, #1
    50dc:	bd70      	pop	{r4, r5, r6, pc}
    50de:	89a1      	ldrh	r1, [r4, #12]
    50e0:	078a      	lsls	r2, r1, #30
    50e2:	d503      	bpl.n	50ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
    50e4:	6a22      	ldr	r2, [r4, #32]
    50e6:	78d2      	ldrb	r2, [r2, #3]
    50e8:	2a02      	cmp	r2, #2
    50ea:	d001      	beq.n	50f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    50ec:	4308      	orrs	r0, r1
    50ee:	d1f4      	bne.n	50da <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    50f0:	2000      	movs	r0, #0
    50f2:	bd70      	pop	{r4, r5, r6, pc}
    50f4:	200000b0 	.word	0x200000b0
    50f8:	b510      	push	{r4, lr}
    50fa:	4c08      	ldr	r4, [pc, #32]	; (511c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>)
    50fc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    50fe:	b138      	cbz	r0, 5110 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x128>
    5100:	8962      	ldrh	r2, [r4, #10]
    5102:	6a61      	ldr	r1, [r4, #36]	; 0x24
    5104:	1cd2      	adds	r2, r2, #3
    5106:	f006 ff00 	bl	bf0a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    510a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    510c:	6260      	str	r0, [r4, #36]	; 0x24
    510e:	bd10      	pop	{r4, pc}
    5110:	f240 415b 	movw	r1, #1115	; 0x45b
    5114:	2027      	movs	r0, #39	; 0x27
    5116:	f7fe fe89 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    511a:	0000      	.short	0x0000
    511c:	200000b0 	.word	0x200000b0
    5120:	b510      	push	{r4, lr}
    5122:	f7ff ff85 	bl	5030 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5126:	4604      	mov	r4, r0
    5128:	f7ff ff88 	bl	503c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    512c:	4601      	mov	r1, r0
    512e:	7b42      	ldrb	r2, [r0, #13]
    5130:	4815      	ldr	r0, [pc, #84]	; (5188 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a0>)
    5132:	2a24      	cmp	r2, #36	; 0x24
    5134:	d00e      	beq.n	5154 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    5136:	7b89      	ldrb	r1, [r1, #14]
    5138:	2924      	cmp	r1, #36	; 0x24
    513a:	d00b      	beq.n	5154 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    513c:	2a1f      	cmp	r2, #31
    513e:	d00d      	beq.n	515c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x174>
    5140:	2a20      	cmp	r2, #32
    5142:	d00b      	beq.n	515c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x174>
    5144:	2922      	cmp	r1, #34	; 0x22
    5146:	d00f      	beq.n	5168 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>
    5148:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    514c:	2804      	cmp	r0, #4
    514e:	d100      	bne.n	5152 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16a>
    5150:	2008      	movs	r0, #8
    5152:	bd10      	pop	{r4, pc}
    5154:	6840      	ldr	r0, [r0, #4]
    5156:	f890 1196 	ldrb.w	r1, [r0, #406]	; 0x196
    515a:	e00e      	b.n	517a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x192>
    515c:	2922      	cmp	r1, #34	; 0x22
    515e:	d003      	beq.n	5168 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>
    5160:	6840      	ldr	r0, [r0, #4]
    5162:	f890 01b0 	ldrb.w	r0, [r0, #432]	; 0x1b0
    5166:	e005      	b.n	5174 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18c>
    5168:	6841      	ldr	r1, [r0, #4]
    516a:	f891 01b0 	ldrb.w	r0, [r1, #432]	; 0x1b0
    516e:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    5172:	4008      	ands	r0, r1
    5174:	f008 f8b5 	bl	d2e2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    5178:	4601      	mov	r1, r0
    517a:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    517e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5182:	f008 b8c6 	b.w	d312 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    5186:	0000      	.short	0x0000
    5188:	200000e8 	.word	0x200000e8
    518c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5190:	4688      	mov	r8, r1
    5192:	4607      	mov	r7, r0
    5194:	f7ff ff52 	bl	503c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5198:	4c57      	ldr	r4, [pc, #348]	; (52f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x310>)
    519a:	2600      	movs	r6, #0
    519c:	4605      	mov	r5, r0
    519e:	f88d 6000 	strb.w	r6, [sp]
    51a2:	7820      	ldrb	r0, [r4, #0]
    51a4:	2802      	cmp	r0, #2
    51a6:	d004      	beq.n	51b2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ca>
    51a8:	f240 41ba 	movw	r1, #1210	; 0x4ba
    51ac:	2027      	movs	r0, #39	; 0x27
    51ae:	f7fe fe3d 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    51b2:	7ba0      	ldrb	r0, [r4, #14]
    51b4:	0640      	lsls	r0, r0, #25
    51b6:	d406      	bmi.n	51c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1de>
    51b8:	2040      	movs	r0, #64	; 0x40
    51ba:	f7ff ff45 	bl	5048 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    51be:	89e0      	ldrh	r0, [r4, #14]
    51c0:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    51c4:	81e0      	strh	r0, [r4, #14]
    51c6:	7ce8      	ldrb	r0, [r5, #19]
    51c8:	b3c7      	cbz	r7, 523c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x254>
    51ca:	f005 fb4d 	bl	a868 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    51ce:	f005 fb31 	bl	a834 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    51d2:	b968      	cbnz	r0, 51f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    51d4:	7ce8      	ldrb	r0, [r5, #19]
    51d6:	b158      	cbz	r0, 51f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    51d8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    51da:	7841      	ldrb	r1, [r0, #1]
    51dc:	b141      	cbz	r1, 51f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    51de:	7800      	ldrb	r0, [r0, #0]
    51e0:	7a29      	ldrb	r1, [r5, #8]
    51e2:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    51e6:	4288      	cmp	r0, r1
    51e8:	d102      	bne.n	51f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    51ea:	2001      	movs	r0, #1
    51ec:	70a0      	strb	r0, [r4, #2]
    51ee:	e063      	b.n	52b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d0>
    51f0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    51f2:	7841      	ldrb	r1, [r0, #1]
    51f4:	8161      	strh	r1, [r4, #10]
    51f6:	b121      	cbz	r1, 5202 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21a>
    51f8:	6b60      	ldr	r0, [r4, #52]	; 0x34
    51fa:	f007 fe01 	bl	ce00 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    51fe:	62a0      	str	r0, [r4, #40]	; 0x28
    5200:	e000      	b.n	5204 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21c>
    5202:	62a6      	str	r6, [r4, #40]	; 0x28
    5204:	89e0      	ldrh	r0, [r4, #14]
    5206:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    520a:	81e0      	strh	r0, [r4, #14]
    520c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    520e:	79e9      	ldrb	r1, [r5, #7]
    5210:	7800      	ldrb	r0, [r0, #0]
    5212:	f3c0 0080 	ubfx	r0, r0, #2, #1
    5216:	4288      	cmp	r0, r1
    5218:	d005      	beq.n	5226 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23e>
    521a:	f000 f963 	bl	54e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4fc>
    521e:	89e0      	ldrh	r0, [r4, #14]
    5220:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    5224:	81e0      	strh	r0, [r4, #14]
    5226:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5228:	7a29      	ldrb	r1, [r5, #8]
    522a:	7800      	ldrb	r0, [r0, #0]
    522c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5230:	4288      	cmp	r0, r1
    5232:	d10e      	bne.n	5252 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26a>
    5234:	4668      	mov	r0, sp
    5236:	f000 f917 	bl	5468 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x480>
    523a:	e00a      	b.n	5252 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26a>
    523c:	e7ff      	b.n	523e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x256>
    523e:	b108      	cbz	r0, 5244 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x25c>
    5240:	f005 fb0c 	bl	a85c <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    5244:	78e0      	ldrb	r0, [r4, #3]
    5246:	1c40      	adds	r0, r0, #1
    5248:	70e0      	strb	r0, [r4, #3]
    524a:	89e0      	ldrh	r0, [r4, #14]
    524c:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    5250:	81e0      	strh	r0, [r4, #14]
    5252:	7ca8      	ldrb	r0, [r5, #18]
    5254:	b198      	cbz	r0, 527e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x296>
    5256:	f7ff feeb 	bl	5030 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    525a:	4928      	ldr	r1, [pc, #160]	; (52fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    525c:	760e      	strb	r6, [r1, #24]
    525e:	e9d5 2314 	ldrd	r2, r3, [r5, #80]	; 0x50
    5262:	e9c1 2304 	strd	r2, r3, [r1, #16]
    5266:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    526a:	f008 f844 	bl	d2f6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    526e:	4603      	mov	r3, r0
    5270:	22fb      	movs	r2, #251	; 0xfb
    5272:	4922      	ldr	r1, [pc, #136]	; (52fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    5274:	2000      	movs	r0, #0
    5276:	f005 fa91 	bl	a79c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    527a:	f005 fac5 	bl	a808 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    527e:	4d1f      	ldr	r5, [pc, #124]	; (52fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    5280:	354a      	adds	r5, #74	; 0x4a
    5282:	f1b8 0f00 	cmp.w	r8, #0
    5286:	d104      	bne.n	5292 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2aa>
    5288:	78e1      	ldrb	r1, [r4, #3]
    528a:	2001      	movs	r0, #1
    528c:	f7ff ff08 	bl	50a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    5290:	b1b0      	cbz	r0, 52c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d8>
    5292:	f005 fed9 	bl	b048 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    5296:	f89d 0000 	ldrb.w	r0, [sp]
    529a:	b110      	cbz	r0, 52a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    529c:	2000      	movs	r0, #0
    529e:	f7ff fe1f 	bl	4ee0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    52a2:	b137      	cbz	r7, 52b2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ca>
    52a4:	70e6      	strb	r6, [r4, #3]
    52a6:	7968      	ldrb	r0, [r5, #5]
    52a8:	1c40      	adds	r0, r0, #1
    52aa:	7168      	strb	r0, [r5, #5]
    52ac:	f7ff fed2 	bl	5054 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    52b0:	e002      	b.n	52b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d0>
    52b2:	79a8      	ldrb	r0, [r5, #6]
    52b4:	1c40      	adds	r0, r0, #1
    52b6:	71a8      	strb	r0, [r5, #6]
    52b8:	f000 f880 	bl	53bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    52bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    52c0:	f89d 0000 	ldrb.w	r0, [sp]
    52c4:	b110      	cbz	r0, 52cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e4>
    52c6:	2001      	movs	r0, #1
    52c8:	f7ff fe0a 	bl	4ee0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    52cc:	2000      	movs	r0, #0
    52ce:	f000 f995 	bl	55fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x614>
    52d2:	f89d 0000 	ldrb.w	r0, [sp]
    52d6:	b110      	cbz	r0, 52de <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f6>
    52d8:	2002      	movs	r0, #2
    52da:	f7ff fe01 	bl	4ee0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    52de:	b137      	cbz	r7, 52ee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x306>
    52e0:	70e6      	strb	r6, [r4, #3]
    52e2:	7968      	ldrb	r0, [r5, #5]
    52e4:	1c40      	adds	r0, r0, #1
    52e6:	7168      	strb	r0, [r5, #5]
    52e8:	f7ff feb4 	bl	5054 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    52ec:	e7e6      	b.n	52bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d4>
    52ee:	79a8      	ldrb	r0, [r5, #6]
    52f0:	1c40      	adds	r0, r0, #1
    52f2:	71a8      	strb	r0, [r5, #6]
    52f4:	e7e2      	b.n	52bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d4>
    52f6:	0000      	.short	0x0000
    52f8:	200000b0 	.word	0x200000b0
    52fc:	20000c70 	.word	0x20000c70
    5300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5304:	460f      	mov	r7, r1
    5306:	4680      	mov	r8, r0
    5308:	f7ff fe98 	bl	503c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    530c:	4d29      	ldr	r5, [pc, #164]	; (53b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3cc>)
    530e:	4604      	mov	r4, r0
    5310:	7828      	ldrb	r0, [r5, #0]
    5312:	2801      	cmp	r0, #1
    5314:	d004      	beq.n	5320 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x338>
    5316:	f240 416a 	movw	r1, #1130	; 0x46a
    531a:	2027      	movs	r0, #39	; 0x27
    531c:	f7fe fd86 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5320:	7861      	ldrb	r1, [r4, #1]
    5322:	2000      	movs	r0, #0
    5324:	2601      	movs	r6, #1
    5326:	b129      	cbz	r1, 5334 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    5328:	7060      	strb	r0, [r4, #1]
    532a:	2100      	movs	r1, #0
    532c:	2004      	movs	r0, #4
    532e:	f7ff fe77 	bl	5020 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5332:	70e6      	strb	r6, [r4, #3]
    5334:	6a29      	ldr	r1, [r5, #32]
    5336:	7808      	ldrb	r0, [r1, #0]
    5338:	43c0      	mvns	r0, r0
    533a:	0780      	lsls	r0, r0, #30
    533c:	d109      	bne.n	5352 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x36a>
    533e:	79a0      	ldrb	r0, [r4, #6]
    5340:	bb88      	cbnz	r0, 53a6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3be>
    5342:	2002      	movs	r0, #2
    5344:	f7ff fe6c 	bl	5020 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5348:	6a28      	ldr	r0, [r5, #32]
    534a:	7800      	ldrb	r0, [r0, #0]
    534c:	43c0      	mvns	r0, r0
    534e:	0780      	lsls	r0, r0, #30
    5350:	d029      	beq.n	53a6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3be>
    5352:	6a28      	ldr	r0, [r5, #32]
    5354:	7840      	ldrb	r0, [r0, #1]
    5356:	b110      	cbz	r0, 535e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x376>
    5358:	2002      	movs	r0, #2
    535a:	71a0      	strb	r0, [r4, #6]
    535c:	e000      	b.n	5360 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x378>
    535e:	71a6      	strb	r6, [r4, #6]
    5360:	7ce0      	ldrb	r0, [r4, #19]
    5362:	b1a0      	cbz	r0, 538e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a6>
    5364:	f7ff fe64 	bl	5030 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5368:	4913      	ldr	r1, [pc, #76]	; (53b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d0>)
    536a:	7a6d      	ldrb	r5, [r5, #9]
    536c:	760e      	strb	r6, [r1, #24]
    536e:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
    5372:	e9c1 2304 	strd	r2, r3, [r1, #16]
    5376:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    537a:	f007 ffbc 	bl	d2f6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    537e:	4603      	mov	r3, r0
    5380:	462a      	mov	r2, r5
    5382:	490d      	ldr	r1, [pc, #52]	; (53b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d0>)
    5384:	2001      	movs	r0, #1
    5386:	f005 fa09 	bl	a79c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    538a:	f005 fa3d 	bl	a808 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    538e:	ea37 0708 	bics.w	r7, r7, r8
    5392:	d004      	beq.n	539e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b6>
    5394:	2100      	movs	r1, #0
    5396:	4608      	mov	r0, r1
    5398:	f7ff fe82 	bl	50a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    539c:	b128      	cbz	r0, 53aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3c2>
    539e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    53a2:	f000 b80b 	b.w	53bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    53a6:	2003      	movs	r0, #3
    53a8:	e7d7      	b.n	535a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x372>
    53aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    53ae:	2000      	movs	r0, #0
    53b0:	f000 b8e6 	b.w	5580 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x598>
    53b4:	200000b0 	.word	0x200000b0
    53b8:	20000c70 	.word	0x20000c70
    53bc:	b510      	push	{r4, lr}
    53be:	f005 faeb 	bl	a998 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    53c2:	f005 f9a1 	bl	a708 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    53c6:	4c0d      	ldr	r4, [pc, #52]	; (53fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>)
    53c8:	89e0      	ldrh	r0, [r4, #14]
    53ca:	f7ff fe3d 	bl	5048 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    53ce:	69e2      	ldr	r2, [r4, #28]
    53d0:	7961      	ldrb	r1, [r4, #5]
    53d2:	78a0      	ldrb	r0, [r4, #2]
    53d4:	4790      	blx	r2
    53d6:	480a      	ldr	r0, [pc, #40]	; (5400 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    53d8:	7c40      	ldrb	r0, [r0, #17]
    53da:	b158      	cbz	r0, 53f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40c>
    53dc:	4808      	ldr	r0, [pc, #32]	; (5400 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    53de:	3852      	subs	r0, #82	; 0x52
    53e0:	f850 1f52 	ldr.w	r1, [r0, #82]!
    53e4:	6081      	str	r1, [r0, #8]
    53e6:	6841      	ldr	r1, [r0, #4]
    53e8:	60c1      	str	r1, [r0, #12]
    53ea:	4805      	ldr	r0, [pc, #20]	; (5400 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    53ec:	2101      	movs	r1, #1
    53ee:	7401      	strb	r1, [r0, #16]
    53f0:	f000 fea8 	bl	6144 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    53f4:	2000      	movs	r0, #0
    53f6:	7020      	strb	r0, [r4, #0]
    53f8:	bd10      	pop	{r4, pc}
    53fa:	0000      	.short	0x0000
    53fc:	200000b0 	.word	0x200000b0
    5400:	20000cba 	.word	0x20000cba
    5404:	4808      	ldr	r0, [pc, #32]	; (5428 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x440>)
    5406:	b510      	push	{r4, lr}
    5408:	7800      	ldrb	r0, [r0, #0]
    540a:	2802      	cmp	r0, #2
    540c:	d004      	beq.n	5418 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x430>
    540e:	f240 2111 	movw	r1, #529	; 0x211
    5412:	2027      	movs	r0, #39	; 0x27
    5414:	f7fe fd0a 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5418:	4904      	ldr	r1, [pc, #16]	; (542c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>)
    541a:	2001      	movs	r0, #1
    541c:	71c8      	strb	r0, [r1, #7]
    541e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5422:	f7ff bfcb 	b.w	53bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    5426:	0000      	.short	0x0000
    5428:	200000b0 	.word	0x200000b0
    542c:	20000cba 	.word	0x20000cba
    5430:	b430      	push	{r4, r5}
    5432:	4b0c      	ldr	r3, [pc, #48]	; (5464 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x47c>)
    5434:	b942      	cbnz	r2, 5448 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>
    5436:	79da      	ldrb	r2, [r3, #7]
    5438:	2aff      	cmp	r2, #255	; 0xff
    543a:	d105      	bne.n	5448 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>
    543c:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    5440:	f890 406a 	ldrb.w	r4, [r0, #106]	; 0x6a
    5444:	42a2      	cmp	r2, r4
    5446:	d00b      	beq.n	5460 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x478>
    5448:	b131      	cbz	r1, 5458 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x470>
    544a:	79da      	ldrb	r2, [r3, #7]
    544c:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    5450:	bc30      	pop	{r4, r5}
    5452:	4610      	mov	r0, r2
    5454:	f005 be30 	b.w	b0b8 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    5458:	22ff      	movs	r2, #255	; 0xff
    545a:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
    545e:	e7f7      	b.n	5450 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>
    5460:	bc30      	pop	{r4, r5}
    5462:	4770      	bx	lr
    5464:	200000b0 	.word	0x200000b0
    5468:	b570      	push	{r4, r5, r6, lr}
    546a:	4606      	mov	r6, r0
    546c:	f7ff fde6 	bl	503c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5470:	4a1b      	ldr	r2, [pc, #108]	; (54e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f8>)
    5472:	4604      	mov	r4, r0
    5474:	2501      	movs	r5, #1
    5476:	6a51      	ldr	r1, [r2, #36]	; 0x24
    5478:	7808      	ldrb	r0, [r1, #0]
    547a:	f000 0003 	and.w	r0, r0, #3
    547e:	2801      	cmp	r0, #1
    5480:	d00c      	beq.n	549c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b4>
    5482:	2802      	cmp	r0, #2
    5484:	d00a      	beq.n	549c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b4>
    5486:	2803      	cmp	r0, #3
    5488:	d121      	bne.n	54ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e6>
    548a:	7065      	strb	r5, [r4, #1]
    548c:	89d0      	ldrh	r0, [r2, #14]
    548e:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    5492:	81d0      	strh	r0, [r2, #14]
    5494:	2001      	movs	r0, #1
    5496:	f7ff fdc3 	bl	5020 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    549a:	e018      	b.n	54ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e6>
    549c:	7848      	ldrb	r0, [r1, #1]
    549e:	b1b0      	cbz	r0, 54ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e6>
    54a0:	89d1      	ldrh	r1, [r2, #14]
    54a2:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    54a6:	81d1      	strh	r1, [r2, #14]
    54a8:	6a91      	ldr	r1, [r2, #40]	; 0x28
    54aa:	2900      	cmp	r1, #0
    54ac:	d009      	beq.n	54c2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4da>
    54ae:	28fb      	cmp	r0, #251	; 0xfb
    54b0:	d808      	bhi.n	54c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4dc>
    54b2:	7990      	ldrb	r0, [r2, #6]
    54b4:	b120      	cbz	r0, 54c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d8>
    54b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    54ba:	2020      	movs	r0, #32
    54bc:	f7ff bdc4 	b.w	5048 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    54c0:	7035      	strb	r5, [r6, #0]
    54c2:	bd70      	pop	{r4, r5, r6, pc}
    54c4:	7950      	ldrb	r0, [r2, #5]
    54c6:	f040 0010 	orr.w	r0, r0, #16
    54ca:	7150      	strb	r0, [r2, #5]
    54cc:	bd70      	pop	{r4, r5, r6, pc}
    54ce:	7a20      	ldrb	r0, [r4, #8]
    54d0:	2801      	cmp	r0, #1
    54d2:	d001      	beq.n	54d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f0>
    54d4:	7225      	strb	r5, [r4, #8]
    54d6:	bd70      	pop	{r4, r5, r6, pc}
    54d8:	2000      	movs	r0, #0
    54da:	7220      	strb	r0, [r4, #8]
    54dc:	bd70      	pop	{r4, r5, r6, pc}
    54de:	0000      	.short	0x0000
    54e0:	200000b0 	.word	0x200000b0
    54e4:	b570      	push	{r4, r5, r6, lr}
    54e6:	f7ff fda9 	bl	503c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    54ea:	4604      	mov	r4, r0
    54ec:	7980      	ldrb	r0, [r0, #6]
    54ee:	2800      	cmp	r0, #0
    54f0:	d02e      	beq.n	5550 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x568>
    54f2:	2802      	cmp	r0, #2
    54f4:	d10d      	bne.n	5512 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52a>
    54f6:	481c      	ldr	r0, [pc, #112]	; (5568 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x580>)
    54f8:	6b00      	ldr	r0, [r0, #48]	; 0x30
    54fa:	f007 fa7c 	bl	c9f6 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    54fe:	b340      	cbz	r0, 5552 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x56a>
    5500:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
    5504:	1c40      	adds	r0, r0, #1
    5506:	f141 0100 	adc.w	r1, r1, #0
    550a:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    550e:	f000 fe19 	bl	6144 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5512:	2500      	movs	r5, #0
    5514:	71a5      	strb	r5, [r4, #6]
    5516:	78e0      	ldrb	r0, [r4, #3]
    5518:	b120      	cbz	r0, 5524 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x53c>
    551a:	70e5      	strb	r5, [r4, #3]
    551c:	2100      	movs	r1, #0
    551e:	2010      	movs	r0, #16
    5520:	f7ff fd7e 	bl	5020 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5524:	78a0      	ldrb	r0, [r4, #2]
    5526:	b170      	cbz	r0, 5546 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x55e>
    5528:	70a5      	strb	r5, [r4, #2]
    552a:	f7ff fb07 	bl	4b3c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    552e:	b198      	cbz	r0, 5558 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x570>
    5530:	2100      	movs	r1, #0
    5532:	2008      	movs	r0, #8
    5534:	f7ff fd74 	bl	5020 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5538:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
    553c:	1c40      	adds	r0, r0, #1
    553e:	f141 0100 	adc.w	r1, r1, #0
    5542:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    5546:	79e0      	ldrb	r0, [r4, #7]
    5548:	2801      	cmp	r0, #1
    554a:	d00a      	beq.n	5562 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x57a>
    554c:	2001      	movs	r0, #1
    554e:	71e0      	strb	r0, [r4, #7]
    5550:	bd70      	pop	{r4, r5, r6, pc}
    5552:	f44f 716c 	mov.w	r1, #944	; 0x3b0
    5556:	e001      	b.n	555c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x574>
    5558:	f44f 7172 	mov.w	r1, #968	; 0x3c8
    555c:	2027      	movs	r0, #39	; 0x27
    555e:	f7fe fc65 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5562:	71e5      	strb	r5, [r4, #7]
    5564:	bd70      	pop	{r4, r5, r6, pc}
    5566:	0000      	.short	0x0000
    5568:	200000b0 	.word	0x200000b0
    556c:	4803      	ldr	r0, [pc, #12]	; (557c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x594>)
    556e:	7800      	ldrb	r0, [r0, #0]
    5570:	2800      	cmp	r0, #0
    5572:	d001      	beq.n	5578 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x590>
    5574:	f7ff bf22 	b.w	53bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    5578:	4770      	bx	lr
    557a:	0000      	.short	0x0000
    557c:	200000b0 	.word	0x200000b0
    5580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5584:	4606      	mov	r6, r0
    5586:	f7ff fd53 	bl	5030 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    558a:	4680      	mov	r8, r0
    558c:	f7ff fd56 	bl	503c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5590:	4c17      	ldr	r4, [pc, #92]	; (55f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x608>)
    5592:	4605      	mov	r5, r0
    5594:	4632      	mov	r2, r6
    5596:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5598:	6260      	str	r0, [r4, #36]	; 0x24
    559a:	2101      	movs	r1, #1
    559c:	4640      	mov	r0, r8
    559e:	f7ff ff47 	bl	5430 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>
    55a2:	7ce8      	ldrb	r0, [r5, #19]
    55a4:	2700      	movs	r7, #0
    55a6:	b180      	cbz	r0, 55ca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e2>
    55a8:	4812      	ldr	r0, [pc, #72]	; (55f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60c>)
    55aa:	f005 fca3 	bl	aef4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    55ae:	4812      	ldr	r0, [pc, #72]	; (55f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x610>)
    55b0:	2101      	movs	r1, #1
    55b2:	7601      	strb	r1, [r0, #24]
    55b4:	e9d5 1216 	ldrd	r1, r2, [r5, #88]	; 0x58
    55b8:	e9c0 1204 	strd	r1, r2, [r0, #16]
    55bc:	490d      	ldr	r1, [pc, #52]	; (55f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60c>)
    55be:	6a60      	ldr	r0, [r4, #36]	; 0x24
    55c0:	f005 f874 	bl	a6ac <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    55c4:	f005 f886 	bl	a6d4 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>
    55c8:	e004      	b.n	55d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ec>
    55ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
    55cc:	f005 fc92 	bl	aef4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    55d0:	f005 f89a 	bl	a708 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    55d4:	b916      	cbnz	r6, 55dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5f4>
    55d6:	4638      	mov	r0, r7
    55d8:	f005 fb22 	bl	ac20 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    55dc:	2100      	movs	r1, #0
    55de:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    55e2:	4608      	mov	r0, r1
    55e4:	f005 fd12 	bl	b00c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    55e8:	2002      	movs	r0, #2
    55ea:	7020      	strb	r0, [r4, #0]
    55ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    55f0:	200000b0 	.word	0x200000b0
    55f4:	20000b68 	.word	0x20000b68
    55f8:	20000c70 	.word	0x20000c70
    55fc:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5600:	4604      	mov	r4, r0
    5602:	f7ff fd1b 	bl	503c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5606:	4605      	mov	r5, r0
    5608:	f7ff fd12 	bl	5030 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    560c:	4606      	mov	r6, r0
    560e:	f8df 9168 	ldr.w	r9, [pc, #360]	; 5778 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x790>
    5612:	4622      	mov	r2, r4
    5614:	2100      	movs	r1, #0
    5616:	f7ff ff0b 	bl	5430 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>
    561a:	79a8      	ldrb	r0, [r5, #6]
    561c:	2701      	movs	r7, #1
    561e:	f04f 0800 	mov.w	r8, #0
    5622:	f1a9 0420 	sub.w	r4, r9, #32
    5626:	b140      	cbz	r0, 563a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x652>
    5628:	2801      	cmp	r0, #1
    562a:	d01f      	beq.n	566c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x684>
    562c:	2802      	cmp	r0, #2
    562e:	d030      	beq.n	5692 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6aa>
    5630:	2803      	cmp	r0, #3
    5632:	d03c      	beq.n	56ae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c6>
    5634:	f240 21ae 	movw	r1, #686	; 0x2ae
    5638:	e058      	b.n	56ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    563a:	7a20      	ldrb	r0, [r4, #8]
    563c:	2150      	movs	r1, #80	; 0x50
    563e:	f8ad 0004 	strh.w	r0, [sp, #4]
    5642:	5388      	strh	r0, [r1, r6]
    5644:	4648      	mov	r0, r9
    5646:	f7ff faa3 	bl	4b90 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    564a:	b128      	cbz	r0, 5658 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x670>
    564c:	2080      	movs	r0, #128	; 0x80
    564e:	6a21      	ldr	r1, [r4, #32]
    5650:	f7ff fce6 	bl	5020 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5654:	70af      	strb	r7, [r5, #2]
    5656:	e02e      	b.n	56b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
    5658:	466a      	mov	r2, sp
    565a:	a901      	add	r1, sp, #4
    565c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    565e:	f007 fe62 	bl	d326 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    5662:	6220      	str	r0, [r4, #32]
    5664:	b110      	cbz	r0, 566c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x684>
    5666:	f895 1043 	ldrb.w	r1, [r5, #67]	; 0x43
    566a:	b111      	cbz	r1, 5672 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68a>
    566c:	4843      	ldr	r0, [pc, #268]	; (577c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x794>)
    566e:	6220      	str	r0, [r4, #32]
    5670:	e021      	b.n	56b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
    5672:	f89d 1000 	ldrb.w	r1, [sp]
    5676:	b931      	cbnz	r1, 5686 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x69e>
    5678:	f8a0 8000 	strh.w	r8, [r0]
    567c:	f880 8002 	strb.w	r8, [r0, #2]
    5680:	2101      	movs	r1, #1
    5682:	f008 f99a 	bl	d9ba <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    5686:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    568a:	6a20      	ldr	r0, [r4, #32]
    568c:	f008 f959 	bl	d942 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    5690:	e011      	b.n	56b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
    5692:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    5696:	f8ad 0004 	strh.w	r0, [sp, #4]
    569a:	466a      	mov	r2, sp
    569c:	a901      	add	r1, sp, #4
    569e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    56a0:	f007 fe41 	bl	d326 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    56a4:	6220      	str	r0, [r4, #32]
    56a6:	b930      	cbnz	r0, 56b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
    56a8:	f240 219f 	movw	r1, #671	; 0x29f
    56ac:	e01e      	b.n	56ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    56ae:	4648      	mov	r0, r9
    56b0:	f7ff fa6e 	bl	4b90 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    56b4:	b1c0      	cbz	r0, 56e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x700>
    56b6:	6a20      	ldr	r0, [r4, #32]
    56b8:	2308      	movs	r3, #8
    56ba:	7801      	ldrb	r1, [r0, #0]
    56bc:	f021 0108 	bic.w	r1, r1, #8
    56c0:	7001      	strb	r1, [r0, #0]
    56c2:	79ea      	ldrb	r2, [r5, #7]
    56c4:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    56c8:	4311      	orrs	r1, r2
    56ca:	f021 0104 	bic.w	r1, r1, #4
    56ce:	7001      	strb	r1, [r0, #0]
    56d0:	7a2a      	ldrb	r2, [r5, #8]
    56d2:	2304      	movs	r3, #4
    56d4:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    56d8:	4311      	orrs	r1, r2
    56da:	f021 0110 	bic.w	r1, r1, #16
    56de:	7001      	strb	r1, [r0, #0]
    56e0:	43c9      	mvns	r1, r1
    56e2:	0789      	lsls	r1, r1, #30
    56e4:	d005      	beq.n	56f2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x70a>
    56e6:	e007      	b.n	56f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x710>
    56e8:	f44f 712a 	mov.w	r1, #680	; 0x2a8
    56ec:	2027      	movs	r0, #39	; 0x27
    56ee:	f7fe fb9d 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    56f2:	78c0      	ldrb	r0, [r0, #3]
    56f4:	2802      	cmp	r0, #2
    56f6:	d00f      	beq.n	5718 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x730>
    56f8:	6b20      	ldr	r0, [r4, #48]	; 0x30
    56fa:	f007 faa4 	bl	cc46 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    56fe:	b108      	cbz	r0, 5704 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    5700:	2101      	movs	r1, #1
    5702:	e00a      	b.n	571a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x732>
    5704:	6a20      	ldr	r0, [r4, #32]
    5706:	7800      	ldrb	r0, [r0, #0]
    5708:	43c0      	mvns	r0, r0
    570a:	0780      	lsls	r0, r0, #30
    570c:	d004      	beq.n	5718 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x730>
    570e:	f7ff f9fd 	bl	4b0c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    5712:	f080 0101 	eor.w	r1, r0, #1
    5716:	e000      	b.n	571a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x732>
    5718:	2100      	movs	r1, #0
    571a:	6a20      	ldr	r0, [r4, #32]
    571c:	7802      	ldrb	r2, [r0, #0]
    571e:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    5722:	7001      	strb	r1, [r0, #0]
    5724:	7ca9      	ldrb	r1, [r5, #18]
    5726:	b199      	cbz	r1, 5750 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>
    5728:	7841      	ldrb	r1, [r0, #1]
    572a:	b189      	cbz	r1, 5750 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>
    572c:	4814      	ldr	r0, [pc, #80]	; (5780 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x798>)
    572e:	f005 fbe1 	bl	aef4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5732:	4812      	ldr	r0, [pc, #72]	; (577c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x794>)
    5734:	3828      	subs	r0, #40	; 0x28
    5736:	f880 8018 	strb.w	r8, [r0, #24]
    573a:	e9d5 1214 	ldrd	r1, r2, [r5, #80]	; 0x50
    573e:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5742:	480f      	ldr	r0, [pc, #60]	; (5780 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x798>)
    5744:	6a21      	ldr	r1, [r4, #32]
    5746:	f004 ffb1 	bl	a6ac <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    574a:	f004 fffb 	bl	a744 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>
    574e:	e003      	b.n	5758 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x770>
    5750:	f005 fbd0 	bl	aef4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5754:	f004 ffd8 	bl	a708 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5758:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    575c:	2101      	movs	r1, #1
    575e:	2000      	movs	r0, #0
    5760:	f005 fc54 	bl	b00c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    5764:	7127      	strb	r7, [r4, #4]
    5766:	6a20      	ldr	r0, [r4, #32]
    5768:	8801      	ldrh	r1, [r0, #0]
    576a:	8221      	strh	r1, [r4, #16]
    576c:	7880      	ldrb	r0, [r0, #2]
    576e:	74a0      	strb	r0, [r4, #18]
    5770:	7027      	strb	r7, [r4, #0]
    5772:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    5776:	0000      	.short	0x0000
    5778:	200000d0 	.word	0x200000d0
    577c:	20000c98 	.word	0x20000c98
    5780:	20000b68 	.word	0x20000b68
    5784:	00005405 	.word	0x00005405
    5788:	0000518d 	.word	0x0000518d
    578c:	00005301 	.word	0x00005301
    5790:	0000556d 	.word	0x0000556d

00005794 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    5794:	4800      	ldr	r0, [pc, #0]	; (5798 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    5796:	4770      	bx	lr
    5798:	20001559 	.word	0x20001559

0000579c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    579c:	4904      	ldr	r1, [pc, #16]	; (57b0 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    579e:	788a      	ldrb	r2, [r1, #2]
    57a0:	4282      	cmp	r2, r0
    57a2:	d903      	bls.n	57ac <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    57a4:	4408      	add	r0, r1
    57a6:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    57aa:	4770      	bx	lr
    57ac:	2000      	movs	r0, #0
    57ae:	4770      	bx	lr
    57b0:	20001386 	.word	0x20001386

000057b4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    57b4:	4904      	ldr	r1, [pc, #16]	; (57c8 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    57b6:	788a      	ldrb	r2, [r1, #2]
    57b8:	4282      	cmp	r2, r0
    57ba:	d903      	bls.n	57c4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    57bc:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    57c0:	3083      	adds	r0, #131	; 0x83
    57c2:	4770      	bx	lr
    57c4:	2000      	movs	r0, #0
    57c6:	4770      	bx	lr
    57c8:	20001386 	.word	0x20001386

000057cc <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    57cc:	4a05      	ldr	r2, [pc, #20]	; (57e4 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    57ce:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    57d2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    57d6:	6802      	ldr	r2, [r0, #0]
    57d8:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    57dc:	8880      	ldrh	r0, [r0, #4]
    57de:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    57e2:	4770      	bx	lr
    57e4:	20001386 	.word	0x20001386

000057e8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    57e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    57ec:	460e      	mov	r6, r1
    57ee:	4607      	mov	r7, r0
    57f0:	4615      	mov	r5, r2
    57f2:	2106      	movs	r1, #6
    57f4:	4630      	mov	r0, r6
    57f6:	f007 ff85 	bl	d704 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    57fa:	4c0d      	ldr	r4, [pc, #52]	; (5830 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    57fc:	b160      	cbz	r0, 5818 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    57fe:	2000      	movs	r0, #0
    5800:	e004      	b.n	580c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    5802:	1821      	adds	r1, r4, r0
    5804:	1c40      	adds	r0, r0, #1
    5806:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    580a:	b2c0      	uxtb	r0, r0
    580c:	78a1      	ldrb	r1, [r4, #2]
    580e:	4281      	cmp	r1, r0
    5810:	d8f7      	bhi.n	5802 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    5812:	2001      	movs	r0, #1
    5814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5818:	4631      	mov	r1, r6
    581a:	4638      	mov	r0, r7
    581c:	f007 fd92 	bl	d344 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    5820:	2808      	cmp	r0, #8
    5822:	d003      	beq.n	582c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    5824:	4420      	add	r0, r4
    5826:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    582a:	e7f2      	b.n	5812 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    582c:	2000      	movs	r0, #0
    582e:	e7f1      	b.n	5814 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    5830:	20001386 	.word	0x20001386

00005834 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    5834:	4904      	ldr	r1, [pc, #16]	; (5848 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    5836:	788a      	ldrb	r2, [r1, #2]
    5838:	4282      	cmp	r2, r0
    583a:	d903      	bls.n	5844 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    583c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    5840:	1cc0      	adds	r0, r0, #3
    5842:	4770      	bx	lr
    5844:	2000      	movs	r0, #0
    5846:	4770      	bx	lr
    5848:	20001386 	.word	0x20001386

0000584c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    584c:	b510      	push	{r4, lr}
    584e:	f240 12d3 	movw	r2, #467	; 0x1d3
    5852:	2100      	movs	r1, #0
    5854:	4808      	ldr	r0, [pc, #32]	; (5878 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    5856:	f006 fbd2 	bl	bffe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    585a:	2208      	movs	r2, #8
    585c:	21ff      	movs	r1, #255	; 0xff
    585e:	4807      	ldr	r0, [pc, #28]	; (587c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5860:	f006 fbcd 	bl	bffe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5864:	4805      	ldr	r0, [pc, #20]	; (587c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5866:	2100      	movs	r1, #0
    5868:	1f00      	subs	r0, r0, #4
    586a:	7001      	strb	r1, [r0, #0]
    586c:	7041      	strb	r1, [r0, #1]
    586e:	f44f 7161 	mov.w	r1, #900	; 0x384
    5872:	8041      	strh	r1, [r0, #2]
    5874:	bd10      	pop	{r4, pc}
    5876:	0000      	.short	0x0000
    5878:	20001386 	.word	0x20001386
    587c:	20000284 	.word	0x20000284

00005880 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    5880:	4901      	ldr	r1, [pc, #4]	; (5888 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    5882:	7008      	strb	r0, [r1, #0]
    5884:	4770      	bx	lr
    5886:	0000      	.short	0x0000
    5888:	20000280 	.word	0x20000280

0000588c <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    588c:	4801      	ldr	r0, [pc, #4]	; (5894 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    588e:	7800      	ldrb	r0, [r0, #0]
    5890:	4770      	bx	lr
    5892:	0000      	.short	0x0000
    5894:	20000280 	.word	0x20000280

00005898 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    5898:	4b0b      	ldr	r3, [pc, #44]	; (58c8 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    589a:	b510      	push	{r4, lr}
    589c:	789c      	ldrb	r4, [r3, #2]
    589e:	4284      	cmp	r4, r0
    58a0:	d90f      	bls.n	58c2 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    58a2:	4418      	add	r0, r3
    58a4:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    58a8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    58ac:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    58b0:	700b      	strb	r3, [r1, #0]
    58b2:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    58b6:	6011      	str	r1, [r2, #0]
    58b8:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    58bc:	8090      	strh	r0, [r2, #4]
    58be:	2001      	movs	r0, #1
    58c0:	bd10      	pop	{r4, pc}
    58c2:	2000      	movs	r0, #0
    58c4:	bd10      	pop	{r4, pc}
    58c6:	0000      	.short	0x0000
    58c8:	20001386 	.word	0x20001386

000058cc <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    58cc:	4907      	ldr	r1, [pc, #28]	; (58ec <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    58ce:	788a      	ldrb	r2, [r1, #2]
    58d0:	4282      	cmp	r2, r0
    58d2:	d909      	bls.n	58e8 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    58d4:	4408      	add	r0, r1
    58d6:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    58da:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    58de:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    58e2:	f000 0001 	and.w	r0, r0, #1
    58e6:	4770      	bx	lr
    58e8:	2000      	movs	r0, #0
    58ea:	4770      	bx	lr
    58ec:	20001386 	.word	0x20001386

000058f0 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    58f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    58f4:	4698      	mov	r8, r3
    58f6:	4691      	mov	r9, r2
    58f8:	460c      	mov	r4, r1
    58fa:	4605      	mov	r5, r0
    58fc:	f000 f936 	bl	5b6c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    5900:	4606      	mov	r6, r0
    5902:	2810      	cmp	r0, #16
    5904:	d006      	beq.n	5914 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    5906:	f000 f901 	bl	5b0c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    590a:	2810      	cmp	r0, #16
    590c:	d002      	beq.n	5914 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    590e:	2012      	movs	r0, #18
    5910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5914:	4f18      	ldr	r7, [pc, #96]	; (5978 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    5916:	78b8      	ldrb	r0, [r7, #2]
    5918:	2808      	cmp	r0, #8
    591a:	d22a      	bcs.n	5972 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    591c:	2e10      	cmp	r6, #16
    591e:	d105      	bne.n	592c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    5920:	2200      	movs	r2, #0
    5922:	4621      	mov	r1, r4
    5924:	4628      	mov	r0, r5
    5926:	f000 f905 	bl	5b34 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    592a:	4606      	mov	r6, r0
    592c:	78bc      	ldrb	r4, [r7, #2]
    592e:	2210      	movs	r2, #16
    5930:	1c60      	adds	r0, r4, #1
    5932:	70b8      	strb	r0, [r7, #2]
    5934:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    5938:	1ce8      	adds	r0, r5, #3
    593a:	4649      	mov	r1, r9
    593c:	f007 fe4b 	bl	d5d6 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    5940:	f105 0083 	add.w	r0, r5, #131	; 0x83
    5944:	2210      	movs	r2, #16
    5946:	4641      	mov	r1, r8
    5948:	f007 fe45 	bl	d5d6 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    594c:	2110      	movs	r1, #16
    594e:	4640      	mov	r0, r8
    5950:	f007 fed8 	bl	d704 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5954:	443c      	add	r4, r7
    5956:	2110      	movs	r1, #16
    5958:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    595c:	4648      	mov	r0, r9
    595e:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    5962:	f007 fecf 	bl	d704 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5966:	77e0      	strb	r0, [r4, #31]
    5968:	f804 6c29 	strb.w	r6, [r4, #-41]
    596c:	2000      	movs	r0, #0
    596e:	73e0      	strb	r0, [r4, #15]
    5970:	e7ce      	b.n	5910 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    5972:	2007      	movs	r0, #7
    5974:	e7cc      	b.n	5910 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    5976:	0000      	.short	0x0000
    5978:	20001386 	.word	0x20001386

0000597c <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    597c:	4806      	ldr	r0, [pc, #24]	; (5998 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    597e:	b510      	push	{r4, lr}
    5980:	7880      	ldrb	r0, [r0, #2]
    5982:	1e40      	subs	r0, r0, #1
    5984:	b244      	sxtb	r4, r0
    5986:	e004      	b.n	5992 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    5988:	b2e0      	uxtb	r0, r4
    598a:	f000 f937 	bl	5bfc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    598e:	1e64      	subs	r4, r4, #1
    5990:	b264      	sxtb	r4, r4
    5992:	2c00      	cmp	r4, #0
    5994:	daf8      	bge.n	5988 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    5996:	bd10      	pop	{r4, pc}
    5998:	20001386 	.word	0x20001386

0000599c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    599c:	4801      	ldr	r0, [pc, #4]	; (59a4 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    599e:	8840      	ldrh	r0, [r0, #2]
    59a0:	4770      	bx	lr
    59a2:	0000      	.short	0x0000
    59a4:	20000280 	.word	0x20000280

000059a8 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    59a8:	b138      	cbz	r0, 59ba <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    59aa:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    59ae:	4288      	cmp	r0, r1
    59b0:	d803      	bhi.n	59ba <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    59b2:	4903      	ldr	r1, [pc, #12]	; (59c0 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    59b4:	8048      	strh	r0, [r1, #2]
    59b6:	2001      	movs	r0, #1
    59b8:	4770      	bx	lr
    59ba:	2000      	movs	r0, #0
    59bc:	4770      	bx	lr
    59be:	0000      	.short	0x0000
    59c0:	20000280 	.word	0x20000280

000059c4 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    59c4:	4905      	ldr	r1, [pc, #20]	; (59dc <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    59c6:	788a      	ldrb	r2, [r1, #2]
    59c8:	4282      	cmp	r2, r0
    59ca:	d903      	bls.n	59d4 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    59cc:	4408      	add	r0, r1
    59ce:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    59d2:	b108      	cbz	r0, 59d8 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    59d4:	2000      	movs	r0, #0
    59d6:	4770      	bx	lr
    59d8:	2001      	movs	r0, #1
    59da:	4770      	bx	lr
    59dc:	20001386 	.word	0x20001386

000059e0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    59e0:	b570      	push	{r4, r5, r6, lr}
    59e2:	460d      	mov	r5, r1
    59e4:	4606      	mov	r6, r0
    59e6:	f000 f8c1 	bl	5b6c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    59ea:	4c10      	ldr	r4, [pc, #64]	; (5a2c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    59ec:	2810      	cmp	r0, #16
    59ee:	d007      	beq.n	5a00 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    59f0:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    59f4:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    59f8:	07c9      	lsls	r1, r1, #31
    59fa:	d001      	beq.n	5a00 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    59fc:	2001      	movs	r0, #1
    59fe:	bd70      	pop	{r4, r5, r6, pc}
    5a00:	7861      	ldrb	r1, [r4, #1]
    5a02:	2908      	cmp	r1, #8
    5a04:	d210      	bcs.n	5a28 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    5a06:	2810      	cmp	r0, #16
    5a08:	d008      	beq.n	5a1c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    5a0a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    5a0e:	2101      	movs	r1, #1
    5a10:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    5a14:	7860      	ldrb	r0, [r4, #1]
    5a16:	1c40      	adds	r0, r0, #1
    5a18:	7060      	strb	r0, [r4, #1]
    5a1a:	e7ef      	b.n	59fc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    5a1c:	2201      	movs	r2, #1
    5a1e:	4629      	mov	r1, r5
    5a20:	4630      	mov	r0, r6
    5a22:	f000 f887 	bl	5b34 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    5a26:	e7f5      	b.n	5a14 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    5a28:	2000      	movs	r0, #0
    5a2a:	bd70      	pop	{r4, r5, r6, pc}
    5a2c:	20001386 	.word	0x20001386

00005a30 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    5a30:	b570      	push	{r4, r5, r6, lr}
    5a32:	4d0b      	ldr	r5, [pc, #44]	; (5a60 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    5a34:	7828      	ldrb	r0, [r5, #0]
    5a36:	1e40      	subs	r0, r0, #1
    5a38:	b244      	sxtb	r4, r0
    5a3a:	e00a      	b.n	5a52 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    5a3c:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    5a40:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5a44:	07c0      	lsls	r0, r0, #31
    5a46:	d002      	beq.n	5a4e <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    5a48:	b2e0      	uxtb	r0, r4
    5a4a:	f000 f91f 	bl	5c8c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    5a4e:	1e64      	subs	r4, r4, #1
    5a50:	b264      	sxtb	r4, r4
    5a52:	2c00      	cmp	r4, #0
    5a54:	daf2      	bge.n	5a3c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    5a56:	4903      	ldr	r1, [pc, #12]	; (5a64 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    5a58:	2000      	movs	r0, #0
    5a5a:	7048      	strb	r0, [r1, #1]
    5a5c:	bd70      	pop	{r4, r5, r6, pc}
    5a5e:	0000      	.short	0x0000
    5a60:	20001386 	.word	0x20001386
    5a64:	20000280 	.word	0x20000280

00005a68 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    5a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a6c:	2400      	movs	r4, #0
    5a6e:	4625      	mov	r5, r4
    5a70:	4e18      	ldr	r6, [pc, #96]	; (5ad4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    5a72:	e029      	b.n	5ac8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    5a74:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    5a78:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    5a7c:	07c0      	lsls	r0, r0, #31
    5a7e:	d021      	beq.n	5ac4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    5a80:	4628      	mov	r0, r5
    5a82:	f000 f843 	bl	5b0c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5a86:	4603      	mov	r3, r0
    5a88:	f7ff fed4 	bl	5834 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    5a8c:	4601      	mov	r1, r0
    5a8e:	2000      	movs	r0, #0
    5a90:	2b10      	cmp	r3, #16
    5a92:	d009      	beq.n	5aa8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    5a94:	18f2      	adds	r2, r6, r3
    5a96:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    5a9a:	f1bc 0f01 	cmp.w	ip, #1
    5a9e:	d002      	beq.n	5aa6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    5aa0:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    5aa4:	b102      	cbz	r2, 5aa8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    5aa6:	2001      	movs	r0, #1
    5aa8:	1e40      	subs	r0, r0, #1
    5aaa:	4201      	tst	r1, r0
    5aac:	d10a      	bne.n	5ac4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    5aae:	480a      	ldr	r0, [pc, #40]	; (5ad8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    5ab0:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    5ab4:	5503      	strb	r3, [r0, r4]
    5ab6:	4620      	mov	r0, r4
    5ab8:	1c64      	adds	r4, r4, #1
    5aba:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    5abe:	b2e4      	uxtb	r4, r4
    5ac0:	f005 fbcc 	bl	b25c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    5ac4:	1c6d      	adds	r5, r5, #1
    5ac6:	b2ed      	uxtb	r5, r5
    5ac8:	7830      	ldrb	r0, [r6, #0]
    5aca:	42a8      	cmp	r0, r5
    5acc:	d8d2      	bhi.n	5a74 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    5ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5ad2:	0000      	.short	0x0000
    5ad4:	20001386 	.word	0x20001386
    5ad8:	20000284 	.word	0x20000284
    5adc:	4602      	mov	r2, r0
    5ade:	4809      	ldr	r0, [pc, #36]	; (5b04 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    5ae0:	b510      	push	{r4, lr}
    5ae2:	7800      	ldrb	r0, [r0, #0]
    5ae4:	460b      	mov	r3, r1
    5ae6:	b158      	cbz	r0, 5b00 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    5ae8:	4807      	ldr	r0, [pc, #28]	; (5b08 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    5aea:	7881      	ldrb	r1, [r0, #2]
    5aec:	b141      	cbz	r1, 5b00 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    5aee:	b10b      	cbz	r3, 5af4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    5af0:	1cc0      	adds	r0, r0, #3
    5af2:	e001      	b.n	5af8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    5af4:	4804      	ldr	r0, [pc, #16]	; (5b08 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    5af6:	3083      	adds	r0, #131	; 0x83
    5af8:	f004 fcfa 	bl	a4f0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    5afc:	2001      	movs	r0, #1
    5afe:	bd10      	pop	{r4, pc}
    5b00:	2000      	movs	r0, #0
    5b02:	bd10      	pop	{r4, pc}
    5b04:	20000280 	.word	0x20000280
    5b08:	20001386 	.word	0x20001386
    5b0c:	4908      	ldr	r1, [pc, #32]	; (5b30 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    5b0e:	b510      	push	{r4, lr}
    5b10:	4603      	mov	r3, r0
    5b12:	2000      	movs	r0, #0
    5b14:	788a      	ldrb	r2, [r1, #2]
    5b16:	e006      	b.n	5b26 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    5b18:	180c      	adds	r4, r1, r0
    5b1a:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    5b1e:	429c      	cmp	r4, r3
    5b20:	d004      	beq.n	5b2c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    5b22:	1c40      	adds	r0, r0, #1
    5b24:	b2c0      	uxtb	r0, r0
    5b26:	4282      	cmp	r2, r0
    5b28:	d8f6      	bhi.n	5b18 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    5b2a:	2010      	movs	r0, #16
    5b2c:	bd10      	pop	{r4, pc}
    5b2e:	0000      	.short	0x0000
    5b30:	20001386 	.word	0x20001386
    5b34:	b570      	push	{r4, r5, r6, lr}
    5b36:	4b0c      	ldr	r3, [pc, #48]	; (5b68 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    5b38:	4604      	mov	r4, r0
    5b3a:	7818      	ldrb	r0, [r3, #0]
    5b3c:	1c45      	adds	r5, r0, #1
    5b3e:	701d      	strb	r5, [r3, #0]
    5b40:	2810      	cmp	r0, #16
    5b42:	d303      	bcc.n	5b4c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    5b44:	2146      	movs	r1, #70	; 0x46
    5b46:	2028      	movs	r0, #40	; 0x28
    5b48:	f7fe f970 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5b4c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    5b50:	680d      	ldr	r5, [r1, #0]
    5b52:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    5b56:	8889      	ldrh	r1, [r1, #4]
    5b58:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    5b5c:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    5b60:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    5b64:	bd70      	pop	{r4, r5, r6, pc}
    5b66:	0000      	.short	0x0000
    5b68:	20001386 	.word	0x20001386
    5b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b70:	460f      	mov	r7, r1
    5b72:	4606      	mov	r6, r0
    5b74:	2400      	movs	r4, #0
    5b76:	4d0d      	ldr	r5, [pc, #52]	; (5bac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x144>)
    5b78:	e00f      	b.n	5b9a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x132>
    5b7a:	bf00      	nop
    5b7c:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    5b80:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
    5b84:	42b1      	cmp	r1, r6
    5b86:	d106      	bne.n	5b96 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x12e>
    5b88:	2206      	movs	r2, #6
    5b8a:	4639      	mov	r1, r7
    5b8c:	f500 70aa 	add.w	r0, r0, #340	; 0x154
    5b90:	f006 f9a9 	bl	bee6 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    5b94:	b138      	cbz	r0, 5ba6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13e>
    5b96:	1c64      	adds	r4, r4, #1
    5b98:	b2e4      	uxtb	r4, r4
    5b9a:	7828      	ldrb	r0, [r5, #0]
    5b9c:	42a0      	cmp	r0, r4
    5b9e:	d8ed      	bhi.n	5b7c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x114>
    5ba0:	2010      	movs	r0, #16
    5ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5ba6:	4620      	mov	r0, r4
    5ba8:	e7fb      	b.n	5ba2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13a>
    5baa:	0000      	.short	0x0000
    5bac:	20001386 	.word	0x20001386
    5bb0:	b570      	push	{r4, r5, r6, lr}
    5bb2:	4605      	mov	r5, r0
    5bb4:	f7ff ffaa 	bl	5b0c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5bb8:	2810      	cmp	r0, #16
    5bba:	d11c      	bne.n	5bf6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    5bbc:	4c0e      	ldr	r4, [pc, #56]	; (5bf8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x190>)
    5bbe:	7820      	ldrb	r0, [r4, #0]
    5bc0:	1e40      	subs	r0, r0, #1
    5bc2:	b2c0      	uxtb	r0, r0
    5bc4:	7020      	strb	r0, [r4, #0]
    5bc6:	42a8      	cmp	r0, r5
    5bc8:	d015      	beq.n	5bf6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    5bca:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    5bce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    5bd2:	f502 7080 	add.w	r0, r2, #256	; 0x100
    5bd6:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    5bda:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    5bde:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    5be2:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    5be6:	7820      	ldrb	r0, [r4, #0]
    5be8:	f7ff ff90 	bl	5b0c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5bec:	2810      	cmp	r0, #16
    5bee:	d002      	beq.n	5bf6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    5bf0:	4420      	add	r0, r4
    5bf2:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    5bf6:	bd70      	pop	{r4, r5, r6, pc}
    5bf8:	20001386 	.word	0x20001386
    5bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5c00:	4c21      	ldr	r4, [pc, #132]	; (5c88 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x220>)
    5c02:	4606      	mov	r6, r0
    5c04:	19a7      	adds	r7, r4, r6
    5c06:	78a0      	ldrb	r0, [r4, #2]
    5c08:	1e40      	subs	r0, r0, #1
    5c0a:	b2c5      	uxtb	r5, r0
    5c0c:	70a5      	strb	r5, [r4, #2]
    5c0e:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    5c12:	42ae      	cmp	r6, r5
    5c14:	d02a      	beq.n	5c6c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x204>
    5c16:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    5c1a:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    5c1e:	f10a 0103 	add.w	r1, sl, #3
    5c22:	f109 0003 	add.w	r0, r9, #3
    5c26:	2210      	movs	r2, #16
    5c28:	f006 f96f 	bl	bf0a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5c2c:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    5c30:	f109 0083 	add.w	r0, r9, #131	; 0x83
    5c34:	2210      	movs	r2, #16
    5c36:	f006 f968 	bl	bf0a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5c3a:	1960      	adds	r0, r4, r5
    5c3c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    5c40:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    5c44:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    5c48:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    5c4c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    5c50:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    5c54:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    5c58:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    5c5c:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    5c60:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    5c64:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    5c68:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    5c6c:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    5c70:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5c74:	07c0      	lsls	r0, r0, #31
    5c76:	d104      	bne.n	5c82 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x21a>
    5c78:	4640      	mov	r0, r8
    5c7a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5c7e:	f7ff bf97 	b.w	5bb0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    5c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5c86:	0000      	.short	0x0000
    5c88:	20001386 	.word	0x20001386
    5c8c:	4905      	ldr	r1, [pc, #20]	; (5ca4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x23c>)
    5c8e:	784a      	ldrb	r2, [r1, #1]
    5c90:	1e52      	subs	r2, r2, #1
    5c92:	704a      	strb	r2, [r1, #1]
    5c94:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    5c98:	2200      	movs	r2, #0
    5c9a:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    5c9e:	f7ff bf87 	b.w	5bb0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    5ca2:	0000      	.short	0x0000
    5ca4:	20001386 	.word	0x20001386

00005ca8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    5ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5cac:	4604      	mov	r4, r0
    5cae:	f100 0570 	add.w	r5, r0, #112	; 0x70
    5cb2:	f04f 0901 	mov.w	r9, #1
    5cb6:	b171      	cbz	r1, 5cd6 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    5cb8:	f104 0786 	add.w	r7, r4, #134	; 0x86
    5cbc:	1e7e      	subs	r6, r7, #1
    5cbe:	2901      	cmp	r1, #1
    5cc0:	d021      	beq.n	5d06 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5e>
    5cc2:	2902      	cmp	r1, #2
    5cc4:	d046      	beq.n	5d54 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xac>
    5cc6:	2903      	cmp	r1, #3
    5cc8:	d11b      	bne.n	5d02 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    5cca:	4639      	mov	r1, r7
    5ccc:	4630      	mov	r0, r6
    5cce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5cd2:	f007 bd47 	b.w	d764 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    5cd6:	f44f 7206 	mov.w	r2, #536	; 0x218
    5cda:	2100      	movs	r1, #0
    5cdc:	f006 f98f 	bl	bffe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5ce0:	f004 fbdc 	bl	a49c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    5ce4:	f644 112b 	movw	r1, #18731	; 0x492b
    5ce8:	4008      	ands	r0, r1
    5cea:	f885 9015 	strb.w	r9, [r5, #21]
    5cee:	f885 004c 	strb.w	r0, [r5, #76]	; 0x4c
    5cf2:	0a00      	lsrs	r0, r0, #8
    5cf4:	f885 004d 	strb.w	r0, [r5, #77]	; 0x4d
    5cf8:	20fe      	movs	r0, #254	; 0xfe
    5cfa:	f885 007c 	strb.w	r0, [r5, #124]	; 0x7c
    5cfe:	207f      	movs	r0, #127	; 0x7f
    5d00:	7268      	strb	r0, [r5, #9]
    5d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5d06:	f04f 0800 	mov.w	r8, #0
    5d0a:	f8a4 810e 	strh.w	r8, [r4, #270]	; 0x10e
    5d0e:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
    5d12:	68e1      	ldr	r1, [r4, #12]
    5d14:	4814      	ldr	r0, [pc, #80]	; (5d68 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc0>)
    5d16:	460a      	mov	r2, r1
    5d18:	4408      	add	r0, r1
    5d1a:	fbb0 f0f1 	udiv	r0, r0, r1
    5d1e:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
    5d22:	f640 30b8 	movw	r0, #3000	; 0xbb8
    5d26:	f8a4 00a0 	strh.w	r0, [r4, #160]	; 0xa0
    5d2a:	8ae3      	ldrh	r3, [r4, #22]
    5d2c:	4628      	mov	r0, r5
    5d2e:	f000 f81d 	bl	5d6c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>
    5d32:	4639      	mov	r1, r7
    5d34:	4630      	mov	r0, r6
    5d36:	f007 fd15 	bl	d764 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    5d3a:	f006 f8b0 	bl	be9e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    5d3e:	b118      	cbz	r0, 5d48 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa0>
    5d40:	6920      	ldr	r0, [r4, #16]
    5d42:	f000 fb65 	bl	6410 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    5d46:	b110      	cbz	r0, 5d4e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa6>
    5d48:	f884 8174 	strb.w	r8, [r4, #372]	; 0x174
    5d4c:	e7d9      	b.n	5d02 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    5d4e:	f884 9174 	strb.w	r9, [r4, #372]	; 0x174
    5d52:	e7d6      	b.n	5d02 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    5d54:	68c1      	ldr	r1, [r0, #12]
    5d56:	f8b4 31a2 	ldrh.w	r3, [r4, #418]	; 0x1a2
    5d5a:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
    5d5e:	4628      	mov	r0, r5
    5d60:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5d64:	f000 b802 	b.w	5d6c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>
    5d68:	01c9c37f 	.word	0x01c9c37f
    5d6c:	b530      	push	{r4, r5, lr}
    5d6e:	2400      	movs	r4, #0
    5d70:	8684      	strh	r4, [r0, #52]	; 0x34
    5d72:	8f04      	ldrh	r4, [r0, #56]	; 0x38
    5d74:	4d13      	ldr	r5, [pc, #76]	; (5dc4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x11c>)
    5d76:	434c      	muls	r4, r1
    5d78:	fbb4 f4f2 	udiv	r4, r4, r2
    5d7c:	8704      	strh	r4, [r0, #56]	; 0x38
    5d7e:	f242 7410 	movw	r4, #10000	; 0x2710
    5d82:	4363      	muls	r3, r4
    5d84:	fbb3 f3f2 	udiv	r3, r3, r2
    5d88:	1c5b      	adds	r3, r3, #1
    5d8a:	b29b      	uxth	r3, r3
    5d8c:	fb03 f402 	mul.w	r4, r3, r2
    5d90:	86c3      	strh	r3, [r0, #54]	; 0x36
    5d92:	42ac      	cmp	r4, r5
    5d94:	d901      	bls.n	5d9a <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xf2>
    5d96:	1e5b      	subs	r3, r3, #1
    5d98:	86c3      	strh	r3, [r0, #54]	; 0x36
    5d9a:	4b0b      	ldr	r3, [pc, #44]	; (5dc8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x120>)
    5d9c:	f240 2471 	movw	r4, #625	; 0x271
    5da0:	fbb3 f3f2 	udiv	r3, r3, r2
    5da4:	1c5b      	adds	r3, r3, #1
    5da6:	8783      	strh	r3, [r0, #60]	; 0x3c
    5da8:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    5daa:	4363      	muls	r3, r4
    5dac:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    5db0:	1e5b      	subs	r3, r3, #1
    5db2:	fbb3 f3f2 	udiv	r3, r3, r2
    5db6:	62c3      	str	r3, [r0, #44]	; 0x2c
    5db8:	6a83      	ldr	r3, [r0, #40]	; 0x28
    5dba:	434b      	muls	r3, r1
    5dbc:	fbb3 f1f2 	udiv	r1, r3, r2
    5dc0:	6281      	str	r1, [r0, #40]	; 0x28
    5dc2:	bd30      	pop	{r4, r5, pc}
    5dc4:	01e84800 	.word	0x01e84800
    5dc8:	02625a00 	.word	0x02625a00

00005dcc <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    5dcc:	b570      	push	{r4, r5, r6, lr}
    5dce:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    5dd2:	b28b      	uxth	r3, r1
    5dd4:	7ac5      	ldrb	r5, [r0, #11]
    5dd6:	ea83 0102 	eor.w	r1, r3, r2
    5dda:	2200      	movs	r2, #0
    5ddc:	b2cc      	uxtb	r4, r1
    5dde:	0a09      	lsrs	r1, r1, #8
    5de0:	fa94 f4a4 	rbit	r4, r4
    5de4:	fa91 f1a1 	rbit	r1, r1
    5de8:	0e24      	lsrs	r4, r4, #24
    5dea:	0e09      	lsrs	r1, r1, #24
    5dec:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    5df0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    5df4:	1c52      	adds	r2, r2, #1
    5df6:	4419      	add	r1, r3
    5df8:	b2d2      	uxtb	r2, r2
    5dfa:	b289      	uxth	r1, r1
    5dfc:	2a03      	cmp	r2, #3
    5dfe:	d3ed      	bcc.n	5ddc <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
    5e00:	4059      	eors	r1, r3
    5e02:	2225      	movs	r2, #37	; 0x25
    5e04:	fbb1 f3f2 	udiv	r3, r1, r2
    5e08:	fb02 1213 	mls	r2, r2, r3, r1
    5e0c:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    5e10:	f002 0607 	and.w	r6, r2, #7
    5e14:	785b      	ldrb	r3, [r3, #1]
    5e16:	2401      	movs	r4, #1
    5e18:	fa04 f606 	lsl.w	r6, r4, r6
    5e1c:	4233      	tst	r3, r6
    5e1e:	d001      	beq.n	5e24 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x58>
    5e20:	4610      	mov	r0, r2
    5e22:	bd70      	pop	{r4, r5, r6, pc}
    5e24:	434d      	muls	r5, r1
    5e26:	0c29      	lsrs	r1, r5, #16
    5e28:	1c49      	adds	r1, r1, #1
    5e2a:	b2c9      	uxtb	r1, r1
    5e2c:	2200      	movs	r2, #0
    5e2e:	1885      	adds	r5, r0, r2
    5e30:	79ab      	ldrb	r3, [r5, #6]
    5e32:	428b      	cmp	r3, r1
    5e34:	d312      	bcc.n	5e5c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    5e36:	f895 5001 	ldrb.w	r5, [r5, #1]
    5e3a:	2300      	movs	r3, #0
    5e3c:	fa04 f603 	lsl.w	r6, r4, r3
    5e40:	4235      	tst	r5, r6
    5e42:	d001      	beq.n	5e48 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x7c>
    5e44:	1e49      	subs	r1, r1, #1
    5e46:	b2c9      	uxtb	r1, r1
    5e48:	b121      	cbz	r1, 5e54 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x88>
    5e4a:	1c5b      	adds	r3, r3, #1
    5e4c:	b2db      	uxtb	r3, r3
    5e4e:	2b08      	cmp	r3, #8
    5e50:	d3f4      	bcc.n	5e3c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x70>
    5e52:	e005      	b.n	5e60 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
    5e54:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    5e58:	b2c0      	uxtb	r0, r0
    5e5a:	bd70      	pop	{r4, r5, r6, pc}
    5e5c:	1ac9      	subs	r1, r1, r3
    5e5e:	b2c9      	uxtb	r1, r1
    5e60:	1c52      	adds	r2, r2, #1
    5e62:	b2d2      	uxtb	r2, r2
    5e64:	2a05      	cmp	r2, #5
    5e66:	d3e2      	bcc.n	5e2e <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    5e68:	f240 110d 	movw	r1, #269	; 0x10d
    5e6c:	2046      	movs	r0, #70	; 0x46
    5e6e:	f7fd ffdd 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e72:	0000      	movs	r0, r0
    5e74:	b570      	push	{r4, r5, r6, lr}
    5e76:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    5e7a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
    5e7e:	2401      	movs	r4, #1
    5e80:	fb03 2101 	mla	r1, r3, r1, r2
    5e84:	2225      	movs	r2, #37	; 0x25
    5e86:	fbb1 f3f2 	udiv	r3, r1, r2
    5e8a:	fb02 1113 	mls	r1, r2, r3, r1
    5e8e:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    5e92:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    5e96:	f001 0307 	and.w	r3, r1, #7
    5e9a:	7d92      	ldrb	r2, [r2, #22]
    5e9c:	fa04 f303 	lsl.w	r3, r4, r3
    5ea0:	421a      	tst	r2, r3
    5ea2:	d003      	beq.n	5eac <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xe0>
    5ea4:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    5ea8:	2000      	movs	r0, #0
    5eaa:	bd70      	pop	{r4, r5, r6, pc}
    5eac:	f890 2020 	ldrb.w	r2, [r0, #32]
    5eb0:	fbb1 f3f2 	udiv	r3, r1, r2
    5eb4:	fb02 1113 	mls	r1, r2, r3, r1
    5eb8:	1c49      	adds	r1, r1, #1
    5eba:	b2c9      	uxtb	r1, r1
    5ebc:	2300      	movs	r3, #0
    5ebe:	18c5      	adds	r5, r0, r3
    5ec0:	7eea      	ldrb	r2, [r5, #27]
    5ec2:	428a      	cmp	r2, r1
    5ec4:	d311      	bcc.n	5eea <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x11e>
    5ec6:	f895 5016 	ldrb.w	r5, [r5, #22]
    5eca:	2200      	movs	r2, #0
    5ecc:	fa04 f602 	lsl.w	r6, r4, r2
    5ed0:	4235      	tst	r5, r6
    5ed2:	d001      	beq.n	5ed8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10c>
    5ed4:	1e49      	subs	r1, r1, #1
    5ed6:	b2c9      	uxtb	r1, r1
    5ed8:	b121      	cbz	r1, 5ee4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x118>
    5eda:	1c52      	adds	r2, r2, #1
    5edc:	b2d2      	uxtb	r2, r2
    5ede:	2a08      	cmp	r2, #8
    5ee0:	d3f4      	bcc.n	5ecc <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x100>
    5ee2:	e004      	b.n	5eee <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x122>
    5ee4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    5ee8:	e7dc      	b.n	5ea4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xd8>
    5eea:	1a89      	subs	r1, r1, r2
    5eec:	b2c9      	uxtb	r1, r1
    5eee:	1c5b      	adds	r3, r3, #1
    5ef0:	b2db      	uxtb	r3, r3
    5ef2:	2b05      	cmp	r3, #5
    5ef4:	d3e3      	bcc.n	5ebe <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xf2>
    5ef6:	201f      	movs	r0, #31
    5ef8:	bd70      	pop	{r4, r5, r6, pc}
	...

00005efc <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    5efc:	7841      	ldrb	r1, [r0, #1]
    5efe:	b141      	cbz	r1, 5f12 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    5f00:	78c0      	ldrb	r0, [r0, #3]
    5f02:	2819      	cmp	r0, #25
    5f04:	d203      	bcs.n	5f0e <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    5f06:	4a04      	ldr	r2, [pc, #16]	; (5f18 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    5f08:	5c10      	ldrb	r0, [r2, r0]
    5f0a:	4288      	cmp	r0, r1
    5f0c:	d101      	bne.n	5f12 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    5f0e:	2001      	movs	r0, #1
    5f10:	4770      	bx	lr
    5f12:	2000      	movs	r0, #0
    5f14:	4770      	bx	lr
    5f16:	0000      	.short	0x0000
    5f18:	0000fe1a 	.word	0x0000fe1a

00005f1c <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>:
    5f1c:	b50c      	push	{r2, r3, lr}
    5f1e:	a20b      	add	r2, pc, #44	; (adr r2, 5f4c <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x30>)
    5f20:	e9d2 1200 	ldrd	r1, r2, [r2]
    5f24:	e9cd 1200 	strd	r1, r2, [sp]
    5f28:	7901      	ldrb	r1, [r0, #4]
    5f2a:	7940      	ldrb	r0, [r0, #5]
    5f2c:	f001 0207 	and.w	r2, r1, #7
    5f30:	4669      	mov	r1, sp
    5f32:	f81d 2002 	ldrb.w	r2, [sp, r2]
    5f36:	2a01      	cmp	r2, #1
    5f38:	d804      	bhi.n	5f44 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x28>
    5f3a:	f000 0007 	and.w	r0, r0, #7
    5f3e:	5c08      	ldrb	r0, [r1, r0]
    5f40:	2801      	cmp	r0, #1
    5f42:	d901      	bls.n	5f48 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x2c>
    5f44:	2000      	movs	r0, #0
    5f46:	bd0c      	pop	{r2, r3, pc}
    5f48:	2001      	movs	r0, #1
    5f4a:	bd0c      	pop	{r2, r3, pc}
    5f4c:	02010100 	.word	0x02010100
    5f50:	03020201 	.word	0x03020201

00005f54 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    5f54:	b510      	push	{r4, lr}
    5f56:	2201      	movs	r2, #1
    5f58:	70c1      	strb	r1, [r0, #3]
    5f5a:	2919      	cmp	r1, #25
    5f5c:	d202      	bcs.n	5f64 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    5f5e:	4a06      	ldr	r2, [pc, #24]	; (5f78 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    5f60:	5c52      	ldrb	r2, [r2, r1]
    5f62:	e006      	b.n	5f72 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    5f64:	29ff      	cmp	r1, #255	; 0xff
    5f66:	d004      	beq.n	5f72 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    5f68:	f240 31d5 	movw	r1, #981	; 0x3d5
    5f6c:	202a      	movs	r0, #42	; 0x2a
    5f6e:	f7fd ff5d 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f72:	7042      	strb	r2, [r0, #1]
    5f74:	bd10      	pop	{r4, pc}
    5f76:	0000      	.short	0x0000
    5f78:	0000fe1a 	.word	0x0000fe1a

00005f7c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    5f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f80:	4c12      	ldr	r4, [pc, #72]	; (5fcc <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    5f82:	4607      	mov	r7, r0
    5f84:	460e      	mov	r6, r1
    5f86:	7da0      	ldrb	r0, [r4, #22]
    5f88:	b110      	cbz	r0, 5f90 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    5f8a:	8b20      	ldrh	r0, [r4, #24]
    5f8c:	2800      	cmp	r0, #0
    5f8e:	d012      	beq.n	5fb6 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    5f90:	480e      	ldr	r0, [pc, #56]	; (5fcc <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    5f92:	3014      	adds	r0, #20
    5f94:	4680      	mov	r8, r0
    5f96:	f007 fd8f 	bl	dab8 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    5f9a:	b9a8      	cbnz	r0, 5fc8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    5f9c:	8aa5      	ldrh	r5, [r4, #20]
    5f9e:	8aa0      	ldrh	r0, [r4, #20]
    5fa0:	4632      	mov	r2, r6
    5fa2:	4639      	mov	r1, r7
    5fa4:	f007 fdcc 	bl	db40 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2e>
    5fa8:	b138      	cbz	r0, 5fba <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
    5faa:	7da0      	ldrb	r0, [r4, #22]
    5fac:	b110      	cbz	r0, 5fb4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
    5fae:	8b20      	ldrh	r0, [r4, #24]
    5fb0:	1e40      	subs	r0, r0, #1
    5fb2:	8320      	strh	r0, [r4, #24]
    5fb4:	2001      	movs	r0, #1
    5fb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5fba:	4640      	mov	r0, r8
    5fbc:	f007 fd7c 	bl	dab8 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    5fc0:	b910      	cbnz	r0, 5fc8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    5fc2:	8aa0      	ldrh	r0, [r4, #20]
    5fc4:	42a8      	cmp	r0, r5
    5fc6:	d1ea      	bne.n	5f9e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    5fc8:	2000      	movs	r0, #0
    5fca:	e7f4      	b.n	5fb6 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    5fcc:	200010e0 	.word	0x200010e0
    5fd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5fd4:	468a      	mov	sl, r1
    5fd6:	4699      	mov	r9, r3
    5fd8:	4615      	mov	r5, r2
    5fda:	4604      	mov	r4, r0
    5fdc:	a901      	add	r1, sp, #4
    5fde:	f007 f9f4 	bl	d3ca <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    5fe2:	bbe0      	cbnz	r0, 605e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe2>
    5fe4:	9f02      	ldr	r7, [sp, #8]
    5fe6:	f04f 0800 	mov.w	r8, #0
    5fea:	3770      	adds	r7, #112	; 0x70
    5fec:	b18d      	cbz	r5, 6012 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x96>
    5fee:	4620      	mov	r0, r4
    5ff0:	f7fe fb4c 	bl	468c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5ff4:	0004      	movs	r4, r0
    5ff6:	d00f      	beq.n	6018 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x9c>
    5ff8:	4629      	mov	r1, r5
    5ffa:	f006 fdf6 	bl	cbea <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    5ffe:	0006      	movs	r6, r0
    6000:	d003      	beq.n	600a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x8e>
    6002:	481d      	ldr	r0, [pc, #116]	; (6078 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xfc>)
    6004:	8840      	ldrh	r0, [r0, #2]
    6006:	42a8      	cmp	r0, r5
    6008:	d208      	bcs.n	601c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xa0>
    600a:	2000      	movs	r0, #0
    600c:	b004      	add	sp, #16
    600e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6012:	2001      	movs	r0, #1
    6014:	7538      	strb	r0, [r7, #20]
    6016:	e029      	b.n	606c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
    6018:	216e      	movs	r1, #110	; 0x6e
    601a:	e02a      	b.n	6072 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf6>
    601c:	4620      	mov	r0, r4
    601e:	4631      	mov	r1, r6
    6020:	aa03      	add	r2, sp, #12
    6022:	f006 fddb 	bl	cbdc <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    6026:	9803      	ldr	r0, [sp, #12]
    6028:	f8a0 8000 	strh.w	r8, [r0]
    602c:	f880 8002 	strb.w	r8, [r0, #2]
    6030:	7d39      	ldrb	r1, [r7, #20]
    6032:	b109      	cbz	r1, 6038 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xbc>
    6034:	f04f 0a02 	mov.w	sl, #2
    6038:	4651      	mov	r1, sl
    603a:	f007 fcbe 	bl	d9ba <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    603e:	4631      	mov	r1, r6
    6040:	2603      	movs	r6, #3
    6042:	4620      	mov	r0, r4
    6044:	464a      	mov	r2, r9
    6046:	462b      	mov	r3, r5
    6048:	9600      	str	r6, [sp, #0]
    604a:	f006 fcad 	bl	c9a8 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    604e:	4620      	mov	r0, r4
    6050:	4629      	mov	r1, r5
    6052:	f006 fd67 	bl	cb24 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    6056:	b158      	cbz	r0, 6070 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf4>
    6058:	4644      	mov	r4, r8
    605a:	a801      	add	r0, sp, #4
    605c:	e000      	b.n	6060 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe4>
    605e:	e005      	b.n	606c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
    6060:	f007 fd4b 	bl	dafa <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    6064:	9802      	ldr	r0, [sp, #8]
    6066:	f8a0 40fa 	strh.w	r4, [r0, #250]	; 0xfa
    606a:	753c      	strb	r4, [r7, #20]
    606c:	2001      	movs	r0, #1
    606e:	e7cd      	b.n	600c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x90>
    6070:	2184      	movs	r1, #132	; 0x84
    6072:	202b      	movs	r0, #43	; 0x2b
    6074:	f7fd feda 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6078:	200010e0 	.word	0x200010e0

0000607c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    607c:	4901      	ldr	r1, [pc, #4]	; (6084 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x8>)
    607e:	2001      	movs	r0, #1
    6080:	7008      	strb	r0, [r1, #0]
    6082:	4770      	bx	lr
    6084:	2000028d 	.word	0x2000028d

00006088 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    6088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    608c:	0006      	movs	r6, r0
    608e:	d00a      	beq.n	60a6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e>
    6090:	4825      	ldr	r0, [pc, #148]	; (6128 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa0>)
    6092:	7801      	ldrb	r1, [r0, #0]
    6094:	b151      	cbz	r1, 60ac <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x24>
    6096:	2100      	movs	r1, #0
    6098:	7071      	strb	r1, [r6, #1]
    609a:	2203      	movs	r2, #3
    609c:	7032      	strb	r2, [r6, #0]
    609e:	2201      	movs	r2, #1
    60a0:	7132      	strb	r2, [r6, #4]
    60a2:	7001      	strb	r1, [r0, #0]
    60a4:	e03a      	b.n	611c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x94>
    60a6:	f240 21da 	movw	r1, #730	; 0x2da
    60aa:	e009      	b.n	60c0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
    60ac:	4c1e      	ldr	r4, [pc, #120]	; (6128 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa0>)
    60ae:	1ce4      	adds	r4, r4, #3
    60b0:	7820      	ldrb	r0, [r4, #0]
    60b2:	b940      	cbnz	r0, 60c6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    60b4:	1ca0      	adds	r0, r4, #2
    60b6:	f007 fd8c 	bl	dbd2 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    60ba:	b120      	cbz	r0, 60c6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    60bc:	f240 21e9 	movw	r1, #745	; 0x2e9
    60c0:	2010      	movs	r0, #16
    60c2:	f7fd feb3 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    60c6:	f8b4 8002 	ldrh.w	r8, [r4, #2]
    60ca:	2000      	movs	r0, #0
    60cc:	f7fe f898 	bl	4200 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    60d0:	4f16      	ldr	r7, [pc, #88]	; (612c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>)
    60d2:	4605      	mov	r5, r0
    60d4:	6838      	ldr	r0, [r7, #0]
    60d6:	b160      	cbz	r0, 60f2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6a>
    60d8:	8860      	ldrh	r0, [r4, #2]
    60da:	42a8      	cmp	r0, r5
    60dc:	d309      	bcc.n	60f2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6a>
    60de:	1b40      	subs	r0, r0, r5
    60e0:	b2c0      	uxtb	r0, r0
    60e2:	2101      	movs	r1, #1
    60e4:	f006 ff29 	bl	cf3a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    60e8:	b158      	cbz	r0, 6102 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7a>
    60ea:	4631      	mov	r1, r6
    60ec:	f000 f84e 	bl	618c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2c>
    60f0:	e006      	b.n	6100 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x78>
    60f2:	480f      	ldr	r0, [pc, #60]	; (6130 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>)
    60f4:	6800      	ldr	r0, [r0, #0]
    60f6:	b120      	cbz	r0, 6102 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7a>
    60f8:	8860      	ldrh	r0, [r4, #2]
    60fa:	4631      	mov	r1, r6
    60fc:	f000 f8de 	bl	62bc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x15c>
    6100:	b960      	cbnz	r0, 611c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x94>
    6102:	1ca0      	adds	r0, r4, #2
    6104:	f007 fd65 	bl	dbd2 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    6108:	b910      	cbnz	r0, 6110 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x88>
    610a:	8861      	ldrh	r1, [r4, #2]
    610c:	4541      	cmp	r1, r8
    610e:	d1e1      	bne.n	60d4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4c>
    6110:	4808      	ldr	r0, [pc, #32]	; (6134 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xac>)
    6112:	6801      	ldr	r1, [r0, #0]
    6114:	b129      	cbz	r1, 6122 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    6116:	4630      	mov	r0, r6
    6118:	4788      	blx	r1
    611a:	b110      	cbz	r0, 6122 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    611c:	2001      	movs	r0, #1
    611e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6122:	2000      	movs	r0, #0
    6124:	e7fb      	b.n	611e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x96>
    6126:	0000      	.short	0x0000
    6128:	2000028d 	.word	0x2000028d
    612c:	200000f0 	.word	0x200000f0
    6130:	200000f4 	.word	0x200000f4
    6134:	200000f8 	.word	0x200000f8

00006138 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    6138:	4901      	ldr	r1, [pc, #4]	; (6140 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    613a:	7008      	strb	r0, [r1, #0]
    613c:	f000 b95c 	b.w	63f8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x298>
    6140:	2000028c 	.word	0x2000028c

00006144 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    6144:	4801      	ldr	r0, [pc, #4]	; (614c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    6146:	7800      	ldrb	r0, [r0, #0]
    6148:	f7fd bc94 	b.w	3a74 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    614c:	2000028c 	.word	0x2000028c

00006150 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>:
    6150:	4902      	ldr	r1, [pc, #8]	; (615c <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xc>)
    6152:	4801      	ldr	r0, [pc, #4]	; (6158 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x8>)
    6154:	6008      	str	r0, [r1, #0]
    6156:	4770      	bx	lr
    6158:	00006565 	.word	0x00006565
    615c:	200000f0 	.word	0x200000f0

00006160 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>:
    6160:	4905      	ldr	r1, [pc, #20]	; (6178 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x18>)
    6162:	4804      	ldr	r0, [pc, #16]	; (6174 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14>)
    6164:	6008      	str	r0, [r1, #0]
    6166:	4906      	ldr	r1, [pc, #24]	; (6180 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x20>)
    6168:	4804      	ldr	r0, [pc, #16]	; (617c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c>)
    616a:	6008      	str	r0, [r1, #0]
    616c:	4906      	ldr	r1, [pc, #24]	; (6188 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28>)
    616e:	4805      	ldr	r0, [pc, #20]	; (6184 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x24>)
    6170:	6008      	str	r0, [r1, #0]
    6172:	4770      	bx	lr
    6174:	00006565 	.word	0x00006565
    6178:	200000f0 	.word	0x200000f0
    617c:	00007c29 	.word	0x00007c29
    6180:	200000f4 	.word	0x200000f4
    6184:	00004cc5 	.word	0x00004cc5
    6188:	200000f8 	.word	0x200000f8
    618c:	b570      	push	{r4, r5, r6, lr}
    618e:	0005      	movs	r5, r0
    6190:	460c      	mov	r4, r1
    6192:	d02e      	beq.n	61f2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x92>
    6194:	4818      	ldr	r0, [pc, #96]	; (61f8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x98>)
    6196:	6802      	ldr	r2, [r0, #0]
    6198:	b35a      	cbz	r2, 61f2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x92>
    619a:	4628      	mov	r0, r5
    619c:	4790      	blx	r2
    619e:	b340      	cbz	r0, 61f2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x92>
    61a0:	7820      	ldrb	r0, [r4, #0]
    61a2:	2811      	cmp	r0, #17
    61a4:	d002      	beq.n	61ac <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x4c>
    61a6:	2814      	cmp	r0, #20
    61a8:	d003      	beq.n	61b2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x52>
    61aa:	e020      	b.n	61ee <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    61ac:	7920      	ldrb	r0, [r4, #4]
    61ae:	b1f0      	cbz	r0, 61ee <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    61b0:	e00a      	b.n	61c8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x68>
    61b2:	7920      	ldrb	r0, [r4, #4]
    61b4:	b120      	cbz	r0, 61c0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x60>
    61b6:	4628      	mov	r0, r5
    61b8:	f007 ff1f 	bl	dffa <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    61bc:	b120      	cbz	r0, 61c8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x68>
    61be:	e016      	b.n	61ee <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    61c0:	490e      	ldr	r1, [pc, #56]	; (61fc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x9c>)
    61c2:	2000      	movs	r0, #0
    61c4:	7008      	strb	r0, [r1, #0]
    61c6:	e012      	b.n	61ee <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    61c8:	88e4      	ldrh	r4, [r4, #6]
    61ca:	2100      	movs	r1, #0
    61cc:	4620      	mov	r0, r4
    61ce:	f006 feb4 	bl	cf3a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    61d2:	b160      	cbz	r0, 61ee <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    61d4:	8800      	ldrh	r0, [r0, #0]
    61d6:	f007 f838 	bl	d24a <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    61da:	2100      	movs	r1, #0
    61dc:	4620      	mov	r0, r4
    61de:	f7fe f8ad 	bl	433c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    61e2:	b120      	cbz	r0, 61ee <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    61e4:	f240 1171 	movw	r1, #369	; 0x171
    61e8:	2010      	movs	r0, #16
    61ea:	f7fd fe1f 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    61ee:	2001      	movs	r0, #1
    61f0:	bd70      	pop	{r4, r5, r6, pc}
    61f2:	2000      	movs	r0, #0
    61f4:	bd70      	pop	{r4, r5, r6, pc}
    61f6:	0000      	.short	0x0000
    61f8:	200000f0 	.word	0x200000f0
    61fc:	20000290 	.word	0x20000290
    6200:	b510      	push	{r4, lr}
    6202:	492d      	ldr	r1, [pc, #180]	; (62b8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x158>)
    6204:	b086      	sub	sp, #24
    6206:	7c8a      	ldrb	r2, [r1, #18]
    6208:	7801      	ldrb	r1, [r0, #0]
    620a:	07d3      	lsls	r3, r2, #31
    620c:	d101      	bne.n	6212 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb2>
    620e:	2919      	cmp	r1, #25
    6210:	d004      	beq.n	621c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xbc>
    6212:	2918      	cmp	r1, #24
    6214:	d01f      	beq.n	6256 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xf6>
    6216:	2912      	cmp	r1, #18
    6218:	d046      	beq.n	62a8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x148>
    621a:	e04a      	b.n	62b2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x152>
    621c:	8880      	ldrh	r0, [r0, #4]
    621e:	f8ad 0000 	strh.w	r0, [sp]
    6222:	a902      	add	r1, sp, #8
    6224:	f007 f8d1 	bl	d3ca <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6228:	b110      	cbz	r0, 6230 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xd0>
    622a:	f44f 71c4 	mov.w	r1, #392	; 0x188
    622e:	e035      	b.n	629c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x13c>
    6230:	9803      	ldr	r0, [sp, #12]
    6232:	f810 1f66 	ldrb.w	r1, [r0, #102]!
    6236:	f88d 1002 	strb.w	r1, [sp, #2]
    623a:	7841      	ldrb	r1, [r0, #1]
    623c:	f88d 1003 	strb.w	r1, [sp, #3]
    6240:	8840      	ldrh	r0, [r0, #2]
    6242:	f8ad 0004 	strh.w	r0, [sp, #4]
    6246:	2102      	movs	r1, #2
    6248:	4668      	mov	r0, sp
    624a:	f009 f9b1 	bl	f5b0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    624e:	b340      	cbz	r0, 62a2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x142>
    6250:	f44f 71cf 	mov.w	r1, #414	; 0x19e
    6254:	e022      	b.n	629c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x13c>
    6256:	0791      	lsls	r1, r2, #30
    6258:	d42b      	bmi.n	62b2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x152>
    625a:	8884      	ldrh	r4, [r0, #4]
    625c:	a903      	add	r1, sp, #12
    625e:	4620      	mov	r0, r4
    6260:	f008 ffc5 	bl	f1ee <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    6264:	b110      	cbz	r0, 626c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x10c>
    6266:	f240 11a5 	movw	r1, #421	; 0x1a5
    626a:	e017      	b.n	629c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x13c>
    626c:	f8ad 4000 	strh.w	r4, [sp]
    6270:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    6274:	f8ad 0002 	strh.w	r0, [sp, #2]
    6278:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    627c:	f8ad 0004 	strh.w	r0, [sp, #4]
    6280:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    6284:	f8ad 0006 	strh.w	r0, [sp, #6]
    6288:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    628c:	f8ad 0008 	strh.w	r0, [sp, #8]
    6290:	4668      	mov	r0, sp
    6292:	f009 f82a 	bl	f2ea <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    6296:	b120      	cbz	r0, 62a2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x142>
    6298:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
    629c:	2010      	movs	r0, #16
    629e:	f7fd fdc5 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    62a2:	2001      	movs	r0, #1
    62a4:	b006      	add	sp, #24
    62a6:	bd10      	pop	{r4, pc}
    62a8:	0751      	lsls	r1, r2, #29
    62aa:	d402      	bmi.n	62b2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x152>
    62ac:	7b80      	ldrb	r0, [r0, #14]
    62ae:	07c0      	lsls	r0, r0, #31
    62b0:	d0f7      	beq.n	62a2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x142>
    62b2:	2000      	movs	r0, #0
    62b4:	e7f6      	b.n	62a4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x144>
    62b6:	0000      	.short	0x0000
    62b8:	200010e0 	.word	0x200010e0
    62bc:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    62c0:	b087      	sub	sp, #28
    62c2:	460c      	mov	r4, r1
    62c4:	a902      	add	r1, sp, #8
    62c6:	9807      	ldr	r0, [sp, #28]
    62c8:	f007 f87f 	bl	d3ca <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    62cc:	2800      	cmp	r0, #0
    62ce:	d17d      	bne.n	63cc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x26c>
    62d0:	f8df 9120 	ldr.w	r9, [pc, #288]	; 63f4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x294>
    62d4:	f04f 0a01 	mov.w	sl, #1
    62d8:	4680      	mov	r8, r0
    62da:	9803      	ldr	r0, [sp, #12]
    62dc:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    62e0:	2800      	cmp	r0, #0
    62e2:	d00c      	beq.n	62fe <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x19e>
    62e4:	f8d9 2000 	ldr.w	r2, [r9]
    62e8:	b162      	cbz	r2, 6304 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a4>
    62ea:	4621      	mov	r1, r4
    62ec:	9807      	ldr	r0, [sp, #28]
    62ee:	4790      	blx	r2
    62f0:	b140      	cbz	r0, 6304 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a4>
    62f2:	4620      	mov	r0, r4
    62f4:	f7ff ff84 	bl	6200 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa0>
    62f8:	2800      	cmp	r0, #0
    62fa:	d1ee      	bne.n	62da <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x17a>
    62fc:	2001      	movs	r0, #1
    62fe:	b009      	add	sp, #36	; 0x24
    6300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6304:	9d03      	ldr	r5, [sp, #12]
    6306:	f895 0134 	ldrb.w	r0, [r5, #308]	; 0x134
    630a:	3570      	adds	r5, #112	; 0x70
    630c:	b950      	cbnz	r0, 6324 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c4>
    630e:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    6312:	f88d 0004 	strb.w	r0, [sp, #4]
    6316:	9801      	ldr	r0, [sp, #4]
    6318:	9001      	str	r0, [sp, #4]
    631a:	f89d 0004 	ldrb.w	r0, [sp, #4]
    631e:	b108      	cbz	r0, 6324 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c4>
    6320:	2001      	movs	r0, #1
    6322:	e000      	b.n	6326 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c6>
    6324:	2000      	movs	r0, #0
    6326:	4683      	mov	fp, r0
    6328:	f895 0045 	ldrb.w	r0, [r5, #69]	; 0x45
    632c:	b1c0      	cbz	r0, 6360 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x200>
    632e:	f895 0046 	ldrb.w	r0, [r5, #70]	; 0x46
    6332:	0780      	lsls	r0, r0, #30
    6334:	d514      	bpl.n	6360 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x200>
    6336:	f884 8001 	strb.w	r8, [r4, #1]
    633a:	f884 a000 	strb.w	sl, [r4]
    633e:	f884 8004 	strb.w	r8, [r4, #4]
    6342:	9907      	ldr	r1, [sp, #28]
    6344:	f8a4 1005 	strh.w	r1, [r4, #5]
    6348:	f895 1047 	ldrb.w	r1, [r5, #71]	; 0x47
    634c:	71e1      	strb	r1, [r4, #7]
    634e:	f8b5 1048 	ldrh.w	r1, [r5, #72]	; 0x48
    6352:	8121      	strh	r1, [r4, #8]
    6354:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    6358:	8161      	strh	r1, [r4, #10]
    635a:	f885 8045 	strb.w	r8, [r5, #69]	; 0x45
    635e:	e7c8      	b.n	62f2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x192>
    6360:	9807      	ldr	r0, [sp, #28]
    6362:	f7fe f993 	bl	468c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6366:	0007      	movs	r7, r0
    6368:	d00d      	beq.n	6386 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x226>
    636a:	f006 fbff 	bl	cb6c <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    636e:	0006      	movs	r6, r0
    6370:	d015      	beq.n	639e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x23e>
    6372:	f884 8001 	strb.w	r8, [r4, #1]
    6376:	200d      	movs	r0, #13
    6378:	7020      	strb	r0, [r4, #0]
    637a:	9807      	ldr	r0, [sp, #28]
    637c:	80e0      	strh	r0, [r4, #6]
    637e:	8126      	strh	r6, [r4, #8]
    6380:	f884 a004 	strb.w	sl, [r4, #4]
    6384:	e007      	b.n	6396 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x236>
    6386:	f240 2133 	movw	r1, #563	; 0x233
    638a:	e02d      	b.n	63e8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x288>
    638c:	2100      	movs	r1, #0
    638e:	4638      	mov	r0, r7
    6390:	460a      	mov	r2, r1
    6392:	f006 fd01 	bl	cd98 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    6396:	1e76      	subs	r6, r6, #1
    6398:	b2b6      	uxth	r6, r6
    639a:	d2f7      	bcs.n	638c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x22c>
    639c:	e7a9      	b.n	62f2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x192>
    639e:	9807      	ldr	r0, [sp, #28]
    63a0:	f7fe f95e 	bl	4660 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    63a4:	b1f0      	cbz	r0, 63e4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x284>
    63a6:	f1bb 0f00 	cmp.w	fp, #0
    63aa:	d020      	beq.n	63ee <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28e>
    63ac:	f006 fb13 	bl	c9d6 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    63b0:	b160      	cbz	r0, 63cc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x26c>
    63b2:	9807      	ldr	r0, [sp, #28]
    63b4:	f006 ff49 	bl	d24a <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    63b8:	2100      	movs	r1, #0
    63ba:	9807      	ldr	r0, [sp, #28]
    63bc:	f7fd ffbe 	bl	433c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    63c0:	f884 8001 	strb.w	r8, [r4, #1]
    63c4:	210a      	movs	r1, #10
    63c6:	4640      	mov	r0, r8
    63c8:	7021      	strb	r1, [r4, #0]
    63ca:	e000      	b.n	63ce <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x26e>
    63cc:	e00f      	b.n	63ee <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28e>
    63ce:	f884 8004 	strb.w	r8, [r4, #4]
    63d2:	9907      	ldr	r1, [sp, #28]
    63d4:	f8a4 1005 	strh.w	r1, [r4, #5]
    63d8:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
    63dc:	71e1      	strb	r1, [r4, #7]
    63de:	3524      	adds	r5, #36	; 0x24
    63e0:	7028      	strb	r0, [r5, #0]
    63e2:	e786      	b.n	62f2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x192>
    63e4:	f240 2151 	movw	r1, #593	; 0x251
    63e8:	2010      	movs	r0, #16
    63ea:	f7fd fd1f 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    63ee:	2000      	movs	r0, #0
    63f0:	e785      	b.n	62fe <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x19e>
    63f2:	0000      	.short	0x0000
    63f4:	200000f4 	.word	0x200000f4
    63f8:	4804      	ldr	r0, [pc, #16]	; (640c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2ac>)
    63fa:	2100      	movs	r1, #0
    63fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
    6400:	7001      	strb	r1, [r0, #0]
    6402:	8042      	strh	r2, [r0, #2]
    6404:	1f00      	subs	r0, r0, #4
    6406:	f8a0 1001 	strh.w	r1, [r0, #1]
    640a:	4770      	bx	lr
    640c:	20000290 	.word	0x20000290

00006410 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    6410:	b5f0      	push	{r4, r5, r6, r7, lr}
    6412:	f06f 021f 	mvn.w	r2, #31
    6416:	0c01      	lsrs	r1, r0, #16
    6418:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    641c:	251f      	movs	r5, #31
    641e:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    6422:	3854      	subs	r0, #84	; 0x54
    6424:	d00d      	beq.n	6442 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    6426:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    642a:	3855      	subs	r0, #85	; 0x55
    642c:	d009      	beq.n	6442 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    642e:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    6432:	38aa      	subs	r0, #170	; 0xaa
    6434:	d005      	beq.n	6442 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    6436:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    643a:	38aa      	subs	r0, #170	; 0xaa
    643c:	d001      	beq.n	6442 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    643e:	2001      	movs	r0, #1
    6440:	e000      	b.n	6444 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    6442:	2000      	movs	r0, #0
    6444:	2200      	movs	r2, #0
    6446:	4613      	mov	r3, r2
    6448:	ea4f 0402 	mov.w	r4, r2
    644c:	ea82 0701 	eor.w	r7, r2, r1
    6450:	43ff      	mvns	r7, r7
    6452:	431f      	orrs	r7, r3
    6454:	1c7f      	adds	r7, r7, #1
    6456:	d00f      	beq.n	6478 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    6458:	f006 0701 	and.w	r7, r6, #1
    645c:	0852      	lsrs	r2, r2, #1
    645e:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    6462:	f005 0701 	and.w	r7, r5, #1
    6466:	085b      	lsrs	r3, r3, #1
    6468:	0876      	lsrs	r6, r6, #1
    646a:	086d      	lsrs	r5, r5, #1
    646c:	1c64      	adds	r4, r4, #1
    646e:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    6472:	2c16      	cmp	r4, #22
    6474:	d3ea      	bcc.n	644c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    6476:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6478:	2000      	movs	r0, #0
    647a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000647c <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY>:
    647c:	b510      	push	{r4, lr}
    647e:	e9d0 2100 	ldrd	r2, r1, [r0]
    6482:	4b09      	ldr	r3, [pc, #36]	; (64a8 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY+0x2c>)
    6484:	4c09      	ldr	r4, [pc, #36]	; (64ac <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY+0x30>)
    6486:	4353      	muls	r3, r2
    6488:	4354      	muls	r4, r2
    648a:	4051      	eors	r1, r2
    648c:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    6490:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    6494:	ea4f 41f1 	mov.w	r1, r1, ror #19
    6498:	e9c0 2100 	strd	r2, r1, [r0]
    649c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    64a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    64a4:	4618      	mov	r0, r3
    64a6:	bd10      	pop	{r4, pc}
    64a8:	c6ef3760 	.word	0xc6ef3760
    64ac:	9e3779bb 	.word	0x9e3779bb

000064b0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    64b0:	b570      	push	{r4, r5, r6, lr}
    64b2:	4604      	mov	r4, r0
    64b4:	7c00      	ldrb	r0, [r0, #16]
    64b6:	b300      	cbz	r0, 64fa <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    64b8:	2802      	cmp	r0, #2
    64ba:	d01e      	beq.n	64fa <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    64bc:	f05f 0001 	movs.w	r0, #1
    64c0:	f104 0149 	add.w	r1, r4, #73	; 0x49
    64c4:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    64c8:	460d      	mov	r5, r1
    64ca:	b1c0      	cbz	r0, 64fe <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    64cc:	7de0      	ldrb	r0, [r4, #23]
    64ce:	b1f0      	cbz	r0, 650e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    64d0:	f8d4 0011 	ldr.w	r0, [r4, #17]
    64d4:	f8c4 0049 	str.w	r0, [r4, #73]	; 0x49
    64d8:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    64dc:	f8a4 004d 	strh.w	r0, [r4, #77]	; 0x4d
    64e0:	7c20      	ldrb	r0, [r4, #16]
    64e2:	f007 fced 	bl	dec0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    64e6:	7620      	strb	r0, [r4, #24]
    64e8:	2008      	movs	r0, #8
    64ea:	7660      	strb	r0, [r4, #25]
    64ec:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    64f0:	4629      	mov	r1, r5
    64f2:	f007 fcd1 	bl	de98 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
    64f6:	b9a8      	cbnz	r0, 6524 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    64f8:	e00e      	b.n	6518 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    64fa:	2000      	movs	r0, #0
    64fc:	e7e0      	b.n	64c0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    64fe:	2000      	movs	r0, #0
    6500:	f7fe fb92 	bl	4c28 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    6504:	2800      	cmp	r0, #0
    6506:	d1eb      	bne.n	64e0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    6508:	f240 41aa 	movw	r1, #1194	; 0x4aa
    650c:	e001      	b.n	6512 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    650e:	f240 41ae 	movw	r1, #1198	; 0x4ae
    6512:	202d      	movs	r0, #45	; 0x2d
    6514:	f7fd fc8a 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6518:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    651c:	4629      	mov	r1, r5
    651e:	f007 fcc4 	bl	deaa <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    6522:	b100      	cbz	r0, 6526 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    6524:	2001      	movs	r0, #1
    6526:	76a0      	strb	r0, [r4, #26]
    6528:	7e20      	ldrb	r0, [r4, #24]
    652a:	b130      	cbz	r0, 653a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
    652c:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    6530:	f104 0150 	add.w	r1, r4, #80	; 0x50
    6534:	f006 ff06 	bl	d344 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    6538:	7660      	strb	r0, [r4, #25]
    653a:	2500      	movs	r5, #0
    653c:	6425      	str	r5, [r4, #64]	; 0x40
    653e:	f005 fb6f 	bl	bc20 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    6542:	6460      	str	r0, [r4, #68]	; 0x44
    6544:	2100      	movs	r1, #0
    6546:	4620      	mov	r0, r4
    6548:	f007 fdd9 	bl	e0fe <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8e>
    654c:	f884 5056 	strb.w	r5, [r4, #86]	; 0x56
    6550:	78a0      	ldrb	r0, [r4, #2]
    6552:	0740      	lsls	r0, r0, #29
    6554:	d505      	bpl.n	6562 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xb2>
    6556:	4620      	mov	r0, r4
    6558:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    655c:	2100      	movs	r1, #0
    655e:	f000 bdff 	b.w	7160 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x160>
    6562:	bd70      	pop	{r4, r5, r6, pc}

00006564 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA>:
    6564:	b508      	push	{r3, lr}
    6566:	f890 2094 	ldrb.w	r2, [r0, #148]	; 0x94
    656a:	f88d 2000 	strb.w	r2, [sp]
    656e:	9a00      	ldr	r2, [sp, #0]
    6570:	9200      	str	r2, [sp, #0]
    6572:	f89d 3000 	ldrb.w	r3, [sp]
    6576:	2200      	movs	r2, #0
    6578:	b163      	cbz	r3, 6594 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x30>
    657a:	704a      	strb	r2, [r1, #1]
    657c:	2317      	movs	r3, #23
    657e:	700b      	strb	r3, [r1, #0]
    6580:	f850 3f95 	ldr.w	r3, [r0, #149]!
    6584:	604b      	str	r3, [r1, #4]
    6586:	6843      	ldr	r3, [r0, #4]
    6588:	608b      	str	r3, [r1, #8]
    658a:	7a03      	ldrb	r3, [r0, #8]
    658c:	730b      	strb	r3, [r1, #12]
    658e:	f800 2c01 	strb.w	r2, [r0, #-1]
    6592:	e03b      	b.n	660c <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    6594:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
    6598:	f88d 3000 	strb.w	r3, [sp]
    659c:	9b00      	ldr	r3, [sp, #0]
    659e:	9300      	str	r3, [sp, #0]
    65a0:	f89d 3000 	ldrb.w	r3, [sp]
    65a4:	b143      	cbz	r3, 65b8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x54>
    65a6:	704a      	strb	r2, [r1, #1]
    65a8:	2305      	movs	r3, #5
    65aa:	700b      	strb	r3, [r1, #0]
    65ac:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
    65b0:	604b      	str	r3, [r1, #4]
    65b2:	f880 208e 	strb.w	r2, [r0, #142]	; 0x8e
    65b6:	e029      	b.n	660c <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    65b8:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    65bc:	f88d 3000 	strb.w	r3, [sp]
    65c0:	9b00      	ldr	r3, [sp, #0]
    65c2:	9300      	str	r3, [sp, #0]
    65c4:	f89d 3000 	ldrb.w	r3, [sp]
    65c8:	b11b      	cbz	r3, 65d2 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x6e>
    65ca:	bf00      	nop
    65cc:	f007 fd6e 	bl	e0ac <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c>
    65d0:	e01c      	b.n	660c <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    65d2:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    65d6:	f88d 3000 	strb.w	r3, [sp]
    65da:	9b00      	ldr	r3, [sp, #0]
    65dc:	9300      	str	r3, [sp, #0]
    65de:	f89d 3000 	ldrb.w	r3, [sp]
    65e2:	b1ab      	cbz	r3, 6610 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xac>
    65e4:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    65e8:	f88d 3000 	strb.w	r3, [sp]
    65ec:	9b00      	ldr	r3, [sp, #0]
    65ee:	9300      	str	r3, [sp, #0]
    65f0:	f89d 3000 	ldrb.w	r3, [sp]
    65f4:	2b00      	cmp	r3, #0
    65f6:	d1e9      	bne.n	65cc <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x68>
    65f8:	704a      	strb	r2, [r1, #1]
    65fa:	2314      	movs	r3, #20
    65fc:	700b      	strb	r3, [r1, #0]
    65fe:	f850 3f88 	ldr.w	r3, [r0, #136]!
    6602:	604b      	str	r3, [r1, #4]
    6604:	8883      	ldrh	r3, [r0, #4]
    6606:	810b      	strh	r3, [r1, #8]
    6608:	f800 2c02 	strb.w	r2, [r0, #-2]
    660c:	2001      	movs	r0, #1
    660e:	bd08      	pop	{r3, pc}
    6610:	2000      	movs	r0, #0
    6612:	bd08      	pop	{r3, pc}

00006614 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    6614:	b530      	push	{r4, r5, lr}
    6616:	460c      	mov	r4, r1
    6618:	b08d      	sub	sp, #52	; 0x34
    661a:	4605      	mov	r5, r0
    661c:	4601      	mov	r1, r0
    661e:	2220      	movs	r2, #32
    6620:	a802      	add	r0, sp, #8
    6622:	f005 fc72 	bl	bf0a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6626:	a80a      	add	r0, sp, #40	; 0x28
    6628:	f007 fe16 	bl	e258 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    662c:	7aa0      	ldrb	r0, [r4, #10]
    662e:	f88d 0018 	strb.w	r0, [sp, #24]
    6632:	7820      	ldrb	r0, [r4, #0]
    6634:	f88d 0008 	strb.w	r0, [sp, #8]
    6638:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    663c:	f8ad 0000 	strh.w	r0, [sp]
    6640:	f89d 0000 	ldrb.w	r0, [sp]
    6644:	f000 0101 	and.w	r1, r0, #1
    6648:	f3c0 0240 	ubfx	r2, r0, #1, #1
    664c:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    6650:	f3c0 0280 	ubfx	r2, r0, #2, #1
    6654:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    6658:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    665c:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    6660:	f3c0 1200 	ubfx	r2, r0, #4, #1
    6664:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    6668:	f3c0 1240 	ubfx	r2, r0, #5, #1
    666c:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    6670:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6674:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    6678:	f8ad 000a 	strh.w	r0, [sp, #10]
    667c:	7d20      	ldrb	r0, [r4, #20]
    667e:	2801      	cmp	r0, #1
    6680:	d006      	beq.n	6690 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    6682:	2802      	cmp	r0, #2
    6684:	d004      	beq.n	6690 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    6686:	f240 2175 	movw	r1, #629	; 0x275
    668a:	2006      	movs	r0, #6
    668c:	f7fd fbce 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6690:	f88d 000c 	strb.w	r0, [sp, #12]
    6694:	7a61      	ldrb	r1, [r4, #9]
    6696:	a80a      	add	r0, sp, #40	; 0x28
    6698:	f007 fdc5 	bl	e226 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    669c:	7d20      	ldrb	r0, [r4, #20]
    669e:	2101      	movs	r1, #1
    66a0:	2802      	cmp	r0, #2
    66a2:	d102      	bne.n	66aa <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    66a4:	7d60      	ldrb	r0, [r4, #21]
    66a6:	1c40      	adds	r0, r0, #1
    66a8:	b2c1      	uxtb	r1, r0
    66aa:	7ea0      	ldrb	r0, [r4, #26]
    66ac:	1c40      	adds	r0, r0, #1
    66ae:	b2c2      	uxtb	r2, r0
    66b0:	a80a      	add	r0, sp, #40	; 0x28
    66b2:	f007 fd7f 	bl	e1b4 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    66b6:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    66ba:	0700      	lsls	r0, r0, #28
    66bc:	d501      	bpl.n	66c2 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    66be:	2000      	movs	r0, #0
    66c0:	e020      	b.n	6704 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    66c2:	a80a      	add	r0, sp, #40	; 0x28
    66c4:	f007 fd88 	bl	e1d8 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    66c8:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    66cc:	2228      	movs	r2, #40	; 0x28
    66ce:	f000 fded 	bl	72ac <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    66d2:	f240 2171 	movw	r1, #625	; 0x271
    66d6:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    66da:	fbb0 f0f1 	udiv	r0, r0, r1
    66de:	4348      	muls	r0, r1
    66e0:	f8d4 1002 	ldr.w	r1, [r4, #2]
    66e4:	f240 2371 	movw	r3, #625	; 0x271
    66e8:	0a0a      	lsrs	r2, r1, #8
    66ea:	f240 2171 	movw	r1, #625	; 0x271
    66ee:	434a      	muls	r2, r1
    66f0:	f8d4 1005 	ldr.w	r1, [r4, #5]
    66f4:	0a09      	lsrs	r1, r1, #8
    66f6:	4359      	muls	r1, r3
    66f8:	4290      	cmp	r0, r2
    66fa:	d801      	bhi.n	6700 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    66fc:	9204      	str	r2, [sp, #16]
    66fe:	e004      	b.n	670a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    6700:	4288      	cmp	r0, r1
    6702:	d801      	bhi.n	6708 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    6704:	9004      	str	r0, [sp, #16]
    6706:	e000      	b.n	670a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    6708:	9104      	str	r1, [sp, #16]
    670a:	7ca0      	ldrb	r0, [r4, #18]
    670c:	f88d 0017 	strb.w	r0, [sp, #23]
    6710:	7e20      	ldrb	r0, [r4, #24]
    6712:	2801      	cmp	r0, #1
    6714:	d000      	beq.n	6718 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    6716:	2000      	movs	r0, #0
    6718:	f88d 0014 	strb.w	r0, [sp, #20]
    671c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    671e:	f006 fcca 	bl	d0b6 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    6722:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    6724:	f006 fd6a 	bl	d1fc <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    6728:	2220      	movs	r2, #32
    672a:	a902      	add	r1, sp, #8
    672c:	4628      	mov	r0, r5
    672e:	f005 fbec 	bl	bf0a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6732:	980a      	ldr	r0, [sp, #40]	; 0x28
    6734:	6228      	str	r0, [r5, #32]
    6736:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
    673a:	84a8      	strh	r0, [r5, #36]	; 0x24
    673c:	7ae0      	ldrb	r0, [r4, #11]
    673e:	b168      	cbz	r0, 675c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    6740:	2802      	cmp	r0, #2
    6742:	d00b      	beq.n	675c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    6744:	f05f 0001 	movs.w	r0, #1
    6748:	f885 004f 	strb.w	r0, [r5, #79]	; 0x4f
    674c:	68e0      	ldr	r0, [r4, #12]
    674e:	6528      	str	r0, [r5, #80]	; 0x50
    6750:	8a20      	ldrh	r0, [r4, #16]
    6752:	f8a5 0054 	strh.w	r0, [r5, #84]	; 0x54
    6756:	b00d      	add	sp, #52	; 0x34
    6758:	2000      	movs	r0, #0
    675a:	bd30      	pop	{r4, r5, pc}
    675c:	2000      	movs	r0, #0
    675e:	e7f3      	b.n	6748 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

00006760 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    6760:	4a0a      	ldr	r2, [pc, #40]	; (678c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    6762:	b510      	push	{r4, lr}
    6764:	2100      	movs	r1, #0
    6766:	7011      	strb	r1, [r2, #0]
    6768:	4c09      	ldr	r4, [pc, #36]	; (6790 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    676a:	6060      	str	r0, [r4, #4]
    676c:	f000 f822 	bl	67b4 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    6770:	b110      	cbz	r0, 6778 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    6772:	f240 312a 	movw	r1, #810	; 0x32a
    6776:	e004      	b.n	6782 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    6778:	68a0      	ldr	r0, [r4, #8]
    677a:	2800      	cmp	r0, #0
    677c:	d104      	bne.n	6788 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    677e:	f240 312d 	movw	r1, #813	; 0x32d
    6782:	202d      	movs	r0, #45	; 0x2d
    6784:	f7fd fb52 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6788:	bd10      	pop	{r4, pc}
    678a:	0000      	.short	0x0000
    678c:	200010fc 	.word	0x200010fc
    6790:	200000fc 	.word	0x200000fc

00006794 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    6794:	4902      	ldr	r1, [pc, #8]	; (67a0 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    6796:	4801      	ldr	r0, [pc, #4]	; (679c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    6798:	6088      	str	r0, [r1, #8]
    679a:	4770      	bx	lr
    679c:	00007294 	.word	0x00007294
    67a0:	200000fc 	.word	0x200000fc

000067a4 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    67a4:	4902      	ldr	r1, [pc, #8]	; (67b0 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    67a6:	6008      	str	r0, [r1, #0]
    67a8:	6889      	ldr	r1, [r1, #8]
    67aa:	6809      	ldr	r1, [r1, #0]
    67ac:	4708      	bx	r1
    67ae:	0000      	.short	0x0000
    67b0:	200000fc 	.word	0x200000fc

000067b4 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    67b4:	4808      	ldr	r0, [pc, #32]	; (67d8 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    67b6:	b510      	push	{r4, lr}
    67b8:	7800      	ldrb	r0, [r0, #0]
    67ba:	b110      	cbz	r0, 67c2 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    67bc:	240c      	movs	r4, #12
    67be:	4620      	mov	r0, r4
    67c0:	bd10      	pop	{r4, pc}
    67c2:	2400      	movs	r4, #0
    67c4:	2218      	movs	r2, #24
    67c6:	4621      	mov	r1, r4
    67c8:	4803      	ldr	r0, [pc, #12]	; (67d8 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    67ca:	f005 fc18 	bl	bffe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    67ce:	f004 f8c3 	bl	a958 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    67d2:	f003 fea5 	bl	a520 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    67d6:	e7f2      	b.n	67be <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    67d8:	200010fc 	.word	0x200010fc

000067dc <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    67dc:	4904      	ldr	r1, [pc, #16]	; (67f0 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    67de:	b510      	push	{r4, lr}
    67e0:	7809      	ldrb	r1, [r1, #0]
    67e2:	2901      	cmp	r1, #1
    67e4:	d101      	bne.n	67ea <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    67e6:	f000 fb81 	bl	6eec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
    67ea:	2000      	movs	r0, #0
    67ec:	bd10      	pop	{r4, pc}
    67ee:	0000      	.short	0x0000
    67f0:	200010fc 	.word	0x200010fc

000067f4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    67f4:	4902      	ldr	r1, [pc, #8]	; (6800 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    67f6:	4801      	ldr	r0, [pc, #4]	; (67fc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    67f8:	6008      	str	r0, [r1, #0]
    67fa:	4770      	bx	lr
    67fc:	00007039 	.word	0x00007039
    6800:	20000108 	.word	0x20000108
    6804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6808:	000f      	movs	r7, r1
    680a:	4604      	mov	r4, r0
    680c:	d023      	beq.n	6856 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x62>
    680e:	f104 0020 	add.w	r0, r4, #32
    6812:	4605      	mov	r5, r0
    6814:	f007 fd09 	bl	e22a <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    6818:	b9b0      	cbnz	r0, 6848 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x54>
    681a:	78a0      	ldrb	r0, [r4, #2]
    681c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    6820:	b350      	cbz	r0, 6878 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x84>
    6822:	4628      	mov	r0, r5
    6824:	f007 fcd8 	bl	e1d8 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    6828:	4606      	mov	r6, r0
    682a:	4628      	mov	r0, r5
    682c:	f007 fcfd 	bl	e22a <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    6830:	1a30      	subs	r0, r6, r0
    6832:	b2c0      	uxtb	r0, r0
    6834:	f007 fd4e 	bl	e2d4 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    6838:	4601      	mov	r1, r0
    683a:	4835      	ldr	r0, [pc, #212]	; (6910 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x11c>)
    683c:	6842      	ldr	r2, [r0, #4]
    683e:	4411      	add	r1, r2
    6840:	6041      	str	r1, [r0, #4]
    6842:	4628      	mov	r0, r5
    6844:	f007 fd0f 	bl	e266 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    6848:	4628      	mov	r0, r5
    684a:	f007 fcd1 	bl	e1f0 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    684e:	4601      	mov	r1, r0
    6850:	4620      	mov	r0, r4
    6852:	f007 fc90 	bl	e176 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    6856:	4d2f      	ldr	r5, [pc, #188]	; (6914 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x120>)
    6858:	f894 6056 	ldrb.w	r6, [r4, #86]	; 0x56
    685c:	2100      	movs	r1, #0
    685e:	6868      	ldr	r0, [r5, #4]
    6860:	8001      	strh	r1, [r0, #0]
    6862:	f007 fc9e 	bl	e1a2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    6866:	8860      	ldrh	r0, [r4, #2]
    6868:	2813      	cmp	r0, #19
    686a:	d013      	beq.n	6894 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa0>
    686c:	dc09      	bgt.n	6882 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8e>
    686e:	2810      	cmp	r0, #16
    6870:	d036      	beq.n	68e0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xec>
    6872:	2812      	cmp	r0, #18
    6874:	d109      	bne.n	688a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x96>
    6876:	e031      	b.n	68dc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe8>
    6878:	4620      	mov	r0, r4
    687a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    687e:	f000 bb35 	b.w	6eec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
    6882:	2815      	cmp	r0, #21
    6884:	d00f      	beq.n	68a6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    6886:	281d      	cmp	r0, #29
    6888:	d00d      	beq.n	68a6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    688a:	f240 616c 	movw	r1, #1644	; 0x66c
    688e:	202d      	movs	r0, #45	; 0x2d
    6890:	f7fd facc 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6894:	2100      	movs	r1, #0
    6896:	6868      	ldr	r0, [r5, #4]
    6898:	f007 f8c7 	bl	da2a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    689c:	2101      	movs	r1, #1
    689e:	6868      	ldr	r0, [r5, #4]
    68a0:	f007 fc7f 	bl	e1a2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    68a4:	e020      	b.n	68e8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    68a6:	2101      	movs	r1, #1
    68a8:	6868      	ldr	r0, [r5, #4]
    68aa:	f007 f8be 	bl	da2a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    68ae:	2101      	movs	r1, #1
    68b0:	6868      	ldr	r0, [r5, #4]
    68b2:	f007 fc76 	bl	e1a2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    68b6:	b136      	cbz	r6, 68c6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xd2>
    68b8:	f104 0157 	add.w	r1, r4, #87	; 0x57
    68bc:	6868      	ldr	r0, [r5, #4]
    68be:	f007 f8cf 	bl	da60 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    68c2:	2101      	movs	r1, #1
    68c4:	e006      	b.n	68d4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe0>
    68c6:	f104 0150 	add.w	r1, r4, #80	; 0x50
    68ca:	6868      	ldr	r0, [r5, #4]
    68cc:	f007 f8c8 	bl	da60 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    68d0:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
    68d4:	6868      	ldr	r0, [r5, #4]
    68d6:	f007 f8c9 	bl	da6c <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    68da:	e005      	b.n	68e8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    68dc:	2106      	movs	r1, #6
    68de:	e000      	b.n	68e2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xee>
    68e0:	2102      	movs	r1, #2
    68e2:	6868      	ldr	r0, [r5, #4]
    68e4:	f007 f8a1 	bl	da2a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    68e8:	4620      	mov	r0, r4
    68ea:	f000 fcaf 	bl	724c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24c>
    68ee:	8860      	ldrh	r0, [r4, #2]
    68f0:	281d      	cmp	r0, #29
    68f2:	d006      	beq.n	6902 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    68f4:	2815      	cmp	r0, #21
    68f6:	d004      	beq.n	6902 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    68f8:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    68fa:	6b21      	ldr	r1, [r4, #48]	; 0x30
    68fc:	6868      	ldr	r0, [r5, #4]
    68fe:	f007 f884 	bl	da0a <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>
    6902:	4639      	mov	r1, r7
    6904:	4620      	mov	r0, r4
    6906:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    690a:	f000 b9e5 	b.w	6cd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>
    690e:	0000      	.short	0x0000
    6910:	200010fc 	.word	0x200010fc
    6914:	200000fc 	.word	0x200000fc
    6918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    691c:	4d2e      	ldr	r5, [pc, #184]	; (69d8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e4>)
    691e:	4607      	mov	r7, r0
    6920:	7828      	ldrb	r0, [r5, #0]
    6922:	2802      	cmp	r0, #2
    6924:	d005      	beq.n	6932 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    6926:	7828      	ldrb	r0, [r5, #0]
    6928:	2803      	cmp	r0, #3
    692a:	d002      	beq.n	6932 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    692c:	f640 41f7 	movw	r1, #3319	; 0xcf7
    6930:	e029      	b.n	6986 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x192>
    6932:	4c2a      	ldr	r4, [pc, #168]	; (69dc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e8>)
    6934:	6820      	ldr	r0, [r4, #0]
    6936:	7b01      	ldrb	r1, [r0, #12]
    6938:	b109      	cbz	r1, 693e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14a>
    693a:	f007 fc27 	bl	e18c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11c>
    693e:	6860      	ldr	r0, [r4, #4]
    6940:	f04f 0800 	mov.w	r8, #0
    6944:	7802      	ldrb	r2, [r0, #0]
    6946:	f002 060f 	and.w	r6, r2, #15
    694a:	b357      	cbz	r7, 69a2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    694c:	6821      	ldr	r1, [r4, #0]
    694e:	f101 0349 	add.w	r3, r1, #73	; 0x49
    6952:	f891 1048 	ldrb.w	r1, [r1, #72]	; 0x48
    6956:	ebb1 1fd2 	cmp.w	r1, r2, lsr #7
    695a:	d122      	bne.n	69a2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    695c:	2206      	movs	r2, #6
    695e:	4619      	mov	r1, r3
    6960:	3009      	adds	r0, #9
    6962:	f005 fac0 	bl	bee6 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    6966:	b9e0      	cbnz	r0, 69a2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    6968:	4641      	mov	r1, r8
    696a:	6860      	ldr	r0, [r4, #4]
    696c:	f007 f83d 	bl	d9ea <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>
    6970:	b1b8      	cbz	r0, 69a2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    6972:	782a      	ldrb	r2, [r5, #0]
    6974:	6820      	ldr	r0, [r4, #0]
    6976:	4631      	mov	r1, r6
    6978:	2a02      	cmp	r2, #2
    697a:	d007      	beq.n	698c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x198>
    697c:	782a      	ldrb	r2, [r5, #0]
    697e:	2a03      	cmp	r2, #3
    6980:	d004      	beq.n	698c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x198>
    6982:	f44f 614d 	mov.w	r1, #3280	; 0xcd0
    6986:	202d      	movs	r0, #45	; 0x2d
    6988:	f7fd fa50 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    698c:	68a2      	ldr	r2, [r4, #8]
    698e:	782b      	ldrb	r3, [r5, #0]
    6990:	6952      	ldr	r2, [r2, #20]
    6992:	f06f 0607 	mvn.w	r6, #7
    6996:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    699a:	58d2      	ldr	r2, [r2, r3]
    699c:	4790      	blx	r2
    699e:	4606      	mov	r6, r0
    69a0:	e000      	b.n	69a4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1b0>
    69a2:	2601      	movs	r6, #1
    69a4:	7ba8      	ldrb	r0, [r5, #14]
    69a6:	b118      	cbz	r0, 69b0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1bc>
    69a8:	f003 ffd6 	bl	a958 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    69ac:	f003 fdb8 	bl	a520 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    69b0:	2e00      	cmp	r6, #0
    69b2:	d00f      	beq.n	69d4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e0>
    69b4:	6820      	ldr	r0, [r4, #0]
    69b6:	f007 fca3 	bl	e300 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    69ba:	b130      	cbz	r0, 69ca <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1d6>
    69bc:	f003 ffec 	bl	a998 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    69c0:	68a0      	ldr	r0, [r4, #8]
    69c2:	6880      	ldr	r0, [r0, #8]
    69c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    69c8:	4700      	bx	r0
    69ca:	6820      	ldr	r0, [r4, #0]
    69cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    69d0:	f000 ba8c 	b.w	6eec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
    69d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    69d8:	200010fc 	.word	0x200010fc
    69dc:	200000fc 	.word	0x200000fc
    69e0:	b510      	push	{r4, lr}
    69e2:	2903      	cmp	r1, #3
    69e4:	d002      	beq.n	69ec <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f8>
    69e6:	2905      	cmp	r1, #5
    69e8:	d10a      	bne.n	6a00 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    69ea:	e002      	b.n	69f2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1fe>
    69ec:	f000 fb7e 	bl	70ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xec>
    69f0:	e003      	b.n	69fa <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x206>
    69f2:	4904      	ldr	r1, [pc, #16]	; (6a04 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x210>)
    69f4:	6809      	ldr	r1, [r1, #0]
    69f6:	b109      	cbz	r1, 69fc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x208>
    69f8:	4788      	blx	r1
    69fa:	b108      	cbz	r0, 6a00 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    69fc:	2000      	movs	r0, #0
    69fe:	bd10      	pop	{r4, pc}
    6a00:	2001      	movs	r0, #1
    6a02:	bd10      	pop	{r4, pc}
    6a04:	20000108 	.word	0x20000108
    6a08:	4a09      	ldr	r2, [pc, #36]	; (6a30 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x23c>)
    6a0a:	0003      	movs	r3, r0
    6a0c:	6810      	ldr	r0, [r2, #0]
    6a0e:	d001      	beq.n	6a14 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x220>
    6a10:	f000 ba6c 	b.w	6eec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
    6a14:	2900      	cmp	r1, #0
    6a16:	d009      	beq.n	6a2c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x238>
    6a18:	6891      	ldr	r1, [r2, #8]
    6a1a:	4a06      	ldr	r2, [pc, #24]	; (6a34 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x240>)
    6a1c:	6909      	ldr	r1, [r1, #16]
    6a1e:	7812      	ldrb	r2, [r2, #0]
    6a20:	f06f 030f 	mvn.w	r3, #15
    6a24:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    6a28:	5889      	ldr	r1, [r1, r2]
    6a2a:	4708      	bx	r1
    6a2c:	4770      	bx	lr
    6a2e:	0000      	.short	0x0000
    6a30:	200000fc 	.word	0x200000fc
    6a34:	200010fc 	.word	0x200010fc
    6a38:	b570      	push	{r4, r5, r6, lr}
    6a3a:	4604      	mov	r4, r0
    6a3c:	8840      	ldrh	r0, [r0, #2]
    6a3e:	2810      	cmp	r0, #16
    6a40:	d019      	beq.n	6a76 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x282>
    6a42:	4d10      	ldr	r5, [pc, #64]	; (6a84 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x290>)
    6a44:	7ba8      	ldrb	r0, [r5, #14]
    6a46:	b120      	cbz	r0, 6a52 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x25e>
    6a48:	f003 fd8a 	bl	a560 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    6a4c:	2040      	movs	r0, #64	; 0x40
    6a4e:	f003 ff91 	bl	a974 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    6a52:	480d      	ldr	r0, [pc, #52]	; (6a88 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x294>)
    6a54:	6840      	ldr	r0, [r0, #4]
    6a56:	f004 fa4d 	bl	aef4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6a5a:	78a0      	ldrb	r0, [r4, #2]
    6a5c:	0740      	lsls	r0, r0, #29
    6a5e:	d404      	bmi.n	6a6a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x276>
    6a60:	2100      	movs	r1, #0
    6a62:	7922      	ldrb	r2, [r4, #4]
    6a64:	4608      	mov	r0, r1
    6a66:	f004 fad1 	bl	b00c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6a6a:	2000      	movs	r0, #0
    6a6c:	f004 f8d8 	bl	ac20 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    6a70:	2002      	movs	r0, #2
    6a72:	7028      	strb	r0, [r5, #0]
    6a74:	bd70      	pop	{r4, r5, r6, pc}
    6a76:	4620      	mov	r0, r4
    6a78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6a7c:	2101      	movs	r1, #1
    6a7e:	f7ff bec1 	b.w	6804 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    6a82:	0000      	.short	0x0000
    6a84:	200010fc 	.word	0x200010fc
    6a88:	200000fc 	.word	0x200000fc
    6a8c:	b510      	push	{r4, lr}
    6a8e:	4c12      	ldr	r4, [pc, #72]	; (6ad8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e4>)
    6a90:	6820      	ldr	r0, [r4, #0]
    6a92:	f000 f825 	bl	6ae0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    6a96:	6820      	ldr	r0, [r4, #0]
    6a98:	f007 fc32 	bl	e300 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    6a9c:	2800      	cmp	r0, #0
    6a9e:	6820      	ldr	r0, [r4, #0]
    6aa0:	d00b      	beq.n	6aba <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2c6>
    6aa2:	490e      	ldr	r1, [pc, #56]	; (6adc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>)
    6aa4:	780a      	ldrb	r2, [r1, #0]
    6aa6:	2a02      	cmp	r2, #2
    6aa8:	d00b      	beq.n	6ac2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    6aaa:	780a      	ldrb	r2, [r1, #0]
    6aac:	2a03      	cmp	r2, #3
    6aae:	d008      	beq.n	6ac2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    6ab0:	f640 31fe 	movw	r1, #3070	; 0xbfe
    6ab4:	202d      	movs	r0, #45	; 0x2d
    6ab6:	f7fd f9b9 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6aba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6abe:	f000 ba15 	b.w	6eec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
    6ac2:	68a2      	ldr	r2, [r4, #8]
    6ac4:	7809      	ldrb	r1, [r1, #0]
    6ac6:	68d2      	ldr	r2, [r2, #12]
    6ac8:	f06f 0307 	mvn.w	r3, #7
    6acc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    6ad0:	5851      	ldr	r1, [r2, r1]
    6ad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6ad6:	4708      	bx	r1
    6ad8:	200000fc 	.word	0x200000fc
    6adc:	200010fc 	.word	0x200010fc
    6ae0:	b510      	push	{r4, lr}
    6ae2:	7b01      	ldrb	r1, [r0, #12]
    6ae4:	b109      	cbz	r1, 6aea <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f6>
    6ae6:	f007 fb51 	bl	e18c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11c>
    6aea:	4805      	ldr	r0, [pc, #20]	; (6b00 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30c>)
    6aec:	7b80      	ldrb	r0, [r0, #14]
    6aee:	2800      	cmp	r0, #0
    6af0:	d005      	beq.n	6afe <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30a>
    6af2:	f003 ff31 	bl	a958 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6af6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6afa:	f003 bd11 	b.w	a520 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6afe:	bd10      	pop	{r4, pc}
    6b00:	200010fc 	.word	0x200010fc

00006b04 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    6b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6b08:	4d58      	ldr	r5, [pc, #352]	; (6c6c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>)
    6b0a:	4604      	mov	r4, r0
    6b0c:	b088      	sub	sp, #32
    6b0e:	7828      	ldrb	r0, [r5, #0]
    6b10:	bbf0      	cbnz	r0, 6b90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8c>
    6b12:	7820      	ldrb	r0, [r4, #0]
    6b14:	28ff      	cmp	r0, #255	; 0xff
    6b16:	d03c      	beq.n	6b92 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e>
    6b18:	2600      	movs	r6, #0
    6b1a:	81ae      	strh	r6, [r5, #12]
    6b1c:	606e      	str	r6, [r5, #4]
    6b1e:	706e      	strb	r6, [r5, #1]
    6b20:	70ae      	strb	r6, [r5, #2]
    6b22:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
    6b26:	4b52      	ldr	r3, [pc, #328]	; (6c70 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16c>)
    6b28:	f8df 8148 	ldr.w	r8, [pc, #328]	; 6c74 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x170>
    6b2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    6b2e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    6b32:	f8d8 0008 	ldr.w	r0, [r8, #8]
    6b36:	6840      	ldr	r0, [r0, #4]
    6b38:	9003      	str	r0, [sp, #12]
    6b3a:	4668      	mov	r0, sp
    6b3c:	f004 f844 	bl	abc8 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    6b40:	f004 f94c 	bl	addc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    6b44:	f004 fbb8 	bl	b2b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    6b48:	f003 ff06 	bl	a958 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6b4c:	f003 fce8 	bl	a520 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6b50:	4849      	ldr	r0, [pc, #292]	; (6c78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x174>)
    6b52:	f004 fa9d 	bl	b090 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    6b56:	4846      	ldr	r0, [pc, #280]	; (6c70 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16c>)
    6b58:	1f00      	subs	r0, r0, #4
    6b5a:	f004 faa3 	bl	b0a4 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    6b5e:	f104 0020 	add.w	r0, r4, #32
    6b62:	4607      	mov	r7, r0
    6b64:	f007 fb7f 	bl	e266 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    6b68:	4638      	mov	r0, r7
    6b6a:	f007 fb41 	bl	e1f0 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    6b6e:	4601      	mov	r1, r0
    6b70:	4620      	mov	r0, r4
    6b72:	f007 fb00 	bl	e176 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    6b76:	f994 000e 	ldrsb.w	r0, [r4, #14]
    6b7a:	f004 f9b5 	bl	aee8 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    6b7e:	7921      	ldrb	r1, [r4, #4]
    6b80:	2000      	movs	r0, #0
    6b82:	f003 ffa5 	bl	aad0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    6b86:	60a8      	str	r0, [r5, #8]
    6b88:	b138      	cbz	r0, 6b9a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x96>
    6b8a:	7ea0      	ldrb	r0, [r4, #26]
    6b8c:	b968      	cbnz	r0, 6baa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa6>
    6b8e:	e007      	b.n	6ba0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x9c>
    6b90:	e7ff      	b.n	6b92 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e>
    6b92:	200c      	movs	r0, #12
    6b94:	b008      	add	sp, #32
    6b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6b9a:	2001      	movs	r0, #1
    6b9c:	7028      	strb	r0, [r5, #0]
    6b9e:	e062      	b.n	6c66 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
    6ba0:	7e20      	ldrb	r0, [r4, #24]
    6ba2:	b910      	cbnz	r0, 6baa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa6>
    6ba4:	78a0      	ldrb	r0, [r4, #2]
    6ba6:	0740      	lsls	r0, r0, #29
    6ba8:	d529      	bpl.n	6bfe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfa>
    6baa:	f005 f839 	bl	bc20 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    6bae:	4682      	mov	sl, r0
    6bb0:	4651      	mov	r1, sl
    6bb2:	6c60      	ldr	r0, [r4, #68]	; 0x44
    6bb4:	f7fa fd3c 	bl	1630 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    6bb8:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 6c7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
    6bbc:	4607      	mov	r7, r0
    6bbe:	fb90 f1f9 	sdiv	r1, r0, r9
    6bc2:	fb09 7011 	mls	r0, r9, r1, r7
    6bc6:	4241      	negs	r1, r0
    6bc8:	4650      	mov	r0, sl
    6bca:	f7fa fcff 	bl	15cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    6bce:	6460      	str	r0, [r4, #68]	; 0x44
    6bd0:	fb97 f0f9 	sdiv	r0, r7, r9
    6bd4:	6c21      	ldr	r1, [r4, #64]	; 0x40
    6bd6:	4408      	add	r0, r1
    6bd8:	6420      	str	r0, [r4, #64]	; 0x40
    6bda:	f7fe fedf 	bl	599c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    6bde:	6c21      	ldr	r1, [r4, #64]	; 0x40
    6be0:	4288      	cmp	r0, r1
    6be2:	d80c      	bhi.n	6bfe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfa>
    6be4:	e9c4 6a10 	strd	r6, sl, [r4, #64]	; 0x40
    6be8:	2101      	movs	r1, #1
    6bea:	4620      	mov	r0, r4
    6bec:	f007 fa87 	bl	e0fe <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8e>
    6bf0:	78a0      	ldrb	r0, [r4, #2]
    6bf2:	0740      	lsls	r0, r0, #29
    6bf4:	d503      	bpl.n	6bfe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfa>
    6bf6:	2101      	movs	r1, #1
    6bf8:	4620      	mov	r0, r4
    6bfa:	f000 fab1 	bl	7160 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x160>
    6bfe:	f104 0130 	add.w	r1, r4, #48	; 0x30
    6c02:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    6c04:	f006 fac9 	bl	d19a <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    6c08:	f104 0138 	add.w	r1, r4, #56	; 0x38
    6c0c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    6c0e:	f006 fac7 	bl	d1a0 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    6c12:	f7fe ff29 	bl	5a68 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    6c16:	f8d8 0004 	ldr.w	r0, [r8, #4]
    6c1a:	1cc0      	adds	r0, r0, #3
    6c1c:	f006 fb85 	bl	d32a <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    6c20:	73a8      	strb	r0, [r5, #14]
    6c22:	78a0      	ldrb	r0, [r4, #2]
    6c24:	07c0      	lsls	r0, r0, #31
    6c26:	d01e      	beq.n	6c66 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
    6c28:	a904      	add	r1, sp, #16
    6c2a:	2000      	movs	r0, #0
    6c2c:	f006 f98f 	bl	cf4e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    6c30:	b120      	cbz	r0, 6c3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x138>
    6c32:	f640 11c9 	movw	r1, #2505	; 0x9c9
    6c36:	202d      	movs	r0, #45	; 0x2d
    6c38:	f7fd f8f8 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6c3c:	20ff      	movs	r0, #255	; 0xff
    6c3e:	73e8      	strb	r0, [r5, #15]
    6c40:	e00c      	b.n	6c5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x158>
    6c42:	9806      	ldr	r0, [sp, #24]
    6c44:	69e1      	ldr	r1, [r4, #28]
    6c46:	4281      	cmp	r1, r0
    6c48:	d008      	beq.n	6c5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x158>
    6c4a:	7881      	ldrb	r1, [r0, #2]
    6c4c:	73e9      	strb	r1, [r5, #15]
    6c4e:	f8d0 1003 	ldr.w	r1, [r0, #3]
    6c52:	6129      	str	r1, [r5, #16]
    6c54:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    6c58:	82a8      	strh	r0, [r5, #20]
    6c5a:	e004      	b.n	6c66 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
    6c5c:	a804      	add	r0, sp, #16
    6c5e:	f7fd fb1d 	bl	429c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    6c62:	2800      	cmp	r0, #0
    6c64:	d0ed      	beq.n	6c42 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x13e>
    6c66:	2000      	movs	r0, #0
    6c68:	e794      	b.n	6b94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x90>
    6c6a:	0000      	.short	0x0000
    6c6c:	200010fc 	.word	0x200010fc
    6c70:	00007274 	.word	0x00007274
    6c74:	200000fc 	.word	0x200000fc
    6c78:	8e89bed6 	.word	0x8e89bed6
    6c7c:	000f4240 	.word	0x000f4240
    6c80:	b510      	push	{r4, lr}
    6c82:	4604      	mov	r4, r0
    6c84:	f7ff ff3e 	bl	6b04 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    6c88:	2800      	cmp	r0, #0
    6c8a:	d108      	bne.n	6c9e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19a>
    6c8c:	4804      	ldr	r0, [pc, #16]	; (6ca0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19c>)
    6c8e:	7800      	ldrb	r0, [r0, #0]
    6c90:	2801      	cmp	r0, #1
    6c92:	d003      	beq.n	6c9c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x198>
    6c94:	2100      	movs	r1, #0
    6c96:	4620      	mov	r0, r4
    6c98:	f7ff fdb4 	bl	6804 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    6c9c:	2000      	movs	r0, #0
    6c9e:	bd10      	pop	{r4, pc}
    6ca0:	200010fc 	.word	0x200010fc
    6ca4:	480a      	ldr	r0, [pc, #40]	; (6cd0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1cc>)
    6ca6:	b510      	push	{r4, lr}
    6ca8:	490a      	ldr	r1, [pc, #40]	; (6cd4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d0>)
    6caa:	6804      	ldr	r4, [r0, #0]
    6cac:	7808      	ldrb	r0, [r1, #0]
    6cae:	2800      	cmp	r0, #0
    6cb0:	d00d      	beq.n	6cce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ca>
    6cb2:	7808      	ldrb	r0, [r1, #0]
    6cb4:	2802      	cmp	r0, #2
    6cb6:	d002      	beq.n	6cbe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ba>
    6cb8:	7808      	ldrb	r0, [r1, #0]
    6cba:	2803      	cmp	r0, #3
    6cbc:	d102      	bne.n	6cc4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1c0>
    6cbe:	4620      	mov	r0, r4
    6cc0:	f7ff ff0e 	bl	6ae0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    6cc4:	4620      	mov	r0, r4
    6cc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6cca:	f000 b90f 	b.w	6eec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
    6cce:	bd10      	pop	{r4, pc}
    6cd0:	200000fc 	.word	0x200000fc
    6cd4:	200010fc 	.word	0x200010fc
    6cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6cdc:	4604      	mov	r4, r0
    6cde:	4827      	ldr	r0, [pc, #156]	; (6d7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x278>)
    6ce0:	460d      	mov	r5, r1
    6ce2:	6840      	ldr	r0, [r0, #4]
    6ce4:	f004 f906 	bl	aef4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6ce8:	4e25      	ldr	r6, [pc, #148]	; (6d80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>)
    6cea:	2004      	movs	r0, #4
    6cec:	7030      	strb	r0, [r6, #0]
    6cee:	b325      	cbz	r5, 6d3a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x236>
    6cf0:	8860      	ldrh	r0, [r4, #2]
    6cf2:	2810      	cmp	r0, #16
    6cf4:	d02a      	beq.n	6d4c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x248>
    6cf6:	f104 0020 	add.w	r0, r4, #32
    6cfa:	4680      	mov	r8, r0
    6cfc:	68b5      	ldr	r5, [r6, #8]
    6cfe:	f007 fa6b 	bl	e1d8 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    6d02:	4607      	mov	r7, r0
    6d04:	4640      	mov	r0, r8
    6d06:	f007 fa90 	bl	e22a <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    6d0a:	1a38      	subs	r0, r7, r0
    6d0c:	1e40      	subs	r0, r0, #1
    6d0e:	b2c0      	uxtb	r0, r0
    6d10:	8861      	ldrh	r1, [r4, #2]
    6d12:	2228      	movs	r2, #40	; 0x28
    6d14:	f000 faea 	bl	72ec <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    6d18:	4405      	add	r5, r0
    6d1a:	78a0      	ldrb	r0, [r4, #2]
    6d1c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    6d20:	b130      	cbz	r0, 6d30 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x22c>
    6d22:	6870      	ldr	r0, [r6, #4]
    6d24:	4405      	add	r5, r0
    6d26:	f007 fad9 	bl	e2dc <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    6d2a:	4428      	add	r0, r5
    6d2c:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
    6d30:	7922      	ldrb	r2, [r4, #4]
    6d32:	4629      	mov	r1, r5
    6d34:	2000      	movs	r0, #0
    6d36:	f004 f8ed 	bl	af14 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    6d3a:	8860      	ldrh	r0, [r4, #2]
    6d3c:	2813      	cmp	r0, #19
    6d3e:	d013      	beq.n	6d68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    6d40:	dc09      	bgt.n	6d56 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x252>
    6d42:	2810      	cmp	r0, #16
    6d44:	d017      	beq.n	6d76 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x272>
    6d46:	2812      	cmp	r0, #18
    6d48:	d109      	bne.n	6d5e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x25a>
    6d4a:	e00d      	b.n	6d68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    6d4c:	7921      	ldrb	r1, [r4, #4]
    6d4e:	2000      	movs	r0, #0
    6d50:	f003 fe72 	bl	aa38 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    6d54:	e7f1      	b.n	6d3a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x236>
    6d56:	2815      	cmp	r0, #21
    6d58:	d006      	beq.n	6d68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    6d5a:	281d      	cmp	r0, #29
    6d5c:	d004      	beq.n	6d68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    6d5e:	f640 5185 	movw	r1, #3461	; 0xd85
    6d62:	202d      	movs	r0, #45	; 0x2d
    6d64:	f7fd f862 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6d68:	7922      	ldrb	r2, [r4, #4]
    6d6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6d6e:	2101      	movs	r1, #1
    6d70:	2000      	movs	r0, #0
    6d72:	f004 b94b 	b.w	b00c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d7a:	0000      	.short	0x0000
    6d7c:	200000fc 	.word	0x200000fc
    6d80:	200010fc 	.word	0x200010fc
    6d84:	b510      	push	{r4, lr}
    6d86:	4604      	mov	r4, r0
    6d88:	7800      	ldrb	r0, [r0, #0]
    6d8a:	460b      	mov	r3, r1
    6d8c:	f884 0095 	strb.w	r0, [r4, #149]	; 0x95
    6d90:	29ff      	cmp	r1, #255	; 0xff
    6d92:	d010      	beq.n	6db6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b2>
    6d94:	f104 0297 	add.w	r2, r4, #151	; 0x97
    6d98:	1e51      	subs	r1, r2, #1
    6d9a:	4618      	mov	r0, r3
    6d9c:	f7fe fd7c 	bl	5898 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    6da0:	b130      	cbz	r0, 6db0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ac>
    6da2:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
    6da6:	f040 0002 	orr.w	r0, r0, #2
    6daa:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    6dae:	e011      	b.n	6dd4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2d0>
    6db0:	f640 71bc 	movw	r1, #4028	; 0xfbc
    6db4:	e020      	b.n	6df8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f4>
    6db6:	4812      	ldr	r0, [pc, #72]	; (6e00 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2fc>)
    6db8:	6840      	ldr	r0, [r0, #4]
    6dba:	7801      	ldrb	r1, [r0, #0]
    6dbc:	f3c1 1180 	ubfx	r1, r1, #6, #1
    6dc0:	f884 1096 	strb.w	r1, [r4, #150]	; 0x96
    6dc4:	f8d0 1003 	ldr.w	r1, [r0, #3]
    6dc8:	f8c4 1097 	str.w	r1, [r4, #151]	; 0x97
    6dcc:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    6dd0:	f8a4 009b 	strh.w	r0, [r4, #155]	; 0x9b
    6dd4:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
    6dd8:	287f      	cmp	r0, #127	; 0x7f
    6dda:	d00b      	beq.n	6df4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f0>
    6ddc:	f884 009d 	strb.w	r0, [r4, #157]	; 0x9d
    6de0:	207f      	movs	r0, #127	; 0x7f
    6de2:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    6de6:	347e      	adds	r4, #126	; 0x7e
    6de8:	2001      	movs	r0, #1
    6dea:	75a0      	strb	r0, [r4, #22]
    6dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6df0:	f7ff b9a8 	b.w	6144 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    6df4:	f640 6137 	movw	r1, #3639	; 0xe37
    6df8:	202d      	movs	r0, #45	; 0x2d
    6dfa:	f7fd f817 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6dfe:	0000      	.short	0x0000
    6e00:	200000fc 	.word	0x200000fc
    6e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6e08:	4690      	mov	r8, r2
    6e0a:	460e      	mov	r6, r1
    6e0c:	4604      	mov	r4, r0
    6e0e:	2903      	cmp	r1, #3
    6e10:	d004      	beq.n	6e1c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x318>
    6e12:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    6e16:	b108      	cbz	r0, 6e1c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x318>
    6e18:	2001      	movs	r0, #1
    6e1a:	e000      	b.n	6e1e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31a>
    6e1c:	2000      	movs	r0, #0
    6e1e:	4681      	mov	r9, r0
    6e20:	f003 fdb4 	bl	a98c <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    6e24:	4605      	mov	r5, r0
    6e26:	2e03      	cmp	r6, #3
    6e28:	d003      	beq.n	6e32 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x32e>
    6e2a:	2701      	movs	r7, #1
    6e2c:	2e05      	cmp	r6, #5
    6e2e:	d005      	beq.n	6e3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x338>
    6e30:	e008      	b.n	6e44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x340>
    6e32:	78a0      	ldrb	r0, [r4, #2]
    6e34:	2702      	movs	r7, #2
    6e36:	f3c0 0040 	ubfx	r0, r0, #1, #1
    6e3a:	e001      	b.n	6e40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x33c>
    6e3c:	78a0      	ldrb	r0, [r4, #2]
    6e3e:	07c0      	lsls	r0, r0, #31
    6e40:	2800      	cmp	r0, #0
    6e42:	d04a      	beq.n	6eda <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d6>
    6e44:	f1b9 0f00 	cmp.w	r9, #0
    6e48:	d146      	bne.n	6ed8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d4>
    6e4a:	4826      	ldr	r0, [pc, #152]	; (6ee4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e0>)
    6e4c:	7b80      	ldrb	r0, [r0, #14]
    6e4e:	b140      	cbz	r0, 6e62 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x35e>
    6e50:	f006 fa6e 	bl	d330 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    6e54:	f888 0000 	strb.w	r0, [r8]
    6e58:	28ff      	cmp	r0, #255	; 0xff
    6e5a:	d002      	beq.n	6e62 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x35e>
    6e5c:	f7fe fd36 	bl	58cc <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    6e60:	4305      	orrs	r5, r0
    6e62:	4e21      	ldr	r6, [pc, #132]	; (6ee8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e4>)
    6e64:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
    6e68:	6870      	ldr	r0, [r6, #4]
    6e6a:	7801      	ldrb	r1, [r0, #0]
    6e6c:	f3c1 1180 	ubfx	r1, r1, #6, #1
    6e70:	4291      	cmp	r1, r2
    6e72:	d106      	bne.n	6e82 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x37e>
    6e74:	2206      	movs	r2, #6
    6e76:	f104 0150 	add.w	r1, r4, #80	; 0x50
    6e7a:	1cc0      	adds	r0, r0, #3
    6e7c:	f005 f833 	bl	bee6 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    6e80:	b130      	cbz	r0, 6e90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x38c>
    6e82:	2000      	movs	r0, #0
    6e84:	f898 1000 	ldrb.w	r1, [r8]
    6e88:	29ff      	cmp	r1, #255	; 0xff
    6e8a:	d007      	beq.n	6e9c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x398>
    6e8c:	b9a8      	cbnz	r0, 6eba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b6>
    6e8e:	e001      	b.n	6e94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x390>
    6e90:	2001      	movs	r0, #1
    6e92:	e7f7      	b.n	6e84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x380>
    6e94:	7e60      	ldrb	r0, [r4, #25]
    6e96:	4288      	cmp	r0, r1
    6e98:	d00f      	beq.n	6eba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b6>
    6e9a:	e008      	b.n	6eae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3aa>
    6e9c:	b138      	cbz	r0, 6eae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3aa>
    6e9e:	6871      	ldr	r1, [r6, #4]
    6ea0:	f811 0b03 	ldrb.w	r0, [r1], #3
    6ea4:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6ea8:	f007 f8e7 	bl	e07a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    6eac:	b128      	cbz	r0, 6eba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b6>
    6eae:	2000      	movs	r0, #0
    6eb0:	78a1      	ldrb	r1, [r4, #2]
    6eb2:	0749      	lsls	r1, r1, #29
    6eb4:	d503      	bpl.n	6ebe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ba>
    6eb6:	b990      	cbnz	r0, 6ede <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3da>
    6eb8:	e00e      	b.n	6ed8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d4>
    6eba:	2001      	movs	r0, #1
    6ebc:	e7f8      	b.n	6eb0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ac>
    6ebe:	b975      	cbnz	r5, 6ede <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3da>
    6ec0:	7be0      	ldrb	r0, [r4, #15]
    6ec2:	b108      	cbz	r0, 6ec8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c4>
    6ec4:	42b8      	cmp	r0, r7
    6ec6:	d107      	bne.n	6ed8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d4>
    6ec8:	6871      	ldr	r1, [r6, #4]
    6eca:	f811 0b03 	ldrb.w	r0, [r1], #3
    6ece:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6ed2:	f007 f8d2 	bl	e07a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    6ed6:	b110      	cbz	r0, 6ede <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3da>
    6ed8:	2000      	movs	r0, #0
    6eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6ede:	2001      	movs	r0, #1
    6ee0:	e7fb      	b.n	6eda <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d6>
    6ee2:	0000      	.short	0x0000
    6ee4:	200010fc 	.word	0x200010fc
    6ee8:	200000fc 	.word	0x200000fc
    6eec:	b570      	push	{r4, r5, r6, lr}
    6eee:	4604      	mov	r4, r0
    6ef0:	6a80      	ldr	r0, [r0, #40]	; 0x28
    6ef2:	4d13      	ldr	r5, [pc, #76]	; (6f40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x43c>)
    6ef4:	1c40      	adds	r0, r0, #1
    6ef6:	62a0      	str	r0, [r4, #40]	; 0x28
    6ef8:	7ba8      	ldrb	r0, [r5, #14]
    6efa:	2600      	movs	r6, #0
    6efc:	b120      	cbz	r0, 6f08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x404>
    6efe:	f003 fd2b 	bl	a958 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6f02:	f003 fb0d 	bl	a520 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6f06:	73ae      	strb	r6, [r5, #14]
    6f08:	702e      	strb	r6, [r5, #0]
    6f0a:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
    6f0e:	b108      	cbz	r0, 6f14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x410>
    6f10:	2101      	movs	r1, #1
    6f12:	e00f      	b.n	6f34 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x430>
    6f14:	7b60      	ldrb	r0, [r4, #13]
    6f16:	b160      	cbz	r0, 6f32 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42e>
    6f18:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    6f1a:	4288      	cmp	r0, r1
    6f1c:	d809      	bhi.n	6f32 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42e>
    6f1e:	2101      	movs	r1, #1
    6f20:	4620      	mov	r0, r4
    6f22:	f007 fa02 	bl	e32a <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    6f26:	78a0      	ldrb	r0, [r4, #2]
    6f28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6f2c:	07c0      	lsls	r0, r0, #31
    6f2e:	f7ff b909 	b.w	6144 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    6f32:	2100      	movs	r1, #0
    6f34:	4620      	mov	r0, r4
    6f36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6f3a:	f007 b9f6 	b.w	e32a <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    6f3e:	0000      	.short	0x0000
    6f40:	200010fc 	.word	0x200010fc
    6f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6f48:	4604      	mov	r4, r0
    6f4a:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
    6f4e:	4617      	mov	r7, r2
    6f50:	460d      	mov	r5, r1
    6f52:	f88d 0000 	strb.w	r0, [sp]
    6f56:	9800      	ldr	r0, [sp, #0]
    6f58:	9000      	str	r0, [sp, #0]
    6f5a:	f89d 0000 	ldrb.w	r0, [sp]
    6f5e:	b110      	cbz	r0, 6f66 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x462>
    6f60:	f640 4132 	movw	r1, #3122	; 0xc32
    6f64:	e054      	b.n	7010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>
    6f66:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    6f6a:	8828      	ldrh	r0, [r5, #0]
    6f6c:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    6f70:	2b00      	cmp	r3, #0
    6f72:	d15d      	bne.n	7030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>
    6f74:	68e8      	ldr	r0, [r5, #12]
    6f76:	f006 fa39 	bl	d3ec <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    6f7a:	f8a4 007e 	strh.w	r0, [r4, #126]	; 0x7e
    6f7e:	8aa8      	ldrh	r0, [r5, #20]
    6f80:	f8a4 0080 	strh.w	r0, [r4, #128]	; 0x80
    6f84:	8ae8      	ldrh	r0, [r5, #22]
    6f86:	f8a4 0082 	strh.w	r0, [r4, #130]	; 0x82
    6f8a:	f895 0175 	ldrb.w	r0, [r5, #373]	; 0x175
    6f8e:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
    6f92:	7e21      	ldrb	r1, [r4, #24]
    6f94:	f104 0849 	add.w	r8, r4, #73	; 0x49
    6f98:	2600      	movs	r6, #0
    6f9a:	b129      	cbz	r1, 6fa8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a4>
    6f9c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    6fa0:	4641      	mov	r1, r8
    6fa2:	f006 ff82 	bl	deaa <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    6fa6:	b940      	cbnz	r0, 6fba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b6>
    6fa8:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    6fac:	b170      	cbz	r0, 6fcc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c8>
    6fae:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    6fb2:	4641      	mov	r1, r8
    6fb4:	f006 ff70 	bl	de98 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
    6fb8:	b140      	cbz	r0, 6fcc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c8>
    6fba:	f8d4 0049 	ldr.w	r0, [r4, #73]	; 0x49
    6fbe:	f8c4 0072 	str.w	r0, [r4, #114]	; 0x72
    6fc2:	f8b4 004d 	ldrh.w	r0, [r4, #77]	; 0x4d
    6fc6:	f8a4 0076 	strh.w	r0, [r4, #118]	; 0x76
    6fca:	e003      	b.n	6fd4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4d0>
    6fcc:	f8c4 6072 	str.w	r6, [r4, #114]	; 0x72
    6fd0:	f8a4 6076 	strh.w	r6, [r4, #118]	; 0x76
    6fd4:	4817      	ldr	r0, [pc, #92]	; (7034 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34>)
    6fd6:	2fff      	cmp	r7, #255	; 0xff
    6fd8:	6840      	ldr	r0, [r0, #4]
    6fda:	7801      	ldrb	r1, [r0, #0]
    6fdc:	f3c1 1180 	ubfx	r1, r1, #6, #1
    6fe0:	f884 106b 	strb.w	r1, [r4, #107]	; 0x6b
    6fe4:	f850 1f03 	ldr.w	r1, [r0, #3]!
    6fe8:	d015      	beq.n	7016 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16>
    6fea:	67a1      	str	r1, [r4, #120]	; 0x78
    6fec:	8880      	ldrh	r0, [r0, #4]
    6fee:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
    6ff2:	f104 026c 	add.w	r2, r4, #108	; 0x6c
    6ff6:	1e51      	subs	r1, r2, #1
    6ff8:	4638      	mov	r0, r7
    6ffa:	f7fe fc4d 	bl	5898 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    6ffe:	b128      	cbz	r0, 700c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>
    7000:	f814 0f6b 	ldrb.w	r0, [r4, #107]!
    7004:	f040 0002 	orr.w	r0, r0, #2
    7008:	7020      	strb	r0, [r4, #0]
    700a:	e00a      	b.n	7022 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x22>
    700c:	f640 4153 	movw	r1, #3155	; 0xc53
    7010:	202d      	movs	r0, #45	; 0x2d
    7012:	f7fc ff0b 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7016:	f844 1f6c 	str.w	r1, [r4, #108]!
    701a:	8880      	ldrh	r0, [r0, #4]
    701c:	80a0      	strh	r0, [r4, #4]
    701e:	60e6      	str	r6, [r4, #12]
    7020:	8226      	strh	r6, [r4, #16]
    7022:	8828      	ldrh	r0, [r5, #0]
    7024:	f7fd fb1c 	bl	4660 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7028:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    702c:	f005 be6c 	b.w	cd08 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    7030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7034:	200000fc 	.word	0x200000fc
    7038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    703c:	4604      	mov	r4, r0
    703e:	20ff      	movs	r0, #255	; 0xff
    7040:	f88d 0000 	strb.w	r0, [sp]
    7044:	2601      	movs	r6, #1
    7046:	466a      	mov	r2, sp
    7048:	2105      	movs	r1, #5
    704a:	4620      	mov	r0, r4
    704c:	f7ff feda 	bl	6e04 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x300>
    7050:	b3e8      	cbz	r0, 70ce <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xce>
    7052:	4d24      	ldr	r5, [pc, #144]	; (70e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe4>)
    7054:	4f24      	ldr	r7, [pc, #144]	; (70e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe8>)
    7056:	46b0      	mov	r8, r6
    7058:	6868      	ldr	r0, [r5, #4]
    705a:	7bfa      	ldrb	r2, [r7, #15]
    705c:	f04f 0900 	mov.w	r9, #0
    7060:	7801      	ldrb	r1, [r0, #0]
    7062:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7066:	4291      	cmp	r1, r2
    7068:	d106      	bne.n	7078 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x78>
    706a:	2206      	movs	r2, #6
    706c:	f107 0110 	add.w	r1, r7, #16
    7070:	1cc0      	adds	r0, r0, #3
    7072:	f004 ff38 	bl	bee6 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    7076:	b350      	cbz	r0, 70ce <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xce>
    7078:	686a      	ldr	r2, [r5, #4]
    707a:	69e0      	ldr	r0, [r4, #28]
    707c:	7812      	ldrb	r2, [r2, #0]
    707e:	f810 1f85 	ldrb.w	r1, [r0, #133]!
    7082:	f3c2 1240 	ubfx	r2, r2, #5, #1
    7086:	4011      	ands	r1, r2
    7088:	7001      	strb	r1, [r0, #0]
    708a:	2201      	movs	r2, #1
    708c:	4620      	mov	r0, r4
    708e:	69e1      	ldr	r1, [r4, #28]
    7090:	f000 f894 	bl	71bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bc>
    7094:	2300      	movs	r3, #0
    7096:	f89d 2000 	ldrb.w	r2, [sp]
    709a:	4620      	mov	r0, r4
    709c:	69e1      	ldr	r1, [r4, #28]
    709e:	f7ff ff51 	bl	6f44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x440>
    70a2:	f884 8064 	strb.w	r8, [r4, #100]	; 0x64
    70a6:	f7ff f84d 	bl	6144 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    70aa:	f887 9000 	strb.w	r9, [r7]
    70ae:	2200      	movs	r2, #0
    70b0:	4621      	mov	r1, r4
    70b2:	69e0      	ldr	r0, [r4, #28]
    70b4:	f000 fa58 	bl	7568 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
    70b8:	6868      	ldr	r0, [r5, #4]
    70ba:	69e1      	ldr	r1, [r4, #28]
    70bc:	f8d0 2003 	ldr.w	r2, [r0, #3]
    70c0:	f841 2f03 	str.w	r2, [r1, #3]!
    70c4:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    70c8:	808a      	strh	r2, [r1, #4]
    70ca:	7800      	ldrb	r0, [r0, #0]
    70cc:	e000      	b.n	70d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd0>
    70ce:	e004      	b.n	70da <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xda>
    70d0:	69e1      	ldr	r1, [r4, #28]
    70d2:	f3c0 1080 	ubfx	r0, r0, #6, #1
    70d6:	7088      	strb	r0, [r1, #2]
    70d8:	e000      	b.n	70dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc>
    70da:	2600      	movs	r6, #0
    70dc:	4630      	mov	r0, r6
    70de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    70e2:	0000      	.short	0x0000
    70e4:	200000fc 	.word	0x200000fc
    70e8:	200010fc 	.word	0x200010fc
    70ec:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    70ee:	4604      	mov	r4, r0
    70f0:	20ff      	movs	r0, #255	; 0xff
    70f2:	f88d 0000 	strb.w	r0, [sp]
    70f6:	2501      	movs	r5, #1
    70f8:	466a      	mov	r2, sp
    70fa:	2103      	movs	r1, #3
    70fc:	4620      	mov	r0, r4
    70fe:	f7ff fe81 	bl	6e04 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x300>
    7102:	b328      	cbz	r0, 7150 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x150>
    7104:	7b20      	ldrb	r0, [r4, #12]
    7106:	b168      	cbz	r0, 7124 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x124>
    7108:	f894 0094 	ldrb.w	r0, [r4, #148]	; 0x94
    710c:	f88d 0004 	strb.w	r0, [sp, #4]
    7110:	9801      	ldr	r0, [sp, #4]
    7112:	9001      	str	r0, [sp, #4]
    7114:	f89d 0004 	ldrb.w	r0, [sp, #4]
    7118:	b920      	cbnz	r0, 7124 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x124>
    711a:	f89d 1000 	ldrb.w	r1, [sp]
    711e:	4620      	mov	r0, r4
    7120:	f7ff fe30 	bl	6d84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    7124:	4e0c      	ldr	r6, [pc, #48]	; (7158 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x158>)
    7126:	2100      	movs	r1, #0
    7128:	6870      	ldr	r0, [r6, #4]
    712a:	8001      	strh	r1, [r0, #0]
    712c:	2104      	movs	r1, #4
    712e:	f006 fc7c 	bl	da2a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7132:	4620      	mov	r0, r4
    7134:	f000 f88a 	bl	724c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24c>
    7138:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    713a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    713c:	6870      	ldr	r0, [r6, #4]
    713e:	f006 fcab 	bl	da98 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>
    7142:	4906      	ldr	r1, [pc, #24]	; (715c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15c>)
    7144:	2005      	movs	r0, #5
    7146:	7008      	strb	r0, [r1, #0]
    7148:	6870      	ldr	r0, [r6, #4]
    714a:	f003 fed3 	bl	aef4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    714e:	e000      	b.n	7152 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x152>
    7150:	2500      	movs	r5, #0
    7152:	4628      	mov	r0, r5
    7154:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    7156:	0000      	.short	0x0000
    7158:	200000fc 	.word	0x200000fc
    715c:	200010fc 	.word	0x200010fc
    7160:	b570      	push	{r4, r5, r6, lr}
    7162:	4604      	mov	r4, r0
    7164:	460e      	mov	r6, r1
    7166:	7e40      	ldrb	r0, [r0, #25]
    7168:	f7fe fb64 	bl	5834 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    716c:	0005      	movs	r5, r0
    716e:	d019      	beq.n	71a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a4>
    7170:	2110      	movs	r1, #16
    7172:	f006 fac7 	bl	d704 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    7176:	2800      	cmp	r0, #0
    7178:	d114      	bne.n	71a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a4>
    717a:	2001      	movs	r0, #1
    717c:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    7180:	f104 0157 	add.w	r1, r4, #87	; 0x57
    7184:	4632      	mov	r2, r6
    7186:	460c      	mov	r4, r1
    7188:	4628      	mov	r0, r5
    718a:	f006 f873 	bl	d274 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    718e:	4621      	mov	r1, r4
    7190:	4c05      	ldr	r4, [pc, #20]	; (71a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a8>)
    7192:	6860      	ldr	r0, [r4, #4]
    7194:	f006 fc64 	bl	da60 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7198:	6860      	ldr	r0, [r4, #4]
    719a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    719e:	2101      	movs	r1, #1
    71a0:	f006 bc64 	b.w	da6c <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    71a4:	bd70      	pop	{r4, r5, r6, pc}
    71a6:	0000      	.short	0x0000
    71a8:	200000fc 	.word	0x200000fc
    71ac:	4802      	ldr	r0, [pc, #8]	; (71b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b8>)
    71ae:	2101      	movs	r1, #1
    71b0:	6800      	ldr	r0, [r0, #0]
    71b2:	f7ff bb27 	b.w	6804 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    71b6:	0000      	.short	0x0000
    71b8:	200000fc 	.word	0x200000fc
    71bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    71c0:	4e21      	ldr	r6, [pc, #132]	; (7248 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x248>)
    71c2:	4680      	mov	r8, r0
    71c4:	460c      	mov	r4, r1
    71c6:	6870      	ldr	r0, [r6, #4]
    71c8:	4615      	mov	r5, r2
    71ca:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    71ce:	6121      	str	r1, [r4, #16]
    71d0:	8881      	ldrh	r1, [r0, #4]
    71d2:	8321      	strh	r1, [r4, #24]
    71d4:	7981      	ldrb	r1, [r0, #6]
    71d6:	76a1      	strb	r1, [r4, #26]
    71d8:	8940      	ldrh	r0, [r0, #10]
    71da:	f006 f903 	bl	d3e4 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    71de:	4607      	mov	r7, r0
    71e0:	60e0      	str	r0, [r4, #12]
    71e2:	6870      	ldr	r0, [r6, #4]
    71e4:	4639      	mov	r1, r7
    71e6:	7d80      	ldrb	r0, [r0, #22]
    71e8:	f006 fa87 	bl	d6fa <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    71ec:	83a0      	strh	r0, [r4, #28]
    71ee:	6870      	ldr	r0, [r6, #4]
    71f0:	4639      	mov	r1, r7
    71f2:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    71f6:	f006 fa7c 	bl	d6f2 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    71fa:	6220      	str	r0, [r4, #32]
    71fc:	6870      	ldr	r0, [r6, #4]
    71fe:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    7202:	82a1      	strh	r1, [r4, #20]
    7204:	8841      	ldrh	r1, [r0, #2]
    7206:	82e1      	strh	r1, [r4, #22]
    7208:	6841      	ldr	r1, [r0, #4]
    720a:	f8c4 1086 	str.w	r1, [r4, #134]	; 0x86
    720e:	7a01      	ldrb	r1, [r0, #8]
    7210:	f884 108a 	strb.w	r1, [r4, #138]	; 0x8a
    7214:	7a41      	ldrb	r1, [r0, #9]
    7216:	f001 011f 	and.w	r1, r1, #31
    721a:	f884 1091 	strb.w	r1, [r4, #145]	; 0x91
    721e:	7a40      	ldrb	r0, [r0, #9]
    7220:	0940      	lsrs	r0, r0, #5
    7222:	f884 0175 	strb.w	r0, [r4, #373]	; 0x175
    7226:	f104 0062 	add.w	r0, r4, #98	; 0x62
    722a:	7205      	strb	r5, [r0, #8]
    722c:	7245      	strb	r5, [r0, #9]
    722e:	2101      	movs	r1, #1
    7230:	7281      	strb	r1, [r0, #10]
    7232:	2100      	movs	r1, #0
    7234:	3836      	subs	r0, #54	; 0x36
    7236:	f006 fda3 	bl	dd80 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    723a:	f898 000e 	ldrb.w	r0, [r8, #14]
    723e:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
    7242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7246:	0000      	.short	0x0000
    7248:	200000fc 	.word	0x200000fc
    724c:	b570      	push	{r4, r5, r6, lr}
    724e:	4d07      	ldr	r5, [pc, #28]	; (726c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26c>)
    7250:	4604      	mov	r4, r0
    7252:	f100 0149 	add.w	r1, r0, #73	; 0x49
    7256:	6868      	ldr	r0, [r5, #4]
    7258:	f006 fc0f 	bl	da7a <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    725c:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    7260:	6868      	ldr	r0, [r5, #4]
    7262:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7266:	f006 bc0e 	b.w	da86 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    726a:	0000      	.short	0x0000
    726c:	200000fc 	.word	0x200000fc
    7270:	00555555 	.word	0x00555555
    7274:	00006a8d 	.word	0x00006a8d
    7278:	00006919 	.word	0x00006919
    727c:	00006a09 	.word	0x00006a09
    7280:	00000000 	.word	0x00000000
    7284:	000069e1 	.word	0x000069e1
    7288:	00006a39 	.word	0x00006a39
    728c:	0000e0a1 	.word	0x0000e0a1
    7290:	0000e0a7 	.word	0x0000e0a7
    7294:	00006c81 	.word	0x00006c81
    7298:	00006ca5 	.word	0x00006ca5
    729c:	000071ad 	.word	0x000071ad
    72a0:	00007290 	.word	0x00007290
    72a4:	00007288 	.word	0x00007288
    72a8:	00007284 	.word	0x00007284

000072ac <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    72ac:	b510      	push	{r4, lr}
    72ae:	1e42      	subs	r2, r0, #1
    72b0:	2a02      	cmp	r2, #2
    72b2:	d901      	bls.n	72b8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    72b4:	21ca      	movs	r1, #202	; 0xca
    72b6:	e009      	b.n	72cc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    72b8:	1e40      	subs	r0, r0, #1
    72ba:	2910      	cmp	r1, #16
    72bc:	d009      	beq.n	72d2 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    72be:	2912      	cmp	r1, #18
    72c0:	d00c      	beq.n	72dc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    72c2:	2913      	cmp	r1, #19
    72c4:	d00a      	beq.n	72dc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    72c6:	2915      	cmp	r1, #21
    72c8:	d005      	beq.n	72d6 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    72ca:	21d8      	movs	r1, #216	; 0xd8
    72cc:	202f      	movs	r0, #47	; 0x2f
    72ce:	f7fc fdad 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    72d2:	4905      	ldr	r1, [pc, #20]	; (72e8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    72d4:	e004      	b.n	72e0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    72d6:	4904      	ldr	r1, [pc, #16]	; (72e8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    72d8:	1d89      	adds	r1, r1, #6
    72da:	e001      	b.n	72e0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    72dc:	4902      	ldr	r1, [pc, #8]	; (72e8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    72de:	1f89      	subs	r1, r1, #6
    72e0:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    72e4:	bd10      	pop	{r4, pc}
    72e6:	0000      	.short	0x0000
    72e8:	0000e2f4 	.word	0x0000e2f4

000072ec <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    72ec:	1e42      	subs	r2, r0, #1
    72ee:	b510      	push	{r4, lr}
    72f0:	b2d2      	uxtb	r2, r2
    72f2:	2a01      	cmp	r2, #1
    72f4:	d903      	bls.n	72fe <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    72f6:	291d      	cmp	r1, #29
    72f8:	d001      	beq.n	72fe <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    72fa:	21ee      	movs	r1, #238	; 0xee
    72fc:	e00d      	b.n	731a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    72fe:	2913      	cmp	r1, #19
    7300:	d013      	beq.n	732a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    7302:	dc04      	bgt.n	730e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    7304:	2910      	cmp	r1, #16
    7306:	d00b      	beq.n	7320 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    7308:	2912      	cmp	r1, #18
    730a:	d104      	bne.n	7316 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    730c:	e00d      	b.n	732a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    730e:	2915      	cmp	r1, #21
    7310:	d008      	beq.n	7324 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    7312:	291d      	cmp	r1, #29
    7314:	d00e      	beq.n	7334 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    7316:	f44f 7181 	mov.w	r1, #258	; 0x102
    731a:	202f      	movs	r0, #47	; 0x2f
    731c:	f7fc fd86 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7320:	4807      	ldr	r0, [pc, #28]	; (7340 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    7322:	e004      	b.n	732e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    7324:	4806      	ldr	r0, [pc, #24]	; (7340 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    7326:	3008      	adds	r0, #8
    7328:	e001      	b.n	732e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    732a:	4805      	ldr	r0, [pc, #20]	; (7340 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    732c:	1d00      	adds	r0, r0, #4
    732e:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    7332:	bd10      	pop	{r4, pc}
    7334:	f240 315a 	movw	r1, #858	; 0x35a
    7338:	fb10 f001 	smulbb	r0, r0, r1
    733c:	bd10      	pop	{r4, pc}
    733e:	0000      	.short	0x0000
    7340:	0000e2e2 	.word	0x0000e2e2

00007344 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    7344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7348:	4604      	mov	r4, r0
    734a:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    734e:	4615      	mov	r5, r2
    7350:	460f      	mov	r7, r1
    7352:	2800      	cmp	r0, #0
    7354:	d157      	bne.n	7406 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc2>
    7356:	4621      	mov	r1, r4
    7358:	4841      	ldr	r0, [pc, #260]	; (7460 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x11c>)
    735a:	f7fb f83b 	bl	23d4 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    735e:	4606      	mov	r6, r0
    7360:	2820      	cmp	r0, #32
    7362:	d050      	beq.n	7406 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc2>
    7364:	2234      	movs	r2, #52	; 0x34
    7366:	2100      	movs	r1, #0
    7368:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    736c:	f004 fe47 	bl	bffe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7370:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
    7374:	2601      	movs	r6, #1
    7376:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
    737a:	f884 60b4 	strb.w	r6, [r4, #180]	; 0xb4
    737e:	b13f      	cbz	r7, 7390 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4c>
    7380:	2000      	movs	r0, #0
    7382:	f000 fbf9 	bl	7b78 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x610>
    7386:	f000 0007 	and.w	r0, r0, #7
    738a:	1c40      	adds	r0, r0, #1
    738c:	f887 0124 	strb.w	r0, [r7, #292]	; 0x124
    7390:	4620      	mov	r0, r4
    7392:	f007 f98f 	bl	e6b4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2dc>
    7396:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    739a:	2003      	movs	r0, #3
    739c:	f884 00c2 	strb.w	r0, [r4, #194]	; 0xc2
    73a0:	f884 60c3 	strb.w	r6, [r4, #195]	; 0xc3
    73a4:	2700      	movs	r7, #0
    73a6:	f804 7fb8 	strb.w	r7, [r4, #184]!
    73aa:	f7fa fa7f 	bl	18ac <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    73ae:	8921      	ldrh	r1, [r4, #8]
    73b0:	3cb8      	subs	r4, #184	; 0xb8
    73b2:	4288      	cmp	r0, r1
    73b4:	d800      	bhi.n	73b8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x74>
    73b6:	4608      	mov	r0, r1
    73b8:	f200 60bf 	addw	r0, r0, #1727	; 0x6bf
    73bc:	fa1f f880 	uxth.w	r8, r0
    73c0:	4620      	mov	r0, r4
    73c2:	f006 fe1a 	bl	dffa <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    73c6:	b308      	cbz	r0, 740c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc8>
    73c8:	f008 fbd6 	bl	fb78 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    73cc:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    73d0:	b281      	uxth	r1, r0
    73d2:	4628      	mov	r0, r5
    73d4:	f004 fc58 	bl	bc88 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    73d8:	4428      	add	r0, r5
    73da:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    73de:	34a4      	adds	r4, #164	; 0xa4
    73e0:	f004 fc1e 	bl	bc20 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    73e4:	4641      	mov	r1, r8
    73e6:	f7fa f8f1 	bl	15cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    73ea:	6220      	str	r0, [r4, #32]
    73ec:	f804 7c03 	strb.w	r7, [r4, #-3]
    73f0:	7126      	strb	r6, [r4, #4]
    73f2:	2001      	movs	r0, #1
    73f4:	f006 ff6e 	bl	e2d4 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    73f8:	f200 1009 	addw	r0, r0, #265	; 0x109
    73fc:	1a28      	subs	r0, r5, r0
    73fe:	62a7      	str	r7, [r4, #40]	; 0x28
    7400:	60a0      	str	r0, [r4, #8]
    7402:	3ca4      	subs	r4, #164	; 0xa4
    7404:	e017      	b.n	7436 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xf2>
    7406:	200c      	movs	r0, #12
    7408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    740c:	4620      	mov	r0, r4
    740e:	f007 f8a4 	bl	e55a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
    7412:	f844 0fbc 	str.w	r0, [r4, #188]!
    7416:	f804 6c1b 	strb.w	r6, [r4, #-27]
    741a:	f004 fc01 	bl	bc20 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    741e:	4606      	mov	r6, r0
    7420:	2000      	movs	r0, #0
    7422:	f007 f9f3 	bl	e80c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x434>
    7426:	eb00 0108 	add.w	r1, r0, r8
    742a:	4630      	mov	r0, r6
    742c:	f7fa f8ce 	bl	15cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    7430:	6125      	str	r5, [r4, #16]
    7432:	60a0      	str	r0, [r4, #8]
    7434:	3cbc      	subs	r4, #188	; 0xbc
    7436:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
    743a:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    743e:	f007 f937 	bl	e6b0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d8>
    7442:	b138      	cbz	r0, 7454 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x110>
    7444:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
    7448:	2100      	movs	r1, #0
    744a:	4620      	mov	r0, r4
    744c:	f006 fdf7 	bl	e03e <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    7450:	2000      	movs	r0, #0
    7452:	e7d9      	b.n	7408 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc4>
    7454:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
    7458:	2030      	movs	r0, #48	; 0x30
    745a:	f7fc fce7 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    745e:	0000      	.short	0x0000
    7460:	0000e821 	.word	0x0000e821

00007464 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    7464:	4808      	ldr	r0, [pc, #32]	; (7488 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x24>)
    7466:	b510      	push	{r4, lr}
    7468:	2100      	movs	r1, #0
    746a:	7001      	strb	r1, [r0, #0]
    746c:	2201      	movs	r2, #1
    746e:	7082      	strb	r2, [r0, #2]
    7470:	7041      	strb	r1, [r0, #1]
    7472:	3018      	adds	r0, #24
    7474:	f006 fd03 	bl	de7e <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    7478:	4803      	ldr	r0, [pc, #12]	; (7488 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x24>)
    747a:	3020      	adds	r0, #32
    747c:	f006 fcff 	bl	de7e <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    7480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7484:	f006 bf91 	b.w	e3aa <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    7488:	2000010c 	.word	0x2000010c

0000748c <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    748c:	4901      	ldr	r1, [pc, #4]	; (7494 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    748e:	7008      	strb	r0, [r1, #0]
    7490:	4770      	bx	lr
    7492:	0000      	.short	0x0000
    7494:	2000010c 	.word	0x2000010c

00007498 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
    7498:	4905      	ldr	r1, [pc, #20]	; (74b0 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x18>)
    749a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    749e:	fbb1 f1f2 	udiv	r1, r1, r2
    74a2:	b510      	push	{r4, lr}
    74a4:	f201 2191 	addw	r1, r1, #657	; 0x291
    74a8:	f006 fc83 	bl	ddb2 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    74ac:	b280      	uxth	r0, r0
    74ae:	bd10      	pop	{r4, pc}
    74b0:	0001527d 	.word	0x0001527d

000074b4 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    74b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    74b8:	4c10      	ldr	r4, [pc, #64]	; (74fc <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x48>)
    74ba:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
    74be:	f003 fc17 	bl	acf0 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    74c2:	4606      	mov	r6, r0
    74c4:	7820      	ldrb	r0, [r4, #0]
    74c6:	b128      	cbz	r0, 74d4 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x20>
    74c8:	4632      	mov	r2, r6
    74ca:	4639      	mov	r1, r7
    74cc:	4628      	mov	r0, r5
    74ce:	f005 ff93 	bl	d3f8 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    74d2:	4605      	mov	r5, r0
    74d4:	6860      	ldr	r0, [r4, #4]
    74d6:	4285      	cmp	r5, r0
    74d8:	d005      	beq.n	74e6 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x32>
    74da:	68e1      	ldr	r1, [r4, #12]
    74dc:	1a28      	subs	r0, r5, r0
    74de:	4408      	add	r0, r1
    74e0:	60e0      	str	r0, [r4, #12]
    74e2:	f7fb f881 	bl	25e8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    74e6:	6065      	str	r5, [r4, #4]
    74e8:	42ae      	cmp	r6, r5
    74ea:	d801      	bhi.n	74f0 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3c>
    74ec:	7860      	ldrb	r0, [r4, #1]
    74ee:	b110      	cbz	r0, 74f6 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x42>
    74f0:	2000      	movs	r0, #0
    74f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    74f6:	2001      	movs	r0, #1
    74f8:	e7fb      	b.n	74f2 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3e>
    74fa:	0000      	.short	0x0000
    74fc:	2000010c 	.word	0x2000010c

00007500 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    7500:	b510      	push	{r4, lr}
    7502:	4604      	mov	r4, r0
    7504:	2905      	cmp	r1, #5
    7506:	d227      	bcs.n	7558 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x58>
    7508:	e8df f001 	tbb	[pc, r1]
    750c:	0e030b05 	.word	0x0e030b05
    7510:	000f      	.short	0x000f
    7512:	2100      	movs	r1, #0
    7514:	e000      	b.n	7518 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x18>
    7516:	2101      	movs	r1, #1
    7518:	4620      	mov	r0, r4
    751a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    751e:	f000 b8f5 	b.w	770c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a4>
    7522:	2003      	movs	r0, #3
    7524:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    7528:	bd10      	pop	{r4, pc}
    752a:	f003 fc1d 	bl	ad68 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    752e:	f8c4 0170 	str.w	r0, [r4, #368]	; 0x170
    7532:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7536:	f008 fbb8 	bl	fcaa <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    753a:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
    753e:	1a09      	subs	r1, r1, r0
    7540:	4808      	ldr	r0, [pc, #32]	; (7564 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x64>)
    7542:	6842      	ldr	r2, [r0, #4]
    7544:	440a      	add	r2, r1
    7546:	6042      	str	r2, [r0, #4]
    7548:	6882      	ldr	r2, [r0, #8]
    754a:	4411      	add	r1, r2
    754c:	6081      	str	r1, [r0, #8]
    754e:	4620      	mov	r0, r4
    7550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7554:	f007 b83f 	b.w	e5d6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1fe>
    7558:	f240 7151 	movw	r1, #1873	; 0x751
    755c:	2030      	movs	r0, #48	; 0x30
    755e:	f7fc fc65 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7562:	0000      	.short	0x0000
    7564:	2000010c 	.word	0x2000010c

00007568 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>:
    7568:	b570      	push	{r4, r5, r6, lr}
    756a:	460c      	mov	r4, r1
    756c:	4605      	mov	r5, r0
    756e:	b112      	cbz	r2, 7576 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xe>
    7570:	f240 717b 	movw	r1, #1915	; 0x77b
    7574:	e010      	b.n	7598 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x30>
    7576:	f003 fbbb 	bl	acf0 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    757a:	4601      	mov	r1, r0
    757c:	2200      	movs	r2, #0
    757e:	4620      	mov	r0, r4
    7580:	f007 f8fa 	bl	e778 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3a0>
    7584:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    7588:	462a      	mov	r2, r5
    758a:	4905      	ldr	r1, [pc, #20]	; (75a0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x38>)
    758c:	f7fa fde4 	bl	2158 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    7590:	2800      	cmp	r0, #0
    7592:	d104      	bne.n	759e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x36>
    7594:	f240 7164 	movw	r1, #1892	; 0x764
    7598:	2030      	movs	r0, #48	; 0x30
    759a:	f7fc fc47 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    759e:	bd70      	pop	{r4, r5, r6, pc}
    75a0:	0000e8c1 	.word	0x0000e8c1
    75a4:	b510      	push	{r4, lr}
    75a6:	280c      	cmp	r0, #12
    75a8:	d304      	bcc.n	75b4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4c>
    75aa:	f240 3116 	movw	r1, #790	; 0x316
    75ae:	2006      	movs	r0, #6
    75b0:	f7fc fc3c 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    75b4:	4901      	ldr	r1, [pc, #4]	; (75bc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x54>)
    75b6:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    75ba:	bd10      	pop	{r4, pc}
    75bc:	0000eaba 	.word	0x0000eaba
    75c0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    75c2:	4c18      	ldr	r4, [pc, #96]	; (7624 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xbc>)
    75c4:	2001      	movs	r0, #1
    75c6:	7060      	strb	r0, [r4, #1]
    75c8:	f64f 75ff 	movw	r5, #65535	; 0xffff
    75cc:	e00b      	b.n	75e6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7e>
    75ce:	2100      	movs	r1, #0
    75d0:	f005 fcb3 	bl	cf3a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    75d4:	0006      	movs	r6, r0
    75d6:	d010      	beq.n	75fa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x92>
    75d8:	f896 0168 	ldrb.w	r0, [r6, #360]	; 0x168
    75dc:	f7fa fdee 	bl	21bc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    75e0:	4630      	mov	r0, r6
    75e2:	f007 f8bc 	bl	e75e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x386>
    75e6:	4669      	mov	r1, sp
    75e8:	2000      	movs	r0, #0
    75ea:	f005 fcb0 	bl	cf4e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    75ee:	b180      	cbz	r0, 7612 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    75f0:	f44f 7187 	mov.w	r1, #270	; 0x10e
    75f4:	2030      	movs	r0, #48	; 0x30
    75f6:	f7fc fc19 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    75fa:	f44f 7197 	mov.w	r1, #302	; 0x12e
    75fe:	e7f9      	b.n	75f4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8c>
    7600:	9802      	ldr	r0, [sp, #8]
    7602:	b130      	cbz	r0, 7612 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    7604:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    7608:	b119      	cbz	r1, 7612 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    760a:	8800      	ldrh	r0, [r0, #0]
    760c:	42a8      	cmp	r0, r5
    760e:	d1de      	bne.n	75ce <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x66>
    7610:	e004      	b.n	761c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb4>
    7612:	4668      	mov	r0, sp
    7614:	f7fc fe42 	bl	429c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7618:	2800      	cmp	r0, #0
    761a:	d0f1      	beq.n	7600 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x98>
    761c:	2000      	movs	r0, #0
    761e:	7060      	strb	r0, [r4, #1]
    7620:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7622:	0000      	.short	0x0000
    7624:	2000010c 	.word	0x2000010c
    7628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    762c:	4604      	mov	r4, r0
    762e:	4836      	ldr	r0, [pc, #216]	; (7708 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a0>)
    7630:	461e      	mov	r6, r3
    7632:	4690      	mov	r8, r2
    7634:	7880      	ldrb	r0, [r0, #2]
    7636:	4689      	mov	r9, r1
    7638:	2500      	movs	r5, #0
    763a:	b368      	cbz	r0, 7698 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    763c:	f7fc f876 	bl	372c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    7640:	b350      	cbz	r0, 7698 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    7642:	f8b4 0120 	ldrh.w	r0, [r4, #288]	; 0x120
    7646:	2802      	cmp	r0, #2
    7648:	d326      	bcc.n	7698 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    764a:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    764e:	2802      	cmp	r0, #2
    7650:	d022      	beq.n	7698 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    7652:	f894 014a 	ldrb.w	r0, [r4, #330]	; 0x14a
    7656:	b9f8      	cbnz	r0, 7698 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    7658:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
    765c:	f7ff ffa2 	bl	75a4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    7660:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    7664:	b281      	uxth	r1, r0
    7666:	8031      	strh	r1, [r6, #0]
    7668:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    766c:	2700      	movs	r7, #0
    766e:	2801      	cmp	r0, #1
    7670:	d015      	beq.n	769e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x136>
    7672:	68e0      	ldr	r0, [r4, #12]
    7674:	f004 fb08 	bl	bc88 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7678:	f8b4 210e 	ldrh.w	r2, [r4, #270]	; 0x10e
    767c:	b280      	uxth	r0, r0
    767e:	4442      	add	r2, r8
    7680:	eba2 0109 	sub.w	r1, r2, r9
    7684:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
    7688:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    768c:	1a82      	subs	r2, r0, r2
    768e:	fb01 7502 	mla	r5, r1, r2, r7
    7692:	2001      	movs	r0, #1
    7694:	f884 014a 	strb.w	r0, [r4, #330]	; 0x14a
    7698:	4628      	mov	r0, r5
    769a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    769e:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
    76a2:	2803      	cmp	r0, #3
    76a4:	d02c      	beq.n	7700 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x198>
    76a6:	2101      	movs	r1, #1
    76a8:	2000      	movs	r0, #0
    76aa:	f005 ff5f 	bl	d56c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    76ae:	6a21      	ldr	r1, [r4, #32]
    76b0:	1847      	adds	r7, r0, r1
    76b2:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    76b6:	8831      	ldrh	r1, [r6, #0]
    76b8:	34d0      	adds	r4, #208	; 0xd0
    76ba:	f004 fae5 	bl	bc88 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    76be:	6da2      	ldr	r2, [r4, #88]	; 0x58
    76c0:	6e21      	ldr	r1, [r4, #96]	; 0x60
    76c2:	1a82      	subs	r2, r0, r2
    76c4:	fb01 5502 	mla	r5, r1, r2, r5
    76c8:	65a0      	str	r0, [r4, #88]	; 0x58
    76ca:	8831      	ldrh	r1, [r6, #0]
    76cc:	4638      	mov	r0, r7
    76ce:	f004 fadb 	bl	bc88 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    76d2:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    76d4:	66a0      	str	r0, [r4, #104]	; 0x68
    76d6:	1a41      	subs	r1, r0, r1
    76d8:	440d      	add	r5, r1
    76da:	8831      	ldrh	r1, [r6, #0]
    76dc:	f854 0cc4 	ldr.w	r0, [r4, #-196]
    76e0:	f004 fad2 	bl	bc88 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    76e4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    76e6:	4442      	add	r2, r8
    76e8:	eba2 0109 	sub.w	r1, r2, r9
    76ec:	6e22      	ldr	r2, [r4, #96]	; 0x60
    76ee:	1a89      	subs	r1, r1, r2
    76f0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    76f2:	1e49      	subs	r1, r1, #1
    76f4:	1a82      	subs	r2, r0, r2
    76f6:	fb01 5502 	mla	r5, r1, r2, r5
    76fa:	66e0      	str	r0, [r4, #108]	; 0x6c
    76fc:	3cd0      	subs	r4, #208	; 0xd0
    76fe:	e7c8      	b.n	7692 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x12a>
    7700:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    7704:	e7d3      	b.n	76ae <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x146>
    7706:	0000      	.short	0x0000
    7708:	2000010c 	.word	0x2000010c
    770c:	b538      	push	{r3, r4, r5, lr}
    770e:	2500      	movs	r5, #0
    7710:	4604      	mov	r4, r0
    7712:	2901      	cmp	r1, #1
    7714:	d102      	bne.n	771c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1b4>
    7716:	4811      	ldr	r0, [pc, #68]	; (775c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f4>)
    7718:	7840      	ldrb	r0, [r0, #1]
    771a:	b178      	cbz	r0, 773c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1d4>
    771c:	2004      	movs	r0, #4
    771e:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    7722:	bf00      	nop
    7724:	f006 ff50 	bl	e5c8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f0>
    7728:	f8a4 5166 	strh.w	r5, [r4, #358]	; 0x166
    772c:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
    7730:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
    7734:	f504 7495 	add.w	r4, r4, #298	; 0x12a
    7738:	77e5      	strb	r5, [r4, #31]
    773a:	bd38      	pop	{r3, r4, r5, pc}
    773c:	9500      	str	r5, [sp, #0]
    773e:	f8b4 10fc 	ldrh.w	r1, [r4, #252]	; 0xfc
    7742:	2301      	movs	r3, #1
    7744:	2200      	movs	r2, #0
    7746:	4620      	mov	r0, r4
    7748:	f000 f80a 	bl	7760 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    774c:	2800      	cmp	r0, #0
    774e:	d0e9      	beq.n	7724 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1bc>
    7750:	f240 61c9 	movw	r1, #1737	; 0x6c9
    7754:	2030      	movs	r0, #48	; 0x30
    7756:	f7fc fb69 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    775a:	0000      	.short	0x0000
    775c:	2000010c 	.word	0x2000010c
    7760:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7764:	4604      	mov	r4, r0
    7766:	b085      	sub	sp, #20
    7768:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    776c:	469a      	mov	sl, r3
    776e:	e9cd 3000 	strd	r3, r0, [sp]
    7772:	460f      	mov	r7, r1
    7774:	f008 fa00 	bl	fb78 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    7778:	4605      	mov	r5, r0
    777a:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
    777e:	f7ff ff11 	bl	75a4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    7782:	4428      	add	r0, r5
    7784:	f8ad 0008 	strh.w	r0, [sp, #8]
    7788:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
    778c:	280d      	cmp	r0, #13
    778e:	d004      	beq.n	779a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x232>
    7790:	2000      	movs	r0, #0
    7792:	9003      	str	r0, [sp, #12]
    7794:	9807      	ldr	r0, [sp, #28]
    7796:	b110      	cbz	r0, 779e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x236>
    7798:	e02e      	b.n	77f8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    779a:	2001      	movs	r0, #1
    779c:	e7f9      	b.n	7792 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x22a>
    779e:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    77a2:	2803      	cmp	r0, #3
    77a4:	d128      	bne.n	77f8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    77a6:	9803      	ldr	r0, [sp, #12]
    77a8:	b330      	cbz	r0, 77f8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    77aa:	f8b4 0194 	ldrh.w	r0, [r4, #404]	; 0x194
    77ae:	42b8      	cmp	r0, r7
    77b0:	d122      	bne.n	77f8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    77b2:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    77b6:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    77ba:	68e0      	ldr	r0, [r4, #12]
    77bc:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
    77c0:	f8b4 0166 	ldrh.w	r0, [r4, #358]	; 0x166
    77c4:	f8b4 110e 	ldrh.w	r1, [r4, #270]	; 0x10e
    77c8:	4408      	add	r0, r1
    77ca:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
    77ce:	4620      	mov	r0, r4
    77d0:	f007 f989 	bl	eae6 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    77d4:	f8d4 0198 	ldr.w	r0, [r4, #408]	; 0x198
    77d8:	6220      	str	r0, [r4, #32]
    77da:	f8b4 0196 	ldrh.w	r0, [r4, #406]	; 0x196
    77de:	83a0      	strh	r0, [r4, #28]
    77e0:	f8d4 019c 	ldr.w	r0, [r4, #412]	; 0x19c
    77e4:	60e0      	str	r0, [r4, #12]
    77e6:	f8b4 01a0 	ldrh.w	r0, [r4, #416]	; 0x1a0
    77ea:	82a0      	strh	r0, [r4, #20]
    77ec:	f8b4 01a2 	ldrh.w	r0, [r4, #418]	; 0x1a2
    77f0:	82e0      	strh	r0, [r4, #22]
    77f2:	2002      	movs	r0, #2
    77f4:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    77f8:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
    77fc:	f504 75a6 	add.w	r5, r4, #332	; 0x14c
    7800:	1a38      	subs	r0, r7, r0
    7802:	fa0f f980 	sxth.w	r9, r0
    7806:	f8b4 0164 	ldrh.w	r0, [r4, #356]	; 0x164
    780a:	1a38      	subs	r0, r7, r0
    780c:	fa0f f880 	sxth.w	r8, r0
    7810:	f1b8 0f00 	cmp.w	r8, #0
    7814:	da06      	bge.n	7824 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2bc>
    7816:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    781a:	f8c4 0160 	str.w	r0, [r4, #352]	; 0x160
    781e:	2001      	movs	r0, #1
    7820:	46c8      	mov	r8, r9
    7822:	9000      	str	r0, [sp, #0]
    7824:	ab02      	add	r3, sp, #8
    7826:	464a      	mov	r2, r9
    7828:	4641      	mov	r1, r8
    782a:	4620      	mov	r0, r4
    782c:	f7ff fefc 	bl	7628 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xc0>
    7830:	9004      	str	r0, [sp, #16]
    7832:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    7836:	f8df b33c 	ldr.w	fp, [pc, #828]	; 7b74 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x60c>
    783a:	b140      	cbz	r0, 784e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2e6>
    783c:	2801      	cmp	r0, #1
    783e:	d07d      	beq.n	793c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d4>
    7840:	2802      	cmp	r0, #2
    7842:	d052      	beq.n	78ea <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x382>
    7844:	2803      	cmp	r0, #3
    7846:	d07a      	beq.n	793e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d6>
    7848:	f240 514d 	movw	r1, #1357	; 0x54d
    784c:	e18e      	b.n	7b6c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x604>
    784e:	2101      	movs	r1, #1
    7850:	2000      	movs	r0, #0
    7852:	f005 fe8b 	bl	d56c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    7856:	4606      	mov	r6, r0
    7858:	6a20      	ldr	r0, [r4, #32]
    785a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    785e:	4430      	add	r0, r6
    7860:	f004 fa12 	bl	bc88 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7864:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
    7868:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    786c:	68e0      	ldr	r0, [r4, #12]
    786e:	f004 fa0b 	bl	bc88 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7872:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    7876:	a901      	add	r1, sp, #4
    7878:	4668      	mov	r0, sp
    787a:	f003 f99d 	bl	abb8 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    787e:	e9dd 1200 	ldrd	r1, r2, [sp]
    7882:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    7886:	f7fa ff65 	bl	2754 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    788a:	4681      	mov	r9, r0
    788c:	4620      	mov	r0, r4
    788e:	f006 fe8d 	bl	e5ac <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d4>
    7892:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7896:	f8d4 816c 	ldr.w	r8, [r4, #364]	; 0x16c
    789a:	f008 fa14 	bl	fcc6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    789e:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    78a2:	4401      	add	r1, r0
    78a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    78a8:	fbb1 f0f0 	udiv	r0, r1, r0
    78ac:	6a21      	ldr	r1, [r4, #32]
    78ae:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
    78b2:	4431      	add	r1, r6
    78b4:	1a08      	subs	r0, r1, r0
    78b6:	1a81      	subs	r1, r0, r2
    78b8:	4441      	add	r1, r8
    78ba:	3920      	subs	r1, #32
    78bc:	eba1 0609 	sub.w	r6, r1, r9
    78c0:	0050      	lsls	r0, r2, #1
    78c2:	8ba1      	ldrh	r1, [r4, #28]
    78c4:	3060      	adds	r0, #96	; 0x60
    78c6:	4401      	add	r1, r0
    78c8:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    78cc:	f006 fede 	bl	e68c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b4>
    78d0:	3022      	adds	r0, #34	; 0x22
    78d2:	f8cb 0010 	str.w	r0, [fp, #16]
    78d6:	f8d4 016c 	ldr.w	r0, [r4, #364]	; 0x16c
    78da:	4659      	mov	r1, fp
    78dc:	1a30      	subs	r0, r6, r0
    78de:	f5b0 7fda 	cmp.w	r0, #436	; 0x1b4
    78e2:	d859      	bhi.n	7998 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x430>
    78e4:	f240 41e6 	movw	r1, #1254	; 0x4e6
    78e8:	e140      	b.n	7b6c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x604>
    78ea:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
    78ee:	6a20      	ldr	r0, [r4, #32]
    78f0:	4408      	add	r0, r1
    78f2:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    78f6:	f004 f9c7 	bl	bc88 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    78fa:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
    78fe:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    7902:	68e0      	ldr	r0, [r4, #12]
    7904:	f004 f9c0 	bl	bc88 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7908:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    790c:	4620      	mov	r0, r4
    790e:	f006 fe4d 	bl	e5ac <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d4>
    7912:	f8b4 010e 	ldrh.w	r0, [r4, #270]	; 0x10e
    7916:	bb10      	cbnz	r0, 795e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3f6>
    7918:	f1ba 0f00 	cmp.w	sl, #0
    791c:	d01f      	beq.n	795e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3f6>
    791e:	f894 806b 	ldrb.w	r8, [r4, #107]	; 0x6b
    7922:	4640      	mov	r0, r8
    7924:	f008 f9cf 	bl	fcc6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7928:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    792c:	4401      	add	r1, r0
    792e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7932:	fbb1 f0f0 	udiv	r0, r1, r0
    7936:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    793a:	e001      	b.n	7940 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d8>
    793c:	e02d      	b.n	799a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x432>
    793e:	e049      	b.n	79d4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x46c>
    7940:	4408      	add	r0, r1
    7942:	6a22      	ldr	r2, [r4, #32]
    7944:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
    7948:	4411      	add	r1, r2
    794a:	1a0e      	subs	r6, r1, r0
    794c:	4640      	mov	r0, r8
    794e:	f008 f9ac 	bl	fcaa <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7952:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
    7956:	1a08      	subs	r0, r1, r0
    7958:	4406      	add	r6, r0
    795a:	3e20      	subs	r6, #32
    795c:	e006      	b.n	796c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x404>
    795e:	6a21      	ldr	r1, [r4, #32]
    7960:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    7964:	4408      	add	r0, r1
    7966:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    796a:	1a46      	subs	r6, r0, r1
    796c:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
    7970:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
    7974:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    7978:	fb01 0002 	mla	r0, r1, r2, r0
    797c:	0040      	lsls	r0, r0, #1
    797e:	8ba1      	ldrh	r1, [r4, #28]
    7980:	3060      	adds	r0, #96	; 0x60
    7982:	4401      	add	r1, r0
    7984:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7988:	f006 fe80 	bl	e68c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b4>
    798c:	f8cb 0010 	str.w	r0, [fp, #16]
    7990:	2001      	movs	r0, #1
    7992:	4659      	mov	r1, fp
    7994:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    7998:	e062      	b.n	7a60 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f8>
    799a:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
    799e:	68e0      	ldr	r0, [r4, #12]
    79a0:	f8b4 110e 	ldrh.w	r1, [r4, #270]	; 0x10e
    79a4:	1a86      	subs	r6, r0, r2
    79a6:	eb01 0009 	add.w	r0, r1, r9
    79aa:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
    79ae:	f8d4 c128 	ldr.w	ip, [r4, #296]	; 0x128
    79b2:	1a40      	subs	r0, r0, r1
    79b4:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    79b8:	1e40      	subs	r0, r0, #1
    79ba:	fb0c 3101 	mla	r1, ip, r1, r3
    79be:	fb00 1002 	mla	r0, r0, r2, r1
    79c2:	0040      	lsls	r0, r0, #1
    79c4:	8ba1      	ldrh	r1, [r4, #28]
    79c6:	3060      	adds	r0, #96	; 0x60
    79c8:	4401      	add	r1, r0
    79ca:	fb06 f608 	mul.w	r6, r6, r8
    79ce:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    79d2:	e040      	b.n	7a56 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4ee>
    79d4:	68e0      	ldr	r0, [r4, #12]
    79d6:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    79da:	fb00 f008 	mul.w	r0, r0, r8
    79de:	fb08 0611 	mls	r6, r8, r1, r0
    79e2:	f894 007d 	ldrb.w	r0, [r4, #125]	; 0x7d
    79e6:	2824      	cmp	r0, #36	; 0x24
    79e8:	d003      	beq.n	79f2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x48a>
    79ea:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
    79ee:	2824      	cmp	r0, #36	; 0x24
    79f0:	d109      	bne.n	7a06 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    79f2:	f8b4 0194 	ldrh.w	r0, [r4, #404]	; 0x194
    79f6:	1a38      	subs	r0, r7, r0
    79f8:	b200      	sxth	r0, r0
    79fa:	2800      	cmp	r0, #0
    79fc:	db03      	blt.n	7a06 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    79fe:	f894 0197 	ldrb.w	r0, [r4, #407]	; 0x197
    7a02:	b100      	cbz	r0, 7a06 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    7a04:	9001      	str	r0, [sp, #4]
    7a06:	9800      	ldr	r0, [sp, #0]
    7a08:	b1d8      	cbz	r0, 7a42 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
    7a0a:	f8b4 010e 	ldrh.w	r0, [r4, #270]	; 0x10e
    7a0e:	b9c0      	cbnz	r0, 7a42 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
    7a10:	f8d4 0170 	ldr.w	r0, [r4, #368]	; 0x170
    7a14:	2800      	cmp	r0, #0
    7a16:	d07d      	beq.n	7b14 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ac>
    7a18:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7a1c:	f008 f953 	bl	fcc6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7a20:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    7a24:	4401      	add	r1, r0
    7a26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7a2a:	fbb1 f0f0 	udiv	r0, r1, r0
    7a2e:	1a36      	subs	r6, r6, r0
    7a30:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7a34:	f008 f939 	bl	fcaa <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7a38:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
    7a3c:	1a08      	subs	r0, r1, r0
    7a3e:	4406      	add	r6, r0
    7a40:	3e20      	subs	r6, #32
    7a42:	f8b4 110e 	ldrh.w	r1, [r4, #270]	; 0x10e
    7a46:	eb01 0009 	add.w	r0, r1, r9
    7a4a:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    7a4e:	4348      	muls	r0, r1
    7a50:	0041      	lsls	r1, r0, #1
    7a52:	3160      	adds	r1, #96	; 0x60
    7a54:	9801      	ldr	r0, [sp, #4]
    7a56:	f006 fe19 	bl	e68c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b4>
    7a5a:	4659      	mov	r1, fp
    7a5c:	f8cb 0010 	str.w	r0, [fp, #16]
    7a60:	9804      	ldr	r0, [sp, #16]
    7a62:	6909      	ldr	r1, [r1, #16]
    7a64:	1a33      	subs	r3, r6, r0
    7a66:	f8d4 613c 	ldr.w	r6, [r4, #316]	; 0x13c
    7a6a:	68e0      	ldr	r0, [r4, #12]
    7a6c:	1b80      	subs	r0, r0, r6
    7a6e:	f2a0 2043 	subw	r0, r0, #579	; 0x243
    7a72:	f8cb 0014 	str.w	r0, [fp, #20]
    7a76:	4281      	cmp	r1, r0
    7a78:	d800      	bhi.n	7a7c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x514>
    7a7a:	4608      	mov	r0, r1
    7a7c:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    7a80:	2000      	movs	r0, #0
    7a82:	7028      	strb	r0, [r5, #0]
    7a84:	2064      	movs	r0, #100	; 0x64
    7a86:	8128      	strh	r0, [r5, #8]
    7a88:	4619      	mov	r1, r3
    7a8a:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    7a8e:	f7f9 fd9d 	bl	15cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    7a92:	60e8      	str	r0, [r5, #12]
    7a94:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    7a98:	f006 f95c 	bl	dd54 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    7a9c:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    7aa0:	4408      	add	r0, r1
    7aa2:	6068      	str	r0, [r5, #4]
    7aa4:	68e8      	ldr	r0, [r5, #12]
    7aa6:	f8c4 0160 	str.w	r0, [r4, #352]	; 0x160
    7aaa:	f8a4 7164 	strh.w	r7, [r4, #356]	; 0x164
    7aae:	2001      	movs	r0, #1
    7ab0:	72a8      	strb	r0, [r5, #10]
    7ab2:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
    7ab6:	1bc9      	subs	r1, r1, r7
    7ab8:	b209      	sxth	r1, r1
    7aba:	2900      	cmp	r1, #0
    7abc:	dd01      	ble.n	7ac2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x55a>
    7abe:	2103      	movs	r1, #3
    7ac0:	72a9      	strb	r1, [r5, #10]
    7ac2:	9903      	ldr	r1, [sp, #12]
    7ac4:	b339      	cbz	r1, 7b16 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ae>
    7ac6:	f1ba 0f00 	cmp.w	sl, #0
    7aca:	d01f      	beq.n	7b0c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a4>
    7acc:	f8b4 2120 	ldrh.w	r2, [r4, #288]	; 0x120
    7ad0:	b38a      	cbz	r2, 7b36 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ce>
    7ad2:	f8b4 1122 	ldrh.w	r1, [r4, #290]	; 0x122
    7ad6:	bf00      	nop
    7ad8:	f8a4 1122 	strh.w	r1, [r4, #290]	; 0x122
    7adc:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
    7ae0:	1c49      	adds	r1, r1, #1
    7ae2:	434b      	muls	r3, r1
    7ae4:	4293      	cmp	r3, r2
    7ae6:	d211      	bcs.n	7b0c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a4>
    7ae8:	7aa9      	ldrb	r1, [r5, #10]
    7aea:	1e49      	subs	r1, r1, #1
    7aec:	2900      	cmp	r1, #0
    7aee:	dd0d      	ble.n	7b0c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a4>
    7af0:	72a8      	strb	r0, [r5, #10]
    7af2:	f8b4 0122 	ldrh.w	r0, [r4, #290]	; 0x122
    7af6:	1c40      	adds	r0, r0, #1
    7af8:	f8a4 0122 	strh.w	r0, [r4, #290]	; 0x122
    7afc:	2001      	movs	r0, #1
    7afe:	f000 f83b 	bl	7b78 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x610>
    7b02:	f000 0007 	and.w	r0, r0, #7
    7b06:	1c40      	adds	r0, r0, #1
    7b08:	f884 0124 	strb.w	r0, [r4, #292]	; 0x124
    7b0c:	f894 0168 	ldrb.w	r0, [r4, #360]	; 0x168
    7b10:	4629      	mov	r1, r5
    7b12:	e001      	b.n	7b18 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5b0>
    7b14:	e00c      	b.n	7b30 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c8>
    7b16:	e00f      	b.n	7b38 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5d0>
    7b18:	f006 fdca 	bl	e6b0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d8>
    7b1c:	b320      	cbz	r0, 7b68 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    7b1e:	9807      	ldr	r0, [sp, #28]
    7b20:	f080 0001 	eor.w	r0, r0, #1
    7b24:	f884 0148 	strb.w	r0, [r4, #328]	; 0x148
    7b28:	2000      	movs	r0, #0
    7b2a:	b009      	add	sp, #36	; 0x24
    7b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7b30:	f44f 61a7 	mov.w	r1, #1336	; 0x538
    7b34:	e01a      	b.n	7b6c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x604>
    7b36:	e015      	b.n	7b64 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5fc>
    7b38:	f1ba 0f00 	cmp.w	sl, #0
    7b3c:	d1c6      	bne.n	7acc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x564>
    7b3e:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    7b42:	2800      	cmp	r0, #0
    7b44:	d0e2      	beq.n	7b0c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a4>
    7b46:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    7b4a:	68e0      	ldr	r0, [r4, #12]
    7b4c:	1a41      	subs	r1, r0, r1
    7b4e:	4628      	mov	r0, r5
    7b50:	f005 fd1e 	bl	d590 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    7b54:	0400      	lsls	r0, r0, #16
    7b56:	0c00      	lsrs	r0, r0, #16
    7b58:	d0d8      	beq.n	7b0c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a4>
    7b5a:	9912      	ldr	r1, [sp, #72]	; 0x48
    7b5c:	b101      	cbz	r1, 7b60 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f8>
    7b5e:	8008      	strh	r0, [r1, #0]
    7b60:	2001      	movs	r0, #1
    7b62:	e7e2      	b.n	7b2a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c2>
    7b64:	2100      	movs	r1, #0
    7b66:	e7b7      	b.n	7ad8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x570>
    7b68:	f240 5197 	movw	r1, #1431	; 0x597
    7b6c:	2030      	movs	r0, #48	; 0x30
    7b6e:	f7fc f95d 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b72:	0000      	.short	0x0000
    7b74:	2000010c 	.word	0x2000010c
    7b78:	b108      	cbz	r0, 7b7e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x616>
    7b7a:	4803      	ldr	r0, [pc, #12]	; (7b88 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x620>)
    7b7c:	e001      	b.n	7b82 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x61a>
    7b7e:	4802      	ldr	r0, [pc, #8]	; (7b88 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x620>)
    7b80:	3008      	adds	r0, #8
    7b82:	f7fe bc7b 	b.w	647c <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY>
    7b86:	0000      	.short	0x0000
    7b88:	20000124 	.word	0x20000124
    7b8c:	b570      	push	{r4, r5, r6, lr}
    7b8e:	4604      	mov	r4, r0
    7b90:	f7f9 fe8c 	bl	18ac <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    7b94:	2864      	cmp	r0, #100	; 0x64
    7b96:	d901      	bls.n	7b9c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x634>
    7b98:	4605      	mov	r5, r0
    7b9a:	e000      	b.n	7b9e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x636>
    7b9c:	2564      	movs	r5, #100	; 0x64
    7b9e:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7ba2:	2128      	movs	r1, #40	; 0x28
    7ba4:	f006 fc73 	bl	e48e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb6>
    7ba8:	4428      	add	r0, r5
    7baa:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    7bae:	f200 203d 	addw	r0, r0, #573	; 0x23d
    7bb2:	180e      	adds	r6, r1, r0
    7bb4:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7bb8:	2128      	movs	r1, #40	; 0x28
    7bba:	f006 fc68 	bl	e48e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb6>
    7bbe:	f200 22a1 	addw	r2, r0, #673	; 0x2a1
    7bc2:	4620      	mov	r0, r4
    7bc4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    7bc6:	f006 f864 	bl	dc92 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    7bca:	4605      	mov	r5, r0
    7bcc:	4632      	mov	r2, r6
    7bce:	4620      	mov	r0, r4
    7bd0:	68e1      	ldr	r1, [r4, #12]
    7bd2:	f006 f85e 	bl	dc92 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    7bd6:	4907      	ldr	r1, [pc, #28]	; (7bf4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x68c>)
    7bd8:	4285      	cmp	r5, r0
    7bda:	6088      	str	r0, [r1, #8]
    7bdc:	d200      	bcs.n	7be0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x678>
    7bde:	4628      	mov	r0, r5
    7be0:	6048      	str	r0, [r1, #4]
    7be2:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    7be6:	f5a0 70b3 	sub.w	r0, r0, #358	; 0x166
    7bea:	60c8      	str	r0, [r1, #12]
    7bec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7bf0:	f7fa bcfa 	b.w	25e8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    7bf4:	2000010c 	.word	0x2000010c

00007bf8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    7bf8:	4806      	ldr	r0, [pc, #24]	; (7c14 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    7bfa:	4905      	ldr	r1, [pc, #20]	; (7c10 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    7bfc:	6501      	str	r1, [r0, #80]	; 0x50
    7bfe:	4906      	ldr	r1, [pc, #24]	; (7c18 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    7c00:	6541      	str	r1, [r0, #84]	; 0x54
    7c02:	4807      	ldr	r0, [pc, #28]	; (7c20 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    7c04:	4905      	ldr	r1, [pc, #20]	; (7c1c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    7c06:	6501      	str	r1, [r0, #80]	; 0x50
    7c08:	4906      	ldr	r1, [pc, #24]	; (7c24 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    7c0a:	6541      	str	r1, [r0, #84]	; 0x54
    7c0c:	4770      	bx	lr
    7c0e:	0000      	.short	0x0000
    7c10:	00009159 	.word	0x00009159
    7c14:	20000148 	.word	0x20000148
    7c18:	00009235 	.word	0x00009235
    7c1c:	000098b1 	.word	0x000098b1
    7c20:	200001ac 	.word	0x200001ac
    7c24:	000098e1 	.word	0x000098e1

00007c28 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA>:
    7c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7c2a:	460d      	mov	r5, r1
    7c2c:	4607      	mov	r7, r0
    7c2e:	2100      	movs	r1, #0
    7c30:	f005 f983 	bl	cf3a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7c34:	1e04      	subs	r4, r0, #0
    7c36:	d04f      	beq.n	7cd8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    7c38:	f894 0070 	ldrb.w	r0, [r4, #112]	; 0x70
    7c3c:	2800      	cmp	r0, #0
    7c3e:	d04b      	beq.n	7cd8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    7c40:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
    7c44:	f88d 0000 	strb.w	r0, [sp]
    7c48:	9800      	ldr	r0, [sp, #0]
    7c4a:	9000      	str	r0, [sp, #0]
    7c4c:	f89d 0000 	ldrb.w	r0, [sp]
    7c50:	2600      	movs	r6, #0
    7c52:	b1d8      	cbz	r0, 7c8c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x64>
    7c54:	706e      	strb	r6, [r5, #1]
    7c56:	2007      	movs	r0, #7
    7c58:	7028      	strb	r0, [r5, #0]
    7c5a:	e00b      	b.n	7c74 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x4c>
    7c5c:	f884 61b8 	strb.w	r6, [r4, #440]	; 0x1b8
    7c60:	84a6      	strh	r6, [r4, #36]	; 0x24
    7c62:	f8d4 01ba 	ldr.w	r0, [r4, #442]	; 0x1ba
    7c66:	6068      	str	r0, [r5, #4]
    7c68:	f8d4 01be 	ldr.w	r0, [r4, #446]	; 0x1be
    7c6c:	60a8      	str	r0, [r5, #8]
    7c6e:	f8b4 01c2 	ldrh.w	r0, [r4, #450]	; 0x1c2
    7c72:	81a8      	strh	r0, [r5, #12]
    7c74:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
    7c78:	f88d 0000 	strb.w	r0, [sp]
    7c7c:	9800      	ldr	r0, [sp, #0]
    7c7e:	9000      	str	r0, [sp, #0]
    7c80:	f89d 0000 	ldrb.w	r0, [sp]
    7c84:	2800      	cmp	r0, #0
    7c86:	d1e9      	bne.n	7c5c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x34>
    7c88:	712e      	strb	r6, [r5, #4]
    7c8a:	e10b      	b.n	7ea4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7c8c:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    7c90:	b3a0      	cbz	r0, 7cfc <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd4>
    7c92:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    7c96:	280b      	cmp	r0, #11
    7c98:	d016      	beq.n	7cc8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xa0>
    7c9a:	280c      	cmp	r0, #12
    7c9c:	d004      	beq.n	7ca8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x80>
    7c9e:	f640 21ee 	movw	r1, #2798	; 0xaee
    7ca2:	2031      	movs	r0, #49	; 0x31
    7ca4:	f7fc f8c2 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ca8:	8820      	ldrh	r0, [r4, #0]
    7caa:	f7fc fcd9 	bl	4660 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7cae:	4607      	mov	r7, r0
    7cb0:	f005 f809 	bl	ccc6 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    7cb4:	b978      	cbnz	r0, 7cd6 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xae>
    7cb6:	706e      	strb	r6, [r5, #1]
    7cb8:	200c      	movs	r0, #12
    7cba:	7028      	strb	r0, [r5, #0]
    7cbc:	f894 01c6 	ldrb.w	r0, [r4, #454]	; 0x1c6
    7cc0:	7128      	strb	r0, [r5, #4]
    7cc2:	8820      	ldrh	r0, [r4, #0]
    7cc4:	80e8      	strh	r0, [r5, #6]
    7cc6:	e013      	b.n	7cf0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xc8>
    7cc8:	8820      	ldrh	r0, [r4, #0]
    7cca:	f7fc fcc9 	bl	4660 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7cce:	4607      	mov	r7, r0
    7cd0:	f004 fff9 	bl	ccc6 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    7cd4:	b108      	cbz	r0, 7cda <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb2>
    7cd6:	2000      	movs	r0, #0
    7cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7cda:	706e      	strb	r6, [r5, #1]
    7cdc:	200b      	movs	r0, #11
    7cde:	7028      	strb	r0, [r5, #0]
    7ce0:	f894 01c6 	ldrb.w	r0, [r4, #454]	; 0x1c6
    7ce4:	7128      	strb	r0, [r5, #4]
    7ce6:	8820      	ldrh	r0, [r4, #0]
    7ce8:	80e8      	strh	r0, [r5, #6]
    7cea:	f894 01ca 	ldrb.w	r0, [r4, #458]	; 0x1ca
    7cee:	7228      	strb	r0, [r5, #8]
    7cf0:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
    7cf4:	4638      	mov	r0, r7
    7cf6:	f005 f801 	bl	ccfc <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    7cfa:	e0d3      	b.n	7ea4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7cfc:	e7ff      	b.n	7cfe <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd6>
    7cfe:	f894 01fa 	ldrb.w	r0, [r4, #506]	; 0x1fa
    7d02:	f88d 0000 	strb.w	r0, [sp]
    7d06:	9800      	ldr	r0, [sp, #0]
    7d08:	9000      	str	r0, [sp, #0]
    7d0a:	f89d 0000 	ldrb.w	r0, [sp]
    7d0e:	b130      	cbz	r0, 7d1e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xf6>
    7d10:	706e      	strb	r6, [r5, #1]
    7d12:	200e      	movs	r0, #14
    7d14:	7028      	strb	r0, [r5, #0]
    7d16:	80af      	strh	r7, [r5, #4]
    7d18:	f884 61fa 	strb.w	r6, [r4, #506]	; 0x1fa
    7d1c:	e0c2      	b.n	7ea4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7d1e:	f894 01cc 	ldrb.w	r0, [r4, #460]	; 0x1cc
    7d22:	f88d 0000 	strb.w	r0, [sp]
    7d26:	9800      	ldr	r0, [sp, #0]
    7d28:	9000      	str	r0, [sp, #0]
    7d2a:	f89d 0000 	ldrb.w	r0, [sp]
    7d2e:	b198      	cbz	r0, 7d58 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x130>
    7d30:	706e      	strb	r6, [r5, #1]
    7d32:	2008      	movs	r0, #8
    7d34:	7028      	strb	r0, [r5, #0]
    7d36:	8820      	ldrh	r0, [r4, #0]
    7d38:	80a8      	strh	r0, [r5, #4]
    7d3a:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
    7d3e:	f8c5 1006 	str.w	r1, [r5, #6]
    7d42:	f8d4 11d4 	ldr.w	r1, [r4, #468]	; 0x1d4
    7d46:	f8c5 100a 	str.w	r1, [r5, #10]
    7d4a:	f8b4 01d8 	ldrh.w	r0, [r4, #472]	; 0x1d8
    7d4e:	81e8      	strh	r0, [r5, #14]
    7d50:	f504 74e6 	add.w	r4, r4, #460	; 0x1cc
    7d54:	7026      	strb	r6, [r4, #0]
    7d56:	e0a5      	b.n	7ea4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7d58:	f894 01f4 	ldrb.w	r0, [r4, #500]	; 0x1f4
    7d5c:	f88d 0000 	strb.w	r0, [sp]
    7d60:	9800      	ldr	r0, [sp, #0]
    7d62:	9000      	str	r0, [sp, #0]
    7d64:	f89d 0000 	ldrb.w	r0, [sp]
    7d68:	b1a0      	cbz	r0, 7d94 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x16c>
    7d6a:	706e      	strb	r6, [r5, #1]
    7d6c:	2016      	movs	r0, #22
    7d6e:	7028      	strb	r0, [r5, #0]
    7d70:	e005      	b.n	7d7e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x156>
    7d72:	bf00      	nop
    7d74:	f884 61f4 	strb.w	r6, [r4, #500]	; 0x1f4
    7d78:	f8d4 01f6 	ldr.w	r0, [r4, #502]	; 0x1f6
    7d7c:	6068      	str	r0, [r5, #4]
    7d7e:	f894 01f4 	ldrb.w	r0, [r4, #500]	; 0x1f4
    7d82:	f88d 0000 	strb.w	r0, [sp]
    7d86:	9800      	ldr	r0, [sp, #0]
    7d88:	9000      	str	r0, [sp, #0]
    7d8a:	f89d 0000 	ldrb.w	r0, [sp]
    7d8e:	2800      	cmp	r0, #0
    7d90:	d1f0      	bne.n	7d74 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x14c>
    7d92:	e087      	b.n	7ea4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7d94:	f894 020a 	ldrb.w	r0, [r4, #522]	; 0x20a
    7d98:	f88d 0000 	strb.w	r0, [sp]
    7d9c:	9800      	ldr	r0, [sp, #0]
    7d9e:	9000      	str	r0, [sp, #0]
    7da0:	f89d 0000 	ldrb.w	r0, [sp]
    7da4:	b170      	cbz	r0, 7dc4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x19c>
    7da6:	706e      	strb	r6, [r5, #1]
    7da8:	2006      	movs	r0, #6
    7daa:	7028      	strb	r0, [r5, #0]
    7dac:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
    7db0:	6068      	str	r0, [r5, #4]
    7db2:	f8d4 0210 	ldr.w	r0, [r4, #528]	; 0x210
    7db6:	60a8      	str	r0, [r5, #8]
    7db8:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
    7dbc:	60e8      	str	r0, [r5, #12]
    7dbe:	f504 7403 	add.w	r4, r4, #524	; 0x20c
    7dc2:	e03a      	b.n	7e3a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x212>
    7dc4:	f894 01da 	ldrb.w	r0, [r4, #474]	; 0x1da
    7dc8:	f88d 0000 	strb.w	r0, [sp]
    7dcc:	9800      	ldr	r0, [sp, #0]
    7dce:	9000      	str	r0, [sp, #0]
    7dd0:	f89d 0000 	ldrb.w	r0, [sp]
    7dd4:	b1d0      	cbz	r0, 7e0c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1e4>
    7dd6:	706e      	strb	r6, [r5, #1]
    7dd8:	2012      	movs	r0, #18
    7dda:	7028      	strb	r0, [r5, #0]
    7ddc:	e00b      	b.n	7df6 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1ce>
    7dde:	bf00      	nop
    7de0:	f884 61da 	strb.w	r6, [r4, #474]	; 0x1da
    7de4:	f8d4 01dc 	ldr.w	r0, [r4, #476]	; 0x1dc
    7de8:	6068      	str	r0, [r5, #4]
    7dea:	f8d4 01e0 	ldr.w	r0, [r4, #480]	; 0x1e0
    7dee:	60a8      	str	r0, [r5, #8]
    7df0:	f8d4 01e4 	ldr.w	r0, [r4, #484]	; 0x1e4
    7df4:	60e8      	str	r0, [r5, #12]
    7df6:	f894 01da 	ldrb.w	r0, [r4, #474]	; 0x1da
    7dfa:	f88d 0000 	strb.w	r0, [sp]
    7dfe:	9800      	ldr	r0, [sp, #0]
    7e00:	9000      	str	r0, [sp, #0]
    7e02:	f89d 0000 	ldrb.w	r0, [sp]
    7e06:	2800      	cmp	r0, #0
    7e08:	d1ea      	bne.n	7de0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1b8>
    7e0a:	e04b      	b.n	7ea4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7e0c:	f894 01e8 	ldrb.w	r0, [r4, #488]	; 0x1e8
    7e10:	f88d 0000 	strb.w	r0, [sp]
    7e14:	9800      	ldr	r0, [sp, #0]
    7e16:	9000      	str	r0, [sp, #0]
    7e18:	f89d 0000 	ldrb.w	r0, [sp]
    7e1c:	b180      	cbz	r0, 7e40 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x218>
    7e1e:	706e      	strb	r6, [r5, #1]
    7e20:	2018      	movs	r0, #24
    7e22:	7028      	strb	r0, [r5, #0]
    7e24:	f8d4 01ea 	ldr.w	r0, [r4, #490]	; 0x1ea
    7e28:	6068      	str	r0, [r5, #4]
    7e2a:	f8d4 01ee 	ldr.w	r0, [r4, #494]	; 0x1ee
    7e2e:	60a8      	str	r0, [r5, #8]
    7e30:	f8b4 01f2 	ldrh.w	r0, [r4, #498]	; 0x1f2
    7e34:	81a8      	strh	r0, [r5, #12]
    7e36:	f504 74f5 	add.w	r4, r4, #490	; 0x1ea
    7e3a:	f804 6c02 	strb.w	r6, [r4, #-2]
    7e3e:	e031      	b.n	7ea4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7e40:	f894 01fc 	ldrb.w	r0, [r4, #508]	; 0x1fc
    7e44:	f88d 0000 	strb.w	r0, [sp]
    7e48:	9800      	ldr	r0, [sp, #0]
    7e4a:	9000      	str	r0, [sp, #0]
    7e4c:	f89d 0000 	ldrb.w	r0, [sp]
    7e50:	b138      	cbz	r0, 7e62 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x23a>
    7e52:	2019      	movs	r0, #25
    7e54:	7028      	strb	r0, [r5, #0]
    7e56:	f8d4 01fe 	ldr.w	r0, [r4, #510]	; 0x1fe
    7e5a:	6068      	str	r0, [r5, #4]
    7e5c:	f884 61fc 	strb.w	r6, [r4, #508]	; 0x1fc
    7e60:	e020      	b.n	7ea4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7e62:	f894 0202 	ldrb.w	r0, [r4, #514]	; 0x202
    7e66:	f88d 0000 	strb.w	r0, [sp]
    7e6a:	9800      	ldr	r0, [sp, #0]
    7e6c:	9000      	str	r0, [sp, #0]
    7e6e:	f89d 0000 	ldrb.w	r0, [sp]
    7e72:	2800      	cmp	r0, #0
    7e74:	f43f af30 	beq.w	7cd8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    7e78:	706e      	strb	r6, [r5, #1]
    7e7a:	2013      	movs	r0, #19
    7e7c:	7028      	strb	r0, [r5, #0]
    7e7e:	e007      	b.n	7e90 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x268>
    7e80:	f884 6202 	strb.w	r6, [r4, #514]	; 0x202
    7e84:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
    7e88:	6068      	str	r0, [r5, #4]
    7e8a:	f8b4 0208 	ldrh.w	r0, [r4, #520]	; 0x208
    7e8e:	8128      	strh	r0, [r5, #8]
    7e90:	f894 0202 	ldrb.w	r0, [r4, #514]	; 0x202
    7e94:	f88d 0000 	strb.w	r0, [sp]
    7e98:	9800      	ldr	r0, [sp, #0]
    7e9a:	9000      	str	r0, [sp, #0]
    7e9c:	f89d 0000 	ldrb.w	r0, [sp]
    7ea0:	2800      	cmp	r0, #0
    7ea2:	d1ed      	bne.n	7e80 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x258>
    7ea4:	2001      	movs	r0, #1
    7ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007ea8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    7ea8:	481b      	ldr	r0, [pc, #108]	; (7f18 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x70>)
    7eaa:	491a      	ldr	r1, [pc, #104]	; (7f14 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x6c>)
    7eac:	6081      	str	r1, [r0, #8]
    7eae:	491b      	ldr	r1, [pc, #108]	; (7f1c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x74>)
    7eb0:	6041      	str	r1, [r0, #4]
    7eb2:	491b      	ldr	r1, [pc, #108]	; (7f20 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    7eb4:	6001      	str	r1, [r0, #0]
    7eb6:	491b      	ldr	r1, [pc, #108]	; (7f24 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    7eb8:	6281      	str	r1, [r0, #40]	; 0x28
    7eba:	491b      	ldr	r1, [pc, #108]	; (7f28 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    7ebc:	62c1      	str	r1, [r0, #44]	; 0x2c
    7ebe:	491b      	ldr	r1, [pc, #108]	; (7f2c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    7ec0:	60c1      	str	r1, [r0, #12]
    7ec2:	491b      	ldr	r1, [pc, #108]	; (7f30 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    7ec4:	6181      	str	r1, [r0, #24]
    7ec6:	491b      	ldr	r1, [pc, #108]	; (7f34 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    7ec8:	6301      	str	r1, [r0, #48]	; 0x30
    7eca:	491b      	ldr	r1, [pc, #108]	; (7f38 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    7ecc:	6201      	str	r1, [r0, #32]
    7ece:	491b      	ldr	r1, [pc, #108]	; (7f3c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    7ed0:	64c1      	str	r1, [r0, #76]	; 0x4c
    7ed2:	491b      	ldr	r1, [pc, #108]	; (7f40 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    7ed4:	6481      	str	r1, [r0, #72]	; 0x48
    7ed6:	491b      	ldr	r1, [pc, #108]	; (7f44 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    7ed8:	6441      	str	r1, [r0, #68]	; 0x44
    7eda:	491b      	ldr	r1, [pc, #108]	; (7f48 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    7edc:	6341      	str	r1, [r0, #52]	; 0x34
    7ede:	491b      	ldr	r1, [pc, #108]	; (7f4c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    7ee0:	61c1      	str	r1, [r0, #28]
    7ee2:	481c      	ldr	r0, [pc, #112]	; (7f54 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    7ee4:	491a      	ldr	r1, [pc, #104]	; (7f50 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    7ee6:	6081      	str	r1, [r0, #8]
    7ee8:	491b      	ldr	r1, [pc, #108]	; (7f58 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    7eea:	61c1      	str	r1, [r0, #28]
    7eec:	491b      	ldr	r1, [pc, #108]	; (7f5c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    7eee:	6241      	str	r1, [r0, #36]	; 0x24
    7ef0:	491b      	ldr	r1, [pc, #108]	; (7f60 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    7ef2:	62c1      	str	r1, [r0, #44]	; 0x2c
    7ef4:	491b      	ldr	r1, [pc, #108]	; (7f64 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    7ef6:	6101      	str	r1, [r0, #16]
    7ef8:	491b      	ldr	r1, [pc, #108]	; (7f68 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    7efa:	6141      	str	r1, [r0, #20]
    7efc:	491b      	ldr	r1, [pc, #108]	; (7f6c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    7efe:	6441      	str	r1, [r0, #68]	; 0x44
    7f00:	6341      	str	r1, [r0, #52]	; 0x34
    7f02:	491b      	ldr	r1, [pc, #108]	; (7f70 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    7f04:	6181      	str	r1, [r0, #24]
    7f06:	491b      	ldr	r1, [pc, #108]	; (7f74 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    7f08:	6301      	str	r1, [r0, #48]	; 0x30
    7f0a:	491b      	ldr	r1, [pc, #108]	; (7f78 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    7f0c:	6481      	str	r1, [r0, #72]	; 0x48
    7f0e:	491b      	ldr	r1, [pc, #108]	; (7f7c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    7f10:	64c1      	str	r1, [r0, #76]	; 0x4c
    7f12:	4770      	bx	lr
    7f14:	000095e5 	.word	0x000095e5
    7f18:	20000148 	.word	0x20000148
    7f1c:	00008f21 	.word	0x00008f21
    7f20:	00008f7d 	.word	0x00008f7d
    7f24:	000092fd 	.word	0x000092fd
    7f28:	00009341 	.word	0x00009341
    7f2c:	00009029 	.word	0x00009029
    7f30:	000095bd 	.word	0x000095bd
    7f34:	00009701 	.word	0x00009701
    7f38:	000090d5 	.word	0x000090d5
    7f3c:	000092d1 	.word	0x000092d1
    7f40:	000092a5 	.word	0x000092a5
    7f44:	0000957d 	.word	0x0000957d
    7f48:	000095ad 	.word	0x000095ad
    7f4c:	00009619 	.word	0x00009619
    7f50:	00009a99 	.word	0x00009a99
    7f54:	200001ac 	.word	0x200001ac
    7f58:	00009ac1 	.word	0x00009ac1
    7f5c:	00009881 	.word	0x00009881
    7f60:	00009959 	.word	0x00009959
    7f64:	00009855 	.word	0x00009855
    7f68:	00009a01 	.word	0x00009a01
    7f6c:	000099dd 	.word	0x000099dd
    7f70:	00009a25 	.word	0x00009a25
    7f74:	00009b19 	.word	0x00009b19
    7f78:	00009911 	.word	0x00009911
    7f7c:	00009941 	.word	0x00009941

00007f80 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    7f80:	4806      	ldr	r0, [pc, #24]	; (7f9c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    7f82:	4905      	ldr	r1, [pc, #20]	; (7f98 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    7f84:	6581      	str	r1, [r0, #88]	; 0x58
    7f86:	4906      	ldr	r1, [pc, #24]	; (7fa0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    7f88:	6601      	str	r1, [r0, #96]	; 0x60
    7f8a:	4807      	ldr	r0, [pc, #28]	; (7fa8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    7f8c:	4905      	ldr	r1, [pc, #20]	; (7fa4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    7f8e:	6581      	str	r1, [r0, #88]	; 0x58
    7f90:	4906      	ldr	r1, [pc, #24]	; (7fac <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    7f92:	65c1      	str	r1, [r0, #92]	; 0x5c
    7f94:	4770      	bx	lr
    7f96:	0000      	.short	0x0000
    7f98:	00009361 	.word	0x00009361
    7f9c:	20000148 	.word	0x20000148
    7fa0:	00009439 	.word	0x00009439
    7fa4:	00009985 	.word	0x00009985
    7fa8:	200001ac 	.word	0x200001ac
    7fac:	000099b5 	.word	0x000099b5

00007fb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    7fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7fb4:	2601      	movs	r6, #1
    7fb6:	4c7c      	ldr	r4, [pc, #496]	; (81a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a8>)
    7fb8:	2500      	movs	r5, #0
    7fba:	f366 0107 	bfi	r1, r6, #0, #8
    7fbe:	8065      	strh	r5, [r4, #2]
    7fc0:	7065      	strb	r5, [r4, #1]
    7fc2:	7025      	strb	r5, [r4, #0]
    7fc4:	60a0      	str	r0, [r4, #8]
    7fc6:	4689      	mov	r9, r1
    7fc8:	4680      	mov	r8, r0
    7fca:	f880 6103 	strb.w	r6, [r0, #259]	; 0x103
    7fce:	8800      	ldrh	r0, [r0, #0]
    7fd0:	f7fc fb5c 	bl	468c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    7fd4:	b180      	cbz	r0, 7ff8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x48>
    7fd6:	68a0      	ldr	r0, [r4, #8]
    7fd8:	8800      	ldrh	r0, [r0, #0]
    7fda:	f7fc fe01 	bl	4be0 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    7fde:	68a0      	ldr	r0, [r4, #8]
    7fe0:	8800      	ldrh	r0, [r0, #0]
    7fe2:	f7fc fda5 	bl	4b30 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    7fe6:	68a0      	ldr	r0, [r4, #8]
    7fe8:	f8b0 10fa 	ldrh.w	r1, [r0, #250]	; 0xfa
    7fec:	b1c9      	cbz	r1, 8022 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x22>
    7fee:	3070      	adds	r0, #112	; 0x70
    7ff0:	f006 fdbd 	bl	eb6e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    7ff4:	b118      	cbz	r0, 7ffe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4e>
    7ff6:	e014      	b.n	8022 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x22>
    7ff8:	f640 31c9 	movw	r1, #3017	; 0xbc9
    7ffc:	e06b      	b.n	80d6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd6>
    7ffe:	68a0      	ldr	r0, [r4, #8]
    8000:	f890 1178 	ldrb.w	r1, [r0, #376]	; 0x178
    8004:	f88d 1000 	strb.w	r1, [sp]
    8008:	9900      	ldr	r1, [sp, #0]
    800a:	9100      	str	r1, [sp, #0]
    800c:	f89d 1000 	ldrb.w	r1, [sp]
    8010:	b139      	cbz	r1, 8022 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x22>
    8012:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    8016:	2301      	movs	r3, #1
    8018:	4619      	mov	r1, r3
    801a:	3070      	adds	r0, #112	; 0x70
    801c:	f005 f9ff 	bl	d41e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8020:	b180      	cbz	r0, 8044 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x44>
    8022:	68a0      	ldr	r0, [r4, #8]
    8024:	3070      	adds	r0, #112	; 0x70
    8026:	f006 fda2 	bl	eb6e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    802a:	b128      	cbz	r0, 8038 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38>
    802c:	68a0      	ldr	r0, [r4, #8]
    802e:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
    8032:	bf00      	nop
    8034:	f000 fbb0 	bl	8798 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x798>
    8038:	68a0      	ldr	r0, [r4, #8]
    803a:	f890 1105 	ldrb.w	r1, [r0, #261]	; 0x105
    803e:	b189      	cbz	r1, 8064 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x64>
    8040:	80a5      	strh	r5, [r4, #4]
    8042:	e01e      	b.n	8082 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x82>
    8044:	68a0      	ldr	r0, [r4, #8]
    8046:	f8a0 50a8 	strh.w	r5, [r0, #168]	; 0xa8
    804a:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    804e:	f880 10ee 	strb.w	r1, [r0, #238]	; 0xee
    8052:	2100      	movs	r1, #0
    8054:	2002      	movs	r0, #2
    8056:	f000 fe41 	bl	8cdc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcdc>
    805a:	68a0      	ldr	r0, [r4, #8]
    805c:	f880 5102 	strb.w	r5, [r0, #258]	; 0x102
    8060:	2002      	movs	r0, #2
    8062:	e7e7      	b.n	8034 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x34>
    8064:	f890 11b8 	ldrb.w	r1, [r0, #440]	; 0x1b8
    8068:	f88d 1000 	strb.w	r1, [sp]
    806c:	9900      	ldr	r1, [sp, #0]
    806e:	9100      	str	r1, [sp, #0]
    8070:	f89d 1000 	ldrb.w	r1, [sp]
    8074:	b919      	cbnz	r1, 807e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7e>
    8076:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    8078:	8a82      	ldrh	r2, [r0, #20]
    807a:	4291      	cmp	r1, r2
    807c:	d800      	bhi.n	8080 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x80>
    807e:	8a81      	ldrh	r1, [r0, #20]
    8080:	80a1      	strh	r1, [r4, #4]
    8082:	f830 1ffe 	ldrh.w	r1, [r0, #254]!
    8086:	1e49      	subs	r1, r1, #1
    8088:	b28f      	uxth	r7, r1
    808a:	f830 1f02 	ldrh.w	r1, [r0, #2]!
    808e:	4439      	add	r1, r7
    8090:	f820 195c 	strh.w	r1, [r0], #-92
    8094:	8801      	ldrh	r1, [r0, #0]
    8096:	4439      	add	r1, r7
    8098:	8001      	strh	r1, [r0, #0]
    809a:	f001 fd6b 	bl	9b74 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b74>
    809e:	b120      	cbz	r0, 80aa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xaa>
    80a0:	68a0      	ldr	r0, [r4, #8]
    80a2:	f850 1f98 	ldr.w	r1, [r0, #152]!
    80a6:	4439      	add	r1, r7
    80a8:	6001      	str	r1, [r0, #0]
    80aa:	68a1      	ldr	r1, [r4, #8]
    80ac:	f8b1 00fa 	ldrh.w	r0, [r1, #250]	; 0xfa
    80b0:	2801      	cmp	r0, #1
    80b2:	d802      	bhi.n	80ba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xba>
    80b4:	1c40      	adds	r0, r0, #1
    80b6:	f8a1 00fa 	strh.w	r0, [r1, #250]	; 0xfa
    80ba:	b10f      	cbz	r7, 80c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc0>
    80bc:	f881 510c 	strb.w	r5, [r1, #268]	; 0x10c
    80c0:	f881 5102 	strb.w	r5, [r1, #258]	; 0x102
    80c4:	f8b1 20fe 	ldrh.w	r2, [r1, #254]	; 0xfe
    80c8:	f101 0070 	add.w	r0, r1, #112	; 0x70
    80cc:	f005 fb29 	bl	d722 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    80d0:	b120      	cbz	r0, 80dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdc>
    80d2:	f640 410d 	movw	r1, #3085	; 0xc0d
    80d6:	2031      	movs	r0, #49	; 0x31
    80d8:	f7fb fea8 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    80dc:	68a0      	ldr	r0, [r4, #8]
    80de:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    80e2:	290b      	cmp	r1, #11
    80e4:	d001      	beq.n	80ea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xea>
    80e6:	290c      	cmp	r1, #12
    80e8:	d118      	bne.n	811c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11c>
    80ea:	f8b0 2074 	ldrh.w	r2, [r0, #116]	; 0x74
    80ee:	f8b0 3194 	ldrh.w	r3, [r0, #404]	; 0x194
    80f2:	1ad2      	subs	r2, r2, r3
    80f4:	b212      	sxth	r2, r2
    80f6:	2a00      	cmp	r2, #0
    80f8:	db10      	blt.n	811c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11c>
    80fa:	f8d0 1196 	ldr.w	r1, [r0, #406]	; 0x196
    80fe:	f8c0 1086 	str.w	r1, [r0, #134]	; 0x86
    8102:	f890 119a 	ldrb.w	r1, [r0, #410]	; 0x19a
    8106:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
    810a:	2103      	movs	r1, #3
    810c:	f7fd fdcc 	bl	5ca8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    8110:	68a0      	ldr	r0, [r4, #8]
    8112:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
    8116:	f880 60be 	strb.w	r6, [r0, #190]	; 0xbe
    811a:	e026      	b.n	816a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16a>
    811c:	2924      	cmp	r1, #36	; 0x24
    811e:	d111      	bne.n	8144 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x144>
    8120:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
    8124:	f8b0 2194 	ldrh.w	r2, [r0, #404]	; 0x194
    8128:	1a89      	subs	r1, r1, r2
    812a:	b209      	sxth	r1, r1
    812c:	2900      	cmp	r1, #0
    812e:	db09      	blt.n	8144 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x144>
    8130:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
    8134:	f000 fe82 	bl	8e3c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe3c>
    8138:	2800      	cmp	r0, #0
    813a:	68a0      	ldr	r0, [r4, #8]
    813c:	f880 51ae 	strb.w	r5, [r0, #430]	; 0x1ae
    8140:	d029      	beq.n	8196 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x196>
    8142:	e012      	b.n	816a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16a>
    8144:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    8148:	2924      	cmp	r1, #36	; 0x24
    814a:	d001      	beq.n	8150 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x150>
    814c:	2925      	cmp	r1, #37	; 0x25
    814e:	d10c      	bne.n	816a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16a>
    8150:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
    8154:	f8b0 2194 	ldrh.w	r2, [r0, #404]	; 0x194
    8158:	1a89      	subs	r1, r1, r2
    815a:	b209      	sxth	r1, r1
    815c:	2900      	cmp	r1, #0
    815e:	db04      	blt.n	816a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16a>
    8160:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    8164:	f000 fe6a 	bl	8e3c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe3c>
    8168:	b1a8      	cbz	r0, 8196 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x196>
    816a:	4810      	ldr	r0, [pc, #64]	; (81ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1ac>)
    816c:	9000      	str	r0, [sp, #0]
    816e:	4b10      	ldr	r3, [pc, #64]	; (81b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b0>)
    8170:	4a10      	ldr	r2, [pc, #64]	; (81b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b4>)
    8172:	4641      	mov	r1, r8
    8174:	4648      	mov	r0, r9
    8176:	f7fc fde9 	bl	4d4c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    817a:	68a0      	ldr	r0, [r4, #8]
    817c:	2301      	movs	r3, #1
    817e:	2105      	movs	r1, #5
    8180:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8184:	3070      	adds	r0, #112	; 0x70
    8186:	f005 f94a 	bl	d41e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    818a:	2800      	cmp	r0, #0
    818c:	d009      	beq.n	81a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a2>
    818e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8192:	f7fc bdd5 	b.w	4d40 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    8196:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    819a:	2100      	movs	r1, #0
    819c:	4608      	mov	r0, r1
    819e:	f000 bbd5 	b.w	894c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x94c>
    81a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    81a6:	0000      	.short	0x0000
    81a8:	20000134 	.word	0x20000134
    81ac:	0000894d 	.word	0x0000894d
    81b0:	00008451 	.word	0x00008451
    81b4:	00008d89 	.word	0x00008d89
    81b8:	b570      	push	{r4, r5, r6, lr}
    81ba:	4c0f      	ldr	r4, [pc, #60]	; (81f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1f8>)
    81bc:	68a5      	ldr	r5, [r4, #8]
    81be:	f895 107d 	ldrb.w	r1, [r5, #125]	; 0x7d
    81c2:	2920      	cmp	r1, #32
    81c4:	d002      	beq.n	81cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1cc>
    81c6:	2926      	cmp	r1, #38	; 0x26
    81c8:	d003      	beq.n	81d2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d2>
    81ca:	e011      	b.n	81f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1f0>
    81cc:	f000 fe84 	bl	8ed8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xed8>
    81d0:	e008      	b.n	81e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e4>
    81d2:	f895 207e 	ldrb.w	r2, [r5, #126]	; 0x7e
    81d6:	2301      	movs	r3, #1
    81d8:	210b      	movs	r1, #11
    81da:	f105 0070 	add.w	r0, r5, #112	; 0x70
    81de:	f005 f91e 	bl	d41e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    81e2:	b138      	cbz	r0, 81f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1f4>
    81e4:	68a1      	ldr	r1, [r4, #8]
    81e6:	2000      	movs	r0, #0
    81e8:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    81ec:	f881 00ae 	strb.w	r0, [r1, #174]	; 0xae
    81f0:	2000      	movs	r0, #0
    81f2:	bd70      	pop	{r4, r5, r6, pc}
    81f4:	202a      	movs	r0, #42	; 0x2a
    81f6:	e7e9      	b.n	81cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1cc>
    81f8:	20000134 	.word	0x20000134
    81fc:	4804      	ldr	r0, [pc, #16]	; (8210 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x210>)
    81fe:	2100      	movs	r1, #0
    8200:	6880      	ldr	r0, [r0, #8]
    8202:	f820 1fb0 	strh.w	r1, [r0, #176]!
    8206:	7881      	ldrb	r1, [r0, #2]
    8208:	1c49      	adds	r1, r1, #1
    820a:	7081      	strb	r1, [r0, #2]
    820c:	4770      	bx	lr
    820e:	0000      	.short	0x0000
    8210:	20000134 	.word	0x20000134
    8214:	4807      	ldr	r0, [pc, #28]	; (8234 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x234>)
    8216:	b510      	push	{r4, lr}
    8218:	6881      	ldr	r1, [r0, #8]
    821a:	f811 0fb2 	ldrb.w	r0, [r1, #178]!
    821e:	1e40      	subs	r0, r0, #1
    8220:	b240      	sxtb	r0, r0
    8222:	7008      	strb	r0, [r1, #0]
    8224:	2800      	cmp	r0, #0
    8226:	da04      	bge.n	8232 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x232>
    8228:	f44f 71c9 	mov.w	r1, #402	; 0x192
    822c:	2031      	movs	r0, #49	; 0x31
    822e:	f7fb fdfd 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8232:	bd10      	pop	{r4, pc}
    8234:	20000134 	.word	0x20000134
    8238:	491a      	ldr	r1, [pc, #104]	; (82a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2a4>)
    823a:	b508      	push	{r3, lr}
    823c:	6889      	ldr	r1, [r1, #8]
    823e:	f891 207e 	ldrb.w	r2, [r1, #126]	; 0x7e
    8242:	b1b8      	cbz	r0, 8274 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x274>
    8244:	2a10      	cmp	r2, #16
    8246:	d006      	beq.n	8256 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x256>
    8248:	2a14      	cmp	r2, #20
    824a:	d007      	beq.n	825c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x25c>
    824c:	2a15      	cmp	r2, #21
    824e:	d008      	beq.n	8262 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x262>
    8250:	2a1b      	cmp	r2, #27
    8252:	d122      	bne.n	829a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x29a>
    8254:	e008      	b.n	8268 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x268>
    8256:	2101      	movs	r1, #1
    8258:	200b      	movs	r0, #11
    825a:	e007      	b.n	826c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x26c>
    825c:	f001 faac 	bl	97b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17b8>
    8260:	e006      	b.n	8270 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x270>
    8262:	f000 fd59 	bl	8d18 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd18>
    8266:	e003      	b.n	8270 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x270>
    8268:	2101      	movs	r1, #1
    826a:	2006      	movs	r0, #6
    826c:	f000 fd36 	bl	8cdc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcdc>
    8270:	2001      	movs	r0, #1
    8272:	bd08      	pop	{r3, pc}
    8274:	2a21      	cmp	r2, #33	; 0x21
    8276:	d110      	bne.n	829a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x29a>
    8278:	f891 01ae 	ldrb.w	r0, [r1, #430]	; 0x1ae
    827c:	2802      	cmp	r0, #2
    827e:	d00e      	beq.n	829e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x29e>
    8280:	f891 01ae 	ldrb.w	r0, [r1, #430]	; 0x1ae
    8284:	2801      	cmp	r0, #1
    8286:	d108      	bne.n	829a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x29a>
    8288:	f891 01af 	ldrb.w	r0, [r1, #431]	; 0x1af
    828c:	f88d 0000 	strb.w	r0, [sp]
    8290:	9800      	ldr	r0, [sp, #0]
    8292:	9000      	str	r0, [sp, #0]
    8294:	f89d 0000 	ldrb.w	r0, [sp]
    8298:	b108      	cbz	r0, 829e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x29e>
    829a:	2000      	movs	r0, #0
    829c:	bd08      	pop	{r3, pc}
    829e:	2101      	movs	r1, #1
    82a0:	2017      	movs	r0, #23
    82a2:	e7e3      	b.n	826c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x26c>
    82a4:	20000134 	.word	0x20000134
    82a8:	b538      	push	{r3, r4, r5, lr}
    82aa:	2800      	cmp	r0, #0
    82ac:	d16b      	bne.n	8386 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x386>
    82ae:	4c37      	ldr	r4, [pc, #220]	; (838c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38c>)
    82b0:	68a0      	ldr	r0, [r4, #8]
    82b2:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    82b6:	07ca      	lsls	r2, r1, #31
    82b8:	d002      	beq.n	82c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c0>
    82ba:	2101      	movs	r1, #1
    82bc:	2009      	movs	r0, #9
    82be:	e05b      	b.n	8378 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x378>
    82c0:	078a      	lsls	r2, r1, #30
    82c2:	d50a      	bpl.n	82da <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2da>
    82c4:	2101      	movs	r1, #1
    82c6:	200c      	movs	r0, #12
    82c8:	f000 fd08 	bl	8cdc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcdc>
    82cc:	68a0      	ldr	r0, [r4, #8]
    82ce:	f810 1fb6 	ldrb.w	r1, [r0, #182]!
    82d2:	f041 0101 	orr.w	r1, r1, #1
    82d6:	7001      	strb	r1, [r0, #0]
    82d8:	e050      	b.n	837c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x37c>
    82da:	074a      	lsls	r2, r1, #29
    82dc:	d502      	bpl.n	82e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2e4>
    82de:	2101      	movs	r1, #1
    82e0:	2013      	movs	r0, #19
    82e2:	e049      	b.n	8378 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x378>
    82e4:	070a      	lsls	r2, r1, #28
    82e6:	d505      	bpl.n	82f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2f4>
    82e8:	f810 1fe9 	ldrb.w	r1, [r0, #233]!
    82ec:	7141      	strb	r1, [r0, #5]
    82ee:	2101      	movs	r1, #1
    82f0:	2007      	movs	r0, #7
    82f2:	e041      	b.n	8378 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x378>
    82f4:	f011 0f30 	tst.w	r1, #48	; 0x30
    82f8:	d045      	beq.n	8386 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x386>
    82fa:	f890 11a5 	ldrb.w	r1, [r0, #421]	; 0x1a5
    82fe:	f88d 1000 	strb.w	r1, [sp]
    8302:	9900      	ldr	r1, [sp, #0]
    8304:	9100      	str	r1, [sp, #0]
    8306:	f89d 1000 	ldrb.w	r1, [sp]
    830a:	bbc9      	cbnz	r1, 8380 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x380>
    830c:	f890 11a4 	ldrb.w	r1, [r0, #420]	; 0x1a4
    8310:	f88d 1000 	strb.w	r1, [sp]
    8314:	9900      	ldr	r1, [sp, #0]
    8316:	9100      	str	r1, [sp, #0]
    8318:	f89d 1000 	ldrb.w	r1, [sp]
    831c:	b1c9      	cbz	r1, 8352 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x352>
    831e:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8322:	2924      	cmp	r1, #36	; 0x24
    8324:	d02d      	beq.n	8382 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x382>
    8326:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    832a:	2924      	cmp	r1, #36	; 0x24
    832c:	d029      	beq.n	8382 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x382>
    832e:	2300      	movs	r3, #0
    8330:	f500 72cb 	add.w	r2, r0, #406	; 0x196
    8334:	f500 71d2 	add.w	r1, r0, #420	; 0x1a4
    8338:	f005 fc9d 	bl	dc76 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    833c:	68a0      	ldr	r0, [r4, #8]
    833e:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    8342:	f021 0120 	bic.w	r1, r1, #32
    8346:	f041 0110 	orr.w	r1, r1, #16
    834a:	7001      	strb	r1, [r0, #0]
    834c:	2100      	movs	r1, #0
    834e:	f880 1125 	strb.w	r1, [r0, #293]	; 0x125
    8352:	68a0      	ldr	r0, [r4, #8]
    8354:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    8358:	06c9      	lsls	r1, r1, #27
    835a:	d514      	bpl.n	8386 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x386>
    835c:	f005 fca6 	bl	dcac <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    8360:	f000 f910 	bl	8584 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x584>
    8364:	68a1      	ldr	r1, [r4, #8]
    8366:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    836a:	8bc2      	ldrh	r2, [r0, #30]
    836c:	f821 2fee 	strh.w	r2, [r1, #238]!
    8370:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    8372:	8048      	strh	r0, [r1, #2]
    8374:	2101      	movs	r1, #1
    8376:	2015      	movs	r0, #21
    8378:	f000 fcb0 	bl	8cdc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcdc>
    837c:	2001      	movs	r0, #1
    837e:	bd38      	pop	{r3, r4, r5, pc}
    8380:	e001      	b.n	8386 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x386>
    8382:	2301      	movs	r3, #1
    8384:	e7d4      	b.n	8330 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x330>
    8386:	2000      	movs	r0, #0
    8388:	e7f9      	b.n	837e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x37e>
    838a:	0000      	.short	0x0000
    838c:	20000134 	.word	0x20000134
    8390:	b570      	push	{r4, r5, r6, lr}
    8392:	460d      	mov	r5, r1
    8394:	4606      	mov	r6, r0
    8396:	f005 fab0 	bl	d8fa <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    839a:	4604      	mov	r4, r0
    839c:	4630      	mov	r0, r6
    839e:	f005 fab8 	bl	d912 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    83a2:	4629      	mov	r1, r5
    83a4:	f000 f81e 	bl	83e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3e4>
    83a8:	b1b8      	cbz	r0, 83da <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3da>
    83aa:	4620      	mov	r0, r4
    83ac:	f005 f8d0 	bl	d550 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    83b0:	0001      	movs	r1, r0
    83b2:	d00d      	beq.n	83d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3d0>
    83b4:	480a      	ldr	r0, [pc, #40]	; (83e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3e0>)
    83b6:	6880      	ldr	r0, [r0, #8]
    83b8:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    83bc:	428a      	cmp	r2, r1
    83be:	d007      	beq.n	83d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3d0>
    83c0:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
    83c4:	2901      	cmp	r1, #1
    83c6:	d005      	beq.n	83d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3d4>
    83c8:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    83cc:	4220      	tst	r0, r4
    83ce:	d004      	beq.n	83da <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3da>
    83d0:	2001      	movs	r0, #1
    83d2:	bd70      	pop	{r4, r5, r6, pc}
    83d4:	f890 01b1 	ldrb.w	r0, [r0, #433]	; 0x1b1
    83d8:	e7f8      	b.n	83cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3cc>
    83da:	2000      	movs	r0, #0
    83dc:	bd70      	pop	{r4, r5, r6, pc}
    83de:	0000      	.short	0x0000
    83e0:	20000134 	.word	0x20000134
    83e4:	b570      	push	{r4, r5, r6, lr}
    83e6:	460d      	mov	r5, r1
    83e8:	4604      	mov	r4, r0
    83ea:	f005 f8b1 	bl	d550 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    83ee:	b350      	cbz	r0, 8446 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x446>
    83f0:	4916      	ldr	r1, [pc, #88]	; (844c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x44c>)
    83f2:	6889      	ldr	r1, [r1, #8]
    83f4:	f891 206a 	ldrb.w	r2, [r1, #106]	; 0x6a
    83f8:	4282      	cmp	r2, r0
    83fa:	d024      	beq.n	8446 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x446>
    83fc:	f891 31ae 	ldrb.w	r3, [r1, #430]	; 0x1ae
    8400:	2b01      	cmp	r3, #1
    8402:	d005      	beq.n	8410 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x410>
    8404:	f891 3066 	ldrb.w	r3, [r1, #102]	; 0x66
    8408:	4223      	tst	r3, r4
    840a:	d013      	beq.n	8434 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x434>
    840c:	b11d      	cbz	r5, 8416 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x416>
    840e:	e01a      	b.n	8446 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x446>
    8410:	f891 31b0 	ldrb.w	r3, [r1, #432]	; 0x1b0
    8414:	e7f8      	b.n	8408 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x408>
    8416:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    841a:	4221      	tst	r1, r4
    841c:	d113      	bne.n	8446 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x446>
    841e:	b15a      	cbz	r2, 8438 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x438>
    8420:	2a04      	cmp	r2, #4
    8422:	d00e      	beq.n	8442 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x442>
    8424:	2804      	cmp	r0, #4
    8426:	d00c      	beq.n	8442 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x442>
    8428:	2a08      	cmp	r2, #8
    842a:	d00a      	beq.n	8442 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x442>
    842c:	2808      	cmp	r0, #8
    842e:	d008      	beq.n	8442 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x442>
    8430:	4282      	cmp	r2, r0
    8432:	d908      	bls.n	8446 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x446>
    8434:	2000      	movs	r0, #0
    8436:	bd70      	pop	{r4, r5, r6, pc}
    8438:	f240 1155 	movw	r1, #341	; 0x155
    843c:	2006      	movs	r0, #6
    843e:	f7fb fcf5 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8442:	4282      	cmp	r2, r0
    8444:	d3f6      	bcc.n	8434 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x434>
    8446:	2001      	movs	r0, #1
    8448:	bd70      	pop	{r4, r5, r6, pc}
    844a:	0000      	.short	0x0000
    844c:	20000134 	.word	0x20000134
    8450:	490c      	ldr	r1, [pc, #48]	; (8484 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x484>)
    8452:	4602      	mov	r2, r0
    8454:	7848      	ldrb	r0, [r1, #1]
    8456:	b998      	cbnz	r0, 8480 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x480>
    8458:	4608      	mov	r0, r1
    845a:	6880      	ldr	r0, [r0, #8]
    845c:	b142      	cbz	r2, 8470 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x470>
    845e:	7889      	ldrb	r1, [r1, #2]
    8460:	0709      	lsls	r1, r1, #28
    8462:	d503      	bpl.n	846c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x46c>
    8464:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
    8468:	2808      	cmp	r0, #8
    846a:	d009      	beq.n	8480 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x480>
    846c:	2001      	movs	r0, #1
    846e:	4770      	bx	lr
    8470:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    8474:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    8476:	8e81      	ldrh	r1, [r0, #52]	; 0x34
    8478:	428a      	cmp	r2, r1
    847a:	d801      	bhi.n	8480 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x480>
    847c:	f7ff b81a 	b.w	74b4 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    8480:	2000      	movs	r0, #0
    8482:	4770      	bx	lr
    8484:	20000134 	.word	0x20000134
    8488:	b538      	push	{r3, r4, r5, lr}
    848a:	4c3d      	ldr	r4, [pc, #244]	; (8580 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x580>)
    848c:	4605      	mov	r5, r0
    848e:	68a0      	ldr	r0, [r4, #8]
    8490:	3070      	adds	r0, #112	; 0x70
    8492:	f006 fb6c 	bl	eb6e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8496:	2800      	cmp	r0, #0
    8498:	d170      	bne.n	857c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x57c>
    849a:	2d00      	cmp	r5, #0
    849c:	d16e      	bne.n	857c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x57c>
    849e:	68a0      	ldr	r0, [r4, #8]
    84a0:	2301      	movs	r3, #1
    84a2:	4619      	mov	r1, r3
    84a4:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    84a8:	3070      	adds	r0, #112	; 0x70
    84aa:	f004 ffb8 	bl	d41e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    84ae:	2800      	cmp	r0, #0
    84b0:	d164      	bne.n	857c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x57c>
    84b2:	68a0      	ldr	r0, [r4, #8]
    84b4:	f890 1178 	ldrb.w	r1, [r0, #376]	; 0x178
    84b8:	f88d 1000 	strb.w	r1, [sp]
    84bc:	9900      	ldr	r1, [sp, #0]
    84be:	9100      	str	r1, [sp, #0]
    84c0:	f89d 1000 	ldrb.w	r1, [sp]
    84c4:	b149      	cbz	r1, 84da <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4da>
    84c6:	2100      	movs	r1, #0
    84c8:	f8a0 10a8 	strh.w	r1, [r0, #168]	; 0xa8
    84cc:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    84d0:	f880 10ee 	strb.w	r1, [r0, #238]	; 0xee
    84d4:	2100      	movs	r1, #0
    84d6:	2002      	movs	r0, #2
    84d8:	e045      	b.n	8566 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x566>
    84da:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    84de:	2301      	movs	r3, #1
    84e0:	2104      	movs	r1, #4
    84e2:	3070      	adds	r0, #112	; 0x70
    84e4:	f004 ff9b 	bl	d41e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    84e8:	4605      	mov	r5, r0
    84ea:	f7ff fedd 	bl	82a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2a8>
    84ee:	2800      	cmp	r0, #0
    84f0:	d144      	bne.n	857c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x57c>
    84f2:	4628      	mov	r0, r5
    84f4:	f7ff fea0 	bl	8238 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x238>
    84f8:	2800      	cmp	r0, #0
    84fa:	d13f      	bne.n	857c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x57c>
    84fc:	68a0      	ldr	r0, [r4, #8]
    84fe:	2301      	movs	r3, #1
    8500:	2100      	movs	r1, #0
    8502:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    8506:	3070      	adds	r0, #112	; 0x70
    8508:	f004 ff89 	bl	d41e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    850c:	b178      	cbz	r0, 852e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x52e>
    850e:	68a0      	ldr	r0, [r4, #8]
    8510:	2301      	movs	r3, #1
    8512:	2104      	movs	r1, #4
    8514:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8518:	3070      	adds	r0, #112	; 0x70
    851a:	f004 ff80 	bl	d41e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    851e:	b930      	cbnz	r0, 852e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x52e>
    8520:	68a0      	ldr	r0, [r4, #8]
    8522:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
    8526:	b110      	cbz	r0, 852e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x52e>
    8528:	2100      	movs	r1, #0
    852a:	2012      	movs	r0, #18
    852c:	e01b      	b.n	8566 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x566>
    852e:	68a0      	ldr	r0, [r4, #8]
    8530:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    8534:	290a      	cmp	r1, #10
    8536:	d01a      	beq.n	856e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x56e>
    8538:	2d00      	cmp	r5, #0
    853a:	d11f      	bne.n	857c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x57c>
    853c:	f000 fb1a 	bl	8b74 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb74>
    8540:	2800      	cmp	r0, #0
    8542:	d11b      	bne.n	857c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x57c>
    8544:	68a0      	ldr	r0, [r4, #8]
    8546:	2301      	movs	r3, #1
    8548:	2100      	movs	r1, #0
    854a:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    854e:	3070      	adds	r0, #112	; 0x70
    8550:	f004 ff65 	bl	d41e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8554:	2800      	cmp	r0, #0
    8556:	d011      	beq.n	857c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x57c>
    8558:	68a0      	ldr	r0, [r4, #8]
    855a:	f890 018c 	ldrb.w	r0, [r0, #396]	; 0x18c
    855e:	2800      	cmp	r0, #0
    8560:	d00c      	beq.n	857c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x57c>
    8562:	2100      	movs	r1, #0
    8564:	20ff      	movs	r0, #255	; 0xff
    8566:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    856a:	f000 bbb7 	b.w	8cdc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcdc>
    856e:	f810 1fea 	ldrb.w	r1, [r0, #234]!
    8572:	7101      	strb	r1, [r0, #4]
    8574:	2100      	movs	r1, #0
    8576:	2007      	movs	r0, #7
    8578:	e7f5      	b.n	8566 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x566>
    857a:	e7ff      	b.n	857c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x57c>
    857c:	bd38      	pop	{r3, r4, r5, pc}
    857e:	0000      	.short	0x0000
    8580:	20000134 	.word	0x20000134
    8584:	480a      	ldr	r0, [pc, #40]	; (85b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5b0>)
    8586:	b510      	push	{r4, lr}
    8588:	6881      	ldr	r1, [r0, #8]
    858a:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    858e:	2801      	cmp	r0, #1
    8590:	d009      	beq.n	85a6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5a6>
    8592:	8808      	ldrh	r0, [r1, #0]
    8594:	f501 72ed 	add.w	r2, r1, #474	; 0x1da
    8598:	312c      	adds	r1, #44	; 0x2c
    859a:	f005 fb48 	bl	dc2e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    859e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    85a2:	f7fd bdcf 	b.w	6144 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    85a6:	2002      	movs	r0, #2
    85a8:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    85ac:	bd10      	pop	{r4, pc}
    85ae:	0000      	.short	0x0000
    85b0:	20000134 	.word	0x20000134
    85b4:	b570      	push	{r4, r5, r6, lr}
    85b6:	4c25      	ldr	r4, [pc, #148]	; (864c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x64c>)
    85b8:	0005      	movs	r5, r0
    85ba:	d12f      	bne.n	861c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x61c>
    85bc:	f000 f8a4 	bl	8708 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x708>
    85c0:	f000 f848 	bl	8654 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x654>
    85c4:	0005      	movs	r5, r0
    85c6:	d129      	bne.n	861c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x61c>
    85c8:	8860      	ldrh	r0, [r4, #2]
    85ca:	0741      	lsls	r1, r0, #29
    85cc:	d506      	bpl.n	85dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5dc>
    85ce:	68a1      	ldr	r1, [r4, #8]
    85d0:	f891 1080 	ldrb.w	r1, [r1, #128]	; 0x80
    85d4:	2907      	cmp	r1, #7
    85d6:	d101      	bne.n	85dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5dc>
    85d8:	2101      	movs	r1, #1
    85da:	7021      	strb	r1, [r4, #0]
    85dc:	0780      	lsls	r0, r0, #30
    85de:	d512      	bpl.n	8606 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x606>
    85e0:	68e0      	ldr	r0, [r4, #12]
    85e2:	78c0      	ldrb	r0, [r0, #3]
    85e4:	2819      	cmp	r0, #25
    85e6:	d205      	bcs.n	85f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5f4>
    85e8:	4919      	ldr	r1, [pc, #100]	; (8650 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x650>)
    85ea:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    85ee:	b109      	cbz	r1, 85f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5f4>
    85f0:	4788      	blx	r1
    85f2:	e008      	b.n	8606 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x606>
    85f4:	28ff      	cmp	r0, #255	; 0xff
    85f6:	d004      	beq.n	8602 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x602>
    85f8:	f240 714d 	movw	r1, #1869	; 0x74d
    85fc:	2031      	movs	r0, #49	; 0x31
    85fe:	f7fb fc15 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8602:	f001 f91b 	bl	983c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x183c>
    8606:	78a0      	ldrb	r0, [r4, #2]
    8608:	06c0      	lsls	r0, r0, #27
    860a:	d507      	bpl.n	861c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x61c>
    860c:	68a0      	ldr	r0, [r4, #8]
    860e:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8612:	290b      	cmp	r1, #11
    8614:	d102      	bne.n	861c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x61c>
    8616:	210c      	movs	r1, #12
    8618:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    861c:	7860      	ldrb	r0, [r4, #1]
    861e:	0700      	lsls	r0, r0, #28
    8620:	d511      	bpl.n	8646 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x646>
    8622:	68a0      	ldr	r0, [r4, #8]
    8624:	2301      	movs	r3, #1
    8626:	2105      	movs	r1, #5
    8628:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    862c:	3070      	adds	r0, #112	; 0x70
    862e:	f004 fef6 	bl	d41e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8632:	b128      	cbz	r0, 8640 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x640>
    8634:	68a1      	ldr	r1, [r4, #8]
    8636:	2508      	movs	r5, #8
    8638:	2000      	movs	r0, #0
    863a:	f881 01c4 	strb.w	r0, [r1, #452]	; 0x1c4
    863e:	e002      	b.n	8646 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x646>
    8640:	2000      	movs	r0, #0
    8642:	f7fc fc4d 	bl	4ee0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    8646:	4628      	mov	r0, r5
    8648:	bd70      	pop	{r4, r5, r6, pc}
    864a:	0000      	.short	0x0000
    864c:	20000134 	.word	0x20000134
    8650:	200001ac 	.word	0x200001ac
    8654:	b570      	push	{r4, r5, r6, lr}
    8656:	4c2a      	ldr	r4, [pc, #168]	; (8700 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x700>)
    8658:	2000      	movs	r0, #0
    865a:	78a1      	ldrb	r1, [r4, #2]
    865c:	07c9      	lsls	r1, r1, #31
    865e:	d015      	beq.n	868c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x68c>
    8660:	6920      	ldr	r0, [r4, #16]
    8662:	2301      	movs	r3, #1
    8664:	2105      	movs	r1, #5
    8666:	78c5      	ldrb	r5, [r0, #3]
    8668:	68a0      	ldr	r0, [r4, #8]
    866a:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    866e:	3070      	adds	r0, #112	; 0x70
    8670:	f004 fed5 	bl	d41e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8674:	b158      	cbz	r0, 868e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x68e>
    8676:	1ead      	subs	r5, r5, #2
    8678:	2d0a      	cmp	r5, #10
    867a:	d206      	bcs.n	868a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x68a>
    867c:	e8df f005 	tbb	[pc, r5]
    8680:	05050707 	.word	0x05050707
    8684:	05050707 	.word	0x05050707
    8688:	0707      	.short	0x0707
    868a:	2008      	movs	r0, #8
    868c:	bd70      	pop	{r4, r5, r6, pc}
    868e:	6920      	ldr	r0, [r4, #16]
    8690:	f7fd fc34 	bl	5efc <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    8694:	b138      	cbz	r0, 86a6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6a6>
    8696:	6920      	ldr	r0, [r4, #16]
    8698:	78c5      	ldrb	r5, [r0, #3]
    869a:	b145      	cbz	r5, 86ae <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6ae>
    869c:	2d01      	cmp	r5, #1
    869e:	d006      	beq.n	86ae <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6ae>
    86a0:	2d16      	cmp	r5, #22
    86a2:	d118      	bne.n	86d6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6d6>
    86a4:	e003      	b.n	86ae <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6ae>
    86a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    86aa:	f000 bd3d 	b.w	9128 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1128>
    86ae:	68a0      	ldr	r0, [r4, #8]
    86b0:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    86b4:	f004 ff01 	bl	d4ba <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    86b8:	b168      	cbz	r0, 86d6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6d6>
    86ba:	68a1      	ldr	r1, [r4, #8]
    86bc:	f891 007d 	ldrb.w	r0, [r1, #125]	; 0x7d
    86c0:	281f      	cmp	r0, #31
    86c2:	d008      	beq.n	86d6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6d6>
    86c4:	2820      	cmp	r0, #32
    86c6:	d003      	beq.n	86d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6d0>
    86c8:	2d16      	cmp	r5, #22
    86ca:	d00c      	beq.n	86e6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6e6>
    86cc:	2002      	movs	r0, #2
    86ce:	bd70      	pop	{r4, r5, r6, pc}
    86d0:	2026      	movs	r0, #38	; 0x26
    86d2:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    86d6:	2d19      	cmp	r5, #25
    86d8:	d207      	bcs.n	86ea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6ea>
    86da:	480a      	ldr	r0, [pc, #40]	; (8704 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x704>)
    86dc:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    86e0:	b118      	cbz	r0, 86ea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6ea>
    86e2:	4780      	blx	r0
    86e4:	e003      	b.n	86ee <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6ee>
    86e6:	2020      	movs	r0, #32
    86e8:	bd70      	pop	{r4, r5, r6, pc}
    86ea:	f000 fd1d 	bl	9128 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1128>
    86ee:	68a2      	ldr	r2, [r4, #8]
    86f0:	e9f2 1332 	ldrd	r1, r3, [r2, #200]!	; 0xc8
    86f4:	1c49      	adds	r1, r1, #1
    86f6:	f143 0300 	adc.w	r3, r3, #0
    86fa:	e9c2 1300 	strd	r1, r3, [r2]
    86fe:	bd70      	pop	{r4, r5, r6, pc}
    8700:	20000134 	.word	0x20000134
    8704:	20000148 	.word	0x20000148
    8708:	b570      	push	{r4, r5, r6, lr}
    870a:	4c22      	ldr	r4, [pc, #136]	; (8794 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x794>)
    870c:	78a0      	ldrb	r0, [r4, #2]
    870e:	0700      	lsls	r0, r0, #28
    8710:	d53e      	bpl.n	8790 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x790>
    8712:	68a0      	ldr	r0, [r4, #8]
    8714:	3070      	adds	r0, #112	; 0x70
    8716:	f006 fa2a 	bl	eb6e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    871a:	b148      	cbz	r0, 8730 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x730>
    871c:	68a0      	ldr	r0, [r4, #8]
    871e:	21fe      	movs	r1, #254	; 0xfe
    8720:	2500      	movs	r5, #0
    8722:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
    8726:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    872a:	2919      	cmp	r1, #25
    872c:	d10c      	bne.n	8748 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x748>
    872e:	e004      	b.n	873a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x73a>
    8730:	f240 7157 	movw	r1, #1879	; 0x757
    8734:	2031      	movs	r0, #49	; 0x31
    8736:	f7fb fb79 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    873a:	f880 50b3 	strb.w	r5, [r0, #179]	; 0xb3
    873e:	f7ff fd69 	bl	8214 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x214>
    8742:	68a0      	ldr	r0, [r4, #8]
    8744:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
    8748:	68a0      	ldr	r0, [r4, #8]
    874a:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    874e:	291f      	cmp	r1, #31
    8750:	d002      	beq.n	8758 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x758>
    8752:	2927      	cmp	r1, #39	; 0x27
    8754:	d113      	bne.n	877e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x77e>
    8756:	e00b      	b.n	8770 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x770>
    8758:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    875c:	f004 fead 	bl	d4ba <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    8760:	b108      	cbz	r0, 8766 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x766>
    8762:	2026      	movs	r0, #38	; 0x26
    8764:	e000      	b.n	8768 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x768>
    8766:	2020      	movs	r0, #32
    8768:	68a1      	ldr	r1, [r4, #8]
    876a:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    876e:	e006      	b.n	877e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x77e>
    8770:	2101      	movs	r1, #1
    8772:	f880 118d 	strb.w	r1, [r0, #397]	; 0x18d
    8776:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    877a:	f880 50ae 	strb.w	r5, [r0, #174]	; 0xae
    877e:	68a0      	ldr	r0, [r4, #8]
    8780:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
    8784:	2908      	cmp	r1, #8
    8786:	d103      	bne.n	8790 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x790>
    8788:	2102      	movs	r1, #2
    878a:	7021      	strb	r1, [r4, #0]
    878c:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
    8790:	bd70      	pop	{r4, r5, r6, pc}
    8792:	0000      	.short	0x0000
    8794:	20000134 	.word	0x20000134
    8798:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    879a:	4605      	mov	r5, r0
    879c:	4668      	mov	r0, sp
    879e:	f7fc fa09 	bl	4bb4 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    87a2:	b318      	cbz	r0, 87ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7ec>
    87a4:	2222      	movs	r2, #34	; 0x22
    87a6:	2100      	movs	r1, #0
    87a8:	9800      	ldr	r0, [sp, #0]
    87aa:	f003 fc28 	bl	bffe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    87ae:	2103      	movs	r1, #3
    87b0:	9800      	ldr	r0, [sp, #0]
    87b2:	f005 f902 	bl	d9ba <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    87b6:	9800      	ldr	r0, [sp, #0]
    87b8:	7801      	ldrb	r1, [r0, #0]
    87ba:	f021 0110 	bic.w	r1, r1, #16
    87be:	7001      	strb	r1, [r0, #0]
    87c0:	4629      	mov	r1, r5
    87c2:	f7fd fbc7 	bl	5f54 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    87c6:	2100      	movs	r1, #0
    87c8:	4c5f      	ldr	r4, [pc, #380]	; (8948 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x948>)
    87ca:	f644 162f 	movw	r6, #18735	; 0x492f
    87ce:	2d0e      	cmp	r5, #14
    87d0:	d07e      	beq.n	88d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8d0>
    87d2:	dc0e      	bgt.n	87f2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7f2>
    87d4:	f1a5 0502 	sub.w	r5, r5, #2
    87d8:	2d0c      	cmp	r5, #12
    87da:	d21c      	bcs.n	8816 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x816>
    87dc:	e8df f005 	tbb	[pc, r5]
    87e0:	aa491b1e 	.word	0xaa491b1e
    87e4:	551b1eaa 	.word	0x551b1eaa
    87e8:	3034aa1b 	.word	0x3034aa1b
    87ec:	f640 1187 	movw	r1, #2439	; 0x987
    87f0:	e0a6      	b.n	8940 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x940>
    87f2:	2d15      	cmp	r5, #21
    87f4:	d05c      	beq.n	88b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8b0>
    87f6:	dc08      	bgt.n	880a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x80a>
    87f8:	2d11      	cmp	r5, #17
    87fa:	d014      	beq.n	8826 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x826>
    87fc:	2d12      	cmp	r5, #18
    87fe:	d01e      	beq.n	883e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x83e>
    8800:	2d13      	cmp	r5, #19
    8802:	d01c      	beq.n	883e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x83e>
    8804:	2d14      	cmp	r5, #20
    8806:	d106      	bne.n	8816 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x816>
    8808:	e052      	b.n	88b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8b0>
    880a:	2d16      	cmp	r5, #22
    880c:	d027      	beq.n	885e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x85e>
    880e:	2d17      	cmp	r5, #23
    8810:	d069      	beq.n	88e6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8e6>
    8812:	2dff      	cmp	r5, #255	; 0xff
    8814:	d072      	beq.n	88fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8fc>
    8816:	f640 11fd 	movw	r1, #2557	; 0x9fd
    881a:	e091      	b.n	8940 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x940>
    881c:	68a1      	ldr	r1, [r4, #8]
    881e:	9800      	ldr	r0, [sp, #0]
    8820:	f891 10ee 	ldrb.w	r1, [r1, #238]	; 0xee
    8824:	e00e      	b.n	8844 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x844>
    8826:	68a0      	ldr	r0, [r4, #8]
    8828:	f890 10ee 	ldrb.w	r1, [r0, #238]	; 0xee
    882c:	9800      	ldr	r0, [sp, #0]
    882e:	f005 f8a0 	bl	d972 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    8832:	68a0      	ldr	r0, [r4, #8]
    8834:	f890 10ef 	ldrb.w	r1, [r0, #239]	; 0xef
    8838:	9800      	ldr	r0, [sp, #0]
    883a:	f005 f89c 	bl	d976 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    883e:	e079      	b.n	8934 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x934>
    8840:	9800      	ldr	r0, [sp, #0]
    8842:	2106      	movs	r1, #6
    8844:	7101      	strb	r1, [r0, #4]
    8846:	e075      	b.n	8934 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x934>
    8848:	9800      	ldr	r0, [sp, #0]
    884a:	220b      	movs	r2, #11
    884c:	7102      	strb	r2, [r0, #4]
    884e:	2259      	movs	r2, #89	; 0x59
    8850:	7142      	strb	r2, [r0, #5]
    8852:	7181      	strb	r1, [r0, #6]
    8854:	21fe      	movs	r1, #254	; 0xfe
    8856:	71c1      	strb	r1, [r0, #7]
    8858:	2112      	movs	r1, #18
    885a:	7201      	strb	r1, [r0, #8]
    885c:	e06a      	b.n	8934 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x934>
    885e:	9800      	ldr	r0, [sp, #0]
    8860:	f8d4 1008 	ldr.w	r1, [r4, #8]
    8864:	f891 21b0 	ldrb.w	r2, [r1, #432]	; 0x1b0
    8868:	7102      	strb	r2, [r0, #4]
    886a:	f891 11b1 	ldrb.w	r1, [r1, #433]	; 0x1b1
    886e:	7141      	strb	r1, [r0, #5]
    8870:	e060      	b.n	8934 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x934>
    8872:	68a1      	ldr	r1, [r4, #8]
    8874:	9800      	ldr	r0, [sp, #0]
    8876:	f501 718c 	add.w	r1, r1, #280	; 0x118
    887a:	f005 f88f 	bl	d99c <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>
    887e:	68a1      	ldr	r1, [r4, #8]
    8880:	9800      	ldr	r0, [sp, #0]
    8882:	31e4      	adds	r1, #228	; 0xe4
    8884:	f005 f887 	bl	d996 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>
    8888:	e054      	b.n	8934 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x934>
    888a:	9101      	str	r1, [sp, #4]
    888c:	9102      	str	r1, [sp, #8]
    888e:	f001 fe05 	bl	a49c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    8892:	68a1      	ldr	r1, [r4, #8]
    8894:	4030      	ands	r0, r6
    8896:	f891 10bc 	ldrb.w	r1, [r1, #188]	; 0xbc
    889a:	4001      	ands	r1, r0
    889c:	f88d 1004 	strb.w	r1, [sp, #4]
    88a0:	0a00      	lsrs	r0, r0, #8
    88a2:	f88d 0005 	strb.w	r0, [sp, #5]
    88a6:	a901      	add	r1, sp, #4
    88a8:	9800      	ldr	r0, [sp, #0]
    88aa:	f005 f881 	bl	d9b0 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>
    88ae:	e041      	b.n	8934 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x934>
    88b0:	68a0      	ldr	r0, [r4, #8]
    88b2:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    88b6:	9800      	ldr	r0, [sp, #0]
    88b8:	f005 f887 	bl	d9ca <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    88bc:	68a0      	ldr	r0, [r4, #8]
    88be:	f8b0 10f0 	ldrh.w	r1, [r0, #240]	; 0xf0
    88c2:	9800      	ldr	r0, [sp, #0]
    88c4:	f005 f885 	bl	d9d2 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    88c8:	68a0      	ldr	r0, [r4, #8]
    88ca:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    88ce:	e000      	b.n	88d2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8d2>
    88d0:	e015      	b.n	88fe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8fe>
    88d2:	9800      	ldr	r0, [sp, #0]
    88d4:	f005 f881 	bl	d9da <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    88d8:	68a0      	ldr	r0, [r4, #8]
    88da:	f8b0 10ee 	ldrh.w	r1, [r0, #238]	; 0xee
    88de:	9800      	ldr	r0, [sp, #0]
    88e0:	f005 f87f 	bl	d9e2 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    88e4:	e026      	b.n	8934 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x934>
    88e6:	68a1      	ldr	r1, [r4, #8]
    88e8:	f891 01ae 	ldrb.w	r0, [r1, #430]	; 0x1ae
    88ec:	2801      	cmp	r0, #1
    88ee:	9800      	ldr	r0, [sp, #0]
    88f0:	d0b8      	beq.n	8864 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x864>
    88f2:	f811 2f66 	ldrb.w	r2, [r1, #102]!
    88f6:	7102      	strb	r2, [r0, #4]
    88f8:	7849      	ldrb	r1, [r1, #1]
    88fa:	e7b8      	b.n	886e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x86e>
    88fc:	e012      	b.n	8924 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x924>
    88fe:	9101      	str	r1, [sp, #4]
    8900:	9102      	str	r1, [sp, #8]
    8902:	f001 fdcb 	bl	a49c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    8906:	68a1      	ldr	r1, [r4, #8]
    8908:	4030      	ands	r0, r6
    890a:	f891 10bc 	ldrb.w	r1, [r1, #188]	; 0xbc
    890e:	4001      	ands	r1, r0
    8910:	f88d 1004 	strb.w	r1, [sp, #4]
    8914:	0a00      	lsrs	r0, r0, #8
    8916:	f88d 0005 	strb.w	r0, [sp, #5]
    891a:	a901      	add	r1, sp, #4
    891c:	9800      	ldr	r0, [sp, #0]
    891e:	f005 f842 	bl	d9a6 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    8922:	e007      	b.n	8934 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x934>
    8924:	68a0      	ldr	r0, [r4, #8]
    8926:	f890 218f 	ldrb.w	r2, [r0, #399]	; 0x18f
    892a:	f8d0 1190 	ldr.w	r1, [r0, #400]	; 0x190
    892e:	9800      	ldr	r0, [sp, #0]
    8930:	f005 f823 	bl	d97a <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>
    8934:	f7fc f918 	bl	4b68 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    8938:	2800      	cmp	r0, #0
    893a:	d104      	bne.n	8946 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x946>
    893c:	f640 2101 	movw	r1, #2561	; 0xa01
    8940:	2031      	movs	r0, #49	; 0x31
    8942:	f7fb fa73 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8946:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8948:	20000134 	.word	0x20000134
    894c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8950:	4c87      	ldr	r4, [pc, #540]	; (8b70 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb70>)
    8952:	4682      	mov	sl, r0
    8954:	4689      	mov	r9, r1
    8956:	68a0      	ldr	r0, [r4, #8]
    8958:	8800      	ldrh	r0, [r0, #0]
    895a:	f7fb fe97 	bl	468c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    895e:	0006      	movs	r6, r0
    8960:	d00a      	beq.n	8978 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x978>
    8962:	8860      	ldrh	r0, [r4, #2]
    8964:	f04f 0500 	mov.w	r5, #0
    8968:	05c0      	lsls	r0, r0, #23
    896a:	68a0      	ldr	r0, [r4, #8]
    896c:	d509      	bpl.n	8982 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x982>
    896e:	f8a0 50a4 	strh.w	r5, [r0, #164]	; 0xa4
    8972:	f880 510c 	strb.w	r5, [r0, #268]	; 0x10c
    8976:	e008      	b.n	898a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x98a>
    8978:	f640 51a7 	movw	r1, #3495	; 0xda7
    897c:	2031      	movs	r0, #49	; 0x31
    897e:	f7fb fa55 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8982:	f830 1fa4 	ldrh.w	r1, [r0, #164]!
    8986:	1c49      	adds	r1, r1, #1
    8988:	8001      	strh	r1, [r0, #0]
    898a:	f001 f8f3 	bl	9b74 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b74>
    898e:	f04f 0801 	mov.w	r8, #1
    8992:	b320      	cbz	r0, 89de <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9de>
    8994:	8860      	ldrh	r0, [r4, #2]
    8996:	0500      	lsls	r0, r0, #20
    8998:	d506      	bpl.n	89a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9a8>
    899a:	68a0      	ldr	r0, [r4, #8]
    899c:	f890 1083 	ldrb.w	r1, [r0, #131]	; 0x83
    89a0:	b111      	cbz	r1, 89a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9a8>
    89a2:	f8c0 5098 	str.w	r5, [r0, #152]	; 0x98
    89a6:	e01a      	b.n	89de <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9de>
    89a8:	68a0      	ldr	r0, [r4, #8]
    89aa:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    89ae:	1c49      	adds	r1, r1, #1
    89b0:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
    89b4:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
    89b8:	428b      	cmp	r3, r1
    89ba:	d301      	bcc.n	89c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9c0>
    89bc:	1a5a      	subs	r2, r3, r1
    89be:	e000      	b.n	89c2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9c2>
    89c0:	2200      	movs	r2, #0
    89c2:	88a7      	ldrh	r7, [r4, #4]
    89c4:	1d7f      	adds	r7, r7, #5
    89c6:	42ba      	cmp	r2, r7
    89c8:	d801      	bhi.n	89ce <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9ce>
    89ca:	f880 80a2 	strb.w	r8, [r0, #162]	; 0xa2
    89ce:	4299      	cmp	r1, r3
    89d0:	d305      	bcc.n	89de <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9de>
    89d2:	f8c0 5098 	str.w	r5, [r0, #152]	; 0x98
    89d6:	f880 81fa 	strb.w	r8, [r0, #506]	; 0x1fa
    89da:	f7fd fbb3 	bl	6144 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    89de:	8860      	ldrh	r0, [r4, #2]
    89e0:	f04f 0702 	mov.w	r7, #2
    89e4:	f410 7f40 	tst.w	r0, #768	; 0x300
    89e8:	d00e      	beq.n	8a08 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa08>
    89ea:	68a0      	ldr	r0, [r4, #8]
    89ec:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    89f0:	b111      	cbz	r1, 89f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9f8>
    89f2:	2903      	cmp	r1, #3
    89f4:	d108      	bne.n	8a08 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa08>
    89f6:	e002      	b.n	89fe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9fe>
    89f8:	f880 8081 	strb.w	r8, [r0, #129]	; 0x81
    89fc:	e001      	b.n	8a02 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa02>
    89fe:	f880 7081 	strb.w	r7, [r0, #129]	; 0x81
    8a02:	2101      	movs	r1, #1
    8a04:	f7fe fd7c 	bl	7500 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    8a08:	68a0      	ldr	r0, [r4, #8]
    8a0a:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    8a0e:	2901      	cmp	r1, #1
    8a10:	d104      	bne.n	8a1c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa1c>
    8a12:	8861      	ldrh	r1, [r4, #2]
    8a14:	0549      	lsls	r1, r1, #21
    8a16:	d501      	bpl.n	8a1c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa1c>
    8a18:	f880 7081 	strb.w	r7, [r0, #129]	; 0x81
    8a1c:	f1ba 0f00 	cmp.w	sl, #0
    8a20:	d176      	bne.n	8b10 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb10>
    8a22:	78a1      	ldrb	r1, [r4, #2]
    8a24:	0649      	lsls	r1, r1, #25
    8a26:	d502      	bpl.n	8a2e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa2e>
    8a28:	f8a0 5120 	strh.w	r5, [r0, #288]	; 0x120
    8a2c:	e004      	b.n	8a38 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa38>
    8a2e:	f8b0 1120 	ldrh.w	r1, [r0, #288]	; 0x120
    8a32:	1c49      	adds	r1, r1, #1
    8a34:	f8a0 1120 	strh.w	r1, [r0, #288]	; 0x120
    8a38:	4648      	mov	r0, r9
    8a3a:	f7ff fdbb 	bl	85b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5b4>
    8a3e:	ea40 0009 	orr.w	r0, r0, r9
    8a42:	4681      	mov	r9, r0
    8a44:	f7ff fd20 	bl	8488 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x488>
    8a48:	68a7      	ldr	r7, [r4, #8]
    8a4a:	f8b7 0100 	ldrh.w	r0, [r7, #256]	; 0x100
    8a4e:	1c40      	adds	r0, r0, #1
    8a50:	f8a7 0100 	strh.w	r0, [r7, #256]	; 0x100
    8a54:	f897 0104 	ldrb.w	r0, [r7, #260]	; 0x104
    8a58:	b128      	cbz	r0, 8a66 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa66>
    8a5a:	f7fc faaf 	bl	4fbc <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
    8a5e:	b1b0      	cbz	r0, 8a8e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa8e>
    8a60:	f8a7 5100 	strh.w	r5, [r7, #256]	; 0x100
    8a64:	e013      	b.n	8a8e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa8e>
    8a66:	f7fc f927 	bl	4cb8 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    8a6a:	b108      	cbz	r0, 8a70 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa70>
    8a6c:	f8a7 5100 	strh.w	r5, [r7, #256]	; 0x100
    8a70:	f7fc f91c 	bl	4cac <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    8a74:	b158      	cbz	r0, 8a8e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa8e>
    8a76:	f897 010c 	ldrb.w	r0, [r7, #268]	; 0x10c
    8a7a:	1c40      	adds	r0, r0, #1
    8a7c:	b2c0      	uxtb	r0, r0
    8a7e:	f887 010c 	strb.w	r0, [r7, #268]	; 0x10c
    8a82:	2802      	cmp	r0, #2
    8a84:	d903      	bls.n	8a8e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa8e>
    8a86:	f8a7 5100 	strh.w	r5, [r7, #256]	; 0x100
    8a8a:	f887 510c 	strb.w	r5, [r7, #268]	; 0x10c
    8a8e:	68a0      	ldr	r0, [r4, #8]
    8a90:	2301      	movs	r3, #1
    8a92:	2100      	movs	r1, #0
    8a94:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8a98:	3070      	adds	r0, #112	; 0x70
    8a9a:	f004 fcc0 	bl	d41e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8a9e:	b920      	cbnz	r0, 8aaa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xaaa>
    8aa0:	68a0      	ldr	r0, [r4, #8]
    8aa2:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    8aa6:	280c      	cmp	r0, #12
    8aa8:	d15e      	bne.n	8b68 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb68>
    8aaa:	68a0      	ldr	r0, [r4, #8]
    8aac:	2301      	movs	r3, #1
    8aae:	2100      	movs	r1, #0
    8ab0:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    8ab4:	3070      	adds	r0, #112	; 0x70
    8ab6:	f004 fcb2 	bl	d41e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8aba:	b350      	cbz	r0, 8b12 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb12>
    8abc:	68a0      	ldr	r0, [r4, #8]
    8abe:	2301      	movs	r3, #1
    8ac0:	2100      	movs	r1, #0
    8ac2:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    8ac6:	3070      	adds	r0, #112	; 0x70
    8ac8:	f004 fca9 	bl	d41e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8acc:	b308      	cbz	r0, 8b12 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb12>
    8ace:	68a0      	ldr	r0, [r4, #8]
    8ad0:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    8ad4:	2902      	cmp	r1, #2
    8ad6:	d147      	bne.n	8b68 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb68>
    8ad8:	f890 010c 	ldrb.w	r0, [r0, #268]	; 0x10c
    8adc:	b9c8      	cbnz	r0, 8b12 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb12>
    8ade:	4630      	mov	r0, r6
    8ae0:	f003 ff79 	bl	c9d6 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    8ae4:	b1a8      	cbz	r0, 8b12 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb12>
    8ae6:	68a0      	ldr	r0, [r4, #8]
    8ae8:	3070      	adds	r0, #112	; 0x70
    8aea:	f006 f840 	bl	eb6e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8aee:	b980      	cbnz	r0, 8b12 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb12>
    8af0:	68a1      	ldr	r1, [r4, #8]
    8af2:	f8b1 00fa 	ldrh.w	r0, [r1, #250]	; 0xfa
    8af6:	2801      	cmp	r0, #1
    8af8:	d936      	bls.n	8b68 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb68>
    8afa:	f881 8102 	strb.w	r8, [r1, #258]	; 0x102
    8afe:	f8b1 20a6 	ldrh.w	r2, [r1, #166]	; 0xa6
    8b02:	f8b1 00a4 	ldrh.w	r0, [r1, #164]	; 0xa4
    8b06:	1e93      	subs	r3, r2, #2
    8b08:	4298      	cmp	r0, r3
    8b0a:	db03      	blt.n	8b14 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb14>
    8b0c:	2001      	movs	r0, #1
    8b0e:	e004      	b.n	8b1a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb1a>
    8b10:	e01c      	b.n	8b4c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb4c>
    8b12:	e029      	b.n	8b68 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb68>
    8b14:	1a10      	subs	r0, r2, r0
    8b16:	1e40      	subs	r0, r0, #1
    8b18:	b280      	uxth	r0, r0
    8b1a:	f8b1 2100 	ldrh.w	r2, [r1, #256]	; 0x100
    8b1e:	88a3      	ldrh	r3, [r4, #4]
    8b20:	429a      	cmp	r2, r3
    8b22:	d301      	bcc.n	8b28 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb28>
    8b24:	2201      	movs	r2, #1
    8b26:	e002      	b.n	8b2e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb2e>
    8b28:	1a9a      	subs	r2, r3, r2
    8b2a:	1c52      	adds	r2, r2, #1
    8b2c:	b292      	uxth	r2, r2
    8b2e:	4290      	cmp	r0, r2
    8b30:	d900      	bls.n	8b34 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb34>
    8b32:	4610      	mov	r0, r2
    8b34:	2801      	cmp	r0, #1
    8b36:	d101      	bne.n	8b3c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb3c>
    8b38:	f881 5102 	strb.w	r5, [r1, #258]	; 0x102
    8b3c:	68a1      	ldr	r1, [r4, #8]
    8b3e:	f8b1 2074 	ldrh.w	r2, [r1, #116]	; 0x74
    8b42:	4410      	add	r0, r2
    8b44:	f8a1 00fc 	strh.w	r0, [r1, #252]	; 0xfc
    8b48:	f001 f8de 	bl	9d08 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d08>
    8b4c:	78a0      	ldrb	r0, [r4, #2]
    8b4e:	464a      	mov	r2, r9
    8b50:	f3c0 1180 	ubfx	r1, r0, #6, #1
    8b54:	4650      	mov	r0, sl
    8b56:	f001 f821 	bl	9b9c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b9c>
    8b5a:	68a0      	ldr	r0, [r4, #8]
    8b5c:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    8b60:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8b64:	f7fb bfea 	b.w	4b3c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    8b68:	2001      	movs	r0, #1
    8b6a:	68a1      	ldr	r1, [r4, #8]
    8b6c:	e7e4      	b.n	8b38 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb38>
    8b6e:	0000      	.short	0x0000
    8b70:	20000134 	.word	0x20000134
    8b74:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    8b76:	4c58      	ldr	r4, [pc, #352]	; (8cd8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcd8>)
    8b78:	2301      	movs	r3, #1
    8b7a:	2100      	movs	r1, #0
    8b7c:	68a0      	ldr	r0, [r4, #8]
    8b7e:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    8b82:	3070      	adds	r0, #112	; 0x70
    8b84:	f004 fc4b 	bl	d41e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8b88:	2800      	cmp	r0, #0
    8b8a:	d07d      	beq.n	8c88 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc88>
    8b8c:	68a0      	ldr	r0, [r4, #8]
    8b8e:	f890 11b5 	ldrb.w	r1, [r0, #437]	; 0x1b5
    8b92:	2500      	movs	r5, #0
    8b94:	b139      	cbz	r1, 8ba6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xba6>
    8b96:	2100      	movs	r1, #0
    8b98:	200e      	movs	r0, #14
    8b9a:	f000 f89f 	bl	8cdc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcdc>
    8b9e:	68a0      	ldr	r0, [r4, #8]
    8ba0:	f880 51b5 	strb.w	r5, [r0, #437]	; 0x1b5
    8ba4:	e095      	b.n	8cd2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcd2>
    8ba6:	f890 11b4 	ldrb.w	r1, [r0, #436]	; 0x1b4
    8baa:	b119      	cbz	r1, 8bb4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbb4>
    8bac:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    8bb0:	0789      	lsls	r1, r1, #30
    8bb2:	d016      	beq.n	8be2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbe2>
    8bb4:	f890 11a4 	ldrb.w	r1, [r0, #420]	; 0x1a4
    8bb8:	f88d 1004 	strb.w	r1, [sp, #4]
    8bbc:	9901      	ldr	r1, [sp, #4]
    8bbe:	9101      	str	r1, [sp, #4]
    8bc0:	f89d 1004 	ldrb.w	r1, [sp, #4]
    8bc4:	b141      	cbz	r1, 8bd8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbd8>
    8bc6:	f890 11a5 	ldrb.w	r1, [r0, #421]	; 0x1a5
    8bca:	f88d 1000 	strb.w	r1, [sp]
    8bce:	9900      	ldr	r1, [sp, #0]
    8bd0:	9100      	str	r1, [sp, #0]
    8bd2:	f89d 1000 	ldrb.w	r1, [sp]
    8bd6:	b189      	cbz	r1, 8bfc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbfc>
    8bd8:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
    8bdc:	2901      	cmp	r1, #1
    8bde:	d02f      	beq.n	8c40 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc40>
    8be0:	e071      	b.n	8cc6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcc6>
    8be2:	2100      	movs	r1, #0
    8be4:	200c      	movs	r0, #12
    8be6:	f000 f879 	bl	8cdc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcdc>
    8bea:	68a0      	ldr	r0, [r4, #8]
    8bec:	f810 1fb6 	ldrb.w	r1, [r0, #182]!
    8bf0:	f041 0101 	orr.w	r1, r1, #1
    8bf4:	7001      	strb	r1, [r0, #0]
    8bf6:	f880 50fe 	strb.w	r5, [r0, #254]	; 0xfe
    8bfa:	e06a      	b.n	8cd2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcd2>
    8bfc:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8c00:	2924      	cmp	r1, #36	; 0x24
    8c02:	d01b      	beq.n	8c3c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc3c>
    8c04:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    8c08:	2924      	cmp	r1, #36	; 0x24
    8c0a:	d017      	beq.n	8c3c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc3c>
    8c0c:	f05f 0300 	movs.w	r3, #0
    8c10:	f500 72cb 	add.w	r2, r0, #406	; 0x196
    8c14:	f500 71d2 	add.w	r1, r0, #420	; 0x1a4
    8c18:	f005 f82d 	bl	dc76 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    8c1c:	68a0      	ldr	r0, [r4, #8]
    8c1e:	f880 51a4 	strb.w	r5, [r0, #420]	; 0x1a4
    8c22:	2100      	movs	r1, #0
    8c24:	2014      	movs	r0, #20
    8c26:	f000 f859 	bl	8cdc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcdc>
    8c2a:	68a1      	ldr	r1, [r4, #8]
    8c2c:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    8c30:	8bc2      	ldrh	r2, [r0, #30]
    8c32:	f821 2fee 	strh.w	r2, [r1, #238]!
    8c36:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    8c38:	8048      	strh	r0, [r1, #2]
    8c3a:	e04a      	b.n	8cd2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcd2>
    8c3c:	2301      	movs	r3, #1
    8c3e:	e7e7      	b.n	8c10 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc10>
    8c40:	f890 11af 	ldrb.w	r1, [r0, #431]	; 0x1af
    8c44:	f88d 1000 	strb.w	r1, [sp]
    8c48:	9900      	ldr	r1, [sp, #0]
    8c4a:	9100      	str	r1, [sp, #0]
    8c4c:	f89d 1000 	ldrb.w	r1, [sp]
    8c50:	bb31      	cbnz	r1, 8ca0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xca0>
    8c52:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8c56:	2301      	movs	r3, #1
    8c58:	210b      	movs	r1, #11
    8c5a:	3070      	adds	r0, #112	; 0x70
    8c5c:	f004 fbdf 	bl	d41e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8c60:	b9f0      	cbnz	r0, 8ca0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xca0>
    8c62:	68a0      	ldr	r0, [r4, #8]
    8c64:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    8c68:	f005 ff89 	bl	eb7e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8c6c:	4605      	mov	r5, r0
    8c6e:	68a0      	ldr	r0, [r4, #8]
    8c70:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    8c74:	f005 ff83 	bl	eb7e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8c78:	4606      	mov	r6, r0
    8c7a:	68a0      	ldr	r0, [r4, #8]
    8c7c:	f890 11b0 	ldrb.w	r1, [r0, #432]	; 0x1b0
    8c80:	4628      	mov	r0, r5
    8c82:	f005 ff87 	bl	eb94 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    8c86:	e000      	b.n	8c8a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc8a>
    8c88:	e01e      	b.n	8cc8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcc8>
    8c8a:	b150      	cbz	r0, 8ca2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xca2>
    8c8c:	68a0      	ldr	r0, [r4, #8]
    8c8e:	f890 11b1 	ldrb.w	r1, [r0, #433]	; 0x1b1
    8c92:	4630      	mov	r0, r6
    8c94:	f005 ff7e 	bl	eb94 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    8c98:	b118      	cbz	r0, 8ca2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xca2>
    8c9a:	2000      	movs	r0, #0
    8c9c:	f000 f91c 	bl	8ed8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xed8>
    8ca0:	e011      	b.n	8cc6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcc6>
    8ca2:	68a0      	ldr	r0, [r4, #8]
    8ca4:	2301      	movs	r3, #1
    8ca6:	2103      	movs	r1, #3
    8ca8:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8cac:	3070      	adds	r0, #112	; 0x70
    8cae:	f004 fbb6 	bl	d41e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8cb2:	b940      	cbnz	r0, 8cc6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcc6>
    8cb4:	68a0      	ldr	r0, [r4, #8]
    8cb6:	2301      	movs	r3, #1
    8cb8:	2102      	movs	r1, #2
    8cba:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8cbe:	3070      	adds	r0, #112	; 0x70
    8cc0:	f004 fbad 	bl	d41e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8cc4:	b108      	cbz	r0, 8cca <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcca>
    8cc6:	2000      	movs	r0, #0
    8cc8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    8cca:	2100      	movs	r1, #0
    8ccc:	2016      	movs	r0, #22
    8cce:	f000 f805 	bl	8cdc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcdc>
    8cd2:	2001      	movs	r0, #1
    8cd4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    8cd6:	0000      	.short	0x0000
    8cd8:	20000134 	.word	0x20000134
    8cdc:	b570      	push	{r4, r5, r6, lr}
    8cde:	4c0d      	ldr	r4, [pc, #52]	; (8d14 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd14>)
    8ce0:	4606      	mov	r6, r0
    8ce2:	460d      	mov	r5, r1
    8ce4:	68a0      	ldr	r0, [r4, #8]
    8ce6:	3070      	adds	r0, #112	; 0x70
    8ce8:	f005 ff41 	bl	eb6e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8cec:	b120      	cbz	r0, 8cf8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcf8>
    8cee:	f640 2114 	movw	r1, #2580	; 0xa14
    8cf2:	2031      	movs	r0, #49	; 0x31
    8cf4:	f7fb f89a 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8cf8:	68a2      	ldr	r2, [r4, #8]
    8cfa:	2000      	movs	r0, #0
    8cfc:	f882 60ec 	strb.w	r6, [r2, #236]	; 0xec
    8d00:	b115      	cbz	r5, 8d08 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd08>
    8d02:	f8a2 00b0 	strh.w	r0, [r2, #176]	; 0xb0
    8d06:	bd70      	pop	{r4, r5, r6, pc}
    8d08:	f822 0faa 	strh.w	r0, [r2, #170]!
    8d0c:	2001      	movs	r0, #1
    8d0e:	7110      	strb	r0, [r2, #4]
    8d10:	bd70      	pop	{r4, r5, r6, pc}
    8d12:	0000      	.short	0x0000
    8d14:	20000134 	.word	0x20000134
    8d18:	b570      	push	{r4, r5, r6, lr}
    8d1a:	4d1a      	ldr	r5, [pc, #104]	; (8d84 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd84>)
    8d1c:	2600      	movs	r6, #0
    8d1e:	68ac      	ldr	r4, [r5, #8]
    8d20:	f894 017b 	ldrb.w	r0, [r4, #379]	; 0x17b
    8d24:	2801      	cmp	r0, #1
    8d26:	d00a      	beq.n	8d3e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd3e>
    8d28:	2802      	cmp	r0, #2
    8d2a:	d129      	bne.n	8d80 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd80>
    8d2c:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    8d30:	2106      	movs	r1, #6
    8d32:	b1a0      	cbz	r0, 8d5e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd5e>
    8d34:	f884 10ee 	strb.w	r1, [r4, #238]	; 0xee
    8d38:	2101      	movs	r1, #1
    8d3a:	2002      	movs	r0, #2
    8d3c:	e01b      	b.n	8d76 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd76>
    8d3e:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    8d42:	2800      	cmp	r0, #0
    8d44:	d11c      	bne.n	8d80 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd80>
    8d46:	2200      	movs	r2, #0
    8d48:	f504 70be 	add.w	r0, r4, #380	; 0x17c
    8d4c:	f504 7188 	add.w	r1, r4, #272	; 0x110
    8d50:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    8d54:	f004 fb1b 	bl	d38e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    8d58:	2101      	movs	r1, #1
    8d5a:	2005      	movs	r0, #5
    8d5c:	e00b      	b.n	8d76 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd76>
    8d5e:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    8d62:	0740      	lsls	r0, r0, #29
    8d64:	d505      	bpl.n	8d72 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd72>
    8d66:	2011      	movs	r0, #17
    8d68:	2203      	movs	r2, #3
    8d6a:	f804 2fee 	strb.w	r2, [r4, #238]!
    8d6e:	7061      	strb	r1, [r4, #1]
    8d70:	e000      	b.n	8d74 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd74>
    8d72:	200d      	movs	r0, #13
    8d74:	2101      	movs	r1, #1
    8d76:	f7ff ffb1 	bl	8cdc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcdc>
    8d7a:	68a8      	ldr	r0, [r5, #8]
    8d7c:	f880 617b 	strb.w	r6, [r0, #379]	; 0x17b
    8d80:	bd70      	pop	{r4, r5, r6, pc}
    8d82:	0000      	.short	0x0000
    8d84:	20000134 	.word	0x20000134
    8d88:	b570      	push	{r4, r5, r6, lr}
    8d8a:	4a2b      	ldr	r2, [pc, #172]	; (8e38 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe38>)
    8d8c:	4603      	mov	r3, r0
    8d8e:	8850      	ldrh	r0, [r2, #2]
    8d90:	4318      	orrs	r0, r3
    8d92:	8050      	strh	r0, [r2, #2]
    8d94:	4610      	mov	r0, r2
    8d96:	2b40      	cmp	r3, #64	; 0x40
    8d98:	6880      	ldr	r0, [r0, #8]
    8d9a:	d00d      	beq.n	8db8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdb8>
    8d9c:	079e      	lsls	r6, r3, #30
    8d9e:	f04f 0500 	mov.w	r5, #0
    8da2:	f04f 0401 	mov.w	r4, #1
    8da6:	ea4f 76c3 	mov.w	r6, r3, lsl #31
    8daa:	d50c      	bpl.n	8dc6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdc6>
    8dac:	b14e      	cbz	r6, 8dc2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdc2>
    8dae:	f640 5114 	movw	r1, #3348	; 0xd14
    8db2:	2031      	movs	r0, #49	; 0x31
    8db4:	f7fb f83a 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8db8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8dbc:	2104      	movs	r1, #4
    8dbe:	f7fe bb9f 	b.w	7500 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    8dc2:	60d1      	str	r1, [r2, #12]
    8dc4:	e01c      	b.n	8e00 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe00>
    8dc6:	b1c6      	cbz	r6, 8dfa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdfa>
    8dc8:	6111      	str	r1, [r2, #16]
    8dca:	78c9      	ldrb	r1, [r1, #3]
    8dcc:	2906      	cmp	r1, #6
    8dce:	d002      	beq.n	8dd6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdd6>
    8dd0:	290b      	cmp	r1, #11
    8dd2:	d112      	bne.n	8dfa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdfa>
    8dd4:	e009      	b.n	8dea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdea>
    8dd6:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8dda:	2917      	cmp	r1, #23
    8ddc:	d10d      	bne.n	8dfa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdfa>
    8dde:	2100      	movs	r1, #0
    8de0:	e9c0 1130 	strd	r1, r1, [r0, #192]	; 0xc0
    8de4:	f880 4082 	strb.w	r4, [r0, #130]	; 0x82
    8de8:	e007      	b.n	8dfa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdfa>
    8dea:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8dee:	2911      	cmp	r1, #17
    8df0:	d103      	bne.n	8dfa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdfa>
    8df2:	f880 5082 	strb.w	r5, [r0, #130]	; 0x82
    8df6:	f880 40b4 	strb.w	r4, [r0, #180]	; 0xb4
    8dfa:	0799      	lsls	r1, r3, #30
    8dfc:	d516      	bpl.n	8e2c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe2c>
    8dfe:	68d1      	ldr	r1, [r2, #12]
    8e00:	78c9      	ldrb	r1, [r1, #3]
    8e02:	2905      	cmp	r1, #5
    8e04:	d002      	beq.n	8e0c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe0c>
    8e06:	290b      	cmp	r1, #11
    8e08:	d110      	bne.n	8e2c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe2c>
    8e0a:	e009      	b.n	8e20 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe20>
    8e0c:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8e10:	2915      	cmp	r1, #21
    8e12:	d10b      	bne.n	8e2c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe2c>
    8e14:	2100      	movs	r1, #0
    8e16:	e9e0 1132 	strd	r1, r1, [r0, #200]!	; 0xc8
    8e1a:	f800 4c45 	strb.w	r4, [r0, #-69]
    8e1e:	e005      	b.n	8e2c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe2c>
    8e20:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8e24:	2910      	cmp	r1, #16
    8e26:	d101      	bne.n	8e2c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe2c>
    8e28:	f880 5083 	strb.w	r5, [r0, #131]	; 0x83
    8e2c:	0698      	lsls	r0, r3, #26
    8e2e:	d501      	bpl.n	8e34 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe34>
    8e30:	2008      	movs	r0, #8
    8e32:	7050      	strb	r0, [r2, #1]
    8e34:	bd70      	pop	{r4, r5, r6, pc}
    8e36:	0000      	.short	0x0000
    8e38:	20000134 	.word	0x20000134
    8e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8e40:	4c24      	ldr	r4, [pc, #144]	; (8ed4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xed4>)
    8e42:	2501      	movs	r5, #1
    8e44:	68a2      	ldr	r2, [r4, #8]
    8e46:	f892 0196 	ldrb.w	r0, [r2, #406]	; 0x196
    8e4a:	b108      	cbz	r0, 8e50 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe50>
    8e4c:	2701      	movs	r7, #1
    8e4e:	e000      	b.n	8e52 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe52>
    8e50:	2700      	movs	r7, #0
    8e52:	f892 1197 	ldrb.w	r1, [r2, #407]	; 0x197
    8e56:	b109      	cbz	r1, 8e5c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe5c>
    8e58:	2601      	movs	r6, #1
    8e5a:	e000      	b.n	8e5e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe5e>
    8e5c:	2600      	movs	r6, #0
    8e5e:	b90f      	cbnz	r7, 8e64 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe64>
    8e60:	f892 006a 	ldrb.w	r0, [r2, #106]	; 0x6a
    8e64:	b90e      	cbnz	r6, 8e6a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe6a>
    8e66:	f892 106b 	ldrb.w	r1, [r2, #107]	; 0x6b
    8e6a:	f102 0362 	add.w	r3, r2, #98	; 0x62
    8e6e:	7218      	strb	r0, [r3, #8]
    8e70:	7259      	strb	r1, [r3, #9]
    8e72:	2001      	movs	r0, #1
    8e74:	7298      	strb	r0, [r3, #10]
    8e76:	f892 01ae 	ldrb.w	r0, [r2, #430]	; 0x1ae
    8e7a:	2801      	cmp	r0, #1
    8e7c:	d001      	beq.n	8e82 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe82>
    8e7e:	b907      	cbnz	r7, 8e82 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe82>
    8e80:	b116      	cbz	r6, 8e88 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe88>
    8e82:	2000      	movs	r0, #0
    8e84:	f000 f828 	bl	8ed8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xed8>
    8e88:	68a0      	ldr	r0, [r4, #8]
    8e8a:	302c      	adds	r0, #44	; 0x2c
    8e8c:	f004 ff62 	bl	dd54 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    8e90:	4606      	mov	r6, r0
    8e92:	68a0      	ldr	r0, [r4, #8]
    8e94:	f004 ff0a 	bl	dcac <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    8e98:	b1c0      	cbz	r0, 8ecc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xecc>
    8e9a:	68a0      	ldr	r0, [r4, #8]
    8e9c:	302c      	adds	r0, #44	; 0x2c
    8e9e:	f004 ff59 	bl	dd54 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    8ea2:	68a1      	ldr	r1, [r4, #8]
    8ea4:	4607      	mov	r7, r0
    8ea6:	f501 72ed 	add.w	r2, r1, #474	; 0x1da
    8eaa:	8808      	ldrh	r0, [r1, #0]
    8eac:	312c      	adds	r1, #44	; 0x2c
    8eae:	f004 febe 	bl	dc2e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    8eb2:	42be      	cmp	r6, r7
    8eb4:	d20a      	bcs.n	8ecc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xecc>
    8eb6:	f7f8 fb79 	bl	15ac <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    8eba:	4601      	mov	r1, r0
    8ebc:	1bb8      	subs	r0, r7, r6
    8ebe:	2865      	cmp	r0, #101	; 0x65
    8ec0:	d200      	bcs.n	8ec4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xec4>
    8ec2:	2065      	movs	r0, #101	; 0x65
    8ec4:	f7f8 fab0 	bl	1428 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    8ec8:	b100      	cbz	r0, 8ecc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xecc>
    8eca:	2500      	movs	r5, #0
    8ecc:	4628      	mov	r0, r5
    8ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8ed2:	0000      	.short	0x0000
    8ed4:	20000134 	.word	0x20000134
    8ed8:	b510      	push	{r4, lr}
    8eda:	4c10      	ldr	r4, [pc, #64]	; (8f1c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf1c>)
    8edc:	68a1      	ldr	r1, [r4, #8]
    8ede:	880a      	ldrh	r2, [r1, #0]
    8ee0:	f8a1 2206 	strh.w	r2, [r1, #518]	; 0x206
    8ee4:	f881 0204 	strb.w	r0, [r1, #516]	; 0x204
    8ee8:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
    8eec:	f005 fe47 	bl	eb7e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8ef0:	68a1      	ldr	r1, [r4, #8]
    8ef2:	f881 0208 	strb.w	r0, [r1, #520]	; 0x208
    8ef6:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
    8efa:	f005 fe40 	bl	eb7e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8efe:	68a2      	ldr	r2, [r4, #8]
    8f00:	f202 2102 	addw	r1, r2, #514	; 0x202
    8f04:	f882 0209 	strb.w	r0, [r2, #521]	; 0x209
    8f08:	2001      	movs	r0, #1
    8f0a:	7008      	strb	r0, [r1, #0]
    8f0c:	2000      	movs	r0, #0
    8f0e:	f882 01ae 	strb.w	r0, [r2, #430]	; 0x1ae
    8f12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8f16:	f7fd b915 	b.w	6144 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8f1a:	0000      	.short	0x0000
    8f1c:	20000134 	.word	0x20000134
    8f20:	b510      	push	{r4, lr}
    8f22:	4c15      	ldr	r4, [pc, #84]	; (8f78 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf78>)
    8f24:	2301      	movs	r3, #1
    8f26:	2100      	movs	r1, #0
    8f28:	68a0      	ldr	r0, [r4, #8]
    8f2a:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8f2e:	3070      	adds	r0, #112	; 0x70
    8f30:	f004 fa75 	bl	d41e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8f34:	b190      	cbz	r0, 8f5c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf5c>
    8f36:	6920      	ldr	r0, [r4, #16]
    8f38:	f004 fcb8 	bl	d8ac <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>
    8f3c:	68a1      	ldr	r1, [r4, #8]
    8f3e:	f8a1 0194 	strh.w	r0, [r1, #404]	; 0x194
    8f42:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
    8f46:	f005 fe33 	bl	ebb0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    8f4a:	b148      	cbz	r0, 8f60 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf60>
    8f4c:	68a0      	ldr	r0, [r4, #8]
    8f4e:	2128      	movs	r1, #40	; 0x28
    8f50:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    8f54:	3076      	adds	r0, #118	; 0x76
    8f56:	2101      	movs	r1, #1
    8f58:	7781      	strb	r1, [r0, #30]
    8f5a:	e00b      	b.n	8f74 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf74>
    8f5c:	2001      	movs	r0, #1
    8f5e:	bd10      	pop	{r4, pc}
    8f60:	68a1      	ldr	r1, [r4, #8]
    8f62:	6920      	ldr	r0, [r4, #16]
    8f64:	f501 71cb 	add.w	r1, r1, #406	; 0x196
    8f68:	f004 fc9b 	bl	d8a2 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>
    8f6c:	68a1      	ldr	r1, [r4, #8]
    8f6e:	200b      	movs	r0, #11
    8f70:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    8f74:	2000      	movs	r0, #0
    8f76:	bd10      	pop	{r4, pc}
    8f78:	20000134 	.word	0x20000134
    8f7c:	b570      	push	{r4, r5, r6, lr}
    8f7e:	4c29      	ldr	r4, [pc, #164]	; (9024 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1024>)
    8f80:	2301      	movs	r3, #1
    8f82:	2100      	movs	r1, #0
    8f84:	68a0      	ldr	r0, [r4, #8]
    8f86:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8f8a:	3070      	adds	r0, #112	; 0x70
    8f8c:	f004 fa47 	bl	d41e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8f90:	b1b8      	cbz	r0, 8fc2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xfc2>
    8f92:	2100      	movs	r1, #0
    8f94:	6920      	ldr	r0, [r4, #16]
    8f96:	f004 fc5c 	bl	d852 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>
    8f9a:	b1a0      	cbz	r0, 8fc6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xfc6>
    8f9c:	6920      	ldr	r0, [r4, #16]
    8f9e:	68a1      	ldr	r1, [r4, #8]
    8fa0:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    8fa4:	f8a1 0194 	strh.w	r0, [r1, #404]	; 0x194
    8fa8:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
    8fac:	f005 fe00 	bl	ebb0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    8fb0:	b168      	cbz	r0, 8fce <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xfce>
    8fb2:	68a0      	ldr	r0, [r4, #8]
    8fb4:	2128      	movs	r1, #40	; 0x28
    8fb6:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    8fba:	3076      	adds	r0, #118	; 0x76
    8fbc:	2101      	movs	r1, #1
    8fbe:	7781      	strb	r1, [r0, #30]
    8fc0:	e02e      	b.n	9020 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1020>
    8fc2:	2001      	movs	r0, #1
    8fc4:	bd70      	pop	{r4, r5, r6, pc}
    8fc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8fca:	f000 b8ad 	b.w	9128 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1128>
    8fce:	6920      	ldr	r0, [r4, #16]
    8fd0:	f004 fc6f 	bl	d8b2 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>
    8fd4:	f004 fa06 	bl	d3e4 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    8fd8:	4605      	mov	r5, r0
    8fda:	68a0      	ldr	r0, [r4, #8]
    8fdc:	4629      	mov	r1, r5
    8fde:	f8c0 519c 	str.w	r5, [r0, #412]	; 0x19c
    8fe2:	6920      	ldr	r0, [r4, #16]
    8fe4:	7900      	ldrb	r0, [r0, #4]
    8fe6:	f004 fb88 	bl	d6fa <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    8fea:	68a1      	ldr	r1, [r4, #8]
    8fec:	f8a1 0196 	strh.w	r0, [r1, #406]	; 0x196
    8ff0:	6920      	ldr	r0, [r4, #16]
    8ff2:	4629      	mov	r1, r5
    8ff4:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    8ff8:	f004 fb7b 	bl	d6f2 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    8ffc:	68a1      	ldr	r1, [r4, #8]
    8ffe:	f8c1 0198 	str.w	r0, [r1, #408]	; 0x198
    9002:	6920      	ldr	r0, [r4, #16]
    9004:	f004 fc58 	bl	d8b8 <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>
    9008:	68a1      	ldr	r1, [r4, #8]
    900a:	f8a1 01a0 	strh.w	r0, [r1, #416]	; 0x1a0
    900e:	6920      	ldr	r0, [r4, #16]
    9010:	f004 fc55 	bl	d8be <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>
    9014:	68a1      	ldr	r1, [r4, #8]
    9016:	f8a1 01a2 	strh.w	r0, [r1, #418]	; 0x1a2
    901a:	200d      	movs	r0, #13
    901c:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    9020:	2000      	movs	r0, #0
    9022:	bd70      	pop	{r4, r5, r6, pc}
    9024:	20000134 	.word	0x20000134
    9028:	b538      	push	{r3, r4, r5, lr}
    902a:	4c29      	ldr	r4, [pc, #164]	; (90d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10d0>)
    902c:	2301      	movs	r3, #1
    902e:	2100      	movs	r1, #0
    9030:	68a0      	ldr	r0, [r4, #8]
    9032:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9036:	3070      	adds	r0, #112	; 0x70
    9038:	f004 f9f1 	bl	d41e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    903c:	b970      	cbnz	r0, 905c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x105c>
    903e:	68a0      	ldr	r0, [r4, #8]
    9040:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9044:	2a12      	cmp	r2, #18
    9046:	d009      	beq.n	905c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x105c>
    9048:	2301      	movs	r3, #1
    904a:	2105      	movs	r1, #5
    904c:	3070      	adds	r0, #112	; 0x70
    904e:	f004 f9e6 	bl	d41e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9052:	b108      	cbz	r0, 9058 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1058>
    9054:	2008      	movs	r0, #8
    9056:	bd38      	pop	{r3, r4, r5, pc}
    9058:	2001      	movs	r0, #1
    905a:	bd38      	pop	{r3, r4, r5, pc}
    905c:	68a0      	ldr	r0, [r4, #8]
    905e:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    9062:	b908      	cbnz	r0, 9068 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1068>
    9064:	f7ff f8ca 	bl	81fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1fc>
    9068:	68a1      	ldr	r1, [r4, #8]
    906a:	6920      	ldr	r0, [r4, #16]
    906c:	f501 7188 	add.w	r1, r1, #272	; 0x110
    9070:	f004 fc34 	bl	d8dc <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>
    9074:	68a1      	ldr	r1, [r4, #8]
    9076:	6920      	ldr	r0, [r4, #16]
    9078:	31e0      	adds	r1, #224	; 0xe0
    907a:	f004 fc26 	bl	d8ca <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>
    907e:	68a1      	ldr	r1, [r4, #8]
    9080:	f891 01cc 	ldrb.w	r0, [r1, #460]	; 0x1cc
    9084:	f88d 0000 	strb.w	r0, [sp]
    9088:	9800      	ldr	r0, [sp, #0]
    908a:	9000      	str	r0, [sp, #0]
    908c:	f89d 0000 	ldrb.w	r0, [sp]
    9090:	b120      	cbz	r0, 909c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x109c>
    9092:	f44f 7128 	mov.w	r1, #672	; 0x2a0
    9096:	2031      	movs	r0, #49	; 0x31
    9098:	f7fa fec8 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    909c:	8808      	ldrh	r0, [r1, #0]
    909e:	f8a1 01ce 	strh.w	r0, [r1, #462]	; 0x1ce
    90a2:	f501 71e8 	add.w	r1, r1, #464	; 0x1d0
    90a6:	6920      	ldr	r0, [r4, #16]
    90a8:	f004 fc13 	bl	d8d2 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>
    90ac:	68a1      	ldr	r1, [r4, #8]
    90ae:	6920      	ldr	r0, [r4, #16]
    90b0:	f501 71ec 	add.w	r1, r1, #472	; 0x1d8
    90b4:	f004 fc06 	bl	d8c4 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>
    90b8:	68a0      	ldr	r0, [r4, #8]
    90ba:	4601      	mov	r1, r0
    90bc:	2201      	movs	r2, #1
    90be:	f880 21cc 	strb.w	r2, [r0, #460]	; 0x1cc
    90c2:	2014      	movs	r0, #20
    90c4:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    90c8:	f7fd f83c 	bl	6144 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    90cc:	2000      	movs	r0, #0
    90ce:	bd38      	pop	{r3, r4, r5, pc}
    90d0:	20000134 	.word	0x20000134
    90d4:	b51c      	push	{r2, r3, r4, lr}
    90d6:	4c13      	ldr	r4, [pc, #76]	; (9124 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1124>)
    90d8:	68a0      	ldr	r0, [r4, #8]
    90da:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    90de:	07c0      	lsls	r0, r0, #31
    90e0:	d001      	beq.n	90e6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10e6>
    90e2:	2001      	movs	r0, #1
    90e4:	bd1c      	pop	{r2, r3, r4, pc}
    90e6:	4669      	mov	r1, sp
    90e8:	6920      	ldr	r0, [r4, #16]
    90ea:	f004 fbfd 	bl	d8e8 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>
    90ee:	f001 f9d5 	bl	a49c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    90f2:	f644 112f 	movw	r1, #18735	; 0x492f
    90f6:	4008      	ands	r0, r1
    90f8:	f89d 2000 	ldrb.w	r2, [sp]
    90fc:	68a1      	ldr	r1, [r4, #8]
    90fe:	4002      	ands	r2, r0
    9100:	f801 2fbc 	strb.w	r2, [r1, #188]!
    9104:	f89d 2001 	ldrb.w	r2, [sp, #1]
    9108:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    910c:	7048      	strb	r0, [r1, #1]
    910e:	f7ff f875 	bl	81fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1fc>
    9112:	68a0      	ldr	r0, [r4, #8]
    9114:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    9118:	f041 0101 	orr.w	r1, r1, #1
    911c:	7001      	strb	r1, [r0, #0]
    911e:	2000      	movs	r0, #0
    9120:	bd1c      	pop	{r2, r3, r4, pc}
    9122:	0000      	.short	0x0000
    9124:	20000134 	.word	0x20000134
    9128:	4a0a      	ldr	r2, [pc, #40]	; (9154 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1154>)
    912a:	b510      	push	{r4, lr}
    912c:	6890      	ldr	r0, [r2, #8]
    912e:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    9132:	070b      	lsls	r3, r1, #28
    9134:	d501      	bpl.n	913a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x113a>
    9136:	2001      	movs	r0, #1
    9138:	bd10      	pop	{r4, pc}
    913a:	f041 0108 	orr.w	r1, r1, #8
    913e:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    9142:	6911      	ldr	r1, [r2, #16]
    9144:	78c9      	ldrb	r1, [r1, #3]
    9146:	f880 10e9 	strb.w	r1, [r0, #233]	; 0xe9
    914a:	f7ff f857 	bl	81fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1fc>
    914e:	2000      	movs	r0, #0
    9150:	bd10      	pop	{r4, pc}
    9152:	0000      	.short	0x0000
    9154:	20000134 	.word	0x20000134
    9158:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    915c:	4c34      	ldr	r4, [pc, #208]	; (9230 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1230>)
    915e:	68a0      	ldr	r0, [r4, #8]
    9160:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    9164:	f010 0f30 	tst.w	r0, #48	; 0x30
    9168:	d002      	beq.n	9170 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1170>
    916a:	2001      	movs	r0, #1
    916c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    9170:	6920      	ldr	r0, [r4, #16]
    9172:	f004 fbd4 	bl	d91e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    9176:	b318      	cbz	r0, 91c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11c0>
    9178:	6920      	ldr	r0, [r4, #16]
    917a:	f004 fbc2 	bl	d902 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    917e:	4607      	mov	r7, r0
    9180:	6920      	ldr	r0, [r4, #16]
    9182:	f004 fbc2 	bl	d90a <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    9186:	4606      	mov	r6, r0
    9188:	6920      	ldr	r0, [r4, #16]
    918a:	f004 fbb8 	bl	d8fe <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    918e:	4605      	mov	r5, r0
    9190:	6920      	ldr	r0, [r4, #16]
    9192:	f004 fbb8 	bl	d906 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    9196:	4601      	mov	r1, r0
    9198:	9700      	str	r7, [sp, #0]
    919a:	68a0      	ldr	r0, [r4, #8]
    919c:	4633      	mov	r3, r6
    919e:	462a      	mov	r2, r5
    91a0:	302c      	adds	r0, #44	; 0x2c
    91a2:	f004 fe11 	bl	ddc8 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    91a6:	78a0      	ldrb	r0, [r4, #2]
    91a8:	0780      	lsls	r0, r0, #30
    91aa:	d503      	bpl.n	91b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11b4>
    91ac:	68e0      	ldr	r0, [r4, #12]
    91ae:	78c0      	ldrb	r0, [r0, #3]
    91b0:	2814      	cmp	r0, #20
    91b2:	d009      	beq.n	91c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11c8>
    91b4:	68a0      	ldr	r0, [r4, #8]
    91b6:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    91ba:	281c      	cmp	r0, #28
    91bc:	d004      	beq.n	91c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11c8>
    91be:	e007      	b.n	91d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11d0>
    91c0:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    91c4:	f7ff bfb0 	b.w	9128 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1128>
    91c8:	68a1      	ldr	r1, [r4, #8]
    91ca:	2001      	movs	r0, #1
    91cc:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    91d0:	68a1      	ldr	r1, [r4, #8]
    91d2:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    91d6:	2801      	cmp	r0, #1
    91d8:	d011      	beq.n	91fe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11fe>
    91da:	f891 01a5 	ldrb.w	r0, [r1, #421]	; 0x1a5
    91de:	f88d 0004 	strb.w	r0, [sp, #4]
    91e2:	9801      	ldr	r0, [sp, #4]
    91e4:	9001      	str	r0, [sp, #4]
    91e6:	f89d 0004 	ldrb.w	r0, [sp, #4]
    91ea:	b940      	cbnz	r0, 91fe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11fe>
    91ec:	f891 01a4 	ldrb.w	r0, [r1, #420]	; 0x1a4
    91f0:	f88d 0000 	strb.w	r0, [sp]
    91f4:	9800      	ldr	r0, [sp, #0]
    91f6:	9000      	str	r0, [sp, #0]
    91f8:	f89d 0000 	ldrb.w	r0, [sp]
    91fc:	b128      	cbz	r0, 920a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x120a>
    91fe:	f811 0f7f 	ldrb.w	r0, [r1, #127]!
    9202:	f040 0010 	orr.w	r0, r0, #16
    9206:	7008      	strb	r0, [r1, #0]
    9208:	e00d      	b.n	9226 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1226>
    920a:	f891 007f 	ldrb.w	r0, [r1, #127]	; 0x7f
    920e:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
    9212:	f040 0020 	orr.w	r0, r0, #32
    9216:	f881 007f 	strb.w	r0, [r1, #127]	; 0x7f
    921a:	f831 0b2c 	ldrh.w	r0, [r1], #44
    921e:	f004 fdda 	bl	ddd6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    9222:	f7fc ff8f 	bl	6144 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9226:	f7fe ffe9 	bl	81fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1fc>
    922a:	2000      	movs	r0, #0
    922c:	e79e      	b.n	916c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x116c>
    922e:	0000      	.short	0x0000
    9230:	20000134 	.word	0x20000134
    9234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9236:	4c1a      	ldr	r4, [pc, #104]	; (92a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12a0>)
    9238:	2301      	movs	r3, #1
    923a:	210a      	movs	r1, #10
    923c:	68a0      	ldr	r0, [r4, #8]
    923e:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9242:	3070      	adds	r0, #112	; 0x70
    9244:	f004 f8eb 	bl	d41e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9248:	b338      	cbz	r0, 929a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x129a>
    924a:	6920      	ldr	r0, [r4, #16]
    924c:	f004 fb67 	bl	d91e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    9250:	b1c8      	cbz	r0, 9286 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1286>
    9252:	6920      	ldr	r0, [r4, #16]
    9254:	f004 fb55 	bl	d902 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    9258:	4607      	mov	r7, r0
    925a:	6920      	ldr	r0, [r4, #16]
    925c:	f004 fb55 	bl	d90a <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    9260:	4606      	mov	r6, r0
    9262:	6920      	ldr	r0, [r4, #16]
    9264:	f004 fb4b 	bl	d8fe <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    9268:	4605      	mov	r5, r0
    926a:	6920      	ldr	r0, [r4, #16]
    926c:	f004 fb4b 	bl	d906 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    9270:	4601      	mov	r1, r0
    9272:	9700      	str	r7, [sp, #0]
    9274:	68a0      	ldr	r0, [r4, #8]
    9276:	4633      	mov	r3, r6
    9278:	462a      	mov	r2, r5
    927a:	302c      	adds	r0, #44	; 0x2c
    927c:	f004 fda4 	bl	ddc8 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    9280:	68a0      	ldr	r0, [r4, #8]
    9282:	f004 fd13 	bl	dcac <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9286:	68a1      	ldr	r1, [r4, #8]
    9288:	2000      	movs	r0, #0
    928a:	f881 00ae 	strb.w	r0, [r1, #174]	; 0xae
    928e:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    9292:	f7ff f977 	bl	8584 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x584>
    9296:	2000      	movs	r0, #0
    9298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    929a:	2001      	movs	r0, #1
    929c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    929e:	0000      	.short	0x0000
    92a0:	20000134 	.word	0x20000134
    92a4:	b510      	push	{r4, lr}
    92a6:	4c09      	ldr	r4, [pc, #36]	; (92cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12cc>)
    92a8:	68a0      	ldr	r0, [r4, #8]
    92aa:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    92ae:	0740      	lsls	r0, r0, #29
    92b0:	d501      	bpl.n	92b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12b6>
    92b2:	2001      	movs	r0, #1
    92b4:	bd10      	pop	{r4, pc}
    92b6:	f7fe ffa1 	bl	81fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1fc>
    92ba:	68a0      	ldr	r0, [r4, #8]
    92bc:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    92c0:	f041 0104 	orr.w	r1, r1, #4
    92c4:	7001      	strb	r1, [r0, #0]
    92c6:	2000      	movs	r0, #0
    92c8:	bd10      	pop	{r4, pc}
    92ca:	0000      	.short	0x0000
    92cc:	20000134 	.word	0x20000134
    92d0:	b510      	push	{r4, lr}
    92d2:	4c09      	ldr	r4, [pc, #36]	; (92f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12f8>)
    92d4:	2301      	movs	r3, #1
    92d6:	2109      	movs	r1, #9
    92d8:	68a0      	ldr	r0, [r4, #8]
    92da:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    92de:	3070      	adds	r0, #112	; 0x70
    92e0:	f004 f89d 	bl	d41e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    92e4:	2800      	cmp	r0, #0
    92e6:	d006      	beq.n	92f6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12f6>
    92e8:	68a1      	ldr	r1, [r4, #8]
    92ea:	2000      	movs	r0, #0
    92ec:	f801 0fa2 	strb.w	r0, [r1, #162]!
    92f0:	7308      	strb	r0, [r1, #12]
    92f2:	f801 0c25 	strb.w	r0, [r1, #-37]
    92f6:	bd10      	pop	{r4, pc}
    92f8:	20000134 	.word	0x20000134
    92fc:	b510      	push	{r4, lr}
    92fe:	4c0f      	ldr	r4, [pc, #60]	; (933c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x133c>)
    9300:	2301      	movs	r3, #1
    9302:	2100      	movs	r1, #0
    9304:	68a0      	ldr	r0, [r4, #8]
    9306:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    930a:	3070      	adds	r0, #112	; 0x70
    930c:	f004 f887 	bl	d41e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9310:	b138      	cbz	r0, 9322 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1322>
    9312:	f7fe ff73 	bl	81fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1fc>
    9316:	68a1      	ldr	r1, [r4, #8]
    9318:	2010      	movs	r0, #16
    931a:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    931e:	2000      	movs	r0, #0
    9320:	bd10      	pop	{r4, pc}
    9322:	68a0      	ldr	r0, [r4, #8]
    9324:	2301      	movs	r3, #1
    9326:	2105      	movs	r1, #5
    9328:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    932c:	3070      	adds	r0, #112	; 0x70
    932e:	f004 f876 	bl	d41e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9332:	b108      	cbz	r0, 9338 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1338>
    9334:	2008      	movs	r0, #8
    9336:	bd10      	pop	{r4, pc}
    9338:	2001      	movs	r0, #1
    933a:	bd10      	pop	{r4, pc}
    933c:	20000134 	.word	0x20000134
    9340:	4806      	ldr	r0, [pc, #24]	; (935c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x135c>)
    9342:	6880      	ldr	r0, [r0, #8]
    9344:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9348:	2911      	cmp	r1, #17
    934a:	d001      	beq.n	9350 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1350>
    934c:	2002      	movs	r0, #2
    934e:	4770      	bx	lr
    9350:	2112      	movs	r1, #18
    9352:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    9356:	2000      	movs	r0, #0
    9358:	4770      	bx	lr
    935a:	0000      	.short	0x0000
    935c:	20000134 	.word	0x20000134
    9360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9362:	4c34      	ldr	r4, [pc, #208]	; (9434 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1434>)
    9364:	2301      	movs	r3, #1
    9366:	210b      	movs	r1, #11
    9368:	68a0      	ldr	r0, [r4, #8]
    936a:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    936e:	3070      	adds	r0, #112	; 0x70
    9370:	f004 f855 	bl	d41e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9374:	bb78      	cbnz	r0, 93d6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13d6>
    9376:	68a0      	ldr	r0, [r4, #8]
    9378:	2301      	movs	r3, #1
    937a:	2100      	movs	r1, #0
    937c:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9380:	3070      	adds	r0, #112	; 0x70
    9382:	f004 f84c 	bl	d41e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9386:	b320      	cbz	r0, 93d2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13d2>
    9388:	68a0      	ldr	r0, [r4, #8]
    938a:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    938e:	2824      	cmp	r0, #36	; 0x24
    9390:	d022      	beq.n	93d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13d8>
    9392:	6920      	ldr	r0, [r4, #16]
    9394:	f004 fadf 	bl	d956 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    9398:	b300      	cbz	r0, 93dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13dc>
    939a:	68a0      	ldr	r0, [r4, #8]
    939c:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
    93a0:	f041 0104 	orr.w	r1, r1, #4
    93a4:	f880 10bc 	strb.w	r1, [r0, #188]	; 0xbc
    93a8:	6921      	ldr	r1, [r4, #16]
    93aa:	794a      	ldrb	r2, [r1, #5]
    93ac:	f002 0207 	and.w	r2, r2, #7
    93b0:	f880 2063 	strb.w	r2, [r0, #99]	; 0x63
    93b4:	7909      	ldrb	r1, [r1, #4]
    93b6:	f001 0107 	and.w	r1, r1, #7
    93ba:	f880 1062 	strb.w	r1, [r0, #98]	; 0x62
    93be:	f890 31af 	ldrb.w	r3, [r0, #431]	; 0x1af
    93c2:	f88d 3000 	strb.w	r3, [sp]
    93c6:	9b00      	ldr	r3, [sp, #0]
    93c8:	9300      	str	r3, [sp, #0]
    93ca:	f89d 3000 	ldrb.w	r3, [sp]
    93ce:	bb43      	cbnz	r3, 9422 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1422>
    93d0:	e008      	b.n	93e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13e4>
    93d2:	2001      	movs	r0, #1
    93d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    93d6:	e7ff      	b.n	93d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13d8>
    93d8:	2020      	movs	r0, #32
    93da:	e7fb      	b.n	93d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13d4>
    93dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    93e0:	f7ff bea2 	b.w	9128 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1128>
    93e4:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
    93e8:	2b01      	cmp	r3, #1
    93ea:	d01a      	beq.n	9422 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1422>
    93ec:	f100 036a 	add.w	r3, r0, #106	; 0x6a
    93f0:	2501      	movs	r5, #1
    93f2:	785e      	ldrb	r6, [r3, #1]
    93f4:	428e      	cmp	r6, r1
    93f6:	d106      	bne.n	9406 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1406>
    93f8:	7819      	ldrb	r1, [r3, #0]
    93fa:	4291      	cmp	r1, r2
    93fc:	d103      	bne.n	9406 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1406>
    93fe:	2102      	movs	r1, #2
    9400:	f880 11ae 	strb.w	r1, [r0, #430]	; 0x1ae
    9404:	e00d      	b.n	9422 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1422>
    9406:	f500 71ff 	add.w	r1, r0, #510	; 0x1fe
    940a:	8802      	ldrh	r2, [r0, #0]
    940c:	f821 2902 	strh.w	r2, [r1], #-2
    9410:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
    9414:	710a      	strb	r2, [r1, #4]
    9416:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    941a:	7148      	strb	r0, [r1, #5]
    941c:	700d      	strb	r5, [r1, #0]
    941e:	f7fc fe91 	bl	6144 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9422:	68a1      	ldr	r1, [r4, #8]
    9424:	2021      	movs	r0, #33	; 0x21
    9426:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    942a:	f7fe fee7 	bl	81fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1fc>
    942e:	2000      	movs	r0, #0
    9430:	e7d0      	b.n	93d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13d4>
    9432:	0000      	.short	0x0000
    9434:	20000134 	.word	0x20000134
    9438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    943c:	4c4e      	ldr	r4, [pc, #312]	; (9578 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1578>)
    943e:	68a0      	ldr	r0, [r4, #8]
    9440:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    9444:	2920      	cmp	r1, #32
    9446:	d009      	beq.n	945c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x145c>
    9448:	f05f 0700 	movs.w	r7, #0
    944c:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9450:	2922      	cmp	r1, #34	; 0x22
    9452:	d005      	beq.n	9460 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1460>
    9454:	b387      	cbz	r7, 94b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14b8>
    9456:	f100 057d 	add.w	r5, r0, #125	; 0x7d
    945a:	e003      	b.n	9464 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1464>
    945c:	2701      	movs	r7, #1
    945e:	e7f5      	b.n	944c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x144c>
    9460:	f100 057e 	add.w	r5, r0, #126	; 0x7e
    9464:	f810 1fbc 	ldrb.w	r1, [r0, #188]!
    9468:	f041 0104 	orr.w	r1, r1, #4
    946c:	7001      	strb	r1, [r0, #0]
    946e:	6920      	ldr	r0, [r4, #16]
    9470:	f7fc fd54 	bl	5f1c <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>
    9474:	f04f 0801 	mov.w	r8, #1
    9478:	2600      	movs	r6, #0
    947a:	b308      	cbz	r0, 94c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14c0>
    947c:	4639      	mov	r1, r7
    947e:	6920      	ldr	r0, [r4, #16]
    9480:	f7fe ff86 	bl	8390 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x390>
    9484:	b1e0      	cbz	r0, 94c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14c0>
    9486:	466a      	mov	r2, sp
    9488:	6921      	ldr	r1, [r4, #16]
    948a:	68a0      	ldr	r0, [r4, #8]
    948c:	f004 f8eb 	bl	d666 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    9490:	b388      	cbz	r0, 94f6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14f6>
    9492:	6920      	ldr	r0, [r4, #16]
    9494:	f004 fa3b 	bl	d90e <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    9498:	68a1      	ldr	r1, [r4, #8]
    949a:	f8a1 0194 	strh.w	r0, [r1, #404]	; 0x194
    949e:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
    94a2:	f005 fb85 	bl	ebb0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    94a6:	b338      	cbz	r0, 94f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14f8>
    94a8:	68a0      	ldr	r0, [r4, #8]
    94aa:	2128      	movs	r1, #40	; 0x28
    94ac:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    94b0:	3076      	adds	r0, #118	; 0x76
    94b2:	f880 801e 	strb.w	r8, [r0, #30]
    94b6:	e053      	b.n	9560 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1560>
    94b8:	e7ff      	b.n	94ba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14ba>
    94ba:	2002      	movs	r0, #2
    94bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    94c0:	68a0      	ldr	r0, [r4, #8]
    94c2:	f04f 0900 	mov.w	r9, #0
    94c6:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
    94ca:	2901      	cmp	r1, #1
    94cc:	d015      	beq.n	94fa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14fa>
    94ce:	f880 61ae 	strb.w	r6, [r0, #430]	; 0x1ae
    94d2:	b1f7      	cbz	r7, 9512 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1512>
    94d4:	6920      	ldr	r0, [r4, #16]
    94d6:	68a1      	ldr	r1, [r4, #8]
    94d8:	78c0      	ldrb	r0, [r0, #3]
    94da:	f881 00ea 	strb.w	r0, [r1, #234]	; 0xea
    94de:	fa08 f200 	lsl.w	r2, r8, r0
    94e2:	f3c2 6000 	ubfx	r0, r2, #24, #1
    94e6:	b160      	cbz	r0, 9502 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1502>
    94e8:	200a      	movs	r0, #10
    94ea:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    94ee:	f891 00ae 	ldrb.w	r0, [r1, #174]	; 0xae
    94f2:	b9a0      	cbnz	r0, 951e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x151e>
    94f4:	e008      	b.n	9508 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1508>
    94f6:	e014      	b.n	9522 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1522>
    94f8:	e027      	b.n	954a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x154a>
    94fa:	201e      	movs	r0, #30
    94fc:	f7ff fcec 	bl	8ed8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xed8>
    9500:	e7e7      	b.n	94d2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14d2>
    9502:	f240 31cb 	movw	r1, #971	; 0x3cb
    9506:	e001      	b.n	950c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x150c>
    9508:	f240 31d3 	movw	r1, #979	; 0x3d3
    950c:	2031      	movs	r0, #49	; 0x31
    950e:	f7fa fc8d 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9512:	702e      	strb	r6, [r5, #0]
    9514:	f7fe fe7e 	bl	8214 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x214>
    9518:	f7ff fe06 	bl	9128 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1128>
    951c:	4681      	mov	r9, r0
    951e:	4648      	mov	r0, r9
    9520:	e7cc      	b.n	94bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14bc>
    9522:	68a0      	ldr	r0, [r4, #8]
    9524:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
    9528:	2901      	cmp	r1, #1
    952a:	d009      	beq.n	9540 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1540>
    952c:	f880 61ae 	strb.w	r6, [r0, #430]	; 0x1ae
    9530:	68a0      	ldr	r0, [r4, #8]
    9532:	f100 017e 	add.w	r1, r0, #126	; 0x7e
    9536:	428d      	cmp	r5, r1
    9538:	d112      	bne.n	9560 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1560>
    953a:	f880 607e 	strb.w	r6, [r0, #126]	; 0x7e
    953e:	e00f      	b.n	9560 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1560>
    9540:	2000      	movs	r0, #0
    9542:	f7ff fcc9 	bl	8ed8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xed8>
    9546:	702e      	strb	r6, [r5, #0]
    9548:	e7f2      	b.n	9530 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1530>
    954a:	68a0      	ldr	r0, [r4, #8]
    954c:	f89d 1000 	ldrb.w	r1, [sp]
    9550:	f880 1196 	strb.w	r1, [r0, #406]	; 0x196
    9554:	f89d 1001 	ldrb.w	r1, [sp, #1]
    9558:	f880 1197 	strb.w	r1, [r0, #407]	; 0x197
    955c:	2024      	movs	r0, #36	; 0x24
    955e:	7028      	strb	r0, [r5, #0]
    9560:	68a0      	ldr	r0, [r4, #8]
    9562:	f100 017e 	add.w	r1, r0, #126	; 0x7e
    9566:	428d      	cmp	r5, r1
    9568:	d102      	bne.n	9570 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1570>
    956a:	f7fe fe53 	bl	8214 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x214>
    956e:	e001      	b.n	9574 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1574>
    9570:	f880 60ae 	strb.w	r6, [r0, #174]	; 0xae
    9574:	2000      	movs	r0, #0
    9576:	e7a1      	b.n	94bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14bc>
    9578:	20000134 	.word	0x20000134
    957c:	b510      	push	{r4, lr}
    957e:	4c0a      	ldr	r4, [pc, #40]	; (95a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x15a8>)
    9580:	68a0      	ldr	r0, [r4, #8]
    9582:	f810 1fbc 	ldrb.w	r1, [r0, #188]!
    9586:	f041 0104 	orr.w	r1, r1, #4
    958a:	7001      	strb	r1, [r0, #0]
    958c:	6920      	ldr	r0, [r4, #16]
    958e:	f004 f9ec 	bl	d96a <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    9592:	2816      	cmp	r0, #22
    9594:	d001      	beq.n	959a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x159a>
    9596:	2000      	movs	r0, #0
    9598:	bd10      	pop	{r4, pc}
    959a:	6920      	ldr	r0, [r4, #16]
    959c:	f004 f9e7 	bl	d96e <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    95a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    95a4:	f7fe be08 	b.w	81b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b8>
    95a8:	20000134 	.word	0x20000134
    95ac:	4802      	ldr	r0, [pc, #8]	; (95b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x15b8>)
    95ae:	6900      	ldr	r0, [r0, #16]
    95b0:	7900      	ldrb	r0, [r0, #4]
    95b2:	f7fe be01 	b.w	81b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b8>
    95b6:	0000      	.short	0x0000
    95b8:	20000134 	.word	0x20000134
    95bc:	b510      	push	{r4, lr}
    95be:	4c08      	ldr	r4, [pc, #32]	; (95e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x15e0>)
    95c0:	68a0      	ldr	r0, [r4, #8]
    95c2:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    95c6:	2817      	cmp	r0, #23
    95c8:	d001      	beq.n	95ce <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x15ce>
    95ca:	2002      	movs	r0, #2
    95cc:	bd10      	pop	{r4, pc}
    95ce:	f7fe fe21 	bl	8214 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x214>
    95d2:	68a1      	ldr	r1, [r4, #8]
    95d4:	201b      	movs	r0, #27
    95d6:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    95da:	2000      	movs	r0, #0
    95dc:	bd10      	pop	{r4, pc}
    95de:	0000      	.short	0x0000
    95e0:	20000134 	.word	0x20000134
    95e4:	b510      	push	{r4, lr}
    95e6:	4c0b      	ldr	r4, [pc, #44]	; (9614 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1614>)
    95e8:	2301      	movs	r3, #1
    95ea:	4619      	mov	r1, r3
    95ec:	68a0      	ldr	r0, [r4, #8]
    95ee:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    95f2:	3070      	adds	r0, #112	; 0x70
    95f4:	f003 ff13 	bl	d41e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    95f8:	b108      	cbz	r0, 95fe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x15fe>
    95fa:	2000      	movs	r0, #0
    95fc:	bd10      	pop	{r4, pc}
    95fe:	6920      	ldr	r0, [r4, #16]
    9600:	f004 f989 	bl	d916 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    9604:	68a1      	ldr	r1, [r4, #8]
    9606:	f881 017a 	strb.w	r0, [r1, #378]	; 0x17a
    960a:	2007      	movs	r0, #7
    960c:	f881 0080 	strb.w	r0, [r1, #128]	; 0x80
    9610:	e7f3      	b.n	95fa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x15fa>
    9612:	0000      	.short	0x0000
    9614:	20000134 	.word	0x20000134
    9618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    961c:	4d37      	ldr	r5, [pc, #220]	; (96fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16fc>)
    961e:	2600      	movs	r6, #0
    9620:	4628      	mov	r0, r5
    9622:	68a9      	ldr	r1, [r5, #8]
    9624:	6900      	ldr	r0, [r0, #16]
    9626:	2701      	movs	r7, #1
    9628:	f891 307d 	ldrb.w	r3, [r1, #125]	; 0x7d
    962c:	7900      	ldrb	r0, [r0, #4]
    962e:	2b0e      	cmp	r3, #14
    9630:	d101      	bne.n	9636 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1636>
    9632:	2812      	cmp	r0, #18
    9634:	d006      	beq.n	9644 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1644>
    9636:	4a31      	ldr	r2, [pc, #196]	; (96fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16fc>)
    9638:	2400      	movs	r4, #0
    963a:	6892      	ldr	r2, [r2, #8]
    963c:	32bc      	adds	r2, #188	; 0xbc
    963e:	2b1c      	cmp	r3, #28
    9640:	d004      	beq.n	964c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x164c>
    9642:	e005      	b.n	9650 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1650>
    9644:	f7ff fe44 	bl	92d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12d0>
    9648:	4606      	mov	r6, r0
    964a:	e053      	b.n	96f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16f4>
    964c:	2814      	cmp	r0, #20
    964e:	d002      	beq.n	9656 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1656>
    9650:	2b04      	cmp	r3, #4
    9652:	d00b      	beq.n	966c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x166c>
    9654:	e00c      	b.n	9670 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1670>
    9656:	f881 407d 	strb.w	r4, [r1, #125]	; 0x7d
    965a:	f881 40ae 	strb.w	r4, [r1, #174]	; 0xae
    965e:	2105      	movs	r1, #5
    9660:	4610      	mov	r0, r2
    9662:	f005 fa36 	bl	ead2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6fa>
    9666:	f7fe ff8d 	bl	8584 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x584>
    966a:	e043      	b.n	96f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16f4>
    966c:	280e      	cmp	r0, #14
    966e:	d002      	beq.n	9676 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1676>
    9670:	2b20      	cmp	r3, #32
    9672:	d00f      	beq.n	9694 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1694>
    9674:	e010      	b.n	9698 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1698>
    9676:	f881 407d 	strb.w	r4, [r1, #125]	; 0x7d
    967a:	f881 40ae 	strb.w	r4, [r1, #174]	; 0xae
    967e:	8808      	ldrh	r0, [r1, #0]
    9680:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
    9684:	201a      	movs	r0, #26
    9686:	f881 020c 	strb.w	r0, [r1, #524]	; 0x20c
    968a:	f881 720a 	strb.w	r7, [r1, #522]	; 0x20a
    968e:	f7fc fd59 	bl	6144 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9692:	e02f      	b.n	96f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16f4>
    9694:	2816      	cmp	r0, #22
    9696:	d006      	beq.n	96a6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16a6>
    9698:	2b26      	cmp	r3, #38	; 0x26
    969a:	d101      	bne.n	96a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16a0>
    969c:	2816      	cmp	r0, #22
    969e:	d002      	beq.n	96a6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16a6>
    96a0:	2817      	cmp	r0, #23
    96a2:	d014      	beq.n	96ce <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16ce>
    96a4:	e026      	b.n	96f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16f4>
    96a6:	f801 4f7d 	strb.w	r4, [r1, #125]!
    96aa:	f881 4031 	strb.w	r4, [r1, #49]	; 0x31
    96ae:	7848      	ldrb	r0, [r1, #1]
    96b0:	2821      	cmp	r0, #33	; 0x21
    96b2:	d01f      	beq.n	96f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16f4>
    96b4:	2108      	movs	r1, #8
    96b6:	4610      	mov	r0, r2
    96b8:	f005 fa0b 	bl	ead2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6fa>
    96bc:	68a8      	ldr	r0, [r5, #8]
    96be:	210b      	movs	r1, #11
    96c0:	30bc      	adds	r0, #188	; 0xbc
    96c2:	f005 fa06 	bl	ead2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6fa>
    96c6:	201a      	movs	r0, #26
    96c8:	f7ff fc06 	bl	8ed8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xed8>
    96cc:	e012      	b.n	96f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16f4>
    96ce:	f891 007e 	ldrb.w	r0, [r1, #126]	; 0x7e
    96d2:	2822      	cmp	r0, #34	; 0x22
    96d4:	d10e      	bne.n	96f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16f4>
    96d6:	f881 407e 	strb.w	r4, [r1, #126]	; 0x7e
    96da:	f7fe fd9b 	bl	8214 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x214>
    96de:	68a8      	ldr	r0, [r5, #8]
    96e0:	f890 01ae 	ldrb.w	r0, [r0, #430]	; 0x1ae
    96e4:	2801      	cmp	r0, #1
    96e6:	d102      	bne.n	96ee <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16ee>
    96e8:	2000      	movs	r0, #0
    96ea:	f7ff fbf5 	bl	8ed8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xed8>
    96ee:	68a8      	ldr	r0, [r5, #8]
    96f0:	f880 41ae 	strb.w	r4, [r0, #430]	; 0x1ae
    96f4:	4630      	mov	r0, r6
    96f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    96fa:	0000      	.short	0x0000
    96fc:	20000134 	.word	0x20000134
    9700:	b570      	push	{r4, r5, r6, lr}
    9702:	4c2c      	ldr	r4, [pc, #176]	; (97b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17b4>)
    9704:	68a0      	ldr	r0, [r4, #8]
    9706:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    970a:	0789      	lsls	r1, r1, #30
    970c:	d507      	bpl.n	971e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x171e>
    970e:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9712:	2301      	movs	r3, #1
    9714:	2108      	movs	r1, #8
    9716:	3070      	adds	r0, #112	; 0x70
    9718:	f003 fe81 	bl	d41e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    971c:	b1e8      	cbz	r0, 975a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x175a>
    971e:	68a0      	ldr	r0, [r4, #8]
    9720:	f890 00b6 	ldrb.w	r0, [r0, #182]	; 0xb6
    9724:	0780      	lsls	r0, r0, #30
    9726:	d412      	bmi.n	974e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x174e>
    9728:	6920      	ldr	r0, [r4, #16]
    972a:	f004 f8f6 	bl	d91a <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    972e:	68a1      	ldr	r1, [r4, #8]
    9730:	f881 00b7 	strb.w	r0, [r1, #183]	; 0xb7
    9734:	6920      	ldr	r0, [r4, #16]
    9736:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    973a:	f8a1 20b8 	strh.w	r2, [r1, #184]	; 0xb8
    973e:	8840      	ldrh	r0, [r0, #2]
    9740:	f8a1 00ba 	strh.w	r0, [r1, #186]	; 0xba
    9744:	f811 0fb6 	ldrb.w	r0, [r1, #182]!
    9748:	f040 0002 	orr.w	r0, r0, #2
    974c:	7008      	strb	r0, [r1, #0]
    974e:	68a0      	ldr	r0, [r4, #8]
    9750:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    9754:	07c9      	lsls	r1, r1, #31
    9756:	d002      	beq.n	975e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x175e>
    9758:	e010      	b.n	977c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x177c>
    975a:	2001      	movs	r0, #1
    975c:	bd70      	pop	{r4, r5, r6, pc}
    975e:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    9762:	078a      	lsls	r2, r1, #30
    9764:	d504      	bpl.n	9770 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1770>
    9766:	f44f 7137 	mov.w	r1, #732	; 0x2dc
    976a:	2031      	movs	r0, #49	; 0x31
    976c:	f7fa fb5e 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9770:	f041 0102 	orr.w	r1, r1, #2
    9774:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    9778:	f7fe fd40 	bl	81fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1fc>
    977c:	68a0      	ldr	r0, [r4, #8]
    977e:	2500      	movs	r5, #0
    9780:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    9784:	2906      	cmp	r1, #6
    9786:	d105      	bne.n	9794 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1794>
    9788:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    978c:	f880 50ae 	strb.w	r5, [r0, #174]	; 0xae
    9790:	f7fc fcd8 	bl	6144 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9794:	68a0      	ldr	r0, [r4, #8]
    9796:	f890 11b4 	ldrb.w	r1, [r0, #436]	; 0x1b4
    979a:	b149      	cbz	r1, 97b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17b0>
    979c:	f880 51b4 	strb.w	r5, [r0, #436]	; 0x1b4
    97a0:	f7fc fcd0 	bl	6144 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    97a4:	68a0      	ldr	r0, [r4, #8]
    97a6:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    97aa:	b909      	cbnz	r1, 97b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17b0>
    97ac:	f880 50ae 	strb.w	r5, [r0, #174]	; 0xae
    97b0:	2000      	movs	r0, #0
    97b2:	bd70      	pop	{r4, r5, r6, pc}
    97b4:	20000134 	.word	0x20000134
    97b8:	b510      	push	{r4, lr}
    97ba:	4c1f      	ldr	r4, [pc, #124]	; (9838 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1838>)
    97bc:	68a3      	ldr	r3, [r4, #8]
    97be:	f893 00f2 	ldrb.w	r0, [r3, #242]	; 0xf2
    97c2:	2808      	cmp	r0, #8
    97c4:	d20e      	bcs.n	97e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17e4>
    97c6:	f100 0208 	add.w	r2, r0, #8
    97ca:	f1c0 0008 	rsb	r0, r0, #8
    97ce:	b2c1      	uxtb	r1, r0
    97d0:	1898      	adds	r0, r3, r2
    97d2:	f500 7088 	add.w	r0, r0, #272	; 0x110
    97d6:	f7fa fbb5 	bl	3f44 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    97da:	68a1      	ldr	r1, [r4, #8]
    97dc:	f811 2ff2 	ldrb.w	r2, [r1, #242]!
    97e0:	4410      	add	r0, r2
    97e2:	7008      	strb	r0, [r1, #0]
    97e4:	68a3      	ldr	r3, [r4, #8]
    97e6:	f893 00f2 	ldrb.w	r0, [r3, #242]	; 0xf2
    97ea:	3808      	subs	r0, #8
    97ec:	2804      	cmp	r0, #4
    97ee:	d20c      	bcs.n	980a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x180a>
    97f0:	1d02      	adds	r2, r0, #4
    97f2:	f1c0 0004 	rsb	r0, r0, #4
    97f6:	b2c1      	uxtb	r1, r0
    97f8:	1898      	adds	r0, r3, r2
    97fa:	30e0      	adds	r0, #224	; 0xe0
    97fc:	f7fa fba2 	bl	3f44 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    9800:	68a1      	ldr	r1, [r4, #8]
    9802:	f811 2ff2 	ldrb.w	r2, [r1, #242]!
    9806:	4410      	add	r0, r2
    9808:	7008      	strb	r0, [r1, #0]
    980a:	68a0      	ldr	r0, [r4, #8]
    980c:	f890 10f2 	ldrb.w	r1, [r0, #242]	; 0xf2
    9810:	290c      	cmp	r1, #12
    9812:	d30f      	bcc.n	9834 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1834>
    9814:	d005      	beq.n	9822 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1822>
    9816:	f240 71bf 	movw	r1, #1983	; 0x7bf
    981a:	f04f 0031 	mov.w	r0, #49	; 0x31
    981e:	f7fa fb05 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9822:	2100      	movs	r1, #0
    9824:	f880 10f2 	strb.w	r1, [r0, #242]	; 0xf2
    9828:	2101      	movs	r1, #1
    982a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    982e:	2004      	movs	r0, #4
    9830:	f7ff ba54 	b.w	8cdc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcdc>
    9834:	bd10      	pop	{r4, pc}
    9836:	0000      	.short	0x0000
    9838:	20000134 	.word	0x20000134
    983c:	4804      	ldr	r0, [pc, #16]	; (9850 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1850>)
    983e:	2127      	movs	r1, #39	; 0x27
    9840:	6880      	ldr	r0, [r0, #8]
    9842:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    9846:	2100      	movs	r1, #0
    9848:	f880 118c 	strb.w	r1, [r0, #396]	; 0x18c
    984c:	4770      	bx	lr
    984e:	0000      	.short	0x0000
    9850:	20000134 	.word	0x20000134
    9854:	4809      	ldr	r0, [pc, #36]	; (987c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x187c>)
    9856:	b510      	push	{r4, lr}
    9858:	6880      	ldr	r0, [r0, #8]
    985a:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    985e:	2914      	cmp	r1, #20
    9860:	d004      	beq.n	986c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x186c>
    9862:	f240 619a 	movw	r1, #1690	; 0x69a
    9866:	2031      	movs	r0, #49	; 0x31
    9868:	f7fa fae0 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    986c:	2101      	movs	r1, #1
    986e:	f880 10b3 	strb.w	r1, [r0, #179]	; 0xb3
    9872:	2115      	movs	r1, #21
    9874:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    9878:	bd10      	pop	{r4, pc}
    987a:	0000      	.short	0x0000
    987c:	20000134 	.word	0x20000134
    9880:	b510      	push	{r4, lr}
    9882:	4c0a      	ldr	r4, [pc, #40]	; (98ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18ac>)
    9884:	68a0      	ldr	r0, [r4, #8]
    9886:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    988a:	07c0      	lsls	r0, r0, #31
    988c:	d008      	beq.n	98a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18a0>
    988e:	f7fe fcc1 	bl	8214 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x214>
    9892:	68a0      	ldr	r0, [r4, #8]
    9894:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    9898:	f021 0101 	bic.w	r1, r1, #1
    989c:	7001      	strb	r1, [r0, #0]
    989e:	bd10      	pop	{r4, pc}
    98a0:	f240 6183 	movw	r1, #1667	; 0x683
    98a4:	2031      	movs	r0, #49	; 0x31
    98a6:	f7fa fac1 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    98aa:	0000      	.short	0x0000
    98ac:	20000134 	.word	0x20000134
    98b0:	b510      	push	{r4, lr}
    98b2:	4c0a      	ldr	r4, [pc, #40]	; (98dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18dc>)
    98b4:	2301      	movs	r3, #1
    98b6:	2100      	movs	r1, #0
    98b8:	68a0      	ldr	r0, [r4, #8]
    98ba:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    98be:	3070      	adds	r0, #112	; 0x70
    98c0:	f003 fdad 	bl	d41e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    98c4:	b120      	cbz	r0, 98d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18d0>
    98c6:	68a1      	ldr	r1, [r4, #8]
    98c8:	201c      	movs	r0, #28
    98ca:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    98ce:	bd10      	pop	{r4, pc}
    98d0:	f44f 61e1 	mov.w	r1, #1800	; 0x708
    98d4:	2031      	movs	r0, #49	; 0x31
    98d6:	f7fa faa9 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    98da:	0000      	.short	0x0000
    98dc:	20000134 	.word	0x20000134
    98e0:	480a      	ldr	r0, [pc, #40]	; (990c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x190c>)
    98e2:	b510      	push	{r4, lr}
    98e4:	6880      	ldr	r0, [r0, #8]
    98e6:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    98ea:	f3c1 1201 	ubfx	r2, r1, #4, #2
    98ee:	2a01      	cmp	r2, #1
    98f0:	d004      	beq.n	98fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18fc>
    98f2:	f240 710f 	movw	r1, #1807	; 0x70f
    98f6:	2031      	movs	r0, #49	; 0x31
    98f8:	f7fa fa98 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    98fc:	f021 0110 	bic.w	r1, r1, #16
    9900:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    9904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9908:	f7fe bc84 	b.w	8214 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x214>
    990c:	20000134 	.word	0x20000134
    9910:	b510      	push	{r4, lr}
    9912:	4c0a      	ldr	r4, [pc, #40]	; (993c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x193c>)
    9914:	2301      	movs	r3, #1
    9916:	2100      	movs	r1, #0
    9918:	68a0      	ldr	r0, [r4, #8]
    991a:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    991e:	3070      	adds	r0, #112	; 0x70
    9920:	f003 fd7d 	bl	d41e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9924:	b120      	cbz	r0, 9930 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1930>
    9926:	68a1      	ldr	r1, [r4, #8]
    9928:	200e      	movs	r0, #14
    992a:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    992e:	bd10      	pop	{r4, pc}
    9930:	f240 61fb 	movw	r1, #1787	; 0x6fb
    9934:	2031      	movs	r0, #49	; 0x31
    9936:	f7fa fa79 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    993a:	0000      	.short	0x0000
    993c:	20000134 	.word	0x20000134
    9940:	4804      	ldr	r0, [pc, #16]	; (9954 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1954>)
    9942:	6880      	ldr	r0, [r0, #8]
    9944:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    9948:	f021 0104 	bic.w	r1, r1, #4
    994c:	7001      	strb	r1, [r0, #0]
    994e:	f7fe bc61 	b.w	8214 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x214>
    9952:	0000      	.short	0x0000
    9954:	20000134 	.word	0x20000134
    9958:	4809      	ldr	r0, [pc, #36]	; (9980 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1980>)
    995a:	b510      	push	{r4, lr}
    995c:	6880      	ldr	r0, [r0, #8]
    995e:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9962:	2910      	cmp	r1, #16
    9964:	d004      	beq.n	9970 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1970>
    9966:	f240 6192 	movw	r1, #1682	; 0x692
    996a:	2031      	movs	r0, #49	; 0x31
    996c:	f7fa fa5e 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9970:	2101      	movs	r1, #1
    9972:	f880 10b3 	strb.w	r1, [r0, #179]	; 0xb3
    9976:	2111      	movs	r1, #17
    9978:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    997c:	bd10      	pop	{r4, pc}
    997e:	0000      	.short	0x0000
    9980:	20000134 	.word	0x20000134
    9984:	b510      	push	{r4, lr}
    9986:	4c0a      	ldr	r4, [pc, #40]	; (99b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19b0>)
    9988:	2301      	movs	r3, #1
    998a:	2100      	movs	r1, #0
    998c:	68a0      	ldr	r0, [r4, #8]
    998e:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9992:	3070      	adds	r0, #112	; 0x70
    9994:	f003 fd43 	bl	d41e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9998:	b120      	cbz	r0, 99a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19a4>
    999a:	68a1      	ldr	r1, [r4, #8]
    999c:	201f      	movs	r0, #31
    999e:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    99a2:	bd10      	pop	{r4, pc}
    99a4:	f240 711b 	movw	r1, #1819	; 0x71b
    99a8:	2031      	movs	r0, #49	; 0x31
    99aa:	f7fa fa3f 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    99ae:	0000      	.short	0x0000
    99b0:	20000134 	.word	0x20000134
    99b4:	4808      	ldr	r0, [pc, #32]	; (99d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19d8>)
    99b6:	b510      	push	{r4, lr}
    99b8:	6880      	ldr	r0, [r0, #8]
    99ba:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    99be:	2921      	cmp	r1, #33	; 0x21
    99c0:	d005      	beq.n	99ce <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19ce>
    99c2:	b121      	cbz	r1, 99ce <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19ce>
    99c4:	f240 7122 	movw	r1, #1826	; 0x722
    99c8:	2031      	movs	r0, #49	; 0x31
    99ca:	f7fa fa2f 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    99ce:	2122      	movs	r1, #34	; 0x22
    99d0:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    99d4:	bd10      	pop	{r4, pc}
    99d6:	0000      	.short	0x0000
    99d8:	20000134 	.word	0x20000134
    99dc:	4807      	ldr	r0, [pc, #28]	; (99fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19fc>)
    99de:	b510      	push	{r4, lr}
    99e0:	6880      	ldr	r0, [r0, #8]
    99e2:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    99e6:	2915      	cmp	r1, #21
    99e8:	d004      	beq.n	99f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19f4>
    99ea:	f240 61a7 	movw	r1, #1703	; 0x6a7
    99ee:	2031      	movs	r0, #49	; 0x31
    99f0:	f7fa fa1c 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    99f4:	2119      	movs	r1, #25
    99f6:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    99fa:	bd10      	pop	{r4, pc}
    99fc:	20000134 	.word	0x20000134
    9a00:	4807      	ldr	r0, [pc, #28]	; (9a20 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a20>)
    9a02:	b510      	push	{r4, lr}
    9a04:	6880      	ldr	r0, [r0, #8]
    9a06:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9a0a:	2915      	cmp	r1, #21
    9a0c:	d004      	beq.n	9a18 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a18>
    9a0e:	f240 61a1 	movw	r1, #1697	; 0x6a1
    9a12:	2031      	movs	r0, #49	; 0x31
    9a14:	f7fa fa0a 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9a18:	2117      	movs	r1, #23
    9a1a:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    9a1e:	bd10      	pop	{r4, pc}
    9a20:	20000134 	.word	0x20000134
    9a24:	b570      	push	{r4, r5, r6, lr}
    9a26:	4d1b      	ldr	r5, [pc, #108]	; (9a94 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a94>)
    9a28:	68a8      	ldr	r0, [r5, #8]
    9a2a:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9a2e:	291b      	cmp	r1, #27
    9a30:	d002      	beq.n	9a38 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a38>
    9a32:	f240 61c1 	movw	r1, #1729	; 0x6c1
    9a36:	e007      	b.n	9a48 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a48>
    9a38:	2400      	movs	r4, #0
    9a3a:	f880 40b3 	strb.w	r4, [r0, #179]	; 0xb3
    9a3e:	f890 11c4 	ldrb.w	r1, [r0, #452]	; 0x1c4
    9a42:	b121      	cbz	r1, 9a4e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a4e>
    9a44:	f240 61c5 	movw	r1, #1733	; 0x6c5
    9a48:	2031      	movs	r0, #49	; 0x31
    9a4a:	f7fa f9ef 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9a4e:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    9a52:	b141      	cbz	r1, 9a66 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a66>
    9a54:	f880 40b4 	strb.w	r4, [r0, #180]	; 0xb4
    9a58:	8801      	ldrh	r1, [r0, #0]
    9a5a:	f8a0 11c8 	strh.w	r1, [r0, #456]	; 0x1c8
    9a5e:	f880 41c6 	strb.w	r4, [r0, #454]	; 0x1c6
    9a62:	210c      	movs	r1, #12
    9a64:	e008      	b.n	9a78 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a78>
    9a66:	8801      	ldrh	r1, [r0, #0]
    9a68:	f8a0 11c8 	strh.w	r1, [r0, #456]	; 0x1c8
    9a6c:	f880 41c6 	strb.w	r4, [r0, #454]	; 0x1c6
    9a70:	2101      	movs	r1, #1
    9a72:	f880 11ca 	strb.w	r1, [r0, #458]	; 0x1ca
    9a76:	210b      	movs	r1, #11
    9a78:	f880 11c4 	strb.w	r1, [r0, #452]	; 0x1c4
    9a7c:	8800      	ldrh	r0, [r0, #0]
    9a7e:	f7fa fdef 	bl	4660 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    9a82:	f003 f941 	bl	cd08 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    9a86:	f7fc fb5d 	bl	6144 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9a8a:	68a8      	ldr	r0, [r5, #8]
    9a8c:	f880 407e 	strb.w	r4, [r0, #126]	; 0x7e
    9a90:	bd70      	pop	{r4, r5, r6, pc}
    9a92:	0000      	.short	0x0000
    9a94:	20000134 	.word	0x20000134
    9a98:	b510      	push	{r4, lr}
    9a9a:	4c08      	ldr	r4, [pc, #32]	; (9abc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1abc>)
    9a9c:	2301      	movs	r3, #1
    9a9e:	4619      	mov	r1, r3
    9aa0:	68a0      	ldr	r0, [r4, #8]
    9aa2:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    9aa6:	3070      	adds	r0, #112	; 0x70
    9aa8:	f003 fcb9 	bl	d41e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9aac:	2800      	cmp	r0, #0
    9aae:	d103      	bne.n	9ab8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1ab8>
    9ab0:	68a1      	ldr	r1, [r4, #8]
    9ab2:	2008      	movs	r0, #8
    9ab4:	f881 0080 	strb.w	r0, [r1, #128]	; 0x80
    9ab8:	bd10      	pop	{r4, pc}
    9aba:	0000      	.short	0x0000
    9abc:	20000134 	.word	0x20000134
    9ac0:	4814      	ldr	r0, [pc, #80]	; (9b14 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b14>)
    9ac2:	b510      	push	{r4, lr}
    9ac4:	68c1      	ldr	r1, [r0, #12]
    9ac6:	6880      	ldr	r0, [r0, #8]
    9ac8:	7909      	ldrb	r1, [r1, #4]
    9aca:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9ace:	2a0a      	cmp	r2, #10
    9ad0:	d109      	bne.n	9ae6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1ae6>
    9ad2:	f890 20ea 	ldrb.w	r2, [r0, #234]	; 0xea
    9ad6:	428a      	cmp	r2, r1
    9ad8:	d105      	bne.n	9ae6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1ae6>
    9ada:	2100      	movs	r1, #0
    9adc:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    9ae0:	f880 10ae 	strb.w	r1, [r0, #174]	; 0xae
    9ae4:	bd10      	pop	{r4, pc}
    9ae6:	f890 207f 	ldrb.w	r2, [r0, #127]	; 0x7f
    9aea:	0713      	lsls	r3, r2, #28
    9aec:	d507      	bpl.n	9afe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1afe>
    9aee:	f022 0108 	bic.w	r1, r2, #8
    9af2:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    9af6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9afa:	f7fe bb8b 	b.w	8214 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x214>
    9afe:	29ff      	cmp	r1, #255	; 0xff
    9b00:	d004      	beq.n	9b0c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b0c>
    9b02:	f240 617d 	movw	r1, #1661	; 0x67d
    9b06:	2031      	movs	r0, #49	; 0x31
    9b08:	f7fa f990 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9b10:	f7ff be94 	b.w	983c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x183c>
    9b14:	20000134 	.word	0x20000134
    9b18:	b510      	push	{r4, lr}
    9b1a:	4c15      	ldr	r4, [pc, #84]	; (9b70 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b70>)
    9b1c:	68a0      	ldr	r0, [r4, #8]
    9b1e:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    9b22:	0789      	lsls	r1, r1, #30
    9b24:	d411      	bmi.n	9b4a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b4a>
    9b26:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9b2a:	2301      	movs	r3, #1
    9b2c:	2100      	movs	r1, #0
    9b2e:	3070      	adds	r0, #112	; 0x70
    9b30:	f003 fc75 	bl	d41e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9b34:	b120      	cbz	r0, 9b40 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b40>
    9b36:	68a1      	ldr	r1, [r4, #8]
    9b38:	2006      	movs	r0, #6
    9b3a:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    9b3e:	e009      	b.n	9b54 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b54>
    9b40:	f240 61e7 	movw	r1, #1767	; 0x6e7
    9b44:	2031      	movs	r0, #49	; 0x31
    9b46:	f7fa f971 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9b4a:	2100      	movs	r1, #0
    9b4c:	f880 10ae 	strb.w	r1, [r0, #174]	; 0xae
    9b50:	f880 11b4 	strb.w	r1, [r0, #436]	; 0x1b4
    9b54:	68a0      	ldr	r0, [r4, #8]
    9b56:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    9b5a:	0780      	lsls	r0, r0, #30
    9b5c:	d507      	bpl.n	9b6e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b6e>
    9b5e:	f7fe fb59 	bl	8214 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x214>
    9b62:	68a0      	ldr	r0, [r4, #8]
    9b64:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    9b68:	f021 0102 	bic.w	r1, r1, #2
    9b6c:	7001      	strb	r1, [r0, #0]
    9b6e:	bd10      	pop	{r4, pc}
    9b70:	20000134 	.word	0x20000134
    9b74:	4808      	ldr	r0, [pc, #32]	; (9b98 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b98>)
    9b76:	b510      	push	{r4, lr}
    9b78:	6880      	ldr	r0, [r0, #8]
    9b7a:	f890 1083 	ldrb.w	r1, [r0, #131]	; 0x83
    9b7e:	b941      	cbnz	r1, 9b92 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b92>
    9b80:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9b84:	2301      	movs	r3, #1
    9b86:	2106      	movs	r1, #6
    9b88:	3070      	adds	r0, #112	; 0x70
    9b8a:	f003 fc48 	bl	d41e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9b8e:	2800      	cmp	r0, #0
    9b90:	d000      	beq.n	9b94 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b94>
    9b92:	2001      	movs	r0, #1
    9b94:	bd10      	pop	{r4, pc}
    9b96:	0000      	.short	0x0000
    9b98:	20000134 	.word	0x20000134
    9b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9b9e:	4c59      	ldr	r4, [pc, #356]	; (9d04 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d04>)
    9ba0:	4606      	mov	r6, r0
    9ba2:	4615      	mov	r5, r2
    9ba4:	68a0      	ldr	r0, [r4, #8]
    9ba6:	b109      	cbz	r1, 9bac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1bac>
    9ba8:	2100      	movs	r1, #0
    9baa:	e004      	b.n	9bb6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1bb6>
    9bac:	f8b0 110e 	ldrh.w	r1, [r0, #270]	; 0x10e
    9bb0:	f8b0 20fe 	ldrh.w	r2, [r0, #254]	; 0xfe
    9bb4:	4411      	add	r1, r2
    9bb6:	f8a0 110e 	strh.w	r1, [r0, #270]	; 0x10e
    9bba:	f890 1178 	ldrb.w	r1, [r0, #376]	; 0x178
    9bbe:	f88d 1000 	strb.w	r1, [sp]
    9bc2:	9900      	ldr	r1, [sp, #0]
    9bc4:	9100      	str	r1, [sp, #0]
    9bc6:	f89d 1000 	ldrb.w	r1, [sp]
    9bca:	b939      	cbnz	r1, 9bdc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1bdc>
    9bcc:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    9bd0:	2301      	movs	r3, #1
    9bd2:	4619      	mov	r1, r3
    9bd4:	3070      	adds	r0, #112	; 0x70
    9bd6:	f003 fc22 	bl	d41e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9bda:	b130      	cbz	r0, 9bea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1bea>
    9bdc:	68a0      	ldr	r0, [r4, #8]
    9bde:	f830 1fa8 	ldrh.w	r1, [r0, #168]!
    9be2:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
    9be6:	4411      	add	r1, r2
    9be8:	8001      	strh	r1, [r0, #0]
    9bea:	68a0      	ldr	r0, [r4, #8]
    9bec:	f890 20ae 	ldrb.w	r2, [r0, #174]	; 0xae
    9bf0:	b132      	cbz	r2, 9c00 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c00>
    9bf2:	f8b0 10aa 	ldrh.w	r1, [r0, #170]	; 0xaa
    9bf6:	f8b0 30fe 	ldrh.w	r3, [r0, #254]	; 0xfe
    9bfa:	4419      	add	r1, r3
    9bfc:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
    9c00:	f990 30b2 	ldrsb.w	r3, [r0, #178]	; 0xb2
    9c04:	2b00      	cmp	r3, #0
    9c06:	dd06      	ble.n	9c16 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c16>
    9c08:	f8b0 10b0 	ldrh.w	r1, [r0, #176]	; 0xb0
    9c0c:	f8b0 70fe 	ldrh.w	r7, [r0, #254]	; 0xfe
    9c10:	4439      	add	r1, r7
    9c12:	f8a0 10b0 	strh.w	r1, [r0, #176]	; 0xb0
    9c16:	2101      	movs	r1, #1
    9c18:	273d      	movs	r7, #61	; 0x3d
    9c1a:	b116      	cbz	r6, 9c22 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c22>
    9c1c:	f880 7095 	strb.w	r7, [r0, #149]	; 0x95
    9c20:	e012      	b.n	9c48 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c48>
    9c22:	7824      	ldrb	r4, [r4, #0]
    9c24:	2c02      	cmp	r4, #2
    9c26:	d009      	beq.n	9c3c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c3c>
    9c28:	2c01      	cmp	r4, #1
    9c2a:	d011      	beq.n	9c50 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c50>
    9c2c:	b33d      	cbz	r5, 9c7e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c7e>
    9c2e:	f100 0294 	add.w	r2, r0, #148	; 0x94
    9c32:	7011      	strb	r1, [r2, #0]
    9c34:	06e9      	lsls	r1, r5, #27
    9c36:	d50e      	bpl.n	9c56 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c56>
    9c38:	211e      	movs	r1, #30
    9c3a:	e018      	b.n	9c6e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c6e>
    9c3c:	f890 20ee 	ldrb.w	r2, [r0, #238]	; 0xee
    9c40:	2a06      	cmp	r2, #6
    9c42:	d044      	beq.n	9cce <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1cce>
    9c44:	2216      	movs	r2, #22
    9c46:	e042      	b.n	9cce <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1cce>
    9c48:	f100 0294 	add.w	r2, r0, #148	; 0x94
    9c4c:	7011      	strb	r1, [r2, #0]
    9c4e:	e047      	b.n	9ce0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1ce0>
    9c50:	f890 217a 	ldrb.w	r2, [r0, #378]	; 0x17a
    9c54:	e03b      	b.n	9cce <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1cce>
    9c56:	0729      	lsls	r1, r5, #28
    9c58:	d502      	bpl.n	9c60 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c60>
    9c5a:	f880 7095 	strb.w	r7, [r0, #149]	; 0x95
    9c5e:	e03f      	b.n	9ce0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1ce0>
    9c60:	06a9      	lsls	r1, r5, #26
    9c62:	d501      	bpl.n	9c68 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c68>
    9c64:	2123      	movs	r1, #35	; 0x23
    9c66:	e002      	b.n	9c6e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c6e>
    9c68:	07a9      	lsls	r1, r5, #30
    9c6a:	d003      	beq.n	9c74 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c74>
    9c6c:	212a      	movs	r1, #42	; 0x2a
    9c6e:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    9c72:	e035      	b.n	9ce0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1ce0>
    9c74:	f640 41c1 	movw	r1, #3265	; 0xcc1
    9c78:	2031      	movs	r0, #49	; 0x31
    9c7a:	f7fa f8d7 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9c7e:	b12a      	cbz	r2, 9c8c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c8c>
    9c80:	f8b0 20aa 	ldrh.w	r2, [r0, #170]	; 0xaa
    9c84:	f8b0 40ac 	ldrh.w	r4, [r0, #172]	; 0xac
    9c88:	42a2      	cmp	r2, r4
    9c8a:	d216      	bcs.n	9cba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1cba>
    9c8c:	2b00      	cmp	r3, #0
    9c8e:	dd05      	ble.n	9c9c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c9c>
    9c90:	f8b0 20b0 	ldrh.w	r2, [r0, #176]	; 0xb0
    9c94:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	; 0xac
    9c98:	429a      	cmp	r2, r3
    9c9a:	d20e      	bcs.n	9cba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1cba>
    9c9c:	f8b0 30a8 	ldrh.w	r3, [r0, #168]	; 0xa8
    9ca0:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
    9ca4:	4293      	cmp	r3, r2
    9ca6:	d30a      	bcc.n	9cbe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1cbe>
    9ca8:	f890 3178 	ldrb.w	r3, [r0, #376]	; 0x178
    9cac:	f88d 3000 	strb.w	r3, [sp]
    9cb0:	9b00      	ldr	r3, [sp, #0]
    9cb2:	9300      	str	r3, [sp, #0]
    9cb4:	f89d 3000 	ldrb.w	r3, [sp]
    9cb8:	b10b      	cbz	r3, 9cbe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1cbe>
    9cba:	2222      	movs	r2, #34	; 0x22
    9cbc:	e007      	b.n	9cce <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1cce>
    9cbe:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
    9cc2:	b13b      	cbz	r3, 9cd4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1cd4>
    9cc4:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
    9cc8:	4293      	cmp	r3, r2
    9cca:	d309      	bcc.n	9ce0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1ce0>
    9ccc:	2208      	movs	r2, #8
    9cce:	f880 2095 	strb.w	r2, [r0, #149]	; 0x95
    9cd2:	e7b9      	b.n	9c48 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c48>
    9cd4:	f8b0 20a4 	ldrh.w	r2, [r0, #164]	; 0xa4
    9cd8:	2a06      	cmp	r2, #6
    9cda:	d301      	bcc.n	9ce0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1ce0>
    9cdc:	223e      	movs	r2, #62	; 0x3e
    9cde:	e7f6      	b.n	9cce <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1cce>
    9ce0:	f890 1094 	ldrb.w	r1, [r0, #148]	; 0x94
    9ce4:	f88d 1000 	strb.w	r1, [sp]
    9ce8:	9900      	ldr	r1, [sp, #0]
    9cea:	9100      	str	r1, [sp, #0]
    9cec:	f89d 1000 	ldrb.w	r1, [sp]
    9cf0:	b119      	cbz	r1, 9cfa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1cfa>
    9cf2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9cf6:	f004 bf2b 	b.w	eb50 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    9cfa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9cfe:	2100      	movs	r1, #0
    9d00:	f7fd bbfe 	b.w	7500 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    9d04:	20000134 	.word	0x20000134
    9d08:	b570      	push	{r4, r5, r6, lr}
    9d0a:	4d2d      	ldr	r5, [pc, #180]	; (9dc0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1dc0>)
    9d0c:	68a8      	ldr	r0, [r5, #8]
    9d0e:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    9d12:	b151      	cbz	r1, 9d2a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d2a>
    9d14:	2901      	cmp	r1, #1
    9d16:	d008      	beq.n	9d2a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d2a>
    9d18:	2902      	cmp	r1, #2
    9d1a:	d009      	beq.n	9d30 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d30>
    9d1c:	2903      	cmp	r1, #3
    9d1e:	d007      	beq.n	9d30 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d30>
    9d20:	f640 217f 	movw	r1, #2687	; 0xa7f
    9d24:	2031      	movs	r0, #49	; 0x31
    9d26:	f7fa f881 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9d2a:	f8b0 10fc 	ldrh.w	r1, [r0, #252]	; 0xfc
    9d2e:	e035      	b.n	9d9c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d9c>
    9d30:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
    9d34:	2908      	cmp	r1, #8
    9d36:	d034      	beq.n	9da2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1da2>
    9d38:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
    9d3c:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
    9d40:	2400      	movs	r4, #0
    9d42:	1c8b      	adds	r3, r1, #2
    9d44:	429a      	cmp	r2, r3
    9d46:	d306      	bcc.n	9d56 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d56>
    9d48:	1a51      	subs	r1, r2, r1
    9d4a:	1e89      	subs	r1, r1, #2
    9d4c:	040c      	lsls	r4, r1, #16
    9d4e:	0c24      	lsrs	r4, r4, #16
    9d50:	d001      	beq.n	9d56 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d56>
    9d52:	1e64      	subs	r4, r4, #1
    9d54:	b2a4      	uxth	r4, r4
    9d56:	f890 10a2 	ldrb.w	r1, [r0, #162]	; 0xa2
    9d5a:	b139      	cbz	r1, 9d6c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d6c>
    9d5c:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9d60:	2301      	movs	r3, #1
    9d62:	2109      	movs	r1, #9
    9d64:	3070      	adds	r0, #112	; 0x70
    9d66:	f003 fb5a 	bl	d41e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9d6a:	b330      	cbz	r0, 9dba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1dba>
    9d6c:	f7ff ff02 	bl	9b74 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b74>
    9d70:	b168      	cbz	r0, 9d8e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d8e>
    9d72:	68a9      	ldr	r1, [r5, #8]
    9d74:	2000      	movs	r0, #0
    9d76:	3198      	adds	r1, #152	; 0x98
    9d78:	c906      	ldmia	r1, {r1, r2}
    9d7a:	1c8b      	adds	r3, r1, #2
    9d7c:	429a      	cmp	r2, r3
    9d7e:	d303      	bcc.n	9d88 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d88>
    9d80:	1a50      	subs	r0, r2, r1
    9d82:	1e80      	subs	r0, r0, #2
    9d84:	d000      	beq.n	9d88 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d88>
    9d86:	1e40      	subs	r0, r0, #1
    9d88:	42a0      	cmp	r0, r4
    9d8a:	d200      	bcs.n	9d8e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d8e>
    9d8c:	b284      	uxth	r4, r0
    9d8e:	b10c      	cbz	r4, 9d94 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d94>
    9d90:	1e64      	subs	r4, r4, #1
    9d92:	b2a4      	uxth	r4, r4
    9d94:	68a8      	ldr	r0, [r5, #8]
    9d96:	f8b0 10fc 	ldrh.w	r1, [r0, #252]	; 0xfc
    9d9a:	4421      	add	r1, r4
    9d9c:	f8a0 10f8 	strh.w	r1, [r0, #248]	; 0xf8
    9da0:	bd70      	pop	{r4, r5, r6, pc}
    9da2:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
    9da6:	2903      	cmp	r1, #3
    9da8:	d3bf      	bcc.n	9d2a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d2a>
    9daa:	f830 1f74 	ldrh.w	r1, [r0, #116]!
    9dae:	8e42      	ldrh	r2, [r0, #50]	; 0x32
    9db0:	4411      	add	r1, r2
    9db2:	1c49      	adds	r1, r1, #1
    9db4:	f8a0 1084 	strh.w	r1, [r0, #132]	; 0x84
    9db8:	bd70      	pop	{r4, r5, r6, pc}
    9dba:	2400      	movs	r4, #0
    9dbc:	e7ea      	b.n	9d94 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d94>
    9dbe:	0000      	.short	0x0000
    9dc0:	20000134 	.word	0x20000134

00009dc4 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    9dc4:	4903      	ldr	r1, [pc, #12]	; (9dd4 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    9dc6:	884a      	ldrh	r2, [r1, #2]
    9dc8:	8002      	strh	r2, [r0, #0]
    9dca:	7809      	ldrb	r1, [r1, #0]
    9dcc:	7081      	strb	r1, [r0, #2]
    9dce:	2000      	movs	r0, #0
    9dd0:	4770      	bx	lr
    9dd2:	0000      	.short	0x0000
    9dd4:	200010e0 	.word	0x200010e0

00009dd8 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    9dd8:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    9dda:	460c      	mov	r4, r1
    9ddc:	4605      	mov	r5, r0
    9dde:	8800      	ldrh	r0, [r0, #0]
    9de0:	4669      	mov	r1, sp
    9de2:	f003 faf2 	bl	d3ca <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    9de6:	0001      	movs	r1, r0
    9de8:	f04f 0000 	mov.w	r0, #0
    9dec:	d005      	beq.n	9dfa <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x22>
    9dee:	f8c4 0002 	str.w	r0, [r4, #2]
    9df2:	71a0      	strb	r0, [r4, #6]
    9df4:	8020      	strh	r0, [r4, #0]
    9df6:	2002      	movs	r0, #2
    9df8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9dfa:	9901      	ldr	r1, [sp, #4]
    9dfc:	f111 0170 	adds.w	r1, r1, #112	; 0x70
    9e00:	f881 004e 	strb.w	r0, [r1, #78]	; 0x4e
    9e04:	f8d1 2016 	ldr.w	r2, [r1, #22]
    9e08:	f8c4 2002 	str.w	r2, [r4, #2]
    9e0c:	7e8a      	ldrb	r2, [r1, #26]
    9e0e:	71a2      	strb	r2, [r4, #6]
    9e10:	882a      	ldrh	r2, [r5, #0]
    9e12:	8022      	strh	r2, [r4, #0]
    9e14:	f891 204e 	ldrb.w	r2, [r1, #78]	; 0x4e
    9e18:	f88d 2008 	strb.w	r2, [sp, #8]
    9e1c:	9a02      	ldr	r2, [sp, #8]
    9e1e:	9202      	str	r2, [sp, #8]
    9e20:	f89d 2008 	ldrb.w	r2, [sp, #8]
    9e24:	2a00      	cmp	r2, #0
    9e26:	d1eb      	bne.n	9e00 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x28>
    9e28:	2000      	movs	r0, #0
    9e2a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00009e2c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    9e2c:	b51c      	push	{r2, r3, r4, lr}
    9e2e:	8800      	ldrh	r0, [r0, #0]
    9e30:	4669      	mov	r1, sp
    9e32:	f003 faca 	bl	d3ca <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    9e36:	2800      	cmp	r0, #0
    9e38:	d10b      	bne.n	9e52 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x26>
    9e3a:	480b      	ldr	r0, [pc, #44]	; (9e68 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x3c>)
    9e3c:	7800      	ldrb	r0, [r0, #0]
    9e3e:	b188      	cbz	r0, 9e64 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x38>
    9e40:	9801      	ldr	r0, [sp, #4]
    9e42:	f005 fda3 	bl	f98c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x312>
    9e46:	b128      	cbz	r0, 9e54 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x28>
    9e48:	9801      	ldr	r0, [sp, #4]
    9e4a:	f890 01b5 	ldrb.w	r0, [r0, #437]	; 0x1b5
    9e4e:	b118      	cbz	r0, 9e58 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    9e50:	203a      	movs	r0, #58	; 0x3a
    9e52:	bd1c      	pop	{r2, r3, r4, pc}
    9e54:	2002      	movs	r0, #2
    9e56:	bd1c      	pop	{r2, r3, r4, pc}
    9e58:	9901      	ldr	r1, [sp, #4]
    9e5a:	2001      	movs	r0, #1
    9e5c:	f881 01b5 	strb.w	r0, [r1, #437]	; 0x1b5
    9e60:	2000      	movs	r0, #0
    9e62:	bd1c      	pop	{r2, r3, r4, pc}
    9e64:	2011      	movs	r0, #17
    9e66:	bd1c      	pop	{r2, r3, r4, pc}
    9e68:	20000210 	.word	0x20000210

00009e6c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    9e6c:	b510      	push	{r4, lr}
    9e6e:	4604      	mov	r4, r0
    9e70:	f005 fd83 	bl	f97a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    9e74:	b130      	cbz	r0, 9e84 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
    9e76:	4804      	ldr	r0, [pc, #16]	; (9e88 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
    9e78:	8881      	ldrh	r1, [r0, #4]
    9e7a:	8021      	strh	r1, [r4, #0]
    9e7c:	88c0      	ldrh	r0, [r0, #6]
    9e7e:	8060      	strh	r0, [r4, #2]
    9e80:	2000      	movs	r0, #0
    9e82:	bd10      	pop	{r4, pc}
    9e84:	2001      	movs	r0, #1
    9e86:	bd10      	pop	{r4, pc}
    9e88:	20000218 	.word	0x20000218

00009e8c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    9e8c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    9e8e:	4605      	mov	r5, r0
    9e90:	f000 fb04 	bl	a49c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9e94:	f3c0 2000 	ubfx	r0, r0, #8, #1
    9e98:	b310      	cbz	r0, 9ee0 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
    9e9a:	2400      	movs	r4, #0
    9e9c:	a802      	add	r0, sp, #8
    9e9e:	f88d 4004 	strb.w	r4, [sp, #4]
    9ea2:	f88d 4008 	strb.w	r4, [sp, #8]
    9ea6:	9000      	str	r0, [sp, #0]
    9ea8:	78aa      	ldrb	r2, [r5, #2]
    9eaa:	7869      	ldrb	r1, [r5, #1]
    9eac:	7828      	ldrb	r0, [r5, #0]
    9eae:	ab01      	add	r3, sp, #4
    9eb0:	f005 fdc4 	bl	fa3c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3c2>
    9eb4:	2800      	cmp	r0, #0
    9eb6:	d112      	bne.n	9ede <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x52>
    9eb8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9ebc:	f005 fcc5 	bl	f84a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    9ec0:	b180      	cbz	r0, 9ee4 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    9ec2:	f89d 0008 	ldrb.w	r0, [sp, #8]
    9ec6:	f005 fcc0 	bl	f84a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    9eca:	b158      	cbz	r0, 9ee4 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    9ecc:	4806      	ldr	r0, [pc, #24]	; (9ee8 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5c>)
    9ece:	f89d 1004 	ldrb.w	r1, [sp, #4]
    9ed2:	7381      	strb	r1, [r0, #14]
    9ed4:	f89d 1008 	ldrb.w	r1, [sp, #8]
    9ed8:	73c1      	strb	r1, [r0, #15]
    9eda:	8204      	strh	r4, [r0, #16]
    9edc:	2000      	movs	r0, #0
    9ede:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9ee0:	2001      	movs	r0, #1
    9ee2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9ee4:	2011      	movs	r0, #17
    9ee6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9ee8:	200010e0 	.word	0x200010e0

00009eec <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    9eec:	7801      	ldrb	r1, [r0, #0]
    9eee:	b171      	cbz	r1, 9f0e <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    9ef0:	7841      	ldrb	r1, [r0, #1]
    9ef2:	b161      	cbz	r1, 9f0e <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    9ef4:	8841      	ldrh	r1, [r0, #2]
    9ef6:	291b      	cmp	r1, #27
    9ef8:	d309      	bcc.n	9f0e <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    9efa:	8881      	ldrh	r1, [r0, #4]
    9efc:	291b      	cmp	r1, #27
    9efe:	d306      	bcc.n	9f0e <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    9f00:	4904      	ldr	r1, [pc, #16]	; (9f14 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    9f02:	6802      	ldr	r2, [r0, #0]
    9f04:	600a      	str	r2, [r1, #0]
    9f06:	8880      	ldrh	r0, [r0, #4]
    9f08:	8088      	strh	r0, [r1, #4]
    9f0a:	2000      	movs	r0, #0
    9f0c:	4770      	bx	lr
    9f0e:	2012      	movs	r0, #18
    9f10:	4770      	bx	lr
    9f12:	0000      	.short	0x0000
    9f14:	200010e0 	.word	0x200010e0

00009f18 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    9f18:	6800      	ldr	r0, [r0, #0]
    9f1a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    9f1e:	4288      	cmp	r0, r1
    9f20:	d303      	bcc.n	9f2a <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    9f22:	4903      	ldr	r1, [pc, #12]	; (9f30 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    9f24:	6088      	str	r0, [r1, #8]
    9f26:	2000      	movs	r0, #0
    9f28:	4770      	bx	lr
    9f2a:	2012      	movs	r0, #18
    9f2c:	4770      	bx	lr
    9f2e:	0000      	.short	0x0000
    9f30:	200010e0 	.word	0x200010e0

00009f34 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    9f34:	4a03      	ldr	r2, [pc, #12]	; (9f44 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    9f36:	e9d2 1200 	ldrd	r1, r2, [r2]
    9f3a:	6001      	str	r1, [r0, #0]
    9f3c:	6042      	str	r2, [r0, #4]
    9f3e:	2000      	movs	r0, #0
    9f40:	4770      	bx	lr
    9f42:	0000      	.short	0x0000
    9f44:	0000a378 	.word	0x0000a378

00009f48 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
    9f48:	b510      	push	{r4, lr}
    9f4a:	2005      	movs	r0, #5
    9f4c:	f000 fa9c 	bl	a488 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    9f50:	f7fd fe52 	bl	7bf8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    9f54:	4902      	ldr	r1, [pc, #8]	; (9f60 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
    9f56:	4801      	ldr	r0, [pc, #4]	; (9f5c <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x14>)
    9f58:	6048      	str	r0, [r1, #4]
    9f5a:	bd10      	pop	{r4, pc}
    9f5c:	00009fb9 	.word	0x00009fb9
    9f60:	20000210 	.word	0x20000210

00009f64 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    9f64:	b510      	push	{r4, lr}
    9f66:	f003 f984 	bl	d272 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    9f6a:	f7fb fc6f 	bl	584c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    9f6e:	f000 faa5 	bl	a4bc <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    9f72:	f003 fe2c 	bl	dbce <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
    9f76:	480e      	ldr	r0, [pc, #56]	; (9fb0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4c>)
    9f78:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9f7c:	4b0d      	ldr	r3, [pc, #52]	; (9fb4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x50>)
    9f7e:	8281      	strh	r1, [r0, #20]
    9f80:	2100      	movs	r1, #0
    9f82:	7581      	strb	r1, [r0, #22]
    9f84:	8301      	strh	r1, [r0, #24]
    9f86:	221b      	movs	r2, #27
    9f88:	801a      	strh	r2, [r3, #0]
    9f8a:	f44f 74a4 	mov.w	r4, #328	; 0x148
    9f8e:	805c      	strh	r4, [r3, #2]
    9f90:	809a      	strh	r2, [r3, #4]
    9f92:	80dc      	strh	r4, [r3, #6]
    9f94:	7381      	strb	r1, [r0, #14]
    9f96:	73c1      	strb	r1, [r0, #15]
    9f98:	2303      	movs	r3, #3
    9f9a:	7003      	strb	r3, [r0, #0]
    9f9c:	2302      	movs	r3, #2
    9f9e:	7043      	strb	r3, [r0, #1]
    9fa0:	8042      	strh	r2, [r0, #2]
    9fa2:	8082      	strh	r2, [r0, #4]
    9fa4:	f640 62a6 	movw	r2, #3750	; 0xea6
    9fa8:	6082      	str	r2, [r0, #8]
    9faa:	7481      	strb	r1, [r0, #18]
    9fac:	7301      	strb	r1, [r0, #12]
    9fae:	bd10      	pop	{r4, pc}
    9fb0:	200010e0 	.word	0x200010e0
    9fb4:	20000218 	.word	0x20000218
    9fb8:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9fbc:	4692      	mov	sl, r2
    9fbe:	460f      	mov	r7, r1
    9fc0:	4681      	mov	r9, r0
    9fc2:	f005 fcda 	bl	f97a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    9fc6:	2800      	cmp	r0, #0
    9fc8:	d063      	beq.n	a092 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    9fca:	4933      	ldr	r1, [pc, #204]	; (a098 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x134>)
    9fcc:	f8b9 2054 	ldrh.w	r2, [r9, #84]	; 0x54
    9fd0:	f8b9 6052 	ldrh.w	r6, [r9, #82]	; 0x52
    9fd4:	8808      	ldrh	r0, [r1, #0]
    9fd6:	4290      	cmp	r0, r2
    9fd8:	d300      	bcc.n	9fdc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x78>
    9fda:	4610      	mov	r0, r2
    9fdc:	4680      	mov	r8, r0
    9fde:	8888      	ldrh	r0, [r1, #4]
    9fe0:	42b0      	cmp	r0, r6
    9fe2:	d200      	bcs.n	9fe6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x82>
    9fe4:	4606      	mov	r6, r0
    9fe6:	884c      	ldrh	r4, [r1, #2]
    9fe8:	f640 0048 	movw	r0, #2120	; 0x848
    9fec:	4284      	cmp	r4, r0
    9fee:	d300      	bcc.n	9ff2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x8e>
    9ff0:	4604      	mov	r4, r0
    9ff2:	88cd      	ldrh	r5, [r1, #6]
    9ff4:	4285      	cmp	r5, r0
    9ff6:	d300      	bcc.n	9ffa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x96>
    9ff8:	4605      	mov	r5, r0
    9ffa:	4284      	cmp	r4, r0
    9ffc:	d300      	bcc.n	a000 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    9ffe:	4604      	mov	r4, r0
    a000:	f44f 71a4 	mov.w	r1, #328	; 0x148
    a004:	2e1b      	cmp	r6, #27
    a006:	d001      	beq.n	a00c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa8>
    a008:	428d      	cmp	r5, r1
    a00a:	d104      	bne.n	a016 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb2>
    a00c:	f1b8 0f1b 	cmp.w	r8, #27
    a010:	d03f      	beq.n	a092 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    a012:	428c      	cmp	r4, r1
    a014:	d03d      	beq.n	a092 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    a016:	466a      	mov	r2, sp
    a018:	4651      	mov	r1, sl
    a01a:	4648      	mov	r0, r9
    a01c:	f005 fc38 	bl	f890 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
    a020:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    a024:	4641      	mov	r1, r8
    a026:	4540      	cmp	r0, r8
    a028:	d900      	bls.n	a02c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xc8>
    a02a:	4608      	mov	r0, r1
    a02c:	80f8      	strh	r0, [r7, #6]
    a02e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    a032:	42a1      	cmp	r1, r4
    a034:	d800      	bhi.n	a038 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd4>
    a036:	460c      	mov	r4, r1
    a038:	813c      	strh	r4, [r7, #8]
    a03a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    a03e:	42b1      	cmp	r1, r6
    a040:	d800      	bhi.n	a044 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe0>
    a042:	460e      	mov	r6, r1
    a044:	807e      	strh	r6, [r7, #2]
    a046:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    a04a:	42a9      	cmp	r1, r5
    a04c:	d900      	bls.n	a050 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xec>
    a04e:	4629      	mov	r1, r5
    a050:	80b9      	strh	r1, [r7, #4]
    a052:	2201      	movs	r2, #1
    a054:	703a      	strb	r2, [r7, #0]
    a056:	381b      	subs	r0, #27
    a058:	28e0      	cmp	r0, #224	; 0xe0
    a05a:	d902      	bls.n	a062 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xfe>
    a05c:	f44f 6148 	mov.w	r1, #3200	; 0xc80
    a060:	e014      	b.n	a08c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x128>
    a062:	3e1b      	subs	r6, #27
    a064:	2ee0      	cmp	r6, #224	; 0xe0
    a066:	d902      	bls.n	a06e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x10a>
    a068:	f640 4182 	movw	r1, #3202	; 0xc82
    a06c:	e00e      	b.n	a08c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x128>
    a06e:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    a072:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    a076:	4284      	cmp	r4, r0
    a078:	d902      	bls.n	a080 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x11c>
    a07a:	f640 4184 	movw	r1, #3204	; 0xc84
    a07e:	e005      	b.n	a08c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x128>
    a080:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
    a084:	4281      	cmp	r1, r0
    a086:	d904      	bls.n	a092 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    a088:	f640 4186 	movw	r1, #3206	; 0xc86
    a08c:	2039      	movs	r0, #57	; 0x39
    a08e:	f7f9 fecd 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a092:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a096:	0000      	.short	0x0000
    a098:	20000218 	.word	0x20000218

0000a09c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    a09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a0a0:	b088      	sub	sp, #32
    a0a2:	460c      	mov	r4, r1
    a0a4:	4606      	mov	r6, r0
    a0a6:	f003 ffb5 	bl	e014 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    a0aa:	b198      	cbz	r0, a0d4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    a0ac:	4630      	mov	r0, r6
    a0ae:	f003 ffa4 	bl	dffa <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    a0b2:	b130      	cbz	r0, a0c2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
    a0b4:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    a0b8:	2012      	movs	r0, #18
    a0ba:	2900      	cmp	r1, #0
    a0bc:	d00b      	beq.n	a0d6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a0be:	2980      	cmp	r1, #128	; 0x80
    a0c0:	d809      	bhi.n	a0d6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a0c2:	4630      	mov	r0, r6
    a0c4:	f003 ff88 	bl	dfd8 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    a0c8:	b140      	cbz	r0, a0dc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    a0ca:	4630      	mov	r0, r6
    a0cc:	f003 ff00 	bl	ded0 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    a0d0:	b130      	cbz	r0, a0e0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x44>
    a0d2:	e009      	b.n	a0e8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4c>
    a0d4:	2042      	movs	r0, #66	; 0x42
    a0d6:	b008      	add	sp, #32
    a0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a0dc:	200c      	movs	r0, #12
    a0de:	e7fa      	b.n	a0d6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a0e0:	4630      	mov	r0, r6
    a0e2:	f003 ff84 	bl	dfee <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    a0e6:	b3a8      	cbz	r0, a154 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xb8>
    a0e8:	4630      	mov	r0, r6
    a0ea:	f004 f95b 	bl	e3a4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    a0ee:	2800      	cmp	r0, #0
    a0f0:	d1f4      	bne.n	a0dc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    a0f2:	4630      	mov	r0, r6
    a0f4:	f003 ff07 	bl	df06 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    a0f8:	2800      	cmp	r0, #0
    a0fa:	d1ef      	bne.n	a0dc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    a0fc:	4630      	mov	r0, r6
    a0fe:	f7fc f9d7 	bl	64b0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    a102:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    a106:	f242 7110 	movw	r1, #10000	; 0x2710
    a10a:	fb00 f801 	mul.w	r8, r0, r1
    a10e:	78e1      	ldrb	r1, [r4, #3]
    a110:	4630      	mov	r0, r6
    a112:	f003 ff58 	bl	dfc6 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    a116:	4630      	mov	r0, r6
    a118:	f003 ff6b 	bl	dff2 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    a11c:	b1e8      	cbz	r0, a15a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xbe>
    a11e:	2200      	movs	r2, #0
    a120:	4611      	mov	r1, r2
    a122:	a801      	add	r0, sp, #4
    a124:	f7fa f8e0 	bl	42e8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    a128:	0004      	movs	r4, r0
    a12a:	d06a      	beq.n	a202 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    a12c:	2100      	movs	r1, #0
    a12e:	f7fb fdbb 	bl	5ca8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    a132:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    a136:	8020      	strh	r0, [r4, #0]
    a138:	4621      	mov	r1, r4
    a13a:	4630      	mov	r0, r6
    a13c:	f003 ff7d 	bl	e03a <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    a140:	f005 fc1b 	bl	f97a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    a144:	4d3a      	ldr	r5, [pc, #232]	; (a230 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x194>)
    a146:	2800      	cmp	r0, #0
    a148:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    a14c:	d00f      	beq.n	a16e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd2>
    a14e:	886a      	ldrh	r2, [r5, #2]
    a150:	88a9      	ldrh	r1, [r5, #4]
    a152:	e00e      	b.n	a172 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd6>
    a154:	e7ff      	b.n	a156 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xba>
    a156:	2012      	movs	r0, #18
    a158:	e7bd      	b.n	a0d6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a15a:	4642      	mov	r2, r8
    a15c:	2100      	movs	r1, #0
    a15e:	4630      	mov	r0, r6
    a160:	f7fd f8f0 	bl	7344 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    a164:	2800      	cmp	r0, #0
    a166:	d0b6      	beq.n	a0d6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a168:	f241 414c 	movw	r1, #5196	; 0x144c
    a16c:	e053      	b.n	a216 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    a16e:	221b      	movs	r2, #27
    a170:	4611      	mov	r1, r2
    a172:	84c2      	strh	r2, [r0, #38]	; 0x26
    a174:	8501      	strh	r1, [r0, #40]	; 0x28
    a176:	68a8      	ldr	r0, [r5, #8]
    a178:	62e0      	str	r0, [r4, #44]	; 0x2c
    a17a:	f641 574c 	movw	r7, #7500	; 0x1d4c
    a17e:	4630      	mov	r0, r6
    a180:	f003 ff3f 	bl	e002 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    a184:	b910      	cbnz	r0, a18c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xf0>
    a186:	4630      	mov	r0, r6
    a188:	f003 ff55 	bl	e036 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    a18c:	60e7      	str	r7, [r4, #12]
    a18e:	8821      	ldrh	r1, [r4, #0]
    a190:	f8ad 1008 	strh.w	r1, [sp, #8]
    a194:	7ba9      	ldrb	r1, [r5, #14]
    a196:	f88d 100a 	strb.w	r1, [sp, #10]
    a19a:	7be9      	ldrb	r1, [r5, #15]
    a19c:	f88d 100b 	strb.w	r1, [sp, #11]
    a1a0:	8a29      	ldrh	r1, [r5, #16]
    a1a2:	f8ad 100c 	strh.w	r1, [sp, #12]
    a1a6:	a905      	add	r1, sp, #20
    a1a8:	9100      	str	r1, [sp, #0]
    a1aa:	2001      	movs	r0, #1
    a1ac:	ab04      	add	r3, sp, #16
    a1ae:	aa02      	add	r2, sp, #8
    a1b0:	4621      	mov	r1, r4
    a1b2:	f005 fba3 	bl	f8fc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x282>
    a1b6:	b140      	cbz	r0, a1ca <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x12e>
    a1b8:	2100      	movs	r1, #0
    a1ba:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    a1be:	f7fa f8bd 	bl	433c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    a1c2:	b1f0      	cbz	r0, a202 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    a1c4:	f241 4198 	movw	r1, #5272	; 0x1498
    a1c8:	e025      	b.n	a216 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    a1ca:	f89d 0010 	ldrb.w	r0, [sp, #16]
    a1ce:	f88d 0018 	strb.w	r0, [sp, #24]
    a1d2:	f89d 0014 	ldrb.w	r0, [sp, #20]
    a1d6:	f88d 0019 	strb.w	r0, [sp, #25]
    a1da:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    a1de:	f8ad 001a 	strh.w	r0, [sp, #26]
    a1e2:	a906      	add	r1, sp, #24
    a1e4:	4620      	mov	r0, r4
    a1e6:	f003 f9af 	bl	d548 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    a1ea:	7868      	ldrb	r0, [r5, #1]
    a1ec:	9000      	str	r0, [sp, #0]
    a1ee:	782b      	ldrb	r3, [r5, #0]
    a1f0:	88aa      	ldrh	r2, [r5, #4]
    a1f2:	8869      	ldrh	r1, [r5, #2]
    a1f4:	8820      	ldrh	r0, [r4, #0]
    a1f6:	f7fa f96d 	bl	44d4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    a1fa:	b120      	cbz	r0, a206 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16a>
    a1fc:	f241 41a3 	movw	r1, #5283	; 0x14a3
    a200:	e009      	b.n	a216 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    a202:	2009      	movs	r0, #9
    a204:	e767      	b.n	a0d6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a206:	4642      	mov	r2, r8
    a208:	4621      	mov	r1, r4
    a20a:	4630      	mov	r0, r6
    a20c:	f7fd f89a 	bl	7344 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    a210:	b120      	cbz	r0, a21c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    a212:	f241 41a5 	movw	r1, #5285	; 0x14a5
    a216:	2039      	movs	r0, #57	; 0x39
    a218:	f7f9 fe08 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a21c:	4805      	ldr	r0, [pc, #20]	; (a234 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x198>)
    a21e:	6843      	ldr	r3, [r0, #4]
    a220:	b123      	cbz	r3, a22c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x190>
    a222:	2200      	movs	r2, #0
    a224:	f504 71d2 	add.w	r1, r4, #420	; 0x1a4
    a228:	4620      	mov	r0, r4
    a22a:	4798      	blx	r3
    a22c:	2000      	movs	r0, #0
    a22e:	e752      	b.n	a0d6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a230:	200010e0 	.word	0x200010e0
    a234:	20000210 	.word	0x20000210
    a238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a23c:	b088      	sub	sp, #32
    a23e:	4604      	mov	r4, r0
    a240:	8800      	ldrh	r0, [r0, #0]
    a242:	a906      	add	r1, sp, #24
    a244:	f003 f8c1 	bl	d3ca <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a248:	2800      	cmp	r0, #0
    a24a:	d147      	bne.n	a2dc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a24c:	9807      	ldr	r0, [sp, #28]
    a24e:	2700      	movs	r7, #0
    a250:	f890 11e8 	ldrb.w	r1, [r0, #488]	; 0x1e8
    a254:	f88d 1008 	strb.w	r1, [sp, #8]
    a258:	9902      	ldr	r1, [sp, #8]
    a25a:	9102      	str	r1, [sp, #8]
    a25c:	f89d 1008 	ldrb.w	r1, [sp, #8]
    a260:	f88d 100c 	strb.w	r1, [sp, #12]
    a264:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    a268:	3070      	adds	r0, #112	; 0x70
    a26a:	0689      	lsls	r1, r1, #26
    a26c:	d502      	bpl.n	a274 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d8>
    a26e:	f89d 100c 	ldrb.w	r1, [sp, #12]
    a272:	b149      	cbz	r1, a288 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>
    a274:	f05f 0100 	movs.w	r1, #0
    a278:	f88d 1004 	strb.w	r1, [sp, #4]
    a27c:	2105      	movs	r1, #5
    a27e:	304c      	adds	r0, #76	; 0x4c
    a280:	f004 fca2 	bl	ebc8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    a284:	b110      	cbz	r0, a28c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f0>
    a286:	e004      	b.n	a292 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f6>
    a288:	2101      	movs	r1, #1
    a28a:	e7f5      	b.n	a278 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1dc>
    a28c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a290:	b318      	cbz	r0, a2da <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x23e>
    a292:	8921      	ldrh	r1, [r4, #8]
    a294:	88e0      	ldrh	r0, [r4, #6]
    a296:	f005 faed 	bl	f874 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    a29a:	2800      	cmp	r0, #0
    a29c:	d11e      	bne.n	a2dc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a29e:	88a1      	ldrh	r1, [r4, #4]
    a2a0:	8860      	ldrh	r0, [r4, #2]
    a2a2:	f005 fae7 	bl	f874 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    a2a6:	2800      	cmp	r0, #0
    a2a8:	d118      	bne.n	a2dc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a2aa:	8921      	ldrh	r1, [r4, #8]
    a2ac:	88e0      	ldrh	r0, [r4, #6]
    a2ae:	f005 fad7 	bl	f860 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e6>
    a2b2:	2800      	cmp	r0, #0
    a2b4:	d112      	bne.n	a2dc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a2b6:	88a1      	ldrh	r1, [r4, #4]
    a2b8:	8860      	ldrh	r0, [r4, #2]
    a2ba:	f005 fad1 	bl	f860 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e6>
    a2be:	0006      	movs	r6, r0
    a2c0:	d10c      	bne.n	a2dc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a2c2:	9807      	ldr	r0, [sp, #28]
    a2c4:	f500 75d2 	add.w	r5, r0, #420	; 0x1a4
    a2c8:	f04f 0801 	mov.w	r8, #1
    a2cc:	f885 8001 	strb.w	r8, [r5, #1]
    a2d0:	f89d 100c 	ldrb.w	r1, [sp, #12]
    a2d4:	b129      	cbz	r1, a2e2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x246>
    a2d6:	263a      	movs	r6, #58	; 0x3a
    a2d8:	e02f      	b.n	a33a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x29e>
    a2da:	201a      	movs	r0, #26
    a2dc:	b008      	add	sp, #32
    a2de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a2e2:	4639      	mov	r1, r7
    a2e4:	aa03      	add	r2, sp, #12
    a2e6:	f005 fad3 	bl	f890 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
    a2ea:	8861      	ldrh	r1, [r4, #2]
    a2ec:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    a2f0:	4281      	cmp	r1, r0
    a2f2:	d200      	bcs.n	a2f6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x25a>
    a2f4:	4608      	mov	r0, r1
    a2f6:	80e8      	strh	r0, [r5, #6]
    a2f8:	88a1      	ldrh	r1, [r4, #4]
    a2fa:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    a2fe:	4281      	cmp	r1, r0
    a300:	d200      	bcs.n	a304 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x268>
    a302:	4608      	mov	r0, r1
    a304:	8128      	strh	r0, [r5, #8]
    a306:	88e2      	ldrh	r2, [r4, #6]
    a308:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    a30c:	428a      	cmp	r2, r1
    a30e:	d200      	bcs.n	a312 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x276>
    a310:	4611      	mov	r1, r2
    a312:	8069      	strh	r1, [r5, #2]
    a314:	8922      	ldrh	r2, [r4, #8]
    a316:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    a31a:	428a      	cmp	r2, r1
    a31c:	d200      	bcs.n	a320 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x284>
    a31e:	4611      	mov	r1, r2
    a320:	f640 0248 	movw	r2, #2120	; 0x848
    a324:	80a9      	strh	r1, [r5, #4]
    a326:	4291      	cmp	r1, r2
    a328:	d300      	bcc.n	a32c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x290>
    a32a:	4611      	mov	r1, r2
    a32c:	80a9      	strh	r1, [r5, #4]
    a32e:	4290      	cmp	r0, r2
    a330:	d200      	bcs.n	a334 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x298>
    a332:	4602      	mov	r2, r0
    a334:	812a      	strh	r2, [r5, #8]
    a336:	f885 8000 	strb.w	r8, [r5]
    a33a:	706f      	strb	r7, [r5, #1]
    a33c:	4630      	mov	r0, r6
    a33e:	e7cd      	b.n	a2dc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a340:	b510      	push	{r4, lr}
    a342:	4604      	mov	r4, r0
    a344:	88c1      	ldrh	r1, [r0, #6]
    a346:	8880      	ldrh	r0, [r0, #4]
    a348:	f005 fa94 	bl	f874 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    a34c:	2800      	cmp	r0, #0
    a34e:	d10f      	bne.n	a370 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d4>
    a350:	8861      	ldrh	r1, [r4, #2]
    a352:	8820      	ldrh	r0, [r4, #0]
    a354:	f005 fa8e 	bl	f874 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    a358:	2800      	cmp	r0, #0
    a35a:	d109      	bne.n	a370 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d4>
    a35c:	4805      	ldr	r0, [pc, #20]	; (a374 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d8>)
    a35e:	88a1      	ldrh	r1, [r4, #4]
    a360:	8081      	strh	r1, [r0, #4]
    a362:	8821      	ldrh	r1, [r4, #0]
    a364:	8001      	strh	r1, [r0, #0]
    a366:	88e1      	ldrh	r1, [r4, #6]
    a368:	80c1      	strh	r1, [r0, #6]
    a36a:	8861      	ldrh	r1, [r4, #2]
    a36c:	8041      	strh	r1, [r0, #2]
    a36e:	2000      	movs	r0, #0
    a370:	bd10      	pop	{r4, pc}
    a372:	0000      	.short	0x0000
    a374:	20000218 	.word	0x20000218
    a378:	0b12fe0b 	.word	0x0b12fe0b
    a37c:	12fe0059 	.word	0x12fe0059
    a380:	05060708 	.word	0x05060708
    a384:	00020304 	.word	0x00020304
    a388:	f0f4f8fc 	.word	0xf0f4f8fc
    a38c:	0304d8ec 	.word	0x0304d8ec
    a390:	f4f8fc00 	.word	0xf4f8fc00
    a394:	00d8ecf0 	.word	0x00d8ecf0

0000a398 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    a398:	b510      	push	{r4, lr}
    a39a:	f7fb fecd 	bl	6138 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    a39e:	4804      	ldr	r0, [pc, #16]	; (a3b0 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x18>)
    a3a0:	6840      	ldr	r0, [r0, #4]
    a3a2:	f005 fbc3 	bl	fb2c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    a3a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a3aa:	f005 b8ff 	b.w	f5ac <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    a3ae:	0000      	.short	0x0000
    a3b0:	20000220 	.word	0x20000220

0000a3b4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    a3b4:	b510      	push	{r4, lr}
    a3b6:	4c07      	ldr	r4, [pc, #28]	; (a3d4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
    a3b8:	68a0      	ldr	r0, [r4, #8]
    a3ba:	f005 fbb7 	bl	fb2c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    a3be:	68e0      	ldr	r0, [r4, #12]
    a3c0:	f005 fbb4 	bl	fb2c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    a3c4:	f002 ff55 	bl	d272 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    a3c8:	f7fb fa40 	bl	584c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    a3cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a3d0:	f7ff bdc8 	b.w	9f64 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    a3d4:	20000220 	.word	0x20000220

0000a3d8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    a3d8:	b500      	push	{lr}
    a3da:	4905      	ldr	r1, [pc, #20]	; (a3f0 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    a3dc:	4805      	ldr	r0, [pc, #20]	; (a3f4 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    a3de:	f005 fb86 	bl	faee <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a3e2:	4804      	ldr	r0, [pc, #16]	; (a3f4 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    a3e4:	4904      	ldr	r1, [pc, #16]	; (a3f8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    a3e6:	1d00      	adds	r0, r0, #4
    a3e8:	f85d eb04 	ldr.w	lr, [sp], #4
    a3ec:	f005 bb7f 	b.w	faee <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a3f0:	20000230 	.word	0x20000230
    a3f4:	20000224 	.word	0x20000224
    a3f8:	20000238 	.word	0x20000238

0000a3fc <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    a3fc:	b500      	push	{lr}
    a3fe:	4908      	ldr	r1, [pc, #32]	; (a420 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    a400:	4808      	ldr	r0, [pc, #32]	; (a424 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a402:	f005 fb74 	bl	faee <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a406:	4807      	ldr	r0, [pc, #28]	; (a424 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a408:	4907      	ldr	r1, [pc, #28]	; (a428 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    a40a:	1d00      	adds	r0, r0, #4
    a40c:	f005 fb6f 	bl	faee <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a410:	4804      	ldr	r0, [pc, #16]	; (a424 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a412:	4906      	ldr	r1, [pc, #24]	; (a42c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    a414:	3008      	adds	r0, #8
    a416:	f85d eb04 	ldr.w	lr, [sp], #4
    a41a:	f005 bb68 	b.w	faee <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a41e:	0000      	.short	0x0000
    a420:	20000248 	.word	0x20000248
    a424:	20000224 	.word	0x20000224
    a428:	20000250 	.word	0x20000250
    a42c:	20000240 	.word	0x20000240

0000a430 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    a430:	4801      	ldr	r0, [pc, #4]	; (a438 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    a432:	7800      	ldrb	r0, [r0, #0]
    a434:	4770      	bx	lr
    a436:	0000      	.short	0x0000
    a438:	20000220 	.word	0x20000220
    a43c:	b510      	push	{r4, lr}
    a43e:	f7fc f9a9 	bl	6794 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    a442:	f7fd f80f 	bl	7464 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    a446:	4803      	ldr	r0, [pc, #12]	; (a454 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x24>)
    a448:	f7fc f98a 	bl	6760 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    a44c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a450:	f7fb be7e 	b.w	6150 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>
    a454:	20001569 	.word	0x20001569
    a458:	4909      	ldr	r1, [pc, #36]	; (a480 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x50>)
    a45a:	b510      	push	{r4, lr}
    a45c:	2001      	movs	r0, #1
    a45e:	7008      	strb	r0, [r1, #0]
    a460:	f7fc f9c8 	bl	67f4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    a464:	f7fd fd20 	bl	7ea8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    a468:	f002 fef1 	bl	d24e <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    a46c:	4805      	ldr	r0, [pc, #20]	; (a484 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x54>)
    a46e:	f7fa fc53 	bl	4d18 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    a472:	2000      	movs	r0, #0
    a474:	f7f9 fea8 	bl	41c8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    a478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a47c:	f7fb be70 	b.w	6160 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>
    a480:	20000220 	.word	0x20000220
    a484:	20001569 	.word	0x20001569

0000a488 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    a488:	2101      	movs	r1, #1
    a48a:	4081      	lsls	r1, r0
    a48c:	4802      	ldr	r0, [pc, #8]	; (a498 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x10>)
    a48e:	6802      	ldr	r2, [r0, #0]
    a490:	4311      	orrs	r1, r2
    a492:	6001      	str	r1, [r0, #0]
    a494:	4770      	bx	lr
    a496:	0000      	.short	0x0000
    a498:	20000258 	.word	0x20000258

0000a49c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    a49c:	4801      	ldr	r0, [pc, #4]	; (a4a4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    a49e:	6800      	ldr	r0, [r0, #0]
    a4a0:	4770      	bx	lr
    a4a2:	0000      	.short	0x0000
    a4a4:	20000258 	.word	0x20000258

0000a4a8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    a4a8:	4803      	ldr	r0, [pc, #12]	; (a4b8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x10>)
    a4aa:	8800      	ldrh	r0, [r0, #0]
    a4ac:	f3c0 2000 	ubfx	r0, r0, #8, #1
    a4b0:	0040      	lsls	r0, r0, #1
    a4b2:	1c40      	adds	r0, r0, #1
    a4b4:	4770      	bx	lr
    a4b6:	0000      	.short	0x0000
    a4b8:	20000258 	.word	0x20000258

0000a4bc <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    a4bc:	b510      	push	{r4, lr}
    a4be:	f7f9 f911 	bl	36e4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    a4c2:	2200      	movs	r2, #0
    a4c4:	4b08      	ldr	r3, [pc, #32]	; (a4e8 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    a4c6:	4611      	mov	r1, r2
    a4c8:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    a4cc:	4284      	cmp	r4, r0
    a4ce:	d303      	bcc.n	a4d8 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    a4d0:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    a4d4:	7882      	ldrb	r2, [r0, #2]
    a4d6:	e003      	b.n	a4e0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    a4d8:	1c49      	adds	r1, r1, #1
    a4da:	b2c9      	uxtb	r1, r1
    a4dc:	290c      	cmp	r1, #12
    a4de:	d3f3      	bcc.n	a4c8 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    a4e0:	4802      	ldr	r0, [pc, #8]	; (a4ec <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    a4e2:	7002      	strb	r2, [r0, #0]
    a4e4:	bd10      	pop	{r4, pc}
    a4e6:	0000      	.short	0x0000
    a4e8:	0000fb7c 	.word	0x0000fb7c
    a4ec:	200002a7 	.word	0x200002a7

0000a4f0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    a4f0:	b570      	push	{r4, r5, r6, lr}
    a4f2:	4605      	mov	r5, r0
    a4f4:	4616      	mov	r6, r2
    a4f6:	460c      	mov	r4, r1
    a4f8:	2002      	movs	r0, #2
    a4fa:	f000 f9f9 	bl	a8f0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a4fe:	4906      	ldr	r1, [pc, #24]	; (a518 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    a500:	2001      	movs	r0, #1
    a502:	1ef6      	subs	r6, r6, #3
    a504:	7008      	strb	r0, [r1, #0]
    a506:	4805      	ldr	r0, [pc, #20]	; (a51c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    a508:	6006      	str	r6, [r0, #0]
    a50a:	4804      	ldr	r0, [pc, #16]	; (a51c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    a50c:	3808      	subs	r0, #8
    a50e:	6005      	str	r5, [r0, #0]
    a510:	1f00      	subs	r0, r0, #4
    a512:	6004      	str	r4, [r0, #0]
    a514:	bd70      	pop	{r4, r5, r6, pc}
    a516:	0000      	.short	0x0000
    a518:	200002a8 	.word	0x200002a8
    a51c:	4000f510 	.word	0x4000f510

0000a520 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    a520:	b510      	push	{r4, lr}
    a522:	4c0c      	ldr	r4, [pc, #48]	; (a554 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    a524:	7820      	ldrb	r0, [r4, #0]
    a526:	b180      	cbz	r0, a54a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    a528:	490b      	ldr	r1, [pc, #44]	; (a558 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    a52a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a52e:	6008      	str	r0, [r1, #0]
    a530:	f000 f86a 	bl	a608 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    a534:	2100      	movs	r1, #0
    a536:	b120      	cbz	r0, a542 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    a538:	2001      	movs	r0, #1
    a53a:	7060      	strb	r0, [r4, #1]
    a53c:	4807      	ldr	r0, [pc, #28]	; (a55c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    a53e:	6800      	ldr	r0, [r0, #0]
    a540:	e001      	b.n	a546 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    a542:	7061      	strb	r1, [r4, #1]
    a544:	2010      	movs	r0, #16
    a546:	70a0      	strb	r0, [r4, #2]
    a548:	7021      	strb	r1, [r4, #0]
    a54a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a54e:	2000      	movs	r0, #0
    a550:	f000 b9ce 	b.w	a8f0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a554:	200002a8 	.word	0x200002a8
    a558:	4001f508 	.word	0x4001f508
    a55c:	4000f400 	.word	0x4000f400

0000a560 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    a560:	b510      	push	{r4, lr}
    a562:	2002      	movs	r0, #2
    a564:	f000 f9c4 	bl	a8f0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a568:	4904      	ldr	r1, [pc, #16]	; (a57c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    a56a:	2001      	movs	r0, #1
    a56c:	7008      	strb	r0, [r1, #0]
    a56e:	f000 f859 	bl	a624 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    a572:	4903      	ldr	r1, [pc, #12]	; (a580 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    a574:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a578:	6008      	str	r0, [r1, #0]
    a57a:	bd10      	pop	{r4, pc}
    a57c:	200002a8 	.word	0x200002a8
    a580:	4001f504 	.word	0x4001f504

0000a584 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    a584:	4803      	ldr	r0, [pc, #12]	; (a594 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    a586:	2100      	movs	r1, #0
    a588:	7001      	strb	r1, [r0, #0]
    a58a:	7041      	strb	r1, [r0, #1]
    a58c:	2110      	movs	r1, #16
    a58e:	7081      	strb	r1, [r0, #2]
    a590:	4770      	bx	lr
    a592:	0000      	.short	0x0000
    a594:	200002a8 	.word	0x200002a8

0000a598 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    a598:	4807      	ldr	r0, [pc, #28]	; (a5b8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    a59a:	b510      	push	{r4, lr}
    a59c:	7801      	ldrb	r1, [r0, #0]
    a59e:	b141      	cbz	r1, a5b2 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    a5a0:	f000 f832 	bl	a608 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    a5a4:	b118      	cbz	r0, a5ae <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    a5a6:	4805      	ldr	r0, [pc, #20]	; (a5bc <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    a5a8:	6800      	ldr	r0, [r0, #0]
    a5aa:	b2c0      	uxtb	r0, r0
    a5ac:	bd10      	pop	{r4, pc}
    a5ae:	2010      	movs	r0, #16
    a5b0:	bd10      	pop	{r4, pc}
    a5b2:	7880      	ldrb	r0, [r0, #2]
    a5b4:	bd10      	pop	{r4, pc}
    a5b6:	0000      	.short	0x0000
    a5b8:	200002a8 	.word	0x200002a8
    a5bc:	4000f400 	.word	0x4000f400

0000a5c0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    a5c0:	4808      	ldr	r0, [pc, #32]	; (a5e4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    a5c2:	b510      	push	{r4, lr}
    a5c4:	7801      	ldrb	r1, [r0, #0]
    a5c6:	b159      	cbz	r1, a5e0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    a5c8:	4807      	ldr	r0, [pc, #28]	; (a5e8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    a5ca:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    a5ce:	b128      	cbz	r0, a5dc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    a5d0:	f000 f80c 	bl	a5ec <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    a5d4:	2800      	cmp	r0, #0
    a5d6:	d000      	beq.n	a5da <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    a5d8:	2001      	movs	r0, #1
    a5da:	bd10      	pop	{r4, pc}
    a5dc:	2002      	movs	r0, #2
    a5de:	bd10      	pop	{r4, pc}
    a5e0:	7840      	ldrb	r0, [r0, #1]
    a5e2:	bd10      	pop	{r4, pc}
    a5e4:	200002a8 	.word	0x200002a8
    a5e8:	4000f000 	.word	0x4000f000
    a5ec:	4805      	ldr	r0, [pc, #20]	; (a604 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    a5ee:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    a5f2:	b111      	cbz	r1, a5fa <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    a5f4:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    a5f8:	b108      	cbz	r0, a5fe <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    a5fa:	2000      	movs	r0, #0
    a5fc:	4770      	bx	lr
    a5fe:	2001      	movs	r0, #1
    a600:	4770      	bx	lr
    a602:	0000      	.short	0x0000
    a604:	4000f000 	.word	0x4000f000
    a608:	4805      	ldr	r0, [pc, #20]	; (a620 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    a60a:	b510      	push	{r4, lr}
    a60c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    a610:	b120      	cbz	r0, a61c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    a612:	f7ff ffeb 	bl	a5ec <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    a616:	b108      	cbz	r0, a61c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    a618:	2001      	movs	r0, #1
    a61a:	bd10      	pop	{r4, pc}
    a61c:	2000      	movs	r0, #0
    a61e:	bd10      	pop	{r4, pc}
    a620:	4000f000 	.word	0x4000f000
    a624:	4804      	ldr	r0, [pc, #16]	; (a638 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    a626:	2100      	movs	r1, #0
    a628:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    a62c:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    a630:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    a634:	4770      	bx	lr
    a636:	0000      	.short	0x0000
    a638:	4000f000 	.word	0x4000f000

0000a63c <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>:
    a63c:	4a08      	ldr	r2, [pc, #32]	; (a660 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x24>)
    a63e:	b510      	push	{r4, lr}
    a640:	e9c2 0102 	strd	r0, r1, [r2, #8]
    a644:	4907      	ldr	r1, [pc, #28]	; (a664 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x28>)
    a646:	4610      	mov	r0, r2
    a648:	f7f9 fac0 	bl	3bcc <mpsl_fem_lna_configuration_set>
    a64c:	2800      	cmp	r0, #0
    a64e:	d005      	beq.n	a65c <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    a650:	1c40      	adds	r0, r0, #1
    a652:	d003      	beq.n	a65c <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    a654:	217d      	movs	r1, #125	; 0x7d
    a656:	2040      	movs	r0, #64	; 0x40
    a658:	f7f9 fbe8 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a65c:	bd10      	pop	{r4, pc}
    a65e:	0000      	.short	0x0000
    a660:	2000025c 	.word	0x2000025c
    a664:	0000a694 	.word	0x0000a694

0000a668 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>:
    a668:	4a08      	ldr	r2, [pc, #32]	; (a68c <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x24>)
    a66a:	b510      	push	{r4, lr}
    a66c:	e9c2 0102 	strd	r0, r1, [r2, #8]
    a670:	4907      	ldr	r1, [pc, #28]	; (a690 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x28>)
    a672:	4610      	mov	r0, r2
    a674:	f7f9 fab6 	bl	3be4 <mpsl_fem_pa_configuration_set>
    a678:	2800      	cmp	r0, #0
    a67a:	d005      	beq.n	a688 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    a67c:	1c40      	adds	r0, r0, #1
    a67e:	d003      	beq.n	a688 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    a680:	2172      	movs	r1, #114	; 0x72
    a682:	2040      	movs	r0, #64	; 0x40
    a684:	f7f9 fbd2 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a688:	bd10      	pop	{r4, pc}
    a68a:	0000      	.short	0x0000
    a68c:	2000025c 	.word	0x2000025c
    a690:	0000a694 	.word	0x0000a694
    a694:	00000001 	.word	0x00000001
    a698:	40001110 	.word	0x40001110
	...

0000a6ac <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>:
    a6ac:	4a07      	ldr	r2, [pc, #28]	; (a6cc <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x20>)
    a6ae:	b510      	push	{r4, lr}
    a6b0:	7853      	ldrb	r3, [r2, #1]
    a6b2:	b133      	cbz	r3, a6c2 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x16>
    a6b4:	4b06      	ldr	r3, [pc, #24]	; (a6d0 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x24>)
    a6b6:	6019      	str	r1, [r3, #0]
    a6b8:	1d19      	adds	r1, r3, #4
    a6ba:	6008      	str	r0, [r1, #0]
    a6bc:	2001      	movs	r0, #1
    a6be:	7090      	strb	r0, [r2, #2]
    a6c0:	bd10      	pop	{r4, pc}
    a6c2:	21ba      	movs	r1, #186	; 0xba
    a6c4:	203c      	movs	r0, #60	; 0x3c
    a6c6:	f7f9 fbb1 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a6ca:	0000      	.short	0x0000
    a6cc:	200002ab 	.word	0x200002ab
    a6d0:	4000f50c 	.word	0x4000f50c

0000a6d4 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>:
    a6d4:	4809      	ldr	r0, [pc, #36]	; (a6fc <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x28>)
    a6d6:	b510      	push	{r4, lr}
    a6d8:	7801      	ldrb	r1, [r0, #0]
    a6da:	b151      	cbz	r1, a6f2 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    a6dc:	7880      	ldrb	r0, [r0, #2]
    a6de:	b140      	cbz	r0, a6f2 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    a6e0:	4907      	ldr	r1, [pc, #28]	; (a700 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x2c>)
    a6e2:	2000      	movs	r0, #0
    a6e4:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    a6e8:	4906      	ldr	r1, [pc, #24]	; (a704 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x30>)
    a6ea:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    a6ee:	6008      	str	r0, [r1, #0]
    a6f0:	bd10      	pop	{r4, pc}
    a6f2:	21e1      	movs	r1, #225	; 0xe1
    a6f4:	203c      	movs	r0, #60	; 0x3c
    a6f6:	f7f9 fb99 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a6fa:	0000      	.short	0x0000
    a6fc:	200002ab 	.word	0x200002ab
    a700:	4000f000 	.word	0x4000f000
    a704:	4001f504 	.word	0x4001f504

0000a708 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    a708:	b570      	push	{r4, r5, r6, lr}
    a70a:	4c0b      	ldr	r4, [pc, #44]	; (a738 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x30>)
    a70c:	2500      	movs	r5, #0
    a70e:	7820      	ldrb	r0, [r4, #0]
    a710:	b158      	cbz	r0, a72a <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x22>
    a712:	f000 f8e5 	bl	a8e0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    a716:	4809      	ldr	r0, [pc, #36]	; (a73c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
    a718:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    a71c:	b118      	cbz	r0, a726 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x1e>
    a71e:	4808      	ldr	r0, [pc, #32]	; (a740 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
    a720:	6800      	ldr	r0, [r0, #0]
    a722:	70e0      	strb	r0, [r4, #3]
    a724:	e000      	b.n	a728 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x20>
    a726:	70e5      	strb	r5, [r4, #3]
    a728:	7025      	strb	r5, [r4, #0]
    a72a:	2000      	movs	r0, #0
    a72c:	f000 f8e0 	bl	a8f0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a730:	7065      	strb	r5, [r4, #1]
    a732:	70a5      	strb	r5, [r4, #2]
    a734:	bd70      	pop	{r4, r5, r6, pc}
    a736:	0000      	.short	0x0000
    a738:	200002ab 	.word	0x200002ab
    a73c:	4000f000 	.word	0x4000f000
    a740:	4000f400 	.word	0x4000f400

0000a744 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>:
    a744:	480d      	ldr	r0, [pc, #52]	; (a77c <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x38>)
    a746:	b510      	push	{r4, lr}
    a748:	7801      	ldrb	r1, [r0, #0]
    a74a:	b191      	cbz	r1, a772 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    a74c:	7880      	ldrb	r0, [r0, #2]
    a74e:	b180      	cbz	r0, a772 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    a750:	490b      	ldr	r1, [pc, #44]	; (a780 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x3c>)
    a752:	2000      	movs	r0, #0
    a754:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    a758:	4a0a      	ldr	r2, [pc, #40]	; (a784 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    a75a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    a75e:	6010      	str	r0, [r2, #0]
    a760:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    a764:	2a01      	cmp	r2, #1
    a766:	d103      	bne.n	a770 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2c>
    a768:	604a      	str	r2, [r1, #4]
    a76a:	4906      	ldr	r1, [pc, #24]	; (a784 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    a76c:	1d09      	adds	r1, r1, #4
    a76e:	6008      	str	r0, [r1, #0]
    a770:	bd10      	pop	{r4, pc}
    a772:	21d1      	movs	r1, #209	; 0xd1
    a774:	203c      	movs	r0, #60	; 0x3c
    a776:	f7f9 fb59 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a77a:	0000      	.short	0x0000
    a77c:	200002ab 	.word	0x200002ab
    a780:	4000f000 	.word	0x4000f000
    a784:	4001f504 	.word	0x4001f504

0000a788 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    a788:	4803      	ldr	r0, [pc, #12]	; (a798 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x10>)
    a78a:	2100      	movs	r1, #0
    a78c:	7001      	strb	r1, [r0, #0]
    a78e:	7041      	strb	r1, [r0, #1]
    a790:	7081      	strb	r1, [r0, #2]
    a792:	70c1      	strb	r1, [r0, #3]
    a794:	4770      	bx	lr
    a796:	0000      	.short	0x0000
    a798:	200002ab 	.word	0x200002ab

0000a79c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>:
    a79c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a7a0:	4605      	mov	r5, r0
    a7a2:	461c      	mov	r4, r3
    a7a4:	4690      	mov	r8, r2
    a7a6:	460f      	mov	r7, r1
    a7a8:	2001      	movs	r0, #1
    a7aa:	f000 f8a1 	bl	a8f0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a7ae:	4e12      	ldr	r6, [pc, #72]	; (a7f8 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x5c>)
    a7b0:	4812      	ldr	r0, [pc, #72]	; (a7fc <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    a7b2:	7134      	strb	r4, [r6, #4]
    a7b4:	6007      	str	r7, [r0, #0]
    a7b6:	4911      	ldr	r1, [pc, #68]	; (a7fc <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    a7b8:	ea45 4004 	orr.w	r0, r5, r4, lsl #16
    a7bc:	1f09      	subs	r1, r1, #4
    a7be:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
    a7c2:	6008      	str	r0, [r1, #0]
    a7c4:	f001 fb4f 	bl	be66 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    a7c8:	b938      	cbnz	r0, a7da <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x3e>
    a7ca:	480c      	ldr	r0, [pc, #48]	; (a7fc <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    a7cc:	3010      	adds	r0, #16
    a7ce:	6801      	ldr	r1, [r0, #0]
    a7d0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    a7d4:	ea41 0108 	orr.w	r1, r1, r8
    a7d8:	6001      	str	r1, [r0, #0]
    a7da:	f000 f881 	bl	a8e0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    a7de:	b93d      	cbnz	r5, a7f0 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x54>
    a7e0:	4808      	ldr	r0, [pc, #32]	; (a804 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x68>)
    a7e2:	4a07      	ldr	r2, [pc, #28]	; (a800 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    a7e4:	4906      	ldr	r1, [pc, #24]	; (a800 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    a7e6:	3afc      	subs	r2, #252	; 0xfc
    a7e8:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    a7ec:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    a7f0:	2001      	movs	r0, #1
    a7f2:	7070      	strb	r0, [r6, #1]
    a7f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a7f8:	200002ab 	.word	0x200002ab
    a7fc:	4000f508 	.word	0x4000f508
    a800:	4000f100 	.word	0x4000f100
    a804:	4001f088 	.word	0x4001f088

0000a808 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>:
    a808:	4808      	ldr	r0, [pc, #32]	; (a82c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x24>)
    a80a:	b510      	push	{r4, lr}
    a80c:	7841      	ldrb	r1, [r0, #1]
    a80e:	b149      	cbz	r1, a824 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x1c>
    a810:	2101      	movs	r1, #1
    a812:	7001      	strb	r1, [r0, #0]
    a814:	4806      	ldr	r0, [pc, #24]	; (a830 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x28>)
    a816:	2200      	movs	r2, #0
    a818:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
    a81c:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    a820:	6001      	str	r1, [r0, #0]
    a822:	bd10      	pop	{r4, pc}
    a824:	21c5      	movs	r1, #197	; 0xc5
    a826:	203c      	movs	r0, #60	; 0x3c
    a828:	f7f9 fb00 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a82c:	200002ab 	.word	0x200002ab
    a830:	4000f000 	.word	0x4000f000

0000a834 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    a834:	4806      	ldr	r0, [pc, #24]	; (a850 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1c>)
    a836:	7801      	ldrb	r1, [r0, #0]
    a838:	b141      	cbz	r1, a84c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x18>
    a83a:	4806      	ldr	r0, [pc, #24]	; (a854 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
    a83c:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    a840:	2800      	cmp	r0, #0
    a842:	d002      	beq.n	a84a <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x16>
    a844:	4804      	ldr	r0, [pc, #16]	; (a858 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
    a846:	6800      	ldr	r0, [r0, #0]
    a848:	b2c0      	uxtb	r0, r0
    a84a:	4770      	bx	lr
    a84c:	78c0      	ldrb	r0, [r0, #3]
    a84e:	4770      	bx	lr
    a850:	200002ab 	.word	0x200002ab
    a854:	4000f000 	.word	0x4000f000
    a858:	4000f400 	.word	0x4000f400

0000a85c <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    a85c:	4901      	ldr	r1, [pc, #4]	; (a864 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    a85e:	2001      	movs	r0, #1
    a860:	6088      	str	r0, [r1, #8]
    a862:	4770      	bx	lr
    a864:	4000f000 	.word	0x4000f000

0000a868 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    a868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a86c:	2800      	cmp	r0, #0
    a86e:	d02e      	beq.n	a8ce <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    a870:	4818      	ldr	r0, [pc, #96]	; (a8d4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6c>)
    a872:	7800      	ldrb	r0, [r0, #0]
    a874:	b1b0      	cbz	r0, a8a4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x3c>
    a876:	4d18      	ldr	r5, [pc, #96]	; (a8d8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>)
    a878:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    a87c:	2800      	cmp	r0, #0
    a87e:	d126      	bne.n	a8ce <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    a880:	2702      	movs	r7, #2
    a882:	f8c5 7304 	str.w	r7, [r5, #772]	; 0x304
    a886:	4c15      	ldr	r4, [pc, #84]	; (a8dc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    a888:	6820      	ldr	r0, [r4, #0]
    a88a:	43c0      	mvns	r0, r0
    a88c:	f340 1600 	sbfx	r6, r0, #4, #1
    a890:	6820      	ldr	r0, [r4, #0]
    a892:	f040 0010 	orr.w	r0, r0, #16
    a896:	6020      	str	r0, [r4, #0]
    a898:	f44f 4800 	mov.w	r8, #32768	; 0x8000
    a89c:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    a8a0:	1c76      	adds	r6, r6, #1
    a8a2:	e009      	b.n	a8b8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x50>
    a8a4:	f240 1153 	movw	r1, #339	; 0x153
    a8a8:	203c      	movs	r0, #60	; 0x3c
    a8aa:	f7f9 fabf 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a8ae:	bf00      	nop
    a8b0:	f8c9 8280 	str.w	r8, [r9, #640]	; 0x280
    a8b4:	f7f9 f934 	bl	3b20 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    a8b8:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    a8bc:	2800      	cmp	r0, #0
    a8be:	d0f7      	beq.n	a8b0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x48>
    a8c0:	b91e      	cbnz	r6, a8ca <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    a8c2:	6820      	ldr	r0, [r4, #0]
    a8c4:	f020 0010 	bic.w	r0, r0, #16
    a8c8:	6020      	str	r0, [r4, #0]
    a8ca:	f8c5 7308 	str.w	r7, [r5, #776]	; 0x308
    a8ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a8d2:	0000      	.short	0x0000
    a8d4:	200002ab 	.word	0x200002ab
    a8d8:	4000f000 	.word	0x4000f000
    a8dc:	e000ed10 	.word	0xe000ed10
    a8e0:	4902      	ldr	r1, [pc, #8]	; (a8ec <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x84>)
    a8e2:	4801      	ldr	r0, [pc, #4]	; (a8e8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>)
    a8e4:	6008      	str	r0, [r1, #0]
    a8e6:	4770      	bx	lr
    a8e8:	02020000 	.word	0x02020000
    a8ec:	4001f508 	.word	0x4001f508

0000a8f0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    a8f0:	b510      	push	{r4, lr}
    a8f2:	4604      	mov	r4, r0
    a8f4:	f000 f822 	bl	a93c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    a8f8:	2c00      	cmp	r4, #0
    a8fa:	d017      	beq.n	a92c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>
    a8fc:	4a0c      	ldr	r2, [pc, #48]	; (a930 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    a8fe:	480c      	ldr	r0, [pc, #48]	; (a930 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    a900:	490c      	ldr	r1, [pc, #48]	; (a934 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    a902:	3214      	adds	r2, #20
    a904:	4b0c      	ldr	r3, [pc, #48]	; (a938 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
    a906:	2c01      	cmp	r4, #1
    a908:	d005      	beq.n	a916 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x26>
    a90a:	2c02      	cmp	r4, #2
    a90c:	d008      	beq.n	a920 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
    a90e:	2183      	movs	r1, #131	; 0x83
    a910:	203d      	movs	r0, #61	; 0x3d
    a912:	f7f9 fa8b 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a916:	2402      	movs	r4, #2
    a918:	6004      	str	r4, [r0, #0]
    a91a:	6011      	str	r1, [r2, #0]
    a91c:	0620      	lsls	r0, r4, #24
    a91e:	e004      	b.n	a92a <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
    a920:	2403      	movs	r4, #3
    a922:	6004      	str	r4, [r0, #0]
    a924:	6011      	str	r1, [r2, #0]
    a926:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a92a:	6018      	str	r0, [r3, #0]
    a92c:	bd10      	pop	{r4, pc}
    a92e:	0000      	.short	0x0000
    a930:	4000f500 	.word	0x4000f500
    a934:	2000166b 	.word	0x2000166b
    a938:	4001f504 	.word	0x4001f504
    a93c:	4804      	ldr	r0, [pc, #16]	; (a950 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    a93e:	2100      	movs	r1, #0
    a940:	6001      	str	r1, [r0, #0]
    a942:	6001      	str	r1, [r0, #0]
    a944:	4903      	ldr	r1, [pc, #12]	; (a954 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    a946:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
    a94a:	6008      	str	r0, [r1, #0]
    a94c:	4770      	bx	lr
    a94e:	0000      	.short	0x0000
    a950:	4000f500 	.word	0x4000f500
    a954:	4001f508 	.word	0x4001f508

0000a958 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    a958:	4805      	ldr	r0, [pc, #20]	; (a970 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    a95a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    a95e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    a962:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    a966:	2100      	movs	r1, #0
    a968:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    a96c:	4770      	bx	lr
    a96e:	0000      	.short	0x0000
    a970:	40001000 	.word	0x40001000

0000a974 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    a974:	4904      	ldr	r1, [pc, #16]	; (a988 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    a976:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    a97a:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    a97e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    a982:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    a986:	4770      	bx	lr
    a988:	40001000 	.word	0x40001000

0000a98c <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    a98c:	4801      	ldr	r0, [pc, #4]	; (a994 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    a98e:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    a992:	4770      	bx	lr
    a994:	20001124 	.word	0x20001124

0000a998 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    a998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a99a:	4c23      	ldr	r4, [pc, #140]	; (aa28 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x90>)
    a99c:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    a9a0:	f010 0f10 	tst.w	r0, #16
    a9a4:	d001      	beq.n	a9aa <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    a9a6:	2701      	movs	r7, #1
    a9a8:	e000      	b.n	a9ac <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    a9aa:	2700      	movs	r7, #0
    a9ac:	2010      	movs	r0, #16
    a9ae:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    a9b2:	2002      	movs	r0, #2
    a9b4:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    a9b8:	481c      	ldr	r0, [pc, #112]	; (aa2c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    a9ba:	2500      	movs	r5, #0
    a9bc:	491d      	ldr	r1, [pc, #116]	; (aa34 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    a9be:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    a9c2:	481b      	ldr	r0, [pc, #108]	; (aa30 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    a9c4:	6008      	str	r0, [r1, #0]
    a9c6:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    a9ca:	f44f 7688 	mov.w	r6, #272	; 0x110
    a9ce:	f010 0fff 	tst.w	r0, #255	; 0xff
    a9d2:	d018      	beq.n	aa06 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    a9d4:	20ff      	movs	r0, #255	; 0xff
    a9d6:	f88d 0000 	strb.w	r0, [sp]
    a9da:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    a9de:	2001      	movs	r0, #1
    a9e0:	6120      	str	r0, [r4, #16]
    a9e2:	e004      	b.n	a9ee <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x56>
    a9e4:	f89d 0000 	ldrb.w	r0, [sp]
    a9e8:	1e40      	subs	r0, r0, #1
    a9ea:	f88d 0000 	strb.w	r0, [sp]
    a9ee:	f89d 0000 	ldrb.w	r0, [sp]
    a9f2:	b128      	cbz	r0, aa00 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x68>
    a9f4:	4631      	mov	r1, r6
    a9f6:	4620      	mov	r0, r4
    a9f8:	f005 f98f 	bl	fd1a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    a9fc:	2800      	cmp	r0, #0
    a9fe:	d0f1      	beq.n	a9e4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x4c>
    aa00:	f89d 0000 	ldrb.w	r0, [sp]
    aa04:	b158      	cbz	r0, aa1e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x86>
    aa06:	f000 fcdb 	bl	b3c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x108>
    aa0a:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    aa0e:	f000 fe57 	bl	b6c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    aa12:	2f00      	cmp	r7, #0
    aa14:	d002      	beq.n	aa1c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>
    aa16:	2010      	movs	r0, #16
    aa18:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    aa1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aa1e:	f240 718f 	movw	r1, #1935	; 0x78f
    aa22:	203e      	movs	r0, #62	; 0x3e
    aa24:	f7f9 fa02 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aa28:	40001000 	.word	0x40001000
    aa2c:	20001124 	.word	0x20001124
    aa30:	0c0e0000 	.word	0x0c0e0000
    aa34:	4001f508 	.word	0x4001f508

0000aa38 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    aa38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aa3c:	4d20      	ldr	r5, [pc, #128]	; (aac0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>)
    aa3e:	4607      	mov	r7, r0
    aa40:	4688      	mov	r8, r1
    aa42:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    aa46:	07c1      	lsls	r1, r0, #31
    aa48:	d018      	beq.n	aa7c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
    aa4a:	4a1e      	ldr	r2, [pc, #120]	; (aac4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x8c>)
    aa4c:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
    aa50:	6011      	str	r1, [r2, #0]
    aa52:	4c1d      	ldr	r4, [pc, #116]	; (aac8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>)
    aa54:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
    aa58:	f041 0101 	orr.w	r1, r1, #1
    aa5c:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    aa60:	f040 0002 	orr.w	r0, r0, #2
    aa64:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    aa68:	4640      	mov	r0, r8
    aa6a:	f000 fe8d 	bl	b788 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    aa6e:	f000 fc45 	bl	b2fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    aa72:	2601      	movs	r6, #1
    aa74:	b13f      	cbz	r7, aa86 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    aa76:	2f01      	cmp	r7, #1
    aa78:	d00e      	beq.n	aa98 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
    aa7a:	e016      	b.n	aaaa <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    aa7c:	f240 611a 	movw	r1, #1562	; 0x61a
    aa80:	203e      	movs	r0, #62	; 0x3e
    aa82:	f7f9 f9d3 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aa86:	4640      	mov	r0, r8
    aa88:	f000 fc68 	bl	b35c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    aa8c:	4640      	mov	r0, r8
    aa8e:	f000 fc19 	bl	b2c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    aa92:	726e      	strb	r6, [r5, #9]
    aa94:	6026      	str	r6, [r4, #0]
    aa96:	e008      	b.n	aaaa <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    aa98:	f000 fc88 	bl	b3ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    aa9c:	f000 fdd6 	bl	b64c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    aaa0:	2002      	movs	r0, #2
    aaa2:	7268      	strb	r0, [r5, #9]
    aaa4:	f000 fcfa 	bl	b49c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    aaa8:	6066      	str	r6, [r4, #4]
    aaaa:	4808      	ldr	r0, [pc, #32]	; (aacc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    aaac:	64c6      	str	r6, [r0, #76]	; 0x4c
    aaae:	4807      	ldr	r0, [pc, #28]	; (aacc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    aab0:	300c      	adds	r0, #12
    aab2:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    aab6:	4638      	mov	r0, r7
    aab8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    aabc:	f005 b915 	b.w	fcea <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    aac0:	20001124 	.word	0x20001124
    aac4:	4001f504 	.word	0x4001f504
    aac8:	40001000 	.word	0x40001000
    aacc:	40008000 	.word	0x40008000

0000aad0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    aad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    aad4:	4d35      	ldr	r5, [pc, #212]	; (abac <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xdc>)
    aad6:	4606      	mov	r6, r0
    aad8:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    aadc:	4689      	mov	r9, r1
    aade:	6028      	str	r0, [r5, #0]
    aae0:	4c33      	ldr	r4, [pc, #204]	; (abb0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe0>)
    aae2:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    aae6:	f040 0002 	orr.w	r0, r0, #2
    aaea:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    aaee:	4608      	mov	r0, r1
    aaf0:	f000 fe4a 	bl	b788 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    aaf4:	f000 fc02 	bl	b2fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    aaf8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; abb4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe4>
    aafc:	2700      	movs	r7, #0
    aafe:	b116      	cbz	r6, ab06 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x36>
    ab00:	2e01      	cmp	r6, #1
    ab02:	d027      	beq.n	ab54 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    ab04:	e03f      	b.n	ab86 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    ab06:	4648      	mov	r0, r9
    ab08:	f000 fc28 	bl	b35c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    ab0c:	79e0      	ldrb	r0, [r4, #7]
    ab0e:	2801      	cmp	r0, #1
    ab10:	d105      	bne.n	ab1e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x4e>
    ab12:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    ab16:	f041 0108 	orr.w	r1, r1, #8
    ab1a:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    ab1e:	4648      	mov	r0, r9
    ab20:	f000 fbd0 	bl	b2c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    ab24:	2001      	movs	r0, #1
    ab26:	7260      	strb	r0, [r4, #9]
    ab28:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    ab2a:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    ab2e:	62a0      	str	r0, [r4, #40]	; 0x28
    ab30:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    ab34:	6028      	str	r0, [r5, #0]
    ab36:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ab3a:	f1b9 0f02 	cmp.w	r9, #2
    ab3e:	d007      	beq.n	ab50 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x80>
    ab40:	f640 0034 	movw	r0, #2100	; 0x834
    ab44:	f649 72ec 	movw	r2, #40940	; 0x9fec
    ab48:	4410      	add	r0, r2
    ab4a:	fbb0 f7f1 	udiv	r7, r0, r1
    ab4e:	e01a      	b.n	ab86 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    ab50:	4608      	mov	r0, r1
    ab52:	e7f7      	b.n	ab44 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x74>
    ab54:	f000 fc2a 	bl	b3ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    ab58:	f000 fd78 	bl	b64c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    ab5c:	79e0      	ldrb	r0, [r4, #7]
    ab5e:	2801      	cmp	r0, #1
    ab60:	d105      	bne.n	ab6e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9e>
    ab62:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    ab66:	f041 0104 	orr.w	r1, r1, #4
    ab6a:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    ab6e:	2002      	movs	r0, #2
    ab70:	7260      	strb	r0, [r4, #9]
    ab72:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    ab74:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    ab78:	62a0      	str	r0, [r4, #40]	; 0x28
    ab7a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    ab7e:	6028      	str	r0, [r5, #0]
    ab80:	2729      	movs	r7, #41	; 0x29
    ab82:	f000 fc8b 	bl	b49c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    ab86:	f000 fc75 	bl	b474 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
    ab8a:	f001 f843 	bl	bc14 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    ab8e:	6800      	ldr	r0, [r0, #0]
    ab90:	2801      	cmp	r0, #1
    ab92:	d006      	beq.n	aba2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd2>
    ab94:	2100      	movs	r1, #0
    ab96:	4630      	mov	r0, r6
    ab98:	f005 f8a7 	bl	fcea <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    ab9c:	4638      	mov	r0, r7
    ab9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    aba2:	f7ff fef9 	bl	a998 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    aba6:	2000      	movs	r0, #0
    aba8:	e7f9      	b.n	ab9e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xce>
    abaa:	0000      	.short	0x0000
    abac:	4001f504 	.word	0x4001f504
    abb0:	20001124 	.word	0x20001124
    abb4:	40001000 	.word	0x40001000

0000abb8 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    abb8:	4a02      	ldr	r2, [pc, #8]	; (abc4 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    abba:	6b13      	ldr	r3, [r2, #48]	; 0x30
    abbc:	6003      	str	r3, [r0, #0]
    abbe:	6b50      	ldr	r0, [r2, #52]	; 0x34
    abc0:	6008      	str	r0, [r1, #0]
    abc2:	4770      	bx	lr
    abc4:	20001124 	.word	0x20001124

0000abc8 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    abc8:	b510      	push	{r4, lr}
    abca:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    abcc:	4901      	ldr	r1, [pc, #4]	; (abd4 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    abce:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    abd2:	bd10      	pop	{r4, pc}
    abd4:	20001114 	.word	0x20001114

0000abd8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    abd8:	490f      	ldr	r1, [pc, #60]	; (ac18 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    abda:	b510      	push	{r4, lr}
    abdc:	69ca      	ldr	r2, [r1, #28]
    abde:	4282      	cmp	r2, r0
    abe0:	d302      	bcc.n	abe8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    abe2:	f640 010a 	movw	r1, #2058	; 0x80a
    abe6:	e00b      	b.n	ac00 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x28>
    abe8:	2201      	movs	r2, #1
    abea:	730a      	strb	r2, [r1, #12]
    abec:	6108      	str	r0, [r1, #16]
    abee:	490b      	ldr	r1, [pc, #44]	; (ac1c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    abf0:	644a      	str	r2, [r1, #68]	; 0x44
    abf2:	1d0a      	adds	r2, r1, #4
    abf4:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    abf8:	4283      	cmp	r3, r0
    abfa:	d304      	bcc.n	ac06 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2e>
    abfc:	f640 0113 	movw	r1, #2067	; 0x813
    ac00:	203e      	movs	r0, #62	; 0x3e
    ac02:	f7f9 f913 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac06:	2300      	movs	r3, #0
    ac08:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    ac0c:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    ac10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ac14:	f000 bd28 	b.w	b668 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>
    ac18:	20001124 	.word	0x20001124
    ac1c:	40008000 	.word	0x40008000

0000ac20 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    ac20:	b570      	push	{r4, r5, r6, lr}
    ac22:	4c11      	ldr	r4, [pc, #68]	; (ac68 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
    ac24:	4606      	mov	r6, r0
    ac26:	2002      	movs	r0, #2
    ac28:	7320      	strb	r0, [r4, #12]
    ac2a:	2596      	movs	r5, #150	; 0x96
    ac2c:	f000 f86e 	bl	ad0c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    ac30:	4602      	mov	r2, r0
    ac32:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    ac36:	f894 1020 	ldrb.w	r1, [r4, #32]
    ac3a:	2801      	cmp	r0, #1
    ac3c:	d00f      	beq.n	ac5e <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x3e>
    ac3e:	4628      	mov	r0, r5
    ac40:	f005 f875 	bl	fd2e <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    ac44:	6120      	str	r0, [r4, #16]
    ac46:	4809      	ldr	r0, [pc, #36]	; (ac6c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    ac48:	2100      	movs	r1, #0
    ac4a:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    ac4e:	6921      	ldr	r1, [r4, #16]
    ac50:	69e0      	ldr	r0, [r4, #28]
    ac52:	4408      	add	r0, r1
    ac54:	4905      	ldr	r1, [pc, #20]	; (ac6c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    ac56:	1d09      	adds	r1, r1, #4
    ac58:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    ac5c:	bd70      	pop	{r4, r5, r6, pc}
    ac5e:	4633      	mov	r3, r6
    ac60:	4628      	mov	r0, r5
    ac62:	f005 f880 	bl	fd66 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    ac66:	e7ed      	b.n	ac44 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x24>
    ac68:	20001124 	.word	0x20001124
    ac6c:	40008000 	.word	0x40008000

0000ac70 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    ac70:	b510      	push	{r4, lr}
    ac72:	f001 f914 	bl	be9e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    ac76:	2800      	cmp	r0, #0
    ac78:	d006      	beq.n	ac88 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    ac7a:	4804      	ldr	r0, [pc, #16]	; (ac8c <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    ac7c:	6801      	ldr	r1, [r0, #0]
    ac7e:	f021 0101 	bic.w	r1, r1, #1
    ac82:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    ac86:	6001      	str	r1, [r0, #0]
    ac88:	bd10      	pop	{r4, pc}
    ac8a:	0000      	.short	0x0000
    ac8c:	40001774 	.word	0x40001774

0000ac90 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    ac90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ac94:	2238      	movs	r2, #56	; 0x38
    ac96:	2100      	movs	r1, #0
    ac98:	4813      	ldr	r0, [pc, #76]	; (ace8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    ac9a:	f001 f9b0 	bl	bffe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ac9e:	f000 fd0f 	bl	b6c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    aca2:	f001 f8b5 	bl	be10 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    aca6:	4d11      	ldr	r5, [pc, #68]	; (acec <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    aca8:	4e10      	ldr	r6, [pc, #64]	; (acec <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    acaa:	2400      	movs	r4, #0
    acac:	4f0f      	ldr	r7, [pc, #60]	; (acec <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    acae:	3508      	adds	r5, #8
    acb0:	3610      	adds	r6, #16
    acb2:	b928      	cbnz	r0, acc0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    acb4:	f001 f8c3 	bl	be3e <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    acb8:	b910      	cbnz	r0, acc0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    acba:	f001 f8ca 	bl	be52 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    acbe:	b108      	cbz	r0, acc4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    acc0:	2224      	movs	r2, #36	; 0x24
    acc2:	e006      	b.n	acd2 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    acc4:	f001 f905 	bl	bed2 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    acc8:	b910      	cbnz	r0, acd0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    acca:	f001 f8f8 	bl	bebe <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    acce:	b140      	cbz	r0, ace2 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    acd0:	2240      	movs	r2, #64	; 0x40
    acd2:	21ff      	movs	r1, #255	; 0xff
    acd4:	4638      	mov	r0, r7
    acd6:	f001 f992 	bl	bffe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    acda:	602c      	str	r4, [r5, #0]
    acdc:	6034      	str	r4, [r6, #0]
    acde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ace2:	2238      	movs	r2, #56	; 0x38
    ace4:	e7f5      	b.n	acd2 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    ace6:	0000      	.short	0x0000
    ace8:	20001124 	.word	0x20001124
    acec:	40000e00 	.word	0x40000e00

0000acf0 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    acf0:	4805      	ldr	r0, [pc, #20]	; (ad08 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x18>)
    acf2:	b510      	push	{r4, lr}
    acf4:	69c0      	ldr	r0, [r0, #28]
    acf6:	2800      	cmp	r0, #0
    acf8:	d104      	bne.n	ad04 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x14>
    acfa:	f240 11fb 	movw	r1, #507	; 0x1fb
    acfe:	203e      	movs	r0, #62	; 0x3e
    ad00:	f7f9 f894 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad04:	bd10      	pop	{r4, pc}
    ad06:	0000      	.short	0x0000
    ad08:	20001124 	.word	0x20001124

0000ad0c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    ad0c:	4814      	ldr	r0, [pc, #80]	; (ad60 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x54>)
    ad0e:	b510      	push	{r4, lr}
    ad10:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
    ad14:	7a40      	ldrb	r0, [r0, #9]
    ad16:	b141      	cbz	r1, ad2a <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x1e>
    ad18:	2902      	cmp	r1, #2
    ad1a:	d00b      	beq.n	ad34 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    ad1c:	2802      	cmp	r0, #2
    ad1e:	d009      	beq.n	ad34 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    ad20:	2901      	cmp	r1, #1
    ad22:	d00b      	beq.n	ad3c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    ad24:	2801      	cmp	r0, #1
    ad26:	d009      	beq.n	ad3c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    ad28:	e016      	b.n	ad58 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4c>
    ad2a:	2800      	cmp	r0, #0
    ad2c:	d1f6      	bne.n	ad1c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x10>
    ad2e:	f240 117d 	movw	r1, #381	; 0x17d
    ad32:	e00e      	b.n	ad52 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x46>
    ad34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ad38:	f000 bc38 	b.w	b5ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    ad3c:	4809      	ldr	r0, [pc, #36]	; (ad64 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x58>)
    ad3e:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    ad42:	f000 000f 	and.w	r0, r0, #15
    ad46:	2803      	cmp	r0, #3
    ad48:	d006      	beq.n	ad58 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4c>
    ad4a:	2804      	cmp	r0, #4
    ad4c:	d006      	beq.n	ad5c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x50>
    ad4e:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
    ad52:	203e      	movs	r0, #62	; 0x3e
    ad54:	f7f9 f86a 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad58:	2001      	movs	r0, #1
    ad5a:	bd10      	pop	{r4, pc}
    ad5c:	2002      	movs	r0, #2
    ad5e:	bd10      	pop	{r4, pc}
    ad60:	20001124 	.word	0x20001124
    ad64:	40001000 	.word	0x40001000

0000ad68 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    ad68:	4805      	ldr	r0, [pc, #20]	; (ad80 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x18>)
    ad6a:	b510      	push	{r4, lr}
    ad6c:	6980      	ldr	r0, [r0, #24]
    ad6e:	2800      	cmp	r0, #0
    ad70:	d104      	bne.n	ad7c <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x14>
    ad72:	f240 11f5 	movw	r1, #501	; 0x1f5
    ad76:	203e      	movs	r0, #62	; 0x3e
    ad78:	f7f9 f858 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad7c:	bd10      	pop	{r4, pc}
    ad7e:	0000      	.short	0x0000
    ad80:	20001124 	.word	0x20001124

0000ad84 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    ad84:	b510      	push	{r4, lr}
    ad86:	f000 fc7d 	bl	b684 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3cc>
    ad8a:	f7ff fe05 	bl	a998 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    ad8e:	f004 ff42 	bl	fc16 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>
    ad92:	480f      	ldr	r0, [pc, #60]	; (add0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x4c>)
    ad94:	4a0f      	ldr	r2, [pc, #60]	; (add4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x50>)
    ad96:	6a81      	ldr	r1, [r0, #40]	; 0x28
    ad98:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    ad9c:	6011      	str	r1, [r2, #0]
    ad9e:	2400      	movs	r4, #0
    ada0:	6284      	str	r4, [r0, #40]	; 0x28
    ada2:	7304      	strb	r4, [r0, #12]
    ada4:	61c4      	str	r4, [r0, #28]
    ada6:	6184      	str	r4, [r0, #24]
    ada8:	f000 fc6c 	bl	b684 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3cc>
    adac:	480a      	ldr	r0, [pc, #40]	; (add8 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x54>)
    adae:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    adb2:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    adb6:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    adba:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    adbe:	2001      	movs	r0, #1
    adc0:	f004 ff62 	bl	fc88 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    adc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    adc8:	2001      	movs	r0, #1
    adca:	f004 bf50 	b.w	fc6e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    adce:	0000      	.short	0x0000
    add0:	20001124 	.word	0x20001124
    add4:	4001f508 	.word	0x4001f508
    add8:	40008000 	.word	0x40008000

0000addc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    addc:	b570      	push	{r4, r5, r6, lr}
    adde:	2001      	movs	r0, #1
    ade0:	f004 ff52 	bl	fc88 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    ade4:	4c37      	ldr	r4, [pc, #220]	; (aec4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    ade6:	2000      	movs	r0, #0
    ade8:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    adec:	2001      	movs	r0, #1
    adee:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    adf2:	f001 f844 	bl	be7e <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    adf6:	4d34      	ldr	r5, [pc, #208]	; (aec8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    adf8:	b118      	cbz	r0, ae02 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    adfa:	6828      	ldr	r0, [r5, #0]
    adfc:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    ae00:	6028      	str	r0, [r5, #0]
    ae02:	f001 f830 	bl	be66 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    ae06:	b128      	cbz	r0, ae14 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    ae08:	6828      	ldr	r0, [r5, #0]
    ae0a:	4930      	ldr	r1, [pc, #192]	; (aecc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    ae0c:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    ae10:	4308      	orrs	r0, r1
    ae12:	6028      	str	r0, [r5, #0]
    ae14:	f001 f843 	bl	be9e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    ae18:	b138      	cbz	r0, ae2a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    ae1a:	482b      	ldr	r0, [pc, #172]	; (aec8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    ae1c:	1d00      	adds	r0, r0, #4
    ae1e:	6801      	ldr	r1, [r0, #0]
    ae20:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    ae24:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    ae28:	6001      	str	r1, [r0, #0]
    ae2a:	4927      	ldr	r1, [pc, #156]	; (aec8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    ae2c:	4828      	ldr	r0, [pc, #160]	; (aed0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    ae2e:	313c      	adds	r1, #60	; 0x3c
    ae30:	6008      	str	r0, [r1, #0]
    ae32:	f7f8 fee3 	bl	3bfc <mpsl_fem_device_config_254_apply_get>
    ae36:	b140      	cbz	r0, ae4a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    ae38:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ae3c:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    ae40:	1c41      	adds	r1, r0, #1
    ae42:	d002      	beq.n	ae4a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    ae44:	4920      	ldr	r1, [pc, #128]	; (aec8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    ae46:	3110      	adds	r1, #16
    ae48:	6008      	str	r0, [r1, #0]
    ae4a:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    ae4e:	6e00      	ldr	r0, [r0, #96]	; 0x60
    ae50:	1c41      	adds	r1, r0, #1
    ae52:	d004      	beq.n	ae5e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    ae54:	491f      	ldr	r1, [pc, #124]	; (aed4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    ae56:	680a      	ldr	r2, [r1, #0]
    ae58:	f360 4217 	bfi	r2, r0, #16, #8
    ae5c:	600a      	str	r2, [r1, #0]
    ae5e:	f240 1103 	movw	r1, #259	; 0x103
    ae62:	f240 605b 	movw	r0, #1627	; 0x65b
    ae66:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    ae6a:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    ae6e:	2001      	movs	r0, #1
    ae70:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    ae74:	f000 fc88 	bl	b788 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    ae78:	f240 1001 	movw	r0, #257	; 0x101
    ae7c:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    ae80:	2002      	movs	r0, #2
    ae82:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    ae86:	4915      	ldr	r1, [pc, #84]	; (aedc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    ae88:	4813      	ldr	r0, [pc, #76]	; (aed8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    ae8a:	6008      	str	r0, [r1, #0]
    ae8c:	4914      	ldr	r1, [pc, #80]	; (aee0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    ae8e:	2000      	movs	r0, #0
    ae90:	4d14      	ldr	r5, [pc, #80]	; (aee4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    ae92:	8608      	strh	r0, [r1, #48]	; 0x30
    ae94:	3110      	adds	r1, #16
    ae96:	61c8      	str	r0, [r1, #28]
    ae98:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    ae9c:	7028      	strb	r0, [r5, #0]
    ae9e:	2001      	movs	r0, #1
    aea0:	f004 fee5 	bl	fc6e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    aea4:	2010      	movs	r0, #16
    aea6:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    aeaa:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    aeae:	2002      	movs	r0, #2
    aeb0:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    aeb4:	6868      	ldr	r0, [r5, #4]
    aeb6:	2800      	cmp	r0, #0
    aeb8:	d002      	beq.n	aec0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    aeba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    aebe:	4700      	bx	r0
    aec0:	bd70      	pop	{r4, r5, r6, pc}
    aec2:	0000      	.short	0x0000
    aec4:	40001000 	.word	0x40001000
    aec8:	4000173c 	.word	0x4000173c
    aecc:	80000096 	.word	0x80000096
    aed0:	8900002c 	.word	0x8900002c
    aed4:	4000158c 	.word	0x4000158c
    aed8:	0c0e0000 	.word	0x0c0e0000
    aedc:	4001f508 	.word	0x4001f508
    aee0:	20001114 	.word	0x20001114
    aee4:	20000274 	.word	0x20000274

0000aee8 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    aee8:	4901      	ldr	r1, [pc, #4]	; (aef0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    aeea:	7508      	strb	r0, [r1, #20]
    aeec:	4770      	bx	lr
    aeee:	0000      	.short	0x0000
    aef0:	20001124 	.word	0x20001124

0000aef4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    aef4:	4905      	ldr	r1, [pc, #20]	; (af0c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    aef6:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    aefa:	4805      	ldr	r0, [pc, #20]	; (af10 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    aefc:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    af00:	f041 0101 	orr.w	r1, r1, #1
    af04:	7001      	strb	r1, [r0, #0]
    af06:	f000 ba7b 	b.w	b400 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x148>
    af0a:	0000      	.short	0x0000
    af0c:	40001000 	.word	0x40001000
    af10:	20001124 	.word	0x20001124

0000af14 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    af14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    af18:	4e36      	ldr	r6, [pc, #216]	; (aff4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    af1a:	4607      	mov	r7, r0
    af1c:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    af20:	4689      	mov	r9, r1
    af22:	4614      	mov	r4, r2
    af24:	6030      	str	r0, [r6, #0]
    af26:	4610      	mov	r0, r2
    af28:	f000 fc2e 	bl	b788 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    af2c:	f000 f9e6 	bl	b2fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    af30:	f8df a0c4 	ldr.w	sl, [pc, #196]	; aff8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>
    af34:	4d31      	ldr	r5, [pc, #196]	; (affc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    af36:	f04f 0801 	mov.w	r8, #1
    af3a:	b127      	cbz	r7, af46 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32>
    af3c:	2f01      	cmp	r7, #1
    af3e:	d01d      	beq.n	af7c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x68>
    af40:	f240 710f 	movw	r1, #1807	; 0x70f
    af44:	e04c      	b.n	afe0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>
    af46:	4620      	mov	r0, r4
    af48:	f000 fa08 	bl	b35c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    af4c:	4620      	mov	r0, r4
    af4e:	f000 f9b9 	bl	b2c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    af52:	2c02      	cmp	r4, #2
    af54:	d00f      	beq.n	af76 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x62>
    af56:	f640 0034 	movw	r0, #2100	; 0x834
    af5a:	bf00      	nop
    af5c:	f649 51f8 	movw	r1, #40440	; 0x9df8
    af60:	4401      	add	r1, r0
    af62:	4648      	mov	r0, r9
    af64:	f000 fbb4 	bl	b6d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x418>
    af68:	4604      	mov	r4, r0
    af6a:	4650      	mov	r0, sl
    af6c:	f000 fb9c 	bl	b6a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    af70:	f885 8009 	strb.w	r8, [r5, #9]
    af74:	e014      	b.n	afa0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x8c>
    af76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    af7a:	e7ef      	b.n	af5c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x48>
    af7c:	f000 fa16 	bl	b3ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    af80:	f000 fb64 	bl	b64c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    af84:	f000 fa8a 	bl	b49c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    af88:	f649 71ba 	movw	r1, #40890	; 0x9fba
    af8c:	4648      	mov	r0, r9
    af8e:	f000 fb9f 	bl	b6d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x418>
    af92:	4604      	mov	r4, r0
    af94:	4818      	ldr	r0, [pc, #96]	; (aff8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>)
    af96:	1d00      	adds	r0, r0, #4
    af98:	f000 fb86 	bl	b6a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    af9c:	2002      	movs	r0, #2
    af9e:	7268      	strb	r0, [r5, #9]
    afa0:	f8df 905c 	ldr.w	r9, [pc, #92]	; b000 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>
    afa4:	f8c9 4540 	str.w	r4, [r9, #1344]	; 0x540
    afa8:	4917      	ldr	r1, [pc, #92]	; (b008 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf4>)
    afaa:	4816      	ldr	r0, [pc, #88]	; (b004 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf0>)
    afac:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    afb0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    afb2:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    afb6:	62a8      	str	r0, [r5, #40]	; 0x28
    afb8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    afbc:	6030      	str	r0, [r6, #0]
    afbe:	2010      	movs	r0, #16
    afc0:	f8ca 0304 	str.w	r0, [sl, #772]	; 0x304
    afc4:	03c0      	lsls	r0, r0, #15
    afc6:	6030      	str	r0, [r6, #0]
    afc8:	f000 fa54 	bl	b474 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
    afcc:	f8c9 804c 	str.w	r8, [r9, #76]	; 0x4c
    afd0:	480b      	ldr	r0, [pc, #44]	; (b000 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>)
    afd2:	300c      	adds	r0, #12
    afd4:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    afd8:	42a0      	cmp	r0, r4
    afda:	d304      	bcc.n	afe6 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd2>
    afdc:	f240 7136 	movw	r1, #1846	; 0x736
    afe0:	203e      	movs	r0, #62	; 0x3e
    afe2:	f7f8 ff23 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    afe6:	4621      	mov	r1, r4
    afe8:	4638      	mov	r0, r7
    afea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    afee:	f004 be7c 	b.w	fcea <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    aff2:	0000      	.short	0x0000
    aff4:	4001f504 	.word	0x4001f504
    aff8:	40001000 	.word	0x40001000
    affc:	20001124 	.word	0x20001124
    b000:	40008000 	.word	0x40008000
    b004:	40008140 	.word	0x40008140
    b008:	4001f098 	.word	0x4001f098

0000b00c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    b00c:	4b0d      	ldr	r3, [pc, #52]	; (b044 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    b00e:	b510      	push	{r4, lr}
    b010:	71d8      	strb	r0, [r3, #7]
    b012:	729a      	strb	r2, [r3, #10]
    b014:	b151      	cbz	r1, b02c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    b016:	2002      	movs	r0, #2
    b018:	7218      	strb	r0, [r3, #8]
    b01a:	2801      	cmp	r0, #1
    b01c:	d008      	beq.n	b030 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    b01e:	2802      	cmp	r0, #2
    b020:	d00f      	beq.n	b042 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    b022:	f640 1112 	movw	r1, #2322	; 0x912
    b026:	203e      	movs	r0, #62	; 0x3e
    b028:	f7f8 ff00 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b02c:	2001      	movs	r0, #1
    b02e:	e7f3      	b.n	b018 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    b030:	7a58      	ldrb	r0, [r3, #9]
    b032:	2802      	cmp	r0, #2
    b034:	d105      	bne.n	b042 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    b036:	f000 f9b9 	bl	b3ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    b03a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b03e:	f000 bb05 	b.w	b64c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    b042:	bd10      	pop	{r4, pc}
    b044:	20001124 	.word	0x20001124

0000b048 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    b048:	4902      	ldr	r1, [pc, #8]	; (b054 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    b04a:	2000      	movs	r0, #0
    b04c:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b050:	4770      	bx	lr
    b052:	0000      	.short	0x0000
    b054:	40008000 	.word	0x40008000

0000b058 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    b058:	b538      	push	{r3, r4, r5, lr}
    b05a:	4c0b      	ldr	r4, [pc, #44]	; (b088 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x30>)
    b05c:	4605      	mov	r5, r0
    b05e:	f44f 718e 	mov.w	r1, #284	; 0x11c
    b062:	4620      	mov	r0, r4
    b064:	f004 fe59 	bl	fd1a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    b068:	2800      	cmp	r0, #0
    b06a:	d00c      	beq.n	b086 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x2e>
    b06c:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
    b070:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    b074:	4240      	negs	r0, r0
    b076:	7028      	strb	r0, [r5, #0]
    b078:	2000      	movs	r0, #0
    b07a:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
    b07e:	4803      	ldr	r0, [pc, #12]	; (b08c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x34>)
    b080:	6800      	ldr	r0, [r0, #0]
    b082:	9000      	str	r0, [sp, #0]
    b084:	2001      	movs	r0, #1
    b086:	bd38      	pop	{r3, r4, r5, pc}
    b088:	40001000 	.word	0x40001000
    b08c:	4000111c 	.word	0x4000111c

0000b090 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    b090:	4903      	ldr	r1, [pc, #12]	; (b0a0 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    b092:	0e02      	lsrs	r2, r0, #24
    b094:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    b098:	0200      	lsls	r0, r0, #8
    b09a:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    b09e:	4770      	bx	lr
    b0a0:	40001000 	.word	0x40001000

0000b0a4 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    b0a4:	6800      	ldr	r0, [r0, #0]
    b0a6:	4903      	ldr	r1, [pc, #12]	; (b0b4 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x10>)
    b0a8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b0ac:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    b0b0:	4770      	bx	lr
    b0b2:	0000      	.short	0x0000
    b0b4:	40001000 	.word	0x40001000

0000b0b8 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
    b0b8:	b510      	push	{r4, lr}
    b0ba:	f000 fb41 	bl	b740 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
    b0be:	4807      	ldr	r0, [pc, #28]	; (b0dc <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x24>)
    b0c0:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    b0c4:	b2c0      	uxtb	r0, r0
    b0c6:	2803      	cmp	r0, #3
    b0c8:	d001      	beq.n	b0ce <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x16>
    b0ca:	280b      	cmp	r0, #11
    b0cc:	d104      	bne.n	b0d8 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x20>
    b0ce:	f44f 7121 	mov.w	r1, #644	; 0x284
    b0d2:	203e      	movs	r0, #62	; 0x3e
    b0d4:	f7f8 feaa 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b0d8:	bd10      	pop	{r4, pc}
    b0da:	0000      	.short	0x0000
    b0dc:	40001000 	.word	0x40001000

0000b0e0 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    b0e0:	4901      	ldr	r1, [pc, #4]	; (b0e8 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    b0e2:	7548      	strb	r0, [r1, #21]
    b0e4:	4770      	bx	lr
    b0e6:	0000      	.short	0x0000
    b0e8:	20001124 	.word	0x20001124

0000b0ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    b0ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b0f0:	4853      	ldr	r0, [pc, #332]	; (b240 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    b0f2:	f04f 0a01 	mov.w	sl, #1
    b0f6:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    b0fa:	4851      	ldr	r0, [pc, #324]	; (b240 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    b0fc:	300c      	adds	r0, #12
    b0fe:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    b102:	4850      	ldr	r0, [pc, #320]	; (b244 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    b104:	f8d0 0504 	ldr.w	r0, [r0, #1284]	; 0x504
    b108:	4c4f      	ldr	r4, [pc, #316]	; (b248 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    b10a:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
    b10e:	f000 f957 	bl	b3c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x108>
    b112:	494e      	ldr	r1, [pc, #312]	; (b24c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    b114:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b116:	6008      	str	r0, [r1, #0]
    b118:	f8df 9134 	ldr.w	r9, [pc, #308]	; b250 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>
    b11c:	2600      	movs	r6, #0
    b11e:	62a6      	str	r6, [r4, #40]	; 0x28
    b120:	f8d9 1200 	ldr.w	r1, [r9, #512]	; 0x200
    b124:	f240 121d 	movw	r2, #285	; 0x11d
    b128:	4391      	bics	r1, r2
    b12a:	f8c9 1200 	str.w	r1, [r9, #512]	; 0x200
    b12e:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    b132:	f000 f9c5 	bl	b4c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x208>
    b136:	4605      	mov	r5, r0
    b138:	4841      	ldr	r0, [pc, #260]	; (b240 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    b13a:	3008      	adds	r0, #8
    b13c:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    b140:	61e0      	str	r0, [r4, #28]
    b142:	f7ff fde3 	bl	ad0c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    b146:	f884 0020 	strb.w	r0, [r4, #32]
    b14a:	7a60      	ldrb	r0, [r4, #9]
    b14c:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    b150:	61a6      	str	r6, [r4, #24]
    b152:	4e40      	ldr	r6, [pc, #256]	; (b254 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>)
    b154:	07a8      	lsls	r0, r5, #30
    b156:	d502      	bpl.n	b15e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x72>
    b158:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    b15c:	61a0      	str	r0, [r4, #24]
    b15e:	0728      	lsls	r0, r5, #28
    b160:	d502      	bpl.n	b168 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x7c>
    b162:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    b166:	61a0      	str	r0, [r4, #24]
    b168:	f04f 0800 	mov.w	r8, #0
    b16c:	4639      	mov	r1, r7
    b16e:	4628      	mov	r0, r5
    b170:	f000 fa32 	bl	b5d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x320>
    b174:	b918      	cbnz	r0, b17e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    b176:	f8c9 a010 	str.w	sl, [r9, #16]
    b17a:	f04f 0801 	mov.w	r8, #1
    b17e:	4f32      	ldr	r7, [pc, #200]	; (b248 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    b180:	07e8      	lsls	r0, r5, #31
    b182:	f1a7 0710 	sub.w	r7, r7, #16
    b186:	d002      	beq.n	b18e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xa2>
    b188:	6838      	ldr	r0, [r7, #0]
    b18a:	4780      	blx	r0
    b18c:	e031      	b.n	b1f2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x106>
    b18e:	07a8      	lsls	r0, r5, #30
    b190:	d526      	bpl.n	b1e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf4>
    b192:	0768      	lsls	r0, r5, #29
    b194:	d41e      	bmi.n	b1d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    b196:	f000 fe82 	bl	be9e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b19a:	b9d8      	cbnz	r0, b1d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    b19c:	f000 fe6f 	bl	be7e <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b1a0:	b9c0      	cbnz	r0, b1d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    b1a2:	482d      	ldr	r0, [pc, #180]	; (b258 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16c>)
    b1a4:	6800      	ldr	r0, [r0, #0]
    b1a6:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    b1aa:	f3c0 6100 	ubfx	r1, r0, #24, #1
    b1ae:	f000 030f 	and.w	r3, r0, #15
    b1b2:	f3c0 1203 	ubfx	r2, r0, #4, #4
    b1b6:	f3c0 2003 	ubfx	r0, r0, #8, #4
    b1ba:	b159      	cbz	r1, b1d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    b1bc:	b10b      	cbz	r3, b1c2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
    b1be:	b102      	cbz	r2, b1c2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
    b1c0:	b940      	cbnz	r0, b1d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    b1c2:	4825      	ldr	r0, [pc, #148]	; (b258 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16c>)
    b1c4:	1d00      	adds	r0, r0, #4
    b1c6:	6800      	ldr	r0, [r0, #0]
    b1c8:	b120      	cbz	r0, b1d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    b1ca:	f1bc 0f03 	cmp.w	ip, #3
    b1ce:	d201      	bcs.n	b1d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    b1d0:	f045 0504 	orr.w	r5, r5, #4
    b1d4:	f345 0080 	sbfx	r0, r5, #2, #1
    b1d8:	4641      	mov	r1, r8
    b1da:	1c40      	adds	r0, r0, #1
    b1dc:	687a      	ldr	r2, [r7, #4]
    b1de:	e007      	b.n	b1f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x104>
    b1e0:	f015 0f28 	tst.w	r5, #40	; 0x28
    b1e4:	d005      	beq.n	b1f2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x106>
    b1e6:	f345 1140 	sbfx	r1, r5, #5, #1
    b1ea:	68ba      	ldr	r2, [r7, #8]
    b1ec:	4640      	mov	r0, r8
    b1ee:	1c49      	adds	r1, r1, #1
    b1f0:	4790      	blx	r2
    b1f2:	06e8      	lsls	r0, r5, #27
    b1f4:	d501      	bpl.n	b1fa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x10e>
    b1f6:	68f8      	ldr	r0, [r7, #12]
    b1f8:	4780      	blx	r0
    b1fa:	7a60      	ldrb	r0, [r4, #9]
    b1fc:	2802      	cmp	r0, #2
    b1fe:	d11c      	bne.n	b23a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14e>
    b200:	7b20      	ldrb	r0, [r4, #12]
    b202:	2800      	cmp	r0, #0
    b204:	d019      	beq.n	b23a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14e>
    b206:	2802      	cmp	r0, #2
    b208:	d004      	beq.n	b214 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x128>
    b20a:	2801      	cmp	r0, #1
    b20c:	d006      	beq.n	b21c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x130>
    b20e:	f640 21e1 	movw	r1, #2785	; 0xae1
    b212:	e009      	b.n	b228 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13c>
    b214:	6921      	ldr	r1, [r4, #16]
    b216:	69e0      	ldr	r0, [r4, #28]
    b218:	4408      	add	r0, r1
    b21a:	e008      	b.n	b22e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x142>
    b21c:	69e1      	ldr	r1, [r4, #28]
    b21e:	6920      	ldr	r0, [r4, #16]
    b220:	4288      	cmp	r0, r1
    b222:	d804      	bhi.n	b22e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x142>
    b224:	f640 21e2 	movw	r1, #2786	; 0xae2
    b228:	203e      	movs	r0, #62	; 0x3e
    b22a:	f7f8 fdff 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b22e:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    b232:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b236:	f000 ba17 	b.w	b668 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>
    b23a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b23e:	0000      	.short	0x0000
    b240:	40008000 	.word	0x40008000
    b244:	4000b000 	.word	0x4000b000
    b248:	20001124 	.word	0x20001124
    b24c:	4001f508 	.word	0x4001f508
    b250:	40001000 	.word	0x40001000
    b254:	40008004 	.word	0x40008004
    b258:	40001450 	.word	0x40001450

0000b25c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    b25c:	b570      	push	{r4, r5, r6, lr}
    b25e:	4b15      	ldr	r3, [pc, #84]	; (b2b4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x58>)
    b260:	888c      	ldrh	r4, [r1, #4]
    b262:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    b266:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    b26a:	780c      	ldrb	r4, [r1, #0]
    b26c:	f8d1 1001 	ldr.w	r1, [r1, #1]
    b270:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    b274:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    b278:	f8d3 4640 	ldr.w	r4, [r3, #1600]	; 0x640
    b27c:	2101      	movs	r1, #1
    b27e:	4081      	lsls	r1, r0
    b280:	430c      	orrs	r4, r1
    b282:	b2e4      	uxtb	r4, r4
    b284:	b132      	cbz	r2, b294 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x38>
    b286:	2a01      	cmp	r2, #1
    b288:	d00a      	beq.n	b2a0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x44>
    b28a:	f240 41ac 	movw	r1, #1196	; 0x4ac
    b28e:	203e      	movs	r0, #62	; 0x3e
    b290:	f7f8 fdcc 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b294:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    b298:	f3c0 2007 	ubfx	r0, r0, #8, #8
    b29c:	4388      	bics	r0, r1
    b29e:	e004      	b.n	b2aa <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4e>
    b2a0:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    b2a4:	ea41 2010 	orr.w	r0, r1, r0, lsr #8
    b2a8:	b2c0      	uxtb	r0, r0
    b2aa:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
    b2ae:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    b2b2:	bd70      	pop	{r4, r5, r6, pc}
    b2b4:	40001000 	.word	0x40001000

0000b2b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    b2b8:	4901      	ldr	r1, [pc, #4]	; (b2c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    b2ba:	2001      	movs	r0, #1
    b2bc:	7008      	strb	r0, [r1, #0]
    b2be:	4770      	bx	lr
    b2c0:	20000274 	.word	0x20000274
    b2c4:	b510      	push	{r4, lr}
    b2c6:	4604      	mov	r4, r0
    b2c8:	f000 fde9 	bl	be9e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b2cc:	2800      	cmp	r0, #0
    b2ce:	d00e      	beq.n	b2ee <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x36>
    b2d0:	4a09      	ldr	r2, [pc, #36]	; (b2f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    b2d2:	6811      	ldr	r1, [r2, #0]
    b2d4:	0650      	lsls	r0, r2, #25
    b2d6:	2c02      	cmp	r4, #2
    b2d8:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    b2dc:	d008      	beq.n	b2f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38>
    b2de:	f3c0 2006 	ubfx	r0, r0, #8, #7
    b2e2:	bf00      	nop
    b2e4:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    b2e8:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    b2ec:	6010      	str	r0, [r2, #0]
    b2ee:	bd10      	pop	{r4, pc}
    b2f0:	f3c0 6006 	ubfx	r0, r0, #24, #7
    b2f4:	e7f6      	b.n	b2e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    b2f6:	0000      	.short	0x0000
    b2f8:	40001588 	.word	0x40001588
    b2fc:	4815      	ldr	r0, [pc, #84]	; (b354 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x9c>)
    b2fe:	7d41      	ldrb	r1, [r0, #21]
    b300:	2925      	cmp	r1, #37	; 0x25
    b302:	d00a      	beq.n	b31a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x62>
    b304:	2926      	cmp	r1, #38	; 0x26
    b306:	d00b      	beq.n	b320 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x68>
    b308:	2927      	cmp	r1, #39	; 0x27
    b30a:	d00c      	beq.n	b326 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x6e>
    b30c:	7d40      	ldrb	r0, [r0, #21]
    b30e:	0040      	lsls	r0, r0, #1
    b310:	290a      	cmp	r1, #10
    b312:	d80b      	bhi.n	b32c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x74>
    b314:	f600 1064 	addw	r0, r0, #2404	; 0x964
    b318:	e00a      	b.n	b330 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>
    b31a:	f640 1062 	movw	r0, #2402	; 0x962
    b31e:	e00f      	b.n	b340 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    b320:	f640 107a 	movw	r0, #2426	; 0x97a
    b324:	e00c      	b.n	b340 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    b326:	f44f 601b 	mov.w	r0, #2480	; 0x9b0
    b32a:	e009      	b.n	b340 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    b32c:	f600 1066 	addw	r0, r0, #2406	; 0x966
    b330:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    b334:	d204      	bcs.n	b340 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    b336:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    b33a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    b33e:	e001      	b.n	b344 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>
    b340:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    b344:	4a04      	ldr	r2, [pc, #16]	; (b358 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa0>)
    b346:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    b34a:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    b34e:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    b352:	4770      	bx	lr
    b354:	20001124 	.word	0x20001124
    b358:	40001000 	.word	0x40001000
    b35c:	4912      	ldr	r1, [pc, #72]	; (b3a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    b35e:	b508      	push	{r3, lr}
    b360:	f991 2014 	ldrsb.w	r2, [r1, #20]
    b364:	7d49      	ldrb	r1, [r1, #21]
    b366:	2801      	cmp	r0, #1
    b368:	d00a      	beq.n	b380 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>
    b36a:	2802      	cmp	r0, #2
    b36c:	d00a      	beq.n	b384 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    b36e:	2804      	cmp	r0, #4
    b370:	d00a      	beq.n	b388 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd0>
    b372:	2808      	cmp	r0, #8
    b374:	d00a      	beq.n	b38c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    b376:	f240 31ed 	movw	r1, #1005	; 0x3ed
    b37a:	2006      	movs	r0, #6
    b37c:	f7f8 fd56 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b380:	2000      	movs	r0, #0
    b382:	e004      	b.n	b38e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    b384:	2001      	movs	r0, #1
    b386:	e002      	b.n	b38e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    b388:	2003      	movs	r0, #3
    b38a:	e000      	b.n	b38e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    b38c:	2002      	movs	r0, #2
    b38e:	466b      	mov	r3, sp
    b390:	f7f5 f820 	bl	3d4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    b394:	b118      	cbz	r0, b39e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe6>
    b396:	f240 41de 	movw	r1, #1246	; 0x4de
    b39a:	203e      	movs	r0, #62	; 0x3e
    b39c:	e7ee      	b.n	b37c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc4>
    b39e:	f99d 0000 	ldrsb.w	r0, [sp]
    b3a2:	f000 f9eb 	bl	b77c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    b3a6:	bd08      	pop	{r3, pc}
    b3a8:	20001124 	.word	0x20001124
    b3ac:	4803      	ldr	r0, [pc, #12]	; (b3bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x104>)
    b3ae:	7a01      	ldrb	r1, [r0, #8]
    b3b0:	2901      	cmp	r1, #1
    b3b2:	d102      	bne.n	b3ba <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x102>
    b3b4:	7a80      	ldrb	r0, [r0, #10]
    b3b6:	f7ff bfd1 	b.w	b35c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    b3ba:	4770      	bx	lr
    b3bc:	20001124 	.word	0x20001124
    b3c0:	4805      	ldr	r0, [pc, #20]	; (b3d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x120>)
    b3c2:	7a40      	ldrb	r0, [r0, #9]
    b3c4:	2801      	cmp	r0, #1
    b3c6:	d003      	beq.n	b3d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x118>
    b3c8:	2802      	cmp	r0, #2
    b3ca:	d103      	bne.n	b3d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x11c>
    b3cc:	f004 bc0b 	b.w	fbe6 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>
    b3d0:	f004 bc15 	b.w	fbfe <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>
    b3d4:	4770      	bx	lr
    b3d6:	0000      	.short	0x0000
    b3d8:	20001124 	.word	0x20001124
    b3dc:	4807      	ldr	r0, [pc, #28]	; (b3fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x144>)
    b3de:	2100      	movs	r1, #0
    b3e0:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b3e4:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    b3e8:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    b3ec:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    b3f0:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    b3f4:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    b3f8:	4770      	bx	lr
    b3fa:	0000      	.short	0x0000
    b3fc:	40001000 	.word	0x40001000
    b400:	4818      	ldr	r0, [pc, #96]	; (b464 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>)
    b402:	b510      	push	{r4, lr}
    b404:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    b408:	07c1      	lsls	r1, r0, #31
    b40a:	d029      	beq.n	b460 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    b40c:	0781      	lsls	r1, r0, #30
    b40e:	d514      	bpl.n	b43a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x182>
    b410:	4815      	ldr	r0, [pc, #84]	; (b468 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b0>)
    b412:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b416:	f041 0101 	orr.w	r1, r1, #1
    b41a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b41e:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    b422:	b2c0      	uxtb	r0, r0
    b424:	280b      	cmp	r0, #11
    b426:	d005      	beq.n	b434 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    b428:	280a      	cmp	r0, #10
    b42a:	d003      	beq.n	b434 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    b42c:	2803      	cmp	r0, #3
    b42e:	d001      	beq.n	b434 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    b430:	2802      	cmp	r0, #2
    b432:	d115      	bne.n	b460 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    b434:	f240 510f 	movw	r1, #1295	; 0x50f
    b438:	e00f      	b.n	b45a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a2>
    b43a:	0740      	lsls	r0, r0, #29
    b43c:	d510      	bpl.n	b460 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    b43e:	480a      	ldr	r0, [pc, #40]	; (b468 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b0>)
    b440:	490a      	ldr	r1, [pc, #40]	; (b46c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b4>)
    b442:	3008      	adds	r0, #8
    b444:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    b448:	f44f 71a0 	mov.w	r1, #320	; 0x140
    b44c:	4808      	ldr	r0, [pc, #32]	; (b470 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b8>)
    b44e:	f004 fc69 	bl	fd24 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3e>
    b452:	2800      	cmp	r0, #0
    b454:	d004      	beq.n	b460 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    b456:	f240 5117 	movw	r1, #1303	; 0x517
    b45a:	203e      	movs	r0, #62	; 0x3e
    b45c:	f7f8 fce6 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b460:	bd10      	pop	{r4, pc}
    b462:	0000      	.short	0x0000
    b464:	20001124 	.word	0x20001124
    b468:	40001000 	.word	0x40001000
    b46c:	4001f098 	.word	0x4001f098
    b470:	40008000 	.word	0x40008000
    b474:	4808      	ldr	r0, [pc, #32]	; (b498 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e0>)
    b476:	4601      	mov	r1, r0
    b478:	79c2      	ldrb	r2, [r0, #7]
    b47a:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    b47e:	b112      	cbz	r2, b486 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ce>
    b480:	2a01      	cmp	r2, #1
    b482:	d003      	beq.n	b48c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d4>
    b484:	e006      	b.n	b494 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1dc>
    b486:	f041 0102 	orr.w	r1, r1, #2
    b48a:	e001      	b.n	b490 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d8>
    b48c:	f041 0104 	orr.w	r1, r1, #4
    b490:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    b494:	f7ff bfb4 	b.w	b400 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x148>
    b498:	20001124 	.word	0x20001124
    b49c:	b510      	push	{r4, lr}
    b49e:	f000 fcfe 	bl	be9e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b4a2:	2800      	cmp	r0, #0
    b4a4:	d108      	bne.n	b4b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x200>
    b4a6:	f000 fcea 	bl	be7e <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b4aa:	2800      	cmp	r0, #0
    b4ac:	d104      	bne.n	b4b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x200>
    b4ae:	4803      	ldr	r0, [pc, #12]	; (b4bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>)
    b4b0:	6801      	ldr	r1, [r0, #0]
    b4b2:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    b4b6:	6001      	str	r1, [r0, #0]
    b4b8:	bd10      	pop	{r4, pc}
    b4ba:	0000      	.short	0x0000
    b4bc:	40001568 	.word	0x40001568
    b4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b4c4:	4d35      	ldr	r5, [pc, #212]	; (b59c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e4>)
    b4c6:	2400      	movs	r4, #0
    b4c8:	7b28      	ldrb	r0, [r5, #12]
    b4ca:	b138      	cbz	r0, b4dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    b4cc:	f44f 71a2 	mov.w	r1, #324	; 0x144
    b4d0:	4833      	ldr	r0, [pc, #204]	; (b5a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e8>)
    b4d2:	f004 fc27 	bl	fd24 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3e>
    b4d6:	b108      	cbz	r0, b4dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    b4d8:	2601      	movs	r6, #1
    b4da:	e000      	b.n	b4de <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
    b4dc:	2600      	movs	r6, #0
    b4de:	7a68      	ldrb	r0, [r5, #9]
    b4e0:	4f30      	ldr	r7, [pc, #192]	; (b5a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ec>)
    b4e2:	f44f 7186 	mov.w	r1, #268	; 0x10c
    b4e6:	2801      	cmp	r0, #1
    b4e8:	d002      	beq.n	b4f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x238>
    b4ea:	2802      	cmp	r0, #2
    b4ec:	d008      	beq.n	b500 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    b4ee:	e018      	b.n	b522 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    b4f0:	4638      	mov	r0, r7
    b4f2:	f004 fc12 	bl	fd1a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    b4f6:	b108      	cbz	r0, b4fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x244>
    b4f8:	2408      	movs	r4, #8
    b4fa:	e012      	b.n	b522 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    b4fc:	2400      	movs	r4, #0
    b4fe:	e010      	b.n	b522 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    b500:	4638      	mov	r0, r7
    b502:	f004 fc0a 	bl	fd1a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    b506:	b100      	cbz	r0, b50a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x252>
    b508:	2002      	movs	r0, #2
    b50a:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
    b50e:	43c9      	mvns	r1, r1
    b510:	f341 0100 	sbfx	r1, r1, #0, #1
    b514:	1c49      	adds	r1, r1, #1
    b516:	d001      	beq.n	b51c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x264>
    b518:	2400      	movs	r4, #0
    b51a:	e000      	b.n	b51e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x266>
    b51c:	2404      	movs	r4, #4
    b51e:	4304      	orrs	r4, r0
    b520:	4334      	orrs	r4, r6
    b522:	f014 0f0b 	tst.w	r4, #11
    b526:	d107      	bne.n	b538 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x280>
    b528:	f44f 7188 	mov.w	r1, #272	; 0x110
    b52c:	4638      	mov	r0, r7
    b52e:	f004 fbf4 	bl	fd1a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    b532:	b100      	cbz	r0, b536 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x27e>
    b534:	2010      	movs	r0, #16
    b536:	4304      	orrs	r4, r0
    b538:	481b      	ldr	r0, [pc, #108]	; (b5a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f0>)
    b53a:	7800      	ldrb	r0, [r0, #0]
    b53c:	b1f8      	cbz	r0, b57e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c6>
    b53e:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    b542:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    b546:	d007      	beq.n	b558 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a0>
    b548:	f44f 718a 	mov.w	r1, #276	; 0x114
    b54c:	4638      	mov	r0, r7
    b54e:	f004 fbe4 	bl	fd1a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    b552:	b108      	cbz	r0, b558 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a0>
    b554:	2001      	movs	r0, #1
    b556:	e000      	b.n	b55a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    b558:	2000      	movs	r0, #0
    b55a:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    b55e:	b13e      	cbz	r6, b570 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b8>
    b560:	f44f 718c 	mov.w	r1, #280	; 0x118
    b564:	4638      	mov	r0, r7
    b566:	f004 fbd8 	bl	fd1a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    b56a:	b108      	cbz	r0, b570 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b8>
    b56c:	2001      	movs	r0, #1
    b56e:	e000      	b.n	b572 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ba>
    b570:	2000      	movs	r0, #0
    b572:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    b576:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    b57a:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    b57e:	f7ff ff2d 	bl	b3dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x124>
    b582:	06e0      	lsls	r0, r4, #27
    b584:	d506      	bpl.n	b594 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    b586:	0720      	lsls	r0, r4, #28
    b588:	d404      	bmi.n	b594 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    b58a:	7a68      	ldrb	r0, [r5, #9]
    b58c:	2801      	cmp	r0, #1
    b58e:	d101      	bne.n	b594 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    b590:	f044 0420 	orr.w	r4, r4, #32
    b594:	4620      	mov	r0, r4
    b596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b59a:	0000      	.short	0x0000
    b59c:	20001124 	.word	0x20001124
    b5a0:	40008000 	.word	0x40008000
    b5a4:	40001000 	.word	0x40001000
    b5a8:	20000274 	.word	0x20000274
    b5ac:	4809      	ldr	r0, [pc, #36]	; (b5d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x31c>)
    b5ae:	b510      	push	{r4, lr}
    b5b0:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    b5b4:	f000 000f 	and.w	r0, r0, #15
    b5b8:	2803      	cmp	r0, #3
    b5ba:	d006      	beq.n	b5ca <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x312>
    b5bc:	2804      	cmp	r0, #4
    b5be:	d006      	beq.n	b5ce <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x316>
    b5c0:	f240 11dd 	movw	r1, #477	; 0x1dd
    b5c4:	203e      	movs	r0, #62	; 0x3e
    b5c6:	f7f8 fc31 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b5ca:	2001      	movs	r0, #1
    b5cc:	bd10      	pop	{r4, pc}
    b5ce:	2002      	movs	r0, #2
    b5d0:	bd10      	pop	{r4, pc}
    b5d2:	0000      	.short	0x0000
    b5d4:	40001000 	.word	0x40001000
    b5d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b5dc:	4c19      	ldr	r4, [pc, #100]	; (b644 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38c>)
    b5de:	460d      	mov	r5, r1
    b5e0:	7a21      	ldrb	r1, [r4, #8]
    b5e2:	b129      	cbz	r1, b5f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x338>
    b5e4:	f010 0f11 	tst.w	r0, #17
    b5e8:	d00b      	beq.n	b602 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34a>
    b5ea:	f7ff f9d5 	bl	a998 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b5ee:	e027      	b.n	b640 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x388>
    b5f0:	4915      	ldr	r1, [pc, #84]	; (b648 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x390>)
    b5f2:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    b5f6:	6008      	str	r0, [r1, #0]
    b5f8:	f000 f862 	bl	b6c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    b5fc:	2000      	movs	r0, #0
    b5fe:	7320      	strb	r0, [r4, #12]
    b600:	e01e      	b.n	b640 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x388>
    b602:	2901      	cmp	r1, #1
    b604:	d001      	beq.n	b60a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x352>
    b606:	2601      	movs	r6, #1
    b608:	e000      	b.n	b60c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x354>
    b60a:	2600      	movs	r6, #0
    b60c:	79e0      	ldrb	r0, [r4, #7]
    b60e:	2801      	cmp	r0, #1
    b610:	d00e      	beq.n	b630 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x378>
    b612:	2700      	movs	r7, #0
    b614:	f000 f854 	bl	b6c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    b618:	2196      	movs	r1, #150	; 0x96
    b61a:	4630      	mov	r0, r6
    b61c:	f000 f866 	bl	b6ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    b620:	4601      	mov	r1, r0
    b622:	b14f      	cbz	r7, b638 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x380>
    b624:	353b      	adds	r5, #59	; 0x3b
    b626:	428d      	cmp	r5, r1
    b628:	d904      	bls.n	b634 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x37c>
    b62a:	2000      	movs	r0, #0
    b62c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b630:	2701      	movs	r7, #1
    b632:	e7ef      	b.n	b614 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x35c>
    b634:	2001      	movs	r0, #1
    b636:	71e0      	strb	r0, [r4, #7]
    b638:	7aa2      	ldrb	r2, [r4, #10]
    b63a:	4630      	mov	r0, r6
    b63c:	f7ff fc6a 	bl	af14 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    b640:	2001      	movs	r0, #1
    b642:	e7f3      	b.n	b62c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    b644:	20001124 	.word	0x20001124
    b648:	4001f508 	.word	0x4001f508
    b64c:	4805      	ldr	r0, [pc, #20]	; (b664 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    b64e:	2100      	movs	r1, #0
    b650:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
    b654:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b658:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    b65c:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b660:	4770      	bx	lr
    b662:	0000      	.short	0x0000
    b664:	40001000 	.word	0x40001000
    b668:	4804      	ldr	r0, [pc, #16]	; (b67c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>)
    b66a:	6a81      	ldr	r1, [r0, #40]	; 0x28
    b66c:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    b670:	6281      	str	r1, [r0, #40]	; 0x28
    b672:	4903      	ldr	r1, [pc, #12]	; (b680 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c8>)
    b674:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    b678:	6008      	str	r0, [r1, #0]
    b67a:	4770      	bx	lr
    b67c:	20001124 	.word	0x20001124
    b680:	4001f504 	.word	0x4001f504
    b684:	4a07      	ldr	r2, [pc, #28]	; (b6a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    b686:	2000      	movs	r0, #0
    b688:	3208      	adds	r2, #8
    b68a:	4906      	ldr	r1, [pc, #24]	; (b6a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    b68c:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    b690:	1d0a      	adds	r2, r1, #4
    b692:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    b696:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b69a:	4902      	ldr	r1, [pc, #8]	; (b6a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    b69c:	310c      	adds	r1, #12
    b69e:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b6a2:	4770      	bx	lr
    b6a4:	40008000 	.word	0x40008000
    b6a8:	4903      	ldr	r1, [pc, #12]	; (b6b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x400>)
    b6aa:	79c9      	ldrb	r1, [r1, #7]
    b6ac:	2900      	cmp	r1, #0
    b6ae:	d102      	bne.n	b6b6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3fe>
    b6b0:	4902      	ldr	r1, [pc, #8]	; (b6bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x404>)
    b6b2:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    b6b6:	4770      	bx	lr
    b6b8:	20001124 	.word	0x20001124
    b6bc:	4001f098 	.word	0x4001f098
    b6c0:	4802      	ldr	r0, [pc, #8]	; (b6cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x414>)
    b6c2:	2100      	movs	r1, #0
    b6c4:	71c1      	strb	r1, [r0, #7]
    b6c6:	7201      	strb	r1, [r0, #8]
    b6c8:	7241      	strb	r1, [r0, #9]
    b6ca:	4770      	bx	lr
    b6cc:	20001124 	.word	0x20001124
    b6d0:	4a05      	ldr	r2, [pc, #20]	; (b6e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x430>)
    b6d2:	79d2      	ldrb	r2, [r2, #7]
    b6d4:	2a01      	cmp	r2, #1
    b6d6:	d006      	beq.n	b6e6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x42e>
    b6d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b6dc:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    b6e0:	fbb1 f1f2 	udiv	r1, r1, r2
    b6e4:	1a40      	subs	r0, r0, r1
    b6e6:	4770      	bx	lr
    b6e8:	20001124 	.word	0x20001124
    b6ec:	b570      	push	{r4, r5, r6, lr}
    b6ee:	4c13      	ldr	r4, [pc, #76]	; (b73c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x484>)
    b6f0:	4603      	mov	r3, r0
    b6f2:	460d      	mov	r5, r1
    b6f4:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    b6f8:	2000      	movs	r0, #0
    b6fa:	b15a      	cbz	r2, b714 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    b6fc:	4621      	mov	r1, r4
    b6fe:	f891 1020 	ldrb.w	r1, [r1, #32]
    b702:	b163      	cbz	r3, b71e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x466>
    b704:	2b01      	cmp	r3, #1
    b706:	d111      	bne.n	b72c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x474>
    b708:	2a01      	cmp	r2, #1
    b70a:	4628      	mov	r0, r5
    b70c:	d012      	beq.n	b734 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x47c>
    b70e:	f004 fb4e 	bl	fdae <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    b712:	e009      	b.n	b728 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    b714:	f240 7152 	movw	r1, #1874	; 0x752
    b718:	203e      	movs	r0, #62	; 0x3e
    b71a:	f7f8 fb87 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b71e:	2a01      	cmp	r2, #1
    b720:	4628      	mov	r0, r5
    b722:	d004      	beq.n	b72e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x476>
    b724:	f004 fb51 	bl	fdca <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    b728:	69e1      	ldr	r1, [r4, #28]
    b72a:	4408      	add	r0, r1
    b72c:	bd70      	pop	{r4, r5, r6, pc}
    b72e:	f004 fb66 	bl	fdfe <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    b732:	e7f9      	b.n	b728 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    b734:	f004 fb54 	bl	fde0 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    b738:	e7f6      	b.n	b728 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    b73a:	0000      	.short	0x0000
    b73c:	20001124 	.word	0x20001124
    b740:	b510      	push	{r4, lr}
    b742:	2200      	movs	r2, #0
    b744:	2901      	cmp	r1, #1
    b746:	d008      	beq.n	b75a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4a2>
    b748:	2902      	cmp	r1, #2
    b74a:	d004      	beq.n	b756 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x49e>
    b74c:	f240 2163 	movw	r1, #611	; 0x263
    b750:	203e      	movs	r0, #62	; 0x3e
    b752:	f7f8 fb6b 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b756:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    b75a:	4905      	ldr	r1, [pc, #20]	; (b770 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4b8>)
    b75c:	430a      	orrs	r2, r1
    b75e:	4905      	ldr	r1, [pc, #20]	; (b774 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>)
    b760:	600a      	str	r2, [r1, #0]
    b762:	4905      	ldr	r1, [pc, #20]	; (b778 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4c0>)
    b764:	4308      	orrs	r0, r1
    b766:	4903      	ldr	r1, [pc, #12]	; (b774 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>)
    b768:	1d09      	adds	r1, r1, #4
    b76a:	6008      	str	r0, [r1, #0]
    b76c:	bd10      	pop	{r4, pc}
    b76e:	0000      	.short	0x0000
    b770:	00100108 	.word	0x00100108
    b774:	40001514 	.word	0x40001514
    b778:	02030000 	.word	0x02030000

0000b77c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    b77c:	4901      	ldr	r1, [pc, #4]	; (b784 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    b77e:	b2c0      	uxtb	r0, r0
    b780:	6008      	str	r0, [r1, #0]
    b782:	4770      	bx	lr
    b784:	4000150c 	.word	0x4000150c

0000b788 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
    b788:	b510      	push	{r4, lr}
    b78a:	4907      	ldr	r1, [pc, #28]	; (b7a8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x20>)
    b78c:	2801      	cmp	r0, #1
    b78e:	d005      	beq.n	b79c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x14>
    b790:	2802      	cmp	r0, #2
    b792:	d005      	beq.n	b7a0 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x18>
    b794:	218b      	movs	r1, #139	; 0x8b
    b796:	203f      	movs	r0, #63	; 0x3f
    b798:	f7f8 fb48 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b79c:	2003      	movs	r0, #3
    b79e:	e000      	b.n	b7a2 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1a>
    b7a0:	2004      	movs	r0, #4
    b7a2:	6008      	str	r0, [r1, #0]
    b7a4:	bd10      	pop	{r4, pc}
    b7a6:	0000      	.short	0x0000
    b7a8:	40001510 	.word	0x40001510

0000b7ac <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
    b7ac:	4770      	bx	lr
    b7ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b7b2:	000d      	movs	r5, r1
    b7b4:	4604      	mov	r4, r0
    b7b6:	f04f 0602 	mov.w	r6, #2
    b7ba:	f04f 0701 	mov.w	r7, #1
    b7be:	d008      	beq.n	b7d2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x26>
    b7c0:	7828      	ldrb	r0, [r5, #0]
    b7c2:	b1d0      	cbz	r0, b7fa <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4e>
    b7c4:	2801      	cmp	r0, #1
    b7c6:	d007      	beq.n	b7d8 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2c>
    b7c8:	2802      	cmp	r0, #2
    b7ca:	d014      	beq.n	b7f6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    b7cc:	2803      	cmp	r0, #3
    b7ce:	d13b      	bne.n	b848 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x9c>
    b7d0:	e016      	b.n	b800 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x54>
    b7d2:	f880 7020 	strb.w	r7, [r0, #32]
    b7d6:	e00e      	b.n	b7f6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    b7d8:	6868      	ldr	r0, [r5, #4]
    b7da:	28c8      	cmp	r0, #200	; 0xc8
    b7dc:	d303      	bcc.n	b7e6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x3a>
    b7de:	2104      	movs	r1, #4
    b7e0:	f7f5 fe22 	bl	1428 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    b7e4:	b108      	cbz	r0, b7ea <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x3e>
    b7e6:	2600      	movs	r6, #0
    b7e8:	e007      	b.n	b7fa <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4e>
    b7ea:	4620      	mov	r0, r4
    b7ec:	6869      	ldr	r1, [r5, #4]
    b7ee:	f000 f92a 	bl	ba46 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x29a>
    b7f2:	2601      	movs	r6, #1
    b7f4:	e001      	b.n	b7fa <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4e>
    b7f6:	f7f4 fe35 	bl	464 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x64>
    b7fa:	4630      	mov	r0, r6
    b7fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b800:	7820      	ldrb	r0, [r4, #0]
    b802:	2800      	cmp	r0, #0
    b804:	d1f7      	bne.n	b7f6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    b806:	6868      	ldr	r0, [r5, #4]
    b808:	f7f4 fdfe 	bl	408 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x8>
    b80c:	b1e0      	cbz	r0, b848 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x9c>
    b80e:	6869      	ldr	r1, [r5, #4]
    b810:	7808      	ldrb	r0, [r1, #0]
    b812:	b128      	cbz	r0, b820 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x74>
    b814:	78a0      	ldrb	r0, [r4, #2]
    b816:	2805      	cmp	r0, #5
    b818:	d007      	beq.n	b82a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x7e>
    b81a:	f240 1179 	movw	r1, #377	; 0x179
    b81e:	e010      	b.n	b842 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x96>
    b820:	4620      	mov	r0, r4
    b822:	f000 f918 	bl	ba56 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2aa>
    b826:	7067      	strb	r7, [r4, #1]
    b828:	e7e5      	b.n	b7f6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    b82a:	4620      	mov	r0, r4
    b82c:	f000 f92b 	bl	ba86 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2da>
    b830:	78e0      	ldrb	r0, [r4, #3]
    b832:	f104 010c 	add.w	r1, r4, #12
    b836:	f000 f80a 	bl	b84e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xa2>
    b83a:	2800      	cmp	r0, #0
    b83c:	d1db      	bne.n	b7f6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    b83e:	f240 117b 	movw	r1, #379	; 0x17b
    b842:	206a      	movs	r0, #106	; 0x6a
    b844:	f7f8 f846 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b848:	f884 7020 	strb.w	r7, [r4, #32]
    b84c:	e7d3      	b.n	b7f6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    b84e:	f7f6 b837 	b.w	18c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    b852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b856:	460d      	mov	r5, r1
    b858:	0004      	movs	r4, r0
    b85a:	d00b      	beq.n	b874 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xc8>
    b85c:	7926      	ldrb	r6, [r4, #4]
    b85e:	2700      	movs	r7, #0
    b860:	2002      	movs	r0, #2
    b862:	2d09      	cmp	r5, #9
    b864:	d27b      	bcs.n	b95e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1b2>
    b866:	e8df f005 	tbb	[pc, r5]
    b86a:	1008      	.short	0x1008
    b86c:	645b2e2e 	.word	0x645b2e2e
    b870:	0086977c 	.word	0x0086977c
    b874:	f240 1193 	movw	r1, #403	; 0x193
    b878:	e0e2      	b.n	ba40 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b87a:	78a0      	ldrb	r0, [r4, #2]
    b87c:	2804      	cmp	r0, #4
    b87e:	d06f      	beq.n	b960 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1b4>
    b880:	2803      	cmp	r0, #3
    b882:	d0fc      	beq.n	b87e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xd2>
    b884:	f44f 71cf 	mov.w	r1, #414	; 0x19e
    b888:	e0da      	b.n	ba40 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b88a:	78a0      	ldrb	r0, [r4, #2]
    b88c:	2804      	cmp	r0, #4
    b88e:	d004      	beq.n	b89a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xee>
    b890:	2803      	cmp	r0, #3
    b892:	d002      	beq.n	b89a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xee>
    b894:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
    b898:	e0d2      	b.n	ba40 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b89a:	2005      	movs	r0, #5
    b89c:	70a0      	strb	r0, [r4, #2]
    b89e:	f884 7020 	strb.w	r7, [r4, #32]
    b8a2:	7820      	ldrb	r0, [r4, #0]
    b8a4:	bb80      	cbnz	r0, b908 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x15c>
    b8a6:	2100      	movs	r1, #0
    b8a8:	4620      	mov	r0, r4
    b8aa:	f000 f8cc 	bl	ba46 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x29a>
    b8ae:	7b20      	ldrb	r0, [r4, #12]
    b8b0:	2801      	cmp	r0, #1
    b8b2:	d004      	beq.n	b8be <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x112>
    b8b4:	69a0      	ldr	r0, [r4, #24]
    b8b6:	61e0      	str	r0, [r4, #28]
    b8b8:	2100      	movs	r1, #0
    b8ba:	68a2      	ldr	r2, [r4, #8]
    b8bc:	e041      	b.n	b942 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x196>
    b8be:	78e0      	ldrb	r0, [r4, #3]
    b8c0:	f7f5 feda 	bl	1678 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    b8c4:	e7f7      	b.n	b8b6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x10a>
    b8c6:	78a1      	ldrb	r1, [r4, #2]
    b8c8:	2904      	cmp	r1, #4
    b8ca:	d004      	beq.n	b8d6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x12a>
    b8cc:	2903      	cmp	r1, #3
    b8ce:	d002      	beq.n	b8d6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x12a>
    b8d0:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
    b8d4:	e0b4      	b.n	ba40 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b8d6:	7822      	ldrb	r2, [r4, #0]
    b8d8:	b122      	cbz	r2, b8e4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x138>
    b8da:	4621      	mov	r1, r4
    b8dc:	4630      	mov	r0, r6
    b8de:	f000 f8ee 	bl	babe <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x312>
    b8e2:	e0a4      	b.n	ba2e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x282>
    b8e4:	2904      	cmp	r1, #4
    b8e6:	d000      	beq.n	b8ea <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x13e>
    b8e8:	2001      	movs	r0, #1
    b8ea:	70a0      	strb	r0, [r4, #2]
    b8ec:	68a2      	ldr	r2, [r4, #8]
    b8ee:	2d02      	cmp	r5, #2
    b8f0:	d00b      	beq.n	b90a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x15e>
    b8f2:	2106      	movs	r1, #6
    b8f4:	4630      	mov	r0, r6
    b8f6:	4790      	blx	r2
    b8f8:	2800      	cmp	r0, #0
    b8fa:	d06b      	beq.n	b9d4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x228>
    b8fc:	7800      	ldrb	r0, [r0, #0]
    b8fe:	2800      	cmp	r0, #0
    b900:	d068      	beq.n	b9d4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x228>
    b902:	f44f 71ed 	mov.w	r1, #474	; 0x1da
    b906:	e09b      	b.n	ba40 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b908:	e031      	b.n	b96e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1c2>
    b90a:	2105      	movs	r1, #5
    b90c:	4630      	mov	r0, r6
    b90e:	4790      	blx	r2
    b910:	2800      	cmp	r0, #0
    b912:	d071      	beq.n	b9f8 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    b914:	7800      	ldrb	r0, [r0, #0]
    b916:	2800      	cmp	r0, #0
    b918:	d06e      	beq.n	b9f8 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    b91a:	f240 11d5 	movw	r1, #469	; 0x1d5
    b91e:	e08f      	b.n	ba40 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b920:	78a0      	ldrb	r0, [r4, #2]
    b922:	2805      	cmp	r0, #5
    b924:	d002      	beq.n	b92c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x180>
    b926:	f240 11e1 	movw	r1, #481	; 0x1e1
    b92a:	e089      	b.n	ba40 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b92c:	2102      	movs	r1, #2
    b92e:	68a2      	ldr	r2, [r4, #8]
    b930:	e007      	b.n	b942 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x196>
    b932:	78a0      	ldrb	r0, [r4, #2]
    b934:	2805      	cmp	r0, #5
    b936:	d002      	beq.n	b93e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x192>
    b938:	f240 11e7 	movw	r1, #487	; 0x1e7
    b93c:	e080      	b.n	ba40 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b93e:	68a2      	ldr	r2, [r4, #8]
    b940:	2101      	movs	r1, #1
    b942:	4630      	mov	r0, r6
    b944:	4790      	blx	r2
    b946:	4601      	mov	r1, r0
    b948:	4620      	mov	r0, r4
    b94a:	f7ff ff30 	bl	b7ae <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    b94e:	2802      	cmp	r0, #2
    b950:	d06d      	beq.n	ba2e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x282>
    b952:	b3f0      	cbz	r0, b9d2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x226>
    b954:	2801      	cmp	r0, #1
    b956:	d064      	beq.n	ba22 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x276>
    b958:	f240 2127 	movw	r1, #551	; 0x227
    b95c:	e070      	b.n	ba40 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b95e:	e05d      	b.n	ba1c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x270>
    b960:	e067      	b.n	ba32 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x286>
    b962:	78a0      	ldrb	r0, [r4, #2]
    b964:	2805      	cmp	r0, #5
    b966:	d002      	beq.n	b96e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1c2>
    b968:	f240 11ed 	movw	r1, #493	; 0x1ed
    b96c:	e068      	b.n	ba40 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b96e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b972:	f7f4 bd77 	b.w	464 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x64>
    b976:	78a0      	ldrb	r0, [r4, #2]
    b978:	2805      	cmp	r0, #5
    b97a:	d002      	beq.n	b982 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1d6>
    b97c:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
    b980:	e05e      	b.n	ba40 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b982:	68a2      	ldr	r2, [r4, #8]
    b984:	210a      	movs	r1, #10
    b986:	4630      	mov	r0, r6
    b988:	4790      	blx	r2
    b98a:	4601      	mov	r1, r0
    b98c:	4620      	mov	r0, r4
    b98e:	f7ff ff0e 	bl	b7ae <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    b992:	f240 11f5 	movw	r1, #501	; 0x1f5
    b996:	e053      	b.n	ba40 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b998:	78a1      	ldrb	r1, [r4, #2]
    b99a:	2905      	cmp	r1, #5
    b99c:	d006      	beq.n	b9ac <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x200>
    b99e:	7862      	ldrb	r2, [r4, #1]
    b9a0:	b10a      	cbz	r2, b9a6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1fa>
    b9a2:	2903      	cmp	r1, #3
    b9a4:	d002      	beq.n	b9ac <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x200>
    b9a6:	f240 11f9 	movw	r1, #505	; 0x1f9
    b9aa:	e049      	b.n	ba40 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b9ac:	7821      	ldrb	r1, [r4, #0]
    b9ae:	b129      	cbz	r1, b9bc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x210>
    b9b0:	4621      	mov	r1, r4
    b9b2:	4630      	mov	r0, r6
    b9b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b9b8:	f000 b881 	b.w	babe <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x312>
    b9bc:	f894 1020 	ldrb.w	r1, [r4, #32]
    b9c0:	b189      	cbz	r1, b9e6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x23a>
    b9c2:	f884 7020 	strb.w	r7, [r4, #32]
    b9c6:	70a0      	strb	r0, [r4, #2]
    b9c8:	68a2      	ldr	r2, [r4, #8]
    b9ca:	2108      	movs	r1, #8
    b9cc:	4630      	mov	r0, r6
    b9ce:	4790      	blx	r2
    b9d0:	e001      	b.n	b9d6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x22a>
    b9d2:	e029      	b.n	ba28 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x27c>
    b9d4:	e02b      	b.n	ba2e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x282>
    b9d6:	2800      	cmp	r0, #0
    b9d8:	d00e      	beq.n	b9f8 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    b9da:	7800      	ldrb	r0, [r0, #0]
    b9dc:	2800      	cmp	r0, #0
    b9de:	d00b      	beq.n	b9f8 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    b9e0:	f240 2105 	movw	r1, #517	; 0x205
    b9e4:	e02c      	b.n	ba40 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b9e6:	7861      	ldrb	r1, [r4, #1]
    b9e8:	b159      	cbz	r1, ba02 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x256>
    b9ea:	78e0      	ldrb	r0, [r4, #3]
    b9ec:	f104 010c 	add.w	r1, r4, #12
    b9f0:	f7ff ff2d 	bl	b84e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xa2>
    b9f4:	b110      	cbz	r0, b9fc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x250>
    b9f6:	7067      	strb	r7, [r4, #1]
    b9f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b9fc:	f240 2109 	movw	r1, #521	; 0x209
    ba00:	e01e      	b.n	ba40 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    ba02:	70a0      	strb	r0, [r4, #2]
    ba04:	68a2      	ldr	r2, [r4, #8]
    ba06:	2107      	movs	r1, #7
    ba08:	4630      	mov	r0, r6
    ba0a:	4790      	blx	r2
    ba0c:	2800      	cmp	r0, #0
    ba0e:	d0f3      	beq.n	b9f8 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    ba10:	7800      	ldrb	r0, [r0, #0]
    ba12:	2800      	cmp	r0, #0
    ba14:	d0f0      	beq.n	b9f8 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    ba16:	f240 2111 	movw	r1, #529	; 0x211
    ba1a:	e011      	b.n	ba40 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    ba1c:	f240 2116 	movw	r1, #534	; 0x216
    ba20:	e00e      	b.n	ba40 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    ba22:	2104      	movs	r1, #4
    ba24:	68a2      	ldr	r2, [r4, #8]
    ba26:	e78c      	b.n	b942 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x196>
    ba28:	2103      	movs	r1, #3
    ba2a:	68a2      	ldr	r2, [r4, #8]
    ba2c:	e789      	b.n	b942 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x196>
    ba2e:	2d00      	cmp	r5, #0
    ba30:	d1e2      	bne.n	b9f8 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    ba32:	f000 f8f2 	bl	bc1a <sym_WGWJTNZTDUUYDCZS4UGNX4L4JID5HLG6XRROR3Q>
    ba36:	6800      	ldr	r0, [r0, #0]
    ba38:	2800      	cmp	r0, #0
    ba3a:	d0dd      	beq.n	b9f8 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    ba3c:	f240 2131 	movw	r1, #561	; 0x231
    ba40:	206a      	movs	r0, #106	; 0x6a
    ba42:	f7f7 ff47 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ba46:	4602      	mov	r2, r0
    ba48:	7b03      	ldrb	r3, [r0, #12]
    ba4a:	6900      	ldr	r0, [r0, #16]
    ba4c:	4408      	add	r0, r1
    ba4e:	6110      	str	r0, [r2, #16]
    ba50:	3859      	subs	r0, #89	; 0x59
    ba52:	f7f6 bdc9 	b.w	25e8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    ba56:	2201      	movs	r2, #1
    ba58:	7302      	strb	r2, [r0, #12]
    ba5a:	2200      	movs	r2, #0
    ba5c:	75c2      	strb	r2, [r0, #23]
    ba5e:	790a      	ldrb	r2, [r1, #4]
    ba60:	b16a      	cbz	r2, ba7e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2d2>
    ba62:	2200      	movs	r2, #0
    ba64:	8282      	strh	r2, [r0, #20]
    ba66:	794a      	ldrb	r2, [r1, #5]
    ba68:	b15a      	cbz	r2, ba82 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2d6>
    ba6a:	2204      	movs	r2, #4
    ba6c:	7582      	strb	r2, [r0, #22]
    ba6e:	688a      	ldr	r2, [r1, #8]
    ba70:	326a      	adds	r2, #106	; 0x6a
    ba72:	6102      	str	r2, [r0, #16]
    ba74:	68c9      	ldr	r1, [r1, #12]
    ba76:	6181      	str	r1, [r0, #24]
    ba78:	2103      	movs	r1, #3
    ba7a:	7081      	strb	r1, [r0, #2]
    ba7c:	4770      	bx	lr
    ba7e:	222b      	movs	r2, #43	; 0x2b
    ba80:	e7f0      	b.n	ba64 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2b8>
    ba82:	2203      	movs	r2, #3
    ba84:	e7f2      	b.n	ba6c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2c0>
    ba86:	b510      	push	{r4, lr}
    ba88:	4604      	mov	r4, r0
    ba8a:	2000      	movs	r0, #0
    ba8c:	7320      	strb	r0, [r4, #12]
    ba8e:	75e0      	strb	r0, [r4, #23]
    ba90:	7908      	ldrb	r0, [r1, #4]
    ba92:	b180      	cbz	r0, bab6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x30a>
    ba94:	2000      	movs	r0, #0
    ba96:	82a0      	strh	r0, [r4, #20]
    ba98:	7948      	ldrb	r0, [r1, #5]
    ba9a:	b170      	cbz	r0, baba <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x30e>
    ba9c:	2004      	movs	r0, #4
    ba9e:	75a0      	strb	r0, [r4, #22]
    baa0:	68c8      	ldr	r0, [r1, #12]
    baa2:	306a      	adds	r0, #106	; 0x6a
    baa4:	6120      	str	r0, [r4, #16]
    baa6:	6889      	ldr	r1, [r1, #8]
    baa8:	69e0      	ldr	r0, [r4, #28]
    baaa:	f7f5 fd8f 	bl	15cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    baae:	61a0      	str	r0, [r4, #24]
    bab0:	2004      	movs	r0, #4
    bab2:	70a0      	strb	r0, [r4, #2]
    bab4:	bd10      	pop	{r4, pc}
    bab6:	202b      	movs	r0, #43	; 0x2b
    bab8:	e7ed      	b.n	ba96 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2ea>
    baba:	2003      	movs	r0, #3
    babc:	e7ef      	b.n	ba9e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2f2>
    babe:	b570      	push	{r4, r5, r6, lr}
    bac0:	4605      	mov	r5, r0
    bac2:	460c      	mov	r4, r1
    bac4:	78c8      	ldrb	r0, [r1, #3]
    bac6:	f7f6 fb57 	bl	2178 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    baca:	b178      	cbz	r0, baec <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x340>
    bacc:	4620      	mov	r0, r4
    bace:	f000 f810 	bl	baf2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x346>
    bad2:	68a2      	ldr	r2, [r4, #8]
    bad4:	2109      	movs	r1, #9
    bad6:	4628      	mov	r0, r5
    bad8:	4790      	blx	r2
    bada:	2800      	cmp	r0, #0
    badc:	d008      	beq.n	baf0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x344>
    bade:	7800      	ldrb	r0, [r0, #0]
    bae0:	2800      	cmp	r0, #0
    bae2:	d005      	beq.n	baf0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x344>
    bae4:	21db      	movs	r1, #219	; 0xdb
    bae6:	206a      	movs	r0, #106	; 0x6a
    bae8:	f7f7 fef4 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    baec:	21d7      	movs	r1, #215	; 0xd7
    baee:	e7fa      	b.n	bae6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x33a>
    baf0:	bd70      	pop	{r4, r5, r6, pc}
    baf2:	2100      	movs	r1, #0
    baf4:	7081      	strb	r1, [r0, #2]
    baf6:	7001      	strb	r1, [r0, #0]
    baf8:	7041      	strb	r1, [r0, #1]
    bafa:	4770      	bx	lr

0000bafc <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    bafc:	b570      	push	{r4, r5, r6, lr}
    bafe:	f7f4 fd0b 	bl	518 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    bb02:	4605      	mov	r5, r0
    bb04:	2400      	movs	r4, #0
    bb06:	e006      	b.n	bb16 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    bb08:	4620      	mov	r0, r4
    bb0a:	f7f4 fd0b 	bl	524 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    bb0e:	f7ff fff0 	bl	baf2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x346>
    bb12:	1c64      	adds	r4, r4, #1
    bb14:	b2e4      	uxtb	r4, r4
    bb16:	42ac      	cmp	r4, r5
    bb18:	d3f6      	bcc.n	bb08 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    bb1a:	bd70      	pop	{r4, r5, r6, pc}

0000bb1c <mpsl_timeslot_request>:
    bb1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bb20:	460d      	mov	r5, r1
    bb22:	f7f4 fcff 	bl	524 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    bb26:	0004      	movs	r4, r0
    bb28:	d007      	beq.n	bb3a <mpsl_timeslot_request+0x1e>
    bb2a:	78a0      	ldrb	r0, [r4, #2]
    bb2c:	f06f 0622 	mvn.w	r6, #34	; 0x22
    bb30:	2801      	cmp	r0, #1
    bb32:	d006      	beq.n	bb42 <mpsl_timeslot_request+0x26>
    bb34:	2802      	cmp	r0, #2
    bb36:	d110      	bne.n	bb5a <mpsl_timeslot_request+0x3e>
    bb38:	e003      	b.n	bb42 <mpsl_timeslot_request+0x26>
    bb3a:	f06f 0001 	mvn.w	r0, #1
    bb3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bb42:	f06f 0715 	mvn.w	r7, #21
    bb46:	b155      	cbz	r5, bb5e <mpsl_timeslot_request+0x42>
    bb48:	4628      	mov	r0, r5
    bb4a:	f7f4 fc5d 	bl	408 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x8>
    bb4e:	b130      	cbz	r0, bb5e <mpsl_timeslot_request+0x42>
    bb50:	7828      	ldrb	r0, [r5, #0]
    bb52:	b130      	cbz	r0, bb62 <mpsl_timeslot_request+0x46>
    bb54:	78a0      	ldrb	r0, [r4, #2]
    bb56:	2802      	cmp	r0, #2
    bb58:	d008      	beq.n	bb6c <mpsl_timeslot_request+0x50>
    bb5a:	4630      	mov	r0, r6
    bb5c:	e7ef      	b.n	bb3e <mpsl_timeslot_request+0x22>
    bb5e:	4638      	mov	r0, r7
    bb60:	e7ed      	b.n	bb3e <mpsl_timeslot_request+0x22>
    bb62:	4629      	mov	r1, r5
    bb64:	4620      	mov	r0, r4
    bb66:	f7ff ff76 	bl	ba56 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2aa>
    bb6a:	e003      	b.n	bb74 <mpsl_timeslot_request+0x58>
    bb6c:	4629      	mov	r1, r5
    bb6e:	4620      	mov	r0, r4
    bb70:	f7ff ff89 	bl	ba86 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2da>
    bb74:	78e0      	ldrb	r0, [r4, #3]
    bb76:	f104 010c 	add.w	r1, r4, #12
    bb7a:	f7ff fe68 	bl	b84e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xa2>
    bb7e:	b108      	cbz	r0, bb84 <mpsl_timeslot_request+0x68>
    bb80:	2000      	movs	r0, #0
    bb82:	e7dc      	b.n	bb3e <mpsl_timeslot_request+0x22>
    bb84:	f44f 712b 	mov.w	r1, #684	; 0x2ac
    bb88:	206a      	movs	r0, #106	; 0x6a
    bb8a:	f7f7 fea3 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

0000bb8e <mpsl_timeslot_session_close>:
    bb8e:	b510      	push	{r4, lr}
    bb90:	4604      	mov	r4, r0
    bb92:	f7f4 fcc7 	bl	524 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    bb96:	0001      	movs	r1, r0
    bb98:	d004      	beq.n	bba4 <mpsl_timeslot_session_close+0x16>
    bb9a:	7808      	ldrb	r0, [r1, #0]
    bb9c:	f06f 0222 	mvn.w	r2, #34	; 0x22
    bba0:	b968      	cbnz	r0, bbbe <mpsl_timeslot_session_close+0x30>
    bba2:	e002      	b.n	bbaa <mpsl_timeslot_session_close+0x1c>
    bba4:	f06f 0001 	mvn.w	r0, #1
    bba8:	bd10      	pop	{r4, pc}
    bbaa:	7888      	ldrb	r0, [r1, #2]
    bbac:	b138      	cbz	r0, bbbe <mpsl_timeslot_session_close+0x30>
    bbae:	2802      	cmp	r0, #2
    bbb0:	d007      	beq.n	bbc2 <mpsl_timeslot_session_close+0x34>
    bbb2:	2801      	cmp	r0, #1
    bbb4:	d005      	beq.n	bbc2 <mpsl_timeslot_session_close+0x34>
    bbb6:	2001      	movs	r0, #1
    bbb8:	7008      	strb	r0, [r1, #0]
    bbba:	2000      	movs	r0, #0
    bbbc:	bd10      	pop	{r4, pc}
    bbbe:	4610      	mov	r0, r2
    bbc0:	bd10      	pop	{r4, pc}
    bbc2:	4620      	mov	r0, r4
    bbc4:	f7ff ff7b 	bl	babe <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x312>
    bbc8:	e7f7      	b.n	bbba <mpsl_timeslot_session_close+0x2c>

0000bbca <mpsl_timeslot_session_count_set>:
    bbca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bbce:	460e      	mov	r6, r1
    bbd0:	4607      	mov	r7, r0
    bbd2:	f7f4 fca1 	bl	518 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    bbd6:	4605      	mov	r5, r0
    bbd8:	2400      	movs	r4, #0
    bbda:	e00a      	b.n	bbf2 <mpsl_timeslot_session_count_set+0x28>
    bbdc:	4620      	mov	r0, r4
    bbde:	f7f4 fca1 	bl	524 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    bbe2:	7880      	ldrb	r0, [r0, #2]
    bbe4:	b118      	cbz	r0, bbee <mpsl_timeslot_session_count_set+0x24>
    bbe6:	f04f 30ff 	mov.w	r0, #4294967295
    bbea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bbee:	1c64      	adds	r4, r4, #1
    bbf0:	b2e4      	uxtb	r4, r4
    bbf2:	42ac      	cmp	r4, r5
    bbf4:	d3f2      	bcc.n	bbdc <mpsl_timeslot_session_count_set+0x12>
    bbf6:	2e08      	cmp	r6, #8
    bbf8:	d902      	bls.n	bc00 <mpsl_timeslot_session_count_set+0x36>
    bbfa:	f06f 0015 	mvn.w	r0, #21
    bbfe:	e7f4      	b.n	bbea <mpsl_timeslot_session_count_set+0x20>
    bc00:	b117      	cbz	r7, bc08 <mpsl_timeslot_session_count_set+0x3e>
    bc02:	4631      	mov	r1, r6
    bc04:	4638      	mov	r0, r7
    bc06:	e001      	b.n	bc0c <mpsl_timeslot_session_count_set+0x42>
    bc08:	2100      	movs	r1, #0
    bc0a:	4608      	mov	r0, r1
    bc0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bc10:	f7f4 bc6e 	b.w	4f0 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>

0000bc14 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    bc14:	2000      	movs	r0, #0
    bc16:	f7f7 ba83 	b.w	3120 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000bc1a <sym_WGWJTNZTDUUYDCZS4UGNX4L4JID5HLG6XRROR3Q>:
    bc1a:	2000      	movs	r0, #0
    bc1c:	f7f7 ba66 	b.w	30ec <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>

0000bc20 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    bc20:	b510      	push	{r4, lr}
    bc22:	f7f6 ff39 	bl	2a98 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    bc26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bc2a:	f000 b800 	b.w	bc2e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>

0000bc2e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    bc2e:	0a41      	lsrs	r1, r0, #9
    bc30:	f643 5209 	movw	r2, #15625	; 0x3d09
    bc34:	4351      	muls	r1, r2
    bc36:	f3c0 0008 	ubfx	r0, r0, #0, #9
    bc3a:	fb10 f002 	smulbb	r0, r0, r2
    bc3e:	f500 7080 	add.w	r0, r0, #256	; 0x100
    bc42:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    bc46:	4770      	bx	lr

0000bc48 <MPSL_IRQ_RADIO_Handler>:
    bc48:	f7f5 bd2a 	b.w	16a0 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    bc4c:	2800      	cmp	r0, #0
    bc4e:	db09      	blt.n	bc64 <MPSL_IRQ_RADIO_Handler+0x1c>
    bc50:	f000 021f 	and.w	r2, r0, #31
    bc54:	2101      	movs	r1, #1
    bc56:	4091      	lsls	r1, r2
    bc58:	0940      	lsrs	r0, r0, #5
    bc5a:	0080      	lsls	r0, r0, #2
    bc5c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bc60:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    bc64:	4770      	bx	lr
    bc66:	2800      	cmp	r0, #0
    bc68:	db0d      	blt.n	bc86 <MPSL_IRQ_RADIO_Handler+0x3e>
    bc6a:	f000 021f 	and.w	r2, r0, #31
    bc6e:	2101      	movs	r1, #1
    bc70:	4091      	lsls	r1, r2
    bc72:	0940      	lsrs	r0, r0, #5
    bc74:	0080      	lsls	r0, r0, #2
    bc76:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bc7a:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    bc7e:	f3bf 8f4f 	dsb	sy
    bc82:	f3bf 8f6f 	isb	sy
    bc86:	4770      	bx	lr

0000bc88 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    bc88:	b570      	push	{r4, r5, r6, lr}
    bc8a:	4602      	mov	r2, r0
    bc8c:	2000      	movs	r0, #0
    bc8e:	2900      	cmp	r1, #0
    bc90:	d01d      	beq.n	bcce <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    bc92:	fba2 0101 	umull	r0, r1, r2, r1
    bc96:	0a40      	lsrs	r0, r0, #9
    bc98:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    bc9c:	0a49      	lsrs	r1, r1, #9
    bc9e:	1c40      	adds	r0, r0, #1
    bca0:	f141 0100 	adc.w	r1, r1, #0
    bca4:	f240 72a1 	movw	r2, #1953	; 0x7a1
    bca8:	1883      	adds	r3, r0, r2
    bcaa:	f141 0100 	adc.w	r1, r1, #0
    bcae:	1c5b      	adds	r3, r3, #1
    bcb0:	f141 0400 	adc.w	r4, r1, #0
    bcb4:	2100      	movs	r1, #0
    bcb6:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    bcba:	41a1      	sbcs	r1, r4
    bcbc:	d203      	bcs.n	bcc6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    bcbe:	2171      	movs	r1, #113	; 0x71
    bcc0:	206d      	movs	r0, #109	; 0x6d
    bcc2:	f7f7 fe07 	bl	38d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bcc6:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    bcca:	fbb0 f0f2 	udiv	r0, r0, r2
    bcce:	bd70      	pop	{r4, r5, r6, pc}
    bcd0:	5840      	ldr	r0, [r0, r1]
    bcd2:	2800      	cmp	r0, #0
    bcd4:	d000      	beq.n	bcd8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    bcd6:	2001      	movs	r0, #1
    bcd8:	4770      	bx	lr
    bcda:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    bcde:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    bce2:	f002 0201 	and.w	r2, r2, #1
    bce6:	03c0      	lsls	r0, r0, #15
    bce8:	d503      	bpl.n	bcf2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    bcea:	428a      	cmp	r2, r1
    bcec:	d101      	bne.n	bcf2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    bcee:	2001      	movs	r0, #1
    bcf0:	4770      	bx	lr
    bcf2:	2000      	movs	r0, #0
    bcf4:	4770      	bx	lr

0000bcf6 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    bcf6:	b510      	push	{r4, lr}
    bcf8:	2101      	movs	r1, #1
    bcfa:	0788      	lsls	r0, r1, #30
    bcfc:	f7f7 fd94 	bl	3828 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    bd00:	2800      	cmp	r0, #0
    bd02:	d000      	beq.n	bd06 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    bd04:	2001      	movs	r0, #1
    bd06:	bd10      	pop	{r4, pc}

0000bd08 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    bd08:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    bd0c:	2101      	movs	r1, #1
    bd0e:	6001      	str	r1, [r0, #0]
    bd10:	4770      	bx	lr

0000bd12 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    bd12:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    bd16:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    bd1a:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    bd1e:	f002 0203 	and.w	r2, r2, #3
    bd22:	03c9      	lsls	r1, r1, #15
    bd24:	d503      	bpl.n	bd2e <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    bd26:	4282      	cmp	r2, r0
    bd28:	d101      	bne.n	bd2e <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    bd2a:	2001      	movs	r0, #1
    bd2c:	4770      	bx	lr
    bd2e:	2000      	movs	r0, #0
    bd30:	4770      	bx	lr

0000bd32 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    bd32:	b510      	push	{r4, lr}
    bd34:	2100      	movs	r1, #0
    bd36:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    bd3a:	f7f7 fd75 	bl	3828 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    bd3e:	2800      	cmp	r0, #0
    bd40:	d000      	beq.n	bd44 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    bd42:	2001      	movs	r0, #1
    bd44:	bd10      	pop	{r4, pc}
    bd46:	2800      	cmp	r0, #0
    bd48:	db09      	blt.n	bd5e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    bd4a:	f000 021f 	and.w	r2, r0, #31
    bd4e:	2101      	movs	r1, #1
    bd50:	4091      	lsls	r1, r2
    bd52:	0940      	lsrs	r0, r0, #5
    bd54:	0080      	lsls	r0, r0, #2
    bd56:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bd5a:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    bd5e:	4770      	bx	lr
    bd60:	2800      	cmp	r0, #0
    bd62:	db0d      	blt.n	bd80 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    bd64:	f000 021f 	and.w	r2, r0, #31
    bd68:	2101      	movs	r1, #1
    bd6a:	4091      	lsls	r1, r2
    bd6c:	0940      	lsrs	r0, r0, #5
    bd6e:	0080      	lsls	r0, r0, #2
    bd70:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bd74:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    bd78:	f3bf 8f4f 	dsb	sy
    bd7c:	f3bf 8f6f 	isb	sy
    bd80:	4770      	bx	lr
    bd82:	1000      	.short	0x1000
    bd84:	00fa0002 	.word	0x00fa0002
    bd88:	57230000 	.word	0x57230000
    bd8c:	31232462 	.word	0x31232462
    bd90:	ee74578f 	.word	0xee74578f
    bd94:	c0882fd1 	.word	0xc0882fd1
    bd98:	a2f74594 	.word	0xa2f74594
    bd9c:	36f9      	.short	0x36f9
    bd9e:	2800      	cmp	r0, #0
    bda0:	db09      	blt.n	bdb6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    bda2:	f000 021f 	and.w	r2, r0, #31
    bda6:	2101      	movs	r1, #1
    bda8:	4091      	lsls	r1, r2
    bdaa:	0940      	lsrs	r0, r0, #5
    bdac:	0080      	lsls	r0, r0, #2
    bdae:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bdb2:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    bdb6:	4770      	bx	lr

0000bdb8 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    bdb8:	f3ef 8110 	mrs	r1, PRIMASK
    bdbc:	b672      	cpsid	i
    bdbe:	7802      	ldrb	r2, [r0, #0]
    bdc0:	2a01      	cmp	r2, #1
    bdc2:	d001      	beq.n	bdc8 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    bdc4:	2201      	movs	r2, #1
    bdc6:	e000      	b.n	bdca <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    bdc8:	2200      	movs	r2, #0
    bdca:	2301      	movs	r3, #1
    bdcc:	7003      	strb	r3, [r0, #0]
    bdce:	b901      	cbnz	r1, bdd2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    bdd0:	b662      	cpsie	i
    bdd2:	b10a      	cbz	r2, bdd8 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    bdd4:	2000      	movs	r0, #0
    bdd6:	4770      	bx	lr
    bdd8:	f06f 0022 	mvn.w	r0, #34	; 0x22
    bddc:	4770      	bx	lr

0000bdde <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    bdde:	2100      	movs	r1, #0
    bde0:	7001      	strb	r1, [r0, #0]
    bde2:	4608      	mov	r0, r1
    bde4:	4770      	bx	lr

0000bde6 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    bde6:	f3ef 8110 	mrs	r1, PRIMASK
    bdea:	b672      	cpsid	i
    bdec:	2200      	movs	r2, #0
    bdee:	7002      	strb	r2, [r0, #0]
    bdf0:	b901      	cbnz	r1, bdf4 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    bdf2:	b662      	cpsie	i
    bdf4:	2000      	movs	r0, #0
    bdf6:	4770      	bx	lr

0000bdf8 <mpsl_low_priority_process>:
    bdf8:	f7f7 be58 	b.w	3aac <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000bdfc <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    bdfc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    be00:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    be04:	280f      	cmp	r0, #15
    be06:	d001      	beq.n	be0c <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    be08:	2000      	movs	r0, #0
    be0a:	4770      	bx	lr
    be0c:	2001      	movs	r0, #1
    be0e:	4770      	bx	lr

0000be10 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    be10:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    be14:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    be18:	280a      	cmp	r0, #10
    be1a:	d001      	beq.n	be20 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    be1c:	2000      	movs	r0, #0
    be1e:	4770      	bx	lr
    be20:	2001      	movs	r0, #1
    be22:	4770      	bx	lr

0000be24 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    be24:	b500      	push	{lr}
    be26:	f7ff fff3 	bl	be10 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    be2a:	b120      	cbz	r0, be36 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    be2c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    be30:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    be34:	b108      	cbz	r0, be3a <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    be36:	2000      	movs	r0, #0
    be38:	bd00      	pop	{pc}
    be3a:	2001      	movs	r0, #1
    be3c:	bd00      	pop	{pc}

0000be3e <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    be3e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    be42:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    be46:	280e      	cmp	r0, #14
    be48:	d001      	beq.n	be4e <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    be4a:	2000      	movs	r0, #0
    be4c:	4770      	bx	lr
    be4e:	2001      	movs	r0, #1
    be50:	4770      	bx	lr

0000be52 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    be52:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    be56:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    be5a:	2810      	cmp	r0, #16
    be5c:	d001      	beq.n	be62 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    be5e:	2000      	movs	r0, #0
    be60:	4770      	bx	lr
    be62:	2001      	movs	r0, #1
    be64:	4770      	bx	lr

0000be66 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    be66:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    be6a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    be6e:	2806      	cmp	r0, #6
    be70:	d003      	beq.n	be7a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    be72:	1c40      	adds	r0, r0, #1
    be74:	d001      	beq.n	be7a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    be76:	2000      	movs	r0, #0
    be78:	4770      	bx	lr
    be7a:	2001      	movs	r0, #1
    be7c:	4770      	bx	lr

0000be7e <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    be7e:	b500      	push	{lr}
    be80:	f7ff fff1 	bl	be66 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    be84:	b148      	cbz	r0, be9a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    be86:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    be8a:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    be8e:	2806      	cmp	r0, #6
    be90:	d303      	bcc.n	be9a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    be92:	1c40      	adds	r0, r0, #1
    be94:	d001      	beq.n	be9a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    be96:	2001      	movs	r0, #1
    be98:	bd00      	pop	{pc}
    be9a:	2000      	movs	r0, #0
    be9c:	bd00      	pop	{pc}

0000be9e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    be9e:	b500      	push	{lr}
    bea0:	f7ff ffe1 	bl	be66 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bea4:	b138      	cbz	r0, beb6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    bea6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    beaa:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    beae:	2806      	cmp	r0, #6
    beb0:	d303      	bcc.n	beba <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    beb2:	1c40      	adds	r0, r0, #1
    beb4:	d001      	beq.n	beba <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    beb6:	2000      	movs	r0, #0
    beb8:	bd00      	pop	{pc}
    beba:	2001      	movs	r0, #1
    bebc:	bd00      	pop	{pc}

0000bebe <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    bebe:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bec2:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    bec6:	280d      	cmp	r0, #13
    bec8:	d001      	beq.n	bece <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    beca:	2000      	movs	r0, #0
    becc:	4770      	bx	lr
    bece:	2001      	movs	r0, #1
    bed0:	4770      	bx	lr

0000bed2 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    bed2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bed6:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    beda:	2808      	cmp	r0, #8
    bedc:	d001      	beq.n	bee2 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    bede:	2000      	movs	r0, #0
    bee0:	4770      	bx	lr
    bee2:	2001      	movs	r0, #1
    bee4:	4770      	bx	lr

0000bee6 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    bee6:	2a00      	cmp	r2, #0
    bee8:	bf04      	itt	eq
    beea:	2000      	moveq	r0, #0
    beec:	4770      	bxeq	lr
    beee:	1e52      	subs	r2, r2, #1
    bef0:	d007      	beq.n	bf02 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
    bef2:	7803      	ldrb	r3, [r0, #0]
    bef4:	f891 c000 	ldrb.w	ip, [r1]
    bef8:	4563      	cmp	r3, ip
    befa:	bf04      	itt	eq
    befc:	1c40      	addeq	r0, r0, #1
    befe:	1c49      	addeq	r1, r1, #1
    bf00:	d0f5      	beq.n	beee <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    bf02:	7800      	ldrb	r0, [r0, #0]
    bf04:	7809      	ldrb	r1, [r1, #0]
    bf06:	1a40      	subs	r0, r0, r1
    bf08:	4770      	bx	lr

0000bf0a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    bf0a:	b4f0      	push	{r4, r5, r6, r7}
    bf0c:	ea80 0c01 	eor.w	ip, r0, r1
    bf10:	4603      	mov	r3, r0
    bf12:	f01c 0f03 	tst.w	ip, #3
    bf16:	d13c      	bne.n	bf92 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    bf18:	f013 0f03 	tst.w	r3, #3
    bf1c:	d00b      	beq.n	bf36 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    bf1e:	2a00      	cmp	r2, #0
    bf20:	bf04      	itt	eq
    bf22:	bcf0      	popeq	{r4, r5, r6, r7}
    bf24:	4770      	bxeq	lr
    bf26:	f811 cb01 	ldrb.w	ip, [r1], #1
    bf2a:	f803 cb01 	strb.w	ip, [r3], #1
    bf2e:	1e52      	subs	r2, r2, #1
    bf30:	f013 0f03 	tst.w	r3, #3
    bf34:	d1f3      	bne.n	bf1e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    bf36:	2a03      	cmp	r2, #3
    bf38:	d94f      	bls.n	bfda <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    bf3a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    bf3e:	d24c      	bcs.n	bfda <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    bf40:	f1c2 0c00 	rsb	ip, r2, #0
    bf44:	ea4f 74ec 	mov.w	r4, ip, asr #31
    bf48:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    bf4c:	ea4f 0cac 	mov.w	ip, ip, asr #2
    bf50:	f1cc 0c00 	rsb	ip, ip, #0
    bf54:	f1bc 0f00 	cmp.w	ip, #0
    bf58:	dd1b      	ble.n	bf92 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    bf5a:	1f0d      	subs	r5, r1, #4
    bf5c:	1f1c      	subs	r4, r3, #4
    bf5e:	f01c 0f01 	tst.w	ip, #1
    bf62:	d003      	beq.n	bf6c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    bf64:	f855 6f04 	ldr.w	r6, [r5, #4]!
    bf68:	f844 6f04 	str.w	r6, [r4, #4]!
    bf6c:	ea5f 066c 	movs.w	r6, ip, asr #1
    bf70:	d007      	beq.n	bf82 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    bf72:	686f      	ldr	r7, [r5, #4]
    bf74:	6067      	str	r7, [r4, #4]
    bf76:	f855 7f08 	ldr.w	r7, [r5, #8]!
    bf7a:	f844 7f08 	str.w	r7, [r4, #8]!
    bf7e:	1e76      	subs	r6, r6, #1
    bf80:	d1f7      	bne.n	bf72 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    bf82:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    bf86:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    bf8a:	f1cc 0c00 	rsb	ip, ip, #0
    bf8e:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    bf92:	2a00      	cmp	r2, #0
    bf94:	bf04      	itt	eq
    bf96:	bcf0      	popeq	{r4, r5, r6, r7}
    bf98:	4770      	bxeq	lr
    bf9a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    bf9e:	d226      	bcs.n	bfee <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    bfa0:	2a00      	cmp	r2, #0
    bfa2:	bfdc      	itt	le
    bfa4:	bcf0      	pople	{r4, r5, r6, r7}
    bfa6:	4770      	bxle	lr
    bfa8:	1e49      	subs	r1, r1, #1
    bfaa:	1e5b      	subs	r3, r3, #1
    bfac:	f012 0f01 	tst.w	r2, #1
    bfb0:	d003      	beq.n	bfba <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    bfb2:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    bfb6:	f803 cf01 	strb.w	ip, [r3, #1]!
    bfba:	1052      	asrs	r2, r2, #1
    bfbc:	bf04      	itt	eq
    bfbe:	bcf0      	popeq	{r4, r5, r6, r7}
    bfc0:	4770      	bxeq	lr
    bfc2:	f891 c001 	ldrb.w	ip, [r1, #1]
    bfc6:	f883 c001 	strb.w	ip, [r3, #1]
    bfca:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    bfce:	f803 cf02 	strb.w	ip, [r3, #2]!
    bfd2:	1e52      	subs	r2, r2, #1
    bfd4:	d1f5      	bne.n	bfc2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    bfd6:	bcf0      	pop	{r4, r5, r6, r7}
    bfd8:	4770      	bx	lr
    bfda:	2a04      	cmp	r2, #4
    bfdc:	d3d9      	bcc.n	bf92 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    bfde:	f851 cb04 	ldr.w	ip, [r1], #4
    bfe2:	1f12      	subs	r2, r2, #4
    bfe4:	f843 cb04 	str.w	ip, [r3], #4
    bfe8:	2a04      	cmp	r2, #4
    bfea:	d2f8      	bcs.n	bfde <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    bfec:	e7d1      	b.n	bf92 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    bfee:	f811 cb01 	ldrb.w	ip, [r1], #1
    bff2:	f803 cb01 	strb.w	ip, [r3], #1
    bff6:	1e52      	subs	r2, r2, #1
    bff8:	d1f9      	bne.n	bfee <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    bffa:	bcf0      	pop	{r4, r5, r6, r7}
    bffc:	4770      	bx	lr

0000bffe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    bffe:	b470      	push	{r4, r5, r6}
    c000:	4603      	mov	r3, r0
    c002:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    c006:	f010 0f03 	tst.w	r0, #3
    c00a:	d009      	beq.n	c020 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    c00c:	2a00      	cmp	r2, #0
    c00e:	bf04      	itt	eq
    c010:	bc70      	popeq	{r4, r5, r6}
    c012:	4770      	bxeq	lr
    c014:	f803 cb01 	strb.w	ip, [r3], #1
    c018:	1e52      	subs	r2, r2, #1
    c01a:	f013 0f03 	tst.w	r3, #3
    c01e:	d1f5      	bne.n	c00c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    c020:	b2c9      	uxtb	r1, r1
    c022:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    c026:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    c02a:	2a03      	cmp	r2, #3
    c02c:	d939      	bls.n	c0a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    c02e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c032:	d236      	bcs.n	c0a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    c034:	4251      	negs	r1, r2
    c036:	17cc      	asrs	r4, r1, #31
    c038:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    c03c:	1089      	asrs	r1, r1, #2
    c03e:	424e      	negs	r6, r1
    c040:	2e00      	cmp	r6, #0
    c042:	dd11      	ble.n	c068 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c044:	1f19      	subs	r1, r3, #4
    c046:	f016 0f01 	tst.w	r6, #1
    c04a:	bf18      	it	ne
    c04c:	f841 5f04 	strne.w	r5, [r1, #4]!
    c050:	1074      	asrs	r4, r6, #1
    c052:	d004      	beq.n	c05e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    c054:	604d      	str	r5, [r1, #4]
    c056:	f841 5f08 	str.w	r5, [r1, #8]!
    c05a:	1e64      	subs	r4, r4, #1
    c05c:	d1fa      	bne.n	c054 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    c05e:	4271      	negs	r1, r6
    c060:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    c064:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    c068:	2a00      	cmp	r2, #0
    c06a:	bf04      	itt	eq
    c06c:	bc70      	popeq	{r4, r5, r6}
    c06e:	4770      	bxeq	lr
    c070:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c074:	d21d      	bcs.n	c0b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    c076:	2a00      	cmp	r2, #0
    c078:	bfdc      	itt	le
    c07a:	bc70      	pople	{r4, r5, r6}
    c07c:	4770      	bxle	lr
    c07e:	1e59      	subs	r1, r3, #1
    c080:	f012 0f01 	tst.w	r2, #1
    c084:	bf18      	it	ne
    c086:	f801 cf01 	strbne.w	ip, [r1, #1]!
    c08a:	1052      	asrs	r2, r2, #1
    c08c:	bf04      	itt	eq
    c08e:	bc70      	popeq	{r4, r5, r6}
    c090:	4770      	bxeq	lr
    c092:	f881 c001 	strb.w	ip, [r1, #1]
    c096:	f801 cf02 	strb.w	ip, [r1, #2]!
    c09a:	1e52      	subs	r2, r2, #1
    c09c:	d1f9      	bne.n	c092 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    c09e:	bc70      	pop	{r4, r5, r6}
    c0a0:	4770      	bx	lr
    c0a2:	2a04      	cmp	r2, #4
    c0a4:	d3e0      	bcc.n	c068 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c0a6:	1f12      	subs	r2, r2, #4
    c0a8:	f843 5b04 	str.w	r5, [r3], #4
    c0ac:	2a04      	cmp	r2, #4
    c0ae:	d2fa      	bcs.n	c0a6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    c0b0:	e7da      	b.n	c068 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c0b2:	f803 cb01 	strb.w	ip, [r3], #1
    c0b6:	1e52      	subs	r2, r2, #1
    c0b8:	d1fb      	bne.n	c0b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    c0ba:	bc70      	pop	{r4, r5, r6}
    c0bc:	4770      	bx	lr
    c0be:	f04f 30ff 	mov.w	r0, #4294967295
    c0c2:	4770      	bx	lr
    c0c4:	2000      	movs	r0, #0
    c0c6:	4770      	bx	lr
    c0c8:	2000      	movs	r0, #0
    c0ca:	4770      	bx	lr
    c0cc:	f04f 30ff 	mov.w	r0, #4294967295
    c0d0:	4770      	bx	lr
    c0d2:	4770      	bx	lr
    c0d4:	4770      	bx	lr
    c0d6:	2000      	movs	r0, #0
    c0d8:	4770      	bx	lr
    c0da:	f04f 30ff 	mov.w	r0, #4294967295
    c0de:	4770      	bx	lr
    c0e0:	f04f 30ff 	mov.w	r0, #4294967295
    c0e4:	4770      	bx	lr
    c0e6:	2100      	movs	r1, #0
    c0e8:	7001      	strb	r1, [r0, #0]
    c0ea:	4770      	bx	lr
    c0ec:	f04f 30ff 	mov.w	r0, #4294967295
    c0f0:	4770      	bx	lr
    c0f2:	f04f 30ff 	mov.w	r0, #4294967295
    c0f6:	4770      	bx	lr
    c0f8:	2000      	movs	r0, #0
    c0fa:	4770      	bx	lr
    c0fc:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    c100:	4605      	mov	r5, r0
    c102:	f100 0003 	add.w	r0, r0, #3
    c106:	f020 0003 	bic.w	r0, r0, #3
    c10a:	460c      	mov	r4, r1
    c10c:	9000      	str	r0, [sp, #0]
    c10e:	7849      	ldrb	r1, [r1, #1]
    c110:	f88d 1004 	strb.w	r1, [sp, #4]
    c114:	78a1      	ldrb	r1, [r4, #2]
    c116:	0016      	movs	r6, r2
    c118:	f88d 1005 	strb.w	r1, [sp, #5]
    c11c:	d000      	beq.n	c120 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x122>
    c11e:	2000      	movs	r0, #0
    c120:	a901      	add	r1, sp, #4
    c122:	f7f8 f87b 	bl	421c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    c126:	9900      	ldr	r1, [sp, #0]
    c128:	4408      	add	r0, r1
    c12a:	9000      	str	r0, [sp, #0]
    c12c:	78a1      	ldrb	r1, [r4, #2]
    c12e:	b141      	cbz	r1, c142 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x144>
    c130:	8a63      	ldrh	r3, [r4, #18]
    c132:	78e2      	ldrb	r2, [r4, #3]
    c134:	b106      	cbz	r6, c138 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x13a>
    c136:	2000      	movs	r0, #0
    c138:	f7f8 fb00 	bl	473c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    c13c:	9900      	ldr	r1, [sp, #0]
    c13e:	4408      	add	r0, r1
    c140:	9000      	str	r0, [sp, #0]
    c142:	4632      	mov	r2, r6
    c144:	4621      	mov	r1, r4
    c146:	4668      	mov	r0, sp
    c148:	f000 f808 	bl	c15c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x15e>
    c14c:	9800      	ldr	r0, [sp, #0]
    c14e:	1dc0      	adds	r0, r0, #7
    c150:	f020 0007 	bic.w	r0, r0, #7
    c154:	9000      	str	r0, [sp, #0]
    c156:	1b40      	subs	r0, r0, r5
    c158:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    c15c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c160:	4606      	mov	r6, r0
    c162:	460c      	mov	r4, r1
    c164:	7808      	ldrb	r0, [r1, #0]
    c166:	7849      	ldrb	r1, [r1, #1]
    c168:	2700      	movs	r7, #0
    c16a:	4408      	add	r0, r1
    c16c:	4691      	mov	r9, r2
    c16e:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    c172:	463d      	mov	r5, r7
    c174:	e00e      	b.n	c194 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x196>
    c176:	7a23      	ldrb	r3, [r4, #8]
    c178:	2b02      	cmp	r3, #2
    c17a:	d200      	bcs.n	c17e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x180>
    c17c:	2302      	movs	r3, #2
    c17e:	79e2      	ldrb	r2, [r4, #7]
    c180:	2a03      	cmp	r2, #3
    c182:	d200      	bcs.n	c186 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x188>
    c184:	2203      	movs	r2, #3
    c186:	79a1      	ldrb	r1, [r4, #6]
    c188:	7960      	ldrb	r0, [r4, #5]
    c18a:	f000 fefc 	bl	cf86 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    c18e:	1c6d      	adds	r5, r5, #1
    c190:	4407      	add	r7, r0
    c192:	b2ed      	uxtb	r5, r5
    c194:	4545      	cmp	r5, r8
    c196:	d3ee      	bcc.n	c176 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x178>
    c198:	6830      	ldr	r0, [r6, #0]
    c19a:	1cc0      	adds	r0, r0, #3
    c19c:	f020 0003 	bic.w	r0, r0, #3
    c1a0:	6030      	str	r0, [r6, #0]
    c1a2:	f1b9 0f00 	cmp.w	r9, #0
    c1a6:	d000      	beq.n	c1aa <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x1ac>
    c1a8:	2000      	movs	r0, #0
    c1aa:	463a      	mov	r2, r7
    c1ac:	4641      	mov	r1, r8
    c1ae:	f7f8 fa0f 	bl	45d0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    c1b2:	6831      	ldr	r1, [r6, #0]
    c1b4:	4408      	add	r0, r1
    c1b6:	6030      	str	r0, [r6, #0]
    c1b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000c1bc <sdc_soc_ecb_block_encrypt>:
    c1bc:	b530      	push	{r4, r5, lr}
    c1be:	460d      	mov	r5, r1
    c1c0:	b08d      	sub	sp, #52	; 0x34
    c1c2:	4614      	mov	r4, r2
    c1c4:	4601      	mov	r1, r0
    c1c6:	2210      	movs	r2, #16
    c1c8:	4668      	mov	r0, sp
    c1ca:	f7ff fe9e 	bl	bf0a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c1ce:	2210      	movs	r2, #16
    c1d0:	4629      	mov	r1, r5
    c1d2:	a804      	add	r0, sp, #16
    c1d4:	f7ff fe99 	bl	bf0a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c1d8:	4668      	mov	r0, sp
    c1da:	f7f8 fbc5 	bl	4968 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    c1de:	b118      	cbz	r0, c1e8 <sdc_soc_ecb_block_encrypt+0x2c>
    c1e0:	f06f 0015 	mvn.w	r0, #21
    c1e4:	b00d      	add	sp, #52	; 0x34
    c1e6:	bd30      	pop	{r4, r5, pc}
    c1e8:	2210      	movs	r2, #16
    c1ea:	4620      	mov	r0, r4
    c1ec:	a908      	add	r1, sp, #32
    c1ee:	f7ff fe8c 	bl	bf0a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c1f2:	2000      	movs	r0, #0
    c1f4:	e7f6      	b.n	c1e4 <sdc_soc_ecb_block_encrypt+0x28>

0000c1f6 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
    c1f6:	2000      	movs	r0, #0
    c1f8:	4770      	bx	lr

0000c1fa <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    c1fa:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    c1fc:	4604      	mov	r4, r0
    c1fe:	1d01      	adds	r1, r0, #4
    c200:	4668      	mov	r0, sp
    c202:	f7f9 febb 	bl	5f7c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    c206:	2800      	cmp	r0, #0
    c208:	d004      	beq.n	c214 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    c20a:	4669      	mov	r1, sp
    c20c:	4620      	mov	r0, r4
    c20e:	f000 f848 	bl	c2a2 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    c212:	2001      	movs	r0, #1
    c214:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000c216 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    c216:	b50e      	push	{r1, r2, r3, lr}
    c218:	4601      	mov	r1, r0
    c21a:	4668      	mov	r0, sp
    c21c:	f000 f827 	bl	c26e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    c220:	4668      	mov	r0, sp
    c222:	f001 fc76 	bl	db12 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    c226:	bd0e      	pop	{r1, r2, r3, pc}

0000c228 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    c228:	b510      	push	{r4, lr}
    c22a:	4604      	mov	r4, r0
    c22c:	4620      	mov	r0, r4
    c22e:	f7f7 fee3 	bl	3ff8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    c232:	2800      	cmp	r0, #0
    c234:	d006      	beq.n	c244 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    c236:	78a1      	ldrb	r1, [r4, #2]
    c238:	7820      	ldrb	r0, [r4, #0]
    c23a:	f000 f804 	bl	c246 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    c23e:	2800      	cmp	r0, #0
    c240:	d0f4      	beq.n	c22c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    c242:	2001      	movs	r0, #1
    c244:	bd10      	pop	{r4, pc}
    c246:	b570      	push	{r4, r5, r6, lr}
    c248:	460c      	mov	r4, r1
    c24a:	4605      	mov	r5, r0
    c24c:	f7f7 ff46 	bl	40dc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    c250:	2800      	cmp	r0, #0
    c252:	d002      	beq.n	c25a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    c254:	2d3e      	cmp	r5, #62	; 0x3e
    c256:	d001      	beq.n	c25c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    c258:	2001      	movs	r0, #1
    c25a:	bd70      	pop	{r4, r5, r6, pc}
    c25c:	2c12      	cmp	r4, #18
    c25e:	d004      	beq.n	c26a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    c260:	4620      	mov	r0, r4
    c262:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c266:	f7f7 bf55 	b.w	4114 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    c26a:	2000      	movs	r0, #0
    c26c:	bd70      	pop	{r4, r5, r6, pc}

0000c26e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    c26e:	880a      	ldrh	r2, [r1, #0]
    c270:	f3c2 020b 	ubfx	r2, r2, #0, #12
    c274:	8002      	strh	r2, [r0, #0]
    c276:	884a      	ldrh	r2, [r1, #2]
    c278:	8042      	strh	r2, [r0, #2]
    c27a:	784a      	ldrb	r2, [r1, #1]
    c27c:	0993      	lsrs	r3, r2, #6
    c27e:	2200      	movs	r2, #0
    c280:	7142      	strb	r2, [r0, #5]
    c282:	784b      	ldrb	r3, [r1, #1]
    c284:	f3c3 1301 	ubfx	r3, r3, #4, #2
    c288:	b11b      	cbz	r3, c292 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c28a:	2b01      	cmp	r3, #1
    c28c:	d005      	beq.n	c29a <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    c28e:	2b02      	cmp	r3, #2
    c290:	d005      	beq.n	c29e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    c292:	7102      	strb	r2, [r0, #4]
    c294:	1d09      	adds	r1, r1, #4
    c296:	6081      	str	r1, [r0, #8]
    c298:	4770      	bx	lr
    c29a:	2201      	movs	r2, #1
    c29c:	e7f9      	b.n	c292 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c29e:	2202      	movs	r2, #2
    c2a0:	e7f7      	b.n	c292 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000c2a2 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    c2a2:	b510      	push	{r4, lr}
    c2a4:	460c      	mov	r4, r1
    c2a6:	7809      	ldrb	r1, [r1, #0]
    c2a8:	7001      	strb	r1, [r0, #0]
    c2aa:	7841      	ldrb	r1, [r0, #1]
    c2ac:	f021 010f 	bic.w	r1, r1, #15
    c2b0:	7041      	strb	r1, [r0, #1]
    c2b2:	8822      	ldrh	r2, [r4, #0]
    c2b4:	f3c2 2203 	ubfx	r2, r2, #8, #4
    c2b8:	4311      	orrs	r1, r2
    c2ba:	7041      	strb	r1, [r0, #1]
    c2bc:	78a2      	ldrb	r2, [r4, #2]
    c2be:	7082      	strb	r2, [r0, #2]
    c2c0:	8862      	ldrh	r2, [r4, #2]
    c2c2:	f021 0130 	bic.w	r1, r1, #48	; 0x30
    c2c6:	0a12      	lsrs	r2, r2, #8
    c2c8:	70c2      	strb	r2, [r0, #3]
    c2ca:	7041      	strb	r1, [r0, #1]
    c2cc:	7922      	ldrb	r2, [r4, #4]
    c2ce:	f002 0203 	and.w	r2, r2, #3
    c2d2:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    c2d6:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    c2da:	7041      	strb	r1, [r0, #1]
    c2dc:	7962      	ldrb	r2, [r4, #5]
    c2de:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    c2e2:	7041      	strb	r1, [r0, #1]
    c2e4:	68a1      	ldr	r1, [r4, #8]
    c2e6:	1d02      	adds	r2, r0, #4
    c2e8:	4291      	cmp	r1, r2
    c2ea:	d006      	beq.n	c2fa <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
    c2ec:	8862      	ldrh	r2, [r4, #2]
    c2ee:	2afb      	cmp	r2, #251	; 0xfb
    c2f0:	d300      	bcc.n	c2f4 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
    c2f2:	22fb      	movs	r2, #251	; 0xfb
    c2f4:	1d00      	adds	r0, r0, #4
    c2f6:	f7ff fe08 	bl	bf0a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c2fa:	78a0      	ldrb	r0, [r4, #2]
    c2fc:	1d00      	adds	r0, r0, #4
    c2fe:	b2c0      	uxtb	r0, r0
    c300:	bd10      	pop	{r4, pc}

0000c302 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    c302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c306:	4604      	mov	r4, r0
    c308:	780f      	ldrb	r7, [r1, #0]
    c30a:	2000      	movs	r0, #0
    c30c:	250c      	movs	r5, #12
    c30e:	2605      	movs	r6, #5
    c310:	223e      	movs	r2, #62	; 0x3e
    c312:	23ff      	movs	r3, #255	; 0xff
    c314:	2f1b      	cmp	r7, #27
    c316:	d27d      	bcs.n	c414 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x112>
    c318:	e8df f007 	tbb	[pc, r7]
    c31c:	27250eea 	.word	0x27250eea
    c320:	816d632d 	.word	0x816d632d
    c324:	bcb1af9b 	.word	0xbcb1af9b
    c328:	eaf4e2c7 	.word	0xeaf4e2c7
    c32c:	d5d231ea 	.word	0xd5d231ea
    c330:	eff0f1fd 	.word	0xeff0f1fd
    c334:	00ecedee 	.word	0x00ecedee
    c338:	7025      	strb	r5, [r4, #0]
    c33a:	7908      	ldrb	r0, [r1, #4]
    c33c:	70a0      	strb	r0, [r4, #2]
    c33e:	7948      	ldrb	r0, [r1, #5]
    c340:	70e0      	strb	r0, [r4, #3]
    c342:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    c346:	0a00      	lsrs	r0, r0, #8
    c348:	7120      	strb	r0, [r4, #4]
    c34a:	79c8      	ldrb	r0, [r1, #7]
    c34c:	7160      	strb	r0, [r4, #5]
    c34e:	7a08      	ldrb	r0, [r1, #8]
    c350:	71a0      	strb	r0, [r4, #6]
    c352:	8908      	ldrh	r0, [r1, #8]
    c354:	0a00      	lsrs	r0, r0, #8
    c356:	71e0      	strb	r0, [r4, #7]
    c358:	7a88      	ldrb	r0, [r1, #10]
    c35a:	7220      	strb	r0, [r4, #8]
    c35c:	8948      	ldrh	r0, [r1, #10]
    c35e:	0a00      	lsrs	r0, r0, #8
    c360:	7260      	strb	r0, [r4, #9]
    c362:	2008      	movs	r0, #8
    c364:	e0c2      	b.n	c4ec <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c366:	2010      	movs	r0, #16
    c368:	e000      	b.n	c36c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x6a>
    c36a:	201a      	movs	r0, #26
    c36c:	7020      	strb	r0, [r4, #0]
    c36e:	7908      	ldrb	r0, [r1, #4]
    c370:	70a0      	strb	r0, [r4, #2]
    c372:	2001      	movs	r0, #1
    c374:	e0ba      	b.n	c4ec <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c376:	4620      	mov	r0, r4
    c378:	f000 f946 	bl	c608 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    c37c:	e0b4      	b.n	c4e8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e6>
    c37e:	7022      	strb	r2, [r4, #0]
    c380:	200a      	movs	r0, #10
    c382:	70a0      	strb	r0, [r4, #2]
    c384:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    c388:	70e0      	strb	r0, [r4, #3]
    c38a:	7888      	ldrb	r0, [r1, #2]
    c38c:	7120      	strb	r0, [r4, #4]
    c38e:	8848      	ldrh	r0, [r1, #2]
    c390:	0a00      	lsrs	r0, r0, #8
    c392:	7160      	strb	r0, [r4, #5]
    c394:	7908      	ldrb	r0, [r1, #4]
    c396:	71a0      	strb	r0, [r4, #6]
    c398:	7948      	ldrb	r0, [r1, #5]
    c39a:	71e0      	strb	r0, [r4, #7]
    c39c:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c3a0:	60a0      	str	r0, [r4, #8]
    c3a2:	8948      	ldrh	r0, [r1, #10]
    c3a4:	81a0      	strh	r0, [r4, #12]
    c3a6:	68c8      	ldr	r0, [r1, #12]
    c3a8:	f8c4 000e 	str.w	r0, [r4, #14]
    c3ac:	8a08      	ldrh	r0, [r1, #16]
    c3ae:	8260      	strh	r0, [r4, #18]
    c3b0:	f8d1 0012 	ldr.w	r0, [r1, #18]
    c3b4:	6160      	str	r0, [r4, #20]
    c3b6:	8ac8      	ldrh	r0, [r1, #22]
    c3b8:	8320      	strh	r0, [r4, #24]
    c3ba:	7e08      	ldrb	r0, [r1, #24]
    c3bc:	76a0      	strb	r0, [r4, #26]
    c3be:	8b08      	ldrh	r0, [r1, #24]
    c3c0:	0a00      	lsrs	r0, r0, #8
    c3c2:	76e0      	strb	r0, [r4, #27]
    c3c4:	7e88      	ldrb	r0, [r1, #26]
    c3c6:	7720      	strb	r0, [r4, #28]
    c3c8:	8b48      	ldrh	r0, [r1, #26]
    c3ca:	0a00      	lsrs	r0, r0, #8
    c3cc:	7760      	strb	r0, [r4, #29]
    c3ce:	7f08      	ldrb	r0, [r1, #28]
    c3d0:	77a0      	strb	r0, [r4, #30]
    c3d2:	8b88      	ldrh	r0, [r1, #28]
    c3d4:	0a00      	lsrs	r0, r0, #8
    c3d6:	77e0      	strb	r0, [r4, #31]
    c3d8:	7f88      	ldrb	r0, [r1, #30]
    c3da:	f884 0020 	strb.w	r0, [r4, #32]
    c3de:	201f      	movs	r0, #31
    c3e0:	e084      	b.n	c4ec <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c3e2:	7022      	strb	r2, [r4, #0]
    c3e4:	2014      	movs	r0, #20
    c3e6:	70a0      	strb	r0, [r4, #2]
    c3e8:	7908      	ldrb	r0, [r1, #4]
    c3ea:	70e0      	strb	r0, [r4, #3]
    c3ec:	8888      	ldrh	r0, [r1, #4]
    c3ee:	0a00      	lsrs	r0, r0, #8
    c3f0:	7120      	strb	r0, [r4, #4]
    c3f2:	7988      	ldrb	r0, [r1, #6]
    c3f4:	e0a7      	b.n	c546 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
    c3f6:	7022      	strb	r2, [r4, #0]
    c3f8:	2004      	movs	r0, #4
    c3fa:	70a0      	strb	r0, [r4, #2]
    c3fc:	7908      	ldrb	r0, [r1, #4]
    c3fe:	70e0      	strb	r0, [r4, #3]
    c400:	7988      	ldrb	r0, [r1, #6]
    c402:	7120      	strb	r0, [r4, #4]
    c404:	88c8      	ldrh	r0, [r1, #6]
    c406:	0a00      	lsrs	r0, r0, #8
    c408:	7160      	strb	r0, [r4, #5]
    c40a:	6888      	ldr	r0, [r1, #8]
    c40c:	f8c4 0006 	str.w	r0, [r4, #6]
    c410:	68c8      	ldr	r0, [r1, #12]
    c412:	e000      	b.n	c416 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    c414:	e06c      	b.n	c4f0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ee>
    c416:	f8c4 000a 	str.w	r0, [r4, #10]
    c41a:	200c      	movs	r0, #12
    c41c:	e066      	b.n	c4ec <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c41e:	7022      	strb	r2, [r4, #0]
    c420:	2003      	movs	r0, #3
    c422:	70a0      	strb	r0, [r4, #2]
    c424:	7908      	ldrb	r0, [r1, #4]
    c426:	70e0      	strb	r0, [r4, #3]
    c428:	7988      	ldrb	r0, [r1, #6]
    c42a:	7120      	strb	r0, [r4, #4]
    c42c:	88c8      	ldrh	r0, [r1, #6]
    c42e:	0a00      	lsrs	r0, r0, #8
    c430:	7160      	strb	r0, [r4, #5]
    c432:	7a08      	ldrb	r0, [r1, #8]
    c434:	71a0      	strb	r0, [r4, #6]
    c436:	8908      	ldrh	r0, [r1, #8]
    c438:	0a00      	lsrs	r0, r0, #8
    c43a:	71e0      	strb	r0, [r4, #7]
    c43c:	7a88      	ldrb	r0, [r1, #10]
    c43e:	7220      	strb	r0, [r4, #8]
    c440:	8948      	ldrh	r0, [r1, #10]
    c442:	0a00      	lsrs	r0, r0, #8
    c444:	7260      	strb	r0, [r4, #9]
    c446:	7b08      	ldrb	r0, [r1, #12]
    c448:	72a0      	strb	r0, [r4, #10]
    c44a:	8988      	ldrh	r0, [r1, #12]
    c44c:	0a00      	lsrs	r0, r0, #8
    c44e:	72e0      	strb	r0, [r4, #11]
    c450:	e0d8      	b.n	c604 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x302>
    c452:	7022      	strb	r2, [r4, #0]
    c454:	70a6      	strb	r6, [r4, #2]
    c456:	7908      	ldrb	r0, [r1, #4]
    c458:	70e0      	strb	r0, [r4, #3]
    c45a:	8888      	ldrh	r0, [r1, #4]
    c45c:	0a00      	lsrs	r0, r0, #8
    c45e:	7120      	strb	r0, [r4, #4]
    c460:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c464:	f8c4 0005 	str.w	r0, [r4, #5]
    c468:	f8d1 000a 	ldr.w	r0, [r1, #10]
    c46c:	f8c4 0009 	str.w	r0, [r4, #9]
    c470:	89c8      	ldrh	r0, [r1, #14]
    c472:	f8a4 000d 	strh.w	r0, [r4, #13]
    c476:	200d      	movs	r0, #13
    c478:	e038      	b.n	c4ec <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c47a:	2011      	movs	r0, #17
    c47c:	e043      	b.n	c506 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x204>
    c47e:	7026      	strb	r6, [r4, #0]
    c480:	7908      	ldrb	r0, [r1, #4]
    c482:	70a0      	strb	r0, [r4, #2]
    c484:	7948      	ldrb	r0, [r1, #5]
    c486:	70e0      	strb	r0, [r4, #3]
    c488:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    c48c:	0a00      	lsrs	r0, r0, #8
    c48e:	7120      	strb	r0, [r4, #4]
    c490:	79c8      	ldrb	r0, [r1, #7]
    c492:	e058      	b.n	c546 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
    c494:	2008      	movs	r0, #8
    c496:	7020      	strb	r0, [r4, #0]
    c498:	7908      	ldrb	r0, [r1, #4]
    c49a:	70a0      	strb	r0, [r4, #2]
    c49c:	7988      	ldrb	r0, [r1, #6]
    c49e:	70e0      	strb	r0, [r4, #3]
    c4a0:	88c8      	ldrh	r0, [r1, #6]
    c4a2:	0a00      	lsrs	r0, r0, #8
    c4a4:	7120      	strb	r0, [r4, #4]
    c4a6:	7a08      	ldrb	r0, [r1, #8]
    c4a8:	e04d      	b.n	c546 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
    c4aa:	2030      	movs	r0, #48	; 0x30
    c4ac:	7020      	strb	r0, [r4, #0]
    c4ae:	7908      	ldrb	r0, [r1, #4]
    c4b0:	70a0      	strb	r0, [r4, #2]
    c4b2:	7988      	ldrb	r0, [r1, #6]
    c4b4:	70e0      	strb	r0, [r4, #3]
    c4b6:	88c8      	ldrh	r0, [r1, #6]
    c4b8:	0a00      	lsrs	r0, r0, #8
    c4ba:	7120      	strb	r0, [r4, #4]
    c4bc:	2003      	movs	r0, #3
    c4be:	e015      	b.n	c4ec <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c4c0:	7022      	strb	r2, [r4, #0]
    c4c2:	2007      	movs	r0, #7
    c4c4:	e044      	b.n	c550 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24e>
    c4c6:	7022      	strb	r2, [r4, #0]
    c4c8:	70a5      	strb	r5, [r4, #2]
    c4ca:	7908      	ldrb	r0, [r1, #4]
    c4cc:	70e0      	strb	r0, [r4, #3]
    c4ce:	7988      	ldrb	r0, [r1, #6]
    c4d0:	7120      	strb	r0, [r4, #4]
    c4d2:	88c8      	ldrh	r0, [r1, #6]
    c4d4:	0a00      	lsrs	r0, r0, #8
    c4d6:	7160      	strb	r0, [r4, #5]
    c4d8:	7a08      	ldrb	r0, [r1, #8]
    c4da:	71a0      	strb	r0, [r4, #6]
    c4dc:	7a48      	ldrb	r0, [r1, #9]
    c4de:	e027      	b.n	c530 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22e>
    c4e0:	4620      	mov	r0, r4
    c4e2:	1d09      	adds	r1, r1, #4
    c4e4:	f7f7 fdcc 	bl	4080 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>
    c4e8:	2800      	cmp	r0, #0
    c4ea:	d001      	beq.n	c4f0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ee>
    c4ec:	7060      	strb	r0, [r4, #1]
    c4ee:	1c80      	adds	r0, r0, #2
    c4f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c4f4:	e073      	b.n	c5de <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2dc>
    c4f6:	e047      	b.n	c588 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x286>
    c4f8:	e028      	b.n	c54c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24a>
    c4fa:	e053      	b.n	c5a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a2>
    c4fc:	e061      	b.n	c5c2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c0>
    c4fe:	e01a      	b.n	c536 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    c500:	e009      	b.n	c516 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x214>
    c502:	e7ff      	b.n	c504 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x202>
    c504:	2057      	movs	r0, #87	; 0x57
    c506:	7020      	strb	r0, [r4, #0]
    c508:	7908      	ldrb	r0, [r1, #4]
    c50a:	70a0      	strb	r0, [r4, #2]
    c50c:	8888      	ldrh	r0, [r1, #4]
    c50e:	0a00      	lsrs	r0, r0, #8
    c510:	70e0      	strb	r0, [r4, #3]
    c512:	2002      	movs	r0, #2
    c514:	e7ea      	b.n	c4ec <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c516:	7022      	strb	r2, [r4, #0]
    c518:	2012      	movs	r0, #18
    c51a:	70a0      	strb	r0, [r4, #2]
    c51c:	7908      	ldrb	r0, [r1, #4]
    c51e:	70e0      	strb	r0, [r4, #3]
    c520:	7948      	ldrb	r0, [r1, #5]
    c522:	7120      	strb	r0, [r4, #4]
    c524:	7988      	ldrb	r0, [r1, #6]
    c526:	7160      	strb	r0, [r4, #5]
    c528:	88c8      	ldrh	r0, [r1, #6]
    c52a:	0a00      	lsrs	r0, r0, #8
    c52c:	71a0      	strb	r0, [r4, #6]
    c52e:	7a08      	ldrb	r0, [r1, #8]
    c530:	71e0      	strb	r0, [r4, #7]
    c532:	2006      	movs	r0, #6
    c534:	e7da      	b.n	c4ec <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c536:	7023      	strb	r3, [r4, #0]
    c538:	20a1      	movs	r0, #161	; 0xa1
    c53a:	70a0      	strb	r0, [r4, #2]
    c53c:	7908      	ldrb	r0, [r1, #4]
    c53e:	70e0      	strb	r0, [r4, #3]
    c540:	7948      	ldrb	r0, [r1, #5]
    c542:	7120      	strb	r0, [r4, #4]
    c544:	2000      	movs	r0, #0
    c546:	7160      	strb	r0, [r4, #5]
    c548:	2004      	movs	r0, #4
    c54a:	e7cf      	b.n	c4ec <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c54c:	7023      	strb	r3, [r4, #0]
    c54e:	20a2      	movs	r0, #162	; 0xa2
    c550:	70a0      	strb	r0, [r4, #2]
    c552:	7908      	ldrb	r0, [r1, #4]
    c554:	70e0      	strb	r0, [r4, #3]
    c556:	8888      	ldrh	r0, [r1, #4]
    c558:	0a00      	lsrs	r0, r0, #8
    c55a:	7120      	strb	r0, [r4, #4]
    c55c:	7988      	ldrb	r0, [r1, #6]
    c55e:	7160      	strb	r0, [r4, #5]
    c560:	88c8      	ldrh	r0, [r1, #6]
    c562:	0a00      	lsrs	r0, r0, #8
    c564:	71a0      	strb	r0, [r4, #6]
    c566:	7a08      	ldrb	r0, [r1, #8]
    c568:	71e0      	strb	r0, [r4, #7]
    c56a:	8908      	ldrh	r0, [r1, #8]
    c56c:	0a00      	lsrs	r0, r0, #8
    c56e:	7220      	strb	r0, [r4, #8]
    c570:	7a88      	ldrb	r0, [r1, #10]
    c572:	7260      	strb	r0, [r4, #9]
    c574:	8948      	ldrh	r0, [r1, #10]
    c576:	0a00      	lsrs	r0, r0, #8
    c578:	72a0      	strb	r0, [r4, #10]
    c57a:	7b08      	ldrb	r0, [r1, #12]
    c57c:	72e0      	strb	r0, [r4, #11]
    c57e:	8988      	ldrh	r0, [r1, #12]
    c580:	0a00      	lsrs	r0, r0, #8
    c582:	7320      	strb	r0, [r4, #12]
    c584:	200b      	movs	r0, #11
    c586:	e7b1      	b.n	c4ec <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c588:	7023      	strb	r3, [r4, #0]
    c58a:	20a3      	movs	r0, #163	; 0xa3
    c58c:	70a0      	strb	r0, [r4, #2]
    c58e:	7908      	ldrb	r0, [r1, #4]
    c590:	70e0      	strb	r0, [r4, #3]
    c592:	8888      	ldrh	r0, [r1, #4]
    c594:	0a00      	lsrs	r0, r0, #8
    c596:	7120      	strb	r0, [r4, #4]
    c598:	7988      	ldrb	r0, [r1, #6]
    c59a:	7160      	strb	r0, [r4, #5]
    c59c:	79c8      	ldrb	r0, [r1, #7]
    c59e:	71a0      	strb	r0, [r4, #6]
    c5a0:	2005      	movs	r0, #5
    c5a2:	e7a3      	b.n	c4ec <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c5a4:	7022      	strb	r2, [r4, #0]
    c5a6:	2013      	movs	r0, #19
    c5a8:	70a0      	strb	r0, [r4, #2]
    c5aa:	7908      	ldrb	r0, [r1, #4]
    c5ac:	70e0      	strb	r0, [r4, #3]
    c5ae:	7948      	ldrb	r0, [r1, #5]
    c5b0:	7120      	strb	r0, [r4, #4]
    c5b2:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c5b6:	f8c4 0005 	str.w	r0, [r4, #5]
    c5ba:	8948      	ldrh	r0, [r1, #10]
    c5bc:	f8a4 0009 	strh.w	r0, [r4, #9]
    c5c0:	e020      	b.n	c604 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x302>
    c5c2:	7023      	strb	r3, [r4, #0]
    c5c4:	20a4      	movs	r0, #164	; 0xa4
    c5c6:	70a0      	strb	r0, [r4, #2]
    c5c8:	7908      	ldrb	r0, [r1, #4]
    c5ca:	70e0      	strb	r0, [r4, #3]
    c5cc:	8888      	ldrh	r0, [r1, #4]
    c5ce:	0a00      	lsrs	r0, r0, #8
    c5d0:	7120      	strb	r0, [r4, #4]
    c5d2:	7988      	ldrb	r0, [r1, #6]
    c5d4:	7160      	strb	r0, [r4, #5]
    c5d6:	79c8      	ldrb	r0, [r1, #7]
    c5d8:	71a0      	strb	r0, [r4, #6]
    c5da:	2007      	movs	r0, #7
    c5dc:	e786      	b.n	c4ec <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c5de:	7023      	strb	r3, [r4, #0]
    c5e0:	2080      	movs	r0, #128	; 0x80
    c5e2:	70a0      	strb	r0, [r4, #2]
    c5e4:	888a      	ldrh	r2, [r1, #4]
    c5e6:	f8a4 2003 	strh.w	r2, [r4, #3]
    c5ea:	88ca      	ldrh	r2, [r1, #6]
    c5ec:	f8a4 2005 	strh.w	r2, [r4, #5]
    c5f0:	7a0a      	ldrb	r2, [r1, #8]
    c5f2:	71e2      	strb	r2, [r4, #7]
    c5f4:	7a4a      	ldrb	r2, [r1, #9]
    c5f6:	8122      	strh	r2, [r4, #8]
    c5f8:	7a8a      	ldrb	r2, [r1, #10]
    c5fa:	72a2      	strb	r2, [r4, #10]
    c5fc:	7ac9      	ldrb	r1, [r1, #11]
    c5fe:	f001 0101 	and.w	r1, r1, #1
    c602:	72e1      	strb	r1, [r4, #11]
    c604:	200a      	movs	r0, #10
    c606:	e771      	b.n	c4ec <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>

0000c608 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    c608:	223e      	movs	r2, #62	; 0x3e
    c60a:	7002      	strb	r2, [r0, #0]
    c60c:	2201      	movs	r2, #1
    c60e:	7082      	strb	r2, [r0, #2]
    c610:	790a      	ldrb	r2, [r1, #4]
    c612:	70c2      	strb	r2, [r0, #3]
    c614:	798a      	ldrb	r2, [r1, #6]
    c616:	7102      	strb	r2, [r0, #4]
    c618:	88ca      	ldrh	r2, [r1, #6]
    c61a:	0a12      	lsrs	r2, r2, #8
    c61c:	7142      	strb	r2, [r0, #5]
    c61e:	7a0a      	ldrb	r2, [r1, #8]
    c620:	7182      	strb	r2, [r0, #6]
    c622:	7a4a      	ldrb	r2, [r1, #9]
    c624:	71c2      	strb	r2, [r0, #7]
    c626:	f8d1 200a 	ldr.w	r2, [r1, #10]
    c62a:	6082      	str	r2, [r0, #8]
    c62c:	89ca      	ldrh	r2, [r1, #14]
    c62e:	8182      	strh	r2, [r0, #12]
    c630:	7c0a      	ldrb	r2, [r1, #16]
    c632:	7382      	strb	r2, [r0, #14]
    c634:	8a0a      	ldrh	r2, [r1, #16]
    c636:	0a12      	lsrs	r2, r2, #8
    c638:	73c2      	strb	r2, [r0, #15]
    c63a:	7c8a      	ldrb	r2, [r1, #18]
    c63c:	7402      	strb	r2, [r0, #16]
    c63e:	8a4a      	ldrh	r2, [r1, #18]
    c640:	0a12      	lsrs	r2, r2, #8
    c642:	7442      	strb	r2, [r0, #17]
    c644:	7d0a      	ldrb	r2, [r1, #20]
    c646:	7482      	strb	r2, [r0, #18]
    c648:	8a8a      	ldrh	r2, [r1, #20]
    c64a:	0a12      	lsrs	r2, r2, #8
    c64c:	74c2      	strb	r2, [r0, #19]
    c64e:	7d89      	ldrb	r1, [r1, #22]
    c650:	7501      	strb	r1, [r0, #20]
    c652:	2013      	movs	r0, #19
    c654:	4770      	bx	lr

0000c656 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    c656:	223e      	movs	r2, #62	; 0x3e
    c658:	7002      	strb	r2, [r0, #0]
    c65a:	2201      	movs	r2, #1
    c65c:	7082      	strb	r2, [r0, #2]
    c65e:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    c662:	70c2      	strb	r2, [r0, #3]
    c664:	788a      	ldrb	r2, [r1, #2]
    c666:	7102      	strb	r2, [r0, #4]
    c668:	884a      	ldrh	r2, [r1, #2]
    c66a:	0a12      	lsrs	r2, r2, #8
    c66c:	7142      	strb	r2, [r0, #5]
    c66e:	790a      	ldrb	r2, [r1, #4]
    c670:	7182      	strb	r2, [r0, #6]
    c672:	794a      	ldrb	r2, [r1, #5]
    c674:	71c2      	strb	r2, [r0, #7]
    c676:	f8d1 2006 	ldr.w	r2, [r1, #6]
    c67a:	6082      	str	r2, [r0, #8]
    c67c:	894a      	ldrh	r2, [r1, #10]
    c67e:	8182      	strh	r2, [r0, #12]
    c680:	7e0a      	ldrb	r2, [r1, #24]
    c682:	7382      	strb	r2, [r0, #14]
    c684:	8b0a      	ldrh	r2, [r1, #24]
    c686:	0a12      	lsrs	r2, r2, #8
    c688:	73c2      	strb	r2, [r0, #15]
    c68a:	7e8a      	ldrb	r2, [r1, #26]
    c68c:	7402      	strb	r2, [r0, #16]
    c68e:	8b4a      	ldrh	r2, [r1, #26]
    c690:	0a12      	lsrs	r2, r2, #8
    c692:	7442      	strb	r2, [r0, #17]
    c694:	7f0a      	ldrb	r2, [r1, #28]
    c696:	7482      	strb	r2, [r0, #18]
    c698:	8b8a      	ldrh	r2, [r1, #28]
    c69a:	0a12      	lsrs	r2, r2, #8
    c69c:	74c2      	strb	r2, [r0, #19]
    c69e:	7f89      	ldrb	r1, [r1, #30]
    c6a0:	7501      	strb	r1, [r0, #20]
    c6a2:	2113      	movs	r1, #19
    c6a4:	7041      	strb	r1, [r0, #1]
    c6a6:	4608      	mov	r0, r1
    c6a8:	4770      	bx	lr

0000c6aa <sdc_hci_data_get>:
    c6aa:	b510      	push	{r4, lr}
    c6ac:	b120      	cbz	r0, c6b8 <sdc_hci_data_get+0xe>
    c6ae:	f7ff fda4 	bl	c1fa <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    c6b2:	b120      	cbz	r0, c6be <sdc_hci_data_get+0x14>
    c6b4:	2000      	movs	r0, #0
    c6b6:	bd10      	pop	{r4, pc}
    c6b8:	f06f 0015 	mvn.w	r0, #21
    c6bc:	bd10      	pop	{r4, pc}
    c6be:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c6c2:	bd10      	pop	{r4, pc}

0000c6c4 <sdc_hci_data_put>:
    c6c4:	b510      	push	{r4, lr}
    c6c6:	f06f 0415 	mvn.w	r4, #21
    c6ca:	b120      	cbz	r0, c6d6 <sdc_hci_data_put+0x12>
    c6cc:	f7ff fda3 	bl	c216 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    c6d0:	b108      	cbz	r0, c6d6 <sdc_hci_data_put+0x12>
    c6d2:	2000      	movs	r0, #0
    c6d4:	bd10      	pop	{r4, pc}
    c6d6:	4620      	mov	r0, r4
    c6d8:	bd10      	pop	{r4, pc}

0000c6da <sdc_hci_evt_get>:
    c6da:	b510      	push	{r4, lr}
    c6dc:	b120      	cbz	r0, c6e8 <sdc_hci_evt_get+0xe>
    c6de:	f7ff fda3 	bl	c228 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    c6e2:	b120      	cbz	r0, c6ee <sdc_hci_evt_get+0x14>
    c6e4:	2000      	movs	r0, #0
    c6e6:	bd10      	pop	{r4, pc}
    c6e8:	f06f 0015 	mvn.w	r0, #21
    c6ec:	bd10      	pop	{r4, pc}
    c6ee:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c6f2:	bd10      	pop	{r4, pc}

0000c6f4 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    c6f4:	f002 beda 	b.w	f4ac <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000c6f8 <sdc_hci_cmd_cb_read_transmit_power_level>:
    c6f8:	f002 bf1c 	b.w	f534 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000c6fc <sdc_hci_cmd_cb_set_event_mask>:
    c6fc:	b510      	push	{r4, lr}
    c6fe:	f7f7 fd1d 	bl	413c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    c702:	2000      	movs	r0, #0
    c704:	bd10      	pop	{r4, pc}

0000c706 <sdc_hci_cmd_cb_set_event_mask_page_2>:
    c706:	b510      	push	{r4, lr}
    c708:	f7f7 fd26 	bl	4158 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    c70c:	2000      	movs	r0, #0
    c70e:	bd10      	pop	{r4, pc}

0000c710 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    c710:	f002 bf2c 	b.w	f56c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000c714 <sdc_hci_cmd_vs_conn_event_extend>:
    c714:	b508      	push	{r3, lr}
    c716:	7800      	ldrb	r0, [r0, #0]
    c718:	f88d 0000 	strb.w	r0, [sp]
    c71c:	4668      	mov	r0, sp
    c71e:	f002 fddc 	bl	f2da <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    c722:	bd08      	pop	{r3, pc}

0000c724 <sdc_hci_cmd_vs_conn_update>:
    c724:	2001      	movs	r0, #1
    c726:	4770      	bx	lr

0000c728 <sdc_hci_cmd_vs_event_length_set>:
    c728:	f7fd bbf6 	b.w	9f18 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000c72c <sdc_hci_cmd_vs_llpm_mode_set>:
    c72c:	2001      	movs	r0, #1
    c72e:	4770      	bx	lr

0000c730 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    c730:	7800      	ldrb	r0, [r0, #0]
    c732:	b100      	cbz	r0, c736 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    c734:	2001      	movs	r0, #1
    c736:	f002 bd55 	b.w	f1e4 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000c73a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    c73a:	b570      	push	{r4, r5, r6, lr}
    c73c:	4605      	mov	r5, r0
    c73e:	2210      	movs	r2, #16
    c740:	2100      	movs	r1, #0
    c742:	f7ff fc5c 	bl	bffe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c746:	2210      	movs	r2, #16
    c748:	2100      	movs	r1, #0
    c74a:	f105 0010 	add.w	r0, r5, #16
    c74e:	f7ff fc56 	bl	bffe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c752:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    c756:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    c75a:	1c40      	adds	r0, r0, #1
    c75c:	d10b      	bne.n	c776 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    c75e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    c762:	1c40      	adds	r0, r0, #1
    c764:	d107      	bne.n	c776 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    c766:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    c76a:	1c40      	adds	r0, r0, #1
    c76c:	d103      	bne.n	c776 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    c76e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    c772:	1c40      	adds	r0, r0, #1
    c774:	d00b      	beq.n	c78e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    c776:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    c77a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    c77e:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    c782:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    c786:	612a      	str	r2, [r5, #16]
    c788:	6168      	str	r0, [r5, #20]
    c78a:	61a9      	str	r1, [r5, #24]
    c78c:	61eb      	str	r3, [r5, #28]
    c78e:	2000      	movs	r0, #0
    c790:	f7f8 fa76 	bl	4c80 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    c794:	b918      	cbnz	r0, c79e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    c796:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    c79a:	07c0      	lsls	r0, r0, #31
    c79c:	d118      	bne.n	c7d0 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    c79e:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    c7a2:	1c40      	adds	r0, r0, #1
    c7a4:	d10b      	bne.n	c7be <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c7a6:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    c7aa:	1c40      	adds	r0, r0, #1
    c7ac:	d107      	bne.n	c7be <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c7ae:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    c7b2:	1c40      	adds	r0, r0, #1
    c7b4:	d103      	bne.n	c7be <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c7b6:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    c7ba:	1c40      	adds	r0, r0, #1
    c7bc:	d008      	beq.n	c7d0 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    c7be:	f854 0f90 	ldr.w	r0, [r4, #144]!
    c7c2:	6861      	ldr	r1, [r4, #4]
    c7c4:	68a2      	ldr	r2, [r4, #8]
    c7c6:	68e3      	ldr	r3, [r4, #12]
    c7c8:	6028      	str	r0, [r5, #0]
    c7ca:	6069      	str	r1, [r5, #4]
    c7cc:	60aa      	str	r2, [r5, #8]
    c7ce:	60eb      	str	r3, [r5, #12]
    c7d0:	2000      	movs	r0, #0
    c7d2:	bd70      	pop	{r4, r5, r6, pc}

0000c7d4 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    c7d4:	b538      	push	{r3, r4, r5, lr}
    c7d6:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    c7da:	4604      	mov	r4, r0
    c7dc:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    c7e0:	1c40      	adds	r0, r0, #1
    c7e2:	d105      	bne.n	c7f0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    c7e4:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    c7e8:	43c0      	mvns	r0, r0
    c7ea:	0400      	lsls	r0, r0, #16
    c7ec:	0c00      	lsrs	r0, r0, #16
    c7ee:	d03e      	beq.n	c86e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    c7f0:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    c7f4:	07c0      	lsls	r0, r0, #31
    c7f6:	d03a      	beq.n	c86e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    c7f8:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    c7fc:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    c800:	f8ad 1000 	strh.w	r1, [sp]
    c804:	f8c4 0001 	str.w	r0, [r4, #1]
    c808:	f8bd 0000 	ldrh.w	r0, [sp]
    c80c:	f8a4 0005 	strh.w	r0, [r4, #5]
    c810:	79a0      	ldrb	r0, [r4, #6]
    c812:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    c816:	71a0      	strb	r0, [r4, #6]
    c818:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    c81c:	1c40      	adds	r0, r0, #1
    c81e:	d00f      	beq.n	c840 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    c820:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    c824:	1c40      	adds	r0, r0, #1
    c826:	d00b      	beq.n	c840 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    c828:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    c82c:	1c40      	adds	r0, r0, #1
    c82e:	d007      	beq.n	c840 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    c830:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    c834:	1c40      	adds	r0, r0, #1
    c836:	d003      	beq.n	c840 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    c838:	2000      	movs	r0, #0
    c83a:	f7f8 fa21 	bl	4c80 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    c83e:	b140      	cbz	r0, c852 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    c840:	2210      	movs	r2, #16
    c842:	2100      	movs	r1, #0
    c844:	1de0      	adds	r0, r4, #7
    c846:	f7ff fbda 	bl	bffe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c84a:	2001      	movs	r0, #1
    c84c:	7020      	strb	r0, [r4, #0]
    c84e:	2000      	movs	r0, #0
    c850:	bd38      	pop	{r3, r4, r5, pc}
    c852:	f855 2f90 	ldr.w	r2, [r5, #144]!
    c856:	6869      	ldr	r1, [r5, #4]
    c858:	68a8      	ldr	r0, [r5, #8]
    c85a:	68eb      	ldr	r3, [r5, #12]
    c85c:	f8c4 2007 	str.w	r2, [r4, #7]
    c860:	f8c4 100b 	str.w	r1, [r4, #11]
    c864:	f8c4 000f 	str.w	r0, [r4, #15]
    c868:	f8c4 3013 	str.w	r3, [r4, #19]
    c86c:	e7ed      	b.n	c84a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    c86e:	2000      	movs	r0, #0
    c870:	e7ec      	b.n	c84c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000c872 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    c872:	f002 bd24 	b.w	f2be <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000c876 <sdc_hci_cmd_ip_read_bd_addr>:
    c876:	f002 be2a 	b.w	f4ce <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000c87a <sdc_hci_cmd_ip_read_local_version_information>:
    c87a:	f7fd bb5b 	b.w	9f34 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000c87e <sdc_hci_cmd_le_add_device_to_resolving_list>:
    c87e:	f002 ba08 	b.w	ec92 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000c882 <sdc_hci_cmd_le_add_device_to_white_list>:
    c882:	f002 ba21 	b.w	ecc8 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000c886 <sdc_hci_cmd_le_clear_resolving_list>:
    c886:	f002 ba36 	b.w	ecf6 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000c88a <sdc_hci_cmd_le_clear_white_list>:
    c88a:	f002 ba41 	b.w	ed10 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000c88e <sdc_hci_cmd_le_encrypt>:
    c88e:	f002 ba49 	b.w	ed24 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000c892 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    c892:	8802      	ldrh	r2, [r0, #0]
    c894:	800a      	strh	r2, [r1, #0]
    c896:	f002 ba4e 	b.w	ed36 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000c89a <sdc_hci_cmd_le_long_term_key_request_reply>:
    c89a:	8802      	ldrh	r2, [r0, #0]
    c89c:	800a      	strh	r2, [r1, #0]
    c89e:	f002 ba63 	b.w	ed68 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000c8a2 <sdc_hci_cmd_le_rand>:
    c8a2:	f002 ba8b 	b.w	edbc <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000c8a6 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    c8a6:	f002 ba8f 	b.w	edc8 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000c8aa <sdc_hci_cmd_le_read_buffer_size>:
    c8aa:	f7fd ba8b 	b.w	9dc4 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000c8ae <sdc_hci_cmd_le_read_channel_map>:
    c8ae:	f7fd ba93 	b.w	9dd8 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000c8b2 <sdc_hci_cmd_le_read_max_data_length>:
    c8b2:	f002 ba92 	b.w	edda <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000c8b6 <sdc_hci_cmd_le_read_phy>:
    c8b6:	f002 baa0 	b.w	edfa <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000c8ba <sdc_hci_cmd_le_read_remote_features>:
    c8ba:	f7fd bab7 	b.w	9e2c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000c8be <sdc_hci_cmd_le_read_resolving_list_size>:
    c8be:	f002 bac7 	b.w	ee50 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000c8c2 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    c8c2:	f7fd bad3 	b.w	9e6c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000c8c6 <sdc_hci_cmd_le_read_transmit_power>:
    c8c6:	f002 bac7 	b.w	ee58 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000c8ca <sdc_hci_cmd_le_read_white_list_size>:
    c8ca:	f002 bace 	b.w	ee6a <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000c8ce <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    c8ce:	f002 bad0 	b.w	ee72 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000c8d2 <sdc_hci_cmd_le_remove_device_from_white_list>:
    c8d2:	f002 bae7 	b.w	eea4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000c8d6 <sdc_hci_cmd_le_set_address_resolution_enable>:
    c8d6:	f002 bafa 	b.w	eece <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000c8da <sdc_hci_cmd_le_set_adv_data>:
    c8da:	f002 bb06 	b.w	eeea <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000c8de <sdc_hci_cmd_le_set_adv_enable>:
    c8de:	f002 bb19 	b.w	ef14 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000c8e2 <sdc_hci_cmd_le_set_adv_params>:
    c8e2:	f002 bb4a 	b.w	ef7a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000c8e6 <sdc_hci_cmd_le_set_data_length>:
    c8e6:	f002 bbdd 	b.w	f0a4 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000c8ea <sdc_hci_cmd_le_set_default_phy>:
    c8ea:	f7fd bacf 	b.w	9e8c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000c8ee <sdc_hci_cmd_le_set_event_mask>:
    c8ee:	b510      	push	{r4, lr}
    c8f0:	f7f7 fc1e 	bl	4130 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    c8f4:	2000      	movs	r0, #0
    c8f6:	bd10      	pop	{r4, pc}

0000c8f8 <sdc_hci_cmd_le_set_phy>:
    c8f8:	f002 bbfb 	b.w	f0f2 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000c8fc <sdc_hci_cmd_le_set_privacy_mode>:
    c8fc:	f002 bc19 	b.w	f132 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000c900 <sdc_hci_cmd_le_set_random_address>:
    c900:	f002 bc2d 	b.w	f15e <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000c904 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    c904:	f002 bc39 	b.w	f17a <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000c908 <sdc_hci_cmd_le_set_scan_response_data>:
    c908:	f002 bc40 	b.w	f18c <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000c90c <sdc_hci_cmd_le_write_suggested_default_data_length>:
    c90c:	f002 bc53 	b.w	f1b6 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000c910 <sdc_hci_cmd_lc_disconnect>:
    c910:	f002 b96b 	b.w	ebea <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000c914 <sdc_hci_cmd_lc_read_remote_version_information>:
    c914:	f002 bde7 	b.w	f4e6 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    c918:	b570      	push	{r4, r5, r6, lr}
    c91a:	880b      	ldrh	r3, [r1, #0]
    c91c:	7f04      	ldrb	r4, [r0, #28]
    c91e:	f100 0524 	add.w	r5, r0, #36	; 0x24
    c922:	f423 4600 	bic.w	r6, r3, #32768	; 0x8000
    c926:	8802      	ldrh	r2, [r0, #0]
    c928:	4435      	add	r5, r6
    c92a:	1da4      	adds	r4, r4, #6
    c92c:	882d      	ldrh	r5, [r5, #0]
    c92e:	4422      	add	r2, r4
    c930:	b292      	uxth	r2, r2
    c932:	4425      	add	r5, r4
    c934:	1e54      	subs	r4, r2, #1
    c936:	442c      	add	r4, r5
    c938:	fb94 f4f2 	sdiv	r4, r4, r2
    c93c:	fb02 6204 	mla	r2, r2, r4, r6
    c940:	8840      	ldrh	r0, [r0, #2]
    c942:	b292      	uxth	r2, r2
    c944:	4290      	cmp	r0, r2
    c946:	d903      	bls.n	c950 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    c948:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    c94c:	4310      	orrs	r0, r2
    c94e:	e002      	b.n	c956 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    c950:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    c954:	4398      	bics	r0, r3
    c956:	8008      	strh	r0, [r1, #0]
    c958:	bd70      	pop	{r4, r5, r6, pc}
    c95a:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    c95e:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    c962:	429a      	cmp	r2, r3
    c964:	d107      	bne.n	c976 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    c966:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    c96a:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    c96e:	4288      	cmp	r0, r1
    c970:	d001      	beq.n	c976 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    c972:	2001      	movs	r0, #1
    c974:	4770      	bx	lr
    c976:	2000      	movs	r0, #0
    c978:	4770      	bx	lr

0000c97a <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    c97a:	b570      	push	{r4, r5, r6, lr}
    c97c:	7f00      	ldrb	r0, [r0, #28]
    c97e:	461c      	mov	r4, r3
    c980:	1d80      	adds	r0, r0, #6
    c982:	4408      	add	r0, r1
    c984:	4613      	mov	r3, r2
    c986:	8809      	ldrh	r1, [r1, #0]
    c988:	9a04      	ldr	r2, [sp, #16]
    c98a:	1cc9      	adds	r1, r1, #3
    c98c:	b289      	uxth	r1, r1
    c98e:	1915      	adds	r5, r2, r4
    c990:	1ec0      	subs	r0, r0, #3
    c992:	428d      	cmp	r5, r1
    c994:	d805      	bhi.n	c9a2 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    c996:	1881      	adds	r1, r0, r2
    c998:	4622      	mov	r2, r4
    c99a:	4618      	mov	r0, r3
    c99c:	f7ff fab5 	bl	bf0a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c9a0:	e000      	b.n	c9a4 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    c9a2:	2400      	movs	r4, #0
    c9a4:	4620      	mov	r0, r4
    c9a6:	bd70      	pop	{r4, r5, r6, pc}

0000c9a8 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    c9a8:	b570      	push	{r4, r5, r6, lr}
    c9aa:	7f00      	ldrb	r0, [r0, #28]
    c9ac:	461c      	mov	r4, r3
    c9ae:	1d80      	adds	r0, r0, #6
    c9b0:	4408      	add	r0, r1
    c9b2:	4613      	mov	r3, r2
    c9b4:	8809      	ldrh	r1, [r1, #0]
    c9b6:	9a04      	ldr	r2, [sp, #16]
    c9b8:	1cc9      	adds	r1, r1, #3
    c9ba:	b289      	uxth	r1, r1
    c9bc:	1915      	adds	r5, r2, r4
    c9be:	1ec0      	subs	r0, r0, #3
    c9c0:	428d      	cmp	r5, r1
    c9c2:	d805      	bhi.n	c9d0 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    c9c4:	4410      	add	r0, r2
    c9c6:	4622      	mov	r2, r4
    c9c8:	4619      	mov	r1, r3
    c9ca:	f7ff fa9e 	bl	bf0a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c9ce:	e000      	b.n	c9d2 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    c9d0:	2400      	movs	r4, #0
    c9d2:	4620      	mov	r0, r4
    c9d4:	bd70      	pop	{r4, r5, r6, pc}

0000c9d6 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    c9d6:	8881      	ldrh	r1, [r0, #4]
    c9d8:	88c0      	ldrh	r0, [r0, #6]
    c9da:	4288      	cmp	r0, r1
    c9dc:	d101      	bne.n	c9e2 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    c9de:	2001      	movs	r0, #1
    c9e0:	4770      	bx	lr
    c9e2:	2000      	movs	r0, #0
    c9e4:	4770      	bx	lr

0000c9e6 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    c9e6:	8881      	ldrh	r1, [r0, #4]
    c9e8:	8900      	ldrh	r0, [r0, #8]
    c9ea:	4288      	cmp	r0, r1
    c9ec:	d101      	bne.n	c9f2 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    c9ee:	2001      	movs	r0, #1
    c9f0:	4770      	bx	lr
    c9f2:	2000      	movs	r0, #0
    c9f4:	4770      	bx	lr

0000c9f6 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    c9f6:	b570      	push	{r4, r5, r6, lr}
    c9f8:	4604      	mov	r4, r0
    c9fa:	f100 0124 	add.w	r1, r0, #36	; 0x24
    c9fe:	8880      	ldrh	r0, [r0, #4]
    ca00:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    ca04:	4401      	add	r1, r0
    ca06:	8a20      	ldrh	r0, [r4, #16]
    ca08:	2800      	cmp	r0, #0
    ca0a:	d01a      	beq.n	ca42 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    ca0c:	89a2      	ldrh	r2, [r4, #12]
    ca0e:	2500      	movs	r5, #0
    ca10:	4410      	add	r0, r2
    ca12:	b280      	uxth	r0, r0
    ca14:	81a0      	strh	r0, [r4, #12]
    ca16:	880a      	ldrh	r2, [r1, #0]
    ca18:	4290      	cmp	r0, r2
    ca1a:	d905      	bls.n	ca28 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x32>
    ca1c:	f240 1163 	movw	r1, #355	; 0x163
    ca20:	f04f 0014 	mov.w	r0, #20
    ca24:	f7f7 fa02 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ca28:	d109      	bne.n	ca3e <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    ca2a:	69a0      	ldr	r0, [r4, #24]
    ca2c:	b108      	cbz	r0, ca32 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x3c>
    ca2e:	7f40      	ldrb	r0, [r0, #29]
    ca30:	7088      	strb	r0, [r1, #2]
    ca32:	f104 0104 	add.w	r1, r4, #4
    ca36:	4620      	mov	r0, r4
    ca38:	f7ff ff6e 	bl	c918 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    ca3c:	81a5      	strh	r5, [r4, #12]
    ca3e:	8225      	strh	r5, [r4, #16]
    ca40:	2001      	movs	r0, #1
    ca42:	bd70      	pop	{r4, r5, r6, pc}

0000ca44 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    ca44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ca46:	4604      	mov	r4, r0
    ca48:	f100 0324 	add.w	r3, r0, #36	; 0x24
    ca4c:	88c0      	ldrh	r0, [r0, #6]
    ca4e:	460e      	mov	r6, r1
    ca50:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    ca54:	8a60      	ldrh	r0, [r4, #18]
    ca56:	19d9      	adds	r1, r3, r7
    ca58:	b108      	cbz	r0, ca5e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
    ca5a:	42b0      	cmp	r0, r6
    ca5c:	d201      	bcs.n	ca62 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>
    ca5e:	2000      	movs	r0, #0
    ca60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ca62:	89e0      	ldrh	r0, [r4, #14]
    ca64:	2500      	movs	r5, #0
    ca66:	b140      	cbz	r0, ca7a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x36>
    ca68:	f8b1 c000 	ldrh.w	ip, [r1]
    ca6c:	4560      	cmp	r0, ip
    ca6e:	d008      	beq.n	ca82 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    ca70:	f240 214b 	movw	r1, #587	; 0x24b
    ca74:	2014      	movs	r0, #20
    ca76:	f7f7 f9d9 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ca7a:	7f60      	ldrb	r0, [r4, #29]
    ca7c:	7088      	strb	r0, [r1, #2]
    ca7e:	800d      	strh	r5, [r1, #0]
    ca80:	e00e      	b.n	caa0 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    ca82:	f894 c01c 	ldrb.w	ip, [r4, #28]
    ca86:	4418      	add	r0, r3
    ca88:	f10c 0c06 	add.w	ip, ip, #6
    ca8c:	44bc      	add	ip, r7
    ca8e:	4460      	add	r0, ip
    ca90:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    ca94:	f820 cc03 	strh.w	ip, [r0, #-3]
    ca98:	f894 c020 	ldrb.w	ip, [r4, #32]
    ca9c:	f800 cc01 	strb.w	ip, [r0, #-1]
    caa0:	89e0      	ldrh	r0, [r4, #14]
    caa2:	4430      	add	r0, r6
    caa4:	81e0      	strh	r0, [r4, #14]
    caa6:	8808      	ldrh	r0, [r1, #0]
    caa8:	4430      	add	r0, r6
    caaa:	8008      	strh	r0, [r1, #0]
    caac:	b19a      	cbz	r2, cad6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x92>
    caae:	1da1      	adds	r1, r4, #6
    cab0:	4620      	mov	r0, r4
    cab2:	f7ff ff31 	bl	c918 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cab6:	81e5      	strh	r5, [r4, #14]
    cab8:	7f60      	ldrb	r0, [r4, #29]
    caba:	1c40      	adds	r0, r0, #1
    cabc:	7760      	strb	r0, [r4, #29]
    cabe:	7da0      	ldrb	r0, [r4, #22]
    cac0:	f88d 0000 	strb.w	r0, [sp]
    cac4:	9800      	ldr	r0, [sp, #0]
    cac6:	9000      	str	r0, [sp, #0]
    cac8:	f89d 0000 	ldrb.w	r0, [sp]
    cacc:	b178      	cbz	r0, caee <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    cace:	88e0      	ldrh	r0, [r4, #6]
    cad0:	82a0      	strh	r0, [r4, #20]
    cad2:	75a5      	strb	r5, [r4, #22]
    cad4:	e00b      	b.n	caee <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    cad6:	7f20      	ldrb	r0, [r4, #28]
    cad8:	89e1      	ldrh	r1, [r4, #14]
    cada:	1d80      	adds	r0, r0, #6
    cadc:	4438      	add	r0, r7
    cade:	4419      	add	r1, r3
    cae0:	4408      	add	r0, r1
    cae2:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    cae6:	83e1      	strh	r1, [r4, #30]
    cae8:	7880      	ldrb	r0, [r0, #2]
    caea:	f884 0020 	strb.w	r0, [r4, #32]
    caee:	8265      	strh	r5, [r4, #18]
    caf0:	2001      	movs	r0, #1
    caf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000caf4 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    caf4:	b510      	push	{r4, lr}
    caf6:	4604      	mov	r4, r0
    caf8:	88c0      	ldrh	r0, [r0, #6]
    cafa:	88a1      	ldrh	r1, [r4, #4]
    cafc:	4281      	cmp	r1, r0
    cafe:	d007      	beq.n	cb10 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    cb00:	89a0      	ldrh	r0, [r4, #12]
    cb02:	b928      	cbnz	r0, cb10 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    cb04:	8a20      	ldrh	r0, [r4, #16]
    cb06:	b918      	cbnz	r0, cb10 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    cb08:	88a0      	ldrh	r0, [r4, #4]
    cb0a:	8aa1      	ldrh	r1, [r4, #20]
    cb0c:	4288      	cmp	r0, r1
    cb0e:	d101      	bne.n	cb14 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    cb10:	2000      	movs	r0, #0
    cb12:	bd10      	pop	{r4, pc}
    cb14:	1d21      	adds	r1, r4, #4
    cb16:	4620      	mov	r0, r4
    cb18:	f7ff fefe 	bl	c918 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cb1c:	2000      	movs	r0, #0
    cb1e:	8220      	strh	r0, [r4, #16]
    cb20:	2001      	movs	r0, #1
    cb22:	bd10      	pop	{r4, pc}

0000cb24 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    cb24:	b510      	push	{r4, lr}
    cb26:	4604      	mov	r4, r0
    cb28:	f100 0224 	add.w	r2, r0, #36	; 0x24
    cb2c:	88c0      	ldrh	r0, [r0, #6]
    cb2e:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    cb32:	4402      	add	r2, r0
    cb34:	8820      	ldrh	r0, [r4, #0]
    cb36:	2845      	cmp	r0, #69	; 0x45
    cb38:	d200      	bcs.n	cb3c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    cb3a:	2045      	movs	r0, #69	; 0x45
    cb3c:	4288      	cmp	r0, r1
    cb3e:	d204      	bcs.n	cb4a <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    cb40:	f240 1119 	movw	r1, #281	; 0x119
    cb44:	2014      	movs	r0, #20
    cb46:	f7f7 f971 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cb4a:	7de0      	ldrb	r0, [r4, #23]
    cb4c:	2800      	cmp	r0, #0
    cb4e:	d003      	beq.n	cb58 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    cb50:	8810      	ldrh	r0, [r2, #0]
    cb52:	4288      	cmp	r0, r1
    cb54:	d201      	bcs.n	cb5a <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    cb56:	2000      	movs	r0, #0
    cb58:	bd10      	pop	{r4, pc}
    cb5a:	8011      	strh	r1, [r2, #0]
    cb5c:	1da1      	adds	r1, r4, #6
    cb5e:	4620      	mov	r0, r4
    cb60:	f7ff feda 	bl	c918 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cb64:	2000      	movs	r0, #0
    cb66:	75e0      	strb	r0, [r4, #23]
    cb68:	2001      	movs	r0, #1
    cb6a:	bd10      	pop	{r4, pc}

0000cb6c <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
    cb6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cb70:	8941      	ldrh	r1, [r0, #10]
    cb72:	8886      	ldrh	r6, [r0, #4]
    cb74:	4604      	mov	r4, r0
    cb76:	2500      	movs	r5, #0
    cb78:	f100 070a 	add.w	r7, r0, #10
    cb7c:	e006      	b.n	cb8c <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
    cb7e:	4639      	mov	r1, r7
    cb80:	4620      	mov	r0, r4
    cb82:	f7ff fec9 	bl	c918 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cb86:	1c6d      	adds	r5, r5, #1
    cb88:	8961      	ldrh	r1, [r4, #10]
    cb8a:	b2ad      	uxth	r5, r5
    cb8c:	42b1      	cmp	r1, r6
    cb8e:	d1f6      	bne.n	cb7e <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x12>
    cb90:	4628      	mov	r0, r5
    cb92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000cb96 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    cb96:	b530      	push	{r4, r5, lr}
    cb98:	88c4      	ldrh	r4, [r0, #6]
    cb9a:	8881      	ldrh	r1, [r0, #4]
    cb9c:	f100 0224 	add.w	r2, r0, #36	; 0x24
    cba0:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    cba4:	4413      	add	r3, r2
    cba6:	8882      	ldrh	r2, [r0, #4]
    cba8:	8a85      	ldrh	r5, [r0, #20]
    cbaa:	42aa      	cmp	r2, r5
    cbac:	d012      	beq.n	cbd4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    cbae:	42a1      	cmp	r1, r4
    cbb0:	d010      	beq.n	cbd4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    cbb2:	8981      	ldrh	r1, [r0, #12]
    cbb4:	b971      	cbnz	r1, cbd4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    cbb6:	6982      	ldr	r2, [r0, #24]
    cbb8:	b172      	cbz	r2, cbd8 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    cbba:	4610      	mov	r0, r2
    cbbc:	f7ff ff13 	bl	c9e6 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    cbc0:	b950      	cbnz	r0, cbd8 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    cbc2:	8910      	ldrh	r0, [r2, #8]
    cbc4:	3224      	adds	r2, #36	; 0x24
    cbc6:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    cbca:	4410      	add	r0, r2
    cbcc:	7899      	ldrb	r1, [r3, #2]
    cbce:	7880      	ldrb	r0, [r0, #2]
    cbd0:	4288      	cmp	r0, r1
    cbd2:	d101      	bne.n	cbd8 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    cbd4:	2000      	movs	r0, #0
    cbd6:	bd30      	pop	{r4, r5, pc}
    cbd8:	4618      	mov	r0, r3
    cbda:	bd30      	pop	{r4, r5, pc}

0000cbdc <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    cbdc:	7f00      	ldrb	r0, [r0, #28]
    cbde:	1d80      	adds	r0, r0, #6
    cbe0:	4408      	add	r0, r1
    cbe2:	1ec0      	subs	r0, r0, #3
    cbe4:	6010      	str	r0, [r2, #0]
    cbe6:	8808      	ldrh	r0, [r1, #0]
    cbe8:	4770      	bx	lr

0000cbea <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    cbea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cbee:	460e      	mov	r6, r1
    cbf0:	88c1      	ldrh	r1, [r0, #6]
    cbf2:	8902      	ldrh	r2, [r0, #8]
    cbf4:	4604      	mov	r4, r0
    cbf6:	f100 0824 	add.w	r8, r0, #36	; 0x24
    cbfa:	8800      	ldrh	r0, [r0, #0]
    cbfc:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    cc00:	f422 4700 	bic.w	r7, r2, #32768	; 0x8000
    cc04:	2845      	cmp	r0, #69	; 0x45
    cc06:	d200      	bcs.n	cc0a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    cc08:	2045      	movs	r0, #69	; 0x45
    cc0a:	42b0      	cmp	r0, r6
    cc0c:	d203      	bcs.n	cc16 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    cc0e:	21db      	movs	r1, #219	; 0xdb
    cc10:	2014      	movs	r0, #20
    cc12:	f7f7 f90b 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cc16:	4610      	mov	r0, r2
    cc18:	f7ff fe9f 	bl	c95a <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    cc1c:	b110      	cbz	r0, cc24 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    cc1e:	2000      	movs	r0, #0
    cc20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cc24:	42af      	cmp	r7, r5
    cc26:	d908      	bls.n	cc3a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    cc28:	7f21      	ldrb	r1, [r4, #28]
    cc2a:	1b78      	subs	r0, r7, r5
    cc2c:	1a40      	subs	r0, r0, r1
    cc2e:	1f80      	subs	r0, r0, #6
    cc30:	4286      	cmp	r6, r0
    cc32:	dd02      	ble.n	cc3a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    cc34:	2000      	movs	r0, #0
    cc36:	75e0      	strb	r0, [r4, #23]
    cc38:	e7f1      	b.n	cc1e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    cc3a:	eb08 0005 	add.w	r0, r8, r5
    cc3e:	2101      	movs	r1, #1
    cc40:	8006      	strh	r6, [r0, #0]
    cc42:	75e1      	strb	r1, [r4, #23]
    cc44:	e7ec      	b.n	cc20 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000cc46 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    cc46:	b538      	push	{r3, r4, r5, lr}
    cc48:	88c4      	ldrh	r4, [r0, #6]
    cc4a:	8881      	ldrh	r1, [r0, #4]
    cc4c:	f100 0224 	add.w	r2, r0, #36	; 0x24
    cc50:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    cc54:	441a      	add	r2, r3
    cc56:	42a1      	cmp	r1, r4
    cc58:	d010      	beq.n	cc7c <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    cc5a:	8983      	ldrh	r3, [r0, #12]
    cc5c:	8a05      	ldrh	r5, [r0, #16]
    cc5e:	8812      	ldrh	r2, [r2, #0]
    cc60:	442b      	add	r3, r5
    cc62:	4293      	cmp	r3, r2
    cc64:	d308      	bcc.n	cc78 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    cc66:	f8ad 1000 	strh.w	r1, [sp]
    cc6a:	4669      	mov	r1, sp
    cc6c:	f7ff fe54 	bl	c918 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cc70:	f8bd 0000 	ldrh.w	r0, [sp]
    cc74:	42a0      	cmp	r0, r4
    cc76:	d001      	beq.n	cc7c <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    cc78:	2001      	movs	r0, #1
    cc7a:	bd38      	pop	{r3, r4, r5, pc}
    cc7c:	2000      	movs	r0, #0
    cc7e:	bd38      	pop	{r3, r4, r5, pc}

0000cc80 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    cc80:	b570      	push	{r4, r5, r6, lr}
    cc82:	88c6      	ldrh	r6, [r0, #6]
    cc84:	8885      	ldrh	r5, [r0, #4]
    cc86:	4603      	mov	r3, r0
    cc88:	f100 0424 	add.w	r4, r0, #36	; 0x24
    cc8c:	f425 4000 	bic.w	r0, r5, #32768	; 0x8000
    cc90:	4420      	add	r0, r4
    cc92:	42b5      	cmp	r5, r6
    cc94:	d102      	bne.n	cc9c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    cc96:	2000      	movs	r0, #0
    cc98:	8218      	strh	r0, [r3, #16]
    cc9a:	bd70      	pop	{r4, r5, r6, pc}
    cc9c:	8804      	ldrh	r4, [r0, #0]
    cc9e:	899d      	ldrh	r5, [r3, #12]
    cca0:	7f1e      	ldrb	r6, [r3, #28]
    cca2:	1b64      	subs	r4, r4, r5
    cca4:	4435      	add	r5, r6
    cca6:	4428      	add	r0, r5
    cca8:	880d      	ldrh	r5, [r1, #0]
    ccaa:	b2a4      	uxth	r4, r4
    ccac:	1cc0      	adds	r0, r0, #3
    ccae:	42a5      	cmp	r5, r4
    ccb0:	d900      	bls.n	ccb4 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    ccb2:	800c      	strh	r4, [r1, #0]
    ccb4:	899c      	ldrh	r4, [r3, #12]
    ccb6:	b124      	cbz	r4, ccc2 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    ccb8:	2400      	movs	r4, #0
    ccba:	7014      	strb	r4, [r2, #0]
    ccbc:	8809      	ldrh	r1, [r1, #0]
    ccbe:	8219      	strh	r1, [r3, #16]
    ccc0:	bd70      	pop	{r4, r5, r6, pc}
    ccc2:	2401      	movs	r4, #1
    ccc4:	e7f9      	b.n	ccba <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000ccc6 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    ccc6:	b508      	push	{r3, lr}
    ccc8:	8a81      	ldrh	r1, [r0, #20]
    ccca:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    ccce:	3aff      	subs	r2, #255	; 0xff
    ccd0:	d008      	beq.n	cce4 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1e>
    ccd2:	7d82      	ldrb	r2, [r0, #22]
    ccd4:	f88d 2000 	strb.w	r2, [sp]
    ccd8:	9a00      	ldr	r2, [sp, #0]
    ccda:	9200      	str	r2, [sp, #0]
    ccdc:	f89d 2000 	ldrb.w	r2, [sp]
    cce0:	b952      	cbnz	r2, ccf8 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    cce2:	e004      	b.n	ccee <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
    cce4:	f44f 7162 	mov.w	r1, #904	; 0x388
    cce8:	2014      	movs	r0, #20
    ccea:	f7f7 f89f 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ccee:	8880      	ldrh	r0, [r0, #4]
    ccf0:	4281      	cmp	r1, r0
    ccf2:	d101      	bne.n	ccf8 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    ccf4:	2000      	movs	r0, #0
    ccf6:	bd08      	pop	{r3, pc}
    ccf8:	2001      	movs	r0, #1
    ccfa:	bd08      	pop	{r3, pc}

0000ccfc <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    ccfc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    cd00:	8281      	strh	r1, [r0, #20]
    cd02:	2100      	movs	r1, #0
    cd04:	7581      	strb	r1, [r0, #22]
    cd06:	4770      	bx	lr

0000cd08 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    cd08:	b510      	push	{r4, lr}
    cd0a:	8a81      	ldrh	r1, [r0, #20]
    cd0c:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    cd10:	3aff      	subs	r2, #255	; 0xff
    cd12:	d004      	beq.n	cd1e <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    cd14:	f44f 7159 	mov.w	r1, #868	; 0x364
    cd18:	2014      	movs	r0, #20
    cd1a:	f7f7 f887 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cd1e:	88c1      	ldrh	r1, [r0, #6]
    cd20:	8281      	strh	r1, [r0, #20]
    cd22:	89c1      	ldrh	r1, [r0, #14]
    cd24:	b109      	cbz	r1, cd2a <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x22>
    cd26:	2101      	movs	r1, #1
    cd28:	e000      	b.n	cd2c <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x24>
    cd2a:	2100      	movs	r1, #0
    cd2c:	7581      	strb	r1, [r0, #22]
    cd2e:	bd10      	pop	{r4, pc}

0000cd30 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    cd30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cd34:	461d      	mov	r5, r3
    cd36:	4616      	mov	r6, r2
    cd38:	9f06      	ldr	r7, [sp, #24]
    cd3a:	460b      	mov	r3, r1
    cd3c:	4604      	mov	r4, r0
    cd3e:	463a      	mov	r2, r7
    cd40:	4629      	mov	r1, r5
    cd42:	4630      	mov	r0, r6
    cd44:	f000 f84f 	bl	cde6 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    cd48:	4283      	cmp	r3, r0
    cd4a:	d201      	bcs.n	cd50 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    cd4c:	21a8      	movs	r1, #168	; 0xa8
    cd4e:	e018      	b.n	cd82 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    cd50:	1ce0      	adds	r0, r4, #3
    cd52:	f020 0103 	bic.w	r1, r0, #3
    cd56:	4620      	mov	r0, r4
    cd58:	42a1      	cmp	r1, r4
    cd5a:	d001      	beq.n	cd60 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    cd5c:	21a9      	movs	r1, #169	; 0xa9
    cd5e:	e010      	b.n	cd82 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    cd60:	2224      	movs	r2, #36	; 0x24
    cd62:	2100      	movs	r1, #0
    cd64:	f7ff f94b 	bl	bffe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cd68:	f64f 70ff 	movw	r0, #65535	; 0xffff
    cd6c:	82a0      	strh	r0, [r4, #20]
    cd6e:	19a8      	adds	r0, r5, r6
    cd70:	1d80      	adds	r0, r0, #6
    cd72:	4378      	muls	r0, r7
    cd74:	b280      	uxth	r0, r0
    cd76:	7725      	strb	r5, [r4, #28]
    cd78:	8060      	strh	r0, [r4, #2]
    cd7a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    cd7e:	d903      	bls.n	cd88 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    cd80:	21af      	movs	r1, #175	; 0xaf
    cd82:	2014      	movs	r0, #20
    cd84:	f7f7 f852 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cd88:	8026      	strh	r6, [r4, #0]
    cd8a:	2000      	movs	r0, #0
    cd8c:	7760      	strb	r0, [r4, #29]
    cd8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000cd92 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    cd92:	6181      	str	r1, [r0, #24]
    cd94:	6188      	str	r0, [r1, #24]
    cd96:	4770      	bx	lr

0000cd98 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    cd98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cd9c:	460b      	mov	r3, r1
    cd9e:	4604      	mov	r4, r0
    cda0:	f100 0124 	add.w	r1, r0, #36	; 0x24
    cda4:	8905      	ldrh	r5, [r0, #8]
    cda6:	8946      	ldrh	r6, [r0, #10]
    cda8:	8880      	ldrh	r0, [r0, #4]
    cdaa:	f425 4700 	bic.w	r7, r5, #32768	; 0x8000
    cdae:	4439      	add	r1, r7
    cdb0:	460f      	mov	r7, r1
    cdb2:	4285      	cmp	r5, r0
    cdb4:	d102      	bne.n	cdbc <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    cdb6:	2000      	movs	r0, #0
    cdb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cdbc:	b10a      	cbz	r2, cdc2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    cdbe:	1cc8      	adds	r0, r1, #3
    cdc0:	6010      	str	r0, [r2, #0]
    cdc2:	b123      	cbz	r3, cdce <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    cdc4:	7f22      	ldrb	r2, [r4, #28]
    cdc6:	1cf9      	adds	r1, r7, #3
    cdc8:	4618      	mov	r0, r3
    cdca:	f7ff f89e 	bl	bf0a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cdce:	883f      	ldrh	r7, [r7, #0]
    cdd0:	f104 0108 	add.w	r1, r4, #8
    cdd4:	4620      	mov	r0, r4
    cdd6:	f7ff fd9f 	bl	c918 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cdda:	42b5      	cmp	r5, r6
    cddc:	d101      	bne.n	cde2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    cdde:	8920      	ldrh	r0, [r4, #8]
    cde0:	8160      	strh	r0, [r4, #10]
    cde2:	4638      	mov	r0, r7
    cde4:	e7e8      	b.n	cdb8 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000cde6 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    cde6:	4401      	add	r1, r0
    cde8:	1d89      	adds	r1, r1, #6
    cdea:	4351      	muls	r1, r2
    cdec:	b28a      	uxth	r2, r1
    cdee:	2100      	movs	r1, #0
    cdf0:	2845      	cmp	r0, #69	; 0x45
    cdf2:	d201      	bcs.n	cdf8 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x12>
    cdf4:	f1c0 0145 	rsb	r1, r0, #69	; 0x45
    cdf8:	3224      	adds	r2, #36	; 0x24
    cdfa:	1850      	adds	r0, r2, r1
    cdfc:	b280      	uxth	r0, r0
    cdfe:	4770      	bx	lr

0000ce00 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    ce00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ce04:	4688      	mov	r8, r1
    ce06:	88c1      	ldrh	r1, [r0, #6]
    ce08:	4604      	mov	r4, r0
    ce0a:	8900      	ldrh	r0, [r0, #8]
    ce0c:	f421 4600 	bic.w	r6, r1, #32768	; 0x8000
    ce10:	f104 0524 	add.w	r5, r4, #36	; 0x24
    ce14:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    ce18:	eb05 0906 	add.w	r9, r5, r6
    ce1c:	f7ff fd9d 	bl	c95a <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    ce20:	2200      	movs	r2, #0
    ce22:	b998      	cbnz	r0, ce4c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    ce24:	8820      	ldrh	r0, [r4, #0]
    ce26:	2845      	cmp	r0, #69	; 0x45
    ce28:	d200      	bcs.n	ce2c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    ce2a:	2045      	movs	r0, #69	; 0x45
    ce2c:	42b7      	cmp	r7, r6
    ce2e:	d906      	bls.n	ce3e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    ce30:	7f23      	ldrb	r3, [r4, #28]
    ce32:	1bb9      	subs	r1, r7, r6
    ce34:	1ac9      	subs	r1, r1, r3
    ce36:	1f89      	subs	r1, r1, #6
    ce38:	4281      	cmp	r1, r0
    ce3a:	da00      	bge.n	ce3e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    ce3c:	4608      	mov	r0, r1
    ce3e:	89e1      	ldrh	r1, [r4, #14]
    ce40:	b111      	cbz	r1, ce48 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    ce42:	f8b9 3000 	ldrh.w	r3, [r9]
    ce46:	1ac0      	subs	r0, r0, r3
    ce48:	4540      	cmp	r0, r8
    ce4a:	da03      	bge.n	ce54 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    ce4c:	8262      	strh	r2, [r4, #18]
    ce4e:	2000      	movs	r0, #0
    ce50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ce54:	7f20      	ldrb	r0, [r4, #28]
    ce56:	4429      	add	r1, r5
    ce58:	1d80      	adds	r0, r0, #6
    ce5a:	4430      	add	r0, r6
    ce5c:	4408      	add	r0, r1
    ce5e:	f8a4 8012 	strh.w	r8, [r4, #18]
    ce62:	1ec0      	subs	r0, r0, #3
    ce64:	e7f4      	b.n	ce50 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000ce66 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    ce66:	2100      	movs	r1, #0
    ce68:	81c1      	strh	r1, [r0, #14]
    ce6a:	8241      	strh	r1, [r0, #18]
    ce6c:	7581      	strb	r1, [r0, #22]
    ce6e:	4770      	bx	lr

0000ce70 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    ce70:	b570      	push	{r4, r5, r6, lr}
    ce72:	2300      	movs	r3, #0
    ce74:	2908      	cmp	r1, #8
    ce76:	d204      	bcs.n	ce82 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
    ce78:	f240 11cb 	movw	r1, #459	; 0x1cb
    ce7c:	2015      	movs	r0, #21
    ce7e:	f7f6 ffd5 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ce82:	6802      	ldr	r2, [r0, #0]
    ce84:	b90a      	cbnz	r2, ce8a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    ce86:	e01e      	b.n	cec6 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    ce88:	4610      	mov	r0, r2
    ce8a:	6802      	ldr	r2, [r0, #0]
    ce8c:	8893      	ldrh	r3, [r2, #4]
    ce8e:	428b      	cmp	r3, r1
    ce90:	d002      	beq.n	ce98 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
    ce92:	6813      	ldr	r3, [r2, #0]
    ce94:	2b00      	cmp	r3, #0
    ce96:	d1f7      	bne.n	ce88 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
    ce98:	8894      	ldrh	r4, [r2, #4]
    ce9a:	4613      	mov	r3, r2
    ce9c:	428c      	cmp	r4, r1
    ce9e:	d101      	bne.n	cea4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
    cea0:	6811      	ldr	r1, [r2, #0]
    cea2:	e00d      	b.n	cec0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
    cea4:	f101 0508 	add.w	r5, r1, #8
    cea8:	b2ae      	uxth	r6, r5
    ceaa:	2500      	movs	r5, #0
    ceac:	42b4      	cmp	r4, r6
    ceae:	d309      	bcc.n	cec4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
    ceb0:	1a64      	subs	r4, r4, r1
    ceb2:	4411      	add	r1, r2
    ceb4:	600d      	str	r5, [r1, #0]
    ceb6:	808c      	strh	r4, [r1, #4]
    ceb8:	6802      	ldr	r2, [r0, #0]
    ceba:	6812      	ldr	r2, [r2, #0]
    cebc:	6002      	str	r2, [r0, #0]
    cebe:	600a      	str	r2, [r1, #0]
    cec0:	6001      	str	r1, [r0, #0]
    cec2:	e000      	b.n	cec6 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    cec4:	2300      	movs	r3, #0
    cec6:	4618      	mov	r0, r3
    cec8:	bd70      	pop	{r4, r5, r6, pc}

0000ceca <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    ceca:	b510      	push	{r4, lr}
    cecc:	000c      	movs	r4, r1
    cece:	d006      	beq.n	cede <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
    ced0:	2c08      	cmp	r4, #8
    ced2:	d209      	bcs.n	cee8 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
    ced4:	f240 1195 	movw	r1, #405	; 0x195
    ced8:	2015      	movs	r0, #21
    ceda:	f7f6 ffa7 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cede:	b108      	cbz	r0, cee4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    cee0:	2100      	movs	r1, #0
    cee2:	6001      	str	r1, [r0, #0]
    cee4:	2000      	movs	r0, #0
    cee6:	bd10      	pop	{r4, pc}
    cee8:	b118      	cbz	r0, cef2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
    ceea:	b2a1      	uxth	r1, r4
    ceec:	6800      	ldr	r0, [r0, #0]
    ceee:	f000 f814 	bl	cf1a <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    cef2:	1d20      	adds	r0, r4, #4
    cef4:	bd10      	pop	{r4, pc}

0000cef6 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    cef6:	2100      	movs	r1, #0
    cef8:	6802      	ldr	r2, [r0, #0]
    cefa:	e003      	b.n	cf04 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    cefc:	8893      	ldrh	r3, [r2, #4]
    cefe:	6812      	ldr	r2, [r2, #0]
    cf00:	4419      	add	r1, r3
    cf02:	b289      	uxth	r1, r1
    cf04:	2a00      	cmp	r2, #0
    cf06:	d1f9      	bne.n	cefc <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    cf08:	f000 b807 	b.w	cf1a <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000cf0c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    cf0c:	2300      	movs	r3, #0
    cf0e:	600b      	str	r3, [r1, #0]
    cf10:	808a      	strh	r2, [r1, #4]
    cf12:	6802      	ldr	r2, [r0, #0]
    cf14:	600a      	str	r2, [r1, #0]
    cf16:	6001      	str	r1, [r0, #0]
    cf18:	4770      	bx	lr
    cf1a:	2300      	movs	r3, #0
    cf1c:	6043      	str	r3, [r0, #4]
    cf1e:	1d02      	adds	r2, r0, #4
    cf20:	8101      	strh	r1, [r0, #8]
    cf22:	6002      	str	r2, [r0, #0]
    cf24:	4770      	bx	lr

0000cf26 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    cf26:	f5a0 437f 	sub.w	r3, r0, #65280	; 0xff00
    cf2a:	3bff      	subs	r3, #255	; 0xff
    cf2c:	d001      	beq.n	cf32 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    cf2e:	2902      	cmp	r1, #2
    cf30:	d301      	bcc.n	cf36 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    cf32:	2000      	movs	r0, #0
    cf34:	4770      	bx	lr
    cf36:	f7f7 ba33 	b.w	43a0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000cf3a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    cf3a:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    cf3e:	3aff      	subs	r2, #255	; 0xff
    cf40:	d001      	beq.n	cf46 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    cf42:	2902      	cmp	r1, #2
    cf44:	d301      	bcc.n	cf4a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    cf46:	2000      	movs	r0, #0
    cf48:	4770      	bx	lr
    cf4a:	f7f7 ba63 	b.w	4414 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>

0000cf4e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    cf4e:	b570      	push	{r4, r5, r6, lr}
    cf50:	4605      	mov	r5, r0
    cf52:	460c      	mov	r4, r1
    cf54:	4608      	mov	r0, r1
    cf56:	f000 f973 	bl	d240 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    cf5a:	b108      	cbz	r0, cf60 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    cf5c:	2010      	movs	r0, #16
    cf5e:	bd70      	pop	{r4, r5, r6, pc}
    cf60:	2d02      	cmp	r5, #2
    cf62:	d301      	bcc.n	cf68 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
    cf64:	2007      	movs	r0, #7
    cf66:	bd70      	pop	{r4, r5, r6, pc}
    cf68:	7025      	strb	r5, [r4, #0]
    cf6a:	2000      	movs	r0, #0
    cf6c:	8060      	strh	r0, [r4, #2]
    cf6e:	bd70      	pop	{r4, r5, r6, pc}
    cf70:	b510      	push	{r4, lr}
    cf72:	4604      	mov	r4, r0
    cf74:	f7f7 fa9a 	bl	44ac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    cf78:	42a0      	cmp	r0, r4
    cf7a:	d901      	bls.n	cf80 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
    cf7c:	2001      	movs	r0, #1
    cf7e:	bd10      	pop	{r4, pc}
    cf80:	2000      	movs	r0, #0
    cf82:	bd10      	pop	{r4, pc}
    cf84:	4770      	bx	lr

0000cf86 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    cf86:	b570      	push	{r4, r5, r6, lr}
    cf88:	460e      	mov	r6, r1
    cf8a:	461d      	mov	r5, r3
    cf8c:	4611      	mov	r1, r2
    cf8e:	f000 f811 	bl	cfb4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    cf92:	4604      	mov	r4, r0
    cf94:	4629      	mov	r1, r5
    cf96:	4630      	mov	r0, r6
    cf98:	f000 f803 	bl	cfa2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    cf9c:	4420      	add	r0, r4
    cf9e:	1d00      	adds	r0, r0, #4
    cfa0:	bd70      	pop	{r4, r5, r6, pc}
    cfa2:	b510      	push	{r4, lr}
    cfa4:	460a      	mov	r2, r1
    cfa6:	2101      	movs	r1, #1
    cfa8:	f7ff ff1d 	bl	cde6 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    cfac:	1cc0      	adds	r0, r0, #3
    cfae:	f020 0003 	bic.w	r0, r0, #3
    cfb2:	bd10      	pop	{r4, pc}
    cfb4:	b510      	push	{r4, lr}
    cfb6:	460a      	mov	r2, r1
    cfb8:	2101      	movs	r1, #1
    cfba:	f7ff ff14 	bl	cde6 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    cfbe:	1cc0      	adds	r0, r0, #3
    cfc0:	f020 0003 	bic.w	r0, r0, #3
    cfc4:	bd10      	pop	{r4, pc}
    cfc6:	b109      	cbz	r1, cfcc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    cfc8:	2100      	movs	r1, #0
    cfca:	e000      	b.n	cfce <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x48>
    cfcc:	2102      	movs	r1, #2
    cfce:	1843      	adds	r3, r0, r1
    cfd0:	7d1a      	ldrb	r2, [r3, #20]
    cfd2:	2a02      	cmp	r2, #2
    cfd4:	d008      	beq.n	cfe8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x62>
    cfd6:	7d5b      	ldrb	r3, [r3, #21]
    cfd8:	2b02      	cmp	r3, #2
    cfda:	d009      	beq.n	cff0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x6a>
    cfdc:	2a03      	cmp	r2, #3
    cfde:	d003      	beq.n	cfe8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x62>
    cfe0:	2b03      	cmp	r3, #3
    cfe2:	d005      	beq.n	cff0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x6a>
    cfe4:	2000      	movs	r0, #0
    cfe6:	4770      	bx	lr
    cfe8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    cfec:	8b00      	ldrh	r0, [r0, #24]
    cfee:	4770      	bx	lr
    cff0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    cff4:	8b40      	ldrh	r0, [r0, #26]
    cff6:	4770      	bx	lr
    cff8:	b109      	cbz	r1, cffe <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    cffa:	2100      	movs	r1, #0
    cffc:	e000      	b.n	d000 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7a>
    cffe:	2102      	movs	r1, #2
    d000:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d004:	8b01      	ldrh	r1, [r0, #24]
    d006:	b911      	cbnz	r1, d00e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x88>
    d008:	8b40      	ldrh	r0, [r0, #26]
    d00a:	2800      	cmp	r0, #0
    d00c:	d000      	beq.n	d010 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8a>
    d00e:	2001      	movs	r0, #1
    d010:	4770      	bx	lr
    d012:	b538      	push	{r3, r4, r5, lr}
    d014:	7883      	ldrb	r3, [r0, #2]
    d016:	f88d 3000 	strb.w	r3, [sp]
    d01a:	9b00      	ldr	r3, [sp, #0]
    d01c:	9300      	str	r3, [sp, #0]
    d01e:	f89d 3000 	ldrb.w	r3, [sp]
    d022:	b953      	cbnz	r3, d03a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xb4>
    d024:	b10a      	cbz	r2, d02a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa4>
    d026:	2300      	movs	r3, #0
    d028:	e000      	b.n	d02c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa6>
    d02a:	2302      	movs	r3, #2
    d02c:	18c2      	adds	r2, r0, r3
    d02e:	7d14      	ldrb	r4, [r2, #20]
    d030:	2c02      	cmp	r4, #2
    d032:	d004      	beq.n	d03e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xb8>
    d034:	7d52      	ldrb	r2, [r2, #21]
    d036:	2a02      	cmp	r2, #2
    d038:	d004      	beq.n	d044 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbe>
    d03a:	2000      	movs	r0, #0
    d03c:	bd38      	pop	{r3, r4, r5, pc}
    d03e:	461a      	mov	r2, r3
    d040:	1c5b      	adds	r3, r3, #1
    d042:	e000      	b.n	d046 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    d044:	1c5a      	adds	r2, r3, #1
    d046:	b181      	cbz	r1, d06a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe4>
    d048:	18c5      	adds	r5, r0, r3
    d04a:	2400      	movs	r4, #0
    d04c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d050:	752c      	strb	r4, [r5, #20]
    d052:	831c      	strh	r4, [r3, #24]
    d054:	2303      	movs	r3, #3
    d056:	1884      	adds	r4, r0, r2
    d058:	7523      	strb	r3, [r4, #20]
    d05a:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    d05e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    d062:	685b      	ldr	r3, [r3, #4]
    d064:	600b      	str	r3, [r1, #0]
    d066:	8b00      	ldrh	r0, [r0, #24]
    d068:	8088      	strh	r0, [r1, #4]
    d06a:	2001      	movs	r0, #1
    d06c:	bd38      	pop	{r3, r4, r5, pc}
    d06e:	b510      	push	{r4, lr}
    d070:	b109      	cbz	r1, d076 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf0>
    d072:	2100      	movs	r1, #0
    d074:	e000      	b.n	d078 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf2>
    d076:	2102      	movs	r1, #2
    d078:	1843      	adds	r3, r0, r1
    d07a:	7d1c      	ldrb	r4, [r3, #20]
    d07c:	4294      	cmp	r4, r2
    d07e:	d103      	bne.n	d088 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x102>
    d080:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d084:	8b00      	ldrh	r0, [r0, #24]
    d086:	bd10      	pop	{r4, pc}
    d088:	7d5b      	ldrb	r3, [r3, #21]
    d08a:	4293      	cmp	r3, r2
    d08c:	d103      	bne.n	d096 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x110>
    d08e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d092:	8b40      	ldrh	r0, [r0, #26]
    d094:	bd10      	pop	{r4, pc}
    d096:	2000      	movs	r0, #0
    d098:	bd10      	pop	{r4, pc}
    d09a:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    d09e:	d201      	bcs.n	d0a4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11e>
    d0a0:	0841      	lsrs	r1, r0, #1
    d0a2:	e000      	b.n	d0a6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x120>
    d0a4:	21ff      	movs	r1, #255	; 0xff
    d0a6:	1a40      	subs	r0, r0, r1
    d0a8:	f240 6172 	movw	r1, #1650	; 0x672
    d0ac:	4288      	cmp	r0, r1
    d0ae:	db00      	blt.n	d0b2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x12c>
    d0b0:	4608      	mov	r0, r1
    d0b2:	b280      	uxth	r0, r0
    d0b4:	4770      	bx	lr

0000d0b6 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    d0b6:	2101      	movs	r1, #1
    d0b8:	f7ff bf85 	b.w	cfc6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>

0000d0bc <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    d0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d0c0:	4606      	mov	r6, r0
    d0c2:	f342 0780 	sbfx	r7, r2, #2, #1
    d0c6:	7848      	ldrb	r0, [r1, #1]
    d0c8:	460c      	mov	r4, r1
    d0ca:	f022 0504 	bic.w	r5, r2, #4
    d0ce:	1c7f      	adds	r7, r7, #1
    d0d0:	b100      	cbz	r0, d0d4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    d0d2:	b90d      	cbnz	r5, d0d8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    d0d4:	4328      	orrs	r0, r5
    d0d6:	d104      	bne.n	d0e2 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    d0d8:	b145      	cbz	r5, d0ec <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    d0da:	2100      	movs	r1, #0
    d0dc:	4620      	mov	r0, r4
    d0de:	f7f7 faed 	bl	46bc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    d0e2:	2101      	movs	r1, #1
    d0e4:	70a1      	strb	r1, [r4, #2]
    d0e6:	b11f      	cbz	r7, d0f0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    d0e8:	2000      	movs	r0, #0
    d0ea:	e002      	b.n	d0f2 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    d0ec:	2101      	movs	r1, #1
    d0ee:	e7f5      	b.n	d0dc <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    d0f0:	2002      	movs	r0, #2
    d0f2:	1822      	adds	r2, r4, r0
    d0f4:	7d12      	ldrb	r2, [r2, #20]
    d0f6:	2a03      	cmp	r2, #3
    d0f8:	d102      	bne.n	d100 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    d0fa:	2d02      	cmp	r5, #2
    d0fc:	d000      	beq.n	d100 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    d0fe:	1c40      	adds	r0, r0, #1
    d100:	1822      	adds	r2, r4, r0
    d102:	7511      	strb	r1, [r2, #20]
    d104:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    d108:	2200      	movs	r2, #0
    d10a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    d10e:	830a      	strh	r2, [r1, #24]
    d110:	6840      	ldr	r0, [r0, #4]
    d112:	70a2      	strb	r2, [r4, #2]
    d114:	4631      	mov	r1, r6
    d116:	f362 010f 	bfi	r1, r2, #0, #16
    d11a:	e9c6 0100 	strd	r0, r1, [r6]
    d11e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d122 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    d122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d126:	461e      	mov	r6, r3
    d128:	4613      	mov	r3, r2
    d12a:	4604      	mov	r4, r0
    d12c:	b109      	cbz	r1, d132 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    d12e:	2000      	movs	r0, #0
    d130:	e000      	b.n	d134 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    d132:	2002      	movs	r0, #2
    d134:	2101      	movs	r1, #1
    d136:	70a1      	strb	r1, [r4, #2]
    d138:	1821      	adds	r1, r4, r0
    d13a:	7d0a      	ldrb	r2, [r1, #20]
    d13c:	2a01      	cmp	r2, #1
    d13e:	d003      	beq.n	d148 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    d140:	7d49      	ldrb	r1, [r1, #21]
    d142:	2901      	cmp	r1, #1
    d144:	d10c      	bne.n	d160 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    d146:	1c40      	adds	r0, r0, #1
    d148:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    d14c:	2700      	movs	r7, #0
    d14e:	8b29      	ldrh	r1, [r5, #24]
    d150:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    d154:	198a      	adds	r2, r1, r6
    d156:	4562      	cmp	r2, ip
    d158:	d905      	bls.n	d166 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    d15a:	4420      	add	r0, r4
    d15c:	832f      	strh	r7, [r5, #24]
    d15e:	7507      	strb	r7, [r0, #20]
    d160:	2000      	movs	r0, #0
    d162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d166:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    d16a:	4632      	mov	r2, r6
    d16c:	6840      	ldr	r0, [r0, #4]
    d16e:	4408      	add	r0, r1
    d170:	4619      	mov	r1, r3
    d172:	f7fe feca 	bl	bf0a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d176:	8b28      	ldrh	r0, [r5, #24]
    d178:	4430      	add	r0, r6
    d17a:	8328      	strh	r0, [r5, #24]
    d17c:	70a7      	strb	r7, [r4, #2]
    d17e:	2001      	movs	r0, #1
    d180:	e7ef      	b.n	d162 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

0000d182 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>:
    d182:	2202      	movs	r2, #2
    d184:	2100      	movs	r1, #0
    d186:	f7ff bf72 	b.w	d06e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

0000d18a <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    d18a:	b510      	push	{r4, lr}
    d18c:	2101      	movs	r1, #1
    d18e:	f7ff ff33 	bl	cff8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x72>
    d192:	2800      	cmp	r0, #0
    d194:	d000      	beq.n	d198 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    d196:	2001      	movs	r0, #1
    d198:	bd10      	pop	{r4, pc}

0000d19a <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    d19a:	2201      	movs	r2, #1
    d19c:	f7ff bf39 	b.w	d012 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8c>

0000d1a0 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    d1a0:	2200      	movs	r2, #0
    d1a2:	f7ff bf36 	b.w	d012 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8c>

0000d1a6 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    d1a6:	b570      	push	{r4, r5, r6, lr}
    d1a8:	b109      	cbz	r1, d1ae <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    d1aa:	2300      	movs	r3, #0
    d1ac:	e000      	b.n	d1b0 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    d1ae:	2302      	movs	r3, #2
    d1b0:	2101      	movs	r1, #1
    d1b2:	7081      	strb	r1, [r0, #2]
    d1b4:	18c1      	adds	r1, r0, r3
    d1b6:	2402      	movs	r4, #2
    d1b8:	7d0d      	ldrb	r5, [r1, #20]
    d1ba:	2d01      	cmp	r5, #1
    d1bc:	d007      	beq.n	d1ce <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    d1be:	7d4d      	ldrb	r5, [r1, #21]
    d1c0:	2d01      	cmp	r5, #1
    d1c2:	d009      	beq.n	d1d8 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    d1c4:	f44f 718b 	mov.w	r1, #278	; 0x116
    d1c8:	2009      	movs	r0, #9
    d1ca:	f7f6 fe2f 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d1ce:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d1d2:	831a      	strh	r2, [r3, #24]
    d1d4:	750c      	strb	r4, [r1, #20]
    d1d6:	e003      	b.n	d1e0 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    d1d8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d1dc:	835a      	strh	r2, [r3, #26]
    d1de:	754c      	strb	r4, [r1, #21]
    d1e0:	2100      	movs	r1, #0
    d1e2:	7081      	strb	r1, [r0, #2]
    d1e4:	bd70      	pop	{r4, r5, r6, pc}

0000d1e6 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    d1e6:	2101      	movs	r1, #1
    d1e8:	7001      	strb	r1, [r0, #0]
    d1ea:	4770      	bx	lr

0000d1ec <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    d1ec:	2201      	movs	r2, #1
    d1ee:	4611      	mov	r1, r2
    d1f0:	f7ff bf3d 	b.w	d06e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

0000d1f4 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    d1f4:	2201      	movs	r2, #1
    d1f6:	2100      	movs	r1, #0
    d1f8:	f7ff bf39 	b.w	d06e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

0000d1fc <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    d1fc:	2100      	movs	r1, #0
    d1fe:	f7ff bee2 	b.w	cfc6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    d202:	2800      	cmp	r0, #0
    d204:	db09      	blt.n	d21a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    d206:	f000 021f 	and.w	r2, r0, #31
    d20a:	2101      	movs	r1, #1
    d20c:	4091      	lsls	r1, r2
    d20e:	0940      	lsrs	r0, r0, #5
    d210:	0080      	lsls	r0, r0, #2
    d212:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d216:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d21a:	4770      	bx	lr
    d21c:	5840      	ldr	r0, [r0, r1]
    d21e:	2800      	cmp	r0, #0
    d220:	d000      	beq.n	d224 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x28>
    d222:	2001      	movs	r0, #1
    d224:	4770      	bx	lr

0000d226 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    d226:	f7f7 bb9f 	b.w	4968 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>

0000d22a <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
    d22a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    d22e:	2000      	movs	r0, #0
    d230:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    d234:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    d238:	2001      	movs	r0, #1
    d23a:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    d23e:	4770      	bx	lr

0000d240 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    d240:	b108      	cbz	r0, d246 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    d242:	2000      	movs	r0, #0
    d244:	4770      	bx	lr
    d246:	2001      	movs	r0, #1
    d248:	4770      	bx	lr

0000d24a <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    d24a:	f7f7 bcdf 	b.w	4c0c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000d24e <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    d24e:	f7f7 bccd 	b.w	4bec <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000d252 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    d252:	b510      	push	{r4, lr}
    d254:	2900      	cmp	r1, #0
    d256:	4604      	mov	r4, r0
    d258:	f04f 0106 	mov.w	r1, #6
    d25c:	d002      	beq.n	d264 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    d25e:	f7f6 fe71 	bl	3f44 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d262:	e001      	b.n	d268 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    d264:	f7f6 fe7c 	bl	3f60 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d268:	7960      	ldrb	r0, [r4, #5]
    d26a:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    d26e:	7160      	strb	r0, [r4, #5]
    d270:	bd10      	pop	{r4, pc}

0000d272 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    d272:	4770      	bx	lr

0000d274 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    d274:	b530      	push	{r4, r5, lr}
    d276:	460c      	mov	r4, r1
    d278:	4605      	mov	r5, r0
    d27a:	b08d      	sub	sp, #52	; 0x34
    d27c:	f04f 0103 	mov.w	r1, #3
    d280:	f104 0003 	add.w	r0, r4, #3
    d284:	b112      	cbz	r2, d28c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    d286:	f7f6 fe5d 	bl	3f44 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d28a:	e001      	b.n	d290 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    d28c:	f7f6 fe68 	bl	3f60 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d290:	7960      	ldrb	r0, [r4, #5]
    d292:	220d      	movs	r2, #13
    d294:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    d298:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    d29c:	7160      	strb	r0, [r4, #5]
    d29e:	2100      	movs	r1, #0
    d2a0:	a804      	add	r0, sp, #16
    d2a2:	f7fe feac 	bl	bffe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d2a6:	78e0      	ldrb	r0, [r4, #3]
    d2a8:	f88d 001f 	strb.w	r0, [sp, #31]
    d2ac:	7920      	ldrb	r0, [r4, #4]
    d2ae:	f88d 001e 	strb.w	r0, [sp, #30]
    d2b2:	7960      	ldrb	r0, [r4, #5]
    d2b4:	f88d 001d 	strb.w	r0, [sp, #29]
    d2b8:	2210      	movs	r2, #16
    d2ba:	4629      	mov	r1, r5
    d2bc:	4668      	mov	r0, sp
    d2be:	f7fe fe24 	bl	bf0a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d2c2:	4668      	mov	r0, sp
    d2c4:	f7ff ffaf 	bl	d226 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d2c8:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    d2cc:	7020      	strb	r0, [r4, #0]
    d2ce:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    d2d2:	7060      	strb	r0, [r4, #1]
    d2d4:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    d2d8:	70a0      	strb	r0, [r4, #2]
    d2da:	b00d      	add	sp, #52	; 0x34
    d2dc:	bd30      	pop	{r4, r5, pc}

0000d2de <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    d2de:	f7f8 b86d 	b.w	53bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    d2e2:	07c1      	lsls	r1, r0, #31
    d2e4:	d001      	beq.n	d2ea <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0xc>
    d2e6:	2001      	movs	r0, #1
    d2e8:	4770      	bx	lr
    d2ea:	0780      	lsls	r0, r0, #30
    d2ec:	d501      	bpl.n	d2f2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x14>
    d2ee:	2002      	movs	r0, #2
    d2f0:	4770      	bx	lr
    d2f2:	2000      	movs	r0, #0
    d2f4:	4770      	bx	lr
    d2f6:	b510      	push	{r4, lr}
    d2f8:	2801      	cmp	r0, #1
    d2fa:	d008      	beq.n	d30e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    d2fc:	2802      	cmp	r0, #2
    d2fe:	d004      	beq.n	d30a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2c>
    d300:	f240 31ad 	movw	r1, #941	; 0x3ad
    d304:	2006      	movs	r0, #6
    d306:	f7f6 fd91 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d30a:	2001      	movs	r0, #1
    d30c:	bd10      	pop	{r4, pc}
    d30e:	2000      	movs	r0, #0
    d310:	bd10      	pop	{r4, pc}
    d312:	2900      	cmp	r1, #0
    d314:	d004      	beq.n	d320 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x42>
    d316:	2801      	cmp	r0, #1
    d318:	d003      	beq.n	d322 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    d31a:	2901      	cmp	r1, #1
    d31c:	d001      	beq.n	d322 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    d31e:	2002      	movs	r0, #2
    d320:	4770      	bx	lr
    d322:	2001      	movs	r0, #1
    d324:	4770      	bx	lr
    d326:	f7ff bcab 	b.w	cc80 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000d32a <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    d32a:	2101      	movs	r1, #1
    d32c:	f7f8 bbd6 	b.w	5adc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000d330 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    d330:	b510      	push	{r4, lr}
    d332:	f002 fc46 	bl	fbc2 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    d336:	b118      	cbz	r0, d340 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    d338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d33c:	f7fd b92c 	b.w	a598 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    d340:	20ff      	movs	r0, #255	; 0xff
    d342:	bd10      	pop	{r4, pc}

0000d344 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    d344:	b510      	push	{r4, lr}
    d346:	f7f8 fc11 	bl	5b6c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    d34a:	2810      	cmp	r0, #16
    d34c:	d003      	beq.n	d356 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    d34e:	f7f8 fbdd 	bl	5b0c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    d352:	2810      	cmp	r0, #16
    d354:	d100      	bne.n	d358 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    d356:	2008      	movs	r0, #8
    d358:	bd10      	pop	{r4, pc}

0000d35a <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    d35a:	b510      	push	{r4, lr}
    d35c:	f7f8 fc06 	bl	5b6c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    d360:	2810      	cmp	r0, #16
    d362:	d007      	beq.n	d374 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    d364:	f7f8 fbd2 	bl	5b0c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    d368:	2810      	cmp	r0, #16
    d36a:	d003      	beq.n	d374 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    d36c:	f7f8 fc46 	bl	5bfc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    d370:	2001      	movs	r0, #1
    d372:	bd10      	pop	{r4, pc}
    d374:	2000      	movs	r0, #0
    d376:	bd10      	pop	{r4, pc}

0000d378 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    d378:	b510      	push	{r4, lr}
    d37a:	f7f8 fbf7 	bl	5b6c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    d37e:	2810      	cmp	r0, #16
    d380:	d003      	beq.n	d38a <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    d382:	f7f8 fc83 	bl	5c8c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    d386:	2001      	movs	r0, #1
    d388:	bd10      	pop	{r4, pc}
    d38a:	2000      	movs	r0, #0
    d38c:	bd10      	pop	{r4, pc}

0000d38e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    d38e:	b570      	push	{r4, r5, r6, lr}
    d390:	460e      	mov	r6, r1
    d392:	b08c      	sub	sp, #48	; 0x30
    d394:	4614      	mov	r4, r2
    d396:	4601      	mov	r1, r0
    d398:	461d      	mov	r5, r3
    d39a:	2210      	movs	r2, #16
    d39c:	4668      	mov	r0, sp
    d39e:	f000 f91a 	bl	d5d6 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d3a2:	2210      	movs	r2, #16
    d3a4:	4631      	mov	r1, r6
    d3a6:	a804      	add	r0, sp, #16
    d3a8:	f000 f915 	bl	d5d6 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d3ac:	4668      	mov	r0, sp
    d3ae:	f7ff ff3a 	bl	d226 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d3b2:	a908      	add	r1, sp, #32
    d3b4:	f04f 0210 	mov.w	r2, #16
    d3b8:	4628      	mov	r0, r5
    d3ba:	b11c      	cbz	r4, d3c4 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    d3bc:	f000 f90b 	bl	d5d6 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d3c0:	b00c      	add	sp, #48	; 0x30
    d3c2:	bd70      	pop	{r4, r5, r6, pc}
    d3c4:	f7fe fda1 	bl	bf0a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d3c8:	e7fa      	b.n	d3c0 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000d3ca <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    d3ca:	b510      	push	{r4, lr}
    d3cc:	460c      	mov	r4, r1
    d3ce:	2100      	movs	r1, #0
    d3d0:	f7ff fdb3 	bl	cf3a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    d3d4:	6060      	str	r0, [r4, #4]
    d3d6:	b118      	cbz	r0, d3e0 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    d3d8:	2001      	movs	r0, #1
    d3da:	7020      	strb	r0, [r4, #0]
    d3dc:	2000      	movs	r0, #0
    d3de:	bd10      	pop	{r4, pc}
    d3e0:	2002      	movs	r0, #2
    d3e2:	bd10      	pop	{r4, pc}

0000d3e4 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    d3e4:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d3e8:	4348      	muls	r0, r1
    d3ea:	4770      	bx	lr

0000d3ec <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    d3ec:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d3f0:	fbb0 f0f1 	udiv	r0, r0, r1
    d3f4:	b280      	uxth	r0, r0
    d3f6:	4770      	bx	lr

0000d3f8 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    d3f8:	b570      	push	{r4, r5, r6, lr}
    d3fa:	4604      	mov	r4, r0
    d3fc:	4290      	cmp	r0, r2
    d3fe:	d20b      	bcs.n	d418 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    d400:	1b10      	subs	r0, r2, r4
    d402:	2865      	cmp	r0, #101	; 0x65
    d404:	d200      	bcs.n	d408 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    d406:	2065      	movs	r0, #101	; 0x65
    d408:	1825      	adds	r5, r4, r0
    d40a:	428d      	cmp	r5, r1
    d40c:	d803      	bhi.n	d416 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    d40e:	2104      	movs	r1, #4
    d410:	f7f4 f80a 	bl	1428 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    d414:	b108      	cbz	r0, d41a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    d416:	4620      	mov	r0, r4
    d418:	bd70      	pop	{r4, r5, r6, pc}
    d41a:	4628      	mov	r0, r5
    d41c:	bd70      	pop	{r4, r5, r6, pc}

0000d41e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    d41e:	b510      	push	{r4, lr}
    d420:	f1a2 030f 	sub.w	r3, r2, #15
    d424:	290c      	cmp	r1, #12
    d426:	d244      	bcs.n	d4b2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d428:	e8df f001 	tbb	[pc, r1]
    d42c:	120d0806 	.word	0x120d0806
    d430:	241c1815 	.word	0x241c1815
    d434:	312a4127 	.word	0x312a4127
    d438:	b3c2      	cbz	r2, d4ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x8e>
    d43a:	e03a      	b.n	d4b2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d43c:	2a07      	cmp	r2, #7
    d43e:	d03a      	beq.n	d4b6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d440:	2a08      	cmp	r2, #8
    d442:	d038      	beq.n	d4b6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d444:	e035      	b.n	d4b2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d446:	2a0c      	cmp	r2, #12
    d448:	d035      	beq.n	d4b6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d44a:	2a0b      	cmp	r2, #11
    d44c:	d033      	beq.n	d4b6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d44e:	e030      	b.n	d4b2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d450:	2a0d      	cmp	r2, #13
    d452:	d030      	beq.n	d4b6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d454:	e02d      	b.n	d4b2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d456:	2b0c      	cmp	r3, #12
    d458:	d92d      	bls.n	d4b6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d45a:	e02a      	b.n	d4b2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d45c:	3a10      	subs	r2, #16
    d45e:	2a0b      	cmp	r2, #11
    d460:	d929      	bls.n	d4b6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d462:	e026      	b.n	d4b2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d464:	2b03      	cmp	r3, #3
    d466:	d926      	bls.n	d4b6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d468:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
    d46c:	b308      	cbz	r0, d4b2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d46e:	2a1b      	cmp	r2, #27
    d470:	d921      	bls.n	d4b6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d472:	e01e      	b.n	d4b2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d474:	2a04      	cmp	r2, #4
    d476:	d01e      	beq.n	d4b6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d478:	e01b      	b.n	d4b2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d47a:	2a06      	cmp	r2, #6
    d47c:	d01b      	beq.n	d4b6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d47e:	e018      	b.n	d4b2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d480:	2a1c      	cmp	r2, #28
    d482:	d018      	beq.n	d4b6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d484:	2a1d      	cmp	r2, #29
    d486:	d016      	beq.n	d4b6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d488:	2a1e      	cmp	r2, #30
    d48a:	d014      	beq.n	d4b6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d48c:	e011      	b.n	d4b2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d48e:	2a1f      	cmp	r2, #31
    d490:	d011      	beq.n	d4b6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d492:	2a20      	cmp	r2, #32
    d494:	d00f      	beq.n	d4b6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d496:	2a21      	cmp	r2, #33	; 0x21
    d498:	d00d      	beq.n	d4b6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d49a:	2a22      	cmp	r2, #34	; 0x22
    d49c:	d00b      	beq.n	d4b6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d49e:	2a23      	cmp	r2, #35	; 0x23
    d4a0:	d009      	beq.n	d4b6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4a2:	2a24      	cmp	r2, #36	; 0x24
    d4a4:	d007      	beq.n	d4b6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4a6:	2a26      	cmp	r2, #38	; 0x26
    d4a8:	d005      	beq.n	d4b6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4aa:	e002      	b.n	d4b2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d4ac:	e003      	b.n	d4b6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4ae:	2a0e      	cmp	r2, #14
    d4b0:	d001      	beq.n	d4b6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4b2:	2000      	movs	r0, #0
    d4b4:	bd10      	pop	{r4, pc}
    d4b6:	2001      	movs	r0, #1
    d4b8:	bd10      	pop	{r4, pc}

0000d4ba <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    d4ba:	280c      	cmp	r0, #12
    d4bc:	d013      	beq.n	d4e6 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d4be:	280b      	cmp	r0, #11
    d4c0:	d011      	beq.n	d4e6 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d4c2:	280d      	cmp	r0, #13
    d4c4:	d00f      	beq.n	d4e6 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d4c6:	281f      	cmp	r0, #31
    d4c8:	d00d      	beq.n	d4e6 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d4ca:	2820      	cmp	r0, #32
    d4cc:	d00b      	beq.n	d4e6 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d4ce:	2821      	cmp	r0, #33	; 0x21
    d4d0:	d009      	beq.n	d4e6 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d4d2:	2822      	cmp	r0, #34	; 0x22
    d4d4:	d007      	beq.n	d4e6 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d4d6:	2823      	cmp	r0, #35	; 0x23
    d4d8:	d005      	beq.n	d4e6 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d4da:	2824      	cmp	r0, #36	; 0x24
    d4dc:	d003      	beq.n	d4e6 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d4de:	2826      	cmp	r0, #38	; 0x26
    d4e0:	d001      	beq.n	d4e6 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d4e2:	2000      	movs	r0, #0
    d4e4:	4770      	bx	lr
    d4e6:	2001      	movs	r0, #1
    d4e8:	4770      	bx	lr

0000d4ea <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    d4ea:	f011 0f0c 	tst.w	r1, #12
    d4ee:	d016      	beq.n	d51e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    d4f0:	074a      	lsls	r2, r1, #29
    d4f2:	f44f 7116 	mov.w	r1, #600	; 0x258
    d4f6:	2a00      	cmp	r2, #0
    d4f8:	da02      	bge.n	d500 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    d4fa:	f04f 0210 	mov.w	r2, #16
    d4fe:	e001      	b.n	d504 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    d500:	f04f 0240 	mov.w	r2, #64	; 0x40
    d504:	da01      	bge.n	d50a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    d506:	f04f 0196 	mov.w	r1, #150	; 0x96
    d50a:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    d50e:	eba0 0301 	sub.w	r3, r0, r1
    d512:	4288      	cmp	r0, r1
    d514:	d910      	bls.n	d538 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    d516:	fb93 f0f2 	sdiv	r0, r3, r2
    d51a:	b280      	uxth	r0, r0
    d51c:	4770      	bx	lr
    d51e:	2902      	cmp	r1, #2
    d520:	d002      	beq.n	d528 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x3e>
    d522:	2870      	cmp	r0, #112	; 0x70
    d524:	d80a      	bhi.n	d53c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x52>
    d526:	e007      	b.n	d538 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    d528:	283c      	cmp	r0, #60	; 0x3c
    d52a:	d905      	bls.n	d538 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    d52c:	383c      	subs	r0, #60	; 0x3c
    d52e:	17c1      	asrs	r1, r0, #31
    d530:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    d534:	1080      	asrs	r0, r0, #2
    d536:	e7f0      	b.n	d51a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    d538:	2000      	movs	r0, #0
    d53a:	e7ee      	b.n	d51a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    d53c:	3870      	subs	r0, #112	; 0x70
    d53e:	17c1      	asrs	r1, r0, #31
    d540:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    d544:	10c0      	asrs	r0, r0, #3
    d546:	e7e8      	b.n	d51a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>

0000d548 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    d548:	6809      	ldr	r1, [r1, #0]
    d54a:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    d54e:	4770      	bx	lr

0000d550 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    d550:	07c1      	lsls	r1, r0, #31
    d552:	d001      	beq.n	d558 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    d554:	2001      	movs	r0, #1
    d556:	4770      	bx	lr
    d558:	0781      	lsls	r1, r0, #30
    d55a:	d501      	bpl.n	d560 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    d55c:	2002      	movs	r0, #2
    d55e:	4770      	bx	lr
    d560:	0740      	lsls	r0, r0, #29
    d562:	d501      	bpl.n	d568 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    d564:	2008      	movs	r0, #8
    d566:	4770      	bx	lr
    d568:	2000      	movs	r0, #0
    d56a:	4770      	bx	lr

0000d56c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    d56c:	b510      	push	{r4, lr}
    d56e:	f640 12c4 	movw	r2, #2500	; 0x9c4
    d572:	2901      	cmp	r1, #1
    d574:	d006      	beq.n	d584 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    d576:	2902      	cmp	r1, #2
    d578:	d005      	beq.n	d586 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    d57a:	f240 31b1 	movw	r1, #945	; 0x3b1
    d57e:	2029      	movs	r0, #41	; 0x29
    d580:	f7f6 fc54 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d584:	b108      	cbz	r0, d58a <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    d586:	4610      	mov	r0, r2
    d588:	bd10      	pop	{r4, pc}
    d58a:	f240 40e2 	movw	r0, #1250	; 0x4e2
    d58e:	bd10      	pop	{r4, pc}

0000d590 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    d590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d594:	460c      	mov	r4, r1
    d596:	4605      	mov	r5, r0
    d598:	68c6      	ldr	r6, [r0, #12]
    d59a:	f7f4 fb5f 	bl	1c5c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    d59e:	b198      	cbz	r0, d5c8 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
    d5a0:	b1bc      	cbz	r4, d5d2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    d5a2:	4630      	mov	r0, r6
    d5a4:	68e9      	ldr	r1, [r5, #12]
    d5a6:	f7f4 f843 	bl	1630 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    d5aa:	2800      	cmp	r0, #0
    d5ac:	dd11      	ble.n	d5d2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    d5ae:	4420      	add	r0, r4
    d5b0:	1e40      	subs	r0, r0, #1
    d5b2:	fbb0 f7f4 	udiv	r7, r0, r4
    d5b6:	fb07 f104 	mul.w	r1, r7, r4
    d5ba:	4630      	mov	r0, r6
    d5bc:	f7f4 f806 	bl	15cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    d5c0:	60e8      	str	r0, [r5, #12]
    d5c2:	4638      	mov	r0, r7
    d5c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d5c8:	f240 2136 	movw	r1, #566	; 0x236
    d5cc:	2029      	movs	r0, #41	; 0x29
    d5ce:	f7f6 fc2d 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d5d2:	2000      	movs	r0, #0
    d5d4:	e7f6      	b.n	d5c4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>

0000d5d6 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    d5d6:	b530      	push	{r4, r5, lr}
    d5d8:	4613      	mov	r3, r2
    d5da:	e006      	b.n	d5ea <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    d5dc:	18cc      	adds	r4, r1, r3
    d5de:	1ad5      	subs	r5, r2, r3
    d5e0:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    d5e4:	1e5b      	subs	r3, r3, #1
    d5e6:	5544      	strb	r4, [r0, r5]
    d5e8:	b2db      	uxtb	r3, r3
    d5ea:	2b00      	cmp	r3, #0
    d5ec:	d1f6      	bne.n	d5dc <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    d5ee:	bd30      	pop	{r4, r5, pc}

0000d5f0 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    d5f0:	b538      	push	{r3, r4, r5, lr}
    d5f2:	4605      	mov	r5, r0
    d5f4:	460c      	mov	r4, r1
    d5f6:	4668      	mov	r0, sp
    d5f8:	f7fd fd2e 	bl	b058 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    d5fc:	b310      	cbz	r0, d644 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x54>
    d5fe:	f99d 0000 	ldrsb.w	r0, [sp]
    d602:	7260      	strb	r0, [r4, #9]
    d604:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    d608:	72a1      	strb	r1, [r4, #10]
    d60a:	f994 100b 	ldrsb.w	r1, [r4, #11]
    d60e:	2200      	movs	r2, #0
    d610:	1a41      	subs	r1, r0, r1
    d612:	d500      	bpl.n	d616 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
    d614:	4249      	negs	r1, r1
    d616:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
    d61a:	428b      	cmp	r3, r1
    d61c:	dc10      	bgt.n	d640 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    d61e:	2bff      	cmp	r3, #255	; 0xff
    d620:	d00e      	beq.n	d640 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    d622:	7b21      	ldrb	r1, [r4, #12]
    d624:	1c49      	adds	r1, r1, #1
    d626:	b2c9      	uxtb	r1, r1
    d628:	7321      	strb	r1, [r4, #12]
    d62a:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    d62e:	4299      	cmp	r1, r3
    d630:	d802      	bhi.n	d638 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x48>
    d632:	7ae1      	ldrb	r1, [r4, #11]
    d634:	297f      	cmp	r1, #127	; 0x7f
    d636:	d103      	bne.n	d640 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    d638:	72e0      	strb	r0, [r4, #11]
    d63a:	2000      	movs	r0, #0
    d63c:	7320      	strb	r0, [r4, #12]
    d63e:	2201      	movs	r2, #1
    d640:	4610      	mov	r0, r2
    d642:	bd38      	pop	{r3, r4, r5, pc}
    d644:	207f      	movs	r0, #127	; 0x7f
    d646:	7260      	strb	r0, [r4, #9]
    d648:	2000      	movs	r0, #0
    d64a:	bd38      	pop	{r3, r4, r5, pc}

0000d64c <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    d64c:	2300      	movs	r3, #0
    d64e:	6283      	str	r3, [r0, #40]	; 0x28
    d650:	8602      	strh	r2, [r0, #48]	; 0x30
    d652:	f240 2371 	movw	r3, #625	; 0x271
    d656:	435a      	muls	r2, r3
    d658:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    d65c:	1e52      	subs	r2, r2, #1
    d65e:	fbb2 f1f1 	udiv	r1, r2, r1
    d662:	62c1      	str	r1, [r0, #44]	; 0x2c
    d664:	4770      	bx	lr

0000d666 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    d666:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    d66a:	4607      	mov	r7, r0
    d66c:	4690      	mov	r8, r2
    d66e:	468b      	mov	fp, r1
    d670:	2601      	movs	r6, #1
    d672:	4608      	mov	r0, r1
    d674:	f000 f941 	bl	d8fa <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    d678:	4682      	mov	sl, r0
    d67a:	4658      	mov	r0, fp
    d67c:	f000 f949 	bl	d912 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    d680:	4681      	mov	r9, r0
    d682:	f7ff ff65 	bl	d550 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    d686:	4604      	mov	r4, r0
    d688:	4650      	mov	r0, sl
    d68a:	f7ff ff61 	bl	d550 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    d68e:	4605      	mov	r5, r0
    d690:	ea54 0005 	orrs.w	r0, r4, r5
    d694:	d100      	bne.n	d698 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    d696:	2600      	movs	r6, #0
    d698:	f7fc ff06 	bl	a4a8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    d69c:	ea10 0f09 	tst.w	r0, r9
    d6a0:	d100      	bne.n	d6a4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    d6a2:	2400      	movs	r4, #0
    d6a4:	f7fc ff00 	bl	a4a8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    d6a8:	ea10 0f0a 	tst.w	r0, sl
    d6ac:	d100      	bne.n	d6b0 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    d6ae:	2500      	movs	r5, #0
    d6b0:	f897 006a 	ldrb.w	r0, [r7, #106]	; 0x6a
    d6b4:	42a0      	cmp	r0, r4
    d6b6:	d100      	bne.n	d6ba <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    d6b8:	2400      	movs	r4, #0
    d6ba:	f888 4000 	strb.w	r4, [r8]
    d6be:	f897 006b 	ldrb.w	r0, [r7, #107]	; 0x6b
    d6c2:	42a8      	cmp	r0, r5
    d6c4:	d100      	bne.n	d6c8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    d6c6:	2500      	movs	r5, #0
    d6c8:	f888 5001 	strb.w	r5, [r8, #1]
    d6cc:	b974      	cbnz	r4, d6ec <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d6ce:	b96d      	cbnz	r5, d6ec <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d6d0:	4658      	mov	r0, fp
    d6d2:	f000 f91c 	bl	d90e <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    d6d6:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
    d6da:	1a40      	subs	r0, r0, r1
    d6dc:	b200      	sxth	r0, r0
    d6de:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    d6e2:	4288      	cmp	r0, r1
    d6e4:	dc01      	bgt.n	d6ea <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    d6e6:	2800      	cmp	r0, #0
    d6e8:	dc00      	bgt.n	d6ec <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d6ea:	2600      	movs	r6, #0
    d6ec:	4630      	mov	r0, r6
    d6ee:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000d6f2 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    d6f2:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d6f6:	4348      	muls	r0, r1
    d6f8:	4770      	bx	lr

0000d6fa <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    d6fa:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d6fe:	fb10 f001 	smulbb	r0, r0, r1
    d702:	4770      	bx	lr

0000d704 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    d704:	b510      	push	{r4, lr}
    d706:	2300      	movs	r3, #0
    d708:	461a      	mov	r2, r3
    d70a:	e003      	b.n	d714 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    d70c:	5c84      	ldrb	r4, [r0, r2]
    d70e:	4323      	orrs	r3, r4
    d710:	1c52      	adds	r2, r2, #1
    d712:	b2d2      	uxtb	r2, r2
    d714:	428a      	cmp	r2, r1
    d716:	d3f9      	bcc.n	d70c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    d718:	b10b      	cbz	r3, d71e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    d71a:	2000      	movs	r0, #0
    d71c:	bd10      	pop	{r4, pc}
    d71e:	2001      	movs	r0, #1
    d720:	bd10      	pop	{r4, pc}

0000d722 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    d722:	b510      	push	{r4, lr}
    d724:	4604      	mov	r4, r0
    d726:	f890 0020 	ldrb.w	r0, [r0, #32]
    d72a:	b108      	cbz	r0, d730 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    d72c:	2825      	cmp	r0, #37	; 0x25
    d72e:	d901      	bls.n	d734 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    d730:	2012      	movs	r0, #18
    d732:	bd10      	pop	{r4, pc}
    d734:	b12a      	cbz	r2, d742 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    d736:	7d60      	ldrb	r0, [r4, #21]
    d738:	b128      	cbz	r0, d746 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    d73a:	2801      	cmp	r0, #1
    d73c:	d009      	beq.n	d752 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    d73e:	201f      	movs	r0, #31
    d740:	bd10      	pop	{r4, pc}
    d742:	2000      	movs	r0, #0
    d744:	bd10      	pop	{r4, pc}
    d746:	4620      	mov	r0, r4
    d748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d74c:	4611      	mov	r1, r2
    d74e:	f7f8 bb91 	b.w	5e74 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xa8>
    d752:	88a2      	ldrh	r2, [r4, #4]
    d754:	6909      	ldr	r1, [r1, #16]
    d756:	f104 0015 	add.w	r0, r4, #21
    d75a:	f7f8 fb37 	bl	5dcc <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    d75e:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    d762:	e7ee      	b.n	d742 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000d764 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    d764:	b530      	push	{r4, r5, lr}
    d766:	1c42      	adds	r2, r0, #1
    d768:	428a      	cmp	r2, r1
    d76a:	d004      	beq.n	d776 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
    d76c:	680a      	ldr	r2, [r1, #0]
    d76e:	f8c0 2001 	str.w	r2, [r0, #1]
    d772:	7909      	ldrb	r1, [r1, #4]
    d774:	7141      	strb	r1, [r0, #5]
    d776:	7941      	ldrb	r1, [r0, #5]
    d778:	f001 011f 	and.w	r1, r1, #31
    d77c:	7141      	strb	r1, [r0, #5]
    d77e:	2100      	movs	r1, #0
    d780:	72c1      	strb	r1, [r0, #11]
    d782:	1843      	adds	r3, r0, r1
    d784:	1c49      	adds	r1, r1, #1
    d786:	785c      	ldrb	r4, [r3, #1]
    d788:	b2c9      	uxtb	r1, r1
    d78a:	f004 0201 	and.w	r2, r4, #1
    d78e:	0864      	lsrs	r4, r4, #1
    d790:	f004 0501 	and.w	r5, r4, #1
    d794:	4415      	add	r5, r2
    d796:	0862      	lsrs	r2, r4, #1
    d798:	f002 0401 	and.w	r4, r2, #1
    d79c:	442c      	add	r4, r5
    d79e:	0852      	lsrs	r2, r2, #1
    d7a0:	f002 0501 	and.w	r5, r2, #1
    d7a4:	442c      	add	r4, r5
    d7a6:	0852      	lsrs	r2, r2, #1
    d7a8:	f002 0501 	and.w	r5, r2, #1
    d7ac:	442c      	add	r4, r5
    d7ae:	0852      	lsrs	r2, r2, #1
    d7b0:	f002 0501 	and.w	r5, r2, #1
    d7b4:	442c      	add	r4, r5
    d7b6:	0852      	lsrs	r2, r2, #1
    d7b8:	f002 0501 	and.w	r5, r2, #1
    d7bc:	442c      	add	r4, r5
    d7be:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    d7c2:	719a      	strb	r2, [r3, #6]
    d7c4:	7ac3      	ldrb	r3, [r0, #11]
    d7c6:	2905      	cmp	r1, #5
    d7c8:	441a      	add	r2, r3
    d7ca:	72c2      	strb	r2, [r0, #11]
    d7cc:	d3d9      	bcc.n	d782 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
    d7ce:	bd30      	pop	{r4, r5, pc}
    d7d0:	b570      	push	{r4, r5, r6, lr}
    d7d2:	f8d0 201f 	ldr.w	r2, [r0, #31]
    d7d6:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    d7da:	f012 0fff 	tst.w	r2, #255	; 0xff
    d7de:	f023 031f 	bic.w	r3, r3, #31
    d7e2:	d108      	bne.n	d7f6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    d7e4:	f3c2 2407 	ubfx	r4, r2, #8, #8
    d7e8:	b92c      	cbnz	r4, d7f6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    d7ea:	f3c2 4407 	ubfx	r4, r2, #16, #8
    d7ee:	b914      	cbnz	r4, d7f6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    d7f0:	0e12      	lsrs	r2, r2, #24
    d7f2:	d100      	bne.n	d7f6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    d7f4:	b35b      	cbz	r3, d84e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d7f6:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    d7fa:	f8b0 501b 	ldrh.w	r5, [r0, #27]
    d7fe:	f8b0 4017 	ldrh.w	r4, [r0, #23]
    d802:	7d83      	ldrb	r3, [r0, #22]
    d804:	b141      	cbz	r1, d818 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    d806:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    d80a:	d905      	bls.n	d818 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    d80c:	f640 5107 	movw	r1, #3335	; 0xd07
    d810:	428a      	cmp	r2, r1
    d812:	d801      	bhi.n	d818 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    d814:	2101      	movs	r1, #1
    d816:	e000      	b.n	d81a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb6>
    d818:	2100      	movs	r1, #0
    d81a:	7846      	ldrb	r6, [r0, #1]
    d81c:	2e22      	cmp	r6, #34	; 0x22
    d81e:	d116      	bne.n	d84e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d820:	b959      	cbnz	r1, d83a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xd6>
    d822:	1f91      	subs	r1, r2, #6
    d824:	f640 467a 	movw	r6, #3194	; 0xc7a
    d828:	42b1      	cmp	r1, r6
    d82a:	d810      	bhi.n	d84e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d82c:	b17b      	cbz	r3, d84e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d82e:	2b08      	cmp	r3, #8
    d830:	d80d      	bhi.n	d84e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d832:	4293      	cmp	r3, r2
    d834:	d20b      	bcs.n	d84e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d836:	4294      	cmp	r4, r2
    d838:	d809      	bhi.n	d84e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d83a:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    d83e:	d206      	bcs.n	d84e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d840:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    d844:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    d848:	d801      	bhi.n	d84e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d84a:	2001      	movs	r0, #1
    d84c:	bd70      	pop	{r4, r5, r6, pc}
    d84e:	2000      	movs	r0, #0
    d850:	bd70      	pop	{r4, r5, r6, pc}

0000d852 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>:
    d852:	b570      	push	{r4, r5, r6, lr}
    d854:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    d858:	f8b0 5009 	ldrh.w	r5, [r0, #9]
    d85c:	f830 4f05 	ldrh.w	r4, [r0, #5]!
    d860:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    d864:	88c0      	ldrh	r0, [r0, #6]
    d866:	b131      	cbz	r1, d876 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    d868:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    d86c:	d903      	bls.n	d876 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    d86e:	f640 5107 	movw	r1, #3335	; 0xd07
    d872:	428a      	cmp	r2, r1
    d874:	d90b      	bls.n	d88e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x3c>
    d876:	1f91      	subs	r1, r2, #6
    d878:	f640 467a 	movw	r6, #3194	; 0xc7a
    d87c:	42b1      	cmp	r1, r6
    d87e:	d80e      	bhi.n	d89e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d880:	b16b      	cbz	r3, d89e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d882:	2b08      	cmp	r3, #8
    d884:	d80b      	bhi.n	d89e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d886:	4293      	cmp	r3, r2
    d888:	d209      	bcs.n	d89e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d88a:	4294      	cmp	r4, r2
    d88c:	d807      	bhi.n	d89e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d88e:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    d892:	d204      	bcs.n	d89e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d894:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    d898:	d801      	bhi.n	d89e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d89a:	2001      	movs	r0, #1
    d89c:	bd70      	pop	{r4, r5, r6, pc}
    d89e:	2000      	movs	r0, #0
    d8a0:	bd70      	pop	{r4, r5, r6, pc}

0000d8a2 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>:
    d8a2:	6842      	ldr	r2, [r0, #4]
    d8a4:	600a      	str	r2, [r1, #0]
    d8a6:	7a00      	ldrb	r0, [r0, #8]
    d8a8:	7108      	strb	r0, [r1, #4]
    d8aa:	4770      	bx	lr

0000d8ac <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>:
    d8ac:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    d8b0:	4770      	bx	lr

0000d8b2 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>:
    d8b2:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    d8b6:	4770      	bx	lr

0000d8b8 <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>:
    d8b8:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    d8bc:	4770      	bx	lr

0000d8be <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>:
    d8be:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    d8c2:	4770      	bx	lr

0000d8c4 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>:
    d8c4:	8980      	ldrh	r0, [r0, #12]
    d8c6:	8008      	strh	r0, [r1, #0]
    d8c8:	4770      	bx	lr

0000d8ca <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>:
    d8ca:	f8d0 0016 	ldr.w	r0, [r0, #22]
    d8ce:	6008      	str	r0, [r1, #0]
    d8d0:	4770      	bx	lr

0000d8d2 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>:
    d8d2:	6842      	ldr	r2, [r0, #4]
    d8d4:	600a      	str	r2, [r1, #0]
    d8d6:	6880      	ldr	r0, [r0, #8]
    d8d8:	6048      	str	r0, [r1, #4]
    d8da:	4770      	bx	lr

0000d8dc <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>:
    d8dc:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    d8e0:	600a      	str	r2, [r1, #0]
    d8e2:	6840      	ldr	r0, [r0, #4]
    d8e4:	6048      	str	r0, [r1, #4]
    d8e6:	4770      	bx	lr

0000d8e8 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>:
    d8e8:	6842      	ldr	r2, [r0, #4]
    d8ea:	600a      	str	r2, [r1, #0]
    d8ec:	6880      	ldr	r0, [r0, #8]
    d8ee:	6048      	str	r0, [r1, #4]
    d8f0:	4770      	bx	lr

0000d8f2 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    d8f2:	7800      	ldrb	r0, [r0, #0]
    d8f4:	f000 0003 	and.w	r0, r0, #3
    d8f8:	4770      	bx	lr

0000d8fa <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>:
    d8fa:	7900      	ldrb	r0, [r0, #4]
    d8fc:	4770      	bx	lr

0000d8fe <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    d8fe:	8880      	ldrh	r0, [r0, #4]
    d900:	4770      	bx	lr

0000d902 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    d902:	88c0      	ldrh	r0, [r0, #6]
    d904:	4770      	bx	lr

0000d906 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    d906:	8900      	ldrh	r0, [r0, #8]
    d908:	4770      	bx	lr

0000d90a <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    d90a:	8940      	ldrh	r0, [r0, #10]
    d90c:	4770      	bx	lr

0000d90e <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>:
    d90e:	88c0      	ldrh	r0, [r0, #6]
    d910:	4770      	bx	lr

0000d912 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>:
    d912:	7940      	ldrb	r0, [r0, #5]
    d914:	4770      	bx	lr

0000d916 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    d916:	7900      	ldrb	r0, [r0, #4]
    d918:	4770      	bx	lr

0000d91a <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    d91a:	7900      	ldrb	r0, [r0, #4]
    d91c:	4770      	bx	lr

0000d91e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    d91e:	8901      	ldrh	r1, [r0, #8]
    d920:	291b      	cmp	r1, #27
    d922:	d30c      	bcc.n	d93e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    d924:	8941      	ldrh	r1, [r0, #10]
    d926:	f44f 72a4 	mov.w	r2, #328	; 0x148
    d92a:	4291      	cmp	r1, r2
    d92c:	d307      	bcc.n	d93e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    d92e:	8881      	ldrh	r1, [r0, #4]
    d930:	291b      	cmp	r1, #27
    d932:	d304      	bcc.n	d93e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    d934:	88c0      	ldrh	r0, [r0, #6]
    d936:	4290      	cmp	r0, r2
    d938:	d301      	bcc.n	d93e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    d93a:	2001      	movs	r0, #1
    d93c:	4770      	bx	lr
    d93e:	2000      	movs	r0, #0
    d940:	4770      	bx	lr

0000d942 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    d942:	b510      	push	{r4, lr}
    d944:	29fb      	cmp	r1, #251	; 0xfb
    d946:	d904      	bls.n	d952 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    d948:	f44f 61af 	mov.w	r1, #1400	; 0x578
    d94c:	202a      	movs	r0, #42	; 0x2a
    d94e:	f7f6 fa6d 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d952:	7041      	strb	r1, [r0, #1]
    d954:	bd10      	pop	{r4, pc}

0000d956 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    d956:	7901      	ldrb	r1, [r0, #4]
    d958:	0749      	lsls	r1, r1, #29
    d95a:	d004      	beq.n	d966 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    d95c:	7940      	ldrb	r0, [r0, #5]
    d95e:	0740      	lsls	r0, r0, #29
    d960:	d001      	beq.n	d966 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    d962:	2001      	movs	r0, #1
    d964:	4770      	bx	lr
    d966:	2000      	movs	r0, #0
    d968:	4770      	bx	lr

0000d96a <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    d96a:	7900      	ldrb	r0, [r0, #4]
    d96c:	4770      	bx	lr

0000d96e <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    d96e:	7940      	ldrb	r0, [r0, #5]
    d970:	4770      	bx	lr

0000d972 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    d972:	7101      	strb	r1, [r0, #4]
    d974:	4770      	bx	lr

0000d976 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    d976:	7141      	strb	r1, [r0, #5]
    d978:	4770      	bx	lr

0000d97a <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>:
    d97a:	b510      	push	{r4, lr}
    d97c:	2a1b      	cmp	r2, #27
    d97e:	d904      	bls.n	d98a <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA+0x10>
    d980:	f240 31df 	movw	r1, #991	; 0x3df
    d984:	202a      	movs	r0, #42	; 0x2a
    d986:	f7f6 fa51 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d98a:	7042      	strb	r2, [r0, #1]
    d98c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d990:	1cc0      	adds	r0, r0, #3
    d992:	f7fe baba 	b.w	bf0a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000d996 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>:
    d996:	6809      	ldr	r1, [r1, #0]
    d998:	60c1      	str	r1, [r0, #12]
    d99a:	4770      	bx	lr

0000d99c <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>:
    d99c:	680a      	ldr	r2, [r1, #0]
    d99e:	6042      	str	r2, [r0, #4]
    d9a0:	6849      	ldr	r1, [r1, #4]
    d9a2:	6081      	str	r1, [r0, #8]
    d9a4:	4770      	bx	lr

0000d9a6 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    d9a6:	680a      	ldr	r2, [r1, #0]
    d9a8:	6042      	str	r2, [r0, #4]
    d9aa:	6849      	ldr	r1, [r1, #4]
    d9ac:	6081      	str	r1, [r0, #8]
    d9ae:	4770      	bx	lr

0000d9b0 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>:
    d9b0:	680a      	ldr	r2, [r1, #0]
    d9b2:	6042      	str	r2, [r0, #4]
    d9b4:	6849      	ldr	r1, [r1, #4]
    d9b6:	6081      	str	r1, [r0, #8]
    d9b8:	4770      	bx	lr

0000d9ba <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    d9ba:	7802      	ldrb	r2, [r0, #0]
    d9bc:	f001 0103 	and.w	r1, r1, #3
    d9c0:	f022 0203 	bic.w	r2, r2, #3
    d9c4:	430a      	orrs	r2, r1
    d9c6:	7002      	strb	r2, [r0, #0]
    d9c8:	4770      	bx	lr

0000d9ca <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    d9ca:	7101      	strb	r1, [r0, #4]
    d9cc:	0a09      	lsrs	r1, r1, #8
    d9ce:	7141      	strb	r1, [r0, #5]
    d9d0:	4770      	bx	lr

0000d9d2 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    d9d2:	7181      	strb	r1, [r0, #6]
    d9d4:	0a09      	lsrs	r1, r1, #8
    d9d6:	71c1      	strb	r1, [r0, #7]
    d9d8:	4770      	bx	lr

0000d9da <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    d9da:	7201      	strb	r1, [r0, #8]
    d9dc:	0a09      	lsrs	r1, r1, #8
    d9de:	7241      	strb	r1, [r0, #9]
    d9e0:	4770      	bx	lr

0000d9e2 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    d9e2:	7281      	strb	r1, [r0, #10]
    d9e4:	0a09      	lsrs	r1, r1, #8
    d9e6:	72c1      	strb	r1, [r0, #11]
    d9e8:	4770      	bx	lr

0000d9ea <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>:
    d9ea:	7802      	ldrb	r2, [r0, #0]
    d9ec:	f002 020f 	and.w	r2, r2, #15
    d9f0:	2a03      	cmp	r2, #3
    d9f2:	d003      	beq.n	d9fc <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x12>
    d9f4:	2a05      	cmp	r2, #5
    d9f6:	d104      	bne.n	da02 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x18>
    d9f8:	f7ff beea 	b.w	d7d0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x6c>
    d9fc:	7840      	ldrb	r0, [r0, #1]
    d9fe:	280c      	cmp	r0, #12
    da00:	d001      	beq.n	da06 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x1c>
    da02:	2000      	movs	r0, #0
    da04:	4770      	bx	lr
    da06:	2001      	movs	r0, #1
    da08:	4770      	bx	lr

0000da0a <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>:
    da0a:	b570      	push	{r4, r5, r6, lr}
    da0c:	4614      	mov	r4, r2
    da0e:	4605      	mov	r5, r0
    da10:	2a1f      	cmp	r2, #31
    da12:	d903      	bls.n	da1c <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I+0x12>
    da14:	21b2      	movs	r1, #178	; 0xb2
    da16:	202a      	movs	r0, #42	; 0x2a
    da18:	f7f6 fa08 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    da1c:	f105 0009 	add.w	r0, r5, #9
    da20:	f7fe fa73 	bl	bf0a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    da24:	1da4      	adds	r4, r4, #6
    da26:	706c      	strb	r4, [r5, #1]
    da28:	bd70      	pop	{r4, r5, r6, pc}

0000da2a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    da2a:	b510      	push	{r4, lr}
    da2c:	7802      	ldrb	r2, [r0, #0]
    da2e:	f001 030f 	and.w	r3, r1, #15
    da32:	f022 020f 	bic.w	r2, r2, #15
    da36:	431a      	orrs	r2, r3
    da38:	7002      	strb	r2, [r0, #0]
    da3a:	2907      	cmp	r1, #7
    da3c:	d20c      	bcs.n	da58 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    da3e:	e8df f001 	tbb	[pc, r1]
    da42:	0604      	.short	0x0604
    da44:	08040604 	.word	0x08040604
    da48:	0004      	.short	0x0004
    da4a:	2106      	movs	r1, #6
    da4c:	e002      	b.n	da54 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    da4e:	210c      	movs	r1, #12
    da50:	e000      	b.n	da54 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    da52:	2122      	movs	r1, #34	; 0x22
    da54:	7041      	strb	r1, [r0, #1]
    da56:	bd10      	pop	{r4, pc}
    da58:	216e      	movs	r1, #110	; 0x6e
    da5a:	202a      	movs	r0, #42	; 0x2a
    da5c:	f7f6 f9e6 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000da60 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    da60:	680a      	ldr	r2, [r1, #0]
    da62:	f840 2f09 	str.w	r2, [r0, #9]!
    da66:	8889      	ldrh	r1, [r1, #4]
    da68:	8081      	strh	r1, [r0, #4]
    da6a:	4770      	bx	lr

0000da6c <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    da6c:	7802      	ldrb	r2, [r0, #0]
    da6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    da72:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    da76:	7002      	strb	r2, [r0, #0]
    da78:	4770      	bx	lr

0000da7a <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    da7a:	680a      	ldr	r2, [r1, #0]
    da7c:	f840 2f03 	str.w	r2, [r0, #3]!
    da80:	8889      	ldrh	r1, [r1, #4]
    da82:	8081      	strh	r1, [r0, #4]
    da84:	4770      	bx	lr

0000da86 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    da86:	7802      	ldrb	r2, [r0, #0]
    da88:	2340      	movs	r3, #64	; 0x40
    da8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    da8e:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    da92:	430a      	orrs	r2, r1
    da94:	7002      	strb	r2, [r0, #0]
    da96:	4770      	bx	lr

0000da98 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>:
    da98:	b570      	push	{r4, r5, r6, lr}
    da9a:	4614      	mov	r4, r2
    da9c:	4605      	mov	r5, r0
    da9e:	2a1f      	cmp	r2, #31
    daa0:	d903      	bls.n	daaa <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x12>
    daa2:	21d4      	movs	r1, #212	; 0xd4
    daa4:	202a      	movs	r0, #42	; 0x2a
    daa6:	f7f6 f9c1 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    daaa:	f105 0009 	add.w	r0, r5, #9
    daae:	f7fe fa2c 	bl	bf0a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dab2:	1da4      	adds	r4, r4, #6
    dab4:	706c      	strb	r4, [r5, #1]
    dab6:	bd70      	pop	{r4, r5, r6, pc}

0000dab8 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    dab8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    dabc:	4604      	mov	r4, r0
    dabe:	2000      	movs	r0, #0
    dac0:	f7f6 fb9e 	bl	4200 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    dac4:	2600      	movs	r6, #0
    dac6:	4605      	mov	r5, r0
    dac8:	4637      	mov	r7, r6
    daca:	e00e      	b.n	daea <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x32>
    dacc:	8820      	ldrh	r0, [r4, #0]
    dace:	1c40      	adds	r0, r0, #1
    dad0:	b280      	uxth	r0, r0
    dad2:	8020      	strh	r0, [r4, #0]
    dad4:	42a8      	cmp	r0, r5
    dad6:	d300      	bcc.n	dada <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x22>
    dad8:	8027      	strh	r7, [r4, #0]
    dada:	8820      	ldrh	r0, [r4, #0]
    dadc:	4669      	mov	r1, sp
    dade:	f7ff fc74 	bl	d3ca <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    dae2:	2800      	cmp	r0, #0
    dae4:	d007      	beq.n	daf6 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x3e>
    dae6:	1c76      	adds	r6, r6, #1
    dae8:	b2f6      	uxtb	r6, r6
    daea:	42ae      	cmp	r6, r5
    daec:	d3ee      	bcc.n	dacc <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x14>
    daee:	f64f 70ff 	movw	r0, #65535	; 0xffff
    daf2:	8020      	strh	r0, [r4, #0]
    daf4:	2012      	movs	r0, #18
    daf6:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

0000dafa <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    dafa:	6841      	ldr	r1, [r0, #4]
    dafc:	2200      	movs	r2, #0
    dafe:	f891 3102 	ldrb.w	r3, [r1, #258]	; 0x102
    db02:	2b00      	cmp	r3, #0
    db04:	d004      	beq.n	db10 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    db06:	f881 2102 	strb.w	r2, [r1, #258]	; 0x102
    db0a:	6840      	ldr	r0, [r0, #4]
    db0c:	f000 bc64 	b.w	e3d8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    db10:	4770      	bx	lr

0000db12 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    db12:	b510      	push	{r4, lr}
    db14:	7901      	ldrb	r1, [r0, #4]
    db16:	b119      	cbz	r1, db20 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    db18:	2901      	cmp	r1, #1
    db1a:	d006      	beq.n	db2a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    db1c:	2000      	movs	r0, #0
    db1e:	bd10      	pop	{r4, pc}
    db20:	8842      	ldrh	r2, [r0, #2]
    db22:	6883      	ldr	r3, [r0, #8]
    db24:	8800      	ldrh	r0, [r0, #0]
    db26:	2102      	movs	r1, #2
    db28:	e003      	b.n	db32 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    db2a:	8842      	ldrh	r2, [r0, #2]
    db2c:	6883      	ldr	r3, [r0, #8]
    db2e:	8800      	ldrh	r0, [r0, #0]
    db30:	2101      	movs	r1, #1
    db32:	f7f8 fa4d 	bl	5fd0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x54>
    db36:	b908      	cbnz	r0, db3c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    db38:	f7f8 faa0 	bl	607c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    db3c:	2001      	movs	r0, #1
    db3e:	bd10      	pop	{r4, pc}
    db40:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    db44:	460e      	mov	r6, r1
    db46:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    db4a:	4617      	mov	r7, r2
    db4c:	39ff      	subs	r1, #255	; 0xff
    db4e:	d014      	beq.n	db7a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    db50:	8030      	strh	r0, [r6, #0]
    db52:	2100      	movs	r1, #0
    db54:	7171      	strb	r1, [r6, #5]
    db56:	f7f6 fd83 	bl	4660 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    db5a:	4604      	mov	r4, r0
    db5c:	f7ff f81b 	bl	cb96 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    db60:	0005      	movs	r5, r0
    db62:	d00a      	beq.n	db7a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    db64:	4620      	mov	r0, r4
    db66:	4629      	mov	r1, r5
    db68:	aa01      	add	r2, sp, #4
    db6a:	f7ff f837 	bl	cbdc <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    db6e:	8070      	strh	r0, [r6, #2]
    db70:	b130      	cbz	r0, db80 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6e>
    db72:	28fb      	cmp	r0, #251	; 0xfb
    db74:	d906      	bls.n	db84 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x72>
    db76:	21ae      	movs	r1, #174	; 0xae
    db78:	e026      	b.n	dbc8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    db7a:	2000      	movs	r0, #0
    db7c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    db80:	21ad      	movs	r1, #173	; 0xad
    db82:	e021      	b.n	dbc8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    db84:	9801      	ldr	r0, [sp, #4]
    db86:	f7ff feb4 	bl	d8f2 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    db8a:	2801      	cmp	r0, #1
    db8c:	d003      	beq.n	db96 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    db8e:	2802      	cmp	r0, #2
    db90:	d001      	beq.n	db96 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    db92:	21bd      	movs	r1, #189	; 0xbd
    db94:	e018      	b.n	dbc8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    db96:	7130      	strb	r0, [r6, #4]
    db98:	4629      	mov	r1, r5
    db9a:	8873      	ldrh	r3, [r6, #2]
    db9c:	2503      	movs	r5, #3
    db9e:	4620      	mov	r0, r4
    dba0:	463a      	mov	r2, r7
    dba2:	9500      	str	r5, [sp, #0]
    dba4:	f7fe fee9 	bl	c97a <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    dba8:	4620      	mov	r0, r4
    dbaa:	60b7      	str	r7, [r6, #8]
    dbac:	f7fe ffa2 	bl	caf4 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    dbb0:	b138      	cbz	r0, dbc2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb0>
    dbb2:	2100      	movs	r1, #0
    dbb4:	4620      	mov	r0, r4
    dbb6:	460a      	mov	r2, r1
    dbb8:	f7ff f8ee 	bl	cd98 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    dbbc:	b118      	cbz	r0, dbc6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb4>
    dbbe:	2001      	movs	r0, #1
    dbc0:	e7dc      	b.n	db7c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6a>
    dbc2:	21cd      	movs	r1, #205	; 0xcd
    dbc4:	e000      	b.n	dbc8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    dbc6:	21d2      	movs	r1, #210	; 0xd2
    dbc8:	202b      	movs	r0, #43	; 0x2b
    dbca:	f7f6 f92f 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000dbce <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    dbce:	f7f8 bc13 	b.w	63f8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x298>
    dbd2:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    dbd6:	4604      	mov	r4, r0
    dbd8:	2000      	movs	r0, #0
    dbda:	f7f6 fb11 	bl	4200 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    dbde:	4605      	mov	r5, r0
    dbe0:	2001      	movs	r0, #1
    dbe2:	f7f6 fb0d 	bl	4200 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    dbe6:	4428      	add	r0, r5
    dbe8:	2600      	movs	r6, #0
    dbea:	b2c7      	uxtb	r7, r0
    dbec:	46b0      	mov	r8, r6
    dbee:	e017      	b.n	dc20 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x52>
    dbf0:	8820      	ldrh	r0, [r4, #0]
    dbf2:	1c40      	adds	r0, r0, #1
    dbf4:	b280      	uxth	r0, r0
    dbf6:	8020      	strh	r0, [r4, #0]
    dbf8:	42b8      	cmp	r0, r7
    dbfa:	d302      	bcc.n	dc02 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x34>
    dbfc:	4640      	mov	r0, r8
    dbfe:	f8a4 8000 	strh.w	r8, [r4]
    dc02:	b280      	uxth	r0, r0
    dc04:	42a8      	cmp	r0, r5
    dc06:	d304      	bcc.n	dc12 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x44>
    dc08:	42b8      	cmp	r0, r7
    dc0a:	d202      	bcs.n	dc12 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x44>
    dc0c:	2000      	movs	r0, #0
    dc0e:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    dc12:	4669      	mov	r1, sp
    dc14:	f7ff fbd9 	bl	d3ca <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    dc18:	2800      	cmp	r0, #0
    dc1a:	d0f8      	beq.n	dc0e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x40>
    dc1c:	1c76      	adds	r6, r6, #1
    dc1e:	b2f6      	uxtb	r6, r6
    dc20:	42be      	cmp	r6, r7
    dc22:	d3e5      	bcc.n	dbf0 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x22>
    dc24:	f64f 70ff 	movw	r0, #65535	; 0xffff
    dc28:	8020      	strh	r0, [r4, #0]
    dc2a:	2012      	movs	r0, #18
    dc2c:	e7ef      	b.n	dc0e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x40>

0000dc2e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    dc2e:	b570      	push	{r4, r5, r6, lr}
    dc30:	8050      	strh	r0, [r2, #2]
    dc32:	890c      	ldrh	r4, [r1, #8]
    dc34:	8094      	strh	r4, [r2, #4]
    dc36:	898b      	ldrh	r3, [r1, #12]
    dc38:	80d3      	strh	r3, [r2, #6]
    dc3a:	8948      	ldrh	r0, [r1, #10]
    dc3c:	8110      	strh	r0, [r2, #8]
    dc3e:	89cd      	ldrh	r5, [r1, #14]
    dc40:	8155      	strh	r5, [r2, #10]
    dc42:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    dc44:	42ae      	cmp	r6, r5
    dc46:	d108      	bne.n	dc5a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    dc48:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    dc4a:	4285      	cmp	r5, r0
    dc4c:	d105      	bne.n	dc5a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    dc4e:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    dc50:	429d      	cmp	r5, r3
    dc52:	d102      	bne.n	dc5a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    dc54:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    dc56:	42a3      	cmp	r3, r4
    dc58:	d001      	beq.n	dc5e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    dc5a:	2301      	movs	r3, #1
    dc5c:	e000      	b.n	dc60 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    dc5e:	2300      	movs	r3, #0
    dc60:	7313      	strb	r3, [r2, #12]
    dc62:	8548      	strh	r0, [r1, #42]	; 0x2a
    dc64:	8950      	ldrh	r0, [r2, #10]
    dc66:	85c8      	strh	r0, [r1, #46]	; 0x2e
    dc68:	8890      	ldrh	r0, [r2, #4]
    dc6a:	8588      	strh	r0, [r1, #44]	; 0x2c
    dc6c:	88d0      	ldrh	r0, [r2, #6]
    dc6e:	8608      	strh	r0, [r1, #48]	; 0x30
    dc70:	2001      	movs	r0, #1
    dc72:	7010      	strb	r0, [r2, #0]
    dc74:	bd70      	pop	{r4, r5, r6, pc}

0000dc76 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    dc76:	b510      	push	{r4, lr}
    dc78:	888c      	ldrh	r4, [r1, #4]
    dc7a:	890a      	ldrh	r2, [r1, #8]
    dc7c:	884b      	ldrh	r3, [r1, #2]
    dc7e:	88c9      	ldrh	r1, [r1, #6]
    dc80:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    dc84:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    dc88:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    dc8c:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    dc90:	bd10      	pop	{r4, pc}

0000dc92 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    dc92:	b570      	push	{r4, r5, r6, lr}
    dc94:	4615      	mov	r5, r2
    dc96:	460c      	mov	r4, r1
    dc98:	f000 f8c7 	bl	de2a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    dc9c:	3096      	adds	r0, #150	; 0x96
    dc9e:	4428      	add	r0, r5
    dca0:	42a0      	cmp	r0, r4
    dca2:	d801      	bhi.n	dca8 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    dca4:	1a20      	subs	r0, r4, r0
    dca6:	bd70      	pop	{r4, r5, r6, pc}
    dca8:	2000      	movs	r0, #0
    dcaa:	bd70      	pop	{r4, r5, r6, pc}

0000dcac <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    dcac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dcb0:	4604      	mov	r4, r0
    dcb2:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
    dcb4:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
    dcb6:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
    dcba:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    dcbe:	4285      	cmp	r5, r0
    dcc0:	d300      	bcc.n	dcc4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    dcc2:	4605      	mov	r5, r0
    dcc4:	4620      	mov	r0, r4
    dcc6:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    dcca:	f000 f89e 	bl	de0a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    dcce:	4601      	mov	r1, r0
    dcd0:	86e5      	strh	r5, [r4, #54]	; 0x36
    dcd2:	8761      	strh	r1, [r4, #58]	; 0x3a
    dcd4:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    dcd6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    dcda:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    dcdc:	4680      	mov	r8, r0
    dcde:	42aa      	cmp	r2, r5
    dce0:	d200      	bcs.n	dce4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
    dce2:	462a      	mov	r2, r5
    dce4:	428b      	cmp	r3, r1
    dce6:	d200      	bcs.n	dcea <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3e>
    dce8:	460b      	mov	r3, r1
    dcea:	8202      	strh	r2, [r0, #16]
    dcec:	f8a8 3012 	strh.w	r3, [r8, #18]
    dcf0:	42bd      	cmp	r5, r7
    dcf2:	d101      	bne.n	dcf8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4c>
    dcf4:	42b1      	cmp	r1, r6
    dcf6:	d001      	beq.n	dcfc <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    dcf8:	2001      	movs	r0, #1
    dcfa:	e000      	b.n	dcfe <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    dcfc:	2000      	movs	r0, #0
    dcfe:	4681      	mov	r9, r0
    dd00:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    dd04:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    dd08:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    dd0a:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    dd0c:	4285      	cmp	r5, r0
    dd0e:	d300      	bcc.n	dd12 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x66>
    dd10:	4605      	mov	r5, r0
    dd12:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    dd16:	4620      	mov	r0, r4
    dd18:	f000 f87f 	bl	de1a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    dd1c:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    dd20:	2902      	cmp	r1, #2
    dd22:	d108      	bne.n	dd36 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8a>
    dd24:	42af      	cmp	r7, r5
    dd26:	d200      	bcs.n	dd2a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7e>
    dd28:	463d      	mov	r5, r7
    dd2a:	4286      	cmp	r6, r0
    dd2c:	d200      	bcs.n	dd30 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
    dd2e:	4630      	mov	r0, r6
    dd30:	2100      	movs	r1, #0
    dd32:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    dd36:	f8a8 5008 	strh.w	r5, [r8, #8]
    dd3a:	f8a8 000c 	strh.w	r0, [r8, #12]
    dd3e:	42bd      	cmp	r5, r7
    dd40:	d101      	bne.n	dd46 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    dd42:	42b0      	cmp	r0, r6
    dd44:	d001      	beq.n	dd4a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    dd46:	2001      	movs	r0, #1
    dd48:	e000      	b.n	dd4c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa0>
    dd4a:	2000      	movs	r0, #0
    dd4c:	ea40 0009 	orr.w	r0, r0, r9
    dd50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000dd54 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    dd54:	6840      	ldr	r0, [r0, #4]
    dd56:	4770      	bx	lr

0000dd58 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    dd58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd5c:	4616      	mov	r6, r2
    dd5e:	460f      	mov	r7, r1
    dd60:	4604      	mov	r4, r0
    dd62:	f000 f862 	bl	de2a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    dd66:	4605      	mov	r5, r0
    dd68:	463a      	mov	r2, r7
    dd6a:	68e1      	ldr	r1, [r4, #12]
    dd6c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    dd6e:	f000 f847 	bl	de00 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    dd72:	19a9      	adds	r1, r5, r6
    dd74:	4281      	cmp	r1, r0
    dd76:	d300      	bcc.n	dd7a <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    dd78:	4608      	mov	r0, r1
    dd7a:	6320      	str	r0, [r4, #48]	; 0x30
    dd7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000dd80 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    dd80:	221b      	movs	r2, #27
    dd82:	8402      	strh	r2, [r0, #32]
    dd84:	8382      	strh	r2, [r0, #28]
    dd86:	82c2      	strh	r2, [r0, #22]
    dd88:	8282      	strh	r2, [r0, #20]
    dd8a:	8142      	strh	r2, [r0, #10]
    dd8c:	8202      	strh	r2, [r0, #16]
    dd8e:	8102      	strh	r2, [r0, #8]
    dd90:	8542      	strh	r2, [r0, #42]	; 0x2a
    dd92:	8582      	strh	r2, [r0, #44]	; 0x2c
    dd94:	8482      	strh	r2, [r0, #36]	; 0x24
    dd96:	2900      	cmp	r1, #0
    dd98:	d10a      	bne.n	ddb0 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    dd9a:	f44f 71a4 	mov.w	r1, #328	; 0x148
    dd9e:	8441      	strh	r1, [r0, #34]	; 0x22
    dda0:	83c1      	strh	r1, [r0, #30]
    dda2:	8341      	strh	r1, [r0, #26]
    dda4:	8301      	strh	r1, [r0, #24]
    dda6:	81c1      	strh	r1, [r0, #14]
    dda8:	8241      	strh	r1, [r0, #18]
    ddaa:	8181      	strh	r1, [r0, #12]
    ddac:	85c1      	strh	r1, [r0, #46]	; 0x2e
    ddae:	8601      	strh	r1, [r0, #48]	; 0x30
    ddb0:	4770      	bx	lr

0000ddb2 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    ddb2:	6800      	ldr	r0, [r0, #0]
    ddb4:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    ddb8:	4290      	cmp	r0, r2
    ddba:	d903      	bls.n	ddc4 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    ddbc:	1a40      	subs	r0, r0, r1
    ddbe:	389c      	subs	r0, #156	; 0x9c
    ddc0:	0840      	lsrs	r0, r0, #1
    ddc2:	4770      	bx	lr
    ddc4:	2000      	movs	r0, #0
    ddc6:	4770      	bx	lr

0000ddc8 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    ddc8:	b510      	push	{r4, lr}
    ddca:	9c02      	ldr	r4, [sp, #8]
    ddcc:	8281      	strh	r1, [r0, #20]
    ddce:	82c2      	strh	r2, [r0, #22]
    ddd0:	8303      	strh	r3, [r0, #24]
    ddd2:	8344      	strh	r4, [r0, #26]
    ddd4:	bd10      	pop	{r4, pc}

0000ddd6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    ddd6:	8050      	strh	r0, [r2, #2]
    ddd8:	8a88      	ldrh	r0, [r1, #20]
    ddda:	8090      	strh	r0, [r2, #4]
    dddc:	8ac8      	ldrh	r0, [r1, #22]
    ddde:	80d0      	strh	r0, [r2, #6]
    dde0:	8b08      	ldrh	r0, [r1, #24]
    dde2:	8110      	strh	r0, [r2, #8]
    dde4:	8b48      	ldrh	r0, [r1, #26]
    dde6:	8150      	strh	r0, [r2, #10]
    dde8:	2001      	movs	r0, #1
    ddea:	7010      	strb	r0, [r2, #0]
    ddec:	4770      	bx	lr
    ddee:	2902      	cmp	r1, #2
    ddf0:	d003      	beq.n	ddfa <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x24>
    ddf2:	00c0      	lsls	r0, r0, #3
    ddf4:	3070      	adds	r0, #112	; 0x70
    ddf6:	b280      	uxth	r0, r0
    ddf8:	4770      	bx	lr
    ddfa:	0080      	lsls	r0, r0, #2
    ddfc:	303c      	adds	r0, #60	; 0x3c
    ddfe:	e7fa      	b.n	ddf6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>
    de00:	4288      	cmp	r0, r1
    de02:	d300      	bcc.n	de06 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x30>
    de04:	4608      	mov	r0, r1
    de06:	1a80      	subs	r0, r0, r2
    de08:	4770      	bx	lr
    de0a:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    de0e:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    de12:	4281      	cmp	r1, r0
    de14:	d200      	bcs.n	de18 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
    de16:	4608      	mov	r0, r1
    de18:	4770      	bx	lr
    de1a:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    de1e:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    de22:	4281      	cmp	r1, r0
    de24:	d200      	bcs.n	de28 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x52>
    de26:	4608      	mov	r0, r1
    de28:	4770      	bx	lr
    de2a:	2196      	movs	r1, #150	; 0x96
    de2c:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    de30:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    de34:	f000 b800 	b.w	de38 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x62>
    de38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    de3c:	460d      	mov	r5, r1
    de3e:	4606      	mov	r6, r0
    de40:	4698      	mov	r8, r3
    de42:	4617      	mov	r7, r2
    de44:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    de46:	4611      	mov	r1, r2
    de48:	f7ff ffd1 	bl	ddee <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    de4c:	4604      	mov	r4, r0
    de4e:	4639      	mov	r1, r7
    de50:	4630      	mov	r0, r6
    de52:	f7ff ffe2 	bl	de1a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    de56:	42a0      	cmp	r0, r4
    de58:	d200      	bcs.n	de5c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
    de5a:	4604      	mov	r4, r0
    de5c:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    de5e:	4641      	mov	r1, r8
    de60:	f7ff ffc5 	bl	ddee <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    de64:	4607      	mov	r7, r0
    de66:	4641      	mov	r1, r8
    de68:	4630      	mov	r0, r6
    de6a:	f7ff ffce 	bl	de0a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    de6e:	42b8      	cmp	r0, r7
    de70:	d300      	bcc.n	de74 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x9e>
    de72:	4638      	mov	r0, r7
    de74:	4420      	add	r0, r4
    de76:	4428      	add	r0, r5
    de78:	1d80      	adds	r0, r0, #6
    de7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000de7e <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    de7e:	b510      	push	{r4, lr}
    de80:	4604      	mov	r4, r0
    de82:	2108      	movs	r1, #8
    de84:	4620      	mov	r0, r4
    de86:	f7f6 f86b 	bl	3f60 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    de8a:	6820      	ldr	r0, [r4, #0]
    de8c:	2800      	cmp	r0, #0
    de8e:	d102      	bne.n	de96 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x18>
    de90:	6860      	ldr	r0, [r4, #4]
    de92:	2800      	cmp	r0, #0
    de94:	d0f5      	beq.n	de82 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4>
    de96:	bd10      	pop	{r4, pc}
    de98:	2801      	cmp	r0, #1
    de9a:	d102      	bne.n	dea2 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x24>
    de9c:	7948      	ldrb	r0, [r1, #5]
    de9e:	0980      	lsrs	r0, r0, #6
    dea0:	d001      	beq.n	dea6 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x28>
    dea2:	2000      	movs	r0, #0
    dea4:	4770      	bx	lr
    dea6:	2001      	movs	r0, #1
    dea8:	4770      	bx	lr
    deaa:	2801      	cmp	r0, #1
    deac:	d106      	bne.n	debc <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x3e>
    deae:	7948      	ldrb	r0, [r1, #5]
    deb0:	2101      	movs	r1, #1
    deb2:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    deb6:	d101      	bne.n	debc <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x3e>
    deb8:	2001      	movs	r0, #1
    deba:	4770      	bx	lr
    debc:	2000      	movs	r0, #0
    debe:	4770      	bx	lr
    dec0:	2802      	cmp	r0, #2
    dec2:	d003      	beq.n	decc <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4e>
    dec4:	2803      	cmp	r0, #3
    dec6:	d001      	beq.n	decc <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4e>
    dec8:	2000      	movs	r0, #0
    deca:	4770      	bx	lr
    decc:	2001      	movs	r0, #1
    dece:	4770      	bx	lr

0000ded0 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    ded0:	b510      	push	{r4, lr}
    ded2:	4604      	mov	r4, r0
    ded4:	7c00      	ldrb	r0, [r0, #16]
    ded6:	f7ff fff3 	bl	dec0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    deda:	b148      	cbz	r0, def0 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    dedc:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    dee0:	f104 0150 	add.w	r1, r4, #80	; 0x50
    dee4:	f7ff fa2e 	bl	d344 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    dee8:	2808      	cmp	r0, #8
    deea:	d001      	beq.n	def0 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    deec:	2001      	movs	r0, #1
    deee:	bd10      	pop	{r4, pc}
    def0:	7c20      	ldrb	r0, [r4, #16]
    def2:	b118      	cbz	r0, defc <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    def4:	2802      	cmp	r0, #2
    def6:	d001      	beq.n	defc <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    def8:	7de0      	ldrb	r0, [r4, #23]
    defa:	bd10      	pop	{r4, pc}
    defc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    df00:	2000      	movs	r0, #0
    df02:	f7f6 bebd 	b.w	4c80 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000df06 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    df06:	b508      	push	{r3, lr}
    df08:	f890 1064 	ldrb.w	r1, [r0, #100]	; 0x64
    df0c:	f88d 1000 	strb.w	r1, [sp]
    df10:	9900      	ldr	r1, [sp, #0]
    df12:	9100      	str	r1, [sp, #0]
    df14:	f89d 1000 	ldrb.w	r1, [sp]
    df18:	b109      	cbz	r1, df1e <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x18>
    df1a:	2001      	movs	r0, #1
    df1c:	bd08      	pop	{r3, pc}
    df1e:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    df22:	f88d 0000 	strb.w	r0, [sp]
    df26:	9800      	ldr	r0, [sp, #0]
    df28:	9000      	str	r0, [sp, #0]
    df2a:	f89d 0000 	ldrb.w	r0, [sp]
    df2e:	2000      	movs	r0, #0
    df30:	bd08      	pop	{r3, pc}

0000df32 <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    df32:	20ff      	movs	r0, #255	; 0xff
    df34:	7008      	strb	r0, [r1, #0]
    df36:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    df38:	f7ff b955 	b.w	d1e6 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000df3c <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    df3c:	b51c      	push	{r2, r3, r4, lr}
    df3e:	4604      	mov	r4, r0
    df40:	22d4      	movs	r2, #212	; 0xd4
    df42:	2100      	movs	r1, #0
    df44:	f7fe f85b 	bl	bffe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    df48:	20ff      	movs	r0, #255	; 0xff
    df4a:	7020      	strb	r0, [r4, #0]
    df4c:	207f      	movs	r0, #127	; 0x7f
    df4e:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    df52:	2013      	movs	r0, #19
    df54:	8060      	strh	r0, [r4, #2]
    df56:	f7f6 fc43 	bl	47e0 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    df5a:	4601      	mov	r1, r0
    df5c:	62e0      	str	r0, [r4, #44]	; 0x2c
    df5e:	2200      	movs	r2, #0
    df60:	4668      	mov	r0, sp
    df62:	f7ff f8ab 	bl	d0bc <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    df66:	2200      	movs	r2, #0
    df68:	2101      	movs	r1, #1
    df6a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    df6c:	f7ff f91b 	bl	d1a6 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    df70:	2204      	movs	r2, #4
    df72:	4668      	mov	r0, sp
    df74:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    df76:	f7ff f8a1 	bl	d0bc <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    df7a:	2200      	movs	r2, #0
    df7c:	4611      	mov	r1, r2
    df7e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    df80:	f7ff f911 	bl	d1a6 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    df84:	2000      	movs	r0, #0
    df86:	73a0      	strb	r0, [r4, #14]
    df88:	f104 0020 	add.w	r0, r4, #32
    df8c:	e8bd 401c 	ldmia.w	sp!, {r2, r3, r4, lr}
    df90:	f000 b962 	b.w	e258 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000df94 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    df94:	7880      	ldrb	r0, [r0, #2]
    df96:	f3c0 0080 	ubfx	r0, r0, #2, #1
    df9a:	b108      	cbz	r0, dfa0 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    df9c:	2000      	movs	r0, #0
    df9e:	4770      	bx	lr
    dfa0:	201f      	movs	r0, #31
    dfa2:	4770      	bx	lr

0000dfa4 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    dfa4:	f7f8 bfa2 	b.w	6eec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>

0000dfa8 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    dfa8:	6880      	ldr	r0, [r0, #8]
    dfaa:	4770      	bx	lr

0000dfac <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    dfac:	2001      	movs	r0, #1
    dfae:	4770      	bx	lr

0000dfb0 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    dfb0:	b510      	push	{r4, lr}
    dfb2:	4604      	mov	r4, r0
    dfb4:	3020      	adds	r0, #32
    dfb6:	f000 f90f 	bl	e1d8 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    dfba:	8861      	ldrh	r1, [r4, #2]
    dfbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dfc0:	2228      	movs	r2, #40	; 0x28
    dfc2:	f7f9 b973 	b.w	72ac <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000dfc6 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    dfc6:	2200      	movs	r2, #0
    dfc8:	6282      	str	r2, [r0, #40]	; 0x28
    dfca:	8843      	ldrh	r3, [r0, #2]
    dfcc:	2b1d      	cmp	r3, #29
    dfce:	d001      	beq.n	dfd4 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    dfd0:	7341      	strb	r1, [r0, #13]
    dfd2:	4770      	bx	lr
    dfd4:	7342      	strb	r2, [r0, #13]
    dfd6:	4770      	bx	lr

0000dfd8 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    dfd8:	b510      	push	{r4, lr}
    dfda:	2400      	movs	r4, #0
    dfdc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    dfde:	f7ff f8d0 	bl	d182 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>
    dfe2:	b100      	cbz	r0, dfe6 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0xe>
    dfe4:	2001      	movs	r0, #1
    dfe6:	4384      	bics	r4, r0
    dfe8:	f084 0001 	eor.w	r0, r4, #1
    dfec:	bd10      	pop	{r4, pc}

0000dfee <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    dfee:	2000      	movs	r0, #0
    dff0:	4770      	bx	lr

0000dff2 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    dff2:	7880      	ldrb	r0, [r0, #2]
    dff4:	f000 0001 	and.w	r0, r0, #1
    dff8:	4770      	bx	lr

0000dffa <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    dffa:	7880      	ldrb	r0, [r0, #2]
    dffc:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e000:	4770      	bx	lr

0000e002 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    e002:	2001      	movs	r0, #1
    e004:	4770      	bx	lr

0000e006 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    e006:	7880      	ldrb	r0, [r0, #2]
    e008:	f3c0 0040 	ubfx	r0, r0, #1, #1
    e00c:	4770      	bx	lr

0000e00e <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    e00e:	f990 000e 	ldrsb.w	r0, [r0, #14]
    e012:	4770      	bx	lr

0000e014 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    e014:	7800      	ldrb	r0, [r0, #0]
    e016:	28ff      	cmp	r0, #255	; 0xff
    e018:	d001      	beq.n	e01e <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    e01a:	2001      	movs	r0, #1
    e01c:	4770      	bx	lr
    e01e:	2000      	movs	r0, #0
    e020:	4770      	bx	lr

0000e022 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    e022:	680a      	ldr	r2, [r1, #0]
    e024:	f840 2f11 	str.w	r2, [r0, #17]!
    e028:	8889      	ldrh	r1, [r1, #4]
    e02a:	8081      	strh	r1, [r0, #4]
    e02c:	2101      	movs	r1, #1
    e02e:	7181      	strb	r1, [r0, #6]
    e030:	4770      	bx	lr

0000e032 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    e032:	7b00      	ldrb	r0, [r0, #12]
    e034:	4770      	bx	lr

0000e036 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    e036:	2001      	movs	r0, #1
    e038:	4770      	bx	lr

0000e03a <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    e03a:	61c1      	str	r1, [r0, #28]
    e03c:	4770      	bx	lr

0000e03e <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    e03e:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    e042:	4770      	bx	lr

0000e044 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    e044:	b570      	push	{r4, r5, r6, lr}
    e046:	4604      	mov	r4, r0
    e048:	7880      	ldrb	r0, [r0, #2]
    e04a:	2501      	movs	r5, #1
    e04c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e050:	b138      	cbz	r0, e062 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e>
    e052:	233c      	movs	r3, #60	; 0x3c
    e054:	22ff      	movs	r2, #255	; 0xff
    e056:	4620      	mov	r0, r4
    e058:	69e1      	ldr	r1, [r4, #28]
    e05a:	f7f8 ff73 	bl	6f44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x440>
    e05e:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
    e062:	78a0      	ldrb	r0, [r4, #2]
    e064:	07c0      	lsls	r0, r0, #31
    e066:	f7f8 f86d 	bl	6144 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    e06a:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
    e06e:	bd70      	pop	{r4, r5, r6, pc}

0000e070 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    e070:	7bc0      	ldrb	r0, [r0, #15]
    e072:	2800      	cmp	r0, #0
    e074:	d000      	beq.n	e078 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    e076:	2001      	movs	r0, #1
    e078:	4770      	bx	lr
    e07a:	b510      	push	{r4, lr}
    e07c:	f7ff f962 	bl	d344 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    e080:	4604      	mov	r4, r0
    e082:	f7f7 fc9f 	bl	59c4 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    e086:	b138      	cbz	r0, e098 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    e088:	4620      	mov	r0, r4
    e08a:	f7f7 fbd3 	bl	5834 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    e08e:	b118      	cbz	r0, e098 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    e090:	2110      	movs	r1, #16
    e092:	f7ff fb37 	bl	d704 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    e096:	b108      	cbz	r0, e09c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c>
    e098:	2000      	movs	r0, #0
    e09a:	bd10      	pop	{r4, pc}
    e09c:	2001      	movs	r0, #1
    e09e:	bd10      	pop	{r4, pc}
    e0a0:	2101      	movs	r1, #1
    e0a2:	f7f8 bbaf 	b.w	6804 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    e0a6:	2101      	movs	r1, #1
    e0a8:	f7f8 bbac 	b.w	6804 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    e0ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e0b0:	4604      	mov	r4, r0
    e0b2:	2700      	movs	r7, #0
    e0b4:	704f      	strb	r7, [r1, #1]
    e0b6:	2011      	movs	r0, #17
    e0b8:	460d      	mov	r5, r1
    e0ba:	7008      	strb	r0, [r1, #0]
    e0bc:	2220      	movs	r2, #32
    e0be:	f104 0166 	add.w	r1, r4, #102	; 0x66
    e0c2:	1d28      	adds	r0, r5, #4
    e0c4:	f7fd ff21 	bl	bf0a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e0c8:	2601      	movs	r6, #1
    e0ca:	722e      	strb	r6, [r5, #8]
    e0cc:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
    e0d0:	7928      	ldrb	r0, [r5, #4]
    e0d2:	2800      	cmp	r0, #0
    e0d4:	d111      	bne.n	e0fa <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8a>
    e0d6:	88e8      	ldrh	r0, [r5, #6]
    e0d8:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    e0dc:	69e0      	ldr	r0, [r4, #28]
    e0de:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    e0e2:	f884 1092 	strb.w	r1, [r4, #146]	; 0x92
    e0e6:	f884 608e 	strb.w	r6, [r4, #142]	; 0x8e
    e0ea:	8800      	ldrh	r0, [r0, #0]
    e0ec:	f7f6 fab8 	bl	4660 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    e0f0:	f7fe fe04 	bl	ccfc <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    e0f4:	69e0      	ldr	r0, [r4, #28]
    e0f6:	f880 6070 	strb.w	r6, [r0, #112]	; 0x70
    e0fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e0fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e102:	4604      	mov	r4, r0
    e104:	460f      	mov	r7, r1
    e106:	7e40      	ldrb	r0, [r0, #25]
    e108:	f7f7 fb54 	bl	57b4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    e10c:	4606      	mov	r6, r0
    e10e:	7e20      	ldrb	r0, [r4, #24]
    e110:	f104 0549 	add.w	r5, r4, #73	; 0x49
    e114:	b120      	cbz	r0, e120 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    e116:	b11e      	cbz	r6, e120 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    e118:	7e60      	ldrb	r0, [r4, #25]
    e11a:	f7f7 fb3f 	bl	579c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    e11e:	b1a0      	cbz	r0, e14a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xda>
    e120:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    e124:	2800      	cmp	r0, #0
    e126:	d024      	beq.n	e172 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x102>
    e128:	7ea0      	ldrb	r0, [r4, #26]
    e12a:	2800      	cmp	r0, #0
    e12c:	d021      	beq.n	e172 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x102>
    e12e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    e132:	4629      	mov	r1, r5
    e134:	f7ff feb9 	bl	deaa <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    e138:	b1a8      	cbz	r0, e166 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf6>
    e13a:	f7f7 fb2b 	bl	5794 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    e13e:	463a      	mov	r2, r7
    e140:	4629      	mov	r1, r5
    e142:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e146:	f7ff b895 	b.w	d274 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    e14a:	2001      	movs	r0, #1
    e14c:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    e150:	463a      	mov	r2, r7
    e152:	4629      	mov	r1, r5
    e154:	4630      	mov	r0, r6
    e156:	f7ff f88d 	bl	d274 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    e15a:	7e61      	ldrb	r1, [r4, #25]
    e15c:	4628      	mov	r0, r5
    e15e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e162:	f7f7 bb33 	b.w	57cc <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    e166:	4639      	mov	r1, r7
    e168:	4628      	mov	r0, r5
    e16a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e16e:	f7ff b870 	b.w	d252 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    e172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e176:	b510      	push	{r4, lr}
    e178:	4604      	mov	r4, r0
    e17a:	4608      	mov	r0, r1
    e17c:	f7fc ffb0 	bl	b0e0 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    e180:	7921      	ldrb	r1, [r4, #4]
    e182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e186:	2025      	movs	r0, #37	; 0x25
    e188:	f001 bdad 	b.w	fce6 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    e18c:	b510      	push	{r4, lr}
    e18e:	4604      	mov	r4, r0
    e190:	3026      	adds	r0, #38	; 0x26
    e192:	f7fc ff61 	bl	b058 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    e196:	2800      	cmp	r0, #0
    e198:	d102      	bne.n	e1a0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x130>
    e19a:	207f      	movs	r0, #127	; 0x7f
    e19c:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    e1a0:	bd10      	pop	{r4, pc}
    e1a2:	7802      	ldrb	r2, [r0, #0]
    e1a4:	2320      	movs	r3, #32
    e1a6:	f022 0220 	bic.w	r2, r2, #32
    e1aa:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    e1ae:	430a      	orrs	r2, r1
    e1b0:	7002      	strb	r2, [r0, #0]
    e1b2:	4770      	bx	lr

0000e1b4 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    e1b4:	b570      	push	{r4, r5, r6, lr}
    e1b6:	7001      	strb	r1, [r0, #0]
    e1b8:	7042      	strb	r2, [r0, #1]
    e1ba:	4614      	mov	r4, r2
    e1bc:	460d      	mov	r5, r1
    e1be:	7880      	ldrb	r0, [r0, #2]
    e1c0:	f000 f87f 	bl	e2c2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e1c4:	fb10 f005 	smulbb	r0, r0, r5
    e1c8:	4360      	muls	r0, r4
    e1ca:	28ff      	cmp	r0, #255	; 0xff
    e1cc:	d303      	bcc.n	e1d6 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    e1ce:	215c      	movs	r1, #92	; 0x5c
    e1d0:	202e      	movs	r0, #46	; 0x2e
    e1d2:	f7f5 fe2b 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e1d6:	bd70      	pop	{r4, r5, r6, pc}

0000e1d8 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    e1d8:	b510      	push	{r4, lr}
    e1da:	4604      	mov	r4, r0
    e1dc:	7880      	ldrb	r0, [r0, #2]
    e1de:	f000 f870 	bl	e2c2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e1e2:	7861      	ldrb	r1, [r4, #1]
    e1e4:	7822      	ldrb	r2, [r4, #0]
    e1e6:	fb11 f102 	smulbb	r1, r1, r2
    e1ea:	4348      	muls	r0, r1
    e1ec:	b2c0      	uxtb	r0, r0
    e1ee:	bd10      	pop	{r4, pc}

0000e1f0 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    e1f0:	b510      	push	{r4, lr}
    e1f2:	4604      	mov	r4, r0
    e1f4:	f000 f84d 	bl	e292 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    e1f8:	7961      	ldrb	r1, [r4, #5]
    e1fa:	1c49      	adds	r1, r1, #1
    e1fc:	b2c9      	uxtb	r1, r1
    e1fe:	7161      	strb	r1, [r4, #5]
    e200:	7862      	ldrb	r2, [r4, #1]
    e202:	4291      	cmp	r1, r2
    e204:	d10b      	bne.n	e21e <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    e206:	2200      	movs	r2, #0
    e208:	7162      	strb	r2, [r4, #5]
    e20a:	78e1      	ldrb	r1, [r4, #3]
    e20c:	4301      	orrs	r1, r0
    e20e:	70e1      	strb	r1, [r4, #3]
    e210:	78a3      	ldrb	r3, [r4, #2]
    e212:	4299      	cmp	r1, r3
    e214:	d103      	bne.n	e21e <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    e216:	70e2      	strb	r2, [r4, #3]
    e218:	7921      	ldrb	r1, [r4, #4]
    e21a:	1c49      	adds	r1, r1, #1
    e21c:	7121      	strb	r1, [r4, #4]
    e21e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e222:	f000 b825 	b.w	e270 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000e226 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    e226:	7081      	strb	r1, [r0, #2]
    e228:	4770      	bx	lr

0000e22a <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    e22a:	b570      	push	{r4, r5, r6, lr}
    e22c:	4604      	mov	r4, r0
    e22e:	7880      	ldrb	r0, [r0, #2]
    e230:	f000 f847 	bl	e2c2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e234:	7861      	ldrb	r1, [r4, #1]
    e236:	fb11 f500 	smulbb	r5, r1, r0
    e23a:	78e0      	ldrb	r0, [r4, #3]
    e23c:	f000 f841 	bl	e2c2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e240:	7861      	ldrb	r1, [r4, #1]
    e242:	7962      	ldrb	r2, [r4, #5]
    e244:	fb10 2001 	smlabb	r0, r0, r1, r2
    e248:	7821      	ldrb	r1, [r4, #0]
    e24a:	7922      	ldrb	r2, [r4, #4]
    e24c:	1a89      	subs	r1, r1, r2
    e24e:	fb11 f105 	smulbb	r1, r1, r5
    e252:	1a08      	subs	r0, r1, r0
    e254:	b2c0      	uxtb	r0, r0
    e256:	bd70      	pop	{r4, r5, r6, pc}

0000e258 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    e258:	2100      	movs	r1, #0
    e25a:	6001      	str	r1, [r0, #0]
    e25c:	8081      	strh	r1, [r0, #4]
    e25e:	2101      	movs	r1, #1
    e260:	7041      	strb	r1, [r0, #1]
    e262:	7001      	strb	r1, [r0, #0]
    e264:	4770      	bx	lr

0000e266 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    e266:	2100      	movs	r1, #0
    e268:	70c1      	strb	r1, [r0, #3]
    e26a:	7141      	strb	r1, [r0, #5]
    e26c:	7101      	strb	r1, [r0, #4]
    e26e:	4770      	bx	lr
    e270:	b510      	push	{r4, lr}
    e272:	2801      	cmp	r0, #1
    e274:	d007      	beq.n	e286 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    e276:	2802      	cmp	r0, #2
    e278:	d007      	beq.n	e28a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    e27a:	2804      	cmp	r0, #4
    e27c:	d007      	beq.n	e28e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    e27e:	2139      	movs	r1, #57	; 0x39
    e280:	202e      	movs	r0, #46	; 0x2e
    e282:	f7f5 fdd3 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e286:	2025      	movs	r0, #37	; 0x25
    e288:	bd10      	pop	{r4, pc}
    e28a:	2026      	movs	r0, #38	; 0x26
    e28c:	bd10      	pop	{r4, pc}
    e28e:	2027      	movs	r0, #39	; 0x27
    e290:	bd10      	pop	{r4, pc}
    e292:	4601      	mov	r1, r0
    e294:	2000      	movs	r0, #0
    e296:	788a      	ldrb	r2, [r1, #2]
    e298:	07d3      	lsls	r3, r2, #31
    e29a:	d002      	beq.n	e2a2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    e29c:	78cb      	ldrb	r3, [r1, #3]
    e29e:	07db      	lsls	r3, r3, #31
    e2a0:	d006      	beq.n	e2b0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    e2a2:	0793      	lsls	r3, r2, #30
    e2a4:	d506      	bpl.n	e2b4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    e2a6:	78cb      	ldrb	r3, [r1, #3]
    e2a8:	079b      	lsls	r3, r3, #30
    e2aa:	d403      	bmi.n	e2b4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    e2ac:	2002      	movs	r0, #2
    e2ae:	4770      	bx	lr
    e2b0:	2001      	movs	r0, #1
    e2b2:	4770      	bx	lr
    e2b4:	0752      	lsls	r2, r2, #29
    e2b6:	d5fc      	bpl.n	e2b2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    e2b8:	78c9      	ldrb	r1, [r1, #3]
    e2ba:	0749      	lsls	r1, r1, #29
    e2bc:	d4f9      	bmi.n	e2b2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    e2be:	2004      	movs	r0, #4
    e2c0:	4770      	bx	lr
    e2c2:	f3c0 0180 	ubfx	r1, r0, #2, #1
    e2c6:	f3c0 0240 	ubfx	r2, r0, #1, #1
    e2ca:	4411      	add	r1, r2
    e2cc:	f000 0001 	and.w	r0, r0, #1
    e2d0:	4408      	add	r0, r1
    e2d2:	4770      	bx	lr

0000e2d4 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    e2d4:	f240 315a 	movw	r1, #858	; 0x35a
    e2d8:	4348      	muls	r0, r1
    e2da:	4770      	bx	lr

0000e2dc <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    e2dc:	f240 20ef 	movw	r0, #751	; 0x2ef
    e2e0:	4770      	bx	lr
    e2e2:	020e      	.short	0x020e
    e2e4:	0630041c 	.word	0x0630041c
    e2e8:	035a0c60 	.word	0x035a0c60
    e2ec:	05c506b4 	.word	0x05c506b4
    e2f0:	12250bf5 	.word	0x12250bf5
    e2f4:	03b101a3 	.word	0x03b101a3
    e2f8:	02ef05bf 	.word	0x02ef05bf
    e2fc:	09a30649 	.word	0x09a30649

0000e300 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    e300:	b510      	push	{r4, lr}
    e302:	f890 10d0 	ldrb.w	r1, [r0, #208]	; 0xd0
    e306:	b109      	cbz	r1, e30c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    e308:	2000      	movs	r0, #0
    e30a:	bd10      	pop	{r4, pc}
    e30c:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
    e310:	b949      	cbnz	r1, e326 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    e312:	f890 10a8 	ldrb.w	r1, [r0, #168]	; 0xa8
    e316:	b131      	cbz	r1, e326 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    e318:	e9d0 122b 	ldrd	r1, r2, [r0, #172]	; 0xac
    e31c:	428a      	cmp	r2, r1
    e31e:	d902      	bls.n	e326 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    e320:	f7ff fe90 	bl	e044 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    e324:	e7f0      	b.n	e308 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    e326:	2001      	movs	r0, #1
    e328:	bd10      	pop	{r4, pc}

0000e32a <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    e32a:	b510      	push	{r4, lr}
    e32c:	b131      	cbz	r1, e33c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    e32e:	2901      	cmp	r1, #1
    e330:	d008      	beq.n	e344 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    e332:	f240 718b 	movw	r1, #1931	; 0x78b
    e336:	2030      	movs	r0, #48	; 0x30
    e338:	f7f5 fd78 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e33c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e340:	f000 b9d4 	b.w	e6ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x314>
    e344:	2100      	movs	r1, #0
    e346:	f880 10a8 	strb.w	r1, [r0, #168]	; 0xa8
    e34a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e34e:	f000 b93b 	b.w	e5c8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f0>

0000e352 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    e352:	b510      	push	{r4, lr}
    e354:	4604      	mov	r4, r0
    e356:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    e35a:	2800      	cmp	r0, #0
    e35c:	d019      	beq.n	e392 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
    e35e:	2001      	movs	r0, #1
    e360:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
    e364:	4601      	mov	r1, r0
    e366:	4620      	mov	r0, r4
    e368:	f7ff fe69 	bl	e03e <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    e36c:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    e370:	b170      	cbz	r0, e390 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
    e372:	f814 0fa0 	ldrb.w	r0, [r4, #160]!
    e376:	f7f3 fdd3 	bl	1f20 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    e37a:	7820      	ldrb	r0, [r4, #0]
    e37c:	f7f3 ff1e 	bl	21bc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    e380:	f814 09a0 	ldrb.w	r0, [r4], #-160
    e384:	f7f3 fef8 	bl	2178 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    e388:	b120      	cbz	r0, e394 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
    e38a:	2000      	movs	r0, #0
    e38c:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4
    e390:	2000      	movs	r0, #0
    e392:	bd10      	pop	{r4, pc}
    e394:	f240 2103 	movw	r1, #515	; 0x203
    e398:	2030      	movs	r0, #48	; 0x30
    e39a:	f7f5 fd47 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e39e <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    e39e:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
    e3a2:	4770      	bx	lr

0000e3a4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    e3a4:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    e3a8:	4770      	bx	lr

0000e3aa <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    e3aa:	b50e      	push	{r1, r2, r3, lr}
    e3ac:	4669      	mov	r1, sp
    e3ae:	2001      	movs	r0, #1
    e3b0:	f7fe fdcd 	bl	cf4e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    e3b4:	b138      	cbz	r0, e3c6 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x1c>
    e3b6:	f44f 71a1 	mov.w	r1, #322	; 0x142
    e3ba:	2030      	movs	r0, #48	; 0x30
    e3bc:	f7f5 fd36 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e3c0:	9802      	ldr	r0, [sp, #8]
    e3c2:	f7ff ffc6 	bl	e352 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    e3c6:	4668      	mov	r0, sp
    e3c8:	f7f5 ff68 	bl	429c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    e3cc:	2800      	cmp	r0, #0
    e3ce:	d0f7      	beq.n	e3c0 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x16>
    e3d0:	f7f9 f8f6 	bl	75c0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x58>
    e3d4:	2000      	movs	r0, #0
    e3d6:	bd0e      	pop	{r1, r2, r3, pc}

0000e3d8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>:
    e3d8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e3da:	4604      	mov	r4, r0
    e3dc:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    e3e0:	2800      	cmp	r0, #0
    e3e2:	d153      	bne.n	e48c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    e3e4:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    e3e8:	2803      	cmp	r0, #3
    e3ea:	d14f      	bne.n	e48c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    e3ec:	f7fd fc18 	bl	bc20 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    e3f0:	4601      	mov	r1, r0
    e3f2:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    e3f6:	f7f3 f91b 	bl	1630 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    e3fa:	2800      	cmp	r0, #0
    e3fc:	dd46      	ble.n	e48c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    e3fe:	68e1      	ldr	r1, [r4, #12]
    e400:	b111      	cbz	r1, e408 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30>
    e402:	fbb0 f0f1 	udiv	r0, r0, r1
    e406:	e000      	b.n	e40a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x32>
    e408:	2000      	movs	r0, #0
    e40a:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    e40e:	1c40      	adds	r0, r0, #1
    e410:	4408      	add	r0, r1
    e412:	f8a4 0144 	strh.w	r0, [r4, #324]	; 0x144
    e416:	f8b4 0144 	ldrh.w	r0, [r4, #324]	; 0x144
    e41a:	f8b4 10fc 	ldrh.w	r1, [r4, #252]	; 0xfc
    e41e:	1a08      	subs	r0, r1, r0
    e420:	b200      	sxth	r0, r0
    e422:	2800      	cmp	r0, #0
    e424:	dd32      	ble.n	e48c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    e426:	f894 0168 	ldrb.w	r0, [r4, #360]	; 0x168
    e42a:	f7f3 fd79 	bl	1f20 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    e42e:	2800      	cmp	r0, #0
    e430:	d02c      	beq.n	e48c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    e432:	2001      	movs	r0, #1
    e434:	f884 0149 	strb.w	r0, [r4, #329]	; 0x149
    e438:	f8b4 00a6 	ldrh.w	r0, [r4, #166]	; 0xa6
    e43c:	f8b4 10a4 	ldrh.w	r1, [r4, #164]	; 0xa4
    e440:	ae01      	add	r6, sp, #4
    e442:	1a40      	subs	r0, r0, r1
    e444:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    e448:	1e40      	subs	r0, r0, #1
    e44a:	4408      	add	r0, r1
    e44c:	b285      	uxth	r5, r0
    e44e:	e017      	b.n	e480 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xa8>
    e450:	9600      	str	r6, [sp, #0]
    e452:	f8b4 1144 	ldrh.w	r1, [r4, #324]	; 0x144
    e456:	2300      	movs	r3, #0
    e458:	2201      	movs	r2, #1
    e45a:	4620      	mov	r0, r4
    e45c:	f7f9 f980 	bl	7760 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    e460:	2800      	cmp	r0, #0
    e462:	d013      	beq.n	e48c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    e464:	2801      	cmp	r0, #1
    e466:	d004      	beq.n	e472 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x9a>
    e468:	f240 6101 	movw	r1, #1537	; 0x601
    e46c:	2030      	movs	r0, #48	; 0x30
    e46e:	f7f5 fcdd 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e472:	f8b4 0144 	ldrh.w	r0, [r4, #324]	; 0x144
    e476:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    e47a:	4408      	add	r0, r1
    e47c:	f8a4 0144 	strh.w	r0, [r4, #324]	; 0x144
    e480:	f8b4 0144 	ldrh.w	r0, [r4, #324]	; 0x144
    e484:	1a28      	subs	r0, r5, r0
    e486:	b200      	sxth	r0, r0
    e488:	2800      	cmp	r0, #0
    e48a:	dae1      	bge.n	e450 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x78>
    e48c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e48e:	2000      	movs	r0, #0
    e490:	4770      	bx	lr
    e492:	b570      	push	{r4, r5, r6, lr}
    e494:	4604      	mov	r4, r0
    e496:	2601      	movs	r6, #1
    e498:	f000 f90c 	bl	e6b4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2dc>
    e49c:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    e4a0:	2000      	movs	r0, #0
    e4a2:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    e4a6:	2001      	movs	r0, #1
    e4a8:	f884 00c3 	strb.w	r0, [r4, #195]	; 0xc3
    e4ac:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
    e4b0:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
    e4b4:	b160      	cbz	r0, e4d0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xf8>
    e4b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e4ba:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    e4be:	f7f3 f885 	bl	15cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    e4c2:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    e4c6:	2100      	movs	r1, #0
    e4c8:	4628      	mov	r0, r5
    e4ca:	f7ff f861 	bl	d590 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    e4ce:	e00f      	b.n	e4f0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x118>
    e4d0:	4620      	mov	r0, r4
    e4d2:	f7ff fd69 	bl	dfa8 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    e4d6:	4606      	mov	r6, r0
    e4d8:	4631      	mov	r1, r6
    e4da:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    e4de:	f7f3 f875 	bl	15cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    e4e2:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    e4e6:	4631      	mov	r1, r6
    e4e8:	4628      	mov	r0, r5
    e4ea:	f7ff f851 	bl	d590 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    e4ee:	1c46      	adds	r6, r0, #1
    e4f0:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
    e4f4:	1c41      	adds	r1, r0, #1
    e4f6:	290a      	cmp	r1, #10
    e4f8:	d202      	bcs.n	e500 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x128>
    e4fa:	4430      	add	r0, r6
    e4fc:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
    e500:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    e504:	b130      	cbz	r0, e514 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13c>
    e506:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
    e50a:	1c40      	adds	r0, r0, #1
    e50c:	280a      	cmp	r0, #10
    e50e:	d301      	bcc.n	e514 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13c>
    e510:	2002      	movs	r0, #2
    e512:	e000      	b.n	e516 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13e>
    e514:	2003      	movs	r0, #3
    e516:	f884 00c2 	strb.w	r0, [r4, #194]	; 0xc2
    e51a:	2100      	movs	r1, #0
    e51c:	4620      	mov	r0, r4
    e51e:	f000 f822 	bl	e566 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18e>
    e522:	b120      	cbz	r0, e52e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x156>
    e524:	4620      	mov	r0, r4
    e526:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e52a:	f000 b80d 	b.w	e548 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x170>
    e52e:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    e532:	4629      	mov	r1, r5
    e534:	f000 f8bc 	bl	e6b0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d8>
    e538:	2800      	cmp	r0, #0
    e53a:	d104      	bne.n	e546 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16e>
    e53c:	f240 61a2 	movw	r1, #1698	; 0x6a2
    e540:	2030      	movs	r0, #48	; 0x30
    e542:	f7f5 fc73 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e546:	bd70      	pop	{r4, r5, r6, pc}
    e548:	b510      	push	{r4, lr}
    e54a:	4604      	mov	r4, r0
    e54c:	f814 0fa0 	ldrb.w	r0, [r4, #160]!
    e550:	f7f3 fe12 	bl	2178 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    e554:	2000      	movs	r0, #0
    e556:	7520      	strb	r0, [r4, #20]
    e558:	bd10      	pop	{r4, pc}
    e55a:	b510      	push	{r4, lr}
    e55c:	f7ff fd28 	bl	dfb0 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    e560:	f200 1009 	addw	r0, r0, #265	; 0x109
    e564:	bd10      	pop	{r4, pc}
    e566:	b570      	push	{r4, r5, r6, lr}
    e568:	4604      	mov	r4, r0
    e56a:	f890 00d0 	ldrb.w	r0, [r0, #208]	; 0xd0
    e56e:	460d      	mov	r5, r1
    e570:	b108      	cbz	r0, e576 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19e>
    e572:	2001      	movs	r0, #1
    e574:	bd70      	pop	{r4, r5, r6, pc}
    e576:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    e57a:	b1a8      	cbz	r0, e5a8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d0>
    e57c:	4620      	mov	r0, r4
    e57e:	f7ff fd13 	bl	dfa8 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    e582:	4405      	add	r5, r0
    e584:	4620      	mov	r0, r4
    e586:	f7ff ffe8 	bl	e55a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
    e58a:	1941      	adds	r1, r0, r5
    e58c:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    e590:	4288      	cmp	r0, r1
    e592:	d206      	bcs.n	e5a2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ca>
    e594:	2001      	movs	r0, #1
    e596:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    e59a:	4620      	mov	r0, r4
    e59c:	f7ff fd52 	bl	e044 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    e5a0:	e7e7      	b.n	e572 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19a>
    e5a2:	1b40      	subs	r0, r0, r5
    e5a4:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    e5a8:	2000      	movs	r0, #0
    e5aa:	bd70      	pop	{r4, r5, r6, pc}
    e5ac:	b510      	push	{r4, lr}
    e5ae:	4604      	mov	r4, r0
    e5b0:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    e5b4:	f000 f9e8 	bl	e988 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b0>
    e5b8:	4602      	mov	r2, r0
    e5ba:	4620      	mov	r0, r4
    e5bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e5c0:	f240 111b 	movw	r1, #283	; 0x11b
    e5c4:	f7ff bbc8 	b.w	dd58 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    e5c8:	b510      	push	{r4, lr}
    e5ca:	f7fc fbdb 	bl	ad84 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    e5ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e5d2:	f7f3 bf27 	b.w	2424 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    e5d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e5da:	4604      	mov	r4, r0
    e5dc:	f890 014a 	ldrb.w	r0, [r0, #330]	; 0x14a
    e5e0:	2800      	cmp	r0, #0
    e5e2:	d051      	beq.n	e688 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b0>
    e5e4:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    e5e8:	2803      	cmp	r0, #3
    e5ea:	d14d      	bne.n	e688 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b0>
    e5ec:	f894 906b 	ldrb.w	r9, [r4, #107]	; 0x6b
    e5f0:	f001 fac2 	bl	fb78 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    e5f4:	4605      	mov	r5, r0
    e5f6:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
    e5fa:	f7f8 ffd3 	bl	75a4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    e5fe:	4428      	add	r0, r5
    e600:	b286      	uxth	r6, r0
    e602:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
    e606:	f7f8 ffcd 	bl	75a4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    e60a:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    e60e:	fa1f f880 	uxth.w	r8, r0
    e612:	4648      	mov	r0, r9
    e614:	f001 fb49 	bl	fcaa <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    e618:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
    e61c:	1a0d      	subs	r5, r1, r0
    e61e:	4648      	mov	r0, r9
    e620:	f001 fb51 	bl	fcc6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    e624:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    e628:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    e62c:	fbb0 f0fa 	udiv	r0, r0, sl
    e630:	1a2d      	subs	r5, r5, r0
    e632:	4648      	mov	r0, r9
    e634:	f001 fb39 	bl	fcaa <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    e638:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    e63c:	1a0f      	subs	r7, r1, r0
    e63e:	4648      	mov	r0, r9
    e640:	f001 fb41 	bl	fcc6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    e644:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    e648:	4401      	add	r1, r0
    e64a:	fbb1 f0fa 	udiv	r0, r1, sl
    e64e:	1a39      	subs	r1, r7, r0
    e650:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    e654:	4370      	muls	r0, r6
    e656:	fbb0 f2f8 	udiv	r2, r0, r8
    e65a:	2029      	movs	r0, #41	; 0x29
    e65c:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    e660:	3260      	adds	r2, #96	; 0x60
    e662:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    e666:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    e66a:	42a9      	cmp	r1, r5
    e66c:	d801      	bhi.n	e672 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x29a>
    e66e:	4285      	cmp	r5, r0
    e670:	d901      	bls.n	e676 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x29e>
    e672:	f7f5 f83d 	bl	36f0 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    e676:	4631      	mov	r1, r6
    e678:	68e0      	ldr	r0, [r4, #12]
    e67a:	f7fd fb05 	bl	bc88 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    e67e:	2100      	movs	r1, #0
    e680:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    e684:	f884 114a 	strb.w	r1, [r4, #330]	; 0x14a
    e688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e68c:	b570      	push	{r4, r5, r6, lr}
    e68e:	460c      	mov	r4, r1
    e690:	4605      	mov	r5, r0
    e692:	f001 fb18 	bl	fcc6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    e696:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    e69a:	4408      	add	r0, r1
    e69c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e6a0:	fbb0 f6f1 	udiv	r6, r0, r1
    e6a4:	4628      	mov	r0, r5
    e6a6:	f001 fb00 	bl	fcaa <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    e6aa:	4430      	add	r0, r6
    e6ac:	4420      	add	r0, r4
    e6ae:	bd70      	pop	{r4, r5, r6, pc}
    e6b0:	f7f3 b906 	b.w	18c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    e6b4:	b510      	push	{r4, lr}
    e6b6:	4604      	mov	r4, r0
    e6b8:	f7ff fca3 	bl	e002 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    e6bc:	b1a0      	cbz	r0, e6e8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x310>
    e6be:	4620      	mov	r0, r4
    e6c0:	f7ff fc97 	bl	dff2 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    e6c4:	b918      	cbnz	r0, e6ce <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f6>
    e6c6:	4620      	mov	r0, r4
    e6c8:	f7ff fc9d 	bl	e006 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    e6cc:	b120      	cbz	r0, e6d8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x300>
    e6ce:	2449      	movs	r4, #73	; 0x49
    e6d0:	f001 fab7 	bl	fc42 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    e6d4:	b928      	cbnz	r0, e6e2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30a>
    e6d6:	e001      	b.n	e6dc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x304>
    e6d8:	2442      	movs	r4, #66	; 0x42
    e6da:	e7f9      	b.n	e6d0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f8>
    e6dc:	f001 faa7 	bl	fc2e <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    e6e0:	b100      	cbz	r0, e6e4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30c>
    e6e2:	1de4      	adds	r4, r4, #7
    e6e4:	4620      	mov	r0, r4
    e6e6:	bd10      	pop	{r4, pc}
    e6e8:	206b      	movs	r0, #107	; 0x6b
    e6ea:	bd10      	pop	{r4, pc}
    e6ec:	b570      	push	{r4, r5, r6, lr}
    e6ee:	4604      	mov	r4, r0
    e6f0:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
    e6f4:	2500      	movs	r5, #0
    e6f6:	b118      	cbz	r0, e700 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x328>
    e6f8:	2001      	movs	r0, #1
    e6fa:	f000 f887 	bl	e80c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x434>
    e6fe:	4605      	mov	r5, r0
    e700:	4620      	mov	r0, r4
    e702:	f7ff fc51 	bl	dfa8 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    e706:	1941      	adds	r1, r0, r5
    e708:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    e70c:	34b8      	adds	r4, #184	; 0xb8
    e70e:	f7f2 ff5d 	bl	15cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    e712:	2600      	movs	r6, #0
    e714:	60e0      	str	r0, [r4, #12]
    e716:	f804 6b0b 	strb.w	r6, [r4], #11
    e71a:	2001      	movs	r0, #1
    e71c:	f804 0901 	strb.w	r0, [r4], #-1
    e720:	2003      	movs	r0, #3
    e722:	f804 09c2 	strb.w	r0, [r4], #-194
    e726:	4620      	mov	r0, r4
    e728:	f7ff ffc4 	bl	e6b4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2dc>
    e72c:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    e730:	4629      	mov	r1, r5
    e732:	4620      	mov	r0, r4
    e734:	f7ff ff17 	bl	e566 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18e>
    e738:	b930      	cbnz	r0, e748 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x370>
    e73a:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    e73e:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
    e742:	f7ff ffb5 	bl	e6b0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d8>
    e746:	b128      	cbz	r0, e754 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x37c>
    e748:	f8a4 60c8 	strh.w	r6, [r4, #200]	; 0xc8
    e74c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e750:	f7ff bf3a 	b.w	e5c8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f0>
    e754:	f240 61eb 	movw	r1, #1771	; 0x6eb
    e758:	2030      	movs	r0, #48	; 0x30
    e75a:	f7f5 fb67 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e75e:	b510      	push	{r4, lr}
    e760:	4604      	mov	r4, r0
    e762:	2000      	movs	r0, #0
    e764:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    e768:	f894 0168 	ldrb.w	r0, [r4, #360]	; 0x168
    e76c:	f7f3 fd04 	bl	2178 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    e770:	2020      	movs	r0, #32
    e772:	f884 0168 	strb.w	r0, [r4, #360]	; 0x168
    e776:	bd10      	pop	{r4, pc}
    e778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e77c:	2500      	movs	r5, #0
    e77e:	f880 50a8 	strb.w	r5, [r0, #168]	; 0xa8
    e782:	f8d0 60c4 	ldr.w	r6, [r0, #196]	; 0xc4
    e786:	4688      	mov	r8, r1
    e788:	4604      	mov	r4, r0
    e78a:	f880 50b4 	strb.w	r5, [r0, #180]	; 0xb4
    e78e:	2701      	movs	r7, #1
    e790:	f880 70b5 	strb.w	r7, [r0, #181]	; 0xb5
    e794:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
    e798:	4639      	mov	r1, r7
    e79a:	34a0      	adds	r4, #160	; 0xa0
    e79c:	f7f7 fa84 	bl	5ca8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    e7a0:	6860      	ldr	r0, [r4, #4]
    e7a2:	f8c0 615c 	str.w	r6, [r0, #348]	; 0x15c
    e7a6:	6861      	ldr	r1, [r4, #4]
    e7a8:	7820      	ldrb	r0, [r4, #0]
    e7aa:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
    e7ae:	6861      	ldr	r1, [r4, #4]
    e7b0:	f8c1 816c 	str.w	r8, [r1, #364]	; 0x16c
    e7b4:	6860      	ldr	r0, [r4, #4]
    e7b6:	f8c0 6160 	str.w	r6, [r0, #352]	; 0x160
    e7ba:	6864      	ldr	r4, [r4, #4]
    e7bc:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
    e7c0:	2300      	movs	r3, #0
    e7c2:	f8a4 5164 	strh.w	r5, [r4, #356]	; 0x164
    e7c6:	461a      	mov	r2, r3
    e7c8:	4619      	mov	r1, r3
    e7ca:	4620      	mov	r0, r4
    e7cc:	9500      	str	r5, [sp, #0]
    e7ce:	f7f8 ffc7 	bl	7760 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    e7d2:	b120      	cbz	r0, e7de <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x406>
    e7d4:	f240 2117 	movw	r1, #535	; 0x217
    e7d8:	2030      	movs	r0, #48	; 0x30
    e7da:	f7f5 fb27 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e7de:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
    e7e2:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
    e7e6:	f884 7134 	strb.w	r7, [r4, #308]	; 0x134
    e7ea:	f8a4 5146 	strh.w	r5, [r4, #326]	; 0x146
    e7ee:	f8a4 5144 	strh.w	r5, [r4, #324]	; 0x144
    e7f2:	f504 7498 	add.w	r4, r4, #304	; 0x130
    e7f6:	7665      	strb	r5, [r4, #25]
    e7f8:	f834 0cbc 	ldrh.w	r0, [r4, #-188]
    e7fc:	1e40      	subs	r0, r0, #1
    e7fe:	f824 0cbc 	strh.w	r0, [r4, #-188]
    e802:	86e5      	strh	r5, [r4, #54]	; 0x36
    e804:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e808:	f7ff bede 	b.w	e5c8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f0>
    e80c:	b510      	push	{r4, lr}
    e80e:	f7f9 f9b3 	bl	7b78 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x610>
    e812:	f242 7110 	movw	r1, #10000	; 0x2710
    e816:	fbb0 f2f1 	udiv	r2, r0, r1
    e81a:	fb01 0012 	mls	r0, r1, r2, r0
    e81e:	bd10      	pop	{r4, pc}
    e820:	b570      	push	{r4, r5, r6, lr}
    e822:	b140      	cbz	r0, e836 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x45e>
    e824:	2909      	cmp	r1, #9
    e826:	d248      	bcs.n	e8ba <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e2>
    e828:	e8df f001 	tbb	[pc, r1]
    e82c:	3b3b1507 	.word	0x3b3b1507
    e830:	3f294737 	.word	0x3f294737
    e834:	0043      	.short	0x0043
    e836:	21cd      	movs	r1, #205	; 0xcd
    e838:	e03c      	b.n	e8b4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4dc>
    e83a:	4604      	mov	r4, r0
    e83c:	f7f7 ffb2 	bl	67a4 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    e840:	b110      	cbz	r0, e848 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x470>
    e842:	f240 2175 	movw	r1, #629	; 0x275
    e846:	e035      	b.n	e8b4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4dc>
    e848:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    e84c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e850:	38f8      	subs	r0, #248	; 0xf8
    e852:	f7f3 bec9 	b.w	25e8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    e856:	4605      	mov	r5, r0
    e858:	f7ff fbcf 	bl	dffa <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    e85c:	b9a8      	cbnz	r0, e88a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4b2>
    e85e:	4628      	mov	r0, r5
    e860:	f7ff fe7b 	bl	e55a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
    e864:	4604      	mov	r4, r0
    e866:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
    e86a:	42a0      	cmp	r0, r4
    e86c:	d20b      	bcs.n	e886 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ae>
    e86e:	1a20      	subs	r0, r4, r0
    e870:	2104      	movs	r1, #4
    e872:	f7f2 fdd9 	bl	1428 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    e876:	b130      	cbz	r0, e886 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ae>
    e878:	4628      	mov	r0, r5
    e87a:	f8c5 40bc 	str.w	r4, [r5, #188]	; 0xbc
    e87e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e882:	f7ff bb8f 	b.w	dfa4 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    e886:	f8c5 40bc 	str.w	r4, [r5, #188]	; 0xbc
    e88a:	4628      	mov	r0, r5
    e88c:	f7f7 ffa6 	bl	67dc <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    e890:	2800      	cmp	r0, #0
    e892:	d014      	beq.n	e8be <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e6>
    e894:	f44f 712a 	mov.w	r1, #680	; 0x2a8
    e898:	e00c      	b.n	e8b4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4dc>
    e89a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e89e:	f7fc bc25 	b.w	b0ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    e8a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e8a6:	f7ff bdf4 	b.w	e492 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xba>
    e8aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e8ae:	f7ff be4b 	b.w	e548 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x170>
    e8b2:	21ed      	movs	r1, #237	; 0xed
    e8b4:	2030      	movs	r0, #48	; 0x30
    e8b6:	f7f5 fab9 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e8ba:	21f1      	movs	r1, #241	; 0xf1
    e8bc:	e7fa      	b.n	e8b4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4dc>
    e8be:	bd70      	pop	{r4, r5, r6, pc}
    e8c0:	b510      	push	{r4, lr}
    e8c2:	0004      	movs	r4, r0
    e8c4:	d008      	beq.n	e8d8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x500>
    e8c6:	2909      	cmp	r1, #9
    e8c8:	d25c      	bcs.n	e984 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5ac>
    e8ca:	e8df f001 	tbb	[pc, r1]
    e8ce:	3607      	.short	0x3607
    e8d0:	5b3a3e3e 	.word	0x5b3a3e3e
    e8d4:	00574a43 	.word	0x00574a43
    e8d8:	2196      	movs	r1, #150	; 0x96
    e8da:	e050      	b.n	e97e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5a6>
    e8dc:	2100      	movs	r1, #0
    e8de:	f8c4 1170 	str.w	r1, [r4, #368]	; 0x170
    e8e2:	f894 1148 	ldrb.w	r1, [r4, #328]	; 0x148
    e8e6:	4620      	mov	r0, r4
    e8e8:	b189      	cbz	r1, e90e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x536>
    e8ea:	f8b0 2146 	ldrh.w	r2, [r0, #326]	; 0x146
    e8ee:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
    e8f2:	428a      	cmp	r2, r1
    e8f4:	d106      	bne.n	e904 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x52c>
    e8f6:	f8b0 20fc 	ldrh.w	r2, [r0, #252]	; 0xfc
    e8fa:	1a51      	subs	r1, r2, r1
    e8fc:	f8a0 10fe 	strh.w	r1, [r0, #254]	; 0xfe
    e900:	4611      	mov	r1, r2
    e902:	e00d      	b.n	e920 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x548>
    e904:	1a51      	subs	r1, r2, r1
    e906:	f8a0 10fe 	strh.w	r1, [r0, #254]	; 0xfe
    e90a:	b291      	uxth	r1, r2
    e90c:	e008      	b.n	e920 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x548>
    e90e:	f8b0 1144 	ldrh.w	r1, [r0, #324]	; 0x144
    e912:	f8b0 2074 	ldrh.w	r2, [r0, #116]	; 0x74
    e916:	1a89      	subs	r1, r1, r2
    e918:	f8a0 10fe 	strh.w	r1, [r0, #254]	; 0xfe
    e91c:	f8b0 1144 	ldrh.w	r1, [r0, #324]	; 0x144
    e920:	f8a0 1074 	strh.w	r1, [r0, #116]	; 0x74
    e924:	f8d0 1158 	ldr.w	r1, [r0, #344]	; 0x158
    e928:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
    e92c:	f7f9 fb40 	bl	7fb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    e930:	4620      	mov	r0, r4
    e932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e936:	f7f9 b929 	b.w	7b8c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x624>
    e93a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e93e:	f000 b905 	b.w	eb4c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    e942:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e946:	f7fc bbd1 	b.w	b0ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    e94a:	4620      	mov	r0, r4
    e94c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e950:	f000 b827 	b.w	e9a2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5ca>
    e954:	2001      	movs	r0, #1
    e956:	f7f2 fd57 	bl	1408 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    e95a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e95e:	f7fe bcbe 	b.w	d2de <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    e962:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    e966:	2804      	cmp	r0, #4
    e968:	d001      	beq.n	e96e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x596>
    e96a:	21b8      	movs	r1, #184	; 0xb8
    e96c:	e007      	b.n	e97e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5a6>
    e96e:	4620      	mov	r0, r4
    e970:	f7ff fef5 	bl	e75e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x386>
    e974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e978:	f7f7 bbe4 	b.w	6144 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    e97c:	21c1      	movs	r1, #193	; 0xc1
    e97e:	2030      	movs	r0, #48	; 0x30
    e980:	f7f5 fa54 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e984:	21c5      	movs	r1, #197	; 0xc5
    e986:	e7fa      	b.n	e97e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5a6>
    e988:	b510      	push	{r4, lr}
    e98a:	f001 f99c 	bl	fcc6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    e98e:	f64d 7141 	movw	r1, #57153	; 0xdf41
    e992:	4408      	add	r0, r1
    e994:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e998:	fbb0 f0f1 	udiv	r0, r0, r1
    e99c:	f500 70bb 	add.w	r0, r0, #374	; 0x176
    e9a0:	bd10      	pop	{r4, pc}
    e9a2:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e9a4:	4604      	mov	r4, r0
    e9a6:	f7fd f93b 	bl	bc20 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    e9aa:	4601      	mov	r1, r0
    e9ac:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    e9b0:	f7f2 fe3e 	bl	1630 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    e9b4:	68e1      	ldr	r1, [r4, #12]
    e9b6:	b111      	cbz	r1, e9be <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5e6>
    e9b8:	fbb0 f0f1 	udiv	r0, r0, r1
    e9bc:	e000      	b.n	e9c0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5e8>
    e9be:	2000      	movs	r0, #0
    e9c0:	f894 107e 	ldrb.w	r1, [r4, #126]	; 0x7e
    e9c4:	290d      	cmp	r1, #13
    e9c6:	d00c      	beq.n	e9e2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x60a>
    e9c8:	f8b4 2074 	ldrh.w	r2, [r4, #116]	; 0x74
    e9cc:	f8b4 1146 	ldrh.w	r1, [r4, #326]	; 0x146
    e9d0:	1813      	adds	r3, r2, r0
    e9d2:	1acb      	subs	r3, r1, r3
    e9d4:	b21b      	sxth	r3, r3
    e9d6:	2b00      	cmp	r3, #0
    e9d8:	db06      	blt.n	e9e8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x610>
    e9da:	1c49      	adds	r1, r1, #1
    e9dc:	f8a4 1146 	strh.w	r1, [r4, #326]	; 0x146
    e9e0:	e006      	b.n	e9f0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x618>
    e9e2:	f8b4 0146 	ldrh.w	r0, [r4, #326]	; 0x146
    e9e6:	e012      	b.n	ea0e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x636>
    e9e8:	1c40      	adds	r0, r0, #1
    e9ea:	4410      	add	r0, r2
    e9ec:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
    e9f0:	f894 0149 	ldrb.w	r0, [r4, #329]	; 0x149
    e9f4:	f88d 0000 	strb.w	r0, [sp]
    e9f8:	9800      	ldr	r0, [sp, #0]
    e9fa:	9000      	str	r0, [sp, #0]
    e9fc:	f89d 0000 	ldrb.w	r0, [sp]
    ea00:	b940      	cbnz	r0, ea14 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x63c>
    ea02:	f8b4 0146 	ldrh.w	r0, [r4, #326]	; 0x146
    ea06:	f8b4 10fc 	ldrh.w	r1, [r4, #252]	; 0xfc
    ea0a:	4288      	cmp	r0, r1
    ea0c:	d102      	bne.n	ea14 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x63c>
    ea0e:	1c40      	adds	r0, r0, #1
    ea10:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
    ea14:	f8b4 0166 	ldrh.w	r0, [r4, #358]	; 0x166
    ea18:	1c40      	adds	r0, r0, #1
    ea1a:	f8a4 0166 	strh.w	r0, [r4, #358]	; 0x166
    ea1e:	f8b4 00a6 	ldrh.w	r0, [r4, #166]	; 0xa6
    ea22:	f8b4 10a4 	ldrh.w	r1, [r4, #164]	; 0xa4
    ea26:	1a40      	subs	r0, r0, r1
    ea28:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    ea2c:	1e40      	subs	r0, r0, #1
    ea2e:	4408      	add	r0, r1
    ea30:	b285      	uxth	r5, r0
    ea32:	e026      	b.n	ea82 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6aa>
    ea34:	a801      	add	r0, sp, #4
    ea36:	2300      	movs	r3, #0
    ea38:	9000      	str	r0, [sp, #0]
    ea3a:	461a      	mov	r2, r3
    ea3c:	4620      	mov	r0, r4
    ea3e:	f7f8 fe8f 	bl	7760 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    ea42:	2800      	cmp	r0, #0
    ea44:	d038      	beq.n	eab8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6e0>
    ea46:	2801      	cmp	r0, #1
    ea48:	d004      	beq.n	ea54 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x67c>
    ea4a:	f240 614e 	movw	r1, #1614	; 0x64e
    ea4e:	2030      	movs	r0, #48	; 0x30
    ea50:	f7f5 f9ec 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea54:	f8b4 0146 	ldrh.w	r0, [r4, #326]	; 0x146
    ea58:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
    ea5c:	1a42      	subs	r2, r0, r1
    ea5e:	b212      	sxth	r2, r2
    ea60:	2a00      	cmp	r2, #0
    ea62:	da09      	bge.n	ea78 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6a0>
    ea64:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    ea68:	4402      	add	r2, r0
    ea6a:	1aaa      	subs	r2, r5, r2
    ea6c:	b212      	sxth	r2, r2
    ea6e:	2a00      	cmp	r2, #0
    ea70:	da02      	bge.n	ea78 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6a0>
    ea72:	f8a4 1146 	strh.w	r1, [r4, #326]	; 0x146
    ea76:	e004      	b.n	ea82 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6aa>
    ea78:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    ea7c:	4408      	add	r0, r1
    ea7e:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
    ea82:	f8b4 1146 	ldrh.w	r1, [r4, #326]	; 0x146
    ea86:	1a68      	subs	r0, r5, r1
    ea88:	b200      	sxth	r0, r0
    ea8a:	2800      	cmp	r0, #0
    ea8c:	dad2      	bge.n	ea34 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x65c>
    ea8e:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
    ea92:	b178      	cbz	r0, eab4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6dc>
    ea94:	2008      	movs	r0, #8
    ea96:	f884 0095 	strb.w	r0, [r4, #149]	; 0x95
    ea9a:	2001      	movs	r0, #1
    ea9c:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
    eaa0:	4620      	mov	r0, r4
    eaa2:	f000 f855 	bl	eb50 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    eaa6:	4620      	mov	r0, r4
    eaa8:	f7ff fe59 	bl	e75e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x386>
    eaac:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    eab0:	f7f7 bb48 	b.w	6144 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    eab4:	203e      	movs	r0, #62	; 0x3e
    eab6:	e7ee      	b.n	ea96 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6be>
    eab8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    eaba:	01f4      	.short	0x01f4
    eabc:	009600fa 	.word	0x009600fa
    eac0:	004b0064 	.word	0x004b0064
    eac4:	001e0032 	.word	0x001e0032
    eac8:	000a0014 	.word	0x000a0014
    eacc:	00020005 	.word	0x00020005
    ead0:	0001      	.short	0x0001
    ead2:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    ead6:	f001 0307 	and.w	r3, r1, #7
    eada:	7802      	ldrb	r2, [r0, #0]
    eadc:	2101      	movs	r1, #1
    eade:	4099      	lsls	r1, r3
    eae0:	438a      	bics	r2, r1
    eae2:	7002      	strb	r2, [r0, #0]
    eae4:	4770      	bx	lr

0000eae6 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    eae6:	b510      	push	{r4, lr}
    eae8:	4604      	mov	r4, r0
    eaea:	f8d0 019c 	ldr.w	r0, [r0, #412]	; 0x19c
    eaee:	68e1      	ldr	r1, [r4, #12]
    eaf0:	4288      	cmp	r0, r1
    eaf2:	d109      	bne.n	eb08 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    eaf4:	f8b4 11a0 	ldrh.w	r1, [r4, #416]	; 0x1a0
    eaf8:	8aa2      	ldrh	r2, [r4, #20]
    eafa:	4291      	cmp	r1, r2
    eafc:	d104      	bne.n	eb08 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    eafe:	f8b4 11a2 	ldrh.w	r1, [r4, #418]	; 0x1a2
    eb02:	8ae2      	ldrh	r2, [r4, #22]
    eb04:	4291      	cmp	r1, r2
    eb06:	d013      	beq.n	eb30 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4a>
    eb08:	8821      	ldrh	r1, [r4, #0]
    eb0a:	f8a4 11bc 	strh.w	r1, [r4, #444]	; 0x1bc
    eb0e:	f7fe fc6d 	bl	d3ec <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    eb12:	f8a4 01be 	strh.w	r0, [r4, #446]	; 0x1be
    eb16:	f8b4 01a0 	ldrh.w	r0, [r4, #416]	; 0x1a0
    eb1a:	f8a4 01c0 	strh.w	r0, [r4, #448]	; 0x1c0
    eb1e:	f8b4 01a2 	ldrh.w	r0, [r4, #418]	; 0x1a2
    eb22:	f8a4 01c2 	strh.w	r0, [r4, #450]	; 0x1c2
    eb26:	2001      	movs	r0, #1
    eb28:	f884 01b8 	strb.w	r0, [r4, #440]	; 0x1b8
    eb2c:	f7f7 fb0a 	bl	6144 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    eb30:	2102      	movs	r1, #2
    eb32:	4620      	mov	r0, r4
    eb34:	f7f7 f8b8 	bl	5ca8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    eb38:	2000      	movs	r0, #0
    eb3a:	f804 0f7e 	strb.w	r0, [r4, #126]!
    eb3e:	2003      	movs	r0, #3
    eb40:	70e0      	strb	r0, [r4, #3]
    eb42:	bd10      	pop	{r4, pc}

0000eb44 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    eb44:	f7f5 bd18 	b.w	4578 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000eb48 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    eb48:	2000      	movs	r0, #0
    eb4a:	4770      	bx	lr

0000eb4c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    eb4c:	f7f6 ba4c 	b.w	4fe8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>

0000eb50 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
    eb50:	2100      	movs	r1, #0
    eb52:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    eb56:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    eb5a:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    eb5e:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    eb62:	b109      	cbz	r1, eb68 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
    eb64:	2102      	movs	r1, #2
    eb66:	e000      	b.n	eb6a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
    eb68:	2103      	movs	r1, #3
    eb6a:	f7f8 bcc9 	b.w	7500 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    eb6e:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
    eb72:	28fe      	cmp	r0, #254	; 0xfe
    eb74:	d001      	beq.n	eb7a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
    eb76:	2001      	movs	r0, #1
    eb78:	4770      	bx	lr
    eb7a:	2000      	movs	r0, #0
    eb7c:	4770      	bx	lr
    eb7e:	b510      	push	{r4, lr}
    eb80:	2801      	cmp	r0, #1
    eb82:	d006      	beq.n	eb92 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    eb84:	2802      	cmp	r0, #2
    eb86:	d004      	beq.n	eb92 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    eb88:	f240 2163 	movw	r1, #611	; 0x263
    eb8c:	2006      	movs	r0, #6
    eb8e:	f7f5 f94d 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eb92:	bd10      	pop	{r4, pc}
    eb94:	2801      	cmp	r0, #1
    eb96:	d002      	beq.n	eb9e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
    eb98:	2802      	cmp	r0, #2
    eb9a:	d105      	bne.n	eba8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    eb9c:	e002      	b.n	eba4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
    eb9e:	2901      	cmp	r1, #1
    eba0:	d004      	beq.n	ebac <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    eba2:	e001      	b.n	eba8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    eba4:	2902      	cmp	r1, #2
    eba6:	d001      	beq.n	ebac <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    eba8:	2000      	movs	r0, #0
    ebaa:	4770      	bx	lr
    ebac:	2001      	movs	r0, #1
    ebae:	4770      	bx	lr
    ebb0:	1a40      	subs	r0, r0, r1
    ebb2:	b200      	sxth	r0, r0
    ebb4:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    ebb8:	4288      	cmp	r0, r1
    ebba:	dc01      	bgt.n	ebc0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
    ebbc:	2800      	cmp	r0, #0
    ebbe:	dc01      	bgt.n	ebc4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
    ebc0:	2001      	movs	r0, #1
    ebc2:	4770      	bx	lr
    ebc4:	2000      	movs	r0, #0
    ebc6:	4770      	bx	lr
    ebc8:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    ebcc:	f001 0107 	and.w	r1, r1, #7
    ebd0:	7800      	ldrb	r0, [r0, #0]
    ebd2:	2201      	movs	r2, #1
    ebd4:	408a      	lsls	r2, r1
    ebd6:	4010      	ands	r0, r2
    ebd8:	40c8      	lsrs	r0, r1
    ebda:	4770      	bx	lr
    ebdc:	b118      	cbz	r0, ebe6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
    ebde:	2802      	cmp	r0, #2
    ebe0:	d001      	beq.n	ebe6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
    ebe2:	2001      	movs	r0, #1
    ebe4:	4770      	bx	lr
    ebe6:	2000      	movs	r0, #0
    ebe8:	4770      	bx	lr

0000ebea <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    ebea:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    ebec:	7881      	ldrb	r1, [r0, #2]
    ebee:	4604      	mov	r4, r0
    ebf0:	291a      	cmp	r1, #26
    ebf2:	d025      	beq.n	ec40 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    ebf4:	dc0e      	bgt.n	ec14 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2a>
    ebf6:	2916      	cmp	r1, #22
    ebf8:	d22d      	bcs.n	ec56 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    ebfa:	e8df f001 	tbb	[pc, r1]
    ebfe:	2c2c      	.short	0x2c2c
    ec00:	212c2c2c 	.word	0x212c2c2c
    ec04:	2c2c2c2c 	.word	0x2c2c2c2c
    ec08:	2c2c2c2c 	.word	0x2c2c2c2c
    ec0c:	2c2c2c2c 	.word	0x2c2c2c2c
    ec10:	2121212c 	.word	0x2121212c
    ec14:	292a      	cmp	r1, #42	; 0x2a
    ec16:	d01e      	beq.n	ec56 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    ec18:	dc0b      	bgt.n	ec32 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x48>
    ec1a:	f1a1 011e 	sub.w	r1, r1, #30
    ec1e:	290c      	cmp	r1, #12
    ec20:	d219      	bcs.n	ec56 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    ec22:	e8df f001 	tbb	[pc, r1]
    ec26:	1818      	.short	0x1818
    ec28:	18181818 	.word	0x18181818
    ec2c:	18181818 	.word	0x18181818
    ec30:	0d18      	.short	0x0d18
    ec32:	393a      	subs	r1, #58	; 0x3a
    ec34:	2904      	cmp	r1, #4
    ec36:	d20e      	bcs.n	ec56 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    ec38:	e8df f001 	tbb	[pc, r1]
    ec3c:	020d020d 	.word	0x020d020d
    ec40:	8820      	ldrh	r0, [r4, #0]
    ec42:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    ec46:	d206      	bcs.n	ec56 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    ec48:	2701      	movs	r7, #1
    ec4a:	4669      	mov	r1, sp
    ec4c:	f7fe fbbd 	bl	d3ca <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ec50:	b118      	cbz	r0, ec5a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    ec52:	2002      	movs	r0, #2
    ec54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ec56:	2012      	movs	r0, #18
    ec58:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ec5a:	9d01      	ldr	r5, [sp, #4]
    ec5c:	4668      	mov	r0, sp
    ec5e:	462e      	mov	r6, r5
    ec60:	f505 75bc 	add.w	r5, r5, #376	; 0x178
    ec64:	f206 1679 	addw	r6, r6, #377	; 0x179
    ec68:	f000 fe8d 	bl	f986 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30c>
    ec6c:	b138      	cbz	r0, ec7e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x94>
    ec6e:	7828      	ldrb	r0, [r5, #0]
    ec70:	f88d 0008 	strb.w	r0, [sp, #8]
    ec74:	9802      	ldr	r0, [sp, #8]
    ec76:	9002      	str	r0, [sp, #8]
    ec78:	f89d 0008 	ldrb.w	r0, [sp, #8]
    ec7c:	b108      	cbz	r0, ec82 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x98>
    ec7e:	200c      	movs	r0, #12
    ec80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ec82:	702f      	strb	r7, [r5, #0]
    ec84:	78a0      	ldrb	r0, [r4, #2]
    ec86:	7030      	strb	r0, [r6, #0]
    ec88:	4668      	mov	r0, sp
    ec8a:	f7fe ff36 	bl	dafa <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    ec8e:	2000      	movs	r0, #0
    ec90:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000ec92 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    ec92:	b510      	push	{r4, lr}
    ec94:	4604      	mov	r4, r0
    ec96:	7800      	ldrb	r0, [r0, #0]
    ec98:	b118      	cbz	r0, eca2 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    ec9a:	2801      	cmp	r0, #1
    ec9c:	d001      	beq.n	eca2 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    ec9e:	2012      	movs	r0, #18
    eca0:	bd10      	pop	{r4, pc}
    eca2:	f000 fe9e 	bl	f9e2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
    eca6:	b120      	cbz	r0, ecb2 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    eca8:	f7f6 fdf0 	bl	588c <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    ecac:	b108      	cbz	r0, ecb2 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    ecae:	200c      	movs	r0, #12
    ecb0:	bd10      	pop	{r4, pc}
    ecb2:	7820      	ldrb	r0, [r4, #0]
    ecb4:	f7ff ff92 	bl	ebdc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    ecb8:	1de2      	adds	r2, r4, #7
    ecba:	f104 0317 	add.w	r3, r4, #23
    ecbe:	1c61      	adds	r1, r4, #1
    ecc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ecc4:	f7f6 be14 	b.w	58f0 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000ecc8 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    ecc8:	b510      	push	{r4, lr}
    ecca:	4604      	mov	r4, r0
    eccc:	f000 fef2 	bl	fab4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x43a>
    ecd0:	b108      	cbz	r0, ecd6 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    ecd2:	200c      	movs	r0, #12
    ecd4:	bd10      	pop	{r4, pc}
    ecd6:	7820      	ldrb	r0, [r4, #0]
    ecd8:	b118      	cbz	r0, ece2 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    ecda:	2801      	cmp	r0, #1
    ecdc:	d001      	beq.n	ece2 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    ecde:	2012      	movs	r0, #18
    ece0:	bd10      	pop	{r4, pc}
    ece2:	f7ff ff7b 	bl	ebdc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    ece6:	1c61      	adds	r1, r4, #1
    ece8:	f7f6 fe7a 	bl	59e0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    ecec:	b108      	cbz	r0, ecf2 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    ecee:	2000      	movs	r0, #0
    ecf0:	bd10      	pop	{r4, pc}
    ecf2:	2007      	movs	r0, #7
    ecf4:	bd10      	pop	{r4, pc}

0000ecf6 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    ecf6:	b510      	push	{r4, lr}
    ecf8:	f000 fe73 	bl	f9e2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
    ecfc:	b120      	cbz	r0, ed08 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    ecfe:	f7f6 fdc5 	bl	588c <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    ed02:	b108      	cbz	r0, ed08 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    ed04:	200c      	movs	r0, #12
    ed06:	bd10      	pop	{r4, pc}
    ed08:	f7f6 fe38 	bl	597c <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    ed0c:	2000      	movs	r0, #0
    ed0e:	bd10      	pop	{r4, pc}

0000ed10 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    ed10:	b510      	push	{r4, lr}
    ed12:	f000 fecf 	bl	fab4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x43a>
    ed16:	b108      	cbz	r0, ed1c <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    ed18:	200c      	movs	r0, #12
    ed1a:	bd10      	pop	{r4, pc}
    ed1c:	f7f6 fe88 	bl	5a30 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    ed20:	2000      	movs	r0, #0
    ed22:	bd10      	pop	{r4, pc}

0000ed24 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    ed24:	b510      	push	{r4, lr}
    ed26:	460b      	mov	r3, r1
    ed28:	2201      	movs	r2, #1
    ed2a:	f100 0110 	add.w	r1, r0, #16
    ed2e:	f7fe fb2e 	bl	d38e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    ed32:	2000      	movs	r0, #0
    ed34:	bd10      	pop	{r4, pc}

0000ed36 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    ed36:	b510      	push	{r4, lr}
    ed38:	8800      	ldrh	r0, [r0, #0]
    ed3a:	2100      	movs	r1, #0
    ed3c:	f7fe f8fd 	bl	cf3a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ed40:	b118      	cbz	r0, ed4a <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    ed42:	f890 117b 	ldrb.w	r1, [r0, #379]	; 0x17b
    ed46:	b111      	cbz	r1, ed4e <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    ed48:	e007      	b.n	ed5a <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    ed4a:	2002      	movs	r0, #2
    ed4c:	bd10      	pop	{r4, pc}
    ed4e:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    ed52:	2914      	cmp	r1, #20
    ed54:	d003      	beq.n	ed5e <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    ed56:	2915      	cmp	r1, #21
    ed58:	d001      	beq.n	ed5e <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    ed5a:	200c      	movs	r0, #12
    ed5c:	bd10      	pop	{r4, pc}
    ed5e:	2102      	movs	r1, #2
    ed60:	f880 117b 	strb.w	r1, [r0, #379]	; 0x17b
    ed64:	2000      	movs	r0, #0
    ed66:	bd10      	pop	{r4, pc}

0000ed68 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
    ed68:	b538      	push	{r3, r4, r5, lr}
    ed6a:	4605      	mov	r5, r0
    ed6c:	8800      	ldrh	r0, [r0, #0]
    ed6e:	2100      	movs	r1, #0
    ed70:	f7fe f8e3 	bl	cf3a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ed74:	0004      	movs	r4, r0
    ed76:	d003      	beq.n	ed80 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
    ed78:	f894 017b 	ldrb.w	r0, [r4, #379]	; 0x17b
    ed7c:	b110      	cbz	r0, ed84 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
    ed7e:	e010      	b.n	eda2 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3a>
    ed80:	2002      	movs	r0, #2
    ed82:	bd38      	pop	{r3, r4, r5, pc}
    ed84:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
    ed88:	2814      	cmp	r0, #20
    ed8a:	d001      	beq.n	ed90 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
    ed8c:	2815      	cmp	r0, #21
    ed8e:	d108      	bne.n	eda2 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3a>
    ed90:	f894 01cc 	ldrb.w	r0, [r4, #460]	; 0x1cc
    ed94:	f88d 0000 	strb.w	r0, [sp]
    ed98:	9800      	ldr	r0, [sp, #0]
    ed9a:	9000      	str	r0, [sp, #0]
    ed9c:	f89d 0000 	ldrb.w	r0, [sp]
    eda0:	b108      	cbz	r0, eda6 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3e>
    eda2:	200c      	movs	r0, #12
    eda4:	bd38      	pop	{r3, r4, r5, pc}
    eda6:	2210      	movs	r2, #16
    eda8:	1ca9      	adds	r1, r5, #2
    edaa:	f504 70be 	add.w	r0, r4, #380	; 0x17c
    edae:	f7fd f8ac 	bl	bf0a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    edb2:	2001      	movs	r0, #1
    edb4:	f884 017b 	strb.w	r0, [r4, #379]	; 0x17b
    edb8:	2000      	movs	r0, #0
    edba:	bd38      	pop	{r3, r4, r5, pc}

0000edbc <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    edbc:	b510      	push	{r4, lr}
    edbe:	2108      	movs	r1, #8
    edc0:	f7f5 f8ce 	bl	3f60 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    edc4:	2000      	movs	r0, #0
    edc6:	bd10      	pop	{r4, pc}

0000edc8 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    edc8:	b510      	push	{r4, lr}
    edca:	4604      	mov	r4, r0
    edcc:	f000 fdf2 	bl	f9b4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
    edd0:	f7ff f91d 	bl	e00e <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    edd4:	7020      	strb	r0, [r4, #0]
    edd6:	2000      	movs	r0, #0
    edd8:	bd10      	pop	{r4, pc}

0000edda <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    edda:	b510      	push	{r4, lr}
    eddc:	4604      	mov	r4, r0
    edde:	f000 fdcc 	bl	f97a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    ede2:	b140      	cbz	r0, edf6 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
    ede4:	20fb      	movs	r0, #251	; 0xfb
    ede6:	8020      	strh	r0, [r4, #0]
    ede8:	f640 0148 	movw	r1, #2120	; 0x848
    edec:	8061      	strh	r1, [r4, #2]
    edee:	80a0      	strh	r0, [r4, #4]
    edf0:	80e1      	strh	r1, [r4, #6]
    edf2:	2000      	movs	r0, #0
    edf4:	bd10      	pop	{r4, pc}
    edf6:	2001      	movs	r0, #1
    edf8:	bd10      	pop	{r4, pc}

0000edfa <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    edfa:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    edfc:	460d      	mov	r5, r1
    edfe:	4606      	mov	r6, r0
    ee00:	f7fb fb4c 	bl	a49c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    ee04:	f3c0 2000 	ubfx	r0, r0, #8, #1
    ee08:	b300      	cbz	r0, ee4c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x52>
    ee0a:	8830      	ldrh	r0, [r6, #0]
    ee0c:	4669      	mov	r1, sp
    ee0e:	f7fe fadc 	bl	d3ca <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ee12:	2800      	cmp	r0, #0
    ee14:	d119      	bne.n	ee4a <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x50>
    ee16:	9c01      	ldr	r4, [sp, #4]
    ee18:	2700      	movs	r7, #0
    ee1a:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    ee1e:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    ee22:	f000 fc46 	bl	f6b2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    ee26:	70a8      	strb	r0, [r5, #2]
    ee28:	7860      	ldrb	r0, [r4, #1]
    ee2a:	f000 fc42 	bl	f6b2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    ee2e:	70e8      	strb	r0, [r5, #3]
    ee30:	78a0      	ldrb	r0, [r4, #2]
    ee32:	f88d 0008 	strb.w	r0, [sp, #8]
    ee36:	9802      	ldr	r0, [sp, #8]
    ee38:	9002      	str	r0, [sp, #8]
    ee3a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    ee3e:	3c6a      	subs	r4, #106	; 0x6a
    ee40:	2800      	cmp	r0, #0
    ee42:	d1ea      	bne.n	ee1a <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x20>
    ee44:	8830      	ldrh	r0, [r6, #0]
    ee46:	8028      	strh	r0, [r5, #0]
    ee48:	2000      	movs	r0, #0
    ee4a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ee4c:	2001      	movs	r0, #1
    ee4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000ee50 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    ee50:	2108      	movs	r1, #8
    ee52:	7001      	strb	r1, [r0, #0]
    ee54:	2000      	movs	r0, #0
    ee56:	4770      	bx	lr

0000ee58 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    ee58:	b510      	push	{r4, lr}
    ee5a:	4604      	mov	r4, r0
    ee5c:	20d8      	movs	r0, #216	; 0xd8
    ee5e:	7020      	strb	r0, [r4, #0]
    ee60:	f000 fd6c 	bl	f93c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c2>
    ee64:	7060      	strb	r0, [r4, #1]
    ee66:	2000      	movs	r0, #0
    ee68:	bd10      	pop	{r4, pc}

0000ee6a <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    ee6a:	2108      	movs	r1, #8
    ee6c:	7001      	strb	r1, [r0, #0]
    ee6e:	2000      	movs	r0, #0
    ee70:	4770      	bx	lr

0000ee72 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    ee72:	b510      	push	{r4, lr}
    ee74:	4604      	mov	r4, r0
    ee76:	7800      	ldrb	r0, [r0, #0]
    ee78:	b108      	cbz	r0, ee7e <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    ee7a:	2801      	cmp	r0, #1
    ee7c:	d110      	bne.n	eea0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    ee7e:	f000 fdb0 	bl	f9e2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
    ee82:	b120      	cbz	r0, ee8e <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    ee84:	f7f6 fd02 	bl	588c <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    ee88:	b108      	cbz	r0, ee8e <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    ee8a:	200c      	movs	r0, #12
    ee8c:	bd10      	pop	{r4, pc}
    ee8e:	7820      	ldrb	r0, [r4, #0]
    ee90:	f7ff fea4 	bl	ebdc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    ee94:	1c61      	adds	r1, r4, #1
    ee96:	f7fe fa60 	bl	d35a <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    ee9a:	b108      	cbz	r0, eea0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    ee9c:	2000      	movs	r0, #0
    ee9e:	bd10      	pop	{r4, pc}
    eea0:	2012      	movs	r0, #18
    eea2:	bd10      	pop	{r4, pc}

0000eea4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    eea4:	b510      	push	{r4, lr}
    eea6:	4604      	mov	r4, r0
    eea8:	f000 fe04 	bl	fab4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x43a>
    eeac:	b108      	cbz	r0, eeb2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    eeae:	200c      	movs	r0, #12
    eeb0:	bd10      	pop	{r4, pc}
    eeb2:	7820      	ldrb	r0, [r4, #0]
    eeb4:	b108      	cbz	r0, eeba <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    eeb6:	2801      	cmp	r0, #1
    eeb8:	d107      	bne.n	eeca <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    eeba:	f7ff fe8f 	bl	ebdc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    eebe:	1c61      	adds	r1, r4, #1
    eec0:	f7fe fa5a 	bl	d378 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    eec4:	b108      	cbz	r0, eeca <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    eec6:	2000      	movs	r0, #0
    eec8:	bd10      	pop	{r4, pc}
    eeca:	2012      	movs	r0, #18
    eecc:	bd10      	pop	{r4, pc}

0000eece <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    eece:	b510      	push	{r4, lr}
    eed0:	4604      	mov	r4, r0
    eed2:	f000 fd86 	bl	f9e2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
    eed6:	b108      	cbz	r0, eedc <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    eed8:	200c      	movs	r0, #12
    eeda:	bd10      	pop	{r4, pc}
    eedc:	7820      	ldrb	r0, [r4, #0]
    eede:	f000 0001 	and.w	r0, r0, #1
    eee2:	f7f6 fccd 	bl	5880 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    eee6:	2000      	movs	r0, #0
    eee8:	bd10      	pop	{r4, pc}

0000eeea <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    eeea:	b51c      	push	{r2, r3, r4, lr}
    eeec:	4604      	mov	r4, r0
    eeee:	f000 fd61 	bl	f9b4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
    eef2:	2000      	movs	r0, #0
    eef4:	f88d 0002 	strb.w	r0, [sp, #2]
    eef8:	2103      	movs	r1, #3
    eefa:	f88d 1001 	strb.w	r1, [sp, #1]
    eefe:	f814 1b01 	ldrb.w	r1, [r4], #1
    ef02:	f88d 1003 	strb.w	r1, [sp, #3]
    ef06:	f88d 0000 	strb.w	r0, [sp]
    ef0a:	4668      	mov	r0, sp
    ef0c:	9401      	str	r4, [sp, #4]
    ef0e:	f000 f9f8 	bl	f302 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    ef12:	bd1c      	pop	{r2, r3, r4, pc}

0000ef14 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    ef14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    ef16:	4605      	mov	r5, r0
    ef18:	f000 fd4c 	bl	f9b4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
    ef1c:	4606      	mov	r6, r0
    ef1e:	7828      	ldrb	r0, [r5, #0]
    ef20:	2400      	movs	r4, #0
    ef22:	b160      	cbz	r0, ef3e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    ef24:	f88d 4000 	strb.w	r4, [sp]
    ef28:	2001      	movs	r0, #1
    ef2a:	f10d 0101 	add.w	r1, sp, #1
    ef2e:	f7f5 fe7b 	bl	4c28 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    ef32:	b120      	cbz	r0, ef3e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    ef34:	4668      	mov	r0, sp
    ef36:	f000 f897 	bl	f068 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    ef3a:	2800      	cmp	r0, #0
    ef3c:	d112      	bne.n	ef64 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    ef3e:	f88d 400c 	strb.w	r4, [sp, #12]
    ef42:	4630      	mov	r0, r6
    ef44:	f7ff f859 	bl	dffa <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    ef48:	b118      	cbz	r0, ef52 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    ef4a:	2080      	movs	r0, #128	; 0x80
    ef4c:	f8ad 000d 	strh.w	r0, [sp, #13]
    ef50:	e001      	b.n	ef56 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    ef52:	f8ad 400d 	strh.w	r4, [sp, #13]
    ef56:	f88d 400f 	strb.w	r4, [sp, #15]
    ef5a:	7828      	ldrb	r0, [r5, #0]
    ef5c:	2801      	cmp	r0, #1
    ef5e:	d003      	beq.n	ef68 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    ef60:	b138      	cbz	r0, ef72 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    ef62:	2012      	movs	r0, #18
    ef64:	b004      	add	sp, #16
    ef66:	bd70      	pop	{r4, r5, r6, pc}
    ef68:	a903      	add	r1, sp, #12
    ef6a:	4630      	mov	r0, r6
    ef6c:	f7fb f896 	bl	a09c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    ef70:	e7f8      	b.n	ef64 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    ef72:	4630      	mov	r0, r6
    ef74:	f000 fd3c 	bl	f9f0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x376>
    ef78:	e7f4      	b.n	ef64 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

0000ef7a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    ef7a:	b530      	push	{r4, r5, lr}
    ef7c:	b08b      	sub	sp, #44	; 0x2c
    ef7e:	4604      	mov	r4, r0
    ef80:	f000 fd18 	bl	f9b4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
    ef84:	4602      	mov	r2, r0
    ef86:	7920      	ldrb	r0, [r4, #4]
    ef88:	2804      	cmp	r0, #4
    ef8a:	d803      	bhi.n	ef94 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    ef8c:	8860      	ldrh	r0, [r4, #2]
    ef8e:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    ef92:	d902      	bls.n	ef9a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
    ef94:	2012      	movs	r0, #18
    ef96:	b00b      	add	sp, #44	; 0x2c
    ef98:	bd30      	pop	{r4, r5, pc}
    ef9a:	2500      	movs	r5, #0
    ef9c:	f88d 5004 	strb.w	r5, [sp, #4]
    efa0:	7921      	ldrb	r1, [r4, #4]
    efa2:	9500      	str	r5, [sp, #0]
    efa4:	f89d 0000 	ldrb.w	r0, [sp]
    efa8:	2905      	cmp	r1, #5
    efaa:	f040 0010 	orr.w	r0, r0, #16
    efae:	f88d 0000 	strb.w	r0, [sp]
    efb2:	d254      	bcs.n	f05e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
    efb4:	e8df f001 	tbb	[pc, r1]
    efb8:	11050803 	.word	0x11050803
    efbc:	000b      	.short	0x000b
    efbe:	f040 0001 	orr.w	r0, r0, #1
    efc2:	f040 0002 	orr.w	r0, r0, #2
    efc6:	e006      	b.n	efd6 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
    efc8:	f040 0009 	orr.w	r0, r0, #9
    efcc:	e001      	b.n	efd2 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
    efce:	f040 0001 	orr.w	r0, r0, #1
    efd2:	f040 0004 	orr.w	r0, r0, #4
    efd6:	f88d 0000 	strb.w	r0, [sp]
    efda:	f8bd 0000 	ldrh.w	r0, [sp]
    efde:	9000      	str	r0, [sp, #0]
    efe0:	f8bd 0000 	ldrh.w	r0, [sp]
    efe4:	f8ad 0005 	strh.w	r0, [sp, #5]
    efe8:	8821      	ldrh	r1, [r4, #0]
    efea:	f8dd 0006 	ldr.w	r0, [sp, #6]
    efee:	f361 201f 	bfi	r0, r1, #8, #24
    eff2:	f8cd 0006 	str.w	r0, [sp, #6]
    eff6:	8861      	ldrh	r1, [r4, #2]
    eff8:	f8dd 0009 	ldr.w	r0, [sp, #9]
    effc:	f361 201f 	bfi	r0, r1, #8, #24
    f000:	f8cd 0009 	str.w	r0, [sp, #9]
    f004:	7b60      	ldrb	r0, [r4, #13]
    f006:	f88d 000d 	strb.w	r0, [sp, #13]
    f00a:	7960      	ldrb	r0, [r4, #5]
    f00c:	f88d 000e 	strb.w	r0, [sp, #14]
    f010:	79a0      	ldrb	r0, [r4, #6]
    f012:	f88d 000f 	strb.w	r0, [sp, #15]
    f016:	f8d4 0007 	ldr.w	r0, [r4, #7]
    f01a:	9004      	str	r0, [sp, #16]
    f01c:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    f020:	f8ad 0014 	strh.w	r0, [sp, #20]
    f024:	7ba0      	ldrb	r0, [r4, #14]
    f026:	f88d 0016 	strb.w	r0, [sp, #22]
    f02a:	207f      	movs	r0, #127	; 0x7f
    f02c:	f88d 0017 	strb.w	r0, [sp, #23]
    f030:	2001      	movs	r0, #1
    f032:	f88d 0018 	strb.w	r0, [sp, #24]
    f036:	f88d 5019 	strb.w	r5, [sp, #25]
    f03a:	f88d 001a 	strb.w	r0, [sp, #26]
    f03e:	f88d 501b 	strb.w	r5, [sp, #27]
    f042:	4610      	mov	r0, r2
    f044:	f7fe fff5 	bl	e032 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    f048:	f88d 001c 	strb.w	r0, [sp, #28]
    f04c:	f88d 501d 	strb.w	r5, [sp, #29]
    f050:	f88d 501e 	strb.w	r5, [sp, #30]
    f054:	a909      	add	r1, sp, #36	; 0x24
    f056:	a801      	add	r0, sp, #4
    f058:	f000 f8de 	bl	f218 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    f05c:	e79b      	b.n	ef96 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
    f05e:	f44f 5185 	mov.w	r1, #4256	; 0x10a0
    f062:	2039      	movs	r0, #57	; 0x39
    f064:	f7f4 fee2 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f068 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    f068:	b570      	push	{r4, r5, r6, lr}
    f06a:	4604      	mov	r4, r0
    f06c:	7800      	ldrb	r0, [r0, #0]
    f06e:	2101      	movs	r1, #1
    f070:	f7fd ff63 	bl	cf3a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f074:	0005      	movs	r5, r0
    f076:	d007      	beq.n	f088 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    f078:	f7ff f994 	bl	e3a4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    f07c:	b160      	cbz	r0, f098 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    f07e:	4628      	mov	r0, r5
    f080:	f7fe ffc1 	bl	e006 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f084:	b110      	cbz	r0, f08c <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    f086:	e005      	b.n	f094 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    f088:	2042      	movs	r0, #66	; 0x42
    f08a:	bd70      	pop	{r4, r5, r6, pc}
    f08c:	4628      	mov	r0, r5
    f08e:	f7fe ffb0 	bl	dff2 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    f092:	b108      	cbz	r0, f098 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    f094:	200c      	movs	r0, #12
    f096:	bd70      	pop	{r4, r5, r6, pc}
    f098:	1c61      	adds	r1, r4, #1
    f09a:	4628      	mov	r0, r5
    f09c:	f7fe ffc1 	bl	e022 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    f0a0:	2000      	movs	r0, #0
    f0a2:	bd70      	pop	{r4, r5, r6, pc}

0000f0a4 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    f0a4:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f0a6:	460d      	mov	r5, r1
    f0a8:	4604      	mov	r4, r0
    f0aa:	f000 fc66 	bl	f97a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    f0ae:	b130      	cbz	r0, f0be <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    f0b0:	88a2      	ldrh	r2, [r4, #4]
    f0b2:	f244 2090 	movw	r0, #17040	; 0x4290
    f0b6:	4282      	cmp	r2, r0
    f0b8:	d903      	bls.n	f0c2 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
    f0ba:	2012      	movs	r0, #18
    f0bc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f0be:	2001      	movs	r0, #1
    f0c0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f0c2:	f640 0048 	movw	r0, #2120	; 0x848
    f0c6:	4282      	cmp	r2, r0
    f0c8:	d300      	bcc.n	f0cc <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
    f0ca:	4602      	mov	r2, r0
    f0cc:	8820      	ldrh	r0, [r4, #0]
    f0ce:	f8ad 0000 	strh.w	r0, [sp]
    f0d2:	8860      	ldrh	r0, [r4, #2]
    f0d4:	f8ad 0002 	strh.w	r0, [sp, #2]
    f0d8:	f8ad 2004 	strh.w	r2, [sp, #4]
    f0dc:	8860      	ldrh	r0, [r4, #2]
    f0de:	f8ad 0006 	strh.w	r0, [sp, #6]
    f0e2:	f8ad 2008 	strh.w	r2, [sp, #8]
    f0e6:	8820      	ldrh	r0, [r4, #0]
    f0e8:	8028      	strh	r0, [r5, #0]
    f0ea:	4668      	mov	r0, sp
    f0ec:	f7fb f8a4 	bl	a238 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    f0f0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f0f2 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    f0f2:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f0f4:	4604      	mov	r4, r0
    f0f6:	f7fb f9d1 	bl	a49c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f0fa:	f3c0 2000 	ubfx	r0, r0, #8, #1
    f0fe:	b1b0      	cbz	r0, f12e <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3c>
    f100:	f10d 0007 	add.w	r0, sp, #7
    f104:	9000      	str	r0, [sp, #0]
    f106:	7922      	ldrb	r2, [r4, #4]
    f108:	78e1      	ldrb	r1, [r4, #3]
    f10a:	78a0      	ldrb	r0, [r4, #2]
    f10c:	f10d 0306 	add.w	r3, sp, #6
    f110:	f000 fc94 	bl	fa3c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3c2>
    f114:	2800      	cmp	r0, #0
    f116:	d109      	bne.n	f12c <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3a>
    f118:	8820      	ldrh	r0, [r4, #0]
    f11a:	f8ad 0004 	strh.w	r0, [sp, #4]
    f11e:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    f122:	f8ad 0008 	strh.w	r0, [sp, #8]
    f126:	a801      	add	r0, sp, #4
    f128:	f000 f9a6 	bl	f478 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    f12c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f12e:	2001      	movs	r0, #1
    f130:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f132 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
    f132:	b510      	push	{r4, lr}
    f134:	4604      	mov	r4, r0
    f136:	f000 fc54 	bl	f9e2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
    f13a:	b120      	cbz	r0, f146 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    f13c:	f7f6 fba6 	bl	588c <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    f140:	b108      	cbz	r0, f146 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    f142:	200c      	movs	r0, #12
    f144:	bd10      	pop	{r4, pc}
    f146:	7820      	ldrb	r0, [r4, #0]
    f148:	f7ff fd48 	bl	ebdc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    f14c:	79e2      	ldrb	r2, [r4, #7]
    f14e:	1c61      	adds	r1, r4, #1
    f150:	f7f6 fb4a 	bl	57e8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
    f154:	b108      	cbz	r0, f15a <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
    f156:	2000      	movs	r0, #0
    f158:	bd10      	pop	{r4, pc}
    f15a:	2002      	movs	r0, #2
    f15c:	bd10      	pop	{r4, pc}

0000f15e <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    f15e:	b510      	push	{r4, lr}
    f160:	4604      	mov	r4, r0
    f162:	2001      	movs	r0, #1
    f164:	f000 fac8 	bl	f6f8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
    f168:	b128      	cbz	r0, f176 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    f16a:	4621      	mov	r1, r4
    f16c:	2001      	movs	r0, #1
    f16e:	f7f5 fd73 	bl	4c58 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    f172:	2000      	movs	r0, #0
    f174:	bd10      	pop	{r4, pc}
    f176:	200c      	movs	r0, #12
    f178:	bd10      	pop	{r4, pc}

0000f17a <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
    f17a:	b510      	push	{r4, lr}
    f17c:	8800      	ldrh	r0, [r0, #0]
    f17e:	f7f6 fc13 	bl	59a8 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
    f182:	b108      	cbz	r0, f188 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
    f184:	2000      	movs	r0, #0
    f186:	bd10      	pop	{r4, pc}
    f188:	2030      	movs	r0, #48	; 0x30
    f18a:	bd10      	pop	{r4, pc}

0000f18c <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    f18c:	b51c      	push	{r2, r3, r4, lr}
    f18e:	4604      	mov	r4, r0
    f190:	f000 fc10 	bl	f9b4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
    f194:	2000      	movs	r0, #0
    f196:	f88d 0000 	strb.w	r0, [sp]
    f19a:	f88d 0002 	strb.w	r0, [sp, #2]
    f19e:	2003      	movs	r0, #3
    f1a0:	f88d 0001 	strb.w	r0, [sp, #1]
    f1a4:	f814 0b01 	ldrb.w	r0, [r4], #1
    f1a8:	f88d 0003 	strb.w	r0, [sp, #3]
    f1ac:	4668      	mov	r0, sp
    f1ae:	9401      	str	r4, [sp, #4]
    f1b0:	f000 f910 	bl	f3d4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    f1b4:	bd1c      	pop	{r2, r3, r4, pc}

0000f1b6 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    f1b6:	b51c      	push	{r2, r3, r4, lr}
    f1b8:	4604      	mov	r4, r0
    f1ba:	f000 fbde 	bl	f97a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    f1be:	b178      	cbz	r0, f1e0 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
    f1c0:	8820      	ldrh	r0, [r4, #0]
    f1c2:	f8ad 0000 	strh.w	r0, [sp]
    f1c6:	8860      	ldrh	r0, [r4, #2]
    f1c8:	f8ad 0002 	strh.w	r0, [sp, #2]
    f1cc:	8820      	ldrh	r0, [r4, #0]
    f1ce:	f8ad 0004 	strh.w	r0, [sp, #4]
    f1d2:	8860      	ldrh	r0, [r4, #2]
    f1d4:	f8ad 0006 	strh.w	r0, [sp, #6]
    f1d8:	4668      	mov	r0, sp
    f1da:	f7fb f8b1 	bl	a340 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a4>
    f1de:	bd1c      	pop	{r2, r3, r4, pc}
    f1e0:	2001      	movs	r0, #1
    f1e2:	bd1c      	pop	{r2, r3, r4, pc}

0000f1e4 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    f1e4:	b510      	push	{r4, lr}
    f1e6:	f7f5 fd5b 	bl	4ca0 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    f1ea:	2000      	movs	r0, #0
    f1ec:	bd10      	pop	{r4, pc}

0000f1ee <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    f1ee:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f1f0:	460c      	mov	r4, r1
    f1f2:	4605      	mov	r5, r0
    f1f4:	f000 fbc1 	bl	f97a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    f1f8:	b160      	cbz	r0, f214 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x26>
    f1fa:	4669      	mov	r1, sp
    f1fc:	4628      	mov	r0, r5
    f1fe:	f7fe f8e4 	bl	d3ca <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f202:	2800      	cmp	r0, #0
    f204:	d105      	bne.n	f212 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x24>
    f206:	2100      	movs	r1, #0
    f208:	4622      	mov	r2, r4
    f20a:	9801      	ldr	r0, [sp, #4]
    f20c:	f000 fb40 	bl	f890 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
    f210:	2000      	movs	r0, #0
    f212:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f214:	2001      	movs	r0, #1
    f216:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000f218 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    f218:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f21c:	460f      	mov	r7, r1
    f21e:	4605      	mov	r5, r0
    f220:	7806      	ldrb	r6, [r0, #0]
    f222:	f000 fac5 	bl	f7b0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x136>
    f226:	2800      	cmp	r0, #0
    f228:	d10a      	bne.n	f240 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    f22a:	4628      	mov	r0, r5
    f22c:	f000 fa9a 	bl	f764 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xea>
    f230:	2800      	cmp	r0, #0
    f232:	d105      	bne.n	f240 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    f234:	2001      	movs	r0, #1
    f236:	f7f4 ffe3 	bl	4200 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    f23a:	4286      	cmp	r6, r0
    f23c:	d302      	bcc.n	f244 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
    f23e:	2007      	movs	r0, #7
    f240:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f244:	2101      	movs	r1, #1
    f246:	4630      	mov	r0, r6
    f248:	f7fd fe77 	bl	cf3a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f24c:	0004      	movs	r4, r0
    f24e:	d004      	beq.n	f25a <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x42>
    f250:	f7ff f8a8 	bl	e3a4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    f254:	b150      	cbz	r0, f26c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x54>
    f256:	200c      	movs	r0, #12
    f258:	e7f2      	b.n	f240 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    f25a:	2200      	movs	r2, #0
    f25c:	2101      	movs	r1, #1
    f25e:	4630      	mov	r0, r6
    f260:	f7fd fe61 	bl	cf26 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    f264:	0004      	movs	r4, r0
    f266:	d00f      	beq.n	f288 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x70>
    f268:	f7fe fe68 	bl	df3c <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    f26c:	4620      	mov	r0, r4
    f26e:	f7fe fece 	bl	e00e <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    f272:	7038      	strb	r0, [r7, #0]
    f274:	74e8      	strb	r0, [r5, #19]
    f276:	4629      	mov	r1, r5
    f278:	4620      	mov	r0, r4
    f27a:	f7f7 f9cb 	bl	6614 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    f27e:	4606      	mov	r6, r0
    f280:	7e68      	ldrb	r0, [r5, #25]
    f282:	b1d0      	cbz	r0, f2ba <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa2>
    f284:	b12e      	cbz	r6, f292 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x7a>
    f286:	e018      	b.n	f2ba <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa2>
    f288:	f241 212d 	movw	r1, #4653	; 0x122d
    f28c:	2039      	movs	r0, #57	; 0x39
    f28e:	f7f4 fdcd 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f292:	2200      	movs	r2, #0
    f294:	4668      	mov	r0, sp
    f296:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    f298:	f7fd ff10 	bl	d0bc <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    f29c:	2200      	movs	r2, #0
    f29e:	2101      	movs	r1, #1
    f2a0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f2a2:	f7fd ff80 	bl	d1a6 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    f2a6:	2204      	movs	r2, #4
    f2a8:	4668      	mov	r0, sp
    f2aa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    f2ac:	f7fd ff06 	bl	d0bc <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    f2b0:	2200      	movs	r2, #0
    f2b2:	4611      	mov	r1, r2
    f2b4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f2b6:	f7fd ff76 	bl	d1a6 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    f2ba:	4630      	mov	r0, r6
    f2bc:	e7c0      	b.n	f240 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>

0000f2be <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    f2be:	b510      	push	{r4, lr}
    f2c0:	4604      	mov	r4, r0
    f2c2:	2000      	movs	r0, #0
    f2c4:	f000 fa18 	bl	f6f8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
    f2c8:	b128      	cbz	r0, f2d6 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
    f2ca:	4621      	mov	r1, r4
    f2cc:	2000      	movs	r0, #0
    f2ce:	f7f5 fcc3 	bl	4c58 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    f2d2:	2000      	movs	r0, #0
    f2d4:	bd10      	pop	{r4, pc}
    f2d6:	200c      	movs	r0, #12
    f2d8:	bd10      	pop	{r4, pc}

0000f2da <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    f2da:	b510      	push	{r4, lr}
    f2dc:	7800      	ldrb	r0, [r0, #0]
    f2de:	f000 0001 	and.w	r0, r0, #1
    f2e2:	f7f8 f8d3 	bl	748c <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
    f2e6:	2000      	movs	r0, #0
    f2e8:	bd10      	pop	{r4, pc}

0000f2ea <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    f2ea:	b510      	push	{r4, lr}
    f2ec:	4604      	mov	r4, r0
    f2ee:	f000 fb44 	bl	f97a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    f2f2:	b120      	cbz	r0, f2fe <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
    f2f4:	4620      	mov	r0, r4
    f2f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f2fa:	f7fa bf9d 	b.w	a238 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    f2fe:	2001      	movs	r0, #1
    f300:	bd10      	pop	{r4, pc}

0000f302 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    f302:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f306:	4606      	mov	r6, r0
    f308:	7845      	ldrb	r5, [r0, #1]
    f30a:	7800      	ldrb	r0, [r0, #0]
    f30c:	2101      	movs	r1, #1
    f30e:	f7fd fe14 	bl	cf3a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f312:	0004      	movs	r4, r0
    f314:	d01e      	beq.n	f354 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
    f316:	f7fe fe3d 	bl	df94 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    f31a:	78f1      	ldrb	r1, [r6, #3]
    f31c:	4281      	cmp	r1, r0
    f31e:	d800      	bhi.n	f322 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
    f320:	4608      	mov	r0, r1
    f322:	4607      	mov	r7, r0
    f324:	2d04      	cmp	r5, #4
    f326:	d018      	beq.n	f35a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
    f328:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f32a:	f7fd ff5f 	bl	d1ec <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    f32e:	4438      	add	r0, r7
    f330:	b281      	uxth	r1, r0
    f332:	4620      	mov	r0, r4
    f334:	2201      	movs	r2, #1
    f336:	f000 f9f1 	bl	f71c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa2>
    f33a:	2800      	cmp	r0, #0
    f33c:	d10b      	bne.n	f356 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    f33e:	2d03      	cmp	r5, #3
    f340:	d000      	beq.n	f344 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    f342:	b1df      	cbz	r7, f37c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    f344:	4620      	mov	r0, r4
    f346:	f7fe fe5c 	bl	e002 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f34a:	7871      	ldrb	r1, [r6, #1]
    f34c:	2903      	cmp	r1, #3
    f34e:	d010      	beq.n	f372 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    f350:	b9a0      	cbnz	r0, f37c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    f352:	e004      	b.n	f35e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
    f354:	2042      	movs	r0, #66	; 0x42
    f356:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f35a:	b97f      	cbnz	r7, f37c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    f35c:	e7f2      	b.n	f344 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    f35e:	2904      	cmp	r1, #4
    f360:	d107      	bne.n	f372 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    f362:	4620      	mov	r0, r4
    f364:	f7ff f81e 	bl	e3a4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    f368:	b140      	cbz	r0, f37c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    f36a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f36c:	f7fd ff0d 	bl	d18a <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
    f370:	b120      	cbz	r0, f37c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    f372:	2d01      	cmp	r5, #1
    f374:	d004      	beq.n	f380 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    f376:	2d03      	cmp	r5, #3
    f378:	d002      	beq.n	f380 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    f37a:	e00e      	b.n	f39a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
    f37c:	2012      	movs	r0, #18
    f37e:	e7ea      	b.n	f356 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    f380:	4620      	mov	r0, r4
    f382:	f7fe fe3e 	bl	e002 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f386:	b108      	cbz	r0, f38c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
    f388:	2200      	movs	r2, #0
    f38a:	e002      	b.n	f392 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    f38c:	2d01      	cmp	r5, #1
    f38e:	d013      	beq.n	f3b8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
    f390:	2201      	movs	r2, #1
    f392:	4668      	mov	r0, sp
    f394:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    f396:	f7fd fe91 	bl	d0bc <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    f39a:	2d04      	cmp	r5, #4
    f39c:	d018      	beq.n	f3d0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    f39e:	6872      	ldr	r2, [r6, #4]
    f3a0:	463b      	mov	r3, r7
    f3a2:	2101      	movs	r1, #1
    f3a4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f3a6:	f7fd febc 	bl	d122 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    f3aa:	b138      	cbz	r0, f3bc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
    f3ac:	7870      	ldrb	r0, [r6, #1]
    f3ae:	2802      	cmp	r0, #2
    f3b0:	d006      	beq.n	f3c0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    f3b2:	2803      	cmp	r0, #3
    f3b4:	d004      	beq.n	f3c0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    f3b6:	e00b      	b.n	f3d0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    f3b8:	2202      	movs	r2, #2
    f3ba:	e7ea      	b.n	f392 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    f3bc:	2007      	movs	r0, #7
    f3be:	e7ca      	b.n	f356 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    f3c0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f3c2:	f7fd ff13 	bl	d1ec <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    f3c6:	4602      	mov	r2, r0
    f3c8:	2101      	movs	r1, #1
    f3ca:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f3cc:	f7fd feeb 	bl	d1a6 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    f3d0:	2000      	movs	r0, #0
    f3d2:	e7c0      	b.n	f356 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

0000f3d4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    f3d4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f3d8:	4607      	mov	r7, r0
    f3da:	7845      	ldrb	r5, [r0, #1]
    f3dc:	78c6      	ldrb	r6, [r0, #3]
    f3de:	7800      	ldrb	r0, [r0, #0]
    f3e0:	2101      	movs	r1, #1
    f3e2:	f7fd fdaa 	bl	cf3a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f3e6:	0004      	movs	r4, r0
    f3e8:	d003      	beq.n	f3f2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
    f3ea:	f7fe fe0c 	bl	e006 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f3ee:	b118      	cbz	r0, f3f8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
    f3f0:	e003      	b.n	f3fa <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
    f3f2:	2042      	movs	r0, #66	; 0x42
    f3f4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f3f8:	2600      	movs	r6, #0
    f3fa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f3fc:	f7fd fefa 	bl	d1f4 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
    f400:	4430      	add	r0, r6
    f402:	b281      	uxth	r1, r0
    f404:	4688      	mov	r8, r1
    f406:	4620      	mov	r0, r4
    f408:	2201      	movs	r2, #1
    f40a:	f000 f987 	bl	f71c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa2>
    f40e:	2800      	cmp	r0, #0
    f410:	d1f0      	bne.n	f3f4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    f412:	2d04      	cmp	r5, #4
    f414:	d008      	beq.n	f428 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    f416:	2d03      	cmp	r5, #3
    f418:	d00a      	beq.n	f430 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
    f41a:	b12e      	cbz	r6, f428 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    f41c:	4620      	mov	r0, r4
    f41e:	f7fe ffc1 	bl	e3a4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    f422:	b118      	cbz	r0, f42c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
    f424:	200c      	movs	r0, #12
    f426:	e7e5      	b.n	f3f4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    f428:	2012      	movs	r0, #18
    f42a:	e7e3      	b.n	f3f4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    f42c:	2d01      	cmp	r5, #1
    f42e:	d10c      	bne.n	f44a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
    f430:	4620      	mov	r0, r4
    f432:	f7fe fde6 	bl	e002 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f436:	b108      	cbz	r0, f43c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
    f438:	2204      	movs	r2, #4
    f43a:	e002      	b.n	f442 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    f43c:	2d01      	cmp	r5, #1
    f43e:	d010      	beq.n	f462 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
    f440:	2205      	movs	r2, #5
    f442:	4668      	mov	r0, sp
    f444:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    f446:	f7fd fe39 	bl	d0bc <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    f44a:	687a      	ldr	r2, [r7, #4]
    f44c:	4633      	mov	r3, r6
    f44e:	2100      	movs	r1, #0
    f450:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f452:	f7fd fe66 	bl	d122 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    f456:	b130      	cbz	r0, f466 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
    f458:	2d02      	cmp	r5, #2
    f45a:	d006      	beq.n	f46a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    f45c:	2d03      	cmp	r5, #3
    f45e:	d004      	beq.n	f46a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    f460:	e008      	b.n	f474 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
    f462:	2206      	movs	r2, #6
    f464:	e7ed      	b.n	f442 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    f466:	2007      	movs	r0, #7
    f468:	e7c4      	b.n	f3f4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    f46a:	4642      	mov	r2, r8
    f46c:	2100      	movs	r1, #0
    f46e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f470:	f7fd fe99 	bl	d1a6 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    f474:	2000      	movs	r0, #0
    f476:	e7bd      	b.n	f3f4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

0000f478 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    f478:	b510      	push	{r4, lr}
    f47a:	4604      	mov	r4, r0
    f47c:	8880      	ldrh	r0, [r0, #4]
    f47e:	b128      	cbz	r0, f48c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    f480:	2801      	cmp	r0, #1
    f482:	d003      	beq.n	f48c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    f484:	2802      	cmp	r0, #2
    f486:	d001      	beq.n	f48c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    f488:	2012      	movs	r0, #18
    f48a:	bd10      	pop	{r4, pc}
    f48c:	78e0      	ldrb	r0, [r4, #3]
    f48e:	f000 f9dc 	bl	f84a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    f492:	b148      	cbz	r0, f4a8 <__kernel_ram_size+0x10>
    f494:	78a0      	ldrb	r0, [r4, #2]
    f496:	f000 f9d8 	bl	f84a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    f49a:	b128      	cbz	r0, f4a8 <__kernel_ram_size+0x10>
    f49c:	4620      	mov	r0, r4
    f49e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f4a2:	2101      	movs	r1, #1
    f4a4:	f000 b884 	b.w	f5b0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    f4a8:	2011      	movs	r0, #17
    f4aa:	bd10      	pop	{r4, pc}

0000f4ac <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
    f4ac:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f4ae:	460c      	mov	r4, r1
    f4b0:	4605      	mov	r5, r0
    f4b2:	8800      	ldrh	r0, [r0, #0]
    f4b4:	4669      	mov	r1, sp
    f4b6:	f7fd ff88 	bl	d3ca <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f4ba:	2800      	cmp	r0, #0
    f4bc:	d106      	bne.n	f4cc <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
    f4be:	9801      	ldr	r0, [sp, #4]
    f4c0:	8829      	ldrh	r1, [r5, #0]
    f4c2:	8021      	strh	r1, [r4, #0]
    f4c4:	f8b0 00a0 	ldrh.w	r0, [r0, #160]	; 0xa0
    f4c8:	8060      	strh	r0, [r4, #2]
    f4ca:	2000      	movs	r0, #0
    f4cc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000f4ce <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    f4ce:	b510      	push	{r4, lr}
    f4d0:	4604      	mov	r4, r0
    f4d2:	4601      	mov	r1, r0
    f4d4:	2000      	movs	r0, #0
    f4d6:	f7f5 fba7 	bl	4c28 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    f4da:	b910      	cbnz	r0, f4e2 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    f4dc:	2000      	movs	r0, #0
    f4de:	6020      	str	r0, [r4, #0]
    f4e0:	80a0      	strh	r0, [r4, #4]
    f4e2:	2000      	movs	r0, #0
    f4e4:	bd10      	pop	{r4, pc}

0000f4e6 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    f4e6:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f4e8:	8800      	ldrh	r0, [r0, #0]
    f4ea:	4669      	mov	r1, sp
    f4ec:	f7fd ff6d 	bl	d3ca <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f4f0:	b958      	cbnz	r0, f50a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
    f4f2:	4668      	mov	r0, sp
    f4f4:	f000 fa47 	bl	f986 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30c>
    f4f8:	b138      	cbz	r0, f50a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
    f4fa:	9c01      	ldr	r4, [sp, #4]
    f4fc:	f894 11b4 	ldrb.w	r1, [r4, #436]	; 0x1b4
    f500:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
    f504:	3470      	adds	r4, #112	; 0x70
    f506:	b929      	cbnz	r1, f514 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2e>
    f508:	e001      	b.n	f50e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    f50a:	2002      	movs	r0, #2
    f50c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f50e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    f512:	b109      	cbz	r1, f518 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x32>
    f514:	203a      	movs	r0, #58	; 0x3a
    f516:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f518:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
    f51c:	f04f 0501 	mov.w	r5, #1
    f520:	0789      	lsls	r1, r1, #30
    f522:	d103      	bne.n	f52c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x46>
    f524:	7005      	strb	r5, [r0, #0]
    f526:	4668      	mov	r0, sp
    f528:	f7fe fae7 	bl	dafa <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    f52c:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
    f530:	2000      	movs	r0, #0
    f532:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000f534 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
    f534:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f536:	460c      	mov	r4, r1
    f538:	4605      	mov	r5, r0
    f53a:	8800      	ldrh	r0, [r0, #0]
    f53c:	4669      	mov	r1, sp
    f53e:	f7fd ff44 	bl	d3ca <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f542:	b108      	cbz	r0, f548 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
    f544:	2002      	movs	r0, #2
    f546:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f548:	78a8      	ldrb	r0, [r5, #2]
    f54a:	b130      	cbz	r0, f55a <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
    f54c:	f000 f9f6 	bl	f93c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c2>
    f550:	70a0      	strb	r0, [r4, #2]
    f552:	8828      	ldrh	r0, [r5, #0]
    f554:	8020      	strh	r0, [r4, #0]
    f556:	2000      	movs	r0, #0
    f558:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f55a:	9801      	ldr	r0, [sp, #4]
    f55c:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    f560:	e7f6      	b.n	f550 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0000f562 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    f562:	b510      	push	{r4, lr}
    f564:	f7fa ff26 	bl	a3b4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    f568:	2000      	movs	r0, #0
    f56a:	bd10      	pop	{r4, pc}

0000f56c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
    f56c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f570:	4604      	mov	r4, r0
    f572:	8840      	ldrh	r0, [r0, #2]
    f574:	460d      	mov	r5, r1
    f576:	b1b8      	cbz	r0, f5a8 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
    f578:	8820      	ldrh	r0, [r4, #0]
    f57a:	4669      	mov	r1, sp
    f57c:	f7fd ff25 	bl	d3ca <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f580:	2800      	cmp	r0, #0
    f582:	d10f      	bne.n	f5a4 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
    f584:	8820      	ldrh	r0, [r4, #0]
    f586:	8028      	strh	r0, [r5, #0]
    f588:	9e01      	ldr	r6, [sp, #4]
    f58a:	f106 050c 	add.w	r5, r6, #12
    f58e:	3670      	adds	r6, #112	; 0x70
    f590:	682f      	ldr	r7, [r5, #0]
    f592:	8862      	ldrh	r2, [r4, #2]
    f594:	4639      	mov	r1, r7
    f596:	4630      	mov	r0, r6
    f598:	f7fe f858 	bl	d64c <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
    f59c:	6828      	ldr	r0, [r5, #0]
    f59e:	42b8      	cmp	r0, r7
    f5a0:	d1f6      	bne.n	f590 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
    f5a2:	2000      	movs	r0, #0
    f5a4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f5a8:	2012      	movs	r0, #18
    f5aa:	e7fb      	b.n	f5a4 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

0000f5ac <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    f5ac:	f7fa bcda 	b.w	9f64 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0000f5b0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    f5b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f5b4:	b086      	sub	sp, #24
    f5b6:	468a      	mov	sl, r1
    f5b8:	4606      	mov	r6, r0
    f5ba:	8800      	ldrh	r0, [r0, #0]
    f5bc:	a901      	add	r1, sp, #4
    f5be:	f7fd ff04 	bl	d3ca <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f5c2:	2800      	cmp	r0, #0
    f5c4:	d138      	bne.n	f638 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    f5c6:	9802      	ldr	r0, [sp, #8]
    f5c8:	f04f 0800 	mov.w	r8, #0
    f5cc:	4601      	mov	r1, r0
    f5ce:	4689      	mov	r9, r1
    f5d0:	f890 11fc 	ldrb.w	r1, [r0, #508]	; 0x1fc
    f5d4:	f88d 1000 	strb.w	r1, [sp]
    f5d8:	9900      	ldr	r1, [sp, #0]
    f5da:	9100      	str	r1, [sp, #0]
    f5dc:	f89d 5000 	ldrb.w	r5, [sp]
    f5e0:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    f5e4:	3070      	adds	r0, #112	; 0x70
    f5e6:	2921      	cmp	r1, #33	; 0x21
    f5e8:	d100      	bne.n	f5ec <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3c>
    f5ea:	b13d      	cbz	r5, f5fc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
    f5ec:	2400      	movs	r4, #0
    f5ee:	304c      	adds	r0, #76	; 0x4c
    f5f0:	2108      	movs	r1, #8
    f5f2:	4607      	mov	r7, r0
    f5f4:	f7ff fae8 	bl	ebc8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    f5f8:	b110      	cbz	r0, f600 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x50>
    f5fa:	e007      	b.n	f60c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    f5fc:	2401      	movs	r4, #1
    f5fe:	e7f6      	b.n	f5ee <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3e>
    f600:	210b      	movs	r1, #11
    f602:	4638      	mov	r0, r7
    f604:	f7ff fae0 	bl	ebc8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    f608:	b900      	cbnz	r0, f60c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    f60a:	b1a4      	cbz	r4, f636 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x86>
    f60c:	a804      	add	r0, sp, #16
    f60e:	9000      	str	r0, [sp, #0]
    f610:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f614:	ab03      	add	r3, sp, #12
    f616:	4632      	mov	r2, r6
    f618:	4649      	mov	r1, r9
    f61a:	f000 f96f 	bl	f8fc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x282>
    f61e:	0007      	movs	r7, r0
    f620:	d10a      	bne.n	f638 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    f622:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f626:	9c02      	ldr	r4, [sp, #8]
    f628:	b148      	cbz	r0, f63e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
    f62a:	f504 74d7 	add.w	r4, r4, #430	; 0x1ae
    f62e:	2001      	movs	r0, #1
    f630:	7060      	strb	r0, [r4, #1]
    f632:	b94d      	cbnz	r5, f648 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x98>
    f634:	e006      	b.n	f644 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x94>
    f636:	201a      	movs	r0, #26
    f638:	b006      	add	sp, #24
    f63a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f63e:	f504 7497 	add.w	r4, r4, #302	; 0x12e
    f642:	e7f4      	b.n	f62e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x7e>
    f644:	7820      	ldrb	r0, [r4, #0]
    f646:	b108      	cbz	r0, f64c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9c>
    f648:	273a      	movs	r7, #58	; 0x3a
    f64a:	e012      	b.n	f672 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc2>
    f64c:	f884 a000 	strb.w	sl, [r4]
    f650:	f89d 000c 	ldrb.w	r0, [sp, #12]
    f654:	70a0      	strb	r0, [r4, #2]
    f656:	f89d 1010 	ldrb.w	r1, [sp, #16]
    f65a:	70e1      	strb	r1, [r4, #3]
    f65c:	f88d 0000 	strb.w	r0, [sp]
    f660:	f88d 1001 	strb.w	r1, [sp, #1]
    f664:	88b0      	ldrh	r0, [r6, #4]
    f666:	f8ad 0002 	strh.w	r0, [sp, #2]
    f66a:	4669      	mov	r1, sp
    f66c:	4648      	mov	r0, r9
    f66e:	f7fd ff6b 	bl	d548 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    f672:	f884 8001 	strb.w	r8, [r4, #1]
    f676:	4638      	mov	r0, r7
    f678:	e7de      	b.n	f638 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>

0000f67a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
    f67a:	b510      	push	{r4, lr}
    f67c:	2008      	movs	r0, #8
    f67e:	f7fa ff03 	bl	a488 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    f682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f686:	f7f8 bc7b 	b.w	7f80 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
    f68a:	f44f 71a4 	mov.w	r1, #328	; 0x148
    f68e:	4288      	cmp	r0, r1
    f690:	d303      	bcc.n	f69a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20>
    f692:	f640 0148 	movw	r1, #2120	; 0x848
    f696:	4288      	cmp	r0, r1
    f698:	d300      	bcc.n	f69c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22>
    f69a:	4608      	mov	r0, r1
    f69c:	4770      	bx	lr
    f69e:	07c1      	lsls	r1, r0, #31
    f6a0:	d001      	beq.n	f6a6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c>
    f6a2:	2001      	movs	r0, #1
    f6a4:	4770      	bx	lr
    f6a6:	0780      	lsls	r0, r0, #30
    f6a8:	d501      	bpl.n	f6ae <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x34>
    f6aa:	2002      	movs	r0, #2
    f6ac:	4770      	bx	lr
    f6ae:	2000      	movs	r0, #0
    f6b0:	4770      	bx	lr
    f6b2:	b510      	push	{r4, lr}
    f6b4:	2801      	cmp	r0, #1
    f6b6:	d006      	beq.n	f6c6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
    f6b8:	2802      	cmp	r0, #2
    f6ba:	d004      	beq.n	f6c6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
    f6bc:	f240 2163 	movw	r1, #611	; 0x263
    f6c0:	2006      	movs	r0, #6
    f6c2:	f7f4 fbb3 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f6c6:	bd10      	pop	{r4, pc}
    f6c8:	b50e      	push	{r1, r2, r3, lr}
    f6ca:	4669      	mov	r1, sp
    f6cc:	2001      	movs	r0, #1
    f6ce:	f7fd fc3e 	bl	cf4e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    f6d2:	b150      	cbz	r0, f6ea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
    f6d4:	f240 114f 	movw	r1, #335	; 0x14f
    f6d8:	2039      	movs	r0, #57	; 0x39
    f6da:	f7f4 fba7 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f6de:	9802      	ldr	r0, [sp, #8]
    f6e0:	f7fe fe60 	bl	e3a4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    f6e4:	b108      	cbz	r0, f6ea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
    f6e6:	2001      	movs	r0, #1
    f6e8:	bd0e      	pop	{r1, r2, r3, pc}
    f6ea:	4668      	mov	r0, sp
    f6ec:	f7f4 fdd6 	bl	429c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    f6f0:	2800      	cmp	r0, #0
    f6f2:	d0f4      	beq.n	f6de <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x64>
    f6f4:	2000      	movs	r0, #0
    f6f6:	bd0e      	pop	{r1, r2, r3, pc}
    f6f8:	b510      	push	{r4, lr}
    f6fa:	f7ff ffe5 	bl	f6c8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
    f6fe:	b158      	cbz	r0, f718 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9e>
    f700:	f000 f958 	bl	f9b4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
    f704:	4604      	mov	r4, r0
    f706:	f7fe fc7e 	bl	e006 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f70a:	b918      	cbnz	r0, f714 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9a>
    f70c:	4620      	mov	r0, r4
    f70e:	f7fe fc70 	bl	dff2 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    f712:	b108      	cbz	r0, f718 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9e>
    f714:	2000      	movs	r0, #0
    f716:	bd10      	pop	{r4, pc}
    f718:	2001      	movs	r0, #1
    f71a:	bd10      	pop	{r4, pc}
    f71c:	b570      	push	{r4, r5, r6, lr}
    f71e:	460c      	mov	r4, r1
    f720:	4605      	mov	r5, r0
    f722:	b112      	cbz	r2, f72a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xb0>
    f724:	291f      	cmp	r1, #31
    f726:	d80c      	bhi.n	f742 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xc8>
    f728:	e016      	b.n	f758 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xde>
    f72a:	f7f5 f87d 	bl	4828 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
    f72e:	42a0      	cmp	r0, r4
    f730:	d201      	bcs.n	f736 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xbc>
    f732:	2007      	movs	r0, #7
    f734:	bd70      	pop	{r4, r5, r6, pc}
    f736:	4628      	mov	r0, r5
    f738:	f7fe fc63 	bl	e002 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f73c:	b118      	cbz	r0, f746 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xcc>
    f73e:	2c1f      	cmp	r4, #31
    f740:	d901      	bls.n	f746 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xcc>
    f742:	2012      	movs	r0, #18
    f744:	bd70      	pop	{r4, r5, r6, pc}
    f746:	4628      	mov	r0, r5
    f748:	f7fe fc64 	bl	e014 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    f74c:	b130      	cbz	r0, f75c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xe2>
    f74e:	4621      	mov	r1, r4
    f750:	4628      	mov	r0, r5
    f752:	f7fe fc2b 	bl	dfac <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
    f756:	b118      	cbz	r0, f760 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xe6>
    f758:	2000      	movs	r0, #0
    f75a:	bd70      	pop	{r4, r5, r6, pc}
    f75c:	2042      	movs	r0, #66	; 0x42
    f75e:	bd70      	pop	{r4, r5, r6, pc}
    f760:	2045      	movs	r0, #69	; 0x45
    f762:	bd70      	pop	{r4, r5, r6, pc}
    f764:	b510      	push	{r4, lr}
    f766:	4604      	mov	r4, r0
    f768:	7840      	ldrb	r0, [r0, #1]
    f76a:	06c1      	lsls	r1, r0, #27
    f76c:	d51c      	bpl.n	f7a8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
    f76e:	07c0      	lsls	r0, r0, #31
    f770:	d00b      	beq.n	f78a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
    f772:	f7fa fe5d 	bl	a430 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
    f776:	b1b8      	cbz	r0, f7a8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
    f778:	7860      	ldrb	r0, [r4, #1]
    f77a:	06c1      	lsls	r1, r0, #27
    f77c:	d405      	bmi.n	f78a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
    f77e:	0700      	lsls	r0, r0, #28
    f780:	d503      	bpl.n	f78a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
    f782:	7d20      	ldrb	r0, [r4, #20]
    f784:	2802      	cmp	r0, #2
    f786:	d10f      	bne.n	f7a8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
    f788:	e010      	b.n	f7ac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
    f78a:	7d20      	ldrb	r0, [r4, #20]
    f78c:	2802      	cmp	r0, #2
    f78e:	d001      	beq.n	f794 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x11a>
    f790:	7ea0      	ldrb	r0, [r4, #26]
    f792:	b948      	cbnz	r0, f7a8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
    f794:	7860      	ldrb	r0, [r4, #1]
    f796:	0700      	lsls	r0, r0, #28
    f798:	d408      	bmi.n	f7ac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
    f79a:	f8d4 0005 	ldr.w	r0, [r4, #5]
    f79e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    f7a2:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
    f7a6:	d201      	bcs.n	f7ac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
    f7a8:	2011      	movs	r0, #17
    f7aa:	bd10      	pop	{r4, pc}
    f7ac:	2000      	movs	r0, #0
    f7ae:	bd10      	pop	{r4, pc}
    f7b0:	b538      	push	{r3, r4, r5, lr}
    f7b2:	4604      	mov	r4, r0
    f7b4:	7800      	ldrb	r0, [r0, #0]
    f7b6:	28ef      	cmp	r0, #239	; 0xef
    f7b8:	d843      	bhi.n	f842 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f7ba:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    f7be:	f8ad 0000 	strh.w	r0, [sp]
    f7c2:	9800      	ldr	r0, [sp, #0]
    f7c4:	f000 f951 	bl	fa6a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3f0>
    f7c8:	b3a0      	cbz	r0, f834 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ba>
    f7ca:	7861      	ldrb	r1, [r4, #1]
    f7cc:	0708      	lsls	r0, r1, #28
    f7ce:	d40b      	bmi.n	f7e8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x16e>
    f7d0:	f8d4 0002 	ldr.w	r0, [r4, #2]
    f7d4:	f8d4 3005 	ldr.w	r3, [r4, #5]
    f7d8:	0a02      	lsrs	r2, r0, #8
    f7da:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
    f7de:	d830      	bhi.n	f842 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f7e0:	2220      	movs	r2, #32
    f7e2:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
    f7e6:	d82c      	bhi.n	f842 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f7e8:	7a60      	ldrb	r0, [r4, #9]
    f7ea:	b318      	cbz	r0, f834 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ba>
    f7ec:	2807      	cmp	r0, #7
    f7ee:	d828      	bhi.n	f842 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f7f0:	7aa0      	ldrb	r0, [r4, #10]
    f7f2:	b128      	cbz	r0, f800 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
    f7f4:	2801      	cmp	r0, #1
    f7f6:	d003      	beq.n	f800 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
    f7f8:	2802      	cmp	r0, #2
    f7fa:	d001      	beq.n	f800 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
    f7fc:	2803      	cmp	r0, #3
    f7fe:	d120      	bne.n	f842 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f800:	074a      	lsls	r2, r1, #29
    f802:	d403      	bmi.n	f80c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x192>
    f804:	2802      	cmp	r0, #2
    f806:	d001      	beq.n	f80c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x192>
    f808:	2803      	cmp	r0, #3
    f80a:	d105      	bne.n	f818 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19e>
    f80c:	7ae0      	ldrb	r0, [r4, #11]
    f80e:	b108      	cbz	r0, f814 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19a>
    f810:	2801      	cmp	r0, #1
    f812:	d116      	bne.n	f842 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f814:	0748      	lsls	r0, r1, #29
    f816:	d407      	bmi.n	f828 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
    f818:	7ca0      	ldrb	r0, [r4, #18]
    f81a:	b128      	cbz	r0, f828 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
    f81c:	2801      	cmp	r0, #1
    f81e:	d003      	beq.n	f828 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
    f820:	2802      	cmp	r0, #2
    f822:	d001      	beq.n	f828 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
    f824:	2803      	cmp	r0, #3
    f826:	d10c      	bne.n	f842 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f828:	06c8      	lsls	r0, r1, #27
    f82a:	7d20      	ldrb	r0, [r4, #20]
    f82c:	d503      	bpl.n	f836 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1bc>
    f82e:	2801      	cmp	r0, #1
    f830:	d107      	bne.n	f842 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f832:	e002      	b.n	f83a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c0>
    f834:	e005      	b.n	f842 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f836:	2802      	cmp	r0, #2
    f838:	d003      	beq.n	f842 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f83a:	7e20      	ldrb	r0, [r4, #24]
    f83c:	b118      	cbz	r0, f846 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1cc>
    f83e:	2801      	cmp	r0, #1
    f840:	d001      	beq.n	f846 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1cc>
    f842:	2012      	movs	r0, #18
    f844:	bd38      	pop	{r3, r4, r5, pc}
    f846:	2000      	movs	r0, #0
    f848:	bd38      	pop	{r3, r4, r5, pc}
    f84a:	b510      	push	{r4, lr}
    f84c:	0004      	movs	r4, r0
    f84e:	d005      	beq.n	f85c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e2>
    f850:	f7fa fe2a 	bl	a4a8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f854:	4384      	bics	r4, r0
    f856:	d001      	beq.n	f85c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e2>
    f858:	2000      	movs	r0, #0
    f85a:	bd10      	pop	{r4, pc}
    f85c:	2001      	movs	r0, #1
    f85e:	bd10      	pop	{r4, pc}
    f860:	28fb      	cmp	r0, #251	; 0xfb
    f862:	d803      	bhi.n	f86c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f2>
    f864:	f640 0048 	movw	r0, #2120	; 0x848
    f868:	4281      	cmp	r1, r0
    f86a:	d901      	bls.n	f870 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
    f86c:	2011      	movs	r0, #17
    f86e:	4770      	bx	lr
    f870:	2000      	movs	r0, #0
    f872:	4770      	bx	lr
    f874:	381b      	subs	r0, #27
    f876:	28e1      	cmp	r0, #225	; 0xe1
    f878:	d206      	bcs.n	f888 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
    f87a:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
    f87e:	d303      	bcc.n	f888 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
    f880:	f244 2090 	movw	r0, #17040	; 0x4290
    f884:	4281      	cmp	r1, r0
    f886:	d901      	bls.n	f88c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x212>
    f888:	2012      	movs	r0, #18
    f88a:	4770      	bx	lr
    f88c:	2000      	movs	r0, #0
    f88e:	4770      	bx	lr
    f890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f894:	4606      	mov	r6, r0
    f896:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
    f89a:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
    f89e:	4615      	mov	r5, r2
    f8a0:	302c      	adds	r0, #44	; 0x2c
    f8a2:	f7f7 fdf9 	bl	7498 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
    f8a6:	4680      	mov	r8, r0
    f8a8:	2102      	movs	r1, #2
    f8aa:	f7fd fe1e 	bl	d4ea <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    f8ae:	4287      	cmp	r7, r0
    f8b0:	d200      	bcs.n	f8b4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x23a>
    f8b2:	4638      	mov	r0, r7
    f8b4:	4607      	mov	r7, r0
    f8b6:	2102      	movs	r1, #2
    f8b8:	4640      	mov	r0, r8
    f8ba:	f7fd fe16 	bl	d4ea <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    f8be:	4284      	cmp	r4, r0
    f8c0:	d200      	bcs.n	f8c4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24a>
    f8c2:	4620      	mov	r0, r4
    f8c4:	8831      	ldrh	r1, [r6, #0]
    f8c6:	8029      	strh	r1, [r5, #0]
    f8c8:	2f1b      	cmp	r7, #27
    f8ca:	d913      	bls.n	f8f4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x27a>
    f8cc:	2ffb      	cmp	r7, #251	; 0xfb
    f8ce:	d300      	bcc.n	f8d2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x258>
    f8d0:	27fb      	movs	r7, #251	; 0xfb
    f8d2:	806f      	strh	r7, [r5, #2]
    f8d4:	281b      	cmp	r0, #27
    f8d6:	d90f      	bls.n	f8f8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x27e>
    f8d8:	28fb      	cmp	r0, #251	; 0xfb
    f8da:	d300      	bcc.n	f8de <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x264>
    f8dc:	20fb      	movs	r0, #251	; 0xfb
    f8de:	80e8      	strh	r0, [r5, #6]
    f8e0:	4640      	mov	r0, r8
    f8e2:	f7ff fed2 	bl	f68a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
    f8e6:	80a8      	strh	r0, [r5, #4]
    f8e8:	4640      	mov	r0, r8
    f8ea:	f7ff fece 	bl	f68a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
    f8ee:	8128      	strh	r0, [r5, #8]
    f8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f8f4:	271b      	movs	r7, #27
    f8f6:	e7ec      	b.n	f8d2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x258>
    f8f8:	201b      	movs	r0, #27
    f8fa:	e7f0      	b.n	f8de <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x264>
    f8fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f900:	7890      	ldrb	r0, [r2, #2]
    f902:	9e06      	ldr	r6, [sp, #24]
    f904:	461d      	mov	r5, r3
    f906:	4614      	mov	r4, r2
    f908:	b908      	cbnz	r0, f90e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x294>
    f90a:	f7fa fdcd 	bl	a4a8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f90e:	78e4      	ldrb	r4, [r4, #3]
    f910:	4607      	mov	r7, r0
    f912:	b914      	cbnz	r4, f91a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a0>
    f914:	f7fa fdc8 	bl	a4a8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f918:	4604      	mov	r4, r0
    f91a:	b16f      	cbz	r7, f938 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
    f91c:	b164      	cbz	r4, f938 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
    f91e:	4638      	mov	r0, r7
    f920:	f7ff febd 	bl	f69e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
    f924:	4620      	mov	r0, r4
    f926:	f7ff feba 	bl	f69e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
    f92a:	b12f      	cbz	r7, f938 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
    f92c:	b124      	cbz	r4, f938 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
    f92e:	702f      	strb	r7, [r5, #0]
    f930:	7034      	strb	r4, [r6, #0]
    f932:	2000      	movs	r0, #0
    f934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f938:	2009      	movs	r0, #9
    f93a:	e7fb      	b.n	f934 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2ba>
    f93c:	b510      	push	{r4, lr}
    f93e:	f7fc fa88 	bl	be52 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    f942:	b928      	cbnz	r0, f950 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2d6>
    f944:	f7fc fabb 	bl	bebe <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    f948:	b910      	cbnz	r0, f950 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2d6>
    f94a:	f7fc fac2 	bl	bed2 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    f94e:	b108      	cbz	r0, f954 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2da>
    f950:	2008      	movs	r0, #8
    f952:	bd10      	pop	{r4, pc}
    f954:	f7fc fa52 	bl	bdfc <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    f958:	b940      	cbnz	r0, f96c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
    f95a:	f7fc fa59 	bl	be10 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    f95e:	b928      	cbnz	r0, f96c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
    f960:	f7fc fa6d 	bl	be3e <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    f964:	b910      	cbnz	r0, f96c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
    f966:	f7fc fa7e 	bl	be66 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    f96a:	b108      	cbz	r0, f970 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f6>
    f96c:	2004      	movs	r0, #4
    f96e:	bd10      	pop	{r4, pc}
    f970:	f240 519c 	movw	r1, #1436	; 0x59c
    f974:	2039      	movs	r0, #57	; 0x39
    f976:	f7f4 fa59 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f97a:	b510      	push	{r4, lr}
    f97c:	f7fa fd8e 	bl	a49c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f980:	f3c0 1040 	ubfx	r0, r0, #5, #1
    f984:	bd10      	pop	{r4, pc}
    f986:	6840      	ldr	r0, [r0, #4]
    f988:	f000 b800 	b.w	f98c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x312>
    f98c:	b508      	push	{r3, lr}
    f98e:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    f992:	f890 0094 	ldrb.w	r0, [r0, #148]	; 0x94
    f996:	f88d 0000 	strb.w	r0, [sp]
    f99a:	9800      	ldr	r0, [sp, #0]
    f99c:	9000      	str	r0, [sp, #0]
    f99e:	f89d 0000 	ldrb.w	r0, [sp]
    f9a2:	1e40      	subs	r0, r0, #1
    f9a4:	4208      	tst	r0, r1
    f9a6:	d003      	beq.n	f9b0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x336>
    f9a8:	2904      	cmp	r1, #4
    f9aa:	d001      	beq.n	f9b0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x336>
    f9ac:	2001      	movs	r0, #1
    f9ae:	bd08      	pop	{r3, pc}
    f9b0:	2000      	movs	r0, #0
    f9b2:	bd08      	pop	{r3, pc}
    f9b4:	b510      	push	{r4, lr}
    f9b6:	2101      	movs	r1, #1
    f9b8:	2000      	movs	r0, #0
    f9ba:	f7fd fabe 	bl	cf3a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f9be:	0004      	movs	r4, r0
    f9c0:	d108      	bne.n	f9d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35a>
    f9c2:	2200      	movs	r2, #0
    f9c4:	2101      	movs	r1, #1
    f9c6:	4610      	mov	r0, r2
    f9c8:	f7fd faad 	bl	cf26 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    f9cc:	0004      	movs	r4, r0
    f9ce:	d003      	beq.n	f9d8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35e>
    f9d0:	f7fe fab4 	bl	df3c <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    f9d4:	4620      	mov	r0, r4
    f9d6:	bd10      	pop	{r4, pc}
    f9d8:	f240 2135 	movw	r1, #565	; 0x235
    f9dc:	2039      	movs	r0, #57	; 0x39
    f9de:	f7f4 fa25 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f9e2:	b510      	push	{r4, lr}
    f9e4:	f7ff fe70 	bl	f6c8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
    f9e8:	2800      	cmp	r0, #0
    f9ea:	d000      	beq.n	f9ee <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x374>
    f9ec:	2001      	movs	r0, #1
    f9ee:	bd10      	pop	{r4, pc}
    f9f0:	b570      	push	{r4, r5, r6, lr}
    f9f2:	4605      	mov	r5, r0
    f9f4:	f7fe fb0e 	bl	e014 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    f9f8:	b170      	cbz	r0, fa18 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x39e>
    f9fa:	4628      	mov	r0, r5
    f9fc:	f7fe fcd2 	bl	e3a4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    fa00:	2800      	cmp	r0, #0
    fa02:	d008      	beq.n	fa16 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x39c>
    fa04:	4628      	mov	r0, r5
    fa06:	f7fe fcca 	bl	e39e <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
    fa0a:	4604      	mov	r4, r0
    fa0c:	4628      	mov	r0, r5
    fa0e:	f7fe fca0 	bl	e352 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    fa12:	b118      	cbz	r0, fa1c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3a2>
    fa14:	200c      	movs	r0, #12
    fa16:	bd70      	pop	{r4, r5, r6, pc}
    fa18:	2042      	movs	r0, #66	; 0x42
    fa1a:	bd70      	pop	{r4, r5, r6, pc}
    fa1c:	b164      	cbz	r4, fa38 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3be>
    fa1e:	8820      	ldrh	r0, [r4, #0]
    fa20:	f7fd fc13 	bl	d24a <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    fa24:	8820      	ldrh	r0, [r4, #0]
    fa26:	2100      	movs	r1, #0
    fa28:	f7f4 fc88 	bl	433c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    fa2c:	b120      	cbz	r0, fa38 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3be>
    fa2e:	f241 41ca 	movw	r1, #5322	; 0x14ca
    fa32:	2039      	movs	r0, #57	; 0x39
    fa34:	f7f4 f9fa 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fa38:	2000      	movs	r0, #0
    fa3a:	bd70      	pop	{r4, r5, r6, pc}
    fa3c:	b530      	push	{r4, r5, lr}
    fa3e:	f340 0400 	sbfx	r4, r0, #0, #1
    fa42:	f340 0040 	sbfx	r0, r0, #1, #1
    fa46:	1c40      	adds	r0, r0, #1
    fa48:	9d03      	ldr	r5, [sp, #12]
    fa4a:	1c64      	adds	r4, r4, #1
    fa4c:	d000      	beq.n	fa50 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d6>
    fa4e:	b119      	cbz	r1, fa58 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3de>
    fa50:	b100      	cbz	r0, fa54 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3da>
    fa52:	b10a      	cbz	r2, fa58 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3de>
    fa54:	b91c      	cbnz	r4, fa5e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3e4>
    fa56:	e001      	b.n	fa5c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3e2>
    fa58:	2011      	movs	r0, #17
    fa5a:	bd30      	pop	{r4, r5, pc}
    fa5c:	2100      	movs	r1, #0
    fa5e:	7019      	strb	r1, [r3, #0]
    fa60:	b900      	cbnz	r0, fa64 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3ea>
    fa62:	2200      	movs	r2, #0
    fa64:	702a      	strb	r2, [r5, #0]
    fa66:	2000      	movs	r0, #0
    fa68:	bd30      	pop	{r4, r5, pc}
    fa6a:	b2c0      	uxtb	r0, r0
    fa6c:	06c1      	lsls	r1, r0, #27
    fa6e:	d40c      	bmi.n	fa8a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x410>
    fa70:	0681      	lsls	r1, r0, #26
    fa72:	ea4f 71c0 	mov.w	r1, r0, lsl #31
    fa76:	d503      	bpl.n	fa80 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x406>
    fa78:	b9d1      	cbnz	r1, fab0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    fa7a:	0781      	lsls	r1, r0, #30
    fa7c:	d418      	bmi.n	fab0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    fa7e:	e001      	b.n	fa84 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x40a>
    fa80:	2900      	cmp	r1, #0
    fa82:	d1fa      	bne.n	fa7a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x400>
    fa84:	0700      	lsls	r0, r0, #28
    fa86:	d413      	bmi.n	fab0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    fa88:	e010      	b.n	faac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x432>
    fa8a:	0641      	lsls	r1, r0, #25
    fa8c:	d410      	bmi.n	fab0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    fa8e:	0681      	lsls	r1, r0, #26
    fa90:	d40e      	bmi.n	fab0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    fa92:	07c1      	lsls	r1, r0, #31
    fa94:	ea4f 7180 	mov.w	r1, r0, lsl #30
    fa98:	d004      	beq.n	faa4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x42a>
    fa9a:	2900      	cmp	r1, #0
    fa9c:	db02      	blt.n	faa4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x42a>
    fa9e:	0740      	lsls	r0, r0, #29
    faa0:	d404      	bmi.n	faac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x432>
    faa2:	e005      	b.n	fab0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    faa4:	0701      	lsls	r1, r0, #28
    faa6:	d403      	bmi.n	fab0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    faa8:	0740      	lsls	r0, r0, #29
    faaa:	d401      	bmi.n	fab0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    faac:	2001      	movs	r0, #1
    faae:	4770      	bx	lr
    fab0:	2000      	movs	r0, #0
    fab2:	4770      	bx	lr
    fab4:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    fab6:	4669      	mov	r1, sp
    fab8:	2001      	movs	r0, #1
    faba:	f7fd fa48 	bl	cf4e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    fabe:	b178      	cbz	r0, fae0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x466>
    fac0:	f240 116d 	movw	r1, #365	; 0x16d
    fac4:	2039      	movs	r0, #57	; 0x39
    fac6:	f7f4 f9b1 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    faca:	9c02      	ldr	r4, [sp, #8]
    facc:	4620      	mov	r0, r4
    face:	f7fe fc69 	bl	e3a4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    fad2:	b128      	cbz	r0, fae0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x466>
    fad4:	4620      	mov	r0, r4
    fad6:	f7fe facb 	bl	e070 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    fada:	b108      	cbz	r0, fae0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x466>
    fadc:	2001      	movs	r0, #1
    fade:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fae0:	4668      	mov	r0, sp
    fae2:	f7f4 fbdb 	bl	429c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    fae6:	2800      	cmp	r0, #0
    fae8:	d0ef      	beq.n	faca <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x450>
    faea:	2000      	movs	r0, #0
    faec:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000faee <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
    faee:	6802      	ldr	r2, [r0, #0]
    faf0:	b912      	cbnz	r2, faf8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
    faf2:	6001      	str	r1, [r0, #0]
    faf4:	4770      	bx	lr
    faf6:	4602      	mov	r2, r0
    faf8:	6850      	ldr	r0, [r2, #4]
    fafa:	b108      	cbz	r0, fb00 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x12>
    fafc:	428a      	cmp	r2, r1
    fafe:	d1fa      	bne.n	faf6 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
    fb00:	428a      	cmp	r2, r1
    fb02:	d0f7      	beq.n	faf4 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6>
    fb04:	6051      	str	r1, [r2, #4]
    fb06:	4770      	bx	lr
    fb08:	b510      	push	{r4, lr}
    fb0a:	f7fe fc4e 	bl	e3aa <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    fb0e:	b108      	cbz	r0, fb14 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x26>
    fb10:	21d9      	movs	r1, #217	; 0xd9
    fb12:	e003      	b.n	fb1c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x2e>
    fb14:	f7f6 fe4e 	bl	67b4 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    fb18:	b118      	cbz	r0, fb22 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x34>
    fb1a:	21de      	movs	r1, #222	; 0xde
    fb1c:	2001      	movs	r0, #1
    fb1e:	f7f4 f985 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fb22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fb26:	2001      	movs	r0, #1
    fb28:	f7f4 bb4e 	b.w	41c8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    fb2c:	b510      	push	{r4, lr}
    fb2e:	4604      	mov	r4, r0
    fb30:	e002      	b.n	fb38 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x4a>
    fb32:	6820      	ldr	r0, [r4, #0]
    fb34:	4780      	blx	r0
    fb36:	6864      	ldr	r4, [r4, #4]
    fb38:	2c00      	cmp	r4, #0
    fb3a:	d1fa      	bne.n	fb32 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x44>
    fb3c:	bd10      	pop	{r4, pc}
    fb3e:	b510      	push	{r4, lr}
    fb40:	2000      	movs	r0, #0
    fb42:	f7f4 fb41 	bl	41c8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    fb46:	f7f4 fd77 	bl	4638 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
    fb4a:	f7f5 f84f 	bl	4bec <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
    fb4e:	f7f5 fa3d 	bl	4fcc <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    fb52:	2800      	cmp	r0, #0
    fb54:	d003      	beq.n	fb5e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x70>
    fb56:	21b8      	movs	r1, #184	; 0xb8
    fb58:	2001      	movs	r0, #1
    fb5a:	f7f4 f967 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fb5e:	bd10      	pop	{r4, pc}
    fb60:	b510      	push	{r4, lr}
    fb62:	f7ff ffd1 	bl	fb08 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    fb66:	f7fe ffef 	bl	eb48 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
    fb6a:	2800      	cmp	r0, #0
    fb6c:	d003      	beq.n	fb76 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x88>
    fb6e:	21f5      	movs	r1, #245	; 0xf5
    fb70:	2001      	movs	r0, #1
    fb72:	f7f4 f95b 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fb76:	bd10      	pop	{r4, pc}

0000fb78 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
    fb78:	f7f3 bdb4 	b.w	36e4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    fb7c:	000b0001 	.word	0x000b0001
    fb80:	000a0002 	.word	0x000a0002
    fb84:	00090005 	.word	0x00090005
    fb88:	0008000a 	.word	0x0008000a
    fb8c:	00070014 	.word	0x00070014
    fb90:	0006001e 	.word	0x0006001e
    fb94:	00050032 	.word	0x00050032
    fb98:	0004004b 	.word	0x0004004b
    fb9c:	00030064 	.word	0x00030064
    fba0:	00020096 	.word	0x00020096
    fba4:	000100fa 	.word	0x000100fa
    fba8:	000001f4 	.word	0x000001f4

0000fbac <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
    fbac:	b510      	push	{r4, lr}
    fbae:	f7fb f86f 	bl	ac90 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
    fbb2:	f000 f850 	bl	fc56 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
    fbb6:	f7fa fce5 	bl	a584 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
    fbba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fbbe:	f7fa bde3 	b.w	a788 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0000fbc2 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    fbc2:	b510      	push	{r4, lr}
    fbc4:	24c8      	movs	r4, #200	; 0xc8
    fbc6:	1e64      	subs	r4, r4, #1
    fbc8:	b2e4      	uxtb	r4, r4
    fbca:	f7fa fcf9 	bl	a5c0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    fbce:	2802      	cmp	r0, #2
    fbd0:	d003      	beq.n	fbda <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
    fbd2:	2801      	cmp	r0, #1
    fbd4:	d000      	beq.n	fbd8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
    fbd6:	2000      	movs	r0, #0
    fbd8:	bd10      	pop	{r4, pc}
    fbda:	2c00      	cmp	r4, #0
    fbdc:	d1f3      	bne.n	fbc6 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
    fbde:	2193      	movs	r1, #147	; 0x93
    fbe0:	203b      	movs	r0, #59	; 0x3b
    fbe2:	f7f4 f923 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000fbe6 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>:
    fbe6:	b510      	push	{r4, lr}
    fbe8:	f7f3 ffea 	bl	3bc0 <mpsl_fem_lna_configuration_clear>
    fbec:	2800      	cmp	r0, #0
    fbee:	d005      	beq.n	fbfc <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    fbf0:	1c40      	adds	r0, r0, #1
    fbf2:	d003      	beq.n	fbfc <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    fbf4:	2150      	movs	r1, #80	; 0x50
    fbf6:	2040      	movs	r0, #64	; 0x40
    fbf8:	f7f4 f918 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fbfc:	bd10      	pop	{r4, pc}

0000fbfe <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>:
    fbfe:	b510      	push	{r4, lr}
    fc00:	f7f3 ffea 	bl	3bd8 <mpsl_fem_pa_configuration_clear>
    fc04:	2800      	cmp	r0, #0
    fc06:	d005      	beq.n	fc14 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    fc08:	1c40      	adds	r0, r0, #1
    fc0a:	d003      	beq.n	fc14 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    fc0c:	2149      	movs	r1, #73	; 0x49
    fc0e:	2040      	movs	r0, #64	; 0x40
    fc10:	f7f4 f90c 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fc14:	bd10      	pop	{r4, pc}

0000fc16 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>:
    fc16:	b510      	push	{r4, lr}
    fc18:	f7f3 ffcc 	bl	3bb4 <mpsl_fem_disable>
    fc1c:	2800      	cmp	r0, #0
    fc1e:	d005      	beq.n	fc2c <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
    fc20:	1c40      	adds	r0, r0, #1
    fc22:	d003      	beq.n	fc2c <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
    fc24:	2157      	movs	r1, #87	; 0x57
    fc26:	2040      	movs	r0, #64	; 0x40
    fc28:	f7f4 f900 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fc2c:	bd10      	pop	{r4, pc}

0000fc2e <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>:
    fc2e:	b510      	push	{r4, lr}
    fc30:	2100      	movs	r1, #0
    fc32:	4608      	mov	r0, r1
    fc34:	f7f3 ffca 	bl	3bcc <mpsl_fem_lna_configuration_set>
    fc38:	b108      	cbz	r0, fc3e <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA+0x10>
    fc3a:	2000      	movs	r0, #0
    fc3c:	bd10      	pop	{r4, pc}
    fc3e:	2001      	movs	r0, #1
    fc40:	bd10      	pop	{r4, pc}

0000fc42 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>:
    fc42:	b508      	push	{r3, lr}
    fc44:	4668      	mov	r0, sp
    fc46:	f7f3 ffd3 	bl	3bf0 <mpsl_fem_pa_is_configured>
    fc4a:	f89d 0000 	ldrb.w	r0, [sp]
    fc4e:	2800      	cmp	r0, #0
    fc50:	d000      	beq.n	fc54 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I+0x12>
    fc52:	2001      	movs	r0, #1
    fc54:	bd08      	pop	{r3, pc}

0000fc56 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    fc56:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    fc5a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    fc5e:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    fc62:	f3bf 8f4f 	dsb	sy
    fc66:	f3bf 8f6f 	isb	sy
    fc6a:	f7fa be67 	b.w	a93c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    fc6e:	2800      	cmp	r0, #0
    fc70:	db09      	blt.n	fc86 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
    fc72:	f000 021f 	and.w	r2, r0, #31
    fc76:	2101      	movs	r1, #1
    fc78:	4091      	lsls	r1, r2
    fc7a:	0940      	lsrs	r0, r0, #5
    fc7c:	0080      	lsls	r0, r0, #2
    fc7e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    fc82:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    fc86:	4770      	bx	lr
    fc88:	2800      	cmp	r0, #0
    fc8a:	db0d      	blt.n	fca8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
    fc8c:	f000 021f 	and.w	r2, r0, #31
    fc90:	2101      	movs	r1, #1
    fc92:	4091      	lsls	r1, r2
    fc94:	0940      	lsrs	r0, r0, #5
    fc96:	0080      	lsls	r0, r0, #2
    fc98:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    fc9c:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    fca0:	f3bf 8f4f 	dsb	sy
    fca4:	f3bf 8f6f 	isb	sy
    fca8:	4770      	bx	lr

0000fcaa <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    fcaa:	b510      	push	{r4, lr}
    fcac:	2801      	cmp	r0, #1
    fcae:	d006      	beq.n	fcbe <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x14>
    fcb0:	2802      	cmp	r0, #2
    fcb2:	d006      	beq.n	fcc2 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x18>
    fcb4:	f640 3141 	movw	r1, #2881	; 0xb41
    fcb8:	203e      	movs	r0, #62	; 0x3e
    fcba:	f7f4 f8b7 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fcbe:	2028      	movs	r0, #40	; 0x28
    fcc0:	bd10      	pop	{r4, pc}
    fcc2:	2018      	movs	r0, #24
    fcc4:	bd10      	pop	{r4, pc}

0000fcc6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    fcc6:	b510      	push	{r4, lr}
    fcc8:	2801      	cmp	r0, #1
    fcca:	d006      	beq.n	fcda <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x14>
    fccc:	2802      	cmp	r0, #2
    fcce:	d007      	beq.n	fce0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x1a>
    fcd0:	f640 3155 	movw	r1, #2901	; 0xb55
    fcd4:	203e      	movs	r0, #62	; 0x3e
    fcd6:	f7f4 f8a9 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fcda:	f641 6014 	movw	r0, #7700	; 0x1e14
    fcde:	bd10      	pop	{r4, pc}
    fce0:	f241 1030 	movw	r0, #4400	; 0x1130
    fce4:	bd10      	pop	{r4, pc}

0000fce6 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
    fce6:	f7fb bd2b 	b.w	b740 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
    fcea:	b510      	push	{r4, lr}
    fcec:	460a      	mov	r2, r1
    fcee:	b130      	cbz	r0, fcfe <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x18>
    fcf0:	2801      	cmp	r0, #1
    fcf2:	d00b      	beq.n	fd0c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x26>
    fcf4:	f240 6114 	movw	r1, #1556	; 0x614
    fcf8:	203e      	movs	r0, #62	; 0x3e
    fcfa:	f7f4 f897 	bl	3e2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fcfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fd02:	f102 0128 	add.w	r1, r2, #40	; 0x28
    fd06:	4610      	mov	r0, r2
    fd08:	f7fa bcae 	b.w	a668 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>
    fd0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fd10:	f102 0129 	add.w	r1, r2, #41	; 0x29
    fd14:	4610      	mov	r0, r2
    fd16:	f7fa bc91 	b.w	a63c <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>
    fd1a:	5840      	ldr	r0, [r0, r1]
    fd1c:	2800      	cmp	r0, #0
    fd1e:	d000      	beq.n	fd22 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3c>
    fd20:	2001      	movs	r0, #1
    fd22:	4770      	bx	lr
    fd24:	5840      	ldr	r0, [r0, r1]
    fd26:	2800      	cmp	r0, #0
    fd28:	d000      	beq.n	fd2c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x46>
    fd2a:	2001      	movs	r0, #1
    fd2c:	4770      	bx	lr

0000fd2e <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    fd2e:	b570      	push	{r4, r5, r6, lr}
    fd30:	4605      	mov	r5, r0
    fd32:	4614      	mov	r4, r2
    fd34:	4608      	mov	r0, r1
    fd36:	f7ff ffc6 	bl	fcc6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fd3a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    fd3e:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    fd42:	ebc0 05c1 	rsb	r5, r0, r1, lsl #3
    fd46:	4620      	mov	r0, r4
    fd48:	f7ff ffbd 	bl	fcc6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fd4c:	4428      	add	r0, r5
    fd4e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    fd52:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    fd56:	fbb0 f5f1 	udiv	r5, r0, r1
    fd5a:	4620      	mov	r0, r4
    fd5c:	f7ff ffa5 	bl	fcaa <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    fd60:	4428      	add	r0, r5
    fd62:	1d40      	adds	r0, r0, #5
    fd64:	bd70      	pop	{r4, r5, r6, pc}

0000fd66 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    fd66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fd6a:	4607      	mov	r7, r0
    fd6c:	461d      	mov	r5, r3
    fd6e:	460e      	mov	r6, r1
    fd70:	4614      	mov	r4, r2
    fd72:	4610      	mov	r0, r2
    fd74:	f7ff ffa7 	bl	fcc6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fd78:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    fd7c:	ebc1 11c7 	rsb	r1, r1, r7, lsl #7
    fd80:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    fd84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    fd88:	2e02      	cmp	r6, #2
    fd8a:	d00e      	beq.n	fdaa <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x44>
    fd8c:	f240 52dc 	movw	r2, #1500	; 0x5dc
    fd90:	4411      	add	r1, r2
    fd92:	f601 31b7 	addw	r1, r1, #2999	; 0xbb7
    fd96:	fbb1 f6f0 	udiv	r6, r1, r0
    fd9a:	4620      	mov	r0, r4
    fd9c:	f7ff ff85 	bl	fcaa <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    fda0:	4430      	add	r0, r6
    fda2:	4428      	add	r0, r5
    fda4:	1d40      	adds	r0, r0, #5
    fda6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fdaa:	4602      	mov	r2, r0
    fdac:	e7f0      	b.n	fd90 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x2a>

0000fdae <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
    fdae:	b510      	push	{r4, lr}
    fdb0:	4604      	mov	r4, r0
    fdb2:	4608      	mov	r0, r1
    fdb4:	f7ff ff87 	bl	fcc6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fdb8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    fdbc:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    fdc0:	fbb0 f0f1 	udiv	r0, r0, r1
    fdc4:	1a20      	subs	r0, r4, r0
    fdc6:	1e80      	subs	r0, r0, #2
    fdc8:	bd10      	pop	{r4, pc}

0000fdca <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
    fdca:	b510      	push	{r4, lr}
    fdcc:	4604      	mov	r4, r0
    fdce:	4608      	mov	r0, r1
    fdd0:	f7ff ff79 	bl	fcc6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fdd4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    fdd8:	fbb0 f0f1 	udiv	r0, r0, r1
    fddc:	1a20      	subs	r0, r4, r0
    fdde:	bd10      	pop	{r4, pc}

0000fde0 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    fde0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fde4:	2902      	cmp	r1, #2
    fde6:	d008      	beq.n	fdfa <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1a>
    fde8:	f240 51dc 	movw	r1, #1500	; 0x5dc
    fdec:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    fdf0:	fbb1 f1f2 	udiv	r1, r1, r2
    fdf4:	4408      	add	r0, r1
    fdf6:	1e80      	subs	r0, r0, #2
    fdf8:	4770      	bx	lr
    fdfa:	4611      	mov	r1, r2
    fdfc:	e7f6      	b.n	fdec <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0xc>

0000fdfe <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    fdfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fe02:	2902      	cmp	r1, #2
    fe04:	d007      	beq.n	fe16 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>
    fe06:	f240 51dc 	movw	r1, #1500	; 0x5dc
    fe0a:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    fe0e:	fbb1 f1f2 	udiv	r1, r1, r2
    fe12:	4408      	add	r0, r1
    fe14:	4770      	bx	lr
    fe16:	4611      	mov	r1, r2
    fe18:	e7f7      	b.n	fe0a <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0xc>
    fe1a:	080c      	.short	0x080c
    fe1c:	010d1702 	.word	0x010d1702
    fe20:	09090201 	.word	0x09090201
    fe24:	02060101 	.word	0x02060101
    fe28:	03181809 	.word	0x03181809
    fe2c:	09090101 	.word	0x09090101
    fe30:	00050303 	.word	0x00050303
    fe34:	00000000 	.word	0x00000000

0000fe38 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
    fe38:	b570      	push	{r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    fe3a:	4d45      	ldr	r5, [pc, #276]	; (ff50 <bt_init+0x118>)
    fe3c:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
    fe40:	6899      	ldr	r1, [r3, #8]
    fe42:	f011 0101 	ands.w	r1, r1, #1
{
    fe46:	b088      	sub	sp, #32
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    fe48:	d121      	bne.n	fe8e <bt_init+0x56>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    fe4a:	aa03      	add	r2, sp, #12
    fe4c:	f640 4003 	movw	r0, #3075	; 0xc03
    fe50:	f009 f91c 	bl	1908c <bt_hci_cmd_send_sync>
		if (err) {
    fe54:	4604      	mov	r4, r0
    fe56:	2800      	cmp	r0, #0
    fe58:	d176      	bne.n	ff48 <bt_init+0x110>
	uint8_t status = buf->data[0];
    fe5a:	9b03      	ldr	r3, [sp, #12]
    fe5c:	689b      	ldr	r3, [r3, #8]
	if (status) {
    fe5e:	781b      	ldrb	r3, [r3, #0]
    fe60:	b993      	cbnz	r3, fe88 <bt_init+0x50>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    fe62:	f3bf 8f5b 	dmb	ish
    fe66:	462b      	mov	r3, r5
    fe68:	f853 2fcc 	ldr.w	r2, [r3, #204]!
    fe6c:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    fe70:	f002 0205 	and.w	r2, r2, #5
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    fe74:	f3bf 8f5b 	dmb	ish
    fe78:	e853 1f00 	ldrex	r1, [r3]
    fe7c:	e843 2000 	strex	r0, r2, [r3]
    fe80:	2800      	cmp	r0, #0
    fe82:	d1f9      	bne.n	fe78 <bt_init+0x40>
    fe84:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    fe88:	9803      	ldr	r0, [sp, #12]
    fe8a:	f00d f929 	bl	1d0e0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    fe8e:	aa03      	add	r2, sp, #12
    fe90:	2100      	movs	r1, #0
    fe92:	f241 0003 	movw	r0, #4099	; 0x1003
    fe96:	f009 f8f9 	bl	1908c <bt_hci_cmd_send_sync>
	if (err) {
    fe9a:	4604      	mov	r4, r0
    fe9c:	2800      	cmp	r0, #0
    fe9e:	d153      	bne.n	ff48 <bt_init+0x110>
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    fea0:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    fea2:	482c      	ldr	r0, [pc, #176]	; (ff54 <bt_init+0x11c>)
    fea4:	6899      	ldr	r1, [r3, #8]
    fea6:	2208      	movs	r2, #8
    fea8:	3101      	adds	r1, #1
    feaa:	f014 ffe9 	bl	24e80 <memcpy>
	net_buf_unref(rsp);
    feae:	9803      	ldr	r0, [sp, #12]
    feb0:	f00d f916 	bl	1d0e0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    feb4:	4621      	mov	r1, r4
    feb6:	aa03      	add	r2, sp, #12
    feb8:	f241 0001 	movw	r0, #4097	; 0x1001
    febc:	f009 f8e6 	bl	1908c <bt_hci_cmd_send_sync>
	if (err) {
    fec0:	4604      	mov	r4, r0
    fec2:	2800      	cmp	r0, #0
    fec4:	d140      	bne.n	ff48 <bt_init+0x110>
	read_local_ver_complete(rsp);
    fec6:	9803      	ldr	r0, [sp, #12]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    fec8:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    feca:	785a      	ldrb	r2, [r3, #1]
    fecc:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    fed0:	78d9      	ldrb	r1, [r3, #3]
    fed2:	789a      	ldrb	r2, [r3, #2]
    fed4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    fed8:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    fedc:	791a      	ldrb	r2, [r3, #4]
    fede:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    fee2:	7a19      	ldrb	r1, [r3, #8]
    fee4:	79da      	ldrb	r2, [r3, #7]
    fee6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    feea:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    feee:	795a      	ldrb	r2, [r3, #5]
    fef0:	799b      	ldrb	r3, [r3, #6]
    fef2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    fef6:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
    fefa:	f00d f8f1 	bl	1d0e0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    fefe:	4621      	mov	r1, r4
    ff00:	aa03      	add	r2, sp, #12
    ff02:	f241 0002 	movw	r0, #4098	; 0x1002
    ff06:	f009 f8c1 	bl	1908c <bt_hci_cmd_send_sync>
	if (err) {
    ff0a:	4604      	mov	r4, r0
    ff0c:	b9e0      	cbnz	r0, ff48 <bt_init+0x110>
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    ff0e:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
    ff10:	4811      	ldr	r0, [pc, #68]	; (ff58 <bt_init+0x120>)
    ff12:	6899      	ldr	r1, [r3, #8]
    ff14:	2240      	movs	r2, #64	; 0x40
    ff16:	3101      	adds	r1, #1
    ff18:	f014 ffb2 	bl	24e80 <memcpy>
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
    ff1c:	480e      	ldr	r0, [pc, #56]	; (ff58 <bt_init+0x120>)
    ff1e:	f016 fadd 	bl	264dc <bt_hci_ecc_supported_commands>
	net_buf_unref(rsp);
    ff22:	9803      	ldr	r0, [sp, #12]
    ff24:	f00d f8dc 	bl	1d0e0 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    ff28:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    ff2c:	065a      	lsls	r2, r3, #25
    ff2e:	d41b      	bmi.n	ff68 <bt_init+0x130>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    ff30:	4b0a      	ldr	r3, [pc, #40]	; (ff5c <bt_init+0x124>)
    ff32:	490b      	ldr	r1, [pc, #44]	; (ff60 <bt_init+0x128>)
		BT_ERR("Non-LE capable controller detected!");
    ff34:	480b      	ldr	r0, [pc, #44]	; (ff64 <bt_init+0x12c>)
    ff36:	1ac9      	subs	r1, r1, r3
    ff38:	08c9      	lsrs	r1, r1, #3
    ff3a:	0189      	lsls	r1, r1, #6
    ff3c:	f041 0101 	orr.w	r1, r1, #1
    ff40:	f013 ff8f 	bl	23e62 <log_0>
		return -ENODEV;
    ff44:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    ff48:	4620      	mov	r0, r4
    ff4a:	b008      	add	sp, #32
    ff4c:	bd70      	pop	{r4, r5, r6, pc}
    ff4e:	bf00      	nop
    ff50:	200002b0 	.word	0x200002b0
    ff54:	20000320 	.word	0x20000320
    ff58:	20000328 	.word	0x20000328
    ff5c:	00028dd4 	.word	0x00028dd4
    ff60:	00028e24 	.word	0x00028e24
    ff64:	0002b56c 	.word	0x0002b56c
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    ff68:	4621      	mov	r1, r4
    ff6a:	aa03      	add	r2, sp, #12
    ff6c:	f242 0003 	movw	r0, #8195	; 0x2003
    ff70:	f009 f88c 	bl	1908c <bt_hci_cmd_send_sync>
	if (err) {
    ff74:	4604      	mov	r4, r0
    ff76:	2800      	cmp	r0, #0
    ff78:	d1e6      	bne.n	ff48 <bt_init+0x110>
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    ff7a:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    ff7c:	48bc      	ldr	r0, [pc, #752]	; (10270 <CONFIG_PM_SRAM_SIZE+0x270>)
    ff7e:	6899      	ldr	r1, [r3, #8]
    ff80:	2208      	movs	r2, #8
    ff82:	3101      	adds	r1, #1
    ff84:	f014 ff7c 	bl	24e80 <memcpy>
	net_buf_unref(rsp);
    ff88:	9803      	ldr	r0, [sp, #12]
    ff8a:	f00d f8a9 	bl	1d0e0 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    ff8e:	4621      	mov	r1, r4
    ff90:	aa03      	add	r2, sp, #12
    ff92:	f242 0002 	movw	r0, #8194	; 0x2002
    ff96:	f009 f879 	bl	1908c <bt_hci_cmd_send_sync>
		if (err) {
    ff9a:	4604      	mov	r4, r0
    ff9c:	2800      	cmp	r0, #0
    ff9e:	d1d3      	bne.n	ff48 <bt_init+0x110>
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    ffa0:	9b03      	ldr	r3, [sp, #12]
    ffa2:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    ffa4:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    ffa8:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
    ffac:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
    ffae:	b121      	cbz	r1, ffba <bt_init+0x182>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    ffb0:	78da      	ldrb	r2, [r3, #3]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
    ffb2:	48b0      	ldr	r0, [pc, #704]	; (10274 <CONFIG_PM_SRAM_SIZE+0x274>)
    ffb4:	4611      	mov	r1, r2
    ffb6:	f018 fb26 	bl	28606 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    ffba:	9803      	ldr	r0, [sp, #12]
    ffbc:	f00d f890 	bl	1d0e0 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    ffc0:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
    ffc4:	f016 0620 	ands.w	r6, r6, #32
    ffc8:	f000 811c 	beq.w	10204 <CONFIG_PM_SRAM_SIZE+0x204>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    ffcc:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
    ffd0:	071b      	lsls	r3, r3, #28
    ffd2:	d511      	bpl.n	fff8 <bt_init+0x1c0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    ffd4:	aa03      	add	r2, sp, #12
    ffd6:	2100      	movs	r1, #0
    ffd8:	f242 001c 	movw	r0, #8220	; 0x201c
    ffdc:	f009 f856 	bl	1908c <bt_hci_cmd_send_sync>
		if (err) {
    ffe0:	4604      	mov	r4, r0
    ffe2:	2800      	cmp	r0, #0
    ffe4:	d1b0      	bne.n	ff48 <bt_init+0x110>
		le_read_supp_states_complete(rsp);
    ffe6:	9803      	ldr	r0, [sp, #12]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    ffe8:	6883      	ldr	r3, [r0, #8]
    ffea:	f853 2f01 	ldr.w	r2, [r3, #1]!
    ffee:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    fff0:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
    fff4:	f00d f874 	bl	1d0e0 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    fff8:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    fffc:	069e      	lsls	r6, r3, #26
    fffe:	d524      	bpl.n	1004a <CONFIG_PM_SRAM_SIZE+0x4a>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   10000:	a902      	add	r1, sp, #8
   10002:	f10d 0006 	add.w	r0, sp, #6
   10006:	f009 f8b9 	bl	1917c <hci_le_read_max_data_len>
		if (err) {
   1000a:	4604      	mov	r4, r0
   1000c:	2800      	cmp	r0, #0
   1000e:	d19b      	bne.n	ff48 <bt_init+0x110>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   10010:	2104      	movs	r1, #4
   10012:	f242 0024 	movw	r0, #8228	; 0x2024
   10016:	f008 fedd 	bl	18dd4 <bt_hci_cmd_create>
		if (!buf) {
   1001a:	4606      	mov	r6, r0
   1001c:	2800      	cmp	r0, #0
   1001e:	f000 80f8 	beq.w	10212 <CONFIG_PM_SRAM_SIZE+0x212>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
   10022:	2104      	movs	r1, #4
   10024:	3008      	adds	r0, #8
   10026:	f017 f8e7 	bl	271f8 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   1002a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1002e:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   10030:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   10034:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   10036:	4622      	mov	r2, r4
   10038:	4631      	mov	r1, r6
   1003a:	f242 0024 	movw	r0, #8228	; 0x2024
   1003e:	f009 f825 	bl	1908c <bt_hci_cmd_send_sync>
		if (err) {
   10042:	4604      	mov	r4, r0
   10044:	2800      	cmp	r0, #0
   10046:	f47f af7f 	bne.w	ff48 <bt_init+0x110>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   1004a:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   1004e:	065c      	lsls	r4, r3, #25
   10050:	d52c      	bpl.n	100ac <CONFIG_PM_SRAM_SIZE+0xac>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RPA_TIMEOUT,
   10052:	2102      	movs	r1, #2
   10054:	f242 002e 	movw	r0, #8238	; 0x202e
   10058:	f008 febc 	bl	18dd4 <bt_hci_cmd_create>
		if (!buf) {
   1005c:	4604      	mov	r4, r0
   1005e:	2800      	cmp	r0, #0
   10060:	f000 80d7 	beq.w	10212 <CONFIG_PM_SRAM_SIZE+0x212>
   10064:	2102      	movs	r1, #2
   10066:	3008      	adds	r0, #8
   10068:	f017 f8c6 	bl	271f8 <net_buf_simple_add>
		cp->rpa_timeout = sys_cpu_to_le16(CONFIG_BT_RPA_TIMEOUT);
   1006c:	f06f 037b 	mvn.w	r3, #123	; 0x7b
   10070:	7003      	strb	r3, [r0, #0]
   10072:	2303      	movs	r3, #3
   10074:	7043      	strb	r3, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RPA_TIMEOUT, buf,
   10076:	4621      	mov	r1, r4
   10078:	2200      	movs	r2, #0
   1007a:	f242 002e 	movw	r0, #8238	; 0x202e
   1007e:	f009 f805 	bl	1908c <bt_hci_cmd_send_sync>
		if (err) {
   10082:	4604      	mov	r4, r0
   10084:	2800      	cmp	r0, #0
   10086:	f47f af5f 	bne.w	ff48 <bt_init+0x110>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
   1008a:	4601      	mov	r1, r0
   1008c:	aa03      	add	r2, sp, #12
   1008e:	f242 002a 	movw	r0, #8234	; 0x202a
   10092:	f008 fffb 	bl	1908c <bt_hci_cmd_send_sync>
		if (err) {
   10096:	4604      	mov	r4, r0
   10098:	2800      	cmp	r0, #0
   1009a:	f47f af55 	bne.w	ff48 <bt_init+0x110>
		le_read_resolving_list_size_complete(rsp);
   1009e:	9803      	ldr	r0, [sp, #12]
	bt_dev.le.rl_size = rp->rl_size;
   100a0:	6883      	ldr	r3, [r0, #8]
   100a2:	785b      	ldrb	r3, [r3, #1]
   100a4:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
   100a8:	f00d f81a 	bl	1d0e0 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   100ac:	2108      	movs	r1, #8
   100ae:	f242 0001 	movw	r0, #8193	; 0x2001
   100b2:	f008 fe8f 	bl	18dd4 <bt_hci_cmd_create>
	if (!buf) {
   100b6:	4604      	mov	r4, r0
   100b8:	2800      	cmp	r0, #0
   100ba:	f000 80aa 	beq.w	10212 <CONFIG_PM_SRAM_SIZE+0x212>
   100be:	2108      	movs	r1, #8
   100c0:	4408      	add	r0, r1
   100c2:	f017 f899 	bl	271f8 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
   100c6:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   100ca:	f011 0f40 	tst.w	r1, #64	; 0x40
   100ce:	4602      	mov	r2, r0
   100d0:	f240 2302 	movw	r3, #514	; 0x202
   100d4:	bf08      	it	eq
   100d6:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   100d8:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   100da:	bf4c      	ite	mi
   100dc:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   100e0:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   100e4:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   100e6:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   100ea:	bf48      	it	mi
   100ec:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   100f0:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   100f4:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   100f8:	bf18      	it	ne
   100fa:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   100fe:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   10102:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
   10104:	bf48      	it	mi
   10106:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   1010a:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
   1010c:	bf08      	it	eq
   1010e:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
   10112:	2100      	movs	r1, #0
   10114:	f016 f918 	bl	26348 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   10118:	4621      	mov	r1, r4
   1011a:	2200      	movs	r2, #0
   1011c:	f242 0001 	movw	r0, #8193	; 0x2001
   10120:	f008 ffb4 	bl	1908c <bt_hci_cmd_send_sync>
	if (err) {
   10124:	4604      	mov	r4, r0
   10126:	2800      	cmp	r0, #0
   10128:	f47f af0e 	bne.w	ff48 <bt_init+0x110>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1012c:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   10130:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
   10134:	0698      	lsls	r0, r3, #26
   10136:	f100 8081 	bmi.w	1023c <CONFIG_PM_SRAM_SIZE+0x23c>
	if (bt_dev.le.acl_mtu) {
   1013a:	b9d9      	cbnz	r1, 10174 <CONFIG_PM_SRAM_SIZE+0x174>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   1013c:	aa03      	add	r2, sp, #12
   1013e:	f241 0005 	movw	r0, #4101	; 0x1005
   10142:	f008 ffa3 	bl	1908c <bt_hci_cmd_send_sync>
	if (err) {
   10146:	4604      	mov	r4, r0
   10148:	2800      	cmp	r0, #0
   1014a:	f47f aefd 	bne.w	ff48 <bt_init+0x110>
	if (bt_dev.le.acl_mtu) {
   1014e:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
   10152:	b963      	cbnz	r3, 1016e <CONFIG_PM_SRAM_SIZE+0x16e>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   10154:	9b03      	ldr	r3, [sp, #12]
   10156:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   10158:	785a      	ldrb	r2, [r3, #1]
   1015a:	7899      	ldrb	r1, [r3, #2]
   1015c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   10160:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   10164:	889a      	ldrh	r2, [r3, #4]
   10166:	4843      	ldr	r0, [pc, #268]	; (10274 <CONFIG_PM_SRAM_SIZE+0x274>)
   10168:	4611      	mov	r1, r2
   1016a:	f018 fa4c 	bl	28606 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   1016e:	9803      	ldr	r0, [sp, #12]
   10170:	f00c ffb6 	bl	1d0e0 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   10174:	2108      	movs	r1, #8
   10176:	f640 4001 	movw	r0, #3073	; 0xc01
   1017a:	f008 fe2b 	bl	18dd4 <bt_hci_cmd_create>
	if (!buf) {
   1017e:	4604      	mov	r4, r0
   10180:	2800      	cmp	r0, #0
   10182:	d046      	beq.n	10212 <CONFIG_PM_SRAM_SIZE+0x212>
   10184:	2108      	movs	r1, #8
   10186:	4408      	add	r0, r1
   10188:	f017 f836 	bl	271f8 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1018c:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   10190:	07d9      	lsls	r1, r3, #31
   10192:	4602      	mov	r2, r0
   10194:	d561      	bpl.n	1025a <CONFIG_PM_SRAM_SIZE+0x25a>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
   10196:	a134      	add	r1, pc, #208	; (adr r1, 10268 <CONFIG_PM_SRAM_SIZE+0x268>)
   10198:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
   1019c:	f016 f8d4 	bl	26348 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   101a0:	4621      	mov	r1, r4
   101a2:	2200      	movs	r2, #0
   101a4:	f640 4001 	movw	r0, #3073	; 0xc01
   101a8:	f008 ff70 	bl	1908c <bt_hci_cmd_send_sync>
	if (err) {
   101ac:	4604      	mov	r4, r0
   101ae:	2800      	cmp	r0, #0
   101b0:	f47f aeca 	bne.w	ff48 <bt_init+0x110>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   101b4:	4601      	mov	r1, r0
   101b6:	aa02      	add	r2, sp, #8
   101b8:	f64f 4001 	movw	r0, #64513	; 0xfc01
   101bc:	f008 ff66 	bl	1908c <bt_hci_cmd_send_sync>
	if (err) {
   101c0:	4e2d      	ldr	r6, [pc, #180]	; (10278 <CONFIG_PM_SRAM_SIZE+0x278>)
   101c2:	4b2e      	ldr	r3, [pc, #184]	; (1027c <CONFIG_PM_SRAM_SIZE+0x27c>)
   101c4:	1af6      	subs	r6, r6, r3
   101c6:	08f6      	lsrs	r6, r6, #3
   101c8:	01b6      	lsls	r6, r6, #6
   101ca:	2800      	cmp	r0, #0
   101cc:	d060      	beq.n	10290 <CONFIG_PM_SRAM_SIZE+0x290>
		BT_WARN("Vendor HCI extensions not available");
   101ce:	482c      	ldr	r0, [pc, #176]	; (10280 <CONFIG_PM_SRAM_SIZE+0x280>)
   101d0:	f046 0102 	orr.w	r1, r6, #2
			BT_WARN("Failed to read supported vendor features");
   101d4:	f013 fe45 	bl	23e62 <log_0>
	err = bt_id_init();
   101d8:	f00a fb28 	bl	1a82c <bt_id_init>
	if (err) {
   101dc:	4604      	mov	r4, r0
   101de:	2800      	cmp	r0, #0
   101e0:	f47f aeb2 	bne.w	ff48 <bt_init+0x110>
		err = bt_conn_init();
   101e4:	f006 fc0c 	bl	16a00 <bt_conn_init>
		if (err) {
   101e8:	4604      	mov	r4, r0
   101ea:	2800      	cmp	r0, #0
   101ec:	f47f aeac 	bne.w	ff48 <bt_init+0x110>
		if (!bt_dev.id_count) {
   101f0:	79eb      	ldrb	r3, [r5, #7]
   101f2:	2b00      	cmp	r3, #0
   101f4:	f040 80b9 	bne.w	1036a <CONFIG_PM_SRAM_SIZE+0x36a>
			BT_INFO("No ID address. App must call settings_load()");
   101f8:	4822      	ldr	r0, [pc, #136]	; (10284 <CONFIG_PM_SRAM_SIZE+0x284>)
   101fa:	f046 0103 	orr.w	r1, r6, #3
   101fe:	f013 fe30 	bl	23e62 <log_0>
			return 0;
   10202:	e6a1      	b.n	ff48 <bt_init+0x110>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   10204:	2102      	movs	r1, #2
   10206:	f640 406d 	movw	r0, #3181	; 0xc6d
   1020a:	f008 fde3 	bl	18dd4 <bt_hci_cmd_create>
		if (!buf) {
   1020e:	4604      	mov	r4, r0
   10210:	b910      	cbnz	r0, 10218 <CONFIG_PM_SRAM_SIZE+0x218>
		return -ENOBUFS;
   10212:	f06f 0468 	mvn.w	r4, #104	; 0x68
   10216:	e697      	b.n	ff48 <bt_init+0x110>
   10218:	2102      	movs	r1, #2
   1021a:	3008      	adds	r0, #8
   1021c:	f016 ffec 	bl	271f8 <net_buf_simple_add>
		cp_le->le = 0x01;
   10220:	2301      	movs	r3, #1
   10222:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   10224:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   10226:	4621      	mov	r1, r4
   10228:	4632      	mov	r2, r6
   1022a:	f640 406d 	movw	r0, #3181	; 0xc6d
   1022e:	f008 ff2d 	bl	1908c <bt_hci_cmd_send_sync>
		if (err) {
   10232:	4604      	mov	r4, r0
   10234:	2800      	cmp	r0, #0
   10236:	f43f aec9 	beq.w	ffcc <bt_init+0x194>
   1023a:	e685      	b.n	ff48 <bt_init+0x110>
	else if (!bt_dev.le.acl_mtu) {
   1023c:	2900      	cmp	r1, #0
   1023e:	d199      	bne.n	10174 <CONFIG_PM_SRAM_SIZE+0x174>
   10240:	4b0e      	ldr	r3, [pc, #56]	; (1027c <CONFIG_PM_SRAM_SIZE+0x27c>)
   10242:	490d      	ldr	r1, [pc, #52]	; (10278 <CONFIG_PM_SRAM_SIZE+0x278>)
		BT_ERR("ACL BR/EDR buffers not initialized");
   10244:	4810      	ldr	r0, [pc, #64]	; (10288 <CONFIG_PM_SRAM_SIZE+0x288>)
   10246:	1ac9      	subs	r1, r1, r3
   10248:	08c9      	lsrs	r1, r1, #3
   1024a:	0189      	lsls	r1, r1, #6
   1024c:	f041 0101 	orr.w	r1, r1, #1
   10250:	f013 fe07 	bl	23e62 <log_0>
		return -EIO;
   10254:	f06f 0404 	mvn.w	r4, #4
   10258:	e676      	b.n	ff48 <bt_init+0x110>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
   1025a:	480c      	ldr	r0, [pc, #48]	; (1028c <CONFIG_PM_SRAM_SIZE+0x28c>)
   1025c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   10260:	e79c      	b.n	1019c <CONFIG_PM_SRAM_SIZE+0x19c>
   10262:	bf00      	nop
   10264:	f3af 8000 	nop.w
   10268:	02008890 	.word	0x02008890
   1026c:	20008000 	.word	0x20008000
   10270:	20000380 	.word	0x20000380
   10274:	200003b0 	.word	0x200003b0
   10278:	00028e24 	.word	0x00028e24
   1027c:	00028dd4 	.word	0x00028dd4
   10280:	0002b5b3 	.word	0x0002b5b3
   10284:	0002b687 	.word	0x0002b687
   10288:	0002b590 	.word	0x0002b590
   1028c:	02008810 	.word	0x02008810
	rp.info = (void *)rsp->data;
   10290:	9b02      	ldr	r3, [sp, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
   10292:	4839      	ldr	r0, [pc, #228]	; (10378 <CONFIG_PM_SRAM_SIZE+0x378>)
	rp.info = (void *)rsp->data;
   10294:	689c      	ldr	r4, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
   10296:	f8b4 2001 	ldrh.w	r2, [r4, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
   1029a:	2a03      	cmp	r2, #3
		return plat_str[platform];
   1029c:	bf96      	itet	ls
   1029e:	4937      	ldrls	r1, [pc, #220]	; (1037c <CONFIG_PM_SRAM_SIZE+0x37c>)
	return "unknown";
   102a0:	4937      	ldrhi	r1, [pc, #220]	; (10380 <CONFIG_PM_SRAM_SIZE+0x380>)
		return plat_str[platform];
   102a2:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
   102a6:	f046 0303 	orr.w	r3, r6, #3
   102aa:	f013 fdfb 	bl	23ea4 <log_2>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   102ae:	f8b4 1001 	ldrh.w	r1, [r4, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
   102b2:	f8b4 2003 	ldrh.w	r2, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   102b6:	2902      	cmp	r1, #2
	BT_INFO("HW Variant: %s (0x%04x)",
   102b8:	f046 0303 	orr.w	r3, r6, #3
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   102bc:	d12e      	bne.n	1031c <CONFIG_PM_SRAM_SIZE+0x31c>
	if (variant < ARRAY_SIZE(nordic_str)) {
   102be:	2a03      	cmp	r2, #3
   102c0:	d82c      	bhi.n	1031c <CONFIG_PM_SRAM_SIZE+0x31c>
		return nordic_str[variant];
   102c2:	4930      	ldr	r1, [pc, #192]	; (10384 <CONFIG_PM_SRAM_SIZE+0x384>)
   102c4:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
   102c8:	482f      	ldr	r0, [pc, #188]	; (10388 <CONFIG_PM_SRAM_SIZE+0x388>)
   102ca:	f013 fdeb 	bl	23ea4 <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
   102ce:	7962      	ldrb	r2, [r4, #5]
   102d0:	482e      	ldr	r0, [pc, #184]	; (1038c <CONFIG_PM_SRAM_SIZE+0x38c>)
	if (variant < ARRAY_SIZE(var_str)) {
   102d2:	2a03      	cmp	r2, #3
		return var_str[variant];
   102d4:	bf96      	itet	ls
   102d6:	492e      	ldrls	r1, [pc, #184]	; (10390 <CONFIG_PM_SRAM_SIZE+0x390>)
	return "unknown";
   102d8:	4929      	ldrhi	r1, [pc, #164]	; (10380 <CONFIG_PM_SRAM_SIZE+0x380>)
		return var_str[variant];
   102da:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
   102de:	e9cd 1203 	strd	r1, r2, [sp, #12]
   102e2:	79a2      	ldrb	r2, [r4, #6]
   102e4:	9205      	str	r2, [sp, #20]
   102e6:	f8b4 2007 	ldrh.w	r2, [r4, #7]
   102ea:	9206      	str	r2, [sp, #24]
   102ec:	f8d4 2009 	ldr.w	r2, [r4, #9]
   102f0:	9207      	str	r2, [sp, #28]
   102f2:	f046 0303 	orr.w	r3, r6, #3
   102f6:	2205      	movs	r2, #5
   102f8:	a903      	add	r1, sp, #12
   102fa:	f013 fe08 	bl	23f0e <log_n>
	net_buf_unref(rsp);
   102fe:	9802      	ldr	r0, [sp, #8]
   10300:	f00c feee 	bl	1d0e0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   10304:	aa02      	add	r2, sp, #8
   10306:	2100      	movs	r1, #0
   10308:	f64f 4002 	movw	r0, #64514	; 0xfc02
   1030c:	f008 febe 	bl	1908c <bt_hci_cmd_send_sync>
	if (err) {
   10310:	4604      	mov	r4, r0
   10312:	b128      	cbz	r0, 10320 <CONFIG_PM_SRAM_SIZE+0x320>
		BT_WARN("Failed to read supported vendor commands");
   10314:	481f      	ldr	r0, [pc, #124]	; (10394 <CONFIG_PM_SRAM_SIZE+0x394>)
   10316:	f046 0102 	orr.w	r1, r6, #2
   1031a:	e75b      	b.n	101d4 <CONFIG_PM_SRAM_SIZE+0x1d4>
		return "unknown";
   1031c:	4918      	ldr	r1, [pc, #96]	; (10380 <CONFIG_PM_SRAM_SIZE+0x380>)
   1031e:	e7d3      	b.n	102c8 <CONFIG_PM_SRAM_SIZE+0x2c8>
	rp.cmds = (void *)rsp->data;
   10320:	9b02      	ldr	r3, [sp, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   10322:	481d      	ldr	r0, [pc, #116]	; (10398 <CONFIG_PM_SRAM_SIZE+0x398>)
   10324:	6899      	ldr	r1, [r3, #8]
   10326:	2202      	movs	r2, #2
   10328:	3101      	adds	r1, #1
   1032a:	f014 fda9 	bl	24e80 <memcpy>
	net_buf_unref(rsp);
   1032e:	9802      	ldr	r0, [sp, #8]
   10330:	f00c fed6 	bl	1d0e0 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   10334:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   10338:	075b      	lsls	r3, r3, #29
   1033a:	f57f af4d 	bpl.w	101d8 <CONFIG_PM_SRAM_SIZE+0x1d8>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   1033e:	aa02      	add	r2, sp, #8
   10340:	4621      	mov	r1, r4
   10342:	f64f 4003 	movw	r0, #64515	; 0xfc03
   10346:	f008 fea1 	bl	1908c <bt_hci_cmd_send_sync>
		if (err) {
   1034a:	b118      	cbz	r0, 10354 <CONFIG_PM_SRAM_SIZE+0x354>
			BT_WARN("Failed to read supported vendor features");
   1034c:	4813      	ldr	r0, [pc, #76]	; (1039c <CONFIG_PM_SRAM_SIZE+0x39c>)
   1034e:	f046 0102 	orr.w	r1, r6, #2
   10352:	e73f      	b.n	101d4 <CONFIG_PM_SRAM_SIZE+0x1d4>
		rp.feat = (void *)rsp->data;
   10354:	9b02      	ldr	r3, [sp, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
   10356:	4812      	ldr	r0, [pc, #72]	; (103a0 <CONFIG_PM_SRAM_SIZE+0x3a0>)
   10358:	6899      	ldr	r1, [r3, #8]
   1035a:	2201      	movs	r2, #1
   1035c:	4411      	add	r1, r2
   1035e:	f014 fd8f 	bl	24e80 <memcpy>
		net_buf_unref(rsp);
   10362:	9802      	ldr	r0, [sp, #8]
   10364:	f00c febc 	bl	1d0e0 <net_buf_unref>
   10368:	e736      	b.n	101d8 <CONFIG_PM_SRAM_SIZE+0x1d8>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1036a:	2104      	movs	r1, #4
   1036c:	480d      	ldr	r0, [pc, #52]	; (103a4 <CONFIG_PM_SRAM_SIZE+0x3a4>)
   1036e:	f015 ffd7 	bl	26320 <atomic_or>
	bt_finalize_init();
   10372:	f009 fa43 	bl	197fc <bt_finalize_init>
	return 0;
   10376:	e5e7      	b.n	ff48 <bt_init+0x110>
   10378:	0002b5d7 	.word	0x0002b5d7
   1037c:	00029710 	.word	0x00029710
   10380:	0002b0be 	.word	0x0002b0be
   10384:	000296d0 	.word	0x000296d0
   10388:	0002b5f0 	.word	0x0002b5f0
   1038c:	0002b608 	.word	0x0002b608
   10390:	00029748 	.word	0x00029748
   10394:	0002b635 	.word	0x0002b635
   10398:	20000369 	.word	0x20000369
   1039c:	0002b65e 	.word	0x0002b65e
   103a0:	20000368 	.word	0x20000368
   103a4:	2000037c 	.word	0x2000037c

000103a8 <write_ct>:
}

static ssize_t write_ct(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			const void *buf, uint16_t len, uint16_t offset,
			uint8_t flags)
{
   103a8:	b538      	push	{r3, r4, r5, lr}
   103aa:	460c      	mov	r4, r1
   103ac:	f8bd 0010 	ldrh.w	r0, [sp, #16]
	uint8_t *value = attr->user_data;
   103b0:	68e5      	ldr	r5, [r4, #12]

	if (offset + len > sizeof(ct)) {
   103b2:	461c      	mov	r4, r3
   103b4:	18c3      	adds	r3, r0, r3
   103b6:	2b0a      	cmp	r3, #10
{
   103b8:	4611      	mov	r1, r2
	if (offset + len > sizeof(ct)) {
   103ba:	dc08      	bgt.n	103ce <write_ct+0x26>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	memcpy(value + offset, buf, len);
   103bc:	4622      	mov	r2, r4
   103be:	4428      	add	r0, r5
   103c0:	f014 fd5e 	bl	24e80 <memcpy>
	ct_update = 1U;
   103c4:	4b03      	ldr	r3, [pc, #12]	; (103d4 <write_ct+0x2c>)
   103c6:	2201      	movs	r2, #1
   103c8:	701a      	strb	r2, [r3, #0]

	return len;
}
   103ca:	4620      	mov	r0, r4
   103cc:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   103ce:	f06f 0406 	mvn.w	r4, #6
   103d2:	e7fa      	b.n	103ca <write_ct+0x22>
   103d4:	20002848 	.word	0x20002848

000103d8 <cts_init>:
	/* Adjust reason */
	buf[9] = 0U; /* No update, change, etc */
}

void cts_init(void)
{
   103d8:	b513      	push	{r0, r1, r4, lr}
	memcpy(buf,  &year, 2); /* year */
   103da:	4c0d      	ldr	r4, [pc, #52]	; (10410 <cts_init+0x38>)
	year = sys_cpu_to_le16(2015);
   103dc:	f240 73df 	movw	r3, #2015	; 0x7df
	memcpy(buf,  &year, 2); /* year */
   103e0:	2202      	movs	r2, #2
   103e2:	f10d 0106 	add.w	r1, sp, #6
   103e6:	4620      	mov	r0, r4
	year = sys_cpu_to_le16(2015);
   103e8:	f8ad 3006 	strh.w	r3, [sp, #6]
	memcpy(buf,  &year, 2); /* year */
   103ec:	f014 fd48 	bl	24e80 <memcpy>
	buf[2] = 5U; /* months starting from 1 */
   103f0:	2305      	movs	r3, #5
   103f2:	70a3      	strb	r3, [r4, #2]
	buf[3] = 30U; /* day */
   103f4:	231e      	movs	r3, #30
   103f6:	70e3      	strb	r3, [r4, #3]
	buf[4] = 12U; /* hours */
   103f8:	220c      	movs	r2, #12
	buf[6] = 30U; /* seconds */
   103fa:	71a3      	strb	r3, [r4, #6]
	buf[7] = 1U; /* day of week starting from 1 */
   103fc:	2301      	movs	r3, #1
	buf[4] = 12U; /* hours */
   103fe:	7122      	strb	r2, [r4, #4]
	buf[7] = 1U; /* day of week starting from 1 */
   10400:	71e3      	strb	r3, [r4, #7]
	buf[5] = 45U; /* minutes */
   10402:	222d      	movs	r2, #45	; 0x2d
	buf[8] = 0U;
   10404:	2300      	movs	r3, #0
	buf[5] = 45U; /* minutes */
   10406:	7162      	strb	r2, [r4, #5]
	buf[8] = 0U;
   10408:	7223      	strb	r3, [r4, #8]
	buf[9] = 0U; /* No update, change, etc */
   1040a:	7263      	strb	r3, [r4, #9]
	/* Simulate current time for Current Time Service */
	generate_current_time(ct);
}
   1040c:	b002      	add	sp, #8
   1040e:	bd10      	pop	{r4, pc}
   10410:	2000283e 	.word	0x2000283e

00010414 <mtu_updated>:
	BT_DATA_BYTES(BT_DATA_UUID128_ALL, BT_UUID_CUSTOM_SERVICE_VAL),
};

void mtu_updated(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
	printk("Updated MTU: TX: %d RX: %d bytes\n", tx, rx);
   10414:	4801      	ldr	r0, [pc, #4]	; (1041c <mtu_updated+0x8>)
   10416:	f014 bb93 	b.w	24b40 <printk>
   1041a:	bf00      	nop
   1041c:	00029b34 	.word	0x00029b34

00010420 <disconnected>:
	}
}

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
	printk("Disconnected (reason 0x%02x)\n", reason);
   10420:	4801      	ldr	r0, [pc, #4]	; (10428 <disconnected+0x8>)
   10422:	f014 bb8d 	b.w	24b40 <printk>
   10426:	bf00      	nop
   10428:	00029b56 	.word	0x00029b56

0001042c <connected>:
	if (err) {
   1042c:	b111      	cbz	r1, 10434 <connected+0x8>
		printk("Connection failed (err 0x%02x)\n", err);
   1042e:	4803      	ldr	r0, [pc, #12]	; (1043c <connected+0x10>)
   10430:	f014 bb86 	b.w	24b40 <printk>
		printk("Connected\n");
   10434:	4802      	ldr	r0, [pc, #8]	; (10440 <connected+0x14>)
   10436:	f014 bb83 	b.w	24b40 <printk>
   1043a:	bf00      	nop
   1043c:	00029b74 	.word	0x00029b74
   10440:	00029b94 	.word	0x00029b94

00010444 <write_char2>:
{         
   10444:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   10448:	4608      	mov	r0, r1
   1044a:	461e      	mov	r6, r3
        uint8_t *value = attr->user_data;
   1044c:	68c5      	ldr	r5, [r0, #12]
	memcpy(value + offset, buf, len);
   1044e:	f8bd 0028 	ldrh.w	r0, [sp, #40]	; 0x28
        value_written = value;
   10452:	4b3d      	ldr	r3, [pc, #244]	; (10548 <write_char2+0x104>)
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   10454:	4c3d      	ldr	r4, [pc, #244]	; (1054c <write_char2+0x108>)
   10456:	601d      	str	r5, [r3, #0]
{         
   10458:	4611      	mov	r1, r2
	memcpy(value + offset, buf, len);
   1045a:	4428      	add	r0, r5
   1045c:	4632      	mov	r2, r6
   1045e:	f014 fd0f 	bl	24e80 <memcpy>
   10462:	4b3b      	ldr	r3, [pc, #236]	; (10550 <write_char2+0x10c>)
        LOG_INF("DLZKA: %d\n", len);
   10464:	483b      	ldr	r0, [pc, #236]	; (10554 <write_char2+0x110>)
   10466:	1ae4      	subs	r4, r4, r3
   10468:	08e4      	lsrs	r4, r4, #3
   1046a:	01a4      	lsls	r4, r4, #6
   1046c:	f044 0203 	orr.w	r2, r4, #3
   10470:	4631      	mov	r1, r6
   10472:	f013 fd03 	bl	23e7c <log_1>
        len_of_value = len;
   10476:	4b38      	ldr	r3, [pc, #224]	; (10558 <write_char2+0x114>)
	rc = nvs_read(&fs, KEY_ID, &key, sizeof(key));
   10478:	4a38      	ldr	r2, [pc, #224]	; (1055c <write_char2+0x118>)
        len_of_value = len;
   1047a:	601e      	str	r6, [r3, #0]
	rc = nvs_read(&fs, KEY_ID, &key, sizeof(key));
   1047c:	4838      	ldr	r0, [pc, #224]	; (10560 <write_char2+0x11c>)
   1047e:	2304      	movs	r3, #4
   10480:	2102      	movs	r1, #2
   10482:	f014 fa45 	bl	24910 <nvs_read>
   10486:	4b37      	ldr	r3, [pc, #220]	; (10564 <write_char2+0x120>)
        if (rc > 0) { /* item was found, show it */
   10488:	2800      	cmp	r0, #0
	rc = nvs_read(&fs, KEY_ID, &key, sizeof(key));
   1048a:	6018      	str	r0, [r3, #0]
		for (int n = 0; n < len; n++) {
   1048c:	f04f 0200 	mov.w	r2, #0
                        key[n] = value[n];
   10490:	4b32      	ldr	r3, [pc, #200]	; (1055c <write_char2+0x118>)
        if (rc > 0) { /* item was found, show it */
   10492:	dc0c      	bgt.n	104ae <write_char2+0x6a>
                for (int n = 0; n < len; n++) {
   10494:	4296      	cmp	r6, r2
   10496:	dc51      	bgt.n	1053c <write_char2+0xf8>
		(void)nvs_write(&fs, KEY_ID, &key, sizeof(key));
   10498:	4a30      	ldr	r2, [pc, #192]	; (1055c <write_char2+0x118>)
   1049a:	4831      	ldr	r0, [pc, #196]	; (10560 <write_char2+0x11c>)
   1049c:	2304      	movs	r3, #4
   1049e:	2102      	movs	r1, #2
   104a0:	f002 fc6c 	bl	12d7c <nvs_write>
   104a4:	e016      	b.n	104d4 <write_char2+0x90>
                        key[n] = value[n];
   104a6:	6819      	ldr	r1, [r3, #0]
   104a8:	5ca8      	ldrb	r0, [r5, r2]
   104aa:	5488      	strb	r0, [r1, r2]
		for (int n = 0; n < len; n++) {
   104ac:	3201      	adds	r2, #1
   104ae:	4296      	cmp	r6, r2
   104b0:	dcf9      	bgt.n	104a6 <write_char2+0x62>
		(void)nvs_write(&fs, KEY_ID, &key, sizeof(key));
   104b2:	4a2a      	ldr	r2, [pc, #168]	; (1055c <write_char2+0x118>)
   104b4:	482a      	ldr	r0, [pc, #168]	; (10560 <write_char2+0x11c>)
			printk("%d %x ", n, key[n]);
   104b6:	4f29      	ldr	r7, [pc, #164]	; (1055c <write_char2+0x118>)
   104b8:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 1057c <write_char2+0x138>
                        if(n==8 || n==17 || n==26){
   104bc:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 10580 <write_char2+0x13c>
		(void)nvs_write(&fs, KEY_ID, &key, sizeof(key));
   104c0:	2304      	movs	r3, #4
   104c2:	2102      	movs	r1, #2
   104c4:	f002 fc5a 	bl	12d7c <nvs_write>
		for (int n = 0; n < len; n++) {
   104c8:	2500      	movs	r5, #0
   104ca:	42ae      	cmp	r6, r5
   104cc:	dc25      	bgt.n	1051a <write_char2+0xd6>
		printk("\n");
   104ce:	4826      	ldr	r0, [pc, #152]	; (10568 <write_char2+0x124>)
   104d0:	f014 fb36 	bl	24b40 <printk>
          LOG_INF("!!! \n %d. TAK NACITALO MI TO CONFIG: %d %s\ !!!\n ", a, sixth_bytee[a].logic_value, sixth_bytee[a].logic_name);
   104d4:	4d25      	ldr	r5, [pc, #148]	; (1056c <write_char2+0x128>)
   104d6:	4826      	ldr	r0, [pc, #152]	; (10570 <write_char2+0x12c>)
          printf("!!! \n %d. REACTION: %d \ !!!\n ", a, first_byte[a].logic_value);
   104d8:	4f26      	ldr	r7, [pc, #152]	; (10574 <write_char2+0x130>)
          LOG_INF("!!! \n %d. TAK NACITALO MI TO CONFIG: %d %s\ !!!\n ", a, sixth_bytee[a].logic_value, sixth_bytee[a].logic_name);
   104da:	f044 0403 	orr.w	r4, r4, #3
   104de:	f8ad 4000 	strh.w	r4, [sp]
   104e2:	e9d5 2300 	ldrd	r2, r3, [r5]
   104e6:	2100      	movs	r1, #0
   104e8:	f013 fcf5 	bl	23ed6 <log_3>
   104ec:	f8ad 4000 	strh.w	r4, [sp]
   104f0:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   104f4:	481e      	ldr	r0, [pc, #120]	; (10570 <write_char2+0x12c>)
          printf("!!! \n %d. REACTION: %d \ !!!\n ", a, first_byte[a].logic_value);
   104f6:	4d20      	ldr	r5, [pc, #128]	; (10578 <write_char2+0x134>)
          LOG_INF("!!! \n %d. TAK NACITALO MI TO CONFIG: %d %s\ !!!\n ", a, sixth_bytee[a].logic_value, sixth_bytee[a].logic_name);
   104f8:	2101      	movs	r1, #1
   104fa:	f013 fcec 	bl	23ed6 <log_3>
        for(int a=0; a<6; a++){
   104fe:	2400      	movs	r4, #0
          printf("!!! \n %d. REACTION: %d \ !!!\n ", a, first_byte[a].logic_value);
   10500:	f857 2034 	ldr.w	r2, [r7, r4, lsl #3]
   10504:	4621      	mov	r1, r4
   10506:	4628      	mov	r0, r5
        for(int a=0; a<6; a++){
   10508:	3401      	adds	r4, #1
          printf("!!! \n %d. REACTION: %d \ !!!\n ", a, first_byte[a].logic_value);
   1050a:	f003 ff09 	bl	14320 <printf>
        for(int a=0; a<6; a++){
   1050e:	2c06      	cmp	r4, #6
   10510:	d1f6      	bne.n	10500 <write_char2+0xbc>
}
   10512:	4630      	mov	r0, r6
   10514:	b003      	add	sp, #12
   10516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			printk("%d %x ", n, key[n]);
   1051a:	683b      	ldr	r3, [r7, #0]
   1051c:	4629      	mov	r1, r5
   1051e:	5d5a      	ldrb	r2, [r3, r5]
   10520:	4640      	mov	r0, r8
   10522:	f014 fb0d 	bl	24b40 <printk>
                        if(n==8 || n==17 || n==26){
   10526:	2d1a      	cmp	r5, #26
   10528:	dc06      	bgt.n	10538 <write_char2+0xf4>
   1052a:	fa29 f305 	lsr.w	r3, r9, r5
   1052e:	07db      	lsls	r3, r3, #31
   10530:	d502      	bpl.n	10538 <write_char2+0xf4>
                          printk("\n");
   10532:	480d      	ldr	r0, [pc, #52]	; (10568 <write_char2+0x124>)
   10534:	f014 fb04 	bl	24b40 <printk>
		for (int n = 0; n < len; n++) {
   10538:	3501      	adds	r5, #1
   1053a:	e7c6      	b.n	104ca <write_char2+0x86>
                        key[n] = value[n];
   1053c:	6819      	ldr	r1, [r3, #0]
   1053e:	5ca8      	ldrb	r0, [r5, r2]
   10540:	5488      	strb	r0, [r1, r2]
                for (int n = 0; n < len; n++) {
   10542:	3201      	adds	r2, #1
   10544:	e7a6      	b.n	10494 <write_char2+0x50>
   10546:	bf00      	nop
   10548:	20002308 	.word	0x20002308
   1054c:	00028ddc 	.word	0x00028ddc
   10550:	00028dd4 	.word	0x00028dd4
   10554:	00029b9f 	.word	0x00029b9f
   10558:	200022d0 	.word	0x200022d0
   1055c:	200022cc 	.word	0x200022cc
   10560:	20002290 	.word	0x20002290
   10564:	200022d4 	.word	0x200022d4
   10568:	0002a0fa 	.word	0x0002a0fa
   1056c:	200022dc 	.word	0x200022dc
   10570:	00029bb1 	.word	0x00029bb1
   10574:	20002238 	.word	0x20002238
   10578:	00029be2 	.word	0x00029be2
   1057c:	00029baa 	.word	0x00029baa
   10580:	04020100 	.word	0x04020100

00010584 <read_char2>:
{         
   10584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10588:	461d      	mov	r5, r3
   1058a:	4c39      	ldr	r4, [pc, #228]	; (10670 <read_char2+0xec>)
   1058c:	4b39      	ldr	r3, [pc, #228]	; (10674 <read_char2+0xf0>)
        LOG_INF("len_of_value vs len: %d %d\n",len_of_value, len );
   1058e:	4e3a      	ldr	r6, [pc, #232]	; (10678 <read_char2+0xf4>)
	char *value = attr->user_data;
   10590:	f8d1 800c 	ldr.w	r8, [r1, #12]
   10594:	1ae4      	subs	r4, r4, r3
{         
   10596:	b087      	sub	sp, #28
   10598:	08e4      	lsrs	r4, r4, #3
        LOG_INF("len_of_value vs len: %d %d\n",len_of_value, len );
   1059a:	01a4      	lsls	r4, r4, #6
{         
   1059c:	9004      	str	r0, [sp, #16]
        LOG_INF("len_of_value vs len: %d %d\n",len_of_value, len );
   1059e:	f044 0303 	orr.w	r3, r4, #3
   105a2:	4836      	ldr	r0, [pc, #216]	; (1067c <read_char2+0xf8>)
{         
   105a4:	460f      	mov	r7, r1
   105a6:	4692      	mov	sl, r2
        LOG_INF("len_of_value vs len: %d %d\n",len_of_value, len );
   105a8:	6831      	ldr	r1, [r6, #0]
   105aa:	462a      	mov	r2, r5
   105ac:	f013 fc7a 	bl	23ea4 <log_2>
        for (int i = 0; i < len_of_value; i++){
   105b0:	2300      	movs	r3, #0
          printf("value[%d] = ", i);
   105b2:	4a33      	ldr	r2, [pc, #204]	; (10680 <read_char2+0xfc>)
   105b4:	f108 39ff 	add.w	r9, r8, #4294967295
        int counter = 0;
   105b8:	469b      	mov	fp, r3
        for (int i = 0; i < len_of_value; i++){
   105ba:	6831      	ldr	r1, [r6, #0]
   105bc:	4299      	cmp	r1, r3
   105be:	dc2a      	bgt.n	10616 <read_char2+0x92>
        rc = nvs_read(&fs, KEY_ID, &key, sizeof(key));
   105c0:	2304      	movs	r3, #4
   105c2:	4a30      	ldr	r2, [pc, #192]	; (10684 <read_char2+0x100>)
   105c4:	4830      	ldr	r0, [pc, #192]	; (10688 <read_char2+0x104>)
   105c6:	2102      	movs	r1, #2
   105c8:	f014 f9a2 	bl	24910 <nvs_read>
   105cc:	4b2f      	ldr	r3, [pc, #188]	; (1068c <read_char2+0x108>)
        if (rc > 0) { /* item was found, show it */
   105ce:	2800      	cmp	r0, #0
        rc = nvs_read(&fs, KEY_ID, &key, sizeof(key));
   105d0:	6018      	str	r0, [r3, #0]
        if (rc > 0) { /* item was found, show it */
   105d2:	dd0e      	ble.n	105f2 <read_char2+0x6e>
		LOG_INF("Id: %d, THE Key is: ", KEY_ID);
   105d4:	f044 0203 	orr.w	r2, r4, #3
   105d8:	482d      	ldr	r0, [pc, #180]	; (10690 <read_char2+0x10c>)
   105da:	2102      	movs	r1, #2
   105dc:	f013 fc4e 	bl	23e7c <log_1>
		for (int n = 0; n < key; n++) {
   105e0:	2400      	movs	r4, #0
   105e2:	4a28      	ldr	r2, [pc, #160]	; (10684 <read_char2+0x100>)
   105e4:	482b      	ldr	r0, [pc, #172]	; (10694 <read_char2+0x110>)
   105e6:	6813      	ldr	r3, [r2, #0]
   105e8:	42a3      	cmp	r3, r4
   105ea:	d827      	bhi.n	1063c <read_char2+0xb8>
		printk("\n");
   105ec:	482a      	ldr	r0, [pc, #168]	; (10698 <read_char2+0x114>)
   105ee:	f014 faa7 	bl	24b40 <printk>
        if(counter == 3){
   105f2:	f1bb 0f03 	cmp.w	fp, #3
   105f6:	d026      	beq.n	10646 <read_char2+0xc2>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   105f8:	8833      	ldrh	r3, [r6, #0]
   105fa:	9804      	ldr	r0, [sp, #16]
   105fc:	e9cd 8301 	strd	r8, r3, [sp, #4]
   10600:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   10604:	9300      	str	r3, [sp, #0]
   10606:	4652      	mov	r2, sl
   10608:	462b      	mov	r3, r5
   1060a:	4639      	mov	r1, r7
   1060c:	f015 fd83 	bl	26116 <bt_gatt_attr_read>
}
   10610:	b007      	add	sp, #28
   10612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          printf("value[%d] = ", i);
   10616:	4619      	mov	r1, r3
   10618:	4610      	mov	r0, r2
   1061a:	9305      	str	r3, [sp, #20]
   1061c:	f003 fe80 	bl	14320 <printf>
          printf("%" PRIx32 "\n", value[i]);   
   10620:	f819 1f01 	ldrb.w	r1, [r9, #1]!
   10624:	481d      	ldr	r0, [pc, #116]	; (1069c <read_char2+0x118>)
   10626:	f003 fe7b 	bl	14320 <printf>
          if(value[i] == 0){
   1062a:	f899 1000 	ldrb.w	r1, [r9]
   1062e:	4a14      	ldr	r2, [pc, #80]	; (10680 <read_char2+0xfc>)
   10630:	9b05      	ldr	r3, [sp, #20]
   10632:	b909      	cbnz	r1, 10638 <read_char2+0xb4>
            counter++;
   10634:	f10b 0b01 	add.w	fp, fp, #1
        for (int i = 0; i < len_of_value; i++){
   10638:	3301      	adds	r3, #1
   1063a:	e7be      	b.n	105ba <read_char2+0x36>
			printk("%x ", key[n]);
   1063c:	5d19      	ldrb	r1, [r3, r4]
   1063e:	f014 fa7f 	bl	24b40 <printk>
		for (int n = 0; n < key; n++) {
   10642:	3401      	adds	r4, #1
   10644:	e7cd      	b.n	105e2 <read_char2+0x5e>
           printk("00-00-00 configuration, rewriting for key! \n");
   10646:	4816      	ldr	r0, [pc, #88]	; (106a0 <read_char2+0x11c>)
              value[i] = key[i];
   10648:	f8df b038 	ldr.w	fp, [pc, #56]	; 10684 <read_char2+0x100>
           printk("00-00-00 configuration, rewriting for key! \n");
   1064c:	f014 fa78 	bl	24b40 <printk>
           for (int i = 0; i < len; i++){           
   10650:	2400      	movs	r4, #0
   10652:	42ac      	cmp	r4, r5
   10654:	4813      	ldr	r0, [pc, #76]	; (106a4 <read_char2+0x120>)
   10656:	dacf      	bge.n	105f8 <read_char2+0x74>
              value[i] = key[i];
   10658:	f8db 3000 	ldr.w	r3, [fp]
   1065c:	5d19      	ldrb	r1, [r3, r4]
   1065e:	f808 1004 	strb.w	r1, [r8, r4]
              printk("%x to %x ", value[i], key[i]);
   10662:	f8db 3000 	ldr.w	r3, [fp]
   10666:	5d1a      	ldrb	r2, [r3, r4]
   10668:	f014 fa6a 	bl	24b40 <printk>
           for (int i = 0; i < len; i++){           
   1066c:	3401      	adds	r4, #1
   1066e:	e7f0      	b.n	10652 <read_char2+0xce>
   10670:	00028ddc 	.word	0x00028ddc
   10674:	00028dd4 	.word	0x00028dd4
   10678:	200022d0 	.word	0x200022d0
   1067c:	00029c00 	.word	0x00029c00
   10680:	00029c1c 	.word	0x00029c1c
   10684:	200022cc 	.word	0x200022cc
   10688:	20002290 	.word	0x20002290
   1068c:	200022d4 	.word	0x200022d4
   10690:	00029c29 	.word	0x00029c29
   10694:	00029bad 	.word	0x00029bad
   10698:	0002a0fa 	.word	0x0002a0fa
   1069c:	0002a628 	.word	0x0002a628
   106a0:	00029c3e 	.word	0x00029c3e
   106a4:	00029c6b 	.word	0x00029c6b

000106a8 <turn_on_led2>:
  ret_t = gpio_pin_configure(dev_t, DT_GPIO_PIN(DT_ALIAS(led1), gpios), GPIO_OUTPUT_ACTIVE | DT_GPIO_FLAGS(DT_ALIAS(led1), gpios));       
  gpio_pin_set(dev_t, DT_GPIO_PIN(DT_ALIAS(led1), gpios), (int)led_is_on_t);

}

void turn_on_led2(){
   106a8:	b510      	push	{r4, lr}
  printf("\n\nHAHAHAHAHAHA som v turn_on_led2/n/n/n/");
   106aa:	4808      	ldr	r0, [pc, #32]	; (106cc <turn_on_led2+0x24>)
   106ac:	f003 fe38 	bl	14320 <printf>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   106b0:	4807      	ldr	r0, [pc, #28]	; (106d0 <turn_on_led2+0x28>)
   106b2:	f010 fb5b 	bl	20d6c <z_impl_device_get_binding>
   106b6:	4604      	mov	r4, r0
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   106b8:	2106      	movs	r1, #6
   106ba:	f011 ff84 	bl	225c6 <z_impl_gpio_pin_configure.constprop.0>
  bool led_is_on_t = true;
  int ret_t;

  dev_t = device_get_binding(DT_GPIO_LABEL(DT_ALIAS(led2), gpios));
  ret_t = gpio_pin_configure(dev_t, DT_GPIO_PIN(DT_ALIAS(led2), gpios), GPIO_OUTPUT_ACTIVE | DT_GPIO_FLAGS(DT_ALIAS(led2), gpios));
  gpio_pin_set(dev_t, DT_GPIO_PIN(DT_ALIAS(led2), gpios), (int)led_is_on_t);
   106be:	4620      	mov	r0, r4
   106c0:	2106      	movs	r1, #6
 
}
   106c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  gpio_pin_set(dev_t, DT_GPIO_PIN(DT_ALIAS(led2), gpios), (int)led_is_on_t);
   106c6:	f011 bf73 	b.w	225b0 <gpio_pin_set.constprop.0>
   106ca:	bf00      	nop
   106cc:	00029c75 	.word	0x00029c75
   106d0:	00029c9e 	.word	0x00029c9e

000106d4 <bt_addr_le_to_str.constprop.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   106d4:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   106d6:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   106d8:	b08a      	sub	sp, #40	; 0x28
   106da:	4604      	mov	r4, r0
   106dc:	460e      	mov	r6, r1
   106de:	ad07      	add	r5, sp, #28
   106e0:	2b03      	cmp	r3, #3
   106e2:	d820      	bhi.n	10726 <bt_addr_le_to_str.constprop.0+0x52>
   106e4:	e8df f003 	tbb	[pc, r3]
   106e8:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   106ec:	4911      	ldr	r1, [pc, #68]	; (10734 <bt_addr_le_to_str.constprop.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   106ee:	4628      	mov	r0, r5
   106f0:	f014 fb6e 	bl	24dd0 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   106f4:	7863      	ldrb	r3, [r4, #1]
   106f6:	9304      	str	r3, [sp, #16]
   106f8:	78a3      	ldrb	r3, [r4, #2]
   106fa:	9303      	str	r3, [sp, #12]
   106fc:	78e3      	ldrb	r3, [r4, #3]
   106fe:	9302      	str	r3, [sp, #8]
   10700:	7923      	ldrb	r3, [r4, #4]
   10702:	9301      	str	r3, [sp, #4]
   10704:	7963      	ldrb	r3, [r4, #5]
   10706:	9300      	str	r3, [sp, #0]
   10708:	4a0b      	ldr	r2, [pc, #44]	; (10738 <bt_addr_le_to_str.constprop.0+0x64>)
   1070a:	79a3      	ldrb	r3, [r4, #6]
   1070c:	9505      	str	r5, [sp, #20]
   1070e:	211e      	movs	r1, #30
   10710:	4630      	mov	r0, r6
   10712:	f014 fa22 	bl	24b5a <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
   10716:	b00a      	add	sp, #40	; 0x28
   10718:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   1071a:	4908      	ldr	r1, [pc, #32]	; (1073c <bt_addr_le_to_str.constprop.0+0x68>)
   1071c:	e7e7      	b.n	106ee <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "public-id");
   1071e:	4908      	ldr	r1, [pc, #32]	; (10740 <bt_addr_le_to_str.constprop.0+0x6c>)
   10720:	e7e5      	b.n	106ee <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "random-id");
   10722:	4908      	ldr	r1, [pc, #32]	; (10744 <bt_addr_le_to_str.constprop.0+0x70>)
   10724:	e7e3      	b.n	106ee <bt_addr_le_to_str.constprop.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   10726:	4a08      	ldr	r2, [pc, #32]	; (10748 <bt_addr_le_to_str.constprop.0+0x74>)
   10728:	210a      	movs	r1, #10
   1072a:	4628      	mov	r0, r5
   1072c:	f014 fa15 	bl	24b5a <snprintk>
		break;
   10730:	e7e0      	b.n	106f4 <bt_addr_le_to_str.constprop.0+0x20>
   10732:	bf00      	nop
   10734:	00029ca6 	.word	0x00029ca6
   10738:	00029cc8 	.word	0x00029cc8
   1073c:	00029cad 	.word	0x00029cad
   10740:	00029cb4 	.word	0x00029cb4
   10744:	00029cbe 	.word	0x00029cbe
   10748:	0002c017 	.word	0x0002c017

0001074c <auth_passkey_display>:

	printk("Advertising successfully started\n");
}

static void auth_passkey_display(struct bt_conn *conn, unsigned int passkey)
{
   1074c:	b510      	push	{r4, lr}
   1074e:	b088      	sub	sp, #32
   10750:	460c      	mov	r4, r1
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10752:	f015 fac7 	bl	25ce4 <bt_conn_get_dst>
   10756:	4669      	mov	r1, sp
   10758:	f7ff ffbc 	bl	106d4 <bt_addr_le_to_str.constprop.0>

	printk("Passkey for %s: %06u\n", addr, passkey);
   1075c:	4803      	ldr	r0, [pc, #12]	; (1076c <auth_passkey_display+0x20>)
   1075e:	4622      	mov	r2, r4
   10760:	4669      	mov	r1, sp
   10762:	f014 f9ed 	bl	24b40 <printk>
}
   10766:	b008      	add	sp, #32
   10768:	bd10      	pop	{r4, pc}
   1076a:	bf00      	nop
   1076c:	00029ceb 	.word	0x00029ceb

00010770 <auth_cancel>:

static void auth_cancel(struct bt_conn *conn)
{
   10770:	b500      	push	{lr}
   10772:	b089      	sub	sp, #36	; 0x24
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10774:	f015 fab6 	bl	25ce4 <bt_conn_get_dst>
   10778:	4669      	mov	r1, sp
   1077a:	f7ff ffab 	bl	106d4 <bt_addr_le_to_str.constprop.0>

	printk("Pairing cancelled: %s\n", addr);
   1077e:	4803      	ldr	r0, [pc, #12]	; (1078c <auth_cancel+0x1c>)
   10780:	4669      	mov	r1, sp
   10782:	f014 f9dd 	bl	24b40 <printk>
}
   10786:	b009      	add	sp, #36	; 0x24
   10788:	f85d fb04 	ldr.w	pc, [sp], #4
   1078c:	00029d01 	.word	0x00029d01

00010790 <turn_on_led1>:
void turn_on_led1(){
   10790:	b510      	push	{r4, lr}
  printf("\n\nHAHAHAHAHAHA som v turn_on_led1/n/n/n/");
   10792:	4808      	ldr	r0, [pc, #32]	; (107b4 <turn_on_led1+0x24>)
   10794:	f003 fdc4 	bl	14320 <printf>
   10798:	4807      	ldr	r0, [pc, #28]	; (107b8 <turn_on_led1+0x28>)
   1079a:	f010 fae7 	bl	20d6c <z_impl_device_get_binding>
   1079e:	4604      	mov	r4, r0
   107a0:	2105      	movs	r1, #5
   107a2:	f011 ff10 	bl	225c6 <z_impl_gpio_pin_configure.constprop.0>
  gpio_pin_set(dev_t, DT_GPIO_PIN(DT_ALIAS(led1), gpios), (int)led_is_on_t);
   107a6:	4620      	mov	r0, r4
   107a8:	2105      	movs	r1, #5
}
   107aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  gpio_pin_set(dev_t, DT_GPIO_PIN(DT_ALIAS(led1), gpios), (int)led_is_on_t);
   107ae:	f011 beff 	b.w	225b0 <gpio_pin_set.constprop.0>
   107b2:	bf00      	nop
   107b4:	00029d18 	.word	0x00029d18
   107b8:	00029c9e 	.word	0x00029c9e

000107bc <turn_on_led0>:
void turn_on_led0(){
   107bc:	b510      	push	{r4, lr}
  printf("\n\nHAHAHAHAHAHA som v turn_on_led0/n/n/n/");
   107be:	4808      	ldr	r0, [pc, #32]	; (107e0 <turn_on_led0+0x24>)
   107c0:	f003 fdae 	bl	14320 <printf>
   107c4:	4807      	ldr	r0, [pc, #28]	; (107e4 <turn_on_led0+0x28>)
   107c6:	f010 fad1 	bl	20d6c <z_impl_device_get_binding>
   107ca:	4604      	mov	r4, r0
   107cc:	2107      	movs	r1, #7
   107ce:	f011 fefa 	bl	225c6 <z_impl_gpio_pin_configure.constprop.0>
  gpio_pin_set(dev_t, DT_GPIO_PIN(DT_ALIAS(led0), gpios), (int)led_is_on_t);
   107d2:	4620      	mov	r0, r4
   107d4:	2107      	movs	r1, #7
}
   107d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  gpio_pin_set(dev_t, DT_GPIO_PIN(DT_ALIAS(led0), gpios), (int)led_is_on_t);
   107da:	f011 bee9 	b.w	225b0 <gpio_pin_set.constprop.0>
   107de:	bf00      	nop
   107e0:	00029d41 	.word	0x00029d41
   107e4:	00029c9e 	.word	0x00029c9e

000107e8 <register_input>:
    sixth_bytee[sixth_counter].logic_name = information;
   107e8:	4a05      	ldr	r2, [pc, #20]	; (10800 <register_input+0x18>)
void register_input(uint8_t hexvalue, char* information){
   107ea:	b530      	push	{r4, r5, lr}
    sixth_bytee[sixth_counter].logic_name = information;
   107ec:	6813      	ldr	r3, [r2, #0]
   107ee:	4c05      	ldr	r4, [pc, #20]	; (10804 <register_input+0x1c>)
   107f0:	eb04 05c3 	add.w	r5, r4, r3, lsl #3
    sixth_bytee[sixth_counter].logic_value = hexvalue;
   107f4:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
    sixth_counter+=1;
   107f8:	3301      	adds	r3, #1
    sixth_bytee[sixth_counter].logic_name = information;
   107fa:	6069      	str	r1, [r5, #4]
    sixth_counter+=1;
   107fc:	6013      	str	r3, [r2, #0]
}
   107fe:	bd30      	pop	{r4, r5, pc}
   10800:	20002304 	.word	0x20002304
   10804:	200022dc 	.word	0x200022dc

00010808 <register_reaction>:
    first_byte[first_counter].logic_name = f;
   10808:	4a05      	ldr	r2, [pc, #20]	; (10820 <register_reaction+0x18>)
void register_reaction(uint8_t hexvalue, void (*f)()){
   1080a:	b530      	push	{r4, r5, lr}
    first_byte[first_counter].logic_name = f;
   1080c:	6813      	ldr	r3, [r2, #0]
   1080e:	4c05      	ldr	r4, [pc, #20]	; (10824 <register_reaction+0x1c>)
   10810:	eb04 05c3 	add.w	r5, r4, r3, lsl #3
    first_byte[first_counter].logic_value = hexvalue;
   10814:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
    first_counter+=1;
   10818:	3301      	adds	r3, #1
    first_byte[first_counter].logic_name = f;
   1081a:	6069      	str	r1, [r5, #4]
    first_counter+=1;
   1081c:	6013      	str	r3, [r2, #0]
}
   1081e:	bd30      	pop	{r4, r5, pc}
   10820:	20002288 	.word	0x20002288
   10824:	20002238 	.word	0x20002238

00010828 <resolve>:
void resolve(char *value_incoming){
   10828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1082a:	4604      	mov	r4, r0
  printf("SOM V MOJOM RESOLVE\n");
   1082c:	4812      	ldr	r0, [pc, #72]	; (10878 <resolve+0x50>)
   1082e:	4d13      	ldr	r5, [pc, #76]	; (1087c <resolve+0x54>)
          printf("ZHODA %d %d\n", value_incoming[0], first_byte[i].logic_value);
   10830:	4f13      	ldr	r7, [pc, #76]	; (10880 <resolve+0x58>)
  printf("SOM V MOJOM RESOLVE\n");
   10832:	f003 fd75 	bl	14320 <printf>
        printf("..!!.. value_incoming[%d] = ", i);
   10836:	2100      	movs	r1, #0
   10838:	4812      	ldr	r0, [pc, #72]	; (10884 <resolve+0x5c>)
   1083a:	f003 fd71 	bl	14320 <printf>
        printf("%" PRIx32 "\n", value_incoming[i]);
   1083e:	7821      	ldrb	r1, [r4, #0]
   10840:	4811      	ldr	r0, [pc, #68]	; (10888 <resolve+0x60>)
   10842:	f003 fd6d 	bl	14320 <printf>
        printf("..!!.. value_incoming[%d] = ", i);
   10846:	2101      	movs	r1, #1
   10848:	480e      	ldr	r0, [pc, #56]	; (10884 <resolve+0x5c>)
   1084a:	f003 fd69 	bl	14320 <printf>
        printf("%" PRIx32 "\n", value_incoming[i]);
   1084e:	7861      	ldrb	r1, [r4, #1]
   10850:	480d      	ldr	r0, [pc, #52]	; (10888 <resolve+0x60>)
   10852:	f003 fd65 	bl	14320 <printf>
   for (int i = 0; i < 6; i++)
   10856:	2600      	movs	r6, #0
        if(first_byte[i].logic_value == value_incoming[0]){
   10858:	7823      	ldrb	r3, [r4, #0]
   1085a:	682a      	ldr	r2, [r5, #0]
   1085c:	429a      	cmp	r2, r3
   1085e:	d105      	bne.n	1086c <resolve+0x44>
          printf("ZHODA %d %d\n", value_incoming[0], first_byte[i].logic_value);
   10860:	4611      	mov	r1, r2
   10862:	4638      	mov	r0, r7
   10864:	f003 fd5c 	bl	14320 <printf>
          toto_executni();
   10868:	686b      	ldr	r3, [r5, #4]
   1086a:	4798      	blx	r3
   for (int i = 0; i < 6; i++)
   1086c:	3601      	adds	r6, #1
   1086e:	2e06      	cmp	r6, #6
   10870:	f105 0508 	add.w	r5, r5, #8
   10874:	d1f0      	bne.n	10858 <resolve+0x30>
}
   10876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10878:	00029d6a 	.word	0x00029d6a
   1087c:	20002238 	.word	0x20002238
   10880:	00029d9c 	.word	0x00029d9c
   10884:	00029d7f 	.word	0x00029d7f
   10888:	0002a628 	.word	0x0002a628

0001088c <main>:




void main(void)
{         
   1088c:	b5f0      	push	{r4, r5, r6, r7, lr}
        
        //Vseobecne zadefinovanie miesta vstupu a co predstavuje
        register_input(1,"temperature");
   1088e:	4947      	ldr	r1, [pc, #284]	; (109ac <main+0x120>)





        flash_dev = FLASH_AREA_DEVICE(STORAGE_NODE_LABEL);
   10890:	4d47      	ldr	r5, [pc, #284]	; (109b0 <main+0x124>)
{         
   10892:	b08d      	sub	sp, #52	; 0x34
        register_input(1,"temperature");
   10894:	2001      	movs	r0, #1
   10896:	f7ff ffa7 	bl	107e8 <register_input>
        register_input(2,"humidity");
   1089a:	4946      	ldr	r1, [pc, #280]	; (109b4 <main+0x128>)
   1089c:	2002      	movs	r0, #2
   1089e:	f7ff ffa3 	bl	107e8 <register_input>
        register_reaction(1, led0_on);
   108a2:	4945      	ldr	r1, [pc, #276]	; (109b8 <main+0x12c>)
   108a4:	2001      	movs	r0, #1
   108a6:	f7ff ffaf 	bl	10808 <register_reaction>
        register_reaction(2, led1_on);
   108aa:	4944      	ldr	r1, [pc, #272]	; (109bc <main+0x130>)
   108ac:	2002      	movs	r0, #2
   108ae:	f7ff ffab 	bl	10808 <register_reaction>
        register_reaction(3, led2_on);
   108b2:	4943      	ldr	r1, [pc, #268]	; (109c0 <main+0x134>)
   108b4:	2003      	movs	r0, #3
   108b6:	f7ff ffa7 	bl	10808 <register_reaction>
        register_reaction(4, led0_off);
   108ba:	4942      	ldr	r1, [pc, #264]	; (109c4 <main+0x138>)
   108bc:	2004      	movs	r0, #4
   108be:	f7ff ffa3 	bl	10808 <register_reaction>
        register_reaction(5, led1_off);
   108c2:	4941      	ldr	r1, [pc, #260]	; (109c8 <main+0x13c>)
   108c4:	2005      	movs	r0, #5
   108c6:	f7ff ff9f 	bl	10808 <register_reaction>
        register_reaction(6, led2_off);
   108ca:	4940      	ldr	r1, [pc, #256]	; (109cc <main+0x140>)
   108cc:	2006      	movs	r0, #6
   108ce:	f7ff ff9b 	bl	10808 <register_reaction>
        flash_dev = FLASH_AREA_DEVICE(STORAGE_NODE_LABEL);
   108d2:	483f      	ldr	r0, [pc, #252]	; (109d0 <main+0x144>)
   108d4:	6028      	str	r0, [r5, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
   108d6:	f017 fa97 	bl	27e08 <z_device_ready>
   108da:	b180      	cbz	r0, 108fe <main+0x72>
	if (!device_is_ready(flash_dev)) {
		printk("Flash device %s is not ready\n", flash_dev->name);
		return;
	}
	fs.offset = FLASH_AREA_OFFSET(storage);
   108dc:	4c3d      	ldr	r4, [pc, #244]	; (109d4 <main+0x148>)
	rc = flash_get_page_info_by_offs(flash_dev, fs.offset, &info);
   108de:	6828      	ldr	r0, [r5, #0]
	fs.offset = FLASH_AREA_OFFSET(storage);
   108e0:	f44f 21f4 	mov.w	r1, #499712	; 0x7a000
   108e4:	6021      	str	r1, [r4, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   108e6:	4f3c      	ldr	r7, [pc, #240]	; (109d8 <main+0x14c>)
	rc = flash_get_page_info_by_offs(flash_dev, fs.offset, &info);
   108e8:	4e3c      	ldr	r6, [pc, #240]	; (109dc <main+0x150>)
   108ea:	463a      	mov	r2, r7
   108ec:	f017 f89d 	bl	27a2a <z_impl_flash_get_page_info_by_offs>
   108f0:	6030      	str	r0, [r6, #0]
	if (rc) {
   108f2:	b150      	cbz	r0, 1090a <main+0x7e>
		printk("Unable to get page info\n");
   108f4:	483a      	ldr	r0, [pc, #232]	; (109e0 <main+0x154>)
	fs.sector_size = info.size;
	fs.sector_count = 3U;

	rc = nvs_init(&fs, flash_dev->name);
	if (rc) {
		printk("Flash Init failed\n");
   108f6:	f014 f923 	bl	24b40 <printk>


	}


}
   108fa:	b00d      	add	sp, #52	; 0x34
   108fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printk("Flash device %s is not ready\n", flash_dev->name);
   108fe:	682b      	ldr	r3, [r5, #0]
   10900:	4838      	ldr	r0, [pc, #224]	; (109e4 <main+0x158>)
   10902:	6819      	ldr	r1, [r3, #0]
		printk("Bluetooth init failed (err %d)\n", err);
   10904:	f014 f91c 	bl	24b40 <printk>
		return;
   10908:	e7f7      	b.n	108fa <main+0x6e>
	fs.sector_size = info.size;
   1090a:	687b      	ldr	r3, [r7, #4]
   1090c:	81a3      	strh	r3, [r4, #12]
	rc = nvs_init(&fs, flash_dev->name);
   1090e:	682b      	ldr	r3, [r5, #0]
	fs.sector_count = 3U;
   10910:	2703      	movs	r7, #3
	rc = nvs_init(&fs, flash_dev->name);
   10912:	6819      	ldr	r1, [r3, #0]
	fs.sector_count = 3U;
   10914:	81e7      	strh	r7, [r4, #14]
	rc = nvs_init(&fs, flash_dev->name);
   10916:	4620      	mov	r0, r4
   10918:	f002 f852 	bl	129c0 <nvs_init>
   1091c:	6030      	str	r0, [r6, #0]
	if (rc) {
   1091e:	b108      	cbz	r0, 10924 <main+0x98>
		printk("Flash Init failed\n");
   10920:	4831      	ldr	r0, [pc, #196]	; (109e8 <main+0x15c>)
   10922:	e7e8      	b.n	108f6 <main+0x6a>
	err = bt_enable(NULL);
   10924:	f008 ffe6 	bl	198f4 <bt_enable>
	if (err) {
   10928:	4606      	mov	r6, r0
   1092a:	b110      	cbz	r0, 10932 <main+0xa6>
		printk("Bluetooth init failed (err %d)\n", err);
   1092c:	4601      	mov	r1, r0
   1092e:	482f      	ldr	r0, [pc, #188]	; (109ec <main+0x160>)
   10930:	e7e8      	b.n	10904 <main+0x78>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
   10932:	4d2f      	ldr	r5, [pc, #188]	; (109f0 <main+0x164>)
	printk("Bluetooth initialized\n");
   10934:	482f      	ldr	r0, [pc, #188]	; (109f4 <main+0x168>)
   10936:	f014 f903 	bl	24b40 <printk>
	cts_init();
   1093a:	f7ff fd4d 	bl	103d8 <cts_init>
		settings_load();
   1093e:	f014 fa0a 	bl	24d56 <settings_load>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
   10942:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   10944:	ac02      	add	r4, sp, #8
   10946:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   10948:	682b      	ldr	r3, [r5, #0]
   1094a:	6023      	str	r3, [r4, #0]
   1094c:	492a      	ldr	r1, [pc, #168]	; (109f8 <main+0x16c>)
   1094e:	9600      	str	r6, [sp, #0]
   10950:	4633      	mov	r3, r6
   10952:	463a      	mov	r2, r7
   10954:	a802      	add	r0, sp, #8
   10956:	f003 ffff 	bl	14958 <bt_le_adv_start>
	if (err) {
   1095a:	4601      	mov	r1, r0
   1095c:	b310      	cbz	r0, 109a4 <main+0x118>
		printk("Advertising failed to start (err %d)\n", err);
   1095e:	4827      	ldr	r0, [pc, #156]	; (109fc <main+0x170>)
   10960:	f014 f8ee 	bl	24b40 <printk>
	bt_gatt_cb_register(&gatt_callbacks);
   10964:	4826      	ldr	r0, [pc, #152]	; (10a00 <main+0x174>)
   10966:	f006 fed1 	bl	1770c <bt_gatt_cb_register>
	bt_conn_auth_cb_register(&auth_cb_display);
   1096a:	4826      	ldr	r0, [pc, #152]	; (10a04 <main+0x178>)
   1096c:	f006 f82c 	bl	169c8 <bt_conn_auth_cb_register>
	vnd_ind_attr = bt_gatt_find_by_uuid(vnd_svc.attrs, vnd_svc.attr_count,
   10970:	4a25      	ldr	r2, [pc, #148]	; (10a08 <main+0x17c>)
   10972:	4826      	ldr	r0, [pc, #152]	; (10a0c <main+0x180>)
   10974:	2103      	movs	r1, #3
   10976:	f007 f8a7 	bl	17ac8 <bt_gatt_find_by_uuid>
	bt_uuid_to_str(&vnd_enc_uuid.uuid, str, sizeof(str));
   1097a:	2225      	movs	r2, #37	; 0x25
	vnd_ind_attr = bt_gatt_find_by_uuid(vnd_svc.attrs, vnd_svc.attr_count,
   1097c:	4604      	mov	r4, r0
	bt_uuid_to_str(&vnd_enc_uuid.uuid, str, sizeof(str));
   1097e:	a902      	add	r1, sp, #8
   10980:	4821      	ldr	r0, [pc, #132]	; (10a08 <main+0x17c>)
   10982:	f00c fa93 	bl	1ceac <bt_uuid_to_str>
	printk("Indicate VND attr %p (UUID %s)\n", vnd_ind_attr, str);
   10986:	4621      	mov	r1, r4
   10988:	4821      	ldr	r0, [pc, #132]	; (10a10 <main+0x184>)
                resolve(value_written);
   1098a:	4c22      	ldr	r4, [pc, #136]	; (10a14 <main+0x188>)
	printk("Indicate VND attr %p (UUID %s)\n", vnd_ind_attr, str);
   1098c:	aa02      	add	r2, sp, #8
   1098e:	f014 f8d7 	bl	24b40 <printk>
	return z_impl_k_sleep(timeout);
   10992:	2100      	movs	r1, #0
   10994:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10998:	f011 f81e 	bl	219d8 <z_impl_k_sleep>
                resolve(value_written);
   1099c:	6820      	ldr	r0, [r4, #0]
   1099e:	f7ff ff43 	bl	10828 <resolve>
   109a2:	e7f6      	b.n	10992 <main+0x106>
	printk("Advertising successfully started\n");
   109a4:	481c      	ldr	r0, [pc, #112]	; (10a18 <main+0x18c>)
   109a6:	f014 f8cb 	bl	24b40 <printk>
   109aa:	e7db      	b.n	10964 <main+0xd8>
   109ac:	00029da9 	.word	0x00029da9
   109b0:	2000228c 	.word	0x2000228c
   109b4:	00029db5 	.word	0x00029db5
   109b8:	000107bd 	.word	0x000107bd
   109bc:	00010791 	.word	0x00010791
   109c0:	000106a9 	.word	0x000106a9
   109c4:	000225af 	.word	0x000225af
   109c8:	000225e3 	.word	0x000225e3
   109cc:	000225e5 	.word	0x000225e5
   109d0:	00028aa4 	.word	0x00028aa4
   109d4:	20002290 	.word	0x20002290
   109d8:	200022c0 	.word	0x200022c0
   109dc:	200022d4 	.word	0x200022d4
   109e0:	00029ddc 	.word	0x00029ddc
   109e4:	00029dbe 	.word	0x00029dbe
   109e8:	00029df5 	.word	0x00029df5
   109ec:	00029e08 	.word	0x00029e08
   109f0:	00028fb0 	.word	0x00028fb0
   109f4:	00029e28 	.word	0x00029e28
   109f8:	000290d8 	.word	0x000290d8
   109fc:	00029e3f 	.word	0x00029e3f
   10a00:	200004f4 	.word	0x200004f4
   10a04:	200004d0 	.word	0x200004d0
   10a08:	200008a3 	.word	0x200008a3
   10a0c:	000290f0 	.word	0x000290f0
   10a10:	00029e87 	.word	0x00029e87
   10a14:	20002308 	.word	0x20002308
   10a18:	00029e65 	.word	0x00029e65

00010a1c <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   10a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   10a1e:	4e26      	ldr	r6, [pc, #152]	; (10ab8 <tc_aes128_set_encrypt_key+0x9c>)
{
   10a20:	4607      	mov	r7, r0
   10a22:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   10a24:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   10a26:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   10a28:	ad01      	add	r5, sp, #4
   10a2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   10a2c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   10a2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   10a30:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   10a34:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   10a38:	4638      	mov	r0, r7
   10a3a:	2f00      	cmp	r7, #0
   10a3c:	d038      	beq.n	10ab0 <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   10a3e:	2c00      	cmp	r4, #0
   10a40:	d038      	beq.n	10ab4 <tc_aes128_set_encrypt_key+0x98>
   10a42:	1f38      	subs	r0, r7, #4
   10a44:	4621      	mov	r1, r4
   10a46:	4602      	mov	r2, r0
   10a48:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   10a4a:	784b      	ldrb	r3, [r1, #1]
   10a4c:	780d      	ldrb	r5, [r1, #0]
   10a4e:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   10a50:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   10a54:	78cd      	ldrb	r5, [r1, #3]
   10a56:	432b      	orrs	r3, r5
   10a58:	788d      	ldrb	r5, [r1, #2]
   10a5a:	3104      	adds	r1, #4
   10a5c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   10a60:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   10a62:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   10a66:	d1f0      	bne.n	10a4a <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
   10a68:	4c14      	ldr	r4, [pc, #80]	; (10abc <tc_aes128_set_encrypt_key+0xa0>)
   10a6a:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   10a6c:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   10a6e:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   10a70:	d116      	bne.n	10aa0 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   10a72:	f3c3 4207 	ubfx	r2, r3, #16, #8
   10a76:	5ca5      	ldrb	r5, [r4, r2]
   10a78:	0e1a      	lsrs	r2, r3, #24
   10a7a:	5ca2      	ldrb	r2, [r4, r2]
   10a7c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   10a80:	f3c3 2507 	ubfx	r5, r3, #8, #8
   10a84:	b2db      	uxtb	r3, r3
   10a86:	5d65      	ldrb	r5, [r4, r5]
   10a88:	5ce3      	ldrb	r3, [r4, r3]
   10a8a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   10a8e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   10a92:	ad0c      	add	r5, sp, #48	; 0x30
   10a94:	f021 0303 	bic.w	r3, r1, #3
   10a98:	442b      	add	r3, r5
   10a9a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   10a9e:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
   10aa0:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   10aa4:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   10aa6:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   10aa8:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   10aaa:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   10aac:	d1de      	bne.n	10a6c <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   10aae:	2001      	movs	r0, #1
}
   10ab0:	b00d      	add	sp, #52	; 0x34
   10ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   10ab4:	4620      	mov	r0, r4
   10ab6:	e7fb      	b.n	10ab0 <tc_aes128_set_encrypt_key+0x94>
   10ab8:	00028fc4 	.word	0x00028fc4
   10abc:	00029ebc 	.word	0x00029ebc

00010ac0 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   10ac0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10ac4:	4615      	mov	r5, r2
   10ac6:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   10ac8:	4606      	mov	r6, r0
   10aca:	2800      	cmp	r0, #0
   10acc:	d058      	beq.n	10b80 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   10ace:	2900      	cmp	r1, #0
   10ad0:	d059      	beq.n	10b86 <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   10ad2:	2a00      	cmp	r2, #0
   10ad4:	d059      	beq.n	10b8a <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   10ad6:	2310      	movs	r3, #16
   10ad8:	460a      	mov	r2, r1
   10ada:	4668      	mov	r0, sp
   10adc:	4619      	mov	r1, r3
   10ade:	f014 f94b 	bl	24d78 <_copy>
	add_round_key(state, s->words);
   10ae2:	4629      	mov	r1, r5
   10ae4:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
   10ae6:	4c2a      	ldr	r4, [pc, #168]	; (10b90 <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
   10ae8:	f011 fd7d 	bl	225e6 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   10aec:	f105 0710 	add.w	r7, r5, #16
   10af0:	46a1      	mov	r9, r4
   10af2:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
   10af4:	46e8      	mov	r8, sp
{
   10af6:	466a      	mov	r2, sp
   10af8:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
   10afa:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   10afc:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
   10afe:	5c61      	ldrb	r1, [r4, r1]
   10b00:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   10b04:	d1f9      	bne.n	10afa <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
   10b06:	4668      	mov	r0, sp
   10b08:	f011 fdb2 	bl	22670 <shift_rows>
	mult_row_column(t, s);
   10b0c:	4669      	mov	r1, sp
   10b0e:	a804      	add	r0, sp, #16
   10b10:	f011 fde7 	bl	226e2 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   10b14:	a901      	add	r1, sp, #4
   10b16:	a805      	add	r0, sp, #20
   10b18:	f011 fde3 	bl	226e2 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   10b1c:	a902      	add	r1, sp, #8
   10b1e:	a806      	add	r0, sp, #24
   10b20:	f011 fddf 	bl	226e2 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   10b24:	a903      	add	r1, sp, #12
   10b26:	a807      	add	r0, sp, #28
   10b28:	f011 fddb 	bl	226e2 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   10b2c:	2310      	movs	r3, #16
   10b2e:	4619      	mov	r1, r3
   10b30:	eb0d 0203 	add.w	r2, sp, r3
   10b34:	4668      	mov	r0, sp
   10b36:	f014 f91f 	bl	24d78 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   10b3a:	4639      	mov	r1, r7
   10b3c:	4668      	mov	r0, sp
   10b3e:	3710      	adds	r7, #16
   10b40:	f011 fd51 	bl	225e6 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   10b44:	42af      	cmp	r7, r5
   10b46:	d1d5      	bne.n	10af4 <tc_aes_encrypt+0x34>
   10b48:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
   10b4a:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
   10b4e:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
   10b50:	f819 3003 	ldrb.w	r3, [r9, r3]
   10b54:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   10b58:	d1f7      	bne.n	10b4a <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
   10b5a:	4668      	mov	r0, sp
   10b5c:	f011 fd88 	bl	22670 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   10b60:	4629      	mov	r1, r5
   10b62:	4668      	mov	r0, sp
   10b64:	f011 fd3f 	bl	225e6 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   10b68:	2310      	movs	r3, #16
   10b6a:	4619      	mov	r1, r3
   10b6c:	466a      	mov	r2, sp
   10b6e:	4630      	mov	r0, r6
   10b70:	f014 f902 	bl	24d78 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   10b74:	4668      	mov	r0, sp
   10b76:	2210      	movs	r2, #16
   10b78:	4621      	mov	r1, r4
   10b7a:	f014 f90a 	bl	24d92 <_set>

	return TC_CRYPTO_SUCCESS;
   10b7e:	2001      	movs	r0, #1
}
   10b80:	b009      	add	sp, #36	; 0x24
   10b82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   10b86:	4608      	mov	r0, r1
   10b88:	e7fa      	b.n	10b80 <tc_aes_encrypt+0xc0>
   10b8a:	4610      	mov	r0, r2
   10b8c:	e7f8      	b.n	10b80 <tc_aes_encrypt+0xc0>
   10b8e:	bf00      	nop
   10b90:	00029ebc 	.word	0x00029ebc

00010b94 <blvl_ccc_cfg_changed>:
   10b94:	4b07      	ldr	r3, [pc, #28]	; (10bb4 <blvl_ccc_cfg_changed+0x20>)
   10b96:	4a08      	ldr	r2, [pc, #32]	; (10bb8 <blvl_ccc_cfg_changed+0x24>)
{
	ARG_UNUSED(attr);

	bool notif_enabled = (value == BT_GATT_CCC_NOTIFY);

	LOG_INF("BAS Notifications %s", notif_enabled ? "enabled" : "disabled");
   10b98:	4808      	ldr	r0, [pc, #32]	; (10bbc <blvl_ccc_cfg_changed+0x28>)
   10b9a:	1ad2      	subs	r2, r2, r3
   10b9c:	08d2      	lsrs	r2, r2, #3
   10b9e:	4b08      	ldr	r3, [pc, #32]	; (10bc0 <blvl_ccc_cfg_changed+0x2c>)
   10ba0:	0192      	lsls	r2, r2, #6
   10ba2:	2901      	cmp	r1, #1
   10ba4:	bf14      	ite	ne
   10ba6:	4601      	movne	r1, r0
   10ba8:	4619      	moveq	r1, r3
   10baa:	f042 0203 	orr.w	r2, r2, #3
   10bae:	4805      	ldr	r0, [pc, #20]	; (10bc4 <blvl_ccc_cfg_changed+0x30>)
   10bb0:	f013 b964 	b.w	23e7c <log_1>
   10bb4:	00028dd4 	.word	0x00028dd4
   10bb8:	00028de4 	.word	0x00028de4
   10bbc:	00029fc4 	.word	0x00029fc4
   10bc0:	00029fbc 	.word	0x00029fbc
   10bc4:	00029fcd 	.word	0x00029fcd

00010bc8 <read_blvl>:
}

static ssize_t read_blvl(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       uint16_t len, uint16_t offset)
{
   10bc8:	b510      	push	{r4, lr}
	uint8_t lvl8 = battery_level;
   10bca:	4c08      	ldr	r4, [pc, #32]	; (10bec <read_blvl+0x24>)
{
   10bcc:	b086      	sub	sp, #24
	uint8_t lvl8 = battery_level;
   10bce:	7824      	ldrb	r4, [r4, #0]
   10bd0:	f88d 4017 	strb.w	r4, [sp, #23]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &lvl8,
   10bd4:	2401      	movs	r4, #1
   10bd6:	9402      	str	r4, [sp, #8]
   10bd8:	f10d 0417 	add.w	r4, sp, #23
   10bdc:	9401      	str	r4, [sp, #4]
   10bde:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   10be2:	9400      	str	r4, [sp, #0]
   10be4:	f015 fa97 	bl	26116 <bt_gatt_attr_read>
				 sizeof(lvl8));
}
   10be8:	b006      	add	sp, #24
   10bea:	bd10      	pop	{r4, pc}
   10bec:	200008c5 	.word	0x200008c5

00010bf0 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   10bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10bf4:	b0a5      	sub	sp, #148	; 0x94
   10bf6:	4688      	mov	r8, r1
   10bf8:	9003      	str	r0, [sp, #12]
   10bfa:	4691      	mov	r9, r2
   10bfc:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   10bfe:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   10c00:	f899 0000 	ldrb.w	r0, [r9]
   10c04:	b910      	cbnz	r0, 10c0c <cbvprintf+0x1c>
			OUTC(' ');
			--width;
		}
	}

	return count;
   10c06:	4628      	mov	r0, r5
   10c08:	f000 be15 	b.w	11836 <cbvprintf+0xc46>
		if (*fp != '%') {
   10c0c:	f109 0301 	add.w	r3, r9, #1
   10c10:	2825      	cmp	r0, #37	; 0x25
   10c12:	9309      	str	r3, [sp, #36]	; 0x24
   10c14:	d007      	beq.n	10c26 <cbvprintf+0x36>
			OUTC(*fp++);
   10c16:	4641      	mov	r1, r8
			OUTC('%');
   10c18:	9b03      	ldr	r3, [sp, #12]
   10c1a:	4798      	blx	r3
   10c1c:	2800      	cmp	r0, #0
   10c1e:	f2c0 860a 	blt.w	11836 <cbvprintf+0xc46>
   10c22:	3501      	adds	r5, #1
		if (bps == NULL) {
   10c24:	e245      	b.n	110b2 <cbvprintf+0x4c2>
		} state = {
   10c26:	2218      	movs	r2, #24
   10c28:	2100      	movs	r1, #0
   10c2a:	a816      	add	r0, sp, #88	; 0x58
   10c2c:	f014 f933 	bl	24e96 <memset>
	if (*sp == '%') {
   10c30:	f899 3001 	ldrb.w	r3, [r9, #1]
   10c34:	2b25      	cmp	r3, #37	; 0x25
   10c36:	d079      	beq.n	10d2c <cbvprintf+0x13c>
   10c38:	2200      	movs	r2, #0
   10c3a:	9809      	ldr	r0, [sp, #36]	; 0x24
   10c3c:	4616      	mov	r6, r2
   10c3e:	4696      	mov	lr, r2
   10c40:	4617      	mov	r7, r2
   10c42:	4694      	mov	ip, r2
   10c44:	4601      	mov	r1, r0
		switch (*sp) {
   10c46:	f810 3b01 	ldrb.w	r3, [r0], #1
   10c4a:	2b2b      	cmp	r3, #43	; 0x2b
   10c4c:	f000 809e 	beq.w	10d8c <cbvprintf+0x19c>
   10c50:	f200 8095 	bhi.w	10d7e <cbvprintf+0x18e>
   10c54:	2b20      	cmp	r3, #32
   10c56:	f000 809b 	beq.w	10d90 <cbvprintf+0x1a0>
   10c5a:	2b23      	cmp	r3, #35	; 0x23
   10c5c:	f000 809b 	beq.w	10d96 <cbvprintf+0x1a6>
   10c60:	f1bc 0f00 	cmp.w	ip, #0
   10c64:	d005      	beq.n	10c72 <cbvprintf+0x82>
   10c66:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   10c6a:	f040 0004 	orr.w	r0, r0, #4
   10c6e:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   10c72:	b12f      	cbz	r7, 10c80 <cbvprintf+0x90>
   10c74:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   10c78:	f040 0008 	orr.w	r0, r0, #8
   10c7c:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   10c80:	f1be 0f00 	cmp.w	lr, #0
   10c84:	d005      	beq.n	10c92 <cbvprintf+0xa2>
   10c86:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   10c8a:	f040 0010 	orr.w	r0, r0, #16
   10c8e:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   10c92:	b12e      	cbz	r6, 10ca0 <cbvprintf+0xb0>
   10c94:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   10c98:	f040 0020 	orr.w	r0, r0, #32
   10c9c:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   10ca0:	b12a      	cbz	r2, 10cae <cbvprintf+0xbe>
   10ca2:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   10ca6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10caa:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
	if (conv->flag_zero && conv->flag_dash) {
   10cae:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   10cb2:	f002 0044 	and.w	r0, r2, #68	; 0x44
   10cb6:	2844      	cmp	r0, #68	; 0x44
   10cb8:	d103      	bne.n	10cc2 <cbvprintf+0xd2>
		conv->flag_zero = false;
   10cba:	f36f 1286 	bfc	r2, #6, #1
   10cbe:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
	conv->width_present = true;
   10cc2:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
	if (*sp == '*') {
   10cc6:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
   10cc8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   10ccc:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
	if (*sp == '*') {
   10cd0:	d17c      	bne.n	10dcc <cbvprintf+0x1dc>
		conv->width_star = true;
   10cd2:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
   10cd6:	f042 0201 	orr.w	r2, r2, #1
   10cda:	1c4b      	adds	r3, r1, #1
   10cdc:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
	conv->prec_present = (*sp == '.');
   10ce0:	781a      	ldrb	r2, [r3, #0]
   10ce2:	2a2e      	cmp	r2, #46	; 0x2e
   10ce4:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
   10ce8:	bf0c      	ite	eq
   10cea:	2101      	moveq	r1, #1
   10cec:	2100      	movne	r1, #0
   10cee:	f361 0241 	bfi	r2, r1, #1, #1
   10cf2:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
	if (!conv->prec_present) {
   10cf6:	d175      	bne.n	10de4 <cbvprintf+0x1f4>
	if (*sp == '*') {
   10cf8:	785a      	ldrb	r2, [r3, #1]
   10cfa:	2a2a      	cmp	r2, #42	; 0x2a
   10cfc:	d06b      	beq.n	10dd6 <cbvprintf+0x1e6>
   10cfe:	3301      	adds	r3, #1
	size_t val = 0;
   10d00:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
   10d02:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   10d04:	4618      	mov	r0, r3
   10d06:	f810 2b01 	ldrb.w	r2, [r0], #1
   10d0a:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   10d0e:	2f09      	cmp	r7, #9
   10d10:	f240 80aa 	bls.w	10e68 <cbvprintf+0x278>
	conv->unsupported |= ((conv->prec_value < 0)
   10d14:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
	conv->prec_value = prec;
   10d18:	911a      	str	r1, [sp, #104]	; 0x68
	conv->unsupported |= ((conv->prec_value < 0)
   10d1a:	f3c2 0040 	ubfx	r0, r2, #1, #1
   10d1e:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
   10d22:	f361 0241 	bfi	r2, r1, #1, #1
   10d26:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
	return sp;
   10d2a:	e05b      	b.n	10de4 <cbvprintf+0x1f4>
		conv->specifier = *sp++;
   10d2c:	f109 0202 	add.w	r2, r9, #2
   10d30:	9209      	str	r2, [sp, #36]	; 0x24
   10d32:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
		if (conv->width_star) {
   10d36:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
   10d3a:	07de      	lsls	r6, r3, #31
   10d3c:	f140 816f 	bpl.w	1101e <cbvprintf+0x42e>
			width = va_arg(ap, int);
   10d40:	f854 2b04 	ldr.w	r2, [r4], #4
   10d44:	9208      	str	r2, [sp, #32]
			if (width < 0) {
   10d46:	2a00      	cmp	r2, #0
   10d48:	da08      	bge.n	10d5c <cbvprintf+0x16c>
				conv->flag_dash = true;
   10d4a:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   10d4e:	f042 0204 	orr.w	r2, r2, #4
   10d52:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
				width = -width;
   10d56:	9a08      	ldr	r2, [sp, #32]
   10d58:	4252      	negs	r2, r2
		int width = -1;
   10d5a:	9208      	str	r2, [sp, #32]
		if (conv->prec_star) {
   10d5c:	0758      	lsls	r0, r3, #29
   10d5e:	f140 8166 	bpl.w	1102e <cbvprintf+0x43e>
			int arg = va_arg(ap, int);
   10d62:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
   10d66:	2f00      	cmp	r7, #0
   10d68:	f280 8165 	bge.w	11036 <cbvprintf+0x446>
				conv->prec_present = false;
   10d6c:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
   10d70:	f36f 0341 	bfc	r3, #1, #1
   10d74:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
		int precision = -1;
   10d78:	f04f 37ff 	mov.w	r7, #4294967295
   10d7c:	e15b      	b.n	11036 <cbvprintf+0x446>
		switch (*sp) {
   10d7e:	2b2d      	cmp	r3, #45	; 0x2d
   10d80:	d00b      	beq.n	10d9a <cbvprintf+0x1aa>
   10d82:	2b30      	cmp	r3, #48	; 0x30
   10d84:	f47f af6c 	bne.w	10c60 <cbvprintf+0x70>
			conv->flag_zero = true;
   10d88:	2201      	movs	r2, #1
	} while (loop);
   10d8a:	e75b      	b.n	10c44 <cbvprintf+0x54>
			conv->flag_plus = true;
   10d8c:	2701      	movs	r7, #1
   10d8e:	e759      	b.n	10c44 <cbvprintf+0x54>
			conv->flag_space = true;
   10d90:	f04f 0e01 	mov.w	lr, #1
   10d94:	e756      	b.n	10c44 <cbvprintf+0x54>
			conv->flag_hash = true;
   10d96:	2601      	movs	r6, #1
   10d98:	e754      	b.n	10c44 <cbvprintf+0x54>
		switch (*sp) {
   10d9a:	f04f 0c01 	mov.w	ip, #1
   10d9e:	e751      	b.n	10c44 <cbvprintf+0x54>
		val = 10U * val + *sp++ - '0';
   10da0:	fb0c 0202 	mla	r2, ip, r2, r0
   10da4:	3a30      	subs	r2, #48	; 0x30
   10da6:	4633      	mov	r3, r6
   10da8:	461e      	mov	r6, r3
   10daa:	f816 0b01 	ldrb.w	r0, [r6], #1
   10dae:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   10db2:	2f09      	cmp	r7, #9
   10db4:	d9f4      	bls.n	10da0 <cbvprintf+0x1b0>
	if (sp != wp) {
   10db6:	4299      	cmp	r1, r3
   10db8:	d092      	beq.n	10ce0 <cbvprintf+0xf0>
		conv->unsupported |= ((conv->width_value < 0)
   10dba:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
		conv->width_value = width;
   10dbe:	9219      	str	r2, [sp, #100]	; 0x64
				      || (width != (size_t)conv->width_value));
   10dc0:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   10dc2:	f362 0141 	bfi	r1, r2, #1, #1
   10dc6:	f88d 1060 	strb.w	r1, [sp, #96]	; 0x60
   10dca:	e789      	b.n	10ce0 <cbvprintf+0xf0>
   10dcc:	460b      	mov	r3, r1
	size_t val = 0;
   10dce:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   10dd0:	f04f 0c0a 	mov.w	ip, #10
   10dd4:	e7e8      	b.n	10da8 <cbvprintf+0x1b8>
		conv->prec_star = true;
   10dd6:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
   10dda:	f042 0204 	orr.w	r2, r2, #4
   10dde:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
		return ++sp;
   10de2:	3302      	adds	r3, #2
	switch (*sp) {
   10de4:	4619      	mov	r1, r3
   10de6:	f811 2b01 	ldrb.w	r2, [r1], #1
   10dea:	2a6c      	cmp	r2, #108	; 0x6c
   10dec:	d05c      	beq.n	10ea8 <cbvprintf+0x2b8>
   10dee:	d840      	bhi.n	10e72 <cbvprintf+0x282>
   10df0:	2a68      	cmp	r2, #104	; 0x68
   10df2:	d046      	beq.n	10e82 <cbvprintf+0x292>
   10df4:	2a6a      	cmp	r2, #106	; 0x6a
   10df6:	d061      	beq.n	10ebc <cbvprintf+0x2cc>
   10df8:	2a4c      	cmp	r2, #76	; 0x4c
   10dfa:	d067      	beq.n	10ecc <cbvprintf+0x2dc>
   10dfc:	4619      	mov	r1, r3
	conv->specifier = *sp++;
   10dfe:	460b      	mov	r3, r1
   10e00:	f813 2b01 	ldrb.w	r2, [r3], #1
   10e04:	9309      	str	r3, [sp, #36]	; 0x24
	switch (conv->specifier) {
   10e06:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
   10e08:	f88d 2063 	strb.w	r2, [sp, #99]	; 0x63
	switch (conv->specifier) {
   10e0c:	f200 80df 	bhi.w	10fce <cbvprintf+0x3de>
   10e10:	2a57      	cmp	r2, #87	; 0x57
   10e12:	d868      	bhi.n	10ee6 <cbvprintf+0x2f6>
   10e14:	2a41      	cmp	r2, #65	; 0x41
   10e16:	d004      	beq.n	10e22 <cbvprintf+0x232>
   10e18:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
   10e1c:	2b02      	cmp	r3, #2
   10e1e:	f200 80d6 	bhi.w	10fce <cbvprintf+0x3de>
		conv->specifier_cat = SPECIFIER_FP;
   10e22:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
			|| (conv->specifier == 'A');
   10e26:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
   10e2a:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
   10e2c:	f1a2 0a41 	sub.w	sl, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
   10e30:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
   10e34:	f1da 0200 	rsbs	r2, sl, #0
		conv->specifier_a = (conv->specifier == 'a')
   10e38:	f89d 1061 	ldrb.w	r1, [sp, #97]	; 0x61
		conv->specifier_cat = SPECIFIER_FP;
   10e3c:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
			|| (conv->specifier == 'A');
   10e40:	eb42 020a 	adc.w	r2, r2, sl
		conv->specifier_a = (conv->specifier == 'a')
   10e44:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
   10e48:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
   10e4a:	f88d 1061 	strb.w	r1, [sp, #97]	; 0x61
		if (conv->specifier_a
   10e4e:	b2cb      	uxtb	r3, r1
   10e50:	f100 80e3 	bmi.w	1101a <cbvprintf+0x42a>
		if (conv->length_mod == LENGTH_L) {
   10e54:	f003 0278 	and.w	r2, r3, #120	; 0x78
   10e58:	2a18      	cmp	r2, #24
   10e5a:	f040 80b5 	bne.w	10fc8 <cbvprintf+0x3d8>
			conv->length_mod = LENGTH_NONE;
   10e5e:	f36f 03c6 	bfc	r3, #3, #4
   10e62:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
   10e66:	e09c      	b.n	10fa2 <cbvprintf+0x3b2>
		val = 10U * val + *sp++ - '0';
   10e68:	fb06 2101 	mla	r1, r6, r1, r2
   10e6c:	3930      	subs	r1, #48	; 0x30
   10e6e:	4603      	mov	r3, r0
   10e70:	e748      	b.n	10d04 <cbvprintf+0x114>
	switch (*sp) {
   10e72:	2a74      	cmp	r2, #116	; 0x74
   10e74:	d026      	beq.n	10ec4 <cbvprintf+0x2d4>
   10e76:	2a7a      	cmp	r2, #122	; 0x7a
   10e78:	d1c0      	bne.n	10dfc <cbvprintf+0x20c>
		conv->length_mod = LENGTH_Z;
   10e7a:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
   10e7e:	2206      	movs	r2, #6
   10e80:	e00d      	b.n	10e9e <cbvprintf+0x2ae>
		if (*++sp == 'h') {
   10e82:	785a      	ldrb	r2, [r3, #1]
   10e84:	2a68      	cmp	r2, #104	; 0x68
   10e86:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
   10e8a:	d106      	bne.n	10e9a <cbvprintf+0x2aa>
			conv->length_mod = LENGTH_HH;
   10e8c:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   10e8e:	f361 02c6 	bfi	r2, r1, #3, #4
   10e92:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
			++sp;
   10e96:	1c99      	adds	r1, r3, #2
   10e98:	e7b1      	b.n	10dfe <cbvprintf+0x20e>
			conv->length_mod = LENGTH_H;
   10e9a:	4613      	mov	r3, r2
   10e9c:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
   10e9e:	f362 03c6 	bfi	r3, r2, #3, #4
   10ea2:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
		break;
   10ea6:	e7aa      	b.n	10dfe <cbvprintf+0x20e>
		if (*++sp == 'l') {
   10ea8:	785a      	ldrb	r2, [r3, #1]
   10eaa:	2a6c      	cmp	r2, #108	; 0x6c
   10eac:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
   10eb0:	d101      	bne.n	10eb6 <cbvprintf+0x2c6>
			conv->length_mod = LENGTH_LL;
   10eb2:	2104      	movs	r1, #4
   10eb4:	e7eb      	b.n	10e8e <cbvprintf+0x29e>
			conv->length_mod = LENGTH_L;
   10eb6:	4613      	mov	r3, r2
   10eb8:	2203      	movs	r2, #3
   10eba:	e7f0      	b.n	10e9e <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_J;
   10ebc:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
   10ec0:	2205      	movs	r2, #5
   10ec2:	e7ec      	b.n	10e9e <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_T;
   10ec4:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
   10ec8:	2207      	movs	r2, #7
   10eca:	e7e8      	b.n	10e9e <cbvprintf+0x2ae>
		conv->unsupported = true;
   10ecc:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
   10ed0:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   10ed4:	f023 0302 	bic.w	r3, r3, #2
   10ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   10edc:	f043 0302 	orr.w	r3, r3, #2
   10ee0:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
		break;
   10ee4:	e78b      	b.n	10dfe <cbvprintf+0x20e>
   10ee6:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
   10eea:	2b20      	cmp	r3, #32
   10eec:	d86f      	bhi.n	10fce <cbvprintf+0x3de>
   10eee:	a101      	add	r1, pc, #4	; (adr r1, 10ef4 <cbvprintf+0x304>)
   10ef0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   10ef4:	00010fa7 	.word	0x00010fa7
   10ef8:	00010fcf 	.word	0x00010fcf
   10efc:	00010fcf 	.word	0x00010fcf
   10f00:	00010fcf 	.word	0x00010fcf
   10f04:	00010fcf 	.word	0x00010fcf
   10f08:	00010fcf 	.word	0x00010fcf
   10f0c:	00010fcf 	.word	0x00010fcf
   10f10:	00010fcf 	.word	0x00010fcf
   10f14:	00010fcf 	.word	0x00010fcf
   10f18:	00010e23 	.word	0x00010e23
   10f1c:	00010fcf 	.word	0x00010fcf
   10f20:	00010fa7 	.word	0x00010fa7
   10f24:	00010f79 	.word	0x00010f79
   10f28:	00010e23 	.word	0x00010e23
   10f2c:	00010e23 	.word	0x00010e23
   10f30:	00010e23 	.word	0x00010e23
   10f34:	00010fcf 	.word	0x00010fcf
   10f38:	00010f79 	.word	0x00010f79
   10f3c:	00010fcf 	.word	0x00010fcf
   10f40:	00010fcf 	.word	0x00010fcf
   10f44:	00010fcf 	.word	0x00010fcf
   10f48:	00010fcf 	.word	0x00010fcf
   10f4c:	00010fdd 	.word	0x00010fdd
   10f50:	00010fa7 	.word	0x00010fa7
   10f54:	00010ffd 	.word	0x00010ffd
   10f58:	00010fcf 	.word	0x00010fcf
   10f5c:	00010fcf 	.word	0x00010fcf
   10f60:	00010ffd 	.word	0x00010ffd
   10f64:	00010fcf 	.word	0x00010fcf
   10f68:	00010fa7 	.word	0x00010fa7
   10f6c:	00010fcf 	.word	0x00010fcf
   10f70:	00010fcf 	.word	0x00010fcf
   10f74:	00010fa7 	.word	0x00010fa7
		conv->specifier_cat = SPECIFIER_SINT;
   10f78:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
   10f7c:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
   10f7e:	f361 0302 	bfi	r3, r1, #0, #3
   10f82:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
		if (conv->length_mod == LENGTH_UPPER_L) {
   10f86:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
   10f8a:	f003 0378 	and.w	r3, r3, #120	; 0x78
   10f8e:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
   10f90:	bf02      	ittt	eq
   10f92:	f89d 1060 	ldrbeq.w	r1, [sp, #96]	; 0x60
   10f96:	f041 0101 	orreq.w	r1, r1, #1
   10f9a:	f88d 1060 	strbeq.w	r1, [sp, #96]	; 0x60
		if (conv->specifier == 'c') {
   10f9e:	2a63      	cmp	r2, #99	; 0x63
   10fa0:	d005      	beq.n	10fae <cbvprintf+0x3be>
	bool unsupported = false;
   10fa2:	2300      	movs	r3, #0
   10fa4:	e006      	b.n	10fb4 <cbvprintf+0x3c4>
		conv->specifier_cat = SPECIFIER_UINT;
   10fa6:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
   10faa:	2102      	movs	r1, #2
   10fac:	e7e7      	b.n	10f7e <cbvprintf+0x38e>
			unsupported = (conv->length_mod != LENGTH_NONE);
   10fae:	3b00      	subs	r3, #0
   10fb0:	bf18      	it	ne
   10fb2:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   10fb4:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   10fb8:	f3c2 0140 	ubfx	r1, r2, #1, #1
   10fbc:	430b      	orrs	r3, r1
   10fbe:	f363 0241 	bfi	r2, r3, #1, #1
   10fc2:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
	return sp;
   10fc6:	e6b6      	b.n	10d36 <cbvprintf+0x146>
		} else if ((conv->length_mod != LENGTH_NONE)
   10fc8:	f013 0f38 	tst.w	r3, #56	; 0x38
   10fcc:	d0e9      	beq.n	10fa2 <cbvprintf+0x3b2>
			conv->invalid = true;
   10fce:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
   10fd2:	f043 0301 	orr.w	r3, r3, #1
   10fd6:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
   10fda:	e7e2      	b.n	10fa2 <cbvprintf+0x3b2>
		conv->specifier_cat = SPECIFIER_PTR;
   10fdc:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
   10fe0:	2203      	movs	r2, #3
   10fe2:	f362 0302 	bfi	r3, r2, #0, #3
   10fe6:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
		if (conv->length_mod == LENGTH_UPPER_L) {
   10fea:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
   10fee:	f003 0378 	and.w	r3, r3, #120	; 0x78
   10ff2:	f1a3 0740 	sub.w	r7, r3, #64	; 0x40
   10ff6:	427b      	negs	r3, r7
   10ff8:	417b      	adcs	r3, r7
   10ffa:	e7db      	b.n	10fb4 <cbvprintf+0x3c4>
		conv->specifier_cat = SPECIFIER_PTR;
   10ffc:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
   11000:	2203      	movs	r2, #3
   11002:	f362 0302 	bfi	r3, r2, #0, #3
   11006:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
		if (conv->length_mod != LENGTH_NONE) {
   1100a:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
   1100e:	f013 0f78 	tst.w	r3, #120	; 0x78
   11012:	bf14      	ite	ne
   11014:	2301      	movne	r3, #1
   11016:	2300      	moveq	r3, #0
   11018:	e7cc      	b.n	10fb4 <cbvprintf+0x3c4>
			unsupported = true;
   1101a:	2301      	movs	r3, #1
   1101c:	e7ca      	b.n	10fb4 <cbvprintf+0x3c4>
		} else if (conv->width_present) {
   1101e:	f99d 2060 	ldrsb.w	r2, [sp, #96]	; 0x60
   11022:	2a00      	cmp	r2, #0
			width = conv->width_value;
   11024:	bfb4      	ite	lt
   11026:	9a19      	ldrlt	r2, [sp, #100]	; 0x64
		int width = -1;
   11028:	f04f 32ff 	movge.w	r2, #4294967295
   1102c:	e695      	b.n	10d5a <cbvprintf+0x16a>
		} else if (conv->prec_present) {
   1102e:	0799      	lsls	r1, r3, #30
   11030:	f57f aea2 	bpl.w	10d78 <cbvprintf+0x188>
			precision = conv->prec_value;
   11034:	9f1a      	ldr	r7, [sp, #104]	; 0x68
		conv->pad0_value = 0;
   11036:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   11038:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
		    && (conv->specifier_cat == SPECIFIER_FP)
   1103c:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
   11040:	f003 0307 	and.w	r3, r3, #7
   11044:	2b04      	cmp	r3, #4
   11046:	d109      	bne.n	1105c <cbvprintf+0x46c>
		    && !conv->prec_present) {
   11048:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
   1104c:	079a      	lsls	r2, r3, #30
   1104e:	d405      	bmi.n	1105c <cbvprintf+0x46c>
			if (conv->specifier_a) {
   11050:	f99d 3061 	ldrsb.w	r3, [sp, #97]	; 0x61
				precision = 6;
   11054:	2b00      	cmp	r3, #0
   11056:	bfb4      	ite	lt
   11058:	270d      	movlt	r7, #13
   1105a:	2706      	movge	r7, #6
			= (enum specifier_cat_enum)conv->specifier_cat;
   1105c:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
			= (enum length_mod_enum)conv->length_mod;
   11060:	f89d 1061 	ldrb.w	r1, [sp, #97]	; 0x61
		enum specifier_cat_enum specifier_cat
   11064:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   11068:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   1106a:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   1106e:	d136      	bne.n	110de <cbvprintf+0x4ee>
			switch (length_mod) {
   11070:	1ecb      	subs	r3, r1, #3
   11072:	2b04      	cmp	r3, #4
   11074:	d820      	bhi.n	110b8 <cbvprintf+0x4c8>
   11076:	e8df f003 	tbb	[pc, r3]
   1107a:	0703      	.short	0x0703
   1107c:	1f07      	.short	0x1f07
   1107e:	1f          	.byte	0x1f
   1107f:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   11080:	f854 2b04 	ldr.w	r2, [r4], #4
				value->sint = (short)value->sint;
   11084:	17d3      	asrs	r3, r2, #31
   11086:	e004      	b.n	11092 <cbvprintf+0x4a2>
					(sint_value_type)va_arg(ap, intmax_t);
   11088:	3407      	adds	r4, #7
   1108a:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   1108e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->sint = (short)value->sint;
   11092:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
		if (conv->invalid || conv->unsupported) {
   11096:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
   1109a:	07b3      	lsls	r3, r6, #30
   1109c:	d055      	beq.n	1114a <cbvprintf+0x55a>
			OUTS(sp, fp);
   1109e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   110a0:	9803      	ldr	r0, [sp, #12]
   110a2:	464a      	mov	r2, r9
   110a4:	4641      	mov	r1, r8
   110a6:	f011 fbe0 	bl	2286a <outs>
   110aa:	2800      	cmp	r0, #0
   110ac:	f2c0 83c3 	blt.w	11836 <cbvprintf+0xc46>
   110b0:	4405      	add	r5, r0
			while (pad_len-- > 0) {
   110b2:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   110b6:	e5a3      	b.n	10c00 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   110b8:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
   110bc:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   110be:	ea4f 73e2 	mov.w	r3, r2, asr #31
   110c2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
			if (length_mod == LENGTH_HH) {
   110c6:	d105      	bne.n	110d4 <cbvprintf+0x4e4>
				value->uint = (unsigned char)value->uint;
   110c8:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
				value->uint = (unsigned short)value->uint;
   110cc:	9316      	str	r3, [sp, #88]	; 0x58
   110ce:	2300      	movs	r3, #0
   110d0:	9317      	str	r3, [sp, #92]	; 0x5c
   110d2:	e7e0      	b.n	11096 <cbvprintf+0x4a6>
			} else if (length_mod == LENGTH_H) {
   110d4:	2902      	cmp	r1, #2
   110d6:	d1de      	bne.n	11096 <cbvprintf+0x4a6>
				value->sint = (short)value->sint;
   110d8:	f9bd 2058 	ldrsh.w	r2, [sp, #88]	; 0x58
   110dc:	e7d2      	b.n	11084 <cbvprintf+0x494>
		} else if (specifier_cat == SPECIFIER_UINT) {
   110de:	2b02      	cmp	r3, #2
   110e0:	d123      	bne.n	1112a <cbvprintf+0x53a>
			switch (length_mod) {
   110e2:	1ecb      	subs	r3, r1, #3
   110e4:	2b04      	cmp	r3, #4
   110e6:	d813      	bhi.n	11110 <cbvprintf+0x520>
   110e8:	e8df f003 	tbb	[pc, r3]
   110ec:	120a0a03 	.word	0x120a0a03
   110f0:	12          	.byte	0x12
   110f1:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
   110f2:	6822      	ldr	r2, [r4, #0]
   110f4:	9216      	str	r2, [sp, #88]	; 0x58
   110f6:	2300      	movs	r3, #0
   110f8:	1d20      	adds	r0, r4, #4
   110fa:	9317      	str	r3, [sp, #92]	; 0x5c
					(uint_value_type)va_arg(ap, size_t);
   110fc:	4604      	mov	r4, r0
   110fe:	e7ca      	b.n	11096 <cbvprintf+0x4a6>
					(uint_value_type)va_arg(ap,
   11100:	3407      	adds	r4, #7
   11102:	f024 0007 	bic.w	r0, r4, #7
				value->uint =
   11106:	e8f0 2302 	ldrd	r2, r3, [r0], #8
   1110a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
				break;
   1110e:	e7f5      	b.n	110fc <cbvprintf+0x50c>
					(uint_value_type)va_arg(ap, size_t);
   11110:	f854 3b04 	ldr.w	r3, [r4], #4
   11114:	9316      	str	r3, [sp, #88]	; 0x58
			if (length_mod == LENGTH_HH) {
   11116:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
   11118:	f04f 0300 	mov.w	r3, #0
   1111c:	9317      	str	r3, [sp, #92]	; 0x5c
			if (length_mod == LENGTH_HH) {
   1111e:	d0d3      	beq.n	110c8 <cbvprintf+0x4d8>
			} else if (length_mod == LENGTH_H) {
   11120:	2902      	cmp	r1, #2
   11122:	d1b8      	bne.n	11096 <cbvprintf+0x4a6>
				value->uint = (unsigned short)value->uint;
   11124:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   11128:	e7d0      	b.n	110cc <cbvprintf+0x4dc>
		} else if (specifier_cat == SPECIFIER_FP) {
   1112a:	2b04      	cmp	r3, #4
   1112c:	d107      	bne.n	1113e <cbvprintf+0x54e>
			if (length_mod == LENGTH_UPPER_L) {
   1112e:	3407      	adds	r4, #7
   11130:	f024 0407 	bic.w	r4, r4, #7
   11134:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
   11138:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   1113c:	e7ab      	b.n	11096 <cbvprintf+0x4a6>
		} else if (specifier_cat == SPECIFIER_PTR) {
   1113e:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   11140:	bf04      	itt	eq
   11142:	f854 3b04 	ldreq.w	r3, [r4], #4
   11146:	9316      	streq	r3, [sp, #88]	; 0x58
   11148:	e7a5      	b.n	11096 <cbvprintf+0x4a6>
		switch (conv->specifier) {
   1114a:	f89d 9063 	ldrb.w	r9, [sp, #99]	; 0x63
   1114e:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
   11152:	d8ae      	bhi.n	110b2 <cbvprintf+0x4c2>
   11154:	f1b9 0f57 	cmp.w	r9, #87	; 0x57
   11158:	f200 80a6 	bhi.w	112a8 <cbvprintf+0x6b8>
   1115c:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
   11160:	f000 80ec 	beq.w	1133c <cbvprintf+0x74c>
   11164:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
   11168:	d9a3      	bls.n	110b2 <cbvprintf+0x4c2>
   1116a:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
   1116e:	d003      	beq.n	11178 <cbvprintf+0x588>
   11170:	f1a9 0345 	sub.w	r3, r9, #69	; 0x45
   11174:	2b02      	cmp	r3, #2
   11176:	d89c      	bhi.n	110b2 <cbvprintf+0x4c2>
	} u = {
   11178:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
	if ((u.u64 & SIGN_MASK) != 0U) {
   1117c:	2a00      	cmp	r2, #0
   1117e:	f173 0100 	sbcs.w	r1, r3, #0
   11182:	f2c0 81d3 	blt.w	1152c <cbvprintf+0x93c>
	} else if (conv->flag_plus) {
   11186:	0731      	lsls	r1, r6, #28
   11188:	f100 81d2 	bmi.w	11530 <cbvprintf+0x940>
		*sign = ' ';
   1118c:	f016 0610 	ands.w	r6, r6, #16
   11190:	bf18      	it	ne
   11192:	2620      	movne	r6, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   11194:	f3c3 5b0a 	ubfx	fp, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
   11198:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1119c:	9206      	str	r2, [sp, #24]
   1119e:	9307      	str	r3, [sp, #28]
   111a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   111a4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	bool is_subnormal = (expo == 0) && (fract != 0);
   111a8:	f1bb 0f00 	cmp.w	fp, #0
   111ac:	f040 81c2 	bne.w	11534 <cbvprintf+0x944>
   111b0:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   111b4:	4313      	orrs	r3, r2
   111b6:	bf14      	ite	ne
   111b8:	f04f 0c01 	movne.w	ip, #1
   111bc:	f04f 0c00 	moveq.w	ip, #0
	fract <<= EXPONENT_BITS;
   111c0:	9907      	ldr	r1, [sp, #28]
   111c2:	02cb      	lsls	r3, r1, #11
   111c4:	9906      	ldr	r1, [sp, #24]
   111c6:	02ca      	lsls	r2, r1, #11
   111c8:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
	if ((expo | fract) != 0) {
   111cc:	4658      	mov	r0, fp
   111ce:	ea4b 0102 	orr.w	r1, fp, r2
   111d2:	910c      	str	r1, [sp, #48]	; 0x30
   111d4:	17c1      	asrs	r1, r0, #31
   111d6:	4319      	orrs	r1, r3
   111d8:	910d      	str	r1, [sp, #52]	; 0x34
   111da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
		c = 'f';
   111de:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
   111e2:	bf08      	it	eq
   111e4:	f04f 0966 	moveq.w	r9, #102	; 0x66
	if ((expo | fract) != 0) {
   111e8:	4301      	orrs	r1, r0
	fract &= ~SIGN_MASK;
   111ea:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	if ((expo | fract) != 0) {
   111ee:	f000 8214 	beq.w	1161a <cbvprintf+0xa2a>
		if (is_subnormal) {
   111f2:	f1bc 0f00 	cmp.w	ip, #0
   111f6:	f040 81d4 	bne.w	115a2 <cbvprintf+0x9b2>
		fract |= BIT_63;
   111fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
   111fc:	9304      	str	r3, [sp, #16]
   111fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   11200:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   11204:	9305      	str	r3, [sp, #20]
   11206:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1120a:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   1120e:	2300      	movs	r3, #0
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
   11210:	f2ab 3bfe 	subw	fp, fp, #1022	; 0x3fe
		fract |= BIT_63;
   11214:	461a      	mov	r2, r3
		fract *= 5U;
   11216:	2105      	movs	r1, #5
	while (expo < -2) {
   11218:	f11b 0f02 	cmn.w	fp, #2
   1121c:	f2c0 81ca 	blt.w	115b4 <cbvprintf+0x9c4>
   11220:	b11b      	cbz	r3, 1122a <cbvprintf+0x63a>
   11222:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   11226:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
	while (expo > 0) {
   1122a:	f1bb 0f00 	cmp.w	fp, #0
   1122e:	e9dd 3112 	ldrd	r3, r1, [sp, #72]	; 0x48
   11232:	f300 81da 	bgt.w	115ea <cbvprintf+0x9fa>
	fract >>= (4 - expo);
   11236:	9913      	ldr	r1, [sp, #76]	; 0x4c
   11238:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1123a:	f1cb 0004 	rsb	r0, fp, #4
   1123e:	f10b 0b1c 	add.w	fp, fp, #28
   11242:	fa01 fb0b 	lsl.w	fp, r1, fp
   11246:	f1a0 0c20 	sub.w	ip, r0, #32
   1124a:	40c3      	lsrs	r3, r0
   1124c:	fa21 fc0c 	lsr.w	ip, r1, ip
   11250:	ea43 030b 	orr.w	r3, r3, fp
   11254:	ea43 030c 	orr.w	r3, r3, ip
   11258:	40c1      	lsrs	r1, r0
   1125a:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
	if ((c == 'g') || (c == 'G')) {
   1125e:	f009 03df 	and.w	r3, r9, #223	; 0xdf
   11262:	2b47      	cmp	r3, #71	; 0x47
   11264:	f040 81e0 	bne.w	11628 <cbvprintf+0xa38>
		if (decexp < (-4 + 1) || decexp > precision) {
   11268:	1cd0      	adds	r0, r2, #3
   1126a:	db02      	blt.n	11272 <cbvprintf+0x682>
   1126c:	4297      	cmp	r7, r2
   1126e:	f280 81d7 	bge.w	11620 <cbvprintf+0xa30>
			c += 'e' - 'g';  /* e or E */
   11272:	f1a9 0902 	sub.w	r9, r9, #2
			if (precision > 0) {
   11276:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
   11278:	fa5f f989 	uxtb.w	r9, r9
			if (precision > 0) {
   1127c:	dd00      	ble.n	11280 <cbvprintf+0x690>
				precision--;
   1127e:	3f01      	subs	r7, #1
		if (!conv->flag_hash && (precision > 0)) {
   11280:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
   11284:	0699      	lsls	r1, r3, #26
   11286:	f100 81cf 	bmi.w	11628 <cbvprintf+0xa38>
   1128a:	2f00      	cmp	r7, #0
   1128c:	bfd4      	ite	le
   1128e:	2300      	movle	r3, #0
   11290:	2301      	movgt	r3, #1
	if (c == 'f') {
   11292:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
	bool prune_zero = false;
   11296:	930e      	str	r3, [sp, #56]	; 0x38
	if (c == 'f') {
   11298:	f040 81c8 	bne.w	1162c <cbvprintf+0xa3c>
		if (decimals < 0) {
   1129c:	18bb      	adds	r3, r7, r2
   1129e:	f140 81c6 	bpl.w	1162e <cbvprintf+0xa3e>
			decimals = 0;
   112a2:	f04f 0a00 	mov.w	sl, #0
   112a6:	e1c6      	b.n	11636 <cbvprintf+0xa46>
   112a8:	f1a9 0358 	sub.w	r3, r9, #88	; 0x58
   112ac:	2b20      	cmp	r3, #32
   112ae:	f63f af00 	bhi.w	110b2 <cbvprintf+0x4c2>
   112b2:	a201      	add	r2, pc, #4	; (adr r2, 112b8 <cbvprintf+0x6c8>)
   112b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   112b8:	000114cd 	.word	0x000114cd
   112bc:	000110b3 	.word	0x000110b3
   112c0:	000110b3 	.word	0x000110b3
   112c4:	000110b3 	.word	0x000110b3
   112c8:	000110b3 	.word	0x000110b3
   112cc:	000110b3 	.word	0x000110b3
   112d0:	000110b3 	.word	0x000110b3
   112d4:	000110b3 	.word	0x000110b3
   112d8:	000110b3 	.word	0x000110b3
   112dc:	00011179 	.word	0x00011179
   112e0:	000110b3 	.word	0x000110b3
   112e4:	00011369 	.word	0x00011369
   112e8:	0001146d 	.word	0x0001146d
   112ec:	00011179 	.word	0x00011179
   112f0:	00011179 	.word	0x00011179
   112f4:	00011179 	.word	0x00011179
   112f8:	000110b3 	.word	0x000110b3
   112fc:	0001146d 	.word	0x0001146d
   11300:	000110b3 	.word	0x000110b3
   11304:	000110b3 	.word	0x000110b3
   11308:	000110b3 	.word	0x000110b3
   1130c:	000110b3 	.word	0x000110b3
   11310:	00011503 	.word	0x00011503
   11314:	000114cd 	.word	0x000114cd
   11318:	000114d1 	.word	0x000114d1
   1131c:	000110b3 	.word	0x000110b3
   11320:	000110b3 	.word	0x000110b3
   11324:	00011343 	.word	0x00011343
   11328:	000110b3 	.word	0x000110b3
   1132c:	000114cd 	.word	0x000114cd
   11330:	000110b3 	.word	0x000110b3
   11334:	000110b3 	.word	0x000110b3
   11338:	000114cd 	.word	0x000114cd
			OUTC('%');
   1133c:	4641      	mov	r1, r8
   1133e:	4648      	mov	r0, r9
   11340:	e46a      	b.n	10c18 <cbvprintf+0x28>
			if (precision >= 0) {
   11342:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
   11344:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
			if (precision >= 0) {
   11348:	db0a      	blt.n	11360 <cbvprintf+0x770>
				len = strnlen(bps, precision);
   1134a:	4639      	mov	r1, r7
   1134c:	4648      	mov	r0, r9
   1134e:	f013 fd63 	bl	24e18 <strnlen>
			bpe = bps + len;
   11352:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
   11356:	2600      	movs	r6, #0
		if (bps == NULL) {
   11358:	f1b9 0f00 	cmp.w	r9, #0
   1135c:	d10c      	bne.n	11378 <cbvprintf+0x788>
   1135e:	e6a8      	b.n	110b2 <cbvprintf+0x4c2>
				len = strlen(bps);
   11360:	4648      	mov	r0, r9
   11362:	f013 fd52 	bl	24e0a <strlen>
   11366:	e7f4      	b.n	11352 <cbvprintf+0x762>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   11368:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1136a:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
		char sign = 0;
   1136e:	2600      	movs	r6, #0
			bpe = buf + 1;
   11370:	f10d 0a75 	add.w	sl, sp, #117	; 0x75
				bps = encode_float(value->dbl, conv, precision,
   11374:	f10d 0974 	add.w	r9, sp, #116	; 0x74
		size_t nj_len = (bpe - bps);
   11378:	ebaa 0209 	sub.w	r2, sl, r9
		if (sign != 0) {
   1137c:	b106      	cbz	r6, 11380 <cbvprintf+0x790>
			nj_len += 1U;
   1137e:	3201      	adds	r2, #1
		if (conv->altform_0c) {
   11380:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
   11384:	06c3      	lsls	r3, r0, #27
   11386:	f140 824b 	bpl.w	11820 <cbvprintf+0xc30>
			nj_len += 2U;
   1138a:	3202      	adds	r2, #2
		nj_len += conv->pad0_value;
   1138c:	9919      	ldr	r1, [sp, #100]	; 0x64
		if (width > 0) {
   1138e:	9b08      	ldr	r3, [sp, #32]
		if (conv->pad_fp) {
   11390:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
   11392:	440a      	add	r2, r1
			nj_len += conv->pad0_pre_exp;
   11394:	bf44      	itt	mi
   11396:	991a      	ldrmi	r1, [sp, #104]	; 0x68
   11398:	1852      	addmi	r2, r2, r1
		if (width > 0) {
   1139a:	2b00      	cmp	r3, #0
   1139c:	dd25      	ble.n	113ea <cbvprintf+0x7fa>
			width -= (int)nj_len;
   1139e:	1a9b      	subs	r3, r3, r2
			if (!conv->flag_dash) {
   113a0:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   113a4:	0751      	lsls	r1, r2, #29
   113a6:	f3c2 0b80 	ubfx	fp, r2, #2, #1
   113aa:	f100 824b 	bmi.w	11844 <cbvprintf+0xc54>
				if (conv->flag_zero) {
   113ae:	0657      	lsls	r7, r2, #25
   113b0:	f140 8244 	bpl.w	1183c <cbvprintf+0xc4c>
					if (sign != 0) {
   113b4:	2e00      	cmp	r6, #0
   113b6:	f000 8243 	beq.w	11840 <cbvprintf+0xc50>
   113ba:	9308      	str	r3, [sp, #32]
						OUTC(sign);
   113bc:	4641      	mov	r1, r8
   113be:	9b03      	ldr	r3, [sp, #12]
   113c0:	4630      	mov	r0, r6
   113c2:	4798      	blx	r3
   113c4:	2800      	cmp	r0, #0
   113c6:	f2c0 8236 	blt.w	11836 <cbvprintf+0xc46>
   113ca:	9b08      	ldr	r3, [sp, #32]
   113cc:	3501      	adds	r5, #1
						sign = 0;
   113ce:	465e      	mov	r6, fp
					pad = '0';
   113d0:	2730      	movs	r7, #48	; 0x30
   113d2:	9308      	str	r3, [sp, #32]
   113d4:	eb03 0b05 	add.w	fp, r3, r5
   113d8:	9b08      	ldr	r3, [sp, #32]
   113da:	ebab 0503 	sub.w	r5, fp, r3
				while (width-- > 0) {
   113de:	2b00      	cmp	r3, #0
   113e0:	f103 33ff 	add.w	r3, r3, #4294967295
   113e4:	9308      	str	r3, [sp, #32]
   113e6:	f300 821f 	bgt.w	11828 <cbvprintf+0xc38>
		if (sign != 0) {
   113ea:	b13e      	cbz	r6, 113fc <cbvprintf+0x80c>
			OUTC(sign);
   113ec:	9b03      	ldr	r3, [sp, #12]
   113ee:	4641      	mov	r1, r8
   113f0:	4630      	mov	r0, r6
   113f2:	4798      	blx	r3
   113f4:	2800      	cmp	r0, #0
   113f6:	f2c0 821e 	blt.w	11836 <cbvprintf+0xc46>
   113fa:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
   113fc:	f89d 2062 	ldrb.w	r2, [sp, #98]	; 0x62
   11400:	0656      	lsls	r6, r2, #25
   11402:	f140 827d 	bpl.w	11900 <cbvprintf+0xd10>
			if (conv->specifier_a) {
   11406:	f99d 2061 	ldrsb.w	r2, [sp, #97]	; 0x61
   1140a:	2a00      	cmp	r2, #0
   1140c:	f2c0 821c 	blt.w	11848 <cbvprintf+0xc58>
   11410:	eba5 0509 	sub.w	r5, r5, r9
				while (isdigit((int)*cp)) {
   11414:	f899 0000 	ldrb.w	r0, [r9]
   11418:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
   1141c:	2a09      	cmp	r2, #9
   1141e:	464f      	mov	r7, r9
   11420:	eb05 0b09 	add.w	fp, r5, r9
   11424:	f109 0901 	add.w	r9, r9, #1
   11428:	f240 823e 	bls.w	118a8 <cbvprintf+0xcb8>
				if (!conv->pad_postdp) {
   1142c:	f89d 2062 	ldrb.w	r2, [sp, #98]	; 0x62
				pad_len = conv->pad0_value;
   11430:	9e19      	ldr	r6, [sp, #100]	; 0x64
				if (!conv->pad_postdp) {
   11432:	0690      	lsls	r0, r2, #26
   11434:	d408      	bmi.n	11448 <cbvprintf+0x858>
   11436:	eb06 090b 	add.w	r9, r6, fp
					while (pad_len-- > 0) {
   1143a:	2e00      	cmp	r6, #0
   1143c:	eba9 0b06 	sub.w	fp, r9, r6
   11440:	f106 36ff 	add.w	r6, r6, #4294967295
   11444:	f300 8237 	bgt.w	118b6 <cbvprintf+0xcc6>
				if (*cp == '.') {
   11448:	7838      	ldrb	r0, [r7, #0]
   1144a:	282e      	cmp	r0, #46	; 0x2e
   1144c:	d10b      	bne.n	11466 <cbvprintf+0x876>
					OUTC(*cp++);
   1144e:	9b03      	ldr	r3, [sp, #12]
   11450:	4641      	mov	r1, r8
   11452:	4798      	blx	r3
						OUTC('0');
   11454:	2800      	cmp	r0, #0
   11456:	f2c0 81ee 	blt.w	11836 <cbvprintf+0xc46>
					while (pad_len-- > 0) {
   1145a:	2e00      	cmp	r6, #0
						OUTC('0');
   1145c:	f10b 0b01 	add.w	fp, fp, #1
					while (pad_len-- > 0) {
   11460:	f300 8231 	bgt.w	118c6 <cbvprintf+0xcd6>
					OUTC(*cp++);
   11464:	3701      	adds	r7, #1
   11466:	ebab 0b07 	sub.w	fp, fp, r7
   1146a:	e237      	b.n	118dc <cbvprintf+0xcec>
			if (conv->flag_plus) {
   1146c:	0730      	lsls	r0, r6, #28
   1146e:	d42b      	bmi.n	114c8 <cbvprintf+0x8d8>
				sign = ' ';
   11470:	f016 0610 	ands.w	r6, r6, #16
   11474:	bf18      	it	ne
   11476:	2620      	movne	r6, #32
			sint = value->sint;
   11478:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
			if (sint < 0) {
   1147c:	2a00      	cmp	r2, #0
   1147e:	f173 0100 	sbcs.w	r1, r3, #0
   11482:	da05      	bge.n	11490 <cbvprintf+0x8a0>
				value->uint = (uint_value_type)-sint;
   11484:	4252      	negs	r2, r2
   11486:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1148a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
				sign = '-';
   1148e:	262d      	movs	r6, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
   11490:	f10d 038d 	add.w	r3, sp, #141	; 0x8d
   11494:	9300      	str	r3, [sp, #0]
   11496:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   1149a:	ab1d      	add	r3, sp, #116	; 0x74
   1149c:	aa18      	add	r2, sp, #96	; 0x60
   1149e:	f011 f999 	bl	227d4 <encode_uint>
   114a2:	4681      	mov	r9, r0
			if (precision >= 0) {
   114a4:	2f00      	cmp	r7, #0
   114a6:	f10d 038d 	add.w	r3, sp, #141	; 0x8d
   114aa:	db0b      	blt.n	114c4 <cbvprintf+0x8d4>
				conv->flag_zero = false;
   114ac:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
				size_t len = bpe - bps;
   114b0:	eba3 0209 	sub.w	r2, r3, r9
				conv->flag_zero = false;
   114b4:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
   114b8:	4297      	cmp	r7, r2
				conv->flag_zero = false;
   114ba:	f88d 1060 	strb.w	r1, [sp, #96]	; 0x60
				if (len < (size_t)precision) {
   114be:	d901      	bls.n	114c4 <cbvprintf+0x8d4>
					conv->pad0_value = precision - (int)len;
   114c0:	1abf      	subs	r7, r7, r2
   114c2:	9719      	str	r7, [sp, #100]	; 0x64
		const char *bpe = buf + sizeof(buf);
   114c4:	469a      	mov	sl, r3
   114c6:	e747      	b.n	11358 <cbvprintf+0x768>
				sign = '+';
   114c8:	262b      	movs	r6, #43	; 0x2b
   114ca:	e7d5      	b.n	11478 <cbvprintf+0x888>
		switch (conv->specifier) {
   114cc:	2600      	movs	r6, #0
   114ce:	e7df      	b.n	11490 <cbvprintf+0x8a0>
			if (value->ptr != NULL) {
   114d0:	9816      	ldr	r0, [sp, #88]	; 0x58
   114d2:	2800      	cmp	r0, #0
   114d4:	f000 819e 	beq.w	11814 <cbvprintf+0xc24>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   114d8:	f10d 038d 	add.w	r3, sp, #141	; 0x8d
   114dc:	9300      	str	r3, [sp, #0]
   114de:	aa18      	add	r2, sp, #96	; 0x60
   114e0:	ab1d      	add	r3, sp, #116	; 0x74
   114e2:	2100      	movs	r1, #0
   114e4:	f011 f976 	bl	227d4 <encode_uint>
				conv->altform_0c = true;
   114e8:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
   114ec:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   114f0:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   114f4:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   114f8:	4681      	mov	r9, r0
				conv->altform_0c = true;
   114fa:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
		char sign = 0;
   114fe:	2600      	movs	r6, #0
				goto prec_int_pad0;
   11500:	e7d0      	b.n	114a4 <cbvprintf+0x8b4>
				store_count(conv, value->ptr, count);
   11502:	9b16      	ldr	r3, [sp, #88]	; 0x58
	switch ((enum length_mod_enum)conv->length_mod) {
   11504:	2907      	cmp	r1, #7
   11506:	f63f add4 	bhi.w	110b2 <cbvprintf+0x4c2>
   1150a:	e8df f001 	tbb	[pc, r1]
   1150e:	040d      	.short	0x040d
   11510:	08080d06 	.word	0x08080d06
   11514:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
   11516:	701d      	strb	r5, [r3, #0]
		break;
   11518:	e5cb      	b.n	110b2 <cbvprintf+0x4c2>
		*(short *)dp = (short)count;
   1151a:	801d      	strh	r5, [r3, #0]
		break;
   1151c:	e5c9      	b.n	110b2 <cbvprintf+0x4c2>
		*(intmax_t *)dp = (intmax_t)count;
   1151e:	4628      	mov	r0, r5
   11520:	17e9      	asrs	r1, r5, #31
   11522:	e9c3 0100 	strd	r0, r1, [r3]
		break;
   11526:	e5c4      	b.n	110b2 <cbvprintf+0x4c2>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   11528:	601d      	str	r5, [r3, #0]
		break;
   1152a:	e5c2      	b.n	110b2 <cbvprintf+0x4c2>
		*sign = '-';
   1152c:	262d      	movs	r6, #45	; 0x2d
   1152e:	e631      	b.n	11194 <cbvprintf+0x5a4>
		*sign = '+';
   11530:	262b      	movs	r6, #43	; 0x2b
   11532:	e62f      	b.n	11194 <cbvprintf+0x5a4>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
   11534:	f240 73ff 	movw	r3, #2047	; 0x7ff
   11538:	459b      	cmp	fp, r3
   1153a:	d12d      	bne.n	11598 <cbvprintf+0x9a8>
		if (fract == 0) {
   1153c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   11540:	4313      	orrs	r3, r2
   11542:	f1a9 0941 	sub.w	r9, r9, #65	; 0x41
   11546:	d118      	bne.n	1157a <cbvprintf+0x98a>
			if (isupper((int)c)) {
   11548:	f1b9 0f19 	cmp.w	r9, #25
				*buf++ = 'I';
   1154c:	bf95      	itete	ls
   1154e:	f644 6349 	movwls	r3, #20041	; 0x4e49
				*buf++ = 'i';
   11552:	f646 6369 	movwhi	r3, #28265	; 0x6e69
				*buf++ = 'I';
   11556:	f8ad 3074 	strhls.w	r3, [sp, #116]	; 0x74
				*buf++ = 'i';
   1155a:	f8ad 3074 	strhhi.w	r3, [sp, #116]	; 0x74
				*buf++ = 'F';
   1155e:	bf94      	ite	ls
   11560:	2346      	movls	r3, #70	; 0x46
				*buf++ = 'f';
   11562:	2366      	movhi	r3, #102	; 0x66
				*buf++ = 'n';
   11564:	f88d 3076 	strb.w	r3, [sp, #118]	; 0x76
		conv->flag_zero = false;
   11568:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
   1156c:	f36f 1386 	bfc	r3, #6, #1
   11570:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
		*bpe = buf;
   11574:	f10d 0a77 	add.w	sl, sp, #119	; 0x77
		return bps;
   11578:	e6fc      	b.n	11374 <cbvprintf+0x784>
			if (isupper((int)c)) {
   1157a:	f1b9 0f19 	cmp.w	r9, #25
				*buf++ = 'N';
   1157e:	bf95      	itete	ls
   11580:	f244 134e 	movwls	r3, #16718	; 0x414e
				*buf++ = 'n';
   11584:	f246 136e 	movwhi	r3, #24942	; 0x616e
				*buf++ = 'N';
   11588:	f8ad 3074 	strhls.w	r3, [sp, #116]	; 0x74
				*buf++ = 'n';
   1158c:	f8ad 3074 	strhhi.w	r3, [sp, #116]	; 0x74
				*buf++ = 'N';
   11590:	bf94      	ite	ls
   11592:	234e      	movls	r3, #78	; 0x4e
				*buf++ = 'n';
   11594:	236e      	movhi	r3, #110	; 0x6e
   11596:	e7e5      	b.n	11564 <cbvprintf+0x974>
	bool is_subnormal = (expo == 0) && (fract != 0);
   11598:	f04f 0c00 	mov.w	ip, #0
   1159c:	e610      	b.n	111c0 <cbvprintf+0x5d0>
				expo--;
   1159e:	f10b 3bff 	add.w	fp, fp, #4294967295
			while (((fract <<= 1) & BIT_63) == 0) {
   115a2:	1892      	adds	r2, r2, r2
   115a4:	415b      	adcs	r3, r3
   115a6:	2a00      	cmp	r2, #0
   115a8:	f173 0100 	sbcs.w	r1, r3, #0
   115ac:	daf7      	bge.n	1159e <cbvprintf+0x9ae>
   115ae:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   115b2:	e622      	b.n	111fa <cbvprintf+0x60a>
			fract >>= 1;
   115b4:	9b04      	ldr	r3, [sp, #16]
   115b6:	9805      	ldr	r0, [sp, #20]
   115b8:	085b      	lsrs	r3, r3, #1
   115ba:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
   115be:	0840      	lsrs	r0, r0, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   115c0:	f1b0 3f33 	cmp.w	r0, #858993459	; 0x33333333
   115c4:	46dc      	mov	ip, fp
			fract >>= 1;
   115c6:	e9cd 3004 	strd	r3, r0, [sp, #16]
			expo++;
   115ca:	f10b 0b01 	add.w	fp, fp, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   115ce:	d2f1      	bcs.n	115b4 <cbvprintf+0x9c4>
		fract *= 5U;
   115d0:	fba3 ab01 	umull	sl, fp, r3, r1
   115d4:	e9cd ab04 	strd	sl, fp, [sp, #16]
   115d8:	9b05      	ldr	r3, [sp, #20]
   115da:	4348      	muls	r0, r1
   115dc:	18c3      	adds	r3, r0, r3
   115de:	9305      	str	r3, [sp, #20]
		expo++;
   115e0:	f10c 0b02 	add.w	fp, ip, #2
		decexp--;
   115e4:	3a01      	subs	r2, #1
   115e6:	2301      	movs	r3, #1
   115e8:	e616      	b.n	11218 <cbvprintf+0x628>
		fract += 2;
   115ea:	3302      	adds	r3, #2
   115ec:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
   115f0:	a812      	add	r0, sp, #72	; 0x48
		fract += 2;
   115f2:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
   115f6:	920e      	str	r2, [sp, #56]	; 0x38
		_ldiv5(&fract);
   115f8:	f011 f8b5 	bl	22766 <_ldiv5>
		decexp++;
   115fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   115fe:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
		expo--;
   11602:	f10b 3bff 	add.w	fp, fp, #4294967295
		decexp++;
   11606:	3201      	adds	r2, #1
			fract <<= 1;
   11608:	1800      	adds	r0, r0, r0
   1160a:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
   1160c:	2800      	cmp	r0, #0
   1160e:	f171 0300 	sbcs.w	r3, r1, #0
			expo--;
   11612:	f10b 3bff 	add.w	fp, fp, #4294967295
		} while (!(fract & BIT_63));
   11616:	daf7      	bge.n	11608 <cbvprintf+0xa18>
   11618:	e605      	b.n	11226 <cbvprintf+0x636>
   1161a:	2200      	movs	r2, #0
   1161c:	4693      	mov	fp, r2
   1161e:	e60a      	b.n	11236 <cbvprintf+0x646>
			precision -= decexp;
   11620:	1abf      	subs	r7, r7, r2
			c = 'f';
   11622:	f04f 0966 	mov.w	r9, #102	; 0x66
   11626:	e62b      	b.n	11280 <cbvprintf+0x690>
	bool prune_zero = false;
   11628:	2300      	movs	r3, #0
   1162a:	e632      	b.n	11292 <cbvprintf+0x6a2>
		decimals = precision + 1;
   1162c:	1c7b      	adds	r3, r7, #1
	if (decimals > 16) {
   1162e:	2b10      	cmp	r3, #16
   11630:	bfa8      	it	ge
   11632:	2310      	movge	r3, #16
   11634:	469a      	mov	sl, r3
   11636:	2110      	movs	r1, #16
   11638:	9111      	str	r1, [sp, #68]	; 0x44
	uint64_t round = BIT64(59); /* 0.5 */
   1163a:	2000      	movs	r0, #0
   1163c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   11640:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
	while (decimals--) {
   11644:	f10a 3aff 	add.w	sl, sl, #4294967295
   11648:	f1ba 3fff 	cmp.w	sl, #4294967295
   1164c:	e9dd 1014 	ldrd	r1, r0, [sp, #80]	; 0x50
   11650:	d11f      	bne.n	11692 <cbvprintf+0xaa2>
	fract += round;
   11652:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11654:	18cb      	adds	r3, r1, r3
   11656:	930a      	str	r3, [sp, #40]	; 0x28
   11658:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1165a:	eb40 0303 	adc.w	r3, r0, r3
   1165e:	930b      	str	r3, [sp, #44]	; 0x2c
	if (fract >= BIT64(60)) {
   11660:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
   11664:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
   11668:	f04f 30ff 	mov.w	r0, #4294967295
   1166c:	4559      	cmp	r1, fp
   1166e:	bf08      	it	eq
   11670:	4550      	cmpeq	r0, sl
   11672:	d31a      	bcc.n	116aa <cbvprintf+0xaba>
	fract += round;
   11674:	4650      	mov	r0, sl
   11676:	4659      	mov	r1, fp
   11678:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
	if (c == 'f') {
   1167c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
   11680:	d153      	bne.n	1172a <cbvprintf+0xb3a>
		if (decexp > 0) {
   11682:	2a00      	cmp	r2, #0
   11684:	dc20      	bgt.n	116c8 <cbvprintf+0xad8>
			*buf++ = '0';
   11686:	2330      	movs	r3, #48	; 0x30
   11688:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   1168c:	f10d 0a75 	add.w	sl, sp, #117	; 0x75
   11690:	e02b      	b.n	116ea <cbvprintf+0xafa>
	*v >>= 1;
   11692:	0849      	lsrs	r1, r1, #1
   11694:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
   11698:	0840      	lsrs	r0, r0, #1
   1169a:	e9cd 1014 	strd	r1, r0, [sp, #80]	; 0x50
	_ldiv5(v);
   1169e:	a814      	add	r0, sp, #80	; 0x50
   116a0:	920f      	str	r2, [sp, #60]	; 0x3c
   116a2:	f011 f860 	bl	22766 <_ldiv5>
   116a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
}
   116a8:	e7cc      	b.n	11644 <cbvprintf+0xa54>
	*v >>= 1;
   116aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   116ac:	920f      	str	r2, [sp, #60]	; 0x3c
   116ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   116b0:	085b      	lsrs	r3, r3, #1
   116b2:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   116b6:	0851      	lsrs	r1, r2, #1
	_ldiv5(v);
   116b8:	a812      	add	r0, sp, #72	; 0x48
	*v >>= 1;
   116ba:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
	_ldiv5(v);
   116be:	f011 f852 	bl	22766 <_ldiv5>
		decexp++;
   116c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   116c4:	3201      	adds	r2, #1
   116c6:	e7d9      	b.n	1167c <cbvprintf+0xa8c>
	char *buf = bps;
   116c8:	f10d 0a74 	add.w	sl, sp, #116	; 0x74
			while (decexp > 0 && digit_count > 0) {
   116cc:	9911      	ldr	r1, [sp, #68]	; 0x44
   116ce:	2900      	cmp	r1, #0
   116d0:	dd09      	ble.n	116e6 <cbvprintf+0xaf6>
				*buf++ = _get_digit(&fract, &digit_count);
   116d2:	a911      	add	r1, sp, #68	; 0x44
   116d4:	a812      	add	r0, sp, #72	; 0x48
   116d6:	920f      	str	r2, [sp, #60]	; 0x3c
   116d8:	f011 f865 	bl	227a6 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
   116dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
				*buf++ = _get_digit(&fract, &digit_count);
   116de:	f80a 0b01 	strb.w	r0, [sl], #1
			while (decexp > 0 && digit_count > 0) {
   116e2:	3a01      	subs	r2, #1
   116e4:	d1f2      	bne.n	116cc <cbvprintf+0xadc>
			conv->pad0_value = decexp;
   116e6:	9219      	str	r2, [sp, #100]	; 0x64
			decexp = 0;
   116e8:	2200      	movs	r2, #0
		if (conv->flag_hash || (precision > 0)) {
   116ea:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
   116ee:	0688      	lsls	r0, r1, #26
   116f0:	d401      	bmi.n	116f6 <cbvprintf+0xb06>
   116f2:	2f00      	cmp	r7, #0
   116f4:	dd3f      	ble.n	11776 <cbvprintf+0xb86>
			*buf++ = '.';
   116f6:	4653      	mov	r3, sl
   116f8:	212e      	movs	r1, #46	; 0x2e
   116fa:	f803 1b01 	strb.w	r1, [r3], #1
		if (decexp < 0 && precision > 0) {
   116fe:	b192      	cbz	r2, 11726 <cbvprintf+0xb36>
   11700:	2f00      	cmp	r7, #0
   11702:	dd75      	ble.n	117f0 <cbvprintf+0xc00>
			conv->pad0_value = -decexp;
   11704:	4251      	negs	r1, r2
   11706:	42b9      	cmp	r1, r7
   11708:	bfa8      	it	ge
   1170a:	4639      	movge	r1, r7
			conv->pad_postdp = (conv->pad0_value > 0);
   1170c:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
			conv->pad0_value = -decexp;
   11710:	9119      	str	r1, [sp, #100]	; 0x64
			conv->pad_postdp = (conv->pad0_value > 0);
   11712:	2900      	cmp	r1, #0
			precision -= conv->pad0_value;
   11714:	eba7 0701 	sub.w	r7, r7, r1
			conv->pad_postdp = (conv->pad0_value > 0);
   11718:	bfd4      	ite	le
   1171a:	2100      	movle	r1, #0
   1171c:	2101      	movgt	r1, #1
   1171e:	f361 1045 	bfi	r0, r1, #5, #1
   11722:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
			*buf++ = '.';
   11726:	469a      	mov	sl, r3
   11728:	e020      	b.n	1176c <cbvprintf+0xb7c>
		*buf = _get_digit(&fract, &digit_count);
   1172a:	a911      	add	r1, sp, #68	; 0x44
   1172c:	a812      	add	r0, sp, #72	; 0x48
   1172e:	920f      	str	r2, [sp, #60]	; 0x3c
   11730:	f011 f839 	bl	227a6 <_get_digit>
		if (*buf++ != '0') {
   11734:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		if (conv->flag_hash || (precision > 0)) {
   11736:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
		*buf = _get_digit(&fract, &digit_count);
   1173a:	f88d 0074 	strb.w	r0, [sp, #116]	; 0x74
		if (*buf++ != '0') {
   1173e:	2830      	cmp	r0, #48	; 0x30
			decexp--;
   11740:	bf18      	it	ne
   11742:	f102 32ff 	addne.w	r2, r2, #4294967295
		if (conv->flag_hash || (precision > 0)) {
   11746:	0699      	lsls	r1, r3, #26
   11748:	d401      	bmi.n	1174e <cbvprintf+0xb5e>
   1174a:	2f00      	cmp	r7, #0
   1174c:	dd52      	ble.n	117f4 <cbvprintf+0xc04>
			*buf++ = '.';
   1174e:	232e      	movs	r3, #46	; 0x2e
   11750:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
   11754:	f10d 0376 	add.w	r3, sp, #118	; 0x76
   11758:	e7e5      	b.n	11726 <cbvprintf+0xb36>
		*buf++ = _get_digit(&fract, &digit_count);
   1175a:	a911      	add	r1, sp, #68	; 0x44
   1175c:	a812      	add	r0, sp, #72	; 0x48
   1175e:	920f      	str	r2, [sp, #60]	; 0x3c
   11760:	f011 f821 	bl	227a6 <_get_digit>
   11764:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   11766:	f80a 0b01 	strb.w	r0, [sl], #1
		precision--;
   1176a:	3f01      	subs	r7, #1
	while (precision > 0 && digit_count > 0) {
   1176c:	2f00      	cmp	r7, #0
   1176e:	dd02      	ble.n	11776 <cbvprintf+0xb86>
   11770:	9911      	ldr	r1, [sp, #68]	; 0x44
   11772:	2900      	cmp	r1, #0
   11774:	dcf1      	bgt.n	1175a <cbvprintf+0xb6a>
	if (prune_zero) {
   11776:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11778:	2b00      	cmp	r3, #0
   1177a:	d13e      	bne.n	117fa <cbvprintf+0xc0a>
	conv->pad0_pre_exp = precision;
   1177c:	971a      	str	r7, [sp, #104]	; 0x68
	if ((c == 'e') || (c == 'E')) {
   1177e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
   11782:	2945      	cmp	r1, #69	; 0x45
   11784:	d122      	bne.n	117cc <cbvprintf+0xbdc>
		if (decexp < 0) {
   11786:	2a00      	cmp	r2, #0
		*buf++ = c;
   11788:	4650      	mov	r0, sl
			decexp = -decexp;
   1178a:	bfba      	itte	lt
   1178c:	4252      	neglt	r2, r2
			*buf++ = '-';
   1178e:	212d      	movlt	r1, #45	; 0x2d
			*buf++ = '+';
   11790:	212b      	movge	r1, #43	; 0x2b
		if (decexp >= 100) {
   11792:	2a63      	cmp	r2, #99	; 0x63
		*buf++ = c;
   11794:	f800 9b02 	strb.w	r9, [r0], #2
			*buf++ = '-';
   11798:	f88a 1001 	strb.w	r1, [sl, #1]
		if (decexp >= 100) {
   1179c:	dd0a      	ble.n	117b4 <cbvprintf+0xbc4>
			*buf++ = (decexp / 100) + '0';
   1179e:	2764      	movs	r7, #100	; 0x64
   117a0:	fb92 f1f7 	sdiv	r1, r2, r7
   117a4:	f101 0c30 	add.w	ip, r1, #48	; 0x30
   117a8:	f10a 0003 	add.w	r0, sl, #3
   117ac:	f88a c002 	strb.w	ip, [sl, #2]
			decexp %= 100;
   117b0:	fb07 2211 	mls	r2, r7, r1, r2
		*buf++ = (decexp / 10) + '0';
   117b4:	270a      	movs	r7, #10
   117b6:	4682      	mov	sl, r0
   117b8:	fb92 f1f7 	sdiv	r1, r2, r7
		*buf++ = (decexp % 10) + '0';
   117bc:	fb07 2211 	mls	r2, r7, r1, r2
		*buf++ = (decexp / 10) + '0';
   117c0:	f101 0c30 	add.w	ip, r1, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
   117c4:	3230      	adds	r2, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
   117c6:	f80a cb02 	strb.w	ip, [sl], #2
		*buf++ = (decexp % 10) + '0';
   117ca:	7042      	strb	r2, [r0, #1]
		|| (conv->pad0_pre_exp > 0);
   117cc:	9a19      	ldr	r2, [sp, #100]	; 0x64
   117ce:	2a00      	cmp	r2, #0
   117d0:	dc1e      	bgt.n	11810 <cbvprintf+0xc20>
   117d2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   117d4:	2a00      	cmp	r2, #0
   117d6:	bfd4      	ite	le
   117d8:	2200      	movle	r2, #0
   117da:	2201      	movgt	r2, #1
	conv->pad_fp = (conv->pad0_value > 0)
   117dc:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
   117e0:	f362 1186 	bfi	r1, r2, #6, #1
	*buf = 0;
   117e4:	2200      	movs	r2, #0
	conv->pad_fp = (conv->pad0_value > 0)
   117e6:	f88d 1062 	strb.w	r1, [sp, #98]	; 0x62
	*buf = 0;
   117ea:	f88a 2000 	strb.w	r2, [sl]
	return bps;
   117ee:	e5c1      	b.n	11374 <cbvprintf+0x784>
			*buf++ = '.';
   117f0:	469a      	mov	sl, r3
   117f2:	e7c0      	b.n	11776 <cbvprintf+0xb86>
		if (*buf++ != '0') {
   117f4:	f10d 0a75 	add.w	sl, sp, #117	; 0x75
   117f8:	e7bd      	b.n	11776 <cbvprintf+0xb86>
		conv->pad0_pre_exp = 0;
   117fa:	2100      	movs	r1, #0
   117fc:	911a      	str	r1, [sp, #104]	; 0x68
		while (*--buf == '0') {
   117fe:	4650      	mov	r0, sl
   11800:	f81a 1d01 	ldrb.w	r1, [sl, #-1]!
   11804:	2930      	cmp	r1, #48	; 0x30
   11806:	d0fa      	beq.n	117fe <cbvprintf+0xc0e>
		if (*buf != '.') {
   11808:	292e      	cmp	r1, #46	; 0x2e
   1180a:	bf18      	it	ne
   1180c:	4682      	movne	sl, r0
   1180e:	e7b6      	b.n	1177e <cbvprintf+0xb8e>
		|| (conv->pad0_pre_exp > 0);
   11810:	2201      	movs	r2, #1
   11812:	e7e3      	b.n	117dc <cbvprintf+0xbec>
			bpe = bps + 5;
   11814:	f8df a138 	ldr.w	sl, [pc, #312]	; 11950 <cbvprintf+0xd60>
		char sign = 0;
   11818:	4606      	mov	r6, r0
			bps = "(nil)";
   1181a:	f1aa 0905 	sub.w	r9, sl, #5
   1181e:	e5ab      	b.n	11378 <cbvprintf+0x788>
		} else if (conv->altform_0) {
   11820:	0707      	lsls	r7, r0, #28
			nj_len += 1U;
   11822:	bf48      	it	mi
   11824:	3201      	addmi	r2, #1
   11826:	e5b1      	b.n	1138c <cbvprintf+0x79c>
					OUTC(pad);
   11828:	9b03      	ldr	r3, [sp, #12]
   1182a:	4641      	mov	r1, r8
   1182c:	4638      	mov	r0, r7
   1182e:	4798      	blx	r3
   11830:	2800      	cmp	r0, #0
   11832:	f6bf add1 	bge.w	113d8 <cbvprintf+0x7e8>
#undef OUTS
#undef OUTC
}
   11836:	b025      	add	sp, #148	; 0x94
   11838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   1183c:	2720      	movs	r7, #32
   1183e:	e5c8      	b.n	113d2 <cbvprintf+0x7e2>
					pad = '0';
   11840:	2730      	movs	r7, #48	; 0x30
   11842:	e5c6      	b.n	113d2 <cbvprintf+0x7e2>
			width -= (int)nj_len;
   11844:	9308      	str	r3, [sp, #32]
   11846:	e5d0      	b.n	113ea <cbvprintf+0x7fa>
   11848:	eba5 0b09 	sub.w	fp, r5, r9
   1184c:	464e      	mov	r6, r9
   1184e:	eb0b 0509 	add.w	r5, fp, r9
				while (*cp != 'p') {
   11852:	f819 0b01 	ldrb.w	r0, [r9], #1
   11856:	2870      	cmp	r0, #112	; 0x70
   11858:	d120      	bne.n	1189c <cbvprintf+0xcac>
			while (pad_len-- > 0) {
   1185a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1185c:	eb02 0905 	add.w	r9, r2, r5
   11860:	eba9 0205 	sub.w	r2, r9, r5
   11864:	2a00      	cmp	r2, #0
   11866:	dc43      	bgt.n	118f0 <cbvprintf+0xd00>
			OUTS(cp, bpe);
   11868:	4653      	mov	r3, sl
   1186a:	4632      	mov	r2, r6
			OUTS(bps, bpe);
   1186c:	9803      	ldr	r0, [sp, #12]
   1186e:	4641      	mov	r1, r8
   11870:	f010 fffb 	bl	2286a <outs>
   11874:	2800      	cmp	r0, #0
   11876:	dbde      	blt.n	11836 <cbvprintf+0xc46>
   11878:	9b08      	ldr	r3, [sp, #32]
   1187a:	4428      	add	r0, r5
   1187c:	4403      	add	r3, r0
			while (pad_len-- > 0) {
   1187e:	4605      	mov	r5, r0
   11880:	469a      	mov	sl, r3
		while (width > 0) {
   11882:	ebaa 0305 	sub.w	r3, sl, r5
   11886:	2b00      	cmp	r3, #0
   11888:	f77f ac13 	ble.w	110b2 <cbvprintf+0x4c2>
			OUTC(' ');
   1188c:	9b03      	ldr	r3, [sp, #12]
   1188e:	4641      	mov	r1, r8
   11890:	2020      	movs	r0, #32
   11892:	4798      	blx	r3
   11894:	2800      	cmp	r0, #0
   11896:	dbce      	blt.n	11836 <cbvprintf+0xc46>
   11898:	3501      	adds	r5, #1
			--width;
   1189a:	e7f2      	b.n	11882 <cbvprintf+0xc92>
					OUTC(*cp++);
   1189c:	9b03      	ldr	r3, [sp, #12]
   1189e:	4641      	mov	r1, r8
   118a0:	4798      	blx	r3
   118a2:	2800      	cmp	r0, #0
   118a4:	dad2      	bge.n	1184c <cbvprintf+0xc5c>
   118a6:	e7c6      	b.n	11836 <cbvprintf+0xc46>
					OUTC(*cp++);
   118a8:	9b03      	ldr	r3, [sp, #12]
   118aa:	4641      	mov	r1, r8
   118ac:	4798      	blx	r3
   118ae:	2800      	cmp	r0, #0
   118b0:	f6bf adb0 	bge.w	11414 <cbvprintf+0x824>
   118b4:	e7bf      	b.n	11836 <cbvprintf+0xc46>
						OUTC('0');
   118b6:	9b03      	ldr	r3, [sp, #12]
   118b8:	4641      	mov	r1, r8
   118ba:	2030      	movs	r0, #48	; 0x30
   118bc:	4798      	blx	r3
   118be:	2800      	cmp	r0, #0
   118c0:	f6bf adbb 	bge.w	1143a <cbvprintf+0x84a>
   118c4:	e7b7      	b.n	11836 <cbvprintf+0xc46>
						OUTC('0');
   118c6:	9b03      	ldr	r3, [sp, #12]
   118c8:	4641      	mov	r1, r8
   118ca:	2030      	movs	r0, #48	; 0x30
   118cc:	4798      	blx	r3
   118ce:	3e01      	subs	r6, #1
   118d0:	e5c0      	b.n	11454 <cbvprintf+0x864>
					OUTC(*cp++);
   118d2:	9b03      	ldr	r3, [sp, #12]
   118d4:	4641      	mov	r1, r8
   118d6:	4798      	blx	r3
   118d8:	2800      	cmp	r0, #0
   118da:	dbac      	blt.n	11836 <cbvprintf+0xc46>
   118dc:	463e      	mov	r6, r7
   118de:	eb0b 0507 	add.w	r5, fp, r7
				while (isdigit((int)*cp)) {
   118e2:	f817 0b01 	ldrb.w	r0, [r7], #1
   118e6:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
   118ea:	2a09      	cmp	r2, #9
   118ec:	d9f1      	bls.n	118d2 <cbvprintf+0xce2>
   118ee:	e7b4      	b.n	1185a <cbvprintf+0xc6a>
				OUTC('0');
   118f0:	9b03      	ldr	r3, [sp, #12]
   118f2:	4641      	mov	r1, r8
   118f4:	2030      	movs	r0, #48	; 0x30
   118f6:	4798      	blx	r3
   118f8:	2800      	cmp	r0, #0
   118fa:	db9c      	blt.n	11836 <cbvprintf+0xc46>
   118fc:	3501      	adds	r5, #1
   118fe:	e7af      	b.n	11860 <cbvprintf+0xc70>
			if (conv->altform_0c | conv->altform_0) {
   11900:	06d1      	lsls	r1, r2, #27
   11902:	d401      	bmi.n	11908 <cbvprintf+0xd18>
   11904:	0712      	lsls	r2, r2, #28
   11906:	d506      	bpl.n	11916 <cbvprintf+0xd26>
				OUTC('0');
   11908:	9b03      	ldr	r3, [sp, #12]
   1190a:	4641      	mov	r1, r8
   1190c:	2030      	movs	r0, #48	; 0x30
   1190e:	4798      	blx	r3
   11910:	2800      	cmp	r0, #0
   11912:	db90      	blt.n	11836 <cbvprintf+0xc46>
   11914:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   11916:	f89d 2062 	ldrb.w	r2, [sp, #98]	; 0x62
   1191a:	06d3      	lsls	r3, r2, #27
   1191c:	d507      	bpl.n	1192e <cbvprintf+0xd3e>
				OUTC(conv->specifier);
   1191e:	f89d 0063 	ldrb.w	r0, [sp, #99]	; 0x63
   11922:	9b03      	ldr	r3, [sp, #12]
   11924:	4641      	mov	r1, r8
   11926:	4798      	blx	r3
   11928:	2800      	cmp	r0, #0
   1192a:	db84      	blt.n	11836 <cbvprintf+0xc46>
   1192c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   1192e:	9e19      	ldr	r6, [sp, #100]	; 0x64
   11930:	442e      	add	r6, r5
   11932:	1b72      	subs	r2, r6, r5
   11934:	2a00      	cmp	r2, #0
   11936:	dc02      	bgt.n	1193e <cbvprintf+0xd4e>
			OUTS(bps, bpe);
   11938:	4653      	mov	r3, sl
   1193a:	464a      	mov	r2, r9
   1193c:	e796      	b.n	1186c <cbvprintf+0xc7c>
				OUTC('0');
   1193e:	9b03      	ldr	r3, [sp, #12]
   11940:	4641      	mov	r1, r8
   11942:	2030      	movs	r0, #48	; 0x30
   11944:	4798      	blx	r3
   11946:	2800      	cmp	r0, #0
   11948:	f6ff af75 	blt.w	11836 <cbvprintf+0xc46>
   1194c:	3501      	adds	r5, #1
   1194e:	e7f0      	b.n	11932 <cbvprintf+0xd42>
   11950:	00029feb 	.word	0x00029feb

00011954 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   11954:	b530      	push	{r4, r5, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   11956:	4c0a      	ldr	r4, [pc, #40]	; (11980 <crc8_ccitt+0x2c>)
   11958:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   1195a:	4291      	cmp	r1, r2
   1195c:	d100      	bne.n	11960 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   1195e:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
   11960:	f811 3b01 	ldrb.w	r3, [r1], #1
   11964:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   11966:	0903      	lsrs	r3, r0, #4
   11968:	5ce3      	ldrb	r3, [r4, r3]
   1196a:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
   1196e:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   11970:	f3c3 1303 	ubfx	r3, r3, #4, #4
   11974:	5ce0      	ldrb	r0, [r4, r3]
   11976:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
   1197a:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   1197c:	e7ed      	b.n	1195a <crc8_ccitt+0x6>
   1197e:	bf00      	nop
   11980:	00029fec 	.word	0x00029fec

00011984 <read_pnp_id>:

#if CONFIG_BT_DIS_PNP
static ssize_t read_pnp_id(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, void *buf,
			   uint16_t len, uint16_t offset)
{
   11984:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &dis_pnp_id,
   11986:	2407      	movs	r4, #7
   11988:	9402      	str	r4, [sp, #8]
   1198a:	4c04      	ldr	r4, [pc, #16]	; (1199c <read_pnp_id+0x18>)
   1198c:	9401      	str	r4, [sp, #4]
   1198e:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   11992:	9400      	str	r4, [sp, #0]
   11994:	f014 fbbf 	bl	26116 <bt_gatt_attr_read>
				 sizeof(dis_pnp_id));
}
   11998:	b004      	add	sp, #16
   1199a:	bd10      	pop	{r4, pc}
   1199c:	200008c6 	.word	0x200008c6

000119a0 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
   119a0:	4b01      	ldr	r3, [pc, #4]	; (119a8 <uECC_get_rng+0x8>)
   119a2:	6818      	ldr	r0, [r3, #0]
   119a4:	4770      	bx	lr
   119a6:	bf00      	nop
   119a8:	20000534 	.word	0x20000534

000119ac <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
   119ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   119ae:	2208      	movs	r2, #8
{
   119b0:	b089      	sub	sp, #36	; 0x24
   119b2:	460c      	mov	r4, r1
   119b4:	4606      	mov	r6, r0
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   119b6:	f011 f9a7 	bl	22d08 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
   119ba:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   119bc:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
   119be:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   119c0:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
   119c2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   119c4:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
   119c6:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   119c8:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   119ca:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   119cc:	9307      	str	r3, [sp, #28]
	tmp[0] = tmp[1] = tmp[2] = 0;
   119ce:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   119d0:	2308      	movs	r3, #8
   119d2:	466a      	mov	r2, sp
   119d4:	4669      	mov	r1, sp
   119d6:	4668      	mov	r0, sp
	tmp[0] = tmp[1] = tmp[2] = 0;
   119d8:	e9cd 7701 	strd	r7, r7, [sp, #4]
   119dc:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   119de:	f011 f895 	bl	22b0c <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   119e2:	2308      	movs	r3, #8
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   119e4:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   119e6:	466a      	mov	r2, sp
   119e8:	4631      	mov	r1, r6
   119ea:	4630      	mov	r0, r6
   119ec:	f011 f88e 	bl	22b0c <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
   119f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   119f2:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
   119f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   119f6:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
   119f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   119fa:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
   119fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   119fe:	4405      	add	r5, r0
	tmp[7] = 0;
   11a00:	e9cd 3706 	strd	r3, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   11a04:	466a      	mov	r2, sp
   11a06:	2308      	movs	r3, #8
   11a08:	4669      	mov	r1, sp
   11a0a:	4668      	mov	r0, sp
   11a0c:	f011 f87e 	bl	22b0c <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   11a10:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   11a12:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   11a14:	2308      	movs	r3, #8
   11a16:	466a      	mov	r2, sp
   11a18:	4630      	mov	r0, r6
   11a1a:	f011 f877 	bl	22b0c <uECC_vli_add>

	/* s3 */
	tmp[0] = product[8];
   11a1e:	6a23      	ldr	r3, [r4, #32]
   11a20:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
   11a22:	6a63      	ldr	r3, [r4, #36]	; 0x24
   11a24:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
   11a26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11a28:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
   11a2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   11a2c:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   11a2e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   11a30:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   11a32:	4405      	add	r5, r0
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   11a34:	2308      	movs	r3, #8
   11a36:	466a      	mov	r2, sp
   11a38:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   11a3a:	e9cd 7704 	strd	r7, r7, [sp, #16]
   11a3e:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   11a40:	f011 f864 	bl	22b0c <uECC_vli_add>

	/* s4 */
	tmp[0] = product[9];
   11a44:	6a63      	ldr	r3, [r4, #36]	; 0x24
   11a46:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
   11a48:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
   11a4a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	tmp[1] = product[10];
   11a4c:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
   11a4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   11a50:	9302      	str	r3, [sp, #8]
	tmp[4] = product[14];
   11a52:	9204      	str	r2, [sp, #16]
	tmp[3] = product[13];
   11a54:	6b63      	ldr	r3, [r4, #52]	; 0x34
	tmp[5] = product[15];
   11a56:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	tmp[3] = product[13];
   11a58:	9303      	str	r3, [sp, #12]
	tmp[6] = product[13];
   11a5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
	tmp[7] = product[8];
   11a5e:	6a23      	ldr	r3, [r4, #32]
   11a60:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   11a62:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   11a64:	2308      	movs	r3, #8
   11a66:	466a      	mov	r2, sp
   11a68:	4630      	mov	r0, r6
   11a6a:	f011 f84f 	bl	22b0c <uECC_vli_add>

	/* d1 */
	tmp[0] = product[11];
   11a6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   11a70:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
   11a72:	6b23      	ldr	r3, [r4, #48]	; 0x30
   11a74:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
   11a76:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11a78:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
   11a7a:	6a23      	ldr	r3, [r4, #32]
   11a7c:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
   11a7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11a80:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   11a82:	4405      	add	r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   11a84:	2308      	movs	r3, #8
   11a86:	466a      	mov	r2, sp
   11a88:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   11a8a:	e9cd 7704 	strd	r7, r7, [sp, #16]
   11a8e:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   11a90:	f011 f970 	bl	22d74 <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
   11a94:	6b23      	ldr	r3, [r4, #48]	; 0x30
   11a96:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
   11a98:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11a9a:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
   11a9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   11a9e:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
   11aa0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   11aa2:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
   11aa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   11aa6:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
   11aa8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   11aaa:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   11aac:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   11aae:	2308      	movs	r3, #8
   11ab0:	466a      	mov	r2, sp
   11ab2:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
   11ab4:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   11ab8:	f011 f95c 	bl	22d74 <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
   11abc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11abe:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
   11ac0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   11ac2:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
   11ac4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   11ac6:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
   11ac8:	6a23      	ldr	r3, [r4, #32]
   11aca:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
   11acc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   11ace:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
   11ad0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
   11ad2:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
   11ad6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   11ad8:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   11ada:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   11adc:	2308      	movs	r3, #8
   11ade:	466a      	mov	r2, sp
   11ae0:	4630      	mov	r0, r6
   11ae2:	f011 f947 	bl	22d74 <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
   11ae6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   11ae8:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
   11aea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
   11aec:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
   11af0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   11af2:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
   11af4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11af6:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
   11af8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
   11afa:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
   11afe:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11b00:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   11b02:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   11b04:	2308      	movs	r3, #8
   11b06:	466a      	mov	r2, sp
   11b08:	4630      	mov	r0, r6
   11b0a:	f011 f933 	bl	22d74 <uECC_vli_sub>

	if (carry < 0) {
   11b0e:	1a2d      	subs	r5, r5, r0
   11b10:	d410      	bmi.n	11b34 <vli_mmod_fast_secp256r1+0x188>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   11b12:	4c0d      	ldr	r4, [pc, #52]	; (11b48 <vli_mmod_fast_secp256r1+0x19c>)
		while (carry || 
   11b14:	b935      	cbnz	r5, 11b24 <vli_mmod_fast_secp256r1+0x178>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   11b16:	2208      	movs	r2, #8
   11b18:	4631      	mov	r1, r6
   11b1a:	4620      	mov	r0, r4
   11b1c:	f011 f900 	bl	22d20 <uECC_vli_cmp_unsafe>
		while (carry || 
   11b20:	2801      	cmp	r0, #1
   11b22:	d00f      	beq.n	11b44 <vli_mmod_fast_secp256r1+0x198>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   11b24:	2308      	movs	r3, #8
   11b26:	4622      	mov	r2, r4
   11b28:	4631      	mov	r1, r6
   11b2a:	4630      	mov	r0, r6
   11b2c:	f011 f922 	bl	22d74 <uECC_vli_sub>
   11b30:	1a2d      	subs	r5, r5, r0
   11b32:	e7ef      	b.n	11b14 <vli_mmod_fast_secp256r1+0x168>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   11b34:	4a04      	ldr	r2, [pc, #16]	; (11b48 <vli_mmod_fast_secp256r1+0x19c>)
   11b36:	2308      	movs	r3, #8
   11b38:	4631      	mov	r1, r6
   11b3a:	4630      	mov	r0, r6
   11b3c:	f010 ffe6 	bl	22b0c <uECC_vli_add>
		while (carry < 0);
   11b40:	182d      	adds	r5, r5, r0
   11b42:	d4f8      	bmi.n	11b36 <vli_mmod_fast_secp256r1+0x18a>
		}
	}
}
   11b44:	b009      	add	sp, #36	; 0x24
   11b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11b48:	0002920c 	.word	0x0002920c

00011b4c <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   11b4c:	4b0c      	ldr	r3, [pc, #48]	; (11b80 <flash_area_open+0x34>)
   11b4e:	681b      	ldr	r3, [r3, #0]
{
   11b50:	b570      	push	{r4, r5, r6, lr}
	if (flash_map == NULL) {
   11b52:	b173      	cbz	r3, 11b72 <flash_area_open+0x26>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   11b54:	4a0b      	ldr	r2, [pc, #44]	; (11b84 <flash_area_open+0x38>)
   11b56:	6815      	ldr	r5, [r2, #0]
   11b58:	2200      	movs	r2, #0
   11b5a:	42aa      	cmp	r2, r5
   11b5c:	db02      	blt.n	11b64 <flash_area_open+0x18>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
   11b5e:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;
	return 0;
}
   11b62:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
   11b64:	461c      	mov	r4, r3
   11b66:	f813 6b10 	ldrb.w	r6, [r3], #16
   11b6a:	4286      	cmp	r6, r0
   11b6c:	d004      	beq.n	11b78 <flash_area_open+0x2c>
	for (int i = 0; i < flash_map_entries; i++) {
   11b6e:	3201      	adds	r2, #1
   11b70:	e7f3      	b.n	11b5a <flash_area_open+0xe>
		return -EACCES;
   11b72:	f06f 000c 	mvn.w	r0, #12
   11b76:	e7f4      	b.n	11b62 <flash_area_open+0x16>
	*fap = area;
   11b78:	600c      	str	r4, [r1, #0]
	return 0;
   11b7a:	2000      	movs	r0, #0
   11b7c:	e7f1      	b.n	11b62 <flash_area_open+0x16>
   11b7e:	bf00      	nop
   11b80:	20000538 	.word	0x20000538
   11b84:	00029308 	.word	0x00029308

00011b88 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   11b88:	b570      	push	{r4, r5, r6, lr}
   11b8a:	b088      	sub	sp, #32
   11b8c:	4605      	mov	r5, r0
   11b8e:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
   11b90:	b2c0      	uxtb	r0, r0
   11b92:	4669      	mov	r1, sp
{
   11b94:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
   11b96:	f7ff ffd9 	bl	11b4c <flash_area_open>
	if (rc < 0 || fa == NULL) {
   11b9a:	2800      	cmp	r0, #0
   11b9c:	db1f      	blt.n	11bde <flash_area_get_sectors+0x56>
   11b9e:	9b00      	ldr	r3, [sp, #0]
   11ba0:	b1eb      	cbz	r3, 11bde <flash_area_get_sectors+0x56>
	cb_data->area_off = fa->fa_off;
   11ba2:	685a      	ldr	r2, [r3, #4]
   11ba4:	9202      	str	r2, [sp, #8]
	cb_data->area_len = fa->fa_size;
   11ba6:	689a      	ldr	r2, [r3, #8]
	cb_data->ret_len = *cnt;
   11ba8:	6821      	ldr	r1, [r4, #0]
	flash_dev = device_get_binding(fa->fa_dev_name);
   11baa:	68d8      	ldr	r0, [r3, #12]
	cb_data->area_idx = idx;
   11bac:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
   11bae:	e9cd 2603 	strd	r2, r6, [sp, #12]
	cb_data->ret_idx = 0U;
   11bb2:	2200      	movs	r2, #0
	cb_data->status = 0;
   11bb4:	e9cd 1206 	strd	r1, r2, [sp, #24]
	cb_data->ret_idx = 0U;
   11bb8:	9205      	str	r2, [sp, #20]
   11bba:	f00f f8d7 	bl	20d6c <z_impl_device_get_binding>
   11bbe:	4605      	mov	r5, r0
	flash_area_close(fa);
   11bc0:	9800      	ldr	r0, [sp, #0]
   11bc2:	f011 fe95 	bl	238f0 <flash_area_close>
	if (flash_dev == NULL) {
   11bc6:	b16d      	cbz	r5, 11be4 <flash_area_get_sectors+0x5c>
	flash_page_foreach(flash_dev, cb, cb_data);
   11bc8:	4628      	mov	r0, r5
   11bca:	4908      	ldr	r1, [pc, #32]	; (11bec <flash_area_get_sectors+0x64>)
   11bcc:	aa01      	add	r2, sp, #4
   11bce:	f015 ff30 	bl	27a32 <flash_page_foreach>
	if (cb_data->status == 0) {
   11bd2:	9807      	ldr	r0, [sp, #28]
   11bd4:	b908      	cbnz	r0, 11bda <flash_area_get_sectors+0x52>
		*cnt = cb_data->ret_idx;
   11bd6:	9b05      	ldr	r3, [sp, #20]
   11bd8:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   11bda:	b008      	add	sp, #32
   11bdc:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   11bde:	f06f 0015 	mvn.w	r0, #21
   11be2:	e7fa      	b.n	11bda <flash_area_get_sectors+0x52>
		return -ENODEV;
   11be4:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   11be8:	e7f7      	b.n	11bda <flash_area_get_sectors+0x52>
   11bea:	bf00      	nop
   11bec:	000238f3 	.word	0x000238f3

00011bf0 <hrs_init>:

static int hrs_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	hrs_blsc = 0x01;
   11bf0:	4b02      	ldr	r3, [pc, #8]	; (11bfc <hrs_init+0xc>)
   11bf2:	2201      	movs	r2, #1
   11bf4:	701a      	strb	r2, [r3, #0]

	return 0;
}
   11bf6:	2000      	movs	r0, #0
   11bf8:	4770      	bx	lr
   11bfa:	bf00      	nop
   11bfc:	20002849 	.word	0x20002849

00011c00 <read_blsc>:
{
   11c00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &hrs_blsc,
   11c02:	2401      	movs	r4, #1
   11c04:	9402      	str	r4, [sp, #8]
   11c06:	4c04      	ldr	r4, [pc, #16]	; (11c18 <read_blsc+0x18>)
   11c08:	9401      	str	r4, [sp, #4]
   11c0a:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   11c0e:	9400      	str	r4, [sp, #0]
   11c10:	f014 fa81 	bl	26116 <bt_gatt_attr_read>
}
   11c14:	b004      	add	sp, #16
   11c16:	bd10      	pop	{r4, pc}
   11c18:	20002849 	.word	0x20002849

00011c1c <hrmc_ccc_cfg_changed>:
   11c1c:	4b07      	ldr	r3, [pc, #28]	; (11c3c <hrmc_ccc_cfg_changed+0x20>)
   11c1e:	4a08      	ldr	r2, [pc, #32]	; (11c40 <hrmc_ccc_cfg_changed+0x24>)
	LOG_INF("HRS notifications %s", notif_enabled ? "enabled" : "disabled");
   11c20:	4808      	ldr	r0, [pc, #32]	; (11c44 <hrmc_ccc_cfg_changed+0x28>)
   11c22:	1ad2      	subs	r2, r2, r3
   11c24:	08d2      	lsrs	r2, r2, #3
   11c26:	4b08      	ldr	r3, [pc, #32]	; (11c48 <hrmc_ccc_cfg_changed+0x2c>)
   11c28:	0192      	lsls	r2, r2, #6
   11c2a:	2901      	cmp	r1, #1
   11c2c:	bf14      	ite	ne
   11c2e:	4601      	movne	r1, r0
   11c30:	4619      	moveq	r1, r3
   11c32:	f042 0203 	orr.w	r2, r2, #3
   11c36:	4805      	ldr	r0, [pc, #20]	; (11c4c <hrmc_ccc_cfg_changed+0x30>)
   11c38:	f012 b920 	b.w	23e7c <log_1>
   11c3c:	00028dd4 	.word	0x00028dd4
   11c40:	00028e8c 	.word	0x00028e8c
   11c44:	00029fc4 	.word	0x00029fc4
   11c48:	00029fbc 	.word	0x00029fbc
   11c4c:	0002a031 	.word	0x0002a031

00011c50 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   11c50:	4b01      	ldr	r3, [pc, #4]	; (11c58 <log_backend_rtt_init+0x8>)
   11c52:	2201      	movs	r2, #1
   11c54:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   11c56:	4770      	bx	lr
   11c58:	2000285a 	.word	0x2000285a

00011c5c <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
   11c5c:	4b02      	ldr	r3, [pc, #8]	; (11c68 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   11c5e:	4803      	ldr	r0, [pc, #12]	; (11c6c <panic+0x10>)
   11c60:	2201      	movs	r2, #1
   11c62:	701a      	strb	r2, [r3, #0]
   11c64:	f012 bc4b 	b.w	244fe <log_output_flush>
   11c68:	2000285b 	.word	0x2000285b
   11c6c:	000293c8 	.word	0x000293c8

00011c70 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   11c70:	4801      	ldr	r0, [pc, #4]	; (11c78 <dropped+0x8>)
   11c72:	f000 bd5f 	b.w	12734 <log_output_dropped_process>
   11c76:	bf00      	nop
   11c78:	000293c8 	.word	0x000293c8

00011c7c <put>:
{
   11c7c:	b510      	push	{r4, lr}
	log_msg_get(msg);
   11c7e:	4608      	mov	r0, r1
   11c80:	460c      	mov	r4, r1
   11c82:	f012 f9e0 	bl	24046 <log_msg_get>
	log_output_msg_process(output, msg, flags);
   11c86:	4805      	ldr	r0, [pc, #20]	; (11c9c <put+0x20>)
   11c88:	4621      	mov	r1, r4
   11c8a:	220f      	movs	r2, #15
   11c8c:	f000 fcd6 	bl	1263c <log_output_msg_process>
	log_msg_put(msg);
   11c90:	4620      	mov	r0, r4
}
   11c92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11c96:	f012 ba05 	b.w	240a4 <log_msg_put>
   11c9a:	bf00      	nop
   11c9c:	000293c8 	.word	0x000293c8

00011ca0 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
   11ca0:	4b05      	ldr	r3, [pc, #20]	; (11cb8 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
   11ca2:	781b      	ldrb	r3, [r3, #0]
   11ca4:	b11b      	cbz	r3, 11cae <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
   11ca6:	f241 3088 	movw	r0, #5000	; 0x1388
   11caa:	f016 bd0d 	b.w	286c8 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
   11cae:	20a4      	movs	r0, #164	; 0xa4
   11cb0:	2100      	movs	r1, #0
   11cb2:	f00f be91 	b.w	219d8 <z_impl_k_sleep>
   11cb6:	bf00      	nop
   11cb8:	2000285b 	.word	0x2000285b

00011cbc <data_out_block_mode>:
{
   11cbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
   11cc0:	f8df 9094 	ldr.w	r9, [pc, #148]	; 11d58 <data_out_block_mode+0x9c>
	return z_impl_k_mutex_lock(mutex, timeout);
   11cc4:	f8df a094 	ldr.w	sl, [pc, #148]	; 11d5c <data_out_block_mode+0xa0>
{
   11cc8:	4680      	mov	r8, r0
   11cca:	460f      	mov	r7, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   11ccc:	2404      	movs	r4, #4
   11cce:	46cb      	mov	fp, r9
		if (!is_sync_mode()) {
   11cd0:	f899 5000 	ldrb.w	r5, [r9]
   11cd4:	b9cd      	cbnz	r5, 11d0a <data_out_block_mode+0x4e>
   11cd6:	f04f 33ff 	mov.w	r3, #4294967295
   11cda:	f04f 32ff 	mov.w	r2, #4294967295
   11cde:	4650      	mov	r0, sl
   11ce0:	f00f fa14 	bl	2110c <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   11ce4:	463a      	mov	r2, r7
   11ce6:	4641      	mov	r1, r8
   11ce8:	4628      	mov	r0, r5
   11cea:	f00e ff95 	bl	20c18 <SEGGER_RTT_WriteSkipNoLock>
   11cee:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
   11cf0:	4650      	mov	r0, sl
   11cf2:	f00f fa89 	bl	21208 <z_impl_k_mutex_unlock>
		if (ret) {
   11cf6:	4d17      	ldr	r5, [pc, #92]	; (11d54 <data_out_block_mode+0x98>)
   11cf8:	b1fe      	cbz	r6, 11d3a <data_out_block_mode+0x7e>
	host_present = true;
   11cfa:	2301      	movs	r3, #1
   11cfc:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
   11cfe:	f89b 3000 	ldrb.w	r3, [fp]
   11d02:	b96b      	cbnz	r3, 11d20 <data_out_block_mode+0x64>
}
   11d04:	4638      	mov	r0, r7
   11d06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   11d0a:	463a      	mov	r2, r7
   11d0c:	4641      	mov	r1, r8
   11d0e:	2000      	movs	r0, #0
   11d10:	f00e ff82 	bl	20c18 <SEGGER_RTT_WriteSkipNoLock>
   11d14:	4606      	mov	r6, r0
   11d16:	e7ee      	b.n	11cf6 <data_out_block_mode+0x3a>
	if (retry_cnt == 0) {
   11d18:	b95c      	cbnz	r4, 11d32 <data_out_block_mode+0x76>
		host_present = false;
   11d1a:	702c      	strb	r4, [r5, #0]
   11d1c:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   11d20:	2000      	movs	r0, #0
   11d22:	f00e fff9 	bl	20d18 <SEGGER_RTT_HasDataUp>
   11d26:	2800      	cmp	r0, #0
   11d28:	d0ec      	beq.n	11d04 <data_out_block_mode+0x48>
   11d2a:	782b      	ldrb	r3, [r5, #0]
   11d2c:	2b00      	cmp	r3, #0
   11d2e:	d1f3      	bne.n	11d18 <data_out_block_mode+0x5c>
   11d30:	e7e8      	b.n	11d04 <data_out_block_mode+0x48>
			on_failed_write(retry_cnt--);
   11d32:	3c01      	subs	r4, #1
   11d34:	f7ff ffb4 	bl	11ca0 <on_failed_write.part.0>
   11d38:	e7f2      	b.n	11d20 <data_out_block_mode+0x64>
		} else if (host_present) {
   11d3a:	782b      	ldrb	r3, [r5, #0]
   11d3c:	b113      	cbz	r3, 11d44 <data_out_block_mode+0x88>
	if (retry_cnt == 0) {
   11d3e:	3c01      	subs	r4, #1
   11d40:	d104      	bne.n	11d4c <data_out_block_mode+0x90>
		host_present = false;
   11d42:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
   11d44:	782b      	ldrb	r3, [r5, #0]
   11d46:	2b00      	cmp	r3, #0
   11d48:	d1c2      	bne.n	11cd0 <data_out_block_mode+0x14>
   11d4a:	e7db      	b.n	11d04 <data_out_block_mode+0x48>
   11d4c:	f7ff ffa8 	bl	11ca0 <on_failed_write.part.0>
   11d50:	e7f8      	b.n	11d44 <data_out_block_mode+0x88>
   11d52:	bf00      	nop
   11d54:	2000285a 	.word	0x2000285a
   11d58:	2000285b 	.word	0x2000285b
   11d5c:	20000978 	.word	0x20000978

00011d60 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   11d60:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   11d62:	4910      	ldr	r1, [pc, #64]	; (11da4 <enable_logger+0x44>)
   11d64:	4810      	ldr	r0, [pc, #64]	; (11da8 <enable_logger+0x48>)
{
   11d66:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   11d68:	2200      	movs	r2, #0
   11d6a:	f016 fcda 	bl	28722 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   11d6e:	4d0f      	ldr	r5, [pc, #60]	; (11dac <enable_logger+0x4c>)
   11d70:	490f      	ldr	r1, [pc, #60]	; (11db0 <enable_logger+0x50>)
   11d72:	2200      	movs	r2, #0
   11d74:	2300      	movs	r3, #0
   11d76:	e9cd 2306 	strd	r2, r3, [sp, #24]
   11d7a:	2400      	movs	r4, #0
   11d7c:	230e      	movs	r3, #14
   11d7e:	e9cd 3403 	strd	r3, r4, [sp, #12]
   11d82:	e9cd 4401 	strd	r4, r4, [sp, #4]
   11d86:	4b0b      	ldr	r3, [pc, #44]	; (11db4 <enable_logger+0x54>)
   11d88:	9400      	str	r4, [sp, #0]
   11d8a:	f44f 7240 	mov.w	r2, #768	; 0x300
   11d8e:	4628      	mov	r0, r5
   11d90:	f00f ff7e 	bl	21c90 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   11d94:	4908      	ldr	r1, [pc, #32]	; (11db8 <enable_logger+0x58>)
   11d96:	4628      	mov	r0, r5
   11d98:	f016 fc4b 	bl	28632 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   11d9c:	4620      	mov	r0, r4
   11d9e:	b009      	add	sp, #36	; 0x24
   11da0:	bd30      	pop	{r4, r5, pc}
   11da2:	bf00      	nop
   11da4:	00011dbd 	.word	0x00011dbd
   11da8:	20001778 	.word	0x20001778
   11dac:	200017b0 	.word	0x200017b0
   11db0:	200033e0 	.word	0x200033e0
   11db4:	000121d9 	.word	0x000121d9
   11db8:	0002a05a 	.word	0x0002a05a

00011dbc <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   11dbc:	4801      	ldr	r0, [pc, #4]	; (11dc4 <log_process_thread_timer_expiry_fn+0x8>)
   11dbe:	f00f be9f 	b.w	21b00 <z_impl_k_sem_give>
   11dc2:	bf00      	nop
   11dc4:	200009b8 	.word	0x200009b8

00011dc8 <log_core_init>:
	panic_mode = false;
   11dc8:	4a0c      	ldr	r2, [pc, #48]	; (11dfc <log_core_init+0x34>)
   11dca:	2300      	movs	r3, #0
{
   11dcc:	b510      	push	{r4, lr}
	panic_mode = false;
   11dce:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   11dd0:	4a0b      	ldr	r2, [pc, #44]	; (11e00 <log_core_init+0x38>)
   11dd2:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
   11dd4:	4b0b      	ldr	r3, [pc, #44]	; (11e04 <log_core_init+0x3c>)
   11dd6:	4a0c      	ldr	r2, [pc, #48]	; (11e08 <log_core_init+0x40>)
   11dd8:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   11dda:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   11dde:	f000 fcd5 	bl	1278c <log_output_timestamp_freq_set>
		log_msg_pool_init();
   11de2:	f000 fa77 	bl	122d4 <log_msg_pool_init>
		log_list_init(&list);
   11de6:	4809      	ldr	r0, [pc, #36]	; (11e0c <log_core_init+0x44>)
   11de8:	f012 f8c1 	bl	23f6e <log_list_init>
}
   11dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   11df0:	4907      	ldr	r1, [pc, #28]	; (11e10 <log_core_init+0x48>)
   11df2:	4808      	ldr	r0, [pc, #32]	; (11e14 <log_core_init+0x4c>)
   11df4:	2308      	movs	r3, #8
   11df6:	2248      	movs	r2, #72	; 0x48
   11df8:	f016 b883 	b.w	27f02 <k_mem_slab_init>
   11dfc:	2000285d 	.word	0x2000285d
   11e00:	20002324 	.word	0x20002324
   11e04:	2000056c 	.word	0x2000056c
   11e08:	00023e1b 	.word	0x00023e1b
   11e0c:	2000232c 	.word	0x2000232c
   11e10:	20007d28 	.word	0x20007d28
   11e14:	20002334 	.word	0x20002334

00011e18 <log_init>:
{
   11e18:	b570      	push	{r4, r5, r6, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   11e1a:	4b12      	ldr	r3, [pc, #72]	; (11e64 <log_init+0x4c>)
   11e1c:	f3bf 8f5b 	dmb	ish
   11e20:	e853 5f00 	ldrex	r5, [r3]
   11e24:	1c6a      	adds	r2, r5, #1
   11e26:	e843 2100 	strex	r1, r2, [r3]
   11e2a:	2900      	cmp	r1, #0
   11e2c:	d1f8      	bne.n	11e20 <log_init+0x8>
   11e2e:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
   11e32:	b92d      	cbnz	r5, 11e40 <log_init+0x28>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   11e34:	4c0c      	ldr	r4, [pc, #48]	; (11e68 <log_init+0x50>)
   11e36:	4e0d      	ldr	r6, [pc, #52]	; (11e6c <log_init+0x54>)
   11e38:	1b36      	subs	r6, r6, r4
   11e3a:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
   11e3c:	42b5      	cmp	r5, r6
   11e3e:	db00      	blt.n	11e42 <log_init+0x2a>
}
   11e40:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   11e42:	7b23      	ldrb	r3, [r4, #12]
   11e44:	b153      	cbz	r3, 11e5c <log_init+0x44>
			if (backend->api->init != NULL) {
   11e46:	6823      	ldr	r3, [r4, #0]
   11e48:	699b      	ldr	r3, [r3, #24]
   11e4a:	b10b      	cbz	r3, 11e50 <log_init+0x38>
				backend->api->init(backend);
   11e4c:	4620      	mov	r0, r4
   11e4e:	4798      	blx	r3
			log_backend_enable(backend,
   11e50:	6863      	ldr	r3, [r4, #4]
   11e52:	2204      	movs	r2, #4
   11e54:	6819      	ldr	r1, [r3, #0]
   11e56:	4620      	mov	r0, r4
   11e58:	f000 fa2e 	bl	122b8 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   11e5c:	3501      	adds	r5, #1
   11e5e:	3410      	adds	r4, #16
   11e60:	e7ec      	b.n	11e3c <log_init+0x24>
   11e62:	bf00      	nop
   11e64:	20002328 	.word	0x20002328
   11e68:	00028f14 	.word	0x00028f14
   11e6c:	00028f24 	.word	0x00028f24

00011e70 <get_msg>:
{
   11e70:	b510      	push	{r4, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   11e72:	f04f 0340 	mov.w	r3, #64	; 0x40
   11e76:	f3ef 8411 	mrs	r4, BASEPRI
   11e7a:	f383 8812 	msr	BASEPRI_MAX, r3
   11e7e:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
   11e82:	4804      	ldr	r0, [pc, #16]	; (11e94 <get_msg+0x24>)
   11e84:	f012 f883 	bl	23f8e <log_list_head_get>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   11e88:	f384 8811 	msr	BASEPRI, r4
   11e8c:	f3bf 8f6f 	isb	sy
}
   11e90:	bd10      	pop	{r4, pc}
   11e92:	bf00      	nop
   11e94:	2000232c 	.word	0x2000232c

00011e98 <z_log_notify_backend_enabled>:
{
   11e98:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   11e9a:	4c04      	ldr	r4, [pc, #16]	; (11eac <z_log_notify_backend_enabled+0x14>)
   11e9c:	7822      	ldrb	r2, [r4, #0]
   11e9e:	b912      	cbnz	r2, 11ea6 <z_log_notify_backend_enabled+0xe>
   11ea0:	4803      	ldr	r0, [pc, #12]	; (11eb0 <z_log_notify_backend_enabled+0x18>)
   11ea2:	f00f fe2d 	bl	21b00 <z_impl_k_sem_give>
	backend_attached = true;
   11ea6:	2301      	movs	r3, #1
   11ea8:	7023      	strb	r3, [r4, #0]
}
   11eaa:	bd10      	pop	{r4, pc}
   11eac:	2000285c 	.word	0x2000285c
   11eb0:	200009b8 	.word	0x200009b8

00011eb4 <z_log_dropped>:
   11eb4:	4b0c      	ldr	r3, [pc, #48]	; (11ee8 <z_log_dropped+0x34>)
   11eb6:	f3bf 8f5b 	dmb	ish
   11eba:	e853 2f00 	ldrex	r2, [r3]
   11ebe:	3201      	adds	r2, #1
   11ec0:	e843 2100 	strex	r1, r2, [r3]
   11ec4:	2900      	cmp	r1, #0
   11ec6:	d1f8      	bne.n	11eba <z_log_dropped+0x6>
   11ec8:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   11ecc:	f3bf 8f5b 	dmb	ish
   11ed0:	4b06      	ldr	r3, [pc, #24]	; (11eec <z_log_dropped+0x38>)
   11ed2:	e853 2f00 	ldrex	r2, [r3]
   11ed6:	3a01      	subs	r2, #1
   11ed8:	e843 2100 	strex	r1, r2, [r3]
   11edc:	2900      	cmp	r1, #0
   11ede:	d1f8      	bne.n	11ed2 <z_log_dropped+0x1e>
   11ee0:	f3bf 8f5b 	dmb	ish
}
   11ee4:	4770      	bx	lr
   11ee6:	bf00      	nop
   11ee8:	20002324 	.word	0x20002324
   11eec:	20002320 	.word	0x20002320

00011ef0 <z_log_dropped_read_and_clear>:
}
   11ef0:	2000      	movs	r0, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11ef2:	4b06      	ldr	r3, [pc, #24]	; (11f0c <z_log_dropped_read_and_clear+0x1c>)
   11ef4:	f3bf 8f5b 	dmb	ish
   11ef8:	4602      	mov	r2, r0
   11efa:	e853 0f00 	ldrex	r0, [r3]
   11efe:	e843 2100 	strex	r1, r2, [r3]
   11f02:	2900      	cmp	r1, #0
   11f04:	d1f9      	bne.n	11efa <z_log_dropped_read_and_clear+0xa>
   11f06:	f3bf 8f5b 	dmb	ish
   11f0a:	4770      	bx	lr
   11f0c:	20002324 	.word	0x20002324

00011f10 <dropped_notify>:
{
   11f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   11f12:	f7ff ffed 	bl	11ef0 <z_log_dropped_read_and_clear>
   11f16:	4c0a      	ldr	r4, [pc, #40]	; (11f40 <dropped_notify+0x30>)
   11f18:	4d0a      	ldr	r5, [pc, #40]	; (11f44 <dropped_notify+0x34>)
   11f1a:	1b2d      	subs	r5, r5, r4
   11f1c:	4607      	mov	r7, r0
   11f1e:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   11f20:	2600      	movs	r6, #0
   11f22:	42ae      	cmp	r6, r5
   11f24:	db00      	blt.n	11f28 <dropped_notify+0x18>
}
   11f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   11f28:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   11f2a:	795b      	ldrb	r3, [r3, #5]
   11f2c:	b12b      	cbz	r3, 11f3a <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
   11f2e:	6823      	ldr	r3, [r4, #0]
   11f30:	691b      	ldr	r3, [r3, #16]
   11f32:	b113      	cbz	r3, 11f3a <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
   11f34:	4639      	mov	r1, r7
   11f36:	4620      	mov	r0, r4
   11f38:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   11f3a:	3601      	adds	r6, #1
   11f3c:	3410      	adds	r4, #16
   11f3e:	e7f0      	b.n	11f22 <dropped_notify+0x12>
   11f40:	00028f14 	.word	0x00028f14
   11f44:	00028f24 	.word	0x00028f24

00011f48 <z_log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
   11f48:	4b16      	ldr	r3, [pc, #88]	; (11fa4 <z_log_strdup+0x5c>)
   11f4a:	4298      	cmp	r0, r3
{
   11f4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11f4e:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   11f50:	d302      	bcc.n	11f58 <z_log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   11f52:	4b15      	ldr	r3, [pc, #84]	; (11fa8 <z_log_strdup+0x60>)
   11f54:	4298      	cmp	r0, r3
   11f56:	d320      	bcc.n	11f9a <z_log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   11f58:	4814      	ldr	r0, [pc, #80]	; (11fac <z_log_strdup+0x64>)
   11f5a:	2200      	movs	r2, #0
   11f5c:	2300      	movs	r3, #0
   11f5e:	a901      	add	r1, sp, #4
   11f60:	f00f f8a4 	bl	210ac <k_mem_slab_alloc>
	if (err != 0) {
   11f64:	4605      	mov	r5, r0
   11f66:	b9d8      	cbnz	r0, 11fa0 <z_log_strdup+0x58>
   11f68:	2201      	movs	r2, #1
   11f6a:	9b01      	ldr	r3, [sp, #4]
   11f6c:	f3bf 8f5b 	dmb	ish
   11f70:	e853 1f00 	ldrex	r1, [r3]
   11f74:	e843 2000 	strex	r0, r2, [r3]
   11f78:	2800      	cmp	r0, #0
   11f7a:	d1f9      	bne.n	11f70 <z_log_strdup+0x28>
   11f7c:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   11f80:	9801      	ldr	r0, [sp, #4]
   11f82:	4621      	mov	r1, r4
   11f84:	2241      	movs	r2, #65	; 0x41
   11f86:	3004      	adds	r0, #4
   11f88:	f012 ff2c 	bl	24de4 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   11f8c:	9c01      	ldr	r4, [sp, #4]
   11f8e:	237e      	movs	r3, #126	; 0x7e
   11f90:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   11f94:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
	return dup->buf;
   11f98:	3404      	adds	r4, #4
}
   11f9a:	4620      	mov	r0, r4
   11f9c:	b003      	add	sp, #12
   11f9e:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
   11fa0:	4c03      	ldr	r4, [pc, #12]	; (11fb0 <z_log_strdup+0x68>)
   11fa2:	e7fa      	b.n	11f9a <z_log_strdup+0x52>
   11fa4:	00028944 	.word	0x00028944
   11fa8:	0002c900 	.word	0x0002c900
   11fac:	20002334 	.word	0x20002334
   11fb0:	0002a062 	.word	0x0002a062

00011fb4 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   11fb4:	b150      	cbz	r0, 11fcc <log_is_strdup+0x18>
   11fb6:	4b06      	ldr	r3, [pc, #24]	; (11fd0 <log_is_strdup+0x1c>)
   11fb8:	4298      	cmp	r0, r3
   11fba:	d306      	bcc.n	11fca <log_is_strdup+0x16>
   11fbc:	f503 7310 	add.w	r3, r3, #576	; 0x240
   11fc0:	4298      	cmp	r0, r3
   11fc2:	bf2c      	ite	cs
   11fc4:	2000      	movcs	r0, #0
   11fc6:	2001      	movcc	r0, #1
   11fc8:	4770      	bx	lr
   11fca:	2000      	movs	r0, #0
}
   11fcc:	4770      	bx	lr
   11fce:	bf00      	nop
   11fd0:	20007d28 	.word	0x20007d28

00011fd4 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
   11fd4:	4b43      	ldr	r3, [pc, #268]	; (120e4 <z_impl_log_process+0x110>)
   11fd6:	781b      	ldrb	r3, [r3, #0]
{
   11fd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fdc:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
   11fde:	b903      	cbnz	r3, 11fe2 <z_impl_log_process+0xe>
   11fe0:	b1a0      	cbz	r0, 1200c <z_impl_log_process+0x38>
	msg = get_msg();
   11fe2:	f7ff ff45 	bl	11e70 <get_msg>
	if (msg.msg) {
   11fe6:	4605      	mov	r5, r0
   11fe8:	b118      	cbz	r0, 11ff2 <z_impl_log_process+0x1e>
		if (!bypass) {
   11fea:	b19c      	cbz	r4, 12014 <z_impl_log_process+0x40>
			log_msg_put(msg.msg);
   11fec:	4628      	mov	r0, r5
   11fee:	f012 f859 	bl	240a4 <log_msg_put>
	if (!bypass && z_log_dropped_pending()) {
   11ff2:	b92c      	cbnz	r4, 12000 <z_impl_log_process+0x2c>
	return dropped_cnt > 0;
   11ff4:	4b3c      	ldr	r3, [pc, #240]	; (120e8 <z_impl_log_process+0x114>)
	if (!bypass && z_log_dropped_pending()) {
   11ff6:	681b      	ldr	r3, [r3, #0]
   11ff8:	2b00      	cmp	r3, #0
   11ffa:	dd01      	ble.n	12000 <z_impl_log_process+0x2c>
		dropped_notify();
   11ffc:	f7ff ff88 	bl	11f10 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
   12000:	483a      	ldr	r0, [pc, #232]	; (120ec <z_impl_log_process+0x118>)
   12002:	f011 ffc2 	bl	23f8a <log_list_head_peek>
   12006:	1e04      	subs	r4, r0, #0
   12008:	bf18      	it	ne
   1200a:	2401      	movne	r4, #1
}
   1200c:	4620      	mov	r0, r4
   1200e:	b003      	add	sp, #12
   12010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   12014:	4b36      	ldr	r3, [pc, #216]	; (120f0 <z_impl_log_process+0x11c>)
   12016:	f3bf 8f5b 	dmb	ish
   1201a:	e853 2f00 	ldrex	r2, [r3]
   1201e:	3a01      	subs	r2, #1
   12020:	e843 2100 	strex	r1, r2, [r3]
   12024:	2900      	cmp	r1, #0
   12026:	d1f8      	bne.n	1201a <z_impl_log_process+0x46>
   12028:	f3bf 8f5b 	dmb	ish
		    !panic_mode) {
   1202c:	4b31      	ldr	r3, [pc, #196]	; (120f4 <z_impl_log_process+0x120>)
		if (!IS_ENABLED(CONFIG_LOG2) &&
   1202e:	781b      	ldrb	r3, [r3, #0]
   12030:	b9bb      	cbnz	r3, 12062 <z_impl_log_process+0x8e>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   12032:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
   12034:	07db      	lsls	r3, r3, #31
   12036:	d414      	bmi.n	12062 <z_impl_log_process+0x8e>
	msg_str = log_msg_str_get(msg);
   12038:	f012 f847 	bl	240ca <log_msg_str_get>
   1203c:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   1203e:	4628      	mov	r0, r5
   12040:	f012 f80e 	bl	24060 <log_msg_nargs_get>
   12044:	4601      	mov	r1, r0
   12046:	4640      	mov	r0, r8
   12048:	f011 feeb 	bl	23e22 <z_log_get_s_mask>
   1204c:	4b2a      	ldr	r3, [pc, #168]	; (120f8 <z_impl_log_process+0x124>)
   1204e:	4a2b      	ldr	r2, [pc, #172]	; (120fc <z_impl_log_process+0x128>)
		if (!is_rodata(str) && !log_is_strdup(str) &&
   12050:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 12110 <z_impl_log_process+0x13c>
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   12054:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 12114 <z_impl_log_process+0x140>
   12058:	1a9b      	subs	r3, r3, r2
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   1205a:	4606      	mov	r6, r0
   1205c:	ea4f 09d3 	mov.w	r9, r3, lsr #3
	while (mask) {
   12060:	b936      	cbnz	r6, 12070 <z_impl_log_process+0x9c>
	return __log_backends_end - __log_backends_start;
   12062:	4e27      	ldr	r6, [pc, #156]	; (12100 <z_impl_log_process+0x12c>)
   12064:	4f27      	ldr	r7, [pc, #156]	; (12104 <z_impl_log_process+0x130>)
   12066:	1bbf      	subs	r7, r7, r6
   12068:	113f      	asrs	r7, r7, #4
   1206a:	f04f 0800 	mov.w	r8, #0
   1206e:	e036      	b.n	120de <z_impl_log_process+0x10a>
		idx = 31 - __builtin_clz(mask);
   12070:	fab6 f786 	clz	r7, r6
   12074:	f1c7 071f 	rsb	r7, r7, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   12078:	4639      	mov	r1, r7
   1207a:	4628      	mov	r0, r5
   1207c:	f011 fff3 	bl	24066 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
   12080:	4b21      	ldr	r3, [pc, #132]	; (12108 <z_impl_log_process+0x134>)
   12082:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
   12084:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   12086:	d302      	bcc.n	1208e <z_impl_log_process+0xba>
		if (!is_rodata(str) && !log_is_strdup(str) &&
   12088:	4b20      	ldr	r3, [pc, #128]	; (1210c <z_impl_log_process+0x138>)
   1208a:	4298      	cmp	r0, r3
   1208c:	d316      	bcc.n	120bc <z_impl_log_process+0xe8>
   1208e:	4610      	mov	r0, r2
   12090:	f7ff ff90 	bl	11fb4 <log_is_strdup>
   12094:	b990      	cbnz	r0, 120bc <z_impl_log_process+0xe8>
   12096:	4552      	cmp	r2, sl
   12098:	d010      	beq.n	120bc <z_impl_log_process+0xe8>
	return msg->hdr.ids.source_id;
   1209a:	8969      	ldrh	r1, [r5, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
   1209c:	f3c1 1189 	ubfx	r1, r1, #6, #10
   120a0:	f000 f8fc 	bl	1229c <log_source_name_get>
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   120a4:	ea4f 1389 	mov.w	r3, r9, lsl #6
   120a8:	f043 0301 	orr.w	r3, r3, #1
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
   120ac:	4602      	mov	r2, r0
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   120ae:	f8ad 3000 	strh.w	r3, [sp]
   120b2:	4639      	mov	r1, r7
   120b4:	4643      	mov	r3, r8
   120b6:	4658      	mov	r0, fp
   120b8:	f011 ff0d 	bl	23ed6 <log_3>
		mask &= ~BIT(idx);
   120bc:	2301      	movs	r3, #1
   120be:	fa03 f707 	lsl.w	r7, r3, r7
   120c2:	ea26 0607 	bic.w	r6, r6, r7
   120c6:	e7cb      	b.n	12060 <z_impl_log_process+0x8c>
	return backend->cb->active;
   120c8:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
   120ca:	795b      	ldrb	r3, [r3, #5]
   120cc:	b123      	cbz	r3, 120d8 <z_impl_log_process+0x104>
	backend->api->put(backend, msg);
   120ce:	6833      	ldr	r3, [r6, #0]
   120d0:	4629      	mov	r1, r5
   120d2:	685b      	ldr	r3, [r3, #4]
   120d4:	4630      	mov	r0, r6
   120d6:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
   120d8:	f108 0801 	add.w	r8, r8, #1
   120dc:	3610      	adds	r6, #16
   120de:	45b8      	cmp	r8, r7
   120e0:	dbf2      	blt.n	120c8 <z_impl_log_process+0xf4>
   120e2:	e783      	b.n	11fec <z_impl_log_process+0x18>
   120e4:	2000285c 	.word	0x2000285c
   120e8:	20002324 	.word	0x20002324
   120ec:	2000232c 	.word	0x2000232c
   120f0:	20002320 	.word	0x20002320
   120f4:	2000285d 	.word	0x2000285d
   120f8:	00028ea4 	.word	0x00028ea4
   120fc:	00028dd4 	.word	0x00028dd4
   12100:	00028f14 	.word	0x00028f14
   12104:	00028f24 	.word	0x00028f24
   12108:	00028944 	.word	0x00028944
   1210c:	0002c900 	.word	0x0002c900
   12110:	0002a062 	.word	0x0002a062
   12114:	0002a07c 	.word	0x0002a07c

00012118 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
   12118:	4b28      	ldr	r3, [pc, #160]	; (121bc <msg_finalize+0xa4>)
{
   1211a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
   1211c:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
   1211e:	8141      	strh	r1, [r0, #10]
{
   12120:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   12122:	4798      	blx	r3
   12124:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   12126:	f04f 0340 	mov.w	r3, #64	; 0x40
   1212a:	f3ef 8511 	mrs	r5, BASEPRI
   1212e:	f383 8812 	msr	BASEPRI_MAX, r3
   12132:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   12136:	4822      	ldr	r0, [pc, #136]	; (121c0 <msg_finalize+0xa8>)
   12138:	4621      	mov	r1, r4
   1213a:	f011 ff1c 	bl	23f76 <log_list_add_tail>
	__asm__ volatile(
   1213e:	f385 8811 	msr	BASEPRI, r5
   12142:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   12146:	f3bf 8f5b 	dmb	ish
   1214a:	4b1e      	ldr	r3, [pc, #120]	; (121c4 <msg_finalize+0xac>)
   1214c:	e853 2f00 	ldrex	r2, [r3]
   12150:	1c51      	adds	r1, r2, #1
   12152:	e843 1000 	strex	r0, r1, [r3]
   12156:	2800      	cmp	r0, #0
   12158:	d1f8      	bne.n	1214c <msg_finalize+0x34>
   1215a:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
   1215e:	4b1a      	ldr	r3, [pc, #104]	; (121c8 <msg_finalize+0xb0>)
   12160:	781b      	ldrb	r3, [r3, #0]
   12162:	b183      	cbz	r3, 12186 <msg_finalize+0x6e>
	__asm__ volatile(
   12164:	f04f 0340 	mov.w	r3, #64	; 0x40
   12168:	f3ef 8411 	mrs	r4, BASEPRI
   1216c:	f383 8812 	msr	BASEPRI_MAX, r3
   12170:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   12174:	2000      	movs	r0, #0
   12176:	f7ff ff2d 	bl	11fd4 <z_impl_log_process>
	__asm__ volatile(
   1217a:	f384 8811 	msr	BASEPRI, r4
   1217e:	f3bf 8f6f 	isb	sy
}
   12182:	b003      	add	sp, #12
   12184:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && cnt == 0) {
   12186:	4b11      	ldr	r3, [pc, #68]	; (121cc <msg_finalize+0xb4>)
   12188:	681b      	ldr	r3, [r3, #0]
   1218a:	2b00      	cmp	r3, #0
   1218c:	d0f9      	beq.n	12182 <msg_finalize+0x6a>
   1218e:	b952      	cbnz	r2, 121a6 <msg_finalize+0x8e>
	z_impl_k_timer_start(timer, duration, period);
   12190:	2200      	movs	r2, #0
   12192:	2300      	movs	r3, #0
   12194:	e9cd 2300 	strd	r2, r3, [sp]
   12198:	480d      	ldr	r0, [pc, #52]	; (121d0 <msg_finalize+0xb8>)
   1219a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1219e:	2300      	movs	r3, #0
   121a0:	f00f ffa2 	bl	220e8 <z_impl_k_timer_start>
   121a4:	e7ed      	b.n	12182 <msg_finalize+0x6a>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   121a6:	2a0a      	cmp	r2, #10
   121a8:	d1eb      	bne.n	12182 <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
   121aa:	4809      	ldr	r0, [pc, #36]	; (121d0 <msg_finalize+0xb8>)
   121ac:	f016 fac5 	bl	2873a <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   121b0:	4808      	ldr	r0, [pc, #32]	; (121d4 <msg_finalize+0xbc>)
}
   121b2:	b003      	add	sp, #12
   121b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   121b8:	f00f bca2 	b.w	21b00 <z_impl_k_sem_give>
   121bc:	2000056c 	.word	0x2000056c
   121c0:	2000232c 	.word	0x2000232c
   121c4:	20002320 	.word	0x20002320
   121c8:	2000285d 	.word	0x2000285d
   121cc:	20002350 	.word	0x20002350
   121d0:	20001778 	.word	0x20001778
   121d4:	200009b8 	.word	0x200009b8

000121d8 <log_process_thread_func>:
{
   121d8:	b510      	push	{r4, lr}
	log_init();
   121da:	f7ff fe1d 	bl	11e18 <log_init>
	return z_impl_z_current_get();
   121de:	f00f fc15 	bl	21a0c <z_impl_z_current_get>
	proc_tid = process_tid;
   121e2:	4b0c      	ldr	r3, [pc, #48]	; (12214 <log_process_thread_func+0x3c>)
   121e4:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   121e6:	b130      	cbz	r0, 121f6 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   121e8:	4b0b      	ldr	r3, [pc, #44]	; (12218 <log_process_thread_func+0x40>)
	    process_tid &&
   121ea:	681b      	ldr	r3, [r3, #0]
   121ec:	2b09      	cmp	r3, #9
   121ee:	dd02      	ble.n	121f6 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
   121f0:	480a      	ldr	r0, [pc, #40]	; (1221c <log_process_thread_func+0x44>)
   121f2:	f00f fc85 	bl	21b00 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   121f6:	4c09      	ldr	r4, [pc, #36]	; (1221c <log_process_thread_func+0x44>)
   121f8:	2000      	movs	r0, #0
   121fa:	f7ff feeb 	bl	11fd4 <z_impl_log_process>
		if (log_process(false) == false) {
   121fe:	2800      	cmp	r0, #0
   12200:	d1fa      	bne.n	121f8 <log_process_thread_func+0x20>
   12202:	f04f 32ff 	mov.w	r2, #4294967295
   12206:	f04f 33ff 	mov.w	r3, #4294967295
   1220a:	4620      	mov	r0, r4
   1220c:	f00f fc9e 	bl	21b4c <z_impl_k_sem_take>
   12210:	e7f2      	b.n	121f8 <log_process_thread_func+0x20>
   12212:	bf00      	nop
   12214:	20002350 	.word	0x20002350
   12218:	20002320 	.word	0x20002320
   1221c:	200009b8 	.word	0x200009b8

00012220 <z_impl_log_panic>:
{
   12220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   12222:	4f0e      	ldr	r7, [pc, #56]	; (1225c <z_impl_log_panic+0x3c>)
   12224:	783d      	ldrb	r5, [r7, #0]
   12226:	b975      	cbnz	r5, 12246 <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
   12228:	4c0d      	ldr	r4, [pc, #52]	; (12260 <z_impl_log_panic+0x40>)
   1222a:	4e0e      	ldr	r6, [pc, #56]	; (12264 <z_impl_log_panic+0x44>)
	log_init();
   1222c:	f7ff fdf4 	bl	11e18 <log_init>
   12230:	1b36      	subs	r6, r6, r4
   12232:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   12234:	42b5      	cmp	r5, r6
   12236:	db07      	blt.n	12248 <z_impl_log_panic+0x28>
   12238:	2000      	movs	r0, #0
   1223a:	f7ff fecb 	bl	11fd4 <z_impl_log_process>
		while (log_process(false) == true) {
   1223e:	2800      	cmp	r0, #0
   12240:	d1fa      	bne.n	12238 <z_impl_log_panic+0x18>
	panic_mode = true;
   12242:	2301      	movs	r3, #1
   12244:	703b      	strb	r3, [r7, #0]
}
   12246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
   12248:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   1224a:	795b      	ldrb	r3, [r3, #5]
   1224c:	b11b      	cbz	r3, 12256 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
   1224e:	6823      	ldr	r3, [r4, #0]
   12250:	4620      	mov	r0, r4
   12252:	695b      	ldr	r3, [r3, #20]
   12254:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   12256:	3501      	adds	r5, #1
   12258:	3410      	adds	r4, #16
   1225a:	e7eb      	b.n	12234 <z_impl_log_panic+0x14>
   1225c:	2000285d 	.word	0x2000285d
   12260:	00028f14 	.word	0x00028f14
   12264:	00028f24 	.word	0x00028f24

00012268 <z_log_free>:
{
   12268:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   1226a:	3804      	subs	r0, #4
   1226c:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1226e:	f3bf 8f5b 	dmb	ish
   12272:	e850 3f00 	ldrex	r3, [r0]
   12276:	1e5a      	subs	r2, r3, #1
   12278:	e840 2100 	strex	r1, r2, [r0]
   1227c:	2900      	cmp	r1, #0
   1227e:	d1f8      	bne.n	12272 <z_log_free+0xa>
   12280:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
   12284:	2b01      	cmp	r3, #1
   12286:	d103      	bne.n	12290 <z_log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   12288:	4803      	ldr	r0, [pc, #12]	; (12298 <z_log_free+0x30>)
   1228a:	a901      	add	r1, sp, #4
   1228c:	f015 fe54 	bl	27f38 <k_mem_slab_free>
}
   12290:	b003      	add	sp, #12
   12292:	f85d fb04 	ldr.w	pc, [sp], #4
   12296:	bf00      	nop
   12298:	20002334 	.word	0x20002334

0001229c <log_source_name_get>:
   1229c:	4a04      	ldr	r2, [pc, #16]	; (122b0 <log_source_name_get+0x14>)
   1229e:	4b05      	ldr	r3, [pc, #20]	; (122b4 <log_source_name_get+0x18>)
   122a0:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   122a2:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   122a6:	bf34      	ite	cc
   122a8:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   122ac:	2000      	movcs	r0, #0
}
   122ae:	4770      	bx	lr
   122b0:	00028dd4 	.word	0x00028dd4
   122b4:	00028f14 	.word	0x00028f14

000122b8 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   122b8:	4b05      	ldr	r3, [pc, #20]	; (122d0 <log_backend_enable+0x18>)

	log_backend_id_set(backend, id);
   122ba:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
   122bc:	1ac3      	subs	r3, r0, r3
   122be:	111b      	asrs	r3, r3, #4
   122c0:	3301      	adds	r3, #1
	log_backend_id_set(backend, id);
   122c2:	7113      	strb	r3, [r2, #4]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);
   122c4:	6843      	ldr	r3, [r0, #4]
	backend->cb->active = true;
   122c6:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
   122c8:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   122ca:	715a      	strb	r2, [r3, #5]

	z_log_notify_backend_enabled();
   122cc:	f7ff bde4 	b.w	11e98 <z_log_notify_backend_enabled>
   122d0:	00028f14 	.word	0x00028f14

000122d4 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   122d4:	2320      	movs	r3, #32
   122d6:	4902      	ldr	r1, [pc, #8]	; (122e0 <log_msg_pool_init+0xc>)
   122d8:	4802      	ldr	r0, [pc, #8]	; (122e4 <log_msg_pool_init+0x10>)
   122da:	461a      	mov	r2, r3
   122dc:	f015 be11 	b.w	27f02 <k_mem_slab_init>
   122e0:	20007f68 	.word	0x20007f68
   122e4:	20002354 	.word	0x20002354

000122e8 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
   122e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
   122ea:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
   122ec:	4d09      	ldr	r5, [pc, #36]	; (12314 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
   122ee:	9301      	str	r3, [sp, #4]
   122f0:	2001      	movs	r0, #1
   122f2:	f7ff fe6f 	bl	11fd4 <z_impl_log_process>
   122f6:	4604      	mov	r4, r0
			z_log_dropped();
   122f8:	f7ff fddc 	bl	11eb4 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   122fc:	2200      	movs	r2, #0
   122fe:	2300      	movs	r3, #0
   12300:	a901      	add	r1, sp, #4
   12302:	4628      	mov	r0, r5
   12304:	f00e fed2 	bl	210ac <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   12308:	b108      	cbz	r0, 1230e <log_msg_no_space_handle+0x26>
   1230a:	2c00      	cmp	r4, #0
   1230c:	d1f0      	bne.n	122f0 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
   1230e:	9801      	ldr	r0, [sp, #4]
   12310:	b003      	add	sp, #12
   12312:	bd30      	pop	{r4, r5, pc}
   12314:	20002354 	.word	0x20002354

00012318 <log_msg_chunk_alloc>:
{
   12318:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
   1231a:	2300      	movs	r3, #0
   1231c:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   1231e:	4807      	ldr	r0, [pc, #28]	; (1233c <log_msg_chunk_alloc+0x24>)
   12320:	2200      	movs	r2, #0
   12322:	2300      	movs	r3, #0
   12324:	a901      	add	r1, sp, #4
   12326:	f00e fec1 	bl	210ac <k_mem_slab_alloc>
	if (err != 0) {
   1232a:	b110      	cbz	r0, 12332 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
   1232c:	f7ff ffdc 	bl	122e8 <log_msg_no_space_handle>
   12330:	9001      	str	r0, [sp, #4]
}
   12332:	9801      	ldr	r0, [sp, #4]
   12334:	b003      	add	sp, #12
   12336:	f85d fb04 	ldr.w	pc, [sp], #4
   1233a:	bf00      	nop
   1233c:	20002354 	.word	0x20002354

00012340 <msg_free>:
{
   12340:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   12342:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
   12344:	7a45      	ldrb	r5, [r0, #9]
{
   12346:	b085      	sub	sp, #20
	return msg->hdr.params.std.nargs;
   12348:	092d      	lsrs	r5, r5, #4
{
   1234a:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
   1234c:	07d8      	lsls	r0, r3, #31
   1234e:	d41c      	bmi.n	1238a <msg_free+0x4a>
   12350:	b1dd      	cbz	r5, 1238a <msg_free+0x4a>
		uint32_t smask = 0U;
   12352:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
   12354:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
   12356:	9801      	ldr	r0, [sp, #4]
   12358:	4631      	mov	r1, r6
   1235a:	f011 fe84 	bl	24066 <log_msg_arg_get>
   1235e:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
   12360:	f7ff fe28 	bl	11fb4 <log_is_strdup>
   12364:	b170      	cbz	r0, 12384 <msg_free+0x44>
				if (smask == 0U) {
   12366:	b934      	cbnz	r4, 12376 <msg_free+0x36>
					smask = z_log_get_s_mask(
   12368:	9b01      	ldr	r3, [sp, #4]
   1236a:	4629      	mov	r1, r5
   1236c:	6918      	ldr	r0, [r3, #16]
   1236e:	f011 fd58 	bl	23e22 <z_log_get_s_mask>
					if (smask == 0U) {
   12372:	4604      	mov	r4, r0
   12374:	b148      	cbz	r0, 1238a <msg_free+0x4a>
				if (smask & BIT(i)) {
   12376:	fa24 f306 	lsr.w	r3, r4, r6
   1237a:	07d9      	lsls	r1, r3, #31
   1237c:	d502      	bpl.n	12384 <msg_free+0x44>
					z_log_free(buf);
   1237e:	4638      	mov	r0, r7
   12380:	f7ff ff72 	bl	12268 <z_log_free>
		for (i = 0U; i < nargs; i++) {
   12384:	3601      	adds	r6, #1
   12386:	42ae      	cmp	r6, r5
   12388:	d3e5      	bcc.n	12356 <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
   1238a:	9b01      	ldr	r3, [sp, #4]
   1238c:	7a1a      	ldrb	r2, [r3, #8]
   1238e:	0792      	lsls	r2, r2, #30
   12390:	d504      	bpl.n	1239c <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
   12392:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   12394:	4c08      	ldr	r4, [pc, #32]	; (123b8 <msg_free+0x78>)
   12396:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
   12398:	9b03      	ldr	r3, [sp, #12]
   1239a:	b92b      	cbnz	r3, 123a8 <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   1239c:	4806      	ldr	r0, [pc, #24]	; (123b8 <msg_free+0x78>)
   1239e:	a901      	add	r1, sp, #4
   123a0:	f015 fdca 	bl	27f38 <k_mem_slab_free>
}
   123a4:	b005      	add	sp, #20
   123a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
   123a8:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   123aa:	a903      	add	r1, sp, #12
   123ac:	4620      	mov	r0, r4
   123ae:	f015 fdc3 	bl	27f38 <k_mem_slab_free>
		cont = next;
   123b2:	9503      	str	r5, [sp, #12]
   123b4:	e7f0      	b.n	12398 <msg_free+0x58>
   123b6:	bf00      	nop
   123b8:	20002354 	.word	0x20002354

000123bc <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   123bc:	b40e      	push	{r1, r2, r3}
   123be:	b503      	push	{r0, r1, lr}
   123c0:	ab03      	add	r3, sp, #12
   123c2:	4601      	mov	r1, r0
   123c4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   123c8:	4804      	ldr	r0, [pc, #16]	; (123dc <print_formatted+0x20>)
	va_start(args, fmt);
   123ca:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   123cc:	f7fe fc10 	bl	10bf0 <cbvprintf>
	va_end(args);

	return length;
}
   123d0:	b002      	add	sp, #8
   123d2:	f85d eb04 	ldr.w	lr, [sp], #4
   123d6:	b003      	add	sp, #12
   123d8:	4770      	bx	lr
   123da:	bf00      	nop
   123dc:	00024519 	.word	0x00024519

000123e0 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
   123e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123e4:	b087      	sub	sp, #28
   123e6:	461f      	mov	r7, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   123e8:	f001 0301 	and.w	r3, r1, #1
{
   123ec:	9205      	str	r2, [sp, #20]
   123ee:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
   123f2:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   123f6:	9304      	str	r3, [sp, #16]
{
   123f8:	4606      	mov	r6, r0
   123fa:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   123fc:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   12400:	f001 0508 	and.w	r5, r1, #8
	const char *tag = z_log_get_tag();
   12404:	f011 fdb1 	bl	23f6a <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
   12408:	4602      	mov	r2, r0
   1240a:	2800      	cmp	r0, #0
   1240c:	d044      	beq.n	12498 <prefix_print+0xb8>
		length += print_formatted(output, "%s ", tag);
   1240e:	4939      	ldr	r1, [pc, #228]	; (124f4 <prefix_print+0x114>)
   12410:	4630      	mov	r0, r6
   12412:	f7ff ffd3 	bl	123bc <print_formatted>
   12416:	4604      	mov	r4, r0
	}

	if (stamp) {
   12418:	f1bb 0f00 	cmp.w	fp, #0
   1241c:	d008      	beq.n	12430 <prefix_print+0x50>
	if (!format) {
   1241e:	f018 0f44 	tst.w	r8, #68	; 0x44
   12422:	d13b      	bne.n	1249c <prefix_print+0xbc>
		length = print_formatted(output, "[%08lu] ", timestamp);
   12424:	4934      	ldr	r1, [pc, #208]	; (124f8 <prefix_print+0x118>)
   12426:	463a      	mov	r2, r7
   12428:	4630      	mov	r0, r6
   1242a:	f7ff ffc7 	bl	123bc <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   1242e:	4404      	add	r4, r0
	if (color) {
   12430:	9b04      	ldr	r3, [sp, #16]
   12432:	b153      	cbz	r3, 1244a <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
   12434:	4b31      	ldr	r3, [pc, #196]	; (124fc <prefix_print+0x11c>)
		print_formatted(output, "%s", log_color);
   12436:	4932      	ldr	r1, [pc, #200]	; (12500 <prefix_print+0x120>)
		const char *log_color = start && (colors[level] != NULL) ?
   12438:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
   1243c:	4b31      	ldr	r3, [pc, #196]	; (12504 <prefix_print+0x124>)
   1243e:	4630      	mov	r0, r6
   12440:	2a00      	cmp	r2, #0
   12442:	bf08      	it	eq
   12444:	461a      	moveq	r2, r3
   12446:	f7ff ffb9 	bl	123bc <print_formatted>
	if (level_on) {
   1244a:	b13d      	cbz	r5, 1245c <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
   1244c:	4b2e      	ldr	r3, [pc, #184]	; (12508 <prefix_print+0x128>)
   1244e:	492f      	ldr	r1, [pc, #188]	; (1250c <prefix_print+0x12c>)
   12450:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
   12454:	4630      	mov	r0, r6
   12456:	f7ff ffb1 	bl	123bc <print_formatted>
   1245a:	4605      	mov	r5, r0
	if (source_id >= 0) {
   1245c:	f1ba 0f00 	cmp.w	sl, #0
   12460:	db16      	blt.n	12490 <prefix_print+0xb0>
		total += print_formatted(output,
   12462:	9b05      	ldr	r3, [sp, #20]
   12464:	2b00      	cmp	r3, #0
   12466:	d043      	beq.n	124f0 <prefix_print+0x110>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   12468:	2301      	movs	r3, #1
   1246a:	fa03 f909 	lsl.w	r9, r3, r9
		total += print_formatted(output,
   1246e:	4b28      	ldr	r3, [pc, #160]	; (12510 <prefix_print+0x130>)
   12470:	4f28      	ldr	r7, [pc, #160]	; (12514 <prefix_print+0x134>)
   12472:	f019 0f10 	tst.w	r9, #16
   12476:	bf18      	it	ne
   12478:	461f      	movne	r7, r3
   1247a:	4651      	mov	r1, sl
   1247c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   12480:	f7ff ff0c 	bl	1229c <log_source_name_get>
   12484:	4639      	mov	r1, r7
   12486:	4602      	mov	r2, r0
   12488:	4630      	mov	r0, r6
   1248a:	f7ff ff97 	bl	123bc <print_formatted>
   1248e:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
   12490:	1928      	adds	r0, r5, r4
   12492:	b007      	add	sp, #28
   12494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
   12498:	4604      	mov	r4, r0
   1249a:	e7bd      	b.n	12418 <prefix_print+0x38>
	} else if (freq != 0U) {
   1249c:	4b1e      	ldr	r3, [pc, #120]	; (12518 <prefix_print+0x138>)
   1249e:	6818      	ldr	r0, [r3, #0]
   124a0:	2800      	cmp	r0, #0
   124a2:	d0c4      	beq.n	1242e <prefix_print+0x4e>
		timestamp /= timestamp_div;
   124a4:	4b1d      	ldr	r3, [pc, #116]	; (1251c <prefix_print+0x13c>)
   124a6:	f44f 6c61 	mov.w	ip, #3600	; 0xe10
   124aa:	6819      	ldr	r1, [r3, #0]
   124ac:	fbb7 f7f1 	udiv	r7, r7, r1
		total_seconds = timestamp / freq;
   124b0:	fbb7 f1f0 	udiv	r1, r7, r0
		remainder = timestamp % freq;
   124b4:	fb00 7711 	mls	r7, r0, r1, r7
   124b8:	fbb1 f2fc 	udiv	r2, r1, ip
   124bc:	fb0c 1c12 	mls	ip, ip, r2, r1
		ms = (remainder * 1000U) / freq;
   124c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   124c4:	434f      	muls	r7, r1
		mins = seconds / 60U;
   124c6:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   124ca:	fbb7 f8f0 	udiv	r8, r7, r0
   124ce:	fb00 7718 	mls	r7, r0, r8, r7
   124d2:	434f      	muls	r7, r1
		mins = seconds / 60U;
   124d4:	fbbc f3fe 	udiv	r3, ip, lr
			length = print_formatted(output,
   124d8:	fb0e c113 	mls	r1, lr, r3, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   124dc:	fbb7 f0f0 	udiv	r0, r7, r0
			length = print_formatted(output,
   124e0:	9100      	str	r1, [sp, #0]
   124e2:	e9cd 8001 	strd	r8, r0, [sp, #4]
   124e6:	490e      	ldr	r1, [pc, #56]	; (12520 <prefix_print+0x140>)
   124e8:	4630      	mov	r0, r6
   124ea:	f7ff ff67 	bl	123bc <print_formatted>
   124ee:	e79e      	b.n	1242e <prefix_print+0x4e>
		total += print_formatted(output,
   124f0:	4f08      	ldr	r7, [pc, #32]	; (12514 <prefix_print+0x134>)
   124f2:	e7c2      	b.n	1247a <prefix_print+0x9a>
   124f4:	0002a0ca 	.word	0x0002a0ca
   124f8:	0002a0ce 	.word	0x0002a0ce
   124fc:	000293d8 	.word	0x000293d8
   12500:	0002b504 	.word	0x0002b504
   12504:	0002a0c0 	.word	0x0002a0c0
   12508:	000293ec 	.word	0x000293ec
   1250c:	0002a0f3 	.word	0x0002a0f3
   12510:	0002c473 	.word	0x0002c473
   12514:	0002a0c5 	.word	0x0002a0c5
   12518:	20002370 	.word	0x20002370
   1251c:	20002374 	.word	0x20002374
   12520:	0002a0d7 	.word	0x0002a0d7

00012524 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
   12524:	b538      	push	{r3, r4, r5, lr}
   12526:	460c      	mov	r4, r1
	if (color) {
   12528:	07e1      	lsls	r1, r4, #31
{
   1252a:	4605      	mov	r5, r0
	if (color) {
   1252c:	d503      	bpl.n	12536 <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
   1252e:	4a08      	ldr	r2, [pc, #32]	; (12550 <postfix_print+0x2c>)
   12530:	4908      	ldr	r1, [pc, #32]	; (12554 <postfix_print+0x30>)
   12532:	f7ff ff43 	bl	123bc <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   12536:	06e2      	lsls	r2, r4, #27
   12538:	d408      	bmi.n	1254c <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   1253a:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   1253c:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
   1253e:	bf4c      	ite	mi
   12540:	4905      	ldrmi	r1, [pc, #20]	; (12558 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   12542:	4906      	ldrpl	r1, [pc, #24]	; (1255c <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
   12544:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
   12548:	f7ff bf38 	b.w	123bc <print_formatted>
}
   1254c:	bd38      	pop	{r3, r4, r5, pc}
   1254e:	bf00      	nop
   12550:	0002a0c0 	.word	0x0002a0c0
   12554:	0002b504 	.word	0x0002b504
   12558:	0002a0fa 	.word	0x0002a0fa
   1255c:	0002a0f9 	.word	0x0002a0f9

00012560 <hexdump_line_print>:
{
   12560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12564:	461d      	mov	r5, r3
   12566:	9b08      	ldr	r3, [sp, #32]
   12568:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1256a:	06da      	lsls	r2, r3, #27
{
   1256c:	4604      	mov	r4, r0
   1256e:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   12570:	d405      	bmi.n	1257e <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   12572:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   12574:	bf4c      	ite	mi
   12576:	492a      	ldrmi	r1, [pc, #168]	; (12620 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
   12578:	492a      	ldrpl	r1, [pc, #168]	; (12624 <hexdump_line_print+0xc4>)
   1257a:	f7ff ff1f 	bl	123bc <print_formatted>
		print_formatted(output, " ");
   1257e:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 1262c <hexdump_line_print+0xcc>
{
   12582:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
   12586:	45a8      	cmp	r8, r5
   12588:	db2a      	blt.n	125e0 <hexdump_line_print+0x80>
			print_formatted(output, "   ");
   1258a:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 12630 <hexdump_line_print+0xd0>
			print_formatted(output, "%02x ", data[i]);
   1258e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 12634 <hexdump_line_print+0xd4>
			print_formatted(output, " ");
   12592:	f8df a098 	ldr.w	sl, [pc, #152]	; 1262c <hexdump_line_print+0xcc>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12596:	2500      	movs	r5, #0
		if (i < length) {
   12598:	42bd      	cmp	r5, r7
   1259a:	d22f      	bcs.n	125fc <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
   1259c:	5d72      	ldrb	r2, [r6, r5]
   1259e:	4649      	mov	r1, r9
   125a0:	4620      	mov	r0, r4
   125a2:	f7ff ff0b 	bl	123bc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   125a6:	3501      	adds	r5, #1
   125a8:	2d10      	cmp	r5, #16
   125aa:	d120      	bne.n	125ee <hexdump_line_print+0x8e>
	print_formatted(output, "|");
   125ac:	491e      	ldr	r1, [pc, #120]	; (12628 <hexdump_line_print+0xc8>)
			print_formatted(output, " ");
   125ae:	f8df 807c 	ldr.w	r8, [pc, #124]	; 1262c <hexdump_line_print+0xcc>
			print_formatted(output, "%c",
   125b2:	f8df 9084 	ldr.w	r9, [pc, #132]	; 12638 <hexdump_line_print+0xd8>
	print_formatted(output, "|");
   125b6:	4620      	mov	r0, r4
   125b8:	f7ff ff00 	bl	123bc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   125bc:	2500      	movs	r5, #0
		if (i < length) {
   125be:	42af      	cmp	r7, r5
   125c0:	d928      	bls.n	12614 <hexdump_line_print+0xb4>
			char c = (char)data[i];
   125c2:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
   125c4:	f1a2 0320 	sub.w	r3, r2, #32
   125c8:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(output, "%c",
   125ca:	bf28      	it	cs
   125cc:	222e      	movcs	r2, #46	; 0x2e
   125ce:	4649      	mov	r1, r9
   125d0:	4620      	mov	r0, r4
   125d2:	f7ff fef3 	bl	123bc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   125d6:	3501      	adds	r5, #1
   125d8:	2d10      	cmp	r5, #16
   125da:	d114      	bne.n	12606 <hexdump_line_print+0xa6>
}
   125dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
   125e0:	4649      	mov	r1, r9
   125e2:	4620      	mov	r0, r4
   125e4:	f7ff feea 	bl	123bc <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   125e8:	f108 0801 	add.w	r8, r8, #1
   125ec:	e7cb      	b.n	12586 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
   125ee:	076a      	lsls	r2, r5, #29
   125f0:	d1d2      	bne.n	12598 <hexdump_line_print+0x38>
			print_formatted(output, " ");
   125f2:	4651      	mov	r1, sl
   125f4:	4620      	mov	r0, r4
   125f6:	f7ff fee1 	bl	123bc <print_formatted>
   125fa:	e7cd      	b.n	12598 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
   125fc:	4641      	mov	r1, r8
   125fe:	4620      	mov	r0, r4
   12600:	f7ff fedc 	bl	123bc <print_formatted>
   12604:	e7cf      	b.n	125a6 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
   12606:	076b      	lsls	r3, r5, #29
   12608:	d1d9      	bne.n	125be <hexdump_line_print+0x5e>
			print_formatted(output, " ");
   1260a:	4641      	mov	r1, r8
   1260c:	4620      	mov	r0, r4
   1260e:	f7ff fed5 	bl	123bc <print_formatted>
   12612:	e7d4      	b.n	125be <hexdump_line_print+0x5e>
			print_formatted(output, " ");
   12614:	4641      	mov	r1, r8
   12616:	4620      	mov	r0, r4
   12618:	f7ff fed0 	bl	123bc <print_formatted>
   1261c:	e7db      	b.n	125d6 <hexdump_line_print+0x76>
   1261e:	bf00      	nop
   12620:	0002a0fa 	.word	0x0002a0fa
   12624:	0002a0f9 	.word	0x0002a0f9
   12628:	0002a106 	.word	0x0002a106
   1262c:	00029bfe 	.word	0x00029bfe
   12630:	0002a102 	.word	0x0002a102
   12634:	0002a0fc 	.word	0x0002a0fc
   12638:	0002a108 	.word	0x0002a108

0001263c <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg,
			    uint32_t flags)
{
   1263c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
   12640:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(output, flags, std_msg, timestamp,
   12642:	f013 0807 	ands.w	r8, r3, #7
{
   12646:	4617      	mov	r7, r2
   12648:	b08a      	sub	sp, #40	; 0x28
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   1264a:	7a0a      	ldrb	r2, [r1, #8]
   1264c:	4605      	mov	r5, r0
   1264e:	460e      	mov	r6, r1
			0 : prefix_print(output, flags, std_msg, timestamp,
   12650:	d021      	beq.n	12696 <log_output_msg_process+0x5a>
	return msg->hdr.ids.source_id;
   12652:	8949      	ldrh	r1, [r1, #10]
   12654:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   12658:	f3c1 1189 	ubfx	r1, r1, #6, #10
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   1265c:	43d2      	mvns	r2, r2
   1265e:	e9cd 8300 	strd	r8, r3, [sp]
   12662:	9102      	str	r1, [sp, #8]
   12664:	68f3      	ldr	r3, [r6, #12]
   12666:	f002 0201 	and.w	r2, r2, #1
   1266a:	4639      	mov	r1, r7
   1266c:	f7ff feb8 	bl	123e0 <prefix_print>
   12670:	4681      	mov	r9, r0
   12672:	7a34      	ldrb	r4, [r6, #8]
   12674:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
   12676:	f014 0401 	ands.w	r4, r4, #1
   1267a:	d00e      	beq.n	1269a <log_output_msg_process+0x5e>
		std_print(msg, output);
   1267c:	4629      	mov	r1, r5
   1267e:	4630      	mov	r0, r6
   12680:	f011 fde0 	bl	24244 <std_print>
		raw_string_print(msg, output);
	} else {
		hexdump_print(msg, output, prefix_offset, flags);
	}

	if (!raw_string) {
   12684:	f1b8 0f00 	cmp.w	r8, #0
   12688:	d02b      	beq.n	126e2 <log_output_msg_process+0xa6>
		postfix_print(output, flags, level);
   1268a:	4642      	mov	r2, r8
   1268c:	4639      	mov	r1, r7
   1268e:	4628      	mov	r0, r5
   12690:	f7ff ff48 	bl	12524 <postfix_print>
   12694:	e025      	b.n	126e2 <log_output_msg_process+0xa6>
			0 : prefix_print(output, flags, std_msg, timestamp,
   12696:	46c1      	mov	r9, r8
   12698:	e7eb      	b.n	12672 <log_output_msg_process+0x36>
	} else if (raw_string) {
   1269a:	f1b8 0f00 	cmp.w	r8, #0
   1269e:	d126      	bne.n	126ee <log_output_msg_process+0xb2>
	size_t offset = 0;
   126a0:	4627      	mov	r7, r4
		length = output->size;
   126a2:	68eb      	ldr	r3, [r5, #12]
   126a4:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
   126a6:	aa06      	add	r2, sp, #24
   126a8:	463b      	mov	r3, r7
   126aa:	68a9      	ldr	r1, [r5, #8]
   126ac:	4630      	mov	r0, r6
   126ae:	f011 fdb5 	bl	2421c <log_msg_hexdump_data_get>
		output->control_block->offset = length;
   126b2:	9a06      	ldr	r2, [sp, #24]
   126b4:	686b      	ldr	r3, [r5, #4]
   126b6:	601a      	str	r2, [r3, #0]
		if (length != 0) {
   126b8:	b13a      	cbz	r2, 126ca <log_output_msg_process+0x8e>
			eol = (output->buf[length - 1] == '\n');
   126ba:	68ab      	ldr	r3, [r5, #8]
   126bc:	4413      	add	r3, r2
   126be:	f813 4c01 	ldrb.w	r4, [r3, #-1]
   126c2:	f1a4 030a 	sub.w	r3, r4, #10
   126c6:	425c      	negs	r4, r3
   126c8:	415c      	adcs	r4, r3
		log_output_flush(output);
   126ca:	4628      	mov	r0, r5
   126cc:	f011 ff17 	bl	244fe <log_output_flush>
		offset += length;
   126d0:	9b06      	ldr	r3, [sp, #24]
   126d2:	441f      	add	r7, r3
	} while (length > 0);
   126d4:	2b00      	cmp	r3, #0
   126d6:	d1e4      	bne.n	126a2 <log_output_msg_process+0x66>
	if (eol) {
   126d8:	b11c      	cbz	r4, 126e2 <log_output_msg_process+0xa6>
		print_formatted(output, "\r");
   126da:	4914      	ldr	r1, [pc, #80]	; (1272c <log_output_msg_process+0xf0>)
   126dc:	4628      	mov	r0, r5
   126de:	f7ff fe6d 	bl	123bc <print_formatted>
	}

	log_output_flush(output);
   126e2:	4628      	mov	r0, r5
   126e4:	f011 ff0b 	bl	244fe <log_output_flush>
}
   126e8:	b00a      	add	sp, #40	; 0x28
   126ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(output, "%s", log_msg_str_get(msg));
   126ee:	4630      	mov	r0, r6
   126f0:	f011 fceb 	bl	240ca <log_msg_str_get>
   126f4:	490e      	ldr	r1, [pc, #56]	; (12730 <log_output_msg_process+0xf4>)
   126f6:	4602      	mov	r2, r0
   126f8:	4628      	mov	r0, r5
   126fa:	f7ff fe5f 	bl	123bc <print_formatted>
		length = sizeof(buf);
   126fe:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   12702:	aa05      	add	r2, sp, #20
   12704:	4623      	mov	r3, r4
   12706:	a906      	add	r1, sp, #24
   12708:	4630      	mov	r0, r6
		length = sizeof(buf);
   1270a:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   1270e:	f011 fd85 	bl	2421c <log_msg_hexdump_data_get>
		if (length) {
   12712:	9a05      	ldr	r2, [sp, #20]
   12714:	2a00      	cmp	r2, #0
   12716:	d0b8      	beq.n	1268a <log_output_msg_process+0x4e>
			hexdump_line_print(output, buf, length,
   12718:	464b      	mov	r3, r9
   1271a:	9700      	str	r7, [sp, #0]
   1271c:	a906      	add	r1, sp, #24
   1271e:	4628      	mov	r0, r5
   12720:	f7ff ff1e 	bl	12560 <hexdump_line_print>
			offset += length;
   12724:	9b05      	ldr	r3, [sp, #20]
   12726:	441c      	add	r4, r3
		length = sizeof(buf);
   12728:	e7eb      	b.n	12702 <log_output_msg_process+0xc6>
   1272a:	bf00      	nop
   1272c:	0002a10b 	.word	0x0002a10b
   12730:	0002b504 	.word	0x0002b504

00012734 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   12734:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   12736:	f242 730f 	movw	r3, #9999	; 0x270f
   1273a:	428b      	cmp	r3, r1
   1273c:	bf28      	it	cs
   1273e:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
   12740:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   12742:	4a0f      	ldr	r2, [pc, #60]	; (12780 <log_output_dropped_process+0x4c>)
{
   12744:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   12746:	2105      	movs	r1, #5
   12748:	4668      	mov	r0, sp
   1274a:	f012 fa06 	bl	24b5a <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   1274e:	6863      	ldr	r3, [r4, #4]
   12750:	490c      	ldr	r1, [pc, #48]	; (12784 <log_output_dropped_process+0x50>)
   12752:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   12754:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   12756:	220b      	movs	r2, #11
   12758:	4628      	mov	r0, r5
   1275a:	f011 fd66 	bl	2422a <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
   1275e:	6863      	ldr	r3, [r4, #4]
   12760:	4632      	mov	r2, r6
   12762:	4669      	mov	r1, sp
   12764:	4628      	mov	r0, r5
   12766:	685b      	ldr	r3, [r3, #4]
   12768:	f011 fd5f 	bl	2422a <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   1276c:	6863      	ldr	r3, [r4, #4]
   1276e:	4906      	ldr	r1, [pc, #24]	; (12788 <log_output_dropped_process+0x54>)
   12770:	685b      	ldr	r3, [r3, #4]
   12772:	221b      	movs	r2, #27
   12774:	4628      	mov	r0, r5
   12776:	f011 fd58 	bl	2422a <buffer_write>
		     output->control_block->ctx);
}
   1277a:	b002      	add	sp, #8
   1277c:	bd70      	pop	{r4, r5, r6, pc}
   1277e:	bf00      	nop
   12780:	0002c78a 	.word	0x0002c78a
   12784:	0002a149 	.word	0x0002a149
   12788:	0002a12d 	.word	0x0002a12d

0001278c <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   1278c:	4a08      	ldr	r2, [pc, #32]	; (127b0 <log_output_timestamp_freq_set+0x24>)
{
   1278e:	b510      	push	{r4, lr}
	timestamp_div = 1U;
   12790:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   12792:	4c08      	ldr	r4, [pc, #32]	; (127b4 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   12794:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   12796:	2100      	movs	r1, #0
   12798:	42a0      	cmp	r0, r4
   1279a:	d804      	bhi.n	127a6 <log_output_timestamp_freq_set+0x1a>
   1279c:	b101      	cbz	r1, 127a0 <log_output_timestamp_freq_set+0x14>
   1279e:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   127a0:	4b05      	ldr	r3, [pc, #20]	; (127b8 <log_output_timestamp_freq_set+0x2c>)
   127a2:	6018      	str	r0, [r3, #0]
}
   127a4:	bd10      	pop	{r4, pc}
		frequency /= 2U;
   127a6:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   127a8:	005b      	lsls	r3, r3, #1
   127aa:	2101      	movs	r1, #1
   127ac:	e7f4      	b.n	12798 <log_output_timestamp_freq_set+0xc>
   127ae:	bf00      	nop
   127b0:	20002374 	.word	0x20002374
   127b4:	000f4240 	.word	0x000f4240
   127b8:	20002370 	.word	0x20002370

000127bc <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
   127bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   127c0:	460f      	mov	r7, r1
   127c2:	4606      	mov	r6, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   127c4:	2108      	movs	r1, #8
   127c6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   127c8:	f011 ffaa 	bl	24720 <nvs_al_size.isra.0>

	*addr -= ate_size;
   127cc:	683c      	ldr	r4, [r7, #0]
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
   127ce:	4b13      	ldr	r3, [pc, #76]	; (1281c <nvs_recover_last_ate+0x60>)
	*addr -= ate_size;
   127d0:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   127d2:	4680      	mov	r8, r0
	*addr -= ate_size;
   127d4:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
   127d6:	ea04 0503 	and.w	r5, r4, r3
		if (rc) {
			return rc;
		}
		if (nvs_ate_valid(fs, &end_ate)) {
			/* found a valid ate, update data_end_addr and *addr */
			data_end_addr &= ADDR_SECT_MASK;
   127da:	4699      	mov	r9, r3
	while (ate_end_addr > data_end_addr) {
   127dc:	42ac      	cmp	r4, r5
   127de:	d803      	bhi.n	127e8 <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
   127e0:	2000      	movs	r0, #0
}
   127e2:	b003      	add	sp, #12
   127e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   127e8:	2308      	movs	r3, #8
   127ea:	466a      	mov	r2, sp
   127ec:	4621      	mov	r1, r4
   127ee:	4630      	mov	r0, r6
   127f0:	f011 fef9 	bl	245e6 <nvs_flash_rd>
		if (rc) {
   127f4:	2800      	cmp	r0, #0
   127f6:	d1f4      	bne.n	127e2 <nvs_recover_last_ate+0x26>
		if (nvs_ate_valid(fs, &end_ate)) {
   127f8:	4669      	mov	r1, sp
   127fa:	4630      	mov	r0, r6
   127fc:	f011 ff9a 	bl	24734 <nvs_ate_valid>
   12800:	b140      	cbz	r0, 12814 <nvs_recover_last_ate+0x58>
			data_end_addr += end_ate.offset + end_ate.len;
   12802:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   12806:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
   1280a:	603c      	str	r4, [r7, #0]
			data_end_addr &= ADDR_SECT_MASK;
   1280c:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
   12810:	4413      	add	r3, r2
   12812:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
   12814:	eba4 0408 	sub.w	r4, r4, r8
   12818:	e7e0      	b.n	127dc <nvs_recover_last_ate+0x20>
   1281a:	bf00      	nop
   1281c:	ffff0000 	.word	0xffff0000

00012820 <nvs_gc>:
/* garbage collection: the address ate_wra has been updated to the new sector
 * that has just been started. The data to gc is in the sector after this new
 * sector.
 */
static int nvs_gc(struct nvs_fs *fs)
{
   12820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12824:	4604      	mov	r4, r0
   12826:	b095      	sub	sp, #84	; 0x54
	struct nvs_ate close_ate, gc_ate, wlk_ate;
	uint32_t sec_addr, gc_addr, gc_prev_addr, wlk_addr, wlk_prev_addr,
	      data_addr, stop_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12828:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   1282a:	2108      	movs	r1, #8
   1282c:	f011 ff78 	bl	24720 <nvs_al_size.isra.0>

	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   12830:	6863      	ldr	r3, [r4, #4]
   12832:	0c1b      	lsrs	r3, r3, #16
   12834:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12836:	4605      	mov	r5, r0
	nvs_sector_advance(fs, &sec_addr);
   12838:	a903      	add	r1, sp, #12
   1283a:	89e0      	ldrh	r0, [r4, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   1283c:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
   1283e:	f011 ff93 	bl	24768 <nvs_sector_advance.isra.0>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   12842:	9b03      	ldr	r3, [sp, #12]
   12844:	89a1      	ldrh	r1, [r4, #12]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   12846:	ae06      	add	r6, sp, #24
	gc_addr = sec_addr + fs->sector_size - ate_size;
   12848:	4419      	add	r1, r3
   1284a:	1b49      	subs	r1, r1, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1284c:	4632      	mov	r2, r6
   1284e:	2308      	movs	r3, #8
   12850:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
   12852:	9104      	str	r1, [sp, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   12854:	f011 fec7 	bl	245e6 <nvs_flash_rd>

	/* if the sector is not closed don't do gc */
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
	if (rc < 0) {
   12858:	1e02      	subs	r2, r0, #0
   1285a:	f2c0 80ab 	blt.w	129b4 <nvs_gc+0x194>
		/* flash error */
		return rc;
	}

	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   1285e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   12860:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   12862:	2300      	movs	r3, #0
		if (data8[i] != value) {
   12864:	5cf1      	ldrb	r1, [r6, r3]
   12866:	4291      	cmp	r1, r2
   12868:	f040 8092 	bne.w	12990 <nvs_gc+0x170>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   1286c:	3301      	adds	r3, #1
   1286e:	2b08      	cmp	r3, #8
   12870:	d1f8      	bne.n	12864 <nvs_gc+0x44>
	 * gc done ate to the sector. In the field we might have nvs systems
	 * that do not have sufficient space to add this ate, so for these
	 * situations avoid adding the gc done ate.
	 */

	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   12872:	68a0      	ldr	r0, [r4, #8]
   12874:	6863      	ldr	r3, [r4, #4]
   12876:	4428      	add	r0, r5
   12878:	4283      	cmp	r3, r0
   1287a:	f080 8081 	bcs.w	12980 <nvs_gc+0x160>
			return rc;
		}
	}

	/* Erase the gc'ed sector */
	rc = nvs_flash_erase_sector(fs, sec_addr);
   1287e:	9903      	ldr	r1, [sp, #12]
   12880:	4620      	mov	r0, r4
   12882:	f011 ff0d 	bl	246a0 <nvs_flash_erase_sector>
   12886:	4602      	mov	r2, r0
	if (rc) {
   12888:	e094      	b.n	129b4 <nvs_gc+0x194>
		gc_addr &= ADDR_SECT_MASK;
   1288a:	9b04      	ldr	r3, [sp, #16]
		gc_addr += close_ate.offset;
   1288c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
		gc_addr &= ADDR_SECT_MASK;
   12890:	0c1b      	lsrs	r3, r3, #16
   12892:	041b      	lsls	r3, r3, #16
		gc_addr += close_ate.offset;
   12894:	4413      	add	r3, r2
   12896:	9304      	str	r3, [sp, #16]
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   12898:	f8df b120 	ldr.w	fp, [pc, #288]	; 129bc <nvs_gc+0x19c>
		gc_prev_addr = gc_addr;
   1289c:	f8dd a010 	ldr.w	sl, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   128a0:	aa08      	add	r2, sp, #32
   128a2:	a904      	add	r1, sp, #16
   128a4:	4620      	mov	r0, r4
   128a6:	f011 ffe3 	bl	24870 <nvs_prev_ate>
		if (rc) {
   128aa:	4602      	mov	r2, r0
   128ac:	2800      	cmp	r0, #0
   128ae:	f040 8081 	bne.w	129b4 <nvs_gc+0x194>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   128b2:	a908      	add	r1, sp, #32
   128b4:	4620      	mov	r0, r4
   128b6:	f011 ff3d 	bl	24734 <nvs_ate_valid>
   128ba:	2800      	cmp	r0, #0
   128bc:	d036      	beq.n	1292c <nvs_gc+0x10c>
		wlk_addr = fs->ate_wra;
   128be:	6863      	ldr	r3, [r4, #4]
   128c0:	9305      	str	r3, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   128c2:	aa0a      	add	r2, sp, #40	; 0x28
   128c4:	a905      	add	r1, sp, #20
   128c6:	4620      	mov	r0, r4
			wlk_prev_addr = wlk_addr;
   128c8:	9e05      	ldr	r6, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   128ca:	f011 ffd1 	bl	24870 <nvs_prev_ate>
			if (rc) {
   128ce:	4602      	mov	r2, r0
   128d0:	2800      	cmp	r0, #0
   128d2:	d16f      	bne.n	129b4 <nvs_gc+0x194>
			if ((wlk_ate.id == gc_ate.id) &&
   128d4:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   128d8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   128dc:	429a      	cmp	r2, r3
   128de:	d028      	beq.n	12932 <nvs_gc+0x112>
		} while (wlk_addr != fs->ate_wra);
   128e0:	6862      	ldr	r2, [r4, #4]
   128e2:	9b05      	ldr	r3, [sp, #20]
   128e4:	429a      	cmp	r2, r3
   128e6:	d1ec      	bne.n	128c2 <nvs_gc+0xa2>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   128e8:	4556      	cmp	r6, sl
   128ea:	d11f      	bne.n	1292c <nvs_gc+0x10c>
   128ec:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   128f0:	b1e3      	cbz	r3, 1292c <nvs_gc+0x10c>
			data_addr += gc_ate.offset;
   128f2:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   128f6:	ea0a 070b 	and.w	r7, sl, fp
			data_addr += gc_ate.offset;
   128fa:	441f      	add	r7, r3
			nvs_ate_crc8_update(&gc_ate);
   128fc:	a808      	add	r0, sp, #32
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   128fe:	68a3      	ldr	r3, [r4, #8]
   12900:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			nvs_ate_crc8_update(&gc_ate);
   12904:	f011 ff03 	bl	2470e <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   12908:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   1290a:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   1290e:	681e      	ldr	r6, [r3, #0]
   12910:	4276      	negs	r6, r6
	block_size =
   12912:	f006 0320 	and.w	r3, r6, #32
   12916:	9301      	str	r3, [sp, #4]
	while (len) {
   12918:	f1b8 0f00 	cmp.w	r8, #0
   1291c:	d110      	bne.n	12940 <nvs_gc+0x120>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   1291e:	a908      	add	r1, sp, #32
   12920:	4620      	mov	r0, r4
   12922:	f011 ff7f 	bl	24824 <nvs_flash_ate_wrt>
			if (rc) {
   12926:	4602      	mov	r2, r0
   12928:	2800      	cmp	r0, #0
   1292a:	d143      	bne.n	129b4 <nvs_gc+0x194>
	} while (gc_prev_addr != stop_addr);
   1292c:	45ca      	cmp	sl, r9
   1292e:	d1b5      	bne.n	1289c <nvs_gc+0x7c>
gc_done:
   12930:	e79f      	b.n	12872 <nvs_gc+0x52>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   12932:	a90a      	add	r1, sp, #40	; 0x28
   12934:	4620      	mov	r0, r4
   12936:	f011 fefd 	bl	24734 <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   1293a:	2800      	cmp	r0, #0
   1293c:	d0d0      	beq.n	128e0 <nvs_gc+0xc0>
   1293e:	e7d3      	b.n	128e8 <nvs_gc+0xc8>
		bytes_to_copy = MIN(block_size, len);
   12940:	9b01      	ldr	r3, [sp, #4]
   12942:	4543      	cmp	r3, r8
   12944:	bf28      	it	cs
   12946:	4643      	movcs	r3, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   12948:	aa0c      	add	r2, sp, #48	; 0x30
   1294a:	4639      	mov	r1, r7
   1294c:	4620      	mov	r0, r4
		bytes_to_copy = MIN(block_size, len);
   1294e:	461e      	mov	r6, r3
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   12950:	f011 fe49 	bl	245e6 <nvs_flash_rd>
		if (rc) {
   12954:	4602      	mov	r2, r0
   12956:	bb68      	cbnz	r0, 129b4 <nvs_gc+0x194>
	if (!len) {
   12958:	b136      	cbz	r6, 12968 <nvs_gc+0x148>
   1295a:	aa0c      	add	r2, sp, #48	; 0x30
   1295c:	68a1      	ldr	r1, [r4, #8]
   1295e:	4633      	mov	r3, r6
   12960:	4620      	mov	r0, r4
   12962:	f011 ff2a 	bl	247ba <nvs_flash_al_wrt.part.0>
   12966:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   12968:	4631      	mov	r1, r6
   1296a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1296c:	f011 fed8 	bl	24720 <nvs_al_size.isra.0>
   12970:	68a1      	ldr	r1, [r4, #8]
   12972:	4401      	add	r1, r0
   12974:	60a1      	str	r1, [r4, #8]
		if (rc) {
   12976:	b9ea      	cbnz	r2, 129b4 <nvs_gc+0x194>
		len -= bytes_to_copy;
   12978:	eba8 0806 	sub.w	r8, r8, r6
		addr += bytes_to_copy;
   1297c:	4437      	add	r7, r6
   1297e:	e7cb      	b.n	12918 <nvs_gc+0xf8>
		rc = nvs_add_gc_done_ate(fs);
   12980:	4620      	mov	r0, r4
   12982:	f011 ff60 	bl	24846 <nvs_add_gc_done_ate>
		if (rc) {
   12986:	4602      	mov	r2, r0
   12988:	2800      	cmp	r0, #0
   1298a:	f43f af78 	beq.w	1287e <nvs_gc+0x5e>
   1298e:	e011      	b.n	129b4 <nvs_gc+0x194>
	stop_addr = gc_addr - ate_size;
   12990:	9b04      	ldr	r3, [sp, #16]
	if (nvs_close_ate_valid(fs, &close_ate)) {
   12992:	4631      	mov	r1, r6
   12994:	4620      	mov	r0, r4
	stop_addr = gc_addr - ate_size;
   12996:	eba3 0905 	sub.w	r9, r3, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
   1299a:	f011 fef0 	bl	2477e <nvs_close_ate_valid>
   1299e:	2800      	cmp	r0, #0
   129a0:	f47f af73 	bne.w	1288a <nvs_gc+0x6a>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   129a4:	a904      	add	r1, sp, #16
   129a6:	4620      	mov	r0, r4
   129a8:	f7ff ff08 	bl	127bc <nvs_recover_last_ate>
		if (rc) {
   129ac:	4602      	mov	r2, r0
   129ae:	2800      	cmp	r0, #0
   129b0:	f43f af72 	beq.w	12898 <nvs_gc+0x78>
		return rc;
	}
	return 0;
}
   129b4:	4610      	mov	r0, r2
   129b6:	b015      	add	sp, #84	; 0x54
   129b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129bc:	ffff0000 	.word	0xffff0000

000129c0 <nvs_init>:

	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
   129c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   129c4:	4604      	mov	r4, r0
   129c6:	b088      	sub	sp, #32
   129c8:	460d      	mov	r5, r1

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
   129ca:	f100 0714 	add.w	r7, r0, #20
	return z_impl_k_mutex_init(mutex);
   129ce:	4638      	mov	r0, r7
   129d0:	f015 fadb 	bl	27f8a <z_impl_k_mutex_init>
   129d4:	4628      	mov	r0, r5
   129d6:	f00e f9c9 	bl	20d6c <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
   129da:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
   129dc:	b978      	cbnz	r0, 129fe <nvs_init+0x3e>
   129de:	4baa      	ldr	r3, [pc, #680]	; (12c88 <nvs_init+0x2c8>)
   129e0:	49aa      	ldr	r1, [pc, #680]	; (12c8c <nvs_init+0x2cc>)
		LOG_ERR("No valid flash device found");
   129e2:	48ab      	ldr	r0, [pc, #684]	; (12c90 <nvs_init+0x2d0>)
   129e4:	1ac9      	subs	r1, r1, r3
   129e6:	08c9      	lsrs	r1, r1, #3
   129e8:	0189      	lsls	r1, r1, #6
   129ea:	f041 0101 	orr.w	r1, r1, #1
   129ee:	f011 fa38 	bl	23e62 <log_0>
		return -ENXIO;
   129f2:	f06f 0505 	mvn.w	r5, #5
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
   129f6:	4628      	mov	r0, r5
   129f8:	b008      	add	sp, #32
   129fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   129fe:	6883      	ldr	r3, [r0, #8]
   12a00:	691b      	ldr	r3, [r3, #16]
   12a02:	4798      	blx	r3
	fs->flash_parameters = flash_get_parameters(fs->flash_device);
   12a04:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
   12a06:	b960      	cbnz	r0, 12a22 <nvs_init+0x62>
   12a08:	49a0      	ldr	r1, [pc, #640]	; (12c8c <nvs_init+0x2cc>)
   12a0a:	4b9f      	ldr	r3, [pc, #636]	; (12c88 <nvs_init+0x2c8>)
		LOG_ERR("Could not obtain flash parameters");
   12a0c:	48a1      	ldr	r0, [pc, #644]	; (12c94 <nvs_init+0x2d4>)
   12a0e:	1ac9      	subs	r1, r1, r3
   12a10:	08c9      	lsrs	r1, r1, #3
   12a12:	0189      	lsls	r1, r1, #6
   12a14:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Configuration error - sector count");
   12a18:	f011 fa23 	bl	23e62 <log_0>
		return -EINVAL;
   12a1c:	f06f 0515 	mvn.w	r5, #21
   12a20:	e7e9      	b.n	129f6 <nvs_init+0x36>
	write_block_size = flash_get_write_block_size(fs->flash_device);
   12a22:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
   12a24:	6883      	ldr	r3, [r0, #8]
   12a26:	691b      	ldr	r3, [r3, #16]
   12a28:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
   12a2a:	6803      	ldr	r3, [r0, #0]
   12a2c:	3b01      	subs	r3, #1
   12a2e:	2b1f      	cmp	r3, #31
   12a30:	d908      	bls.n	12a44 <nvs_init+0x84>
   12a32:	4996      	ldr	r1, [pc, #600]	; (12c8c <nvs_init+0x2cc>)
   12a34:	4b94      	ldr	r3, [pc, #592]	; (12c88 <nvs_init+0x2c8>)
		LOG_ERR("Unsupported write block size");
   12a36:	4898      	ldr	r0, [pc, #608]	; (12c98 <nvs_init+0x2d8>)
   12a38:	1ac9      	subs	r1, r1, r3
   12a3a:	08c9      	lsrs	r1, r1, #3
   12a3c:	0189      	lsls	r1, r1, #6
   12a3e:	f041 0101 	orr.w	r1, r1, #1
   12a42:	e7e9      	b.n	12a18 <nvs_init+0x58>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
   12a44:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   12a46:	6821      	ldr	r1, [r4, #0]
   12a48:	aa05      	add	r2, sp, #20
   12a4a:	f014 ffee 	bl	27a2a <z_impl_flash_get_page_info_by_offs>
	if (rc) {
   12a4e:	b140      	cbz	r0, 12a62 <nvs_init+0xa2>
   12a50:	498e      	ldr	r1, [pc, #568]	; (12c8c <nvs_init+0x2cc>)
   12a52:	4b8d      	ldr	r3, [pc, #564]	; (12c88 <nvs_init+0x2c8>)
		LOG_ERR("Unable to get page info");
   12a54:	4891      	ldr	r0, [pc, #580]	; (12c9c <nvs_init+0x2dc>)
   12a56:	1ac9      	subs	r1, r1, r3
   12a58:	08c9      	lsrs	r1, r1, #3
   12a5a:	0189      	lsls	r1, r1, #6
   12a5c:	f041 0101 	orr.w	r1, r1, #1
   12a60:	e7da      	b.n	12a18 <nvs_init+0x58>
	if (!fs->sector_size || fs->sector_size % info.size) {
   12a62:	89a3      	ldrh	r3, [r4, #12]
   12a64:	b12b      	cbz	r3, 12a72 <nvs_init+0xb2>
   12a66:	9a06      	ldr	r2, [sp, #24]
   12a68:	fbb3 f5f2 	udiv	r5, r3, r2
   12a6c:	fb02 3515 	mls	r5, r2, r5, r3
   12a70:	b145      	cbz	r5, 12a84 <nvs_init+0xc4>
   12a72:	4986      	ldr	r1, [pc, #536]	; (12c8c <nvs_init+0x2cc>)
   12a74:	4b84      	ldr	r3, [pc, #528]	; (12c88 <nvs_init+0x2c8>)
		LOG_ERR("Invalid sector size");
   12a76:	488a      	ldr	r0, [pc, #552]	; (12ca0 <nvs_init+0x2e0>)
   12a78:	1ac9      	subs	r1, r1, r3
   12a7a:	08c9      	lsrs	r1, r1, #3
   12a7c:	0189      	lsls	r1, r1, #6
   12a7e:	f041 0101 	orr.w	r1, r1, #1
   12a82:	e7c9      	b.n	12a18 <nvs_init+0x58>
	if (fs->sector_count < 2) {
   12a84:	89e3      	ldrh	r3, [r4, #14]
   12a86:	2b01      	cmp	r3, #1
   12a88:	d808      	bhi.n	12a9c <nvs_init+0xdc>
   12a8a:	4980      	ldr	r1, [pc, #512]	; (12c8c <nvs_init+0x2cc>)
   12a8c:	4b7e      	ldr	r3, [pc, #504]	; (12c88 <nvs_init+0x2c8>)
		LOG_ERR("Configuration error - sector count");
   12a8e:	4885      	ldr	r0, [pc, #532]	; (12ca4 <nvs_init+0x2e4>)
   12a90:	1ac9      	subs	r1, r1, r3
   12a92:	08c9      	lsrs	r1, r1, #3
   12a94:	0189      	lsls	r1, r1, #6
   12a96:	f041 0101 	orr.w	r1, r1, #1
   12a9a:	e7bd      	b.n	12a18 <nvs_init+0x58>
	uint8_t erase_value = fs->flash_parameters->erase_value;
   12a9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
   12a9e:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
   12aa0:	f893 8004 	ldrb.w	r8, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   12aa4:	f04f 32ff 	mov.w	r2, #4294967295
   12aa8:	f04f 33ff 	mov.w	r3, #4294967295
   12aac:	4638      	mov	r0, r7
   12aae:	f00e fb2d 	bl	2110c <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12ab2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   12ab4:	2108      	movs	r1, #8
   12ab6:	f011 fe33 	bl	24720 <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
   12aba:	46a9      	mov	r9, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12abc:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
   12abe:	89e3      	ldrh	r3, [r4, #14]
   12ac0:	fa1f fa85 	uxth.w	sl, r5
   12ac4:	4553      	cmp	r3, sl
   12ac6:	d844      	bhi.n	12b52 <nvs_init+0x192>
	if (closed_sectors == fs->sector_count) {
   12ac8:	89e3      	ldrh	r3, [r4, #14]
   12aca:	454b      	cmp	r3, r9
   12acc:	f000 80f0 	beq.w	12cb0 <nvs_init+0x2f0>
	if (i == fs->sector_count) {
   12ad0:	459a      	cmp	sl, r3
   12ad2:	d10b      	bne.n	12aec <nvs_init+0x12c>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
   12ad4:	9900      	ldr	r1, [sp, #0]
   12ad6:	2308      	movs	r3, #8
   12ad8:	4642      	mov	r2, r8
   12ada:	1b89      	subs	r1, r1, r6
   12adc:	4620      	mov	r0, r4
   12ade:	f011 fdba 	bl	24656 <nvs_flash_cmp_const>
		if (!rc) {
   12ae2:	b918      	cbnz	r0, 12aec <nvs_init+0x12c>
			nvs_sector_advance(fs, &addr);
   12ae4:	89e0      	ldrh	r0, [r4, #14]
   12ae6:	4669      	mov	r1, sp
   12ae8:	f011 fe3e 	bl	24768 <nvs_sector_advance.isra.0>
	rc = nvs_recover_last_ate(fs, &addr);
   12aec:	4669      	mov	r1, sp
   12aee:	4620      	mov	r0, r4
   12af0:	f7ff fe64 	bl	127bc <nvs_recover_last_ate>
	if (rc) {
   12af4:	4605      	mov	r5, r0
   12af6:	2800      	cmp	r0, #0
   12af8:	f040 80dc 	bne.w	12cb4 <nvs_init+0x2f4>
	fs->ate_wra = addr;
   12afc:	9b00      	ldr	r3, [sp, #0]
	fs->data_wra = addr & ADDR_SECT_MASK;
   12afe:	4a6a      	ldr	r2, [pc, #424]	; (12ca8 <nvs_init+0x2e8>)
	fs->ate_wra = addr;
   12b00:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
   12b02:	4013      	ands	r3, r2
   12b04:	60a3      	str	r3, [r4, #8]
			fs->data_wra = addr & ADDR_SECT_MASK;
   12b06:	4691      	mov	r9, r2
	while (fs->ate_wra >= fs->data_wra) {
   12b08:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   12b0c:	4299      	cmp	r1, r3
   12b0e:	d30e      	bcc.n	12b2e <nvs_init+0x16e>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   12b10:	2308      	movs	r3, #8
   12b12:	aa01      	add	r2, sp, #4
   12b14:	4620      	mov	r0, r4
   12b16:	f011 fd66 	bl	245e6 <nvs_flash_rd>
		if (rc) {
   12b1a:	b9c0      	cbnz	r0, 12b4e <nvs_init+0x18e>
   12b1c:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
   12b1e:	f813 2b01 	ldrb.w	r2, [r3], #1
   12b22:	4590      	cmp	r8, r2
   12b24:	f040 8101 	bne.w	12d2a <nvs_init+0x36a>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   12b28:	3001      	adds	r0, #1
   12b2a:	2808      	cmp	r0, #8
   12b2c:	d1f7      	bne.n	12b1e <nvs_init+0x15e>
	addr = fs->ate_wra & ADDR_SECT_MASK;
   12b2e:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &addr);
   12b30:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
   12b32:	0c1b      	lsrs	r3, r3, #16
   12b34:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
   12b36:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
   12b38:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
   12b3a:	f011 fe15 	bl	24768 <nvs_sector_advance.isra.0>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
   12b3e:	89a3      	ldrh	r3, [r4, #12]
   12b40:	9900      	ldr	r1, [sp, #0]
   12b42:	4642      	mov	r2, r8
   12b44:	4620      	mov	r0, r4
   12b46:	f011 fd86 	bl	24656 <nvs_flash_cmp_const>
	if (rc < 0) {
   12b4a:	2800      	cmp	r0, #0
   12b4c:	da25      	bge.n	12b9a <nvs_init+0x1da>
   12b4e:	4605      	mov	r5, r0
   12b50:	e0b0      	b.n	12cb4 <nvs_init+0x2f4>
		       (uint16_t)(fs->sector_size - ate_size);
   12b52:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
   12b54:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
   12b56:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
   12b58:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   12b5c:	4642      	mov	r2, r8
   12b5e:	2308      	movs	r3, #8
   12b60:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
   12b62:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   12b64:	f011 fd77 	bl	24656 <nvs_flash_cmp_const>
		if (rc) {
   12b68:	b178      	cbz	r0, 12b8a <nvs_init+0x1ca>
			nvs_sector_advance(fs, &addr);
   12b6a:	89e0      	ldrh	r0, [r4, #14]
   12b6c:	4669      	mov	r1, sp
   12b6e:	f011 fdfb 	bl	24768 <nvs_sector_advance.isra.0>
			closed_sectors++;
   12b72:	f109 0901 	add.w	r9, r9, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   12b76:	9900      	ldr	r1, [sp, #0]
   12b78:	2308      	movs	r3, #8
   12b7a:	4642      	mov	r2, r8
   12b7c:	4620      	mov	r0, r4
			closed_sectors++;
   12b7e:	fa1f f989 	uxth.w	r9, r9
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   12b82:	f011 fd68 	bl	24656 <nvs_flash_cmp_const>
			if (!rc) {
   12b86:	2800      	cmp	r0, #0
   12b88:	d09e      	beq.n	12ac8 <nvs_init+0x108>
	for (i = 0; i < fs->sector_count; i++) {
   12b8a:	3501      	adds	r5, #1
   12b8c:	e797      	b.n	12abe <nvs_init+0xfe>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   12b8e:	2a00      	cmp	r2, #0
   12b90:	f000 80e3 	beq.w	12d5a <nvs_init+0x39a>
				rc = -ESPIPE;
   12b94:	f06f 051c 	mvn.w	r5, #28
   12b98:	e08c      	b.n	12cb4 <nvs_init+0x2f4>
	if (rc) {
   12b9a:	d050      	beq.n	12c3e <nvs_init+0x27e>
		addr = fs->ate_wra + ate_size;
   12b9c:	6863      	ldr	r3, [r4, #4]
   12b9e:	4433      	add	r3, r6
   12ba0:	9300      	str	r3, [sp, #0]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   12ba2:	f64f 78ff 	movw	r8, #65535	; 0xffff
   12ba6:	9900      	ldr	r1, [sp, #0]
   12ba8:	89a3      	ldrh	r3, [r4, #12]
   12baa:	b28a      	uxth	r2, r1
   12bac:	1b9b      	subs	r3, r3, r6
   12bae:	429a      	cmp	r2, r3
   12bb0:	d320      	bcc.n	12bf4 <nvs_init+0x234>
   12bb2:	4b35      	ldr	r3, [pc, #212]	; (12c88 <nvs_init+0x2c8>)
   12bb4:	4935      	ldr	r1, [pc, #212]	; (12c8c <nvs_init+0x2cc>)
		LOG_INF("No GC Done marker found: restarting gc");
   12bb6:	483d      	ldr	r0, [pc, #244]	; (12cac <nvs_init+0x2ec>)
   12bb8:	1ac9      	subs	r1, r1, r3
   12bba:	08c9      	lsrs	r1, r1, #3
   12bbc:	0189      	lsls	r1, r1, #6
   12bbe:	f041 0103 	orr.w	r1, r1, #3
   12bc2:	f011 f94e 	bl	23e62 <log_0>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   12bc6:	6861      	ldr	r1, [r4, #4]
   12bc8:	4620      	mov	r0, r4
   12bca:	f011 fd69 	bl	246a0 <nvs_flash_erase_sector>
		if (rc) {
   12bce:	2800      	cmp	r0, #0
   12bd0:	d1bd      	bne.n	12b4e <nvs_init+0x18e>
		fs->ate_wra &= ADDR_SECT_MASK;
   12bd2:	6862      	ldr	r2, [r4, #4]
   12bd4:	4934      	ldr	r1, [pc, #208]	; (12ca8 <nvs_init+0x2e8>)
   12bd6:	ea02 0301 	and.w	r3, r2, r1
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   12bda:	89a2      	ldrh	r2, [r4, #12]
   12bdc:	4413      	add	r3, r2
   12bde:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
   12be2:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   12be4:	400b      	ands	r3, r1
   12be6:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   12be8:	4620      	mov	r0, r4
   12bea:	f7ff fe19 	bl	12820 <nvs_gc>
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   12bee:	2800      	cmp	r0, #0
   12bf0:	d040      	beq.n	12c74 <nvs_init+0x2b4>
   12bf2:	e7ac      	b.n	12b4e <nvs_init+0x18e>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   12bf4:	2308      	movs	r3, #8
   12bf6:	aa03      	add	r2, sp, #12
   12bf8:	4620      	mov	r0, r4
   12bfa:	f011 fcf4 	bl	245e6 <nvs_flash_rd>
			if (rc) {
   12bfe:	2800      	cmp	r0, #0
   12c00:	d1a5      	bne.n	12b4e <nvs_init+0x18e>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   12c02:	a903      	add	r1, sp, #12
   12c04:	4620      	mov	r0, r4
   12c06:	f011 fd95 	bl	24734 <nvs_ate_valid>
   12c0a:	b138      	cbz	r0, 12c1c <nvs_init+0x25c>
   12c0c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   12c10:	4543      	cmp	r3, r8
   12c12:	d103      	bne.n	12c1c <nvs_init+0x25c>
			    (gc_done_ate.id == 0xffff) &&
   12c14:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   12c18:	2b00      	cmp	r3, #0
   12c1a:	d06f      	beq.n	12cfc <nvs_init+0x33c>
			addr += ate_size;
   12c1c:	9b00      	ldr	r3, [sp, #0]
   12c1e:	4433      	add	r3, r6
   12c20:	9300      	str	r3, [sp, #0]
   12c22:	e7c0      	b.n	12ba6 <nvs_init+0x1e6>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
   12c24:	1a5b      	subs	r3, r3, r1
   12c26:	4642      	mov	r2, r8
   12c28:	4620      	mov	r0, r4
   12c2a:	f011 fd14 	bl	24656 <nvs_flash_cmp_const>
		if (rc < 0) {
   12c2e:	2800      	cmp	r0, #0
   12c30:	db8d      	blt.n	12b4e <nvs_init+0x18e>
		if (!rc) {
   12c32:	d008      	beq.n	12c46 <nvs_init+0x286>
		fs->data_wra += fs->flash_parameters->write_block_size;
   12c34:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   12c36:	68a3      	ldr	r3, [r4, #8]
   12c38:	6812      	ldr	r2, [r2, #0]
   12c3a:	4413      	add	r3, r2
   12c3c:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
   12c3e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   12c42:	428b      	cmp	r3, r1
   12c44:	d8ee      	bhi.n	12c24 <nvs_init+0x264>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   12c46:	6861      	ldr	r1, [r4, #4]
   12c48:	89a3      	ldrh	r3, [r4, #12]
   12c4a:	eb01 0246 	add.w	r2, r1, r6, lsl #1
   12c4e:	429a      	cmp	r2, r3
   12c50:	d1cd      	bne.n	12bee <nvs_init+0x22e>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   12c52:	f8df 8054 	ldr.w	r8, [pc, #84]	; 12ca8 <nvs_init+0x2e8>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   12c56:	68a3      	ldr	r3, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   12c58:	ea01 0208 	and.w	r2, r1, r8
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   12c5c:	4293      	cmp	r3, r2
   12c5e:	d0c6      	beq.n	12bee <nvs_init+0x22e>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   12c60:	4620      	mov	r0, r4
   12c62:	f011 fd1d 	bl	246a0 <nvs_flash_erase_sector>
		if (rc) {
   12c66:	2800      	cmp	r0, #0
   12c68:	f47f af71 	bne.w	12b4e <nvs_init+0x18e>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   12c6c:	6863      	ldr	r3, [r4, #4]
   12c6e:	ea03 0308 	and.w	r3, r3, r8
   12c72:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
   12c74:	89a0      	ldrh	r0, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   12c76:	88a3      	ldrh	r3, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
   12c78:	eba0 0646 	sub.w	r6, r0, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   12c7c:	42b3      	cmp	r3, r6
   12c7e:	d119      	bne.n	12cb4 <nvs_init+0x2f4>
		rc = nvs_add_gc_done_ate(fs);
   12c80:	4620      	mov	r0, r4
   12c82:	f011 fde0 	bl	24846 <nvs_add_gc_done_ate>
   12c86:	e762      	b.n	12b4e <nvs_init+0x18e>
   12c88:	00028dd4 	.word	0x00028dd4
   12c8c:	00028e84 	.word	0x00028e84
   12c90:	0002a169 	.word	0x0002a169
   12c94:	0002a185 	.word	0x0002a185
   12c98:	0002a1a7 	.word	0x0002a1a7
   12c9c:	0002a1c4 	.word	0x0002a1c4
   12ca0:	0002a1dc 	.word	0x0002a1dc
   12ca4:	0002a1f0 	.word	0x0002a1f0
   12ca8:	ffff0000 	.word	0xffff0000
   12cac:	0002a262 	.word	0x0002a262
		rc = -EDEADLK;
   12cb0:	f06f 052c 	mvn.w	r5, #44	; 0x2c
	return z_impl_k_mutex_unlock(mutex);
   12cb4:	4638      	mov	r0, r7
   12cb6:	f00e faa7 	bl	21208 <z_impl_k_mutex_unlock>
	if (rc) {
   12cba:	2d00      	cmp	r5, #0
   12cbc:	f47f ae9b 	bne.w	129f6 <nvs_init+0x36>
	fs->ready = true;
   12cc0:	2301      	movs	r3, #1
   12cc2:	7423      	strb	r3, [r4, #16]
   12cc4:	4e27      	ldr	r6, [pc, #156]	; (12d64 <nvs_init+0x3a4>)
   12cc6:	4b28      	ldr	r3, [pc, #160]	; (12d68 <nvs_init+0x3a8>)
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   12cc8:	89a2      	ldrh	r2, [r4, #12]
   12cca:	89e1      	ldrh	r1, [r4, #14]
   12ccc:	4827      	ldr	r0, [pc, #156]	; (12d6c <nvs_init+0x3ac>)
   12cce:	1af6      	subs	r6, r6, r3
   12cd0:	08f6      	lsrs	r6, r6, #3
   12cd2:	01b6      	lsls	r6, r6, #6
   12cd4:	f046 0603 	orr.w	r6, r6, #3
   12cd8:	4633      	mov	r3, r6
   12cda:	f011 f8e3 	bl	23ea4 <log_2>
	LOG_INF("alloc wra: %d, %x",
   12cde:	6861      	ldr	r1, [r4, #4]
   12ce0:	4823      	ldr	r0, [pc, #140]	; (12d70 <nvs_init+0x3b0>)
   12ce2:	4633      	mov	r3, r6
   12ce4:	b28a      	uxth	r2, r1
   12ce6:	0c09      	lsrs	r1, r1, #16
   12ce8:	f011 f8dc 	bl	23ea4 <log_2>
	LOG_INF("data wra: %d, %x",
   12cec:	68a1      	ldr	r1, [r4, #8]
   12cee:	4821      	ldr	r0, [pc, #132]	; (12d74 <nvs_init+0x3b4>)
   12cf0:	b28a      	uxth	r2, r1
   12cf2:	4633      	mov	r3, r6
   12cf4:	0c09      	lsrs	r1, r1, #16
   12cf6:	f011 f8d5 	bl	23ea4 <log_2>
	return 0;
   12cfa:	e67c      	b.n	129f6 <nvs_init+0x36>
   12cfc:	4b1a      	ldr	r3, [pc, #104]	; (12d68 <nvs_init+0x3a8>)
   12cfe:	4919      	ldr	r1, [pc, #100]	; (12d64 <nvs_init+0x3a4>)
			LOG_INF("GC Done marker found");
   12d00:	481d      	ldr	r0, [pc, #116]	; (12d78 <nvs_init+0x3b8>)
   12d02:	1ac9      	subs	r1, r1, r3
   12d04:	08c9      	lsrs	r1, r1, #3
   12d06:	0189      	lsls	r1, r1, #6
   12d08:	f041 0103 	orr.w	r1, r1, #3
   12d0c:	f011 f8a9 	bl	23e62 <log_0>
			addr = fs->ate_wra & ADDR_SECT_MASK;
   12d10:	6863      	ldr	r3, [r4, #4]
			nvs_sector_advance(fs, &addr);
   12d12:	89e0      	ldrh	r0, [r4, #14]
			addr = fs->ate_wra & ADDR_SECT_MASK;
   12d14:	0c1b      	lsrs	r3, r3, #16
   12d16:	041b      	lsls	r3, r3, #16
			nvs_sector_advance(fs, &addr);
   12d18:	4669      	mov	r1, sp
			addr = fs->ate_wra & ADDR_SECT_MASK;
   12d1a:	9300      	str	r3, [sp, #0]
			nvs_sector_advance(fs, &addr);
   12d1c:	f011 fd24 	bl	24768 <nvs_sector_advance.isra.0>
			rc = nvs_flash_erase_sector(fs, addr);
   12d20:	9900      	ldr	r1, [sp, #0]
   12d22:	4620      	mov	r0, r4
   12d24:	f011 fcbc 	bl	246a0 <nvs_flash_erase_sector>
			goto end;
   12d28:	e761      	b.n	12bee <nvs_init+0x22e>
		if (nvs_ate_valid(fs, &last_ate)) {
   12d2a:	a901      	add	r1, sp, #4
   12d2c:	4620      	mov	r0, r4
   12d2e:	f011 fd01 	bl	24734 <nvs_ate_valid>
   12d32:	f8d4 a004 	ldr.w	sl, [r4, #4]
   12d36:	b180      	cbz	r0, 12d5a <nvs_init+0x39a>
			fs->data_wra = addr & ADDR_SECT_MASK;
   12d38:	9b00      	ldr	r3, [sp, #0]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   12d3a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   12d3e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   12d42:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
   12d44:	ea03 0309 	and.w	r3, r3, r9
   12d48:	60a3      	str	r3, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   12d4a:	4411      	add	r1, r2
   12d4c:	f011 fce8 	bl	24720 <nvs_al_size.isra.0>
   12d50:	4403      	add	r3, r0
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   12d52:	4553      	cmp	r3, sl
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   12d54:	60a3      	str	r3, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   12d56:	f43f af1a 	beq.w	12b8e <nvs_init+0x1ce>
		fs->ate_wra -= ate_size;
   12d5a:	ebaa 0306 	sub.w	r3, sl, r6
   12d5e:	6063      	str	r3, [r4, #4]
   12d60:	e6d2      	b.n	12b08 <nvs_init+0x148>
   12d62:	bf00      	nop
   12d64:	00028e84 	.word	0x00028e84
   12d68:	00028dd4 	.word	0x00028dd4
   12d6c:	0002a213 	.word	0x0002a213
   12d70:	0002a22a 	.word	0x0002a22a
   12d74:	0002a23c 	.word	0x0002a23c
   12d78:	0002a24d 	.word	0x0002a24d

00012d7c <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
   12d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d80:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   12d82:	7c03      	ldrb	r3, [r0, #16]
{
   12d84:	b089      	sub	sp, #36	; 0x24
   12d86:	4604      	mov	r4, r0
   12d88:	4689      	mov	r9, r1
   12d8a:	4690      	mov	r8, r2
	if (!fs->ready) {
   12d8c:	b97b      	cbnz	r3, 12dae <nvs_write+0x32>
   12d8e:	4b68      	ldr	r3, [pc, #416]	; (12f30 <nvs_write+0x1b4>)
   12d90:	4968      	ldr	r1, [pc, #416]	; (12f34 <nvs_write+0x1b8>)
		LOG_ERR("NVS not initialized");
   12d92:	4869      	ldr	r0, [pc, #420]	; (12f38 <nvs_write+0x1bc>)
   12d94:	1ac9      	subs	r1, r1, r3
   12d96:	08c9      	lsrs	r1, r1, #3
   12d98:	0189      	lsls	r1, r1, #6
   12d9a:	f041 0101 	orr.w	r1, r1, #1
   12d9e:	f011 f860 	bl	23e62 <log_0>
		return -EACCES;
   12da2:	f06f 050c 	mvn.w	r5, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
   12da6:	4628      	mov	r0, r5
   12da8:	b009      	add	sp, #36	; 0x24
   12daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12dae:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   12db0:	2108      	movs	r1, #8
   12db2:	4618      	mov	r0, r3
   12db4:	f011 fcb4 	bl	24720 <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
   12db8:	4631      	mov	r1, r6
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12dba:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
   12dbc:	4618      	mov	r0, r3
   12dbe:	f011 fcaf 	bl	24720 <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   12dc2:	89a3      	ldrh	r3, [r4, #12]
   12dc4:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
   12dc8:	429e      	cmp	r6, r3
	data_size = nvs_al_size(fs, len);
   12dca:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   12dcc:	f200 80ab 	bhi.w	12f26 <nvs_write+0x1aa>
   12dd0:	b116      	cbz	r6, 12dd8 <nvs_write+0x5c>
	    ((len > 0) && (data == NULL))) {
   12dd2:	2a00      	cmp	r2, #0
   12dd4:	f000 80a7 	beq.w	12f26 <nvs_write+0x1aa>
	wlk_addr = fs->ate_wra;
   12dd8:	6863      	ldr	r3, [r4, #4]
   12dda:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   12ddc:	aa04      	add	r2, sp, #16
   12dde:	a903      	add	r1, sp, #12
   12de0:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   12de2:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   12de6:	f011 fd43 	bl	24870 <nvs_prev_ate>
		if (rc) {
   12dea:	4605      	mov	r5, r0
   12dec:	2800      	cmp	r0, #0
   12dee:	d1da      	bne.n	12da6 <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   12df0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   12df4:	454b      	cmp	r3, r9
   12df6:	d005      	beq.n	12e04 <nvs_write+0x88>
		if (wlk_addr == fs->ate_wra) {
   12df8:	6862      	ldr	r2, [r4, #4]
   12dfa:	9b03      	ldr	r3, [sp, #12]
   12dfc:	429a      	cmp	r2, r3
   12dfe:	d1ed      	bne.n	12ddc <nvs_write+0x60>
		if (len == 0) {
   12e00:	b9e6      	cbnz	r6, 12e3c <nvs_write+0xc0>
   12e02:	e7d0      	b.n	12da6 <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   12e04:	a904      	add	r1, sp, #16
   12e06:	4620      	mov	r0, r4
   12e08:	f011 fc94 	bl	24734 <nvs_ate_valid>
   12e0c:	2800      	cmp	r0, #0
   12e0e:	d0f3      	beq.n	12df8 <nvs_write+0x7c>
		if (len == 0) {
   12e10:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   12e14:	b186      	cbz	r6, 12e38 <nvs_write+0xbc>
		} else if (len == wlk_ate.len) {
   12e16:	429e      	cmp	r6, r3
   12e18:	d110      	bne.n	12e3c <nvs_write+0xc0>
		rd_addr += wlk_ate.offset;
   12e1a:	f8bd 0012 	ldrh.w	r0, [sp, #18]
		rd_addr &= ADDR_SECT_MASK;
   12e1e:	ea4f 411b 	mov.w	r1, fp, lsr #16
   12e22:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   12e24:	4401      	add	r1, r0
   12e26:	4633      	mov	r3, r6
   12e28:	4642      	mov	r2, r8
   12e2a:	4620      	mov	r0, r4
   12e2c:	f011 fbe9 	bl	24602 <nvs_flash_block_cmp>
			if (rc <= 0) {
   12e30:	2800      	cmp	r0, #0
   12e32:	dc03      	bgt.n	12e3c <nvs_write+0xc0>
   12e34:	4605      	mov	r5, r0
   12e36:	e7b6      	b.n	12da6 <nvs_write+0x2a>
			if (wlk_ate.len == 0U) {
   12e38:	2b00      	cmp	r3, #0
   12e3a:	d0b4      	beq.n	12da6 <nvs_write+0x2a>
	if (data_size) {
   12e3c:	2f00      	cmp	r7, #0
   12e3e:	d13f      	bne.n	12ec0 <nvs_write+0x144>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   12e40:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   12e44:	f04f 32ff 	mov.w	r2, #4294967295
   12e48:	f04f 33ff 	mov.w	r3, #4294967295
   12e4c:	4650      	mov	r0, sl
	fs->ate_wra &= ADDR_SECT_MASK;
   12e4e:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 12f3c <nvs_write+0x1c0>
   12e52:	f00e f95b 	bl	2110c <z_impl_k_mutex_lock>
	gc_count = 0;
   12e56:	2200      	movs	r2, #0
		if (gc_count == fs->sector_count) {
   12e58:	89e3      	ldrh	r3, [r4, #14]
   12e5a:	429a      	cmp	r2, r3
   12e5c:	d060      	beq.n	12f20 <nvs_write+0x1a4>
		if (fs->ate_wra >= (fs->data_wra + required_space)) {
   12e5e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   12e62:	1878      	adds	r0, r7, r1
   12e64:	4283      	cmp	r3, r0
   12e66:	d32e      	bcc.n	12ec6 <nvs_write+0x14a>
	entry.part = 0xff;
   12e68:	23ff      	movs	r3, #255	; 0xff
	nvs_ate_crc8_update(&entry);
   12e6a:	a806      	add	r0, sp, #24
	entry.id = id;
   12e6c:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   12e70:	f8ad 101a 	strh.w	r1, [sp, #26]
	entry.len = (uint16_t)len;
   12e74:	f8ad 601c 	strh.w	r6, [sp, #28]
	entry.part = 0xff;
   12e78:	f88d 301e 	strb.w	r3, [sp, #30]
	nvs_ate_crc8_update(&entry);
   12e7c:	f011 fc47 	bl	2470e <nvs_ate_crc8_update>
	if (!len) {
   12e80:	b136      	cbz	r6, 12e90 <nvs_write+0x114>
   12e82:	68a1      	ldr	r1, [r4, #8]
   12e84:	4633      	mov	r3, r6
   12e86:	4642      	mov	r2, r8
   12e88:	4620      	mov	r0, r4
   12e8a:	f011 fc96 	bl	247ba <nvs_flash_al_wrt.part.0>
   12e8e:	4605      	mov	r5, r0
	fs->data_wra += nvs_al_size(fs, len);
   12e90:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   12e92:	4631      	mov	r1, r6
   12e94:	f011 fc44 	bl	24720 <nvs_al_size.isra.0>
   12e98:	68a3      	ldr	r3, [r4, #8]
   12e9a:	4403      	add	r3, r0
   12e9c:	60a3      	str	r3, [r4, #8]
	if (rc) {
   12e9e:	2d00      	cmp	r5, #0
   12ea0:	d144      	bne.n	12f2c <nvs_write+0x1b0>
	rc = nvs_flash_ate_wrt(fs, &entry);
   12ea2:	a906      	add	r1, sp, #24
   12ea4:	4620      	mov	r0, r4
   12ea6:	f011 fcbd 	bl	24824 <nvs_flash_ate_wrt>
	if (rc) {
   12eaa:	4605      	mov	r5, r0
   12eac:	2800      	cmp	r0, #0
   12eae:	d13d      	bne.n	12f2c <nvs_write+0x1b0>
	rc = len;
   12eb0:	4633      	mov	r3, r6
   12eb2:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   12eb4:	4650      	mov	r0, sl
   12eb6:	f00e f9a7 	bl	21208 <z_impl_k_mutex_unlock>
	return rc;
   12eba:	9b01      	ldr	r3, [sp, #4]
   12ebc:	461d      	mov	r5, r3
   12ebe:	e772      	b.n	12da6 <nvs_write+0x2a>
		required_space = data_size + ate_size;
   12ec0:	4457      	add	r7, sl
   12ec2:	b2bf      	uxth	r7, r7
   12ec4:	e7bc      	b.n	12e40 <nvs_write+0xc4>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12ec6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   12ec8:	9201      	str	r2, [sp, #4]
   12eca:	2108      	movs	r1, #8
   12ecc:	f011 fc28 	bl	24720 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
   12ed0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12ed4:	f8ad 1018 	strh.w	r1, [sp, #24]
	close_ate.len = 0U;
   12ed8:	2100      	movs	r1, #0
   12eda:	f8ad 101c 	strh.w	r1, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   12ede:	1819      	adds	r1, r3, r0
   12ee0:	f8ad 101a 	strh.w	r1, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
   12ee4:	89a1      	ldrh	r1, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
   12ee6:	ea03 030b 	and.w	r3, r3, fp
	fs->ate_wra += (fs->sector_size - ate_size);
   12eea:	440b      	add	r3, r1
   12eec:	1a18      	subs	r0, r3, r0
   12eee:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   12ef0:	a806      	add	r0, sp, #24
   12ef2:	f011 fc0c 	bl	2470e <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   12ef6:	a906      	add	r1, sp, #24
   12ef8:	4620      	mov	r0, r4
   12efa:	f011 fc93 	bl	24824 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   12efe:	89e0      	ldrh	r0, [r4, #14]
   12f00:	1d21      	adds	r1, r4, #4
   12f02:	f011 fc31 	bl	24768 <nvs_sector_advance.isra.0>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   12f06:	6863      	ldr	r3, [r4, #4]
   12f08:	ea03 030b 	and.w	r3, r3, fp
   12f0c:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   12f0e:	4620      	mov	r0, r4
   12f10:	f7ff fc86 	bl	12820 <nvs_gc>
		if (rc) {
   12f14:	4603      	mov	r3, r0
   12f16:	2800      	cmp	r0, #0
   12f18:	d1cb      	bne.n	12eb2 <nvs_write+0x136>
		gc_count++;
   12f1a:	9a01      	ldr	r2, [sp, #4]
   12f1c:	3201      	adds	r2, #1
		if (gc_count == fs->sector_count) {
   12f1e:	e79b      	b.n	12e58 <nvs_write+0xdc>
			rc = -ENOSPC;
   12f20:	f06f 031b 	mvn.w	r3, #27
   12f24:	e7c5      	b.n	12eb2 <nvs_write+0x136>
		return -EINVAL;
   12f26:	f06f 0515 	mvn.w	r5, #21
   12f2a:	e73c      	b.n	12da6 <nvs_write+0x2a>
			if (rc) {
   12f2c:	462b      	mov	r3, r5
   12f2e:	e7c0      	b.n	12eb2 <nvs_write+0x136>
   12f30:	00028dd4 	.word	0x00028dd4
   12f34:	00028e84 	.word	0x00028e84
   12f38:	0002a155 	.word	0x0002a155
   12f3c:	ffff0000 	.word	0xffff0000

00012f40 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   12f40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   12f44:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   12f46:	7c03      	ldrb	r3, [r0, #16]
{
   12f48:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
   12f4c:	4604      	mov	r4, r0
   12f4e:	460f      	mov	r7, r1
   12f50:	4690      	mov	r8, r2
	if (!fs->ready) {
   12f52:	b973      	cbnz	r3, 12f72 <nvs_read_hist+0x32>
   12f54:	4b2b      	ldr	r3, [pc, #172]	; (13004 <nvs_read_hist+0xc4>)
   12f56:	492c      	ldr	r1, [pc, #176]	; (13008 <nvs_read_hist+0xc8>)
		LOG_ERR("NVS not initialized");
   12f58:	482c      	ldr	r0, [pc, #176]	; (1300c <nvs_read_hist+0xcc>)
   12f5a:	1ac9      	subs	r1, r1, r3
   12f5c:	08c9      	lsrs	r1, r1, #3
   12f5e:	0189      	lsls	r1, r1, #6
   12f60:	f041 0101 	orr.w	r1, r1, #1
   12f64:	f010 ff7d 	bl	23e62 <log_0>
		return -EACCES;
   12f68:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
   12f6c:	b004      	add	sp, #16
   12f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12f72:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   12f74:	2108      	movs	r1, #8
   12f76:	f011 fbd3 	bl	24720 <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
   12f7a:	89a3      	ldrh	r3, [r4, #12]
   12f7c:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
   12f80:	429e      	cmp	r6, r3
   12f82:	d83c      	bhi.n	12ffe <nvs_read_hist+0xbe>
	wlk_addr = fs->ate_wra;
   12f84:	6863      	ldr	r3, [r4, #4]
   12f86:	9301      	str	r3, [sp, #4]
	cnt_his = 0U;
   12f88:	f04f 0a00 	mov.w	sl, #0
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   12f8c:	aa02      	add	r2, sp, #8
   12f8e:	a901      	add	r1, sp, #4
   12f90:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   12f92:	9d01      	ldr	r5, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   12f94:	f011 fc6c 	bl	24870 <nvs_prev_ate>
		if (rc) {
   12f98:	2800      	cmp	r0, #0
   12f9a:	d1e7      	bne.n	12f6c <nvs_read_hist+0x2c>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   12f9c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   12fa0:	42bb      	cmp	r3, r7
   12fa2:	d108      	bne.n	12fb6 <nvs_read_hist+0x76>
   12fa4:	a902      	add	r1, sp, #8
   12fa6:	4620      	mov	r0, r4
   12fa8:	f011 fbc4 	bl	24734 <nvs_ate_valid>
   12fac:	b118      	cbz	r0, 12fb6 <nvs_read_hist+0x76>
			cnt_his++;
   12fae:	f10a 0a01 	add.w	sl, sl, #1
   12fb2:	fa1f fa8a 	uxth.w	sl, sl
		if (wlk_addr == fs->ate_wra) {
   12fb6:	6862      	ldr	r2, [r4, #4]
   12fb8:	9b01      	ldr	r3, [sp, #4]
   12fba:	429a      	cmp	r2, r3
   12fbc:	d018      	beq.n	12ff0 <nvs_read_hist+0xb0>
	while (cnt_his <= cnt) {
   12fbe:	45d1      	cmp	r9, sl
   12fc0:	d2e4      	bcs.n	12f8c <nvs_read_hist+0x4c>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   12fc2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   12fc6:	b1bb      	cbz	r3, 12ff8 <nvs_read_hist+0xb8>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   12fc8:	45d1      	cmp	r9, sl
   12fca:	d815      	bhi.n	12ff8 <nvs_read_hist+0xb8>
	rd_addr += wlk_ate.offset;
   12fcc:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
   12fd0:	0c2d      	lsrs	r5, r5, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   12fd2:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
   12fd4:	ea4f 4505 	mov.w	r5, r5, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   12fd8:	bf28      	it	cs
   12fda:	4633      	movcs	r3, r6
   12fdc:	4642      	mov	r2, r8
   12fde:	4429      	add	r1, r5
   12fe0:	4620      	mov	r0, r4
   12fe2:	f011 fb00 	bl	245e6 <nvs_flash_rd>
	if (rc) {
   12fe6:	2800      	cmp	r0, #0
   12fe8:	d1c0      	bne.n	12f6c <nvs_read_hist+0x2c>
	return wlk_ate.len;
   12fea:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   12fee:	e7bd      	b.n	12f6c <nvs_read_hist+0x2c>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   12ff0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   12ff4:	42bb      	cmp	r3, r7
   12ff6:	d0e4      	beq.n	12fc2 <nvs_read_hist+0x82>
		return -ENOENT;
   12ff8:	f06f 0001 	mvn.w	r0, #1
   12ffc:	e7b6      	b.n	12f6c <nvs_read_hist+0x2c>
		return -EINVAL;
   12ffe:	f06f 0015 	mvn.w	r0, #21
   13002:	e7b3      	b.n	12f6c <nvs_read_hist+0x2c>
   13004:	00028dd4 	.word	0x00028dd4
   13008:	00028e84 	.word	0x00028e84
   1300c:	0002a155 	.word	0x0002a155

00013010 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   13010:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   13014:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   13018:	f019 0808 	ands.w	r8, r9, #8
{
   1301c:	4604      	mov	r4, r0
   1301e:	4693      	mov	fp, r2
	if (processing) {
   13020:	d00d      	beq.n	1303e <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
   13022:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   13024:	bf0c      	ite	eq
   13026:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   1302a:	f049 0920 	orrne.w	r9, r9, #32
   1302e:	f8a0 9018 	strh.w	r9, [r0, #24]
   13032:	f38b 8811 	msr	BASEPRI, fp
   13036:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   1303a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1303e:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   13042:	2902      	cmp	r1, #2
   13044:	d107      	bne.n	13056 <process_event+0x46>
			evt = process_recheck(mgr);
   13046:	4620      	mov	r0, r4
   13048:	f011 fc69 	bl	2491e <process_recheck>
		if (evt == EVT_NOP) {
   1304c:	2800      	cmp	r0, #0
   1304e:	d0f0      	beq.n	13032 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   13050:	2801      	cmp	r0, #1
   13052:	8b23      	ldrh	r3, [r4, #24]
   13054:	d150      	bne.n	130f8 <process_event+0xe8>
			res = mgr->last_res;
   13056:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   13058:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   1305a:	2f00      	cmp	r7, #0
   1305c:	da15      	bge.n	1308a <process_event+0x7a>
		*clients = mgr->clients;
   1305e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   13060:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   13064:	e9c4 8800 	strd	r8, r8, [r4]
   13068:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   1306c:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
   1306e:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   13070:	8b21      	ldrh	r1, [r4, #24]
   13072:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   13076:	45ca      	cmp	sl, r9
   13078:	d002      	beq.n	13080 <process_event+0x70>
		if (do_monitors
   1307a:	68a3      	ldr	r3, [r4, #8]
   1307c:	2b00      	cmp	r3, #0
   1307e:	d15c      	bne.n	1313a <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
   13080:	b90d      	cbnz	r5, 13086 <process_event+0x76>
		    || (transit != NULL)) {
   13082:	2e00      	cmp	r6, #0
   13084:	d074      	beq.n	13170 <process_event+0x160>
   13086:	2300      	movs	r3, #0
   13088:	e058      	b.n	1313c <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1308a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   1308e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   13090:	2a01      	cmp	r2, #1
   13092:	d820      	bhi.n	130d6 <process_event+0xc6>
		*clients = mgr->clients;
   13094:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   13098:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   1309a:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
   1309c:	b289      	uxth	r1, r1
	list->tail = NULL;
   1309e:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   130a2:	d10c      	bne.n	130be <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   130a4:	2d00      	cmp	r5, #0
   130a6:	462b      	mov	r3, r5
   130a8:	bf38      	it	cc
   130aa:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   130ac:	b12b      	cbz	r3, 130ba <process_event+0xaa>
				mgr->refs += 1U;
   130ae:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   130b0:	681b      	ldr	r3, [r3, #0]
   130b2:	3201      	adds	r2, #1
   130b4:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   130b6:	2b00      	cmp	r3, #0
   130b8:	d1f8      	bne.n	130ac <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   130ba:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   130be:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   130c0:	4620      	mov	r0, r4
   130c2:	f011 fc2c 	bl	2491e <process_recheck>
   130c6:	4606      	mov	r6, r0
   130c8:	2800      	cmp	r0, #0
   130ca:	d0d1      	beq.n	13070 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   130cc:	8b23      	ldrh	r3, [r4, #24]
   130ce:	f043 0320 	orr.w	r3, r3, #32
   130d2:	8323      	strh	r3, [r4, #24]
   130d4:	e7cb      	b.n	1306e <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
   130d6:	2b04      	cmp	r3, #4
   130d8:	d10c      	bne.n	130f4 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   130da:	f021 0107 	bic.w	r1, r1, #7
   130de:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   130e0:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   130e2:	4620      	mov	r0, r4
   130e4:	f011 fc1b 	bl	2491e <process_recheck>
   130e8:	4605      	mov	r5, r0
   130ea:	2800      	cmp	r0, #0
   130ec:	d0bf      	beq.n	1306e <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   130ee:	f041 0120 	orr.w	r1, r1, #32
   130f2:	8321      	strh	r1, [r4, #24]
   130f4:	2500      	movs	r5, #0
   130f6:	e7ba      	b.n	1306e <process_event+0x5e>
		} else if (evt == EVT_START) {
   130f8:	2803      	cmp	r0, #3
   130fa:	d109      	bne.n	13110 <process_event+0x100>
			transit = mgr->transitions->start;
   130fc:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   130fe:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   13102:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   13104:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   13108:	8323      	strh	r3, [r4, #24]
}
   1310a:	2500      	movs	r5, #0
		res = 0;
   1310c:	462f      	mov	r7, r5
   1310e:	e7af      	b.n	13070 <process_event+0x60>
		} else if (evt == EVT_STOP) {
   13110:	2804      	cmp	r0, #4
   13112:	d106      	bne.n	13122 <process_event+0x112>
			transit = mgr->transitions->stop;
   13114:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   13116:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   1311a:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1311c:	f043 0304 	orr.w	r3, r3, #4
   13120:	e7f2      	b.n	13108 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
   13122:	2805      	cmp	r0, #5
   13124:	d106      	bne.n	13134 <process_event+0x124>
			transit = mgr->transitions->reset;
   13126:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   13128:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   1312c:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1312e:	f043 0305 	orr.w	r3, r3, #5
   13132:	e7e9      	b.n	13108 <process_event+0xf8>
   13134:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   13136:	462e      	mov	r6, r5
   13138:	e7e8      	b.n	1310c <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
   1313a:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   1313c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   13140:	8321      	strh	r1, [r4, #24]
   13142:	f38b 8811 	msr	BASEPRI, fp
   13146:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   1314a:	bb03      	cbnz	r3, 1318e <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
   1314c:	2d00      	cmp	r5, #0
   1314e:	d133      	bne.n	131b8 <process_event+0x1a8>
			if (transit != NULL) {
   13150:	b116      	cbz	r6, 13158 <process_event+0x148>
				transit(mgr, transition_complete);
   13152:	4921      	ldr	r1, [pc, #132]	; (131d8 <process_event+0x1c8>)
   13154:	4620      	mov	r0, r4
   13156:	47b0      	blx	r6
	__asm__ volatile(
   13158:	f04f 0340 	mov.w	r3, #64	; 0x40
   1315c:	f3ef 8b11 	mrs	fp, BASEPRI
   13160:	f383 8812 	msr	BASEPRI_MAX, r3
   13164:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   13168:	8b23      	ldrh	r3, [r4, #24]
   1316a:	f023 0308 	bic.w	r3, r3, #8
   1316e:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   13170:	8b23      	ldrh	r3, [r4, #24]
   13172:	06da      	lsls	r2, r3, #27
   13174:	d528      	bpl.n	131c8 <process_event+0x1b8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   13176:	f023 0310 	bic.w	r3, r3, #16
   1317a:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   1317c:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   1317e:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   13182:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   13186:	2900      	cmp	r1, #0
   13188:	f47f af5b 	bne.w	13042 <process_event+0x32>
out:
   1318c:	e751      	b.n	13032 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1318e:	68a1      	ldr	r1, [r4, #8]
   13190:	2900      	cmp	r1, #0
   13192:	d0db      	beq.n	1314c <process_event+0x13c>
	return node->next;
   13194:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
   13196:	f8d1 b004 	ldr.w	fp, [r1, #4]
   1319a:	2b00      	cmp	r3, #0
   1319c:	bf38      	it	cc
   1319e:	2300      	movcc	r3, #0
   131a0:	4699      	mov	r9, r3
   131a2:	4652      	mov	r2, sl
   131a4:	463b      	mov	r3, r7
   131a6:	4620      	mov	r0, r4
   131a8:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   131aa:	f1b9 0f00 	cmp.w	r9, #0
   131ae:	d0cd      	beq.n	1314c <process_event+0x13c>
   131b0:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   131b4:	4649      	mov	r1, r9
   131b6:	e7ee      	b.n	13196 <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   131b8:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   131ba:	463b      	mov	r3, r7
   131bc:	4652      	mov	r2, sl
   131be:	4620      	mov	r0, r4
   131c0:	682d      	ldr	r5, [r5, #0]
   131c2:	f011 fbc8 	bl	24956 <notify_one>
   131c6:	e7c1      	b.n	1314c <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   131c8:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   131cc:	bf1e      	ittt	ne
   131ce:	f023 0320 	bicne.w	r3, r3, #32
   131d2:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   131d4:	2102      	movne	r1, #2
   131d6:	e7d2      	b.n	1317e <process_event+0x16e>
   131d8:	00024983 	.word	0x00024983

000131dc <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   131dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   131e0:	4605      	mov	r5, r0
   131e2:	f04f 0340 	mov.w	r3, #64	; 0x40
   131e6:	f3ef 8611 	mrs	r6, BASEPRI
   131ea:	f383 8812 	msr	BASEPRI_MAX, r3
   131ee:	f3bf 8f6f 	isb	sy
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   131f2:	4b10      	ldr	r3, [pc, #64]	; (13234 <pm_state_notify+0x58>)
   131f4:	681c      	ldr	r4, [r3, #0]
   131f6:	2c00      	cmp	r4, #0
   131f8:	bf38      	it	cc
   131fa:	2400      	movcc	r4, #0
   131fc:	b19c      	cbz	r4, 13226 <pm_state_notify+0x4a>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
   131fe:	4f0e      	ldr	r7, [pc, #56]	; (13238 <pm_state_notify+0x5c>)
   13200:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1323c <pm_state_notify+0x60>
   13204:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
   13208:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   1320c:	2d00      	cmp	r5, #0
   1320e:	bf08      	it	eq
   13210:	4613      	moveq	r3, r2
		if (callback) {
   13212:	b12b      	cbz	r3, 13220 <pm_state_notify+0x44>
			callback(z_power_states[_current_cpu->id].state);
   13214:	f898 2014 	ldrb.w	r2, [r8, #20]
   13218:	fb09 f202 	mul.w	r2, r9, r2
   1321c:	5cb8      	ldrb	r0, [r7, r2]
   1321e:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   13220:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   13222:	2c00      	cmp	r4, #0
   13224:	d1f0      	bne.n	13208 <pm_state_notify+0x2c>
	__asm__ volatile(
   13226:	f386 8811 	msr	BASEPRI, r6
   1322a:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   1322e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13232:	bf00      	nop
   13234:	20002378 	.word	0x20002378
   13238:	20002384 	.word	0x20002384
   1323c:	200027d0 	.word	0x200027d0

00013240 <atomic_test_and_set_bit.constprop.0>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   13240:	f000 031f 	and.w	r3, r0, #31
   13244:	2201      	movs	r2, #1
   13246:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13248:	4b0a      	ldr	r3, [pc, #40]	; (13274 <atomic_test_and_set_bit.constprop.0+0x34>)
   1324a:	f3bf 8f5b 	dmb	ish
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1324e:	0940      	lsrs	r0, r0, #5
   13250:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   13254:	e850 3f00 	ldrex	r3, [r0]
   13258:	ea43 0102 	orr.w	r1, r3, r2
   1325c:	e840 1c00 	strex	ip, r1, [r0]
   13260:	f1bc 0f00 	cmp.w	ip, #0
   13264:	d1f6      	bne.n	13254 <atomic_test_and_set_bit.constprop.0+0x14>
   13266:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   1326a:	421a      	tst	r2, r3
}
   1326c:	bf14      	ite	ne
   1326e:	2001      	movne	r0, #1
   13270:	2000      	moveq	r0, #0
   13272:	4770      	bx	lr
   13274:	20002390 	.word	0x20002390

00013278 <pm_system_resume>:

void pm_system_resume(void)
{
   13278:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
   1327a:	4b1d      	ldr	r3, [pc, #116]	; (132f0 <pm_system_resume+0x78>)
   1327c:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1327e:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   13282:	f005 031f 	and.w	r3, r5, #31
   13286:	2201      	movs	r2, #1
   13288:	409a      	lsls	r2, r3
   1328a:	4b1a      	ldr	r3, [pc, #104]	; (132f4 <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1328c:	0969      	lsrs	r1, r5, #5
{
   1328e:	b085      	sub	sp, #20
   13290:	43d0      	mvns	r0, r2
   13292:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   13296:	e853 1f00 	ldrex	r1, [r3]
   1329a:	ea01 0400 	and.w	r4, r1, r0
   1329e:	e843 4c00 	strex	ip, r4, [r3]
   132a2:	f1bc 0f00 	cmp.w	ip, #0
   132a6:	d1f6      	bne.n	13296 <pm_system_resume+0x1e>
   132a8:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   132ac:	4211      	tst	r1, r2
   132ae:	d017      	beq.n	132e0 <pm_system_resume+0x68>
		exit_pos_ops(z_power_states[id]);
   132b0:	4c11      	ldr	r4, [pc, #68]	; (132f8 <pm_system_resume+0x80>)
   132b2:	220c      	movs	r2, #12
   132b4:	fb02 4205 	mla	r2, r2, r5, r4
   132b8:	ca07      	ldmia	r2, {r0, r1, r2}
   132ba:	ab01      	add	r3, sp, #4
   132bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   132c0:	4a0e      	ldr	r2, [pc, #56]	; (132fc <pm_system_resume+0x84>)
   132c2:	b17a      	cbz	r2, 132e4 <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
   132c4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   132c8:	f011 fe7a 	bl	24fc0 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   132cc:	2000      	movs	r0, #0
   132ce:	f7ff ff85 	bl	131dc <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   132d2:	230c      	movs	r3, #12
   132d4:	436b      	muls	r3, r5
   132d6:	2200      	movs	r2, #0
   132d8:	18e1      	adds	r1, r4, r3
   132da:	50e2      	str	r2, [r4, r3]
   132dc:	e9c1 2201 	strd	r2, r2, [r1, #4]
			0, 0};
	}
}
   132e0:	b005      	add	sp, #20
   132e2:	bd30      	pop	{r4, r5, pc}
   132e4:	f382 8811 	msr	BASEPRI, r2
   132e8:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   132ec:	e7ee      	b.n	132cc <pm_system_resume+0x54>
   132ee:	bf00      	nop
   132f0:	200027d0 	.word	0x200027d0
   132f4:	20002380 	.word	0x20002380
   132f8:	20002384 	.word	0x20002384
   132fc:	00024fc1 	.word	0x00024fc1

00013300 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   13300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
   13304:	4b37      	ldr	r3, [pc, #220]	; (133e4 <pm_system_suspend+0xe4>)
   13306:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 133fc <pm_system_suspend+0xfc>
   1330a:	7d1c      	ldrb	r4, [r3, #20]
{
   1330c:	b088      	sub	sp, #32
   1330e:	4607      	mov	r7, r0

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
   13310:	4620      	mov	r0, r4
   13312:	f7ff ff95 	bl	13240 <atomic_test_and_set_bit.constprop.0>
   13316:	b960      	cbnz	r0, 13332 <pm_system_suspend+0x32>
		z_power_states[id] = pm_policy_next_state(id, ticks);
   13318:	466e      	mov	r6, sp
   1331a:	463a      	mov	r2, r7
   1331c:	4621      	mov	r1, r4
   1331e:	4630      	mov	r0, r6
   13320:	f011 fc28 	bl	24b74 <pm_policy_next_state>
   13324:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   13328:	250c      	movs	r5, #12
   1332a:	fb05 8504 	mla	r5, r5, r4, r8
   1332e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
   13332:	230c      	movs	r3, #12
   13334:	4363      	muls	r3, r4
   13336:	eb08 0203 	add.w	r2, r8, r3
   1333a:	f818 0003 	ldrb.w	r0, [r8, r3]
   1333e:	0965      	lsrs	r5, r4, #5
   13340:	f004 061f 	and.w	r6, r4, #31
   13344:	b3c8      	cbz	r0, 133ba <pm_system_suspend+0xba>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
   13346:	1c7b      	adds	r3, r7, #1
   13348:	d00f      	beq.n	1336a <pm_system_suspend+0x6a>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   1334a:	f8d2 e008 	ldr.w	lr, [r2, #8]
   1334e:	4826      	ldr	r0, [pc, #152]	; (133e8 <pm_system_suspend+0xe8>)
   13350:	4a26      	ldr	r2, [pc, #152]	; (133ec <pm_system_suspend+0xec>)
   13352:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   13356:	2100      	movs	r1, #0
   13358:	2300      	movs	r3, #0
   1335a:	fbec 010e 	umlal	r0, r1, ip, lr
   1335e:	f7ec febf 	bl	e0 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   13362:	2101      	movs	r1, #1
   13364:	1a38      	subs	r0, r7, r0
   13366:	f015 f991 	bl	2868c <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   1336a:	f00e f8a5 	bl	214b8 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   1336e:	2001      	movs	r0, #1
   13370:	f7ff ff34 	bl	131dc <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13374:	f3bf 8f5b 	dmb	ish
   13378:	4b1d      	ldr	r3, [pc, #116]	; (133f0 <pm_system_suspend+0xf0>)
	atomic_val_t mask = ATOMIC_MASK(bit);
   1337a:	2201      	movs	r2, #1
   1337c:	40b2      	lsls	r2, r6
   1337e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   13382:	e853 1f00 	ldrex	r1, [r3]
   13386:	4311      	orrs	r1, r2
   13388:	e843 1000 	strex	r0, r1, [r3]
   1338c:	2800      	cmp	r0, #0
   1338e:	d1f8      	bne.n	13382 <pm_system_suspend+0x82>
   13390:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
   13394:	230c      	movs	r3, #12
   13396:	fb03 8404 	mla	r4, r3, r4, r8
   1339a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   1339e:	ab05      	add	r3, sp, #20
   133a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   133a4:	4a13      	ldr	r2, [pc, #76]	; (133f4 <pm_system_suspend+0xf4>)
   133a6:	b11a      	cbz	r2, 133b0 <pm_system_suspend+0xb0>
		pm_power_state_set(info);
   133a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   133ac:	f011 fdf5 	bl	24f9a <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
   133b0:	f7ff ff62 	bl	13278 <pm_system_resume>
	k_sched_unlock();
   133b4:	f00e fa5a 	bl	2186c <k_sched_unlock>
	bool ret = true;
   133b8:	2001      	movs	r0, #1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   133ba:	4a0f      	ldr	r2, [pc, #60]	; (133f8 <pm_system_suspend+0xf8>)
   133bc:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   133c0:	2301      	movs	r3, #1
   133c2:	40b3      	lsls	r3, r6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   133c4:	43db      	mvns	r3, r3
   133c6:	eb02 0585 	add.w	r5, r2, r5, lsl #2
   133ca:	e855 2f00 	ldrex	r2, [r5]
   133ce:	401a      	ands	r2, r3
   133d0:	e845 2100 	strex	r1, r2, [r5]
   133d4:	2900      	cmp	r1, #0
   133d6:	d1f8      	bne.n	133ca <pm_system_suspend+0xca>
   133d8:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
   133dc:	b008      	add	sp, #32
   133de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   133e2:	bf00      	nop
   133e4:	200027d0 	.word	0x200027d0
   133e8:	000f423f 	.word	0x000f423f
   133ec:	000f4240 	.word	0x000f4240
   133f0:	20002380 	.word	0x20002380
   133f4:	00024f9b 	.word	0x00024f9b
   133f8:	20002390 	.word	0x20002390
   133fc:	20002384 	.word	0x20002384

00013400 <__printk_hook_install>:
 *
 * @return N/A
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
   13400:	4b01      	ldr	r3, [pc, #4]	; (13408 <__printk_hook_install+0x8>)
   13402:	6018      	str	r0, [r3, #0]
}
   13404:	4770      	bx	lr
   13406:	bf00      	nop
   13408:	20000570 	.word	0x20000570

0001340c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   1340c:	b530      	push	{r4, r5, lr}
   1340e:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   13410:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   13414:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   13416:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
   13418:	a901      	add	r1, sp, #4
   1341a:	4805      	ldr	r0, [pc, #20]	; (13430 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   1341c:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
   1341e:	f7fd fbe7 	bl	10bf0 <cbvprintf>

	if (ctx.count < ctx.max) {
   13422:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   13426:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   13428:	bfb8      	it	lt
   1342a:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   1342c:	b005      	add	sp, #20
   1342e:	bd30      	pop	{r4, r5, pc}
   13430:	00024b1b 	.word	0x00024b1b

00013434 <settings_init>:
	list->head = NULL;
   13434:	4b02      	ldr	r3, [pc, #8]	; (13440 <settings_init+0xc>)
   13436:	2200      	movs	r2, #0
	list->tail = NULL;
   13438:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   1343c:	f000 ba16 	b.w	1386c <settings_store_init>
   13440:	20002394 	.word	0x20002394

00013444 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   13444:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   13448:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   1344a:	460e      	mov	r6, r1
   1344c:	b109      	cbz	r1, 13452 <settings_parse_and_lookup+0xe>
		*next = NULL;
   1344e:	2300      	movs	r3, #0
   13450:	600b      	str	r3, [r1, #0]
   13452:	4c1e      	ldr	r4, [pc, #120]	; (134cc <settings_parse_and_lookup+0x88>)
	}

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   13454:	f8df 807c 	ldr.w	r8, [pc, #124]	; 134d4 <settings_parse_and_lookup+0x90>
   13458:	2500      	movs	r5, #0
   1345a:	4544      	cmp	r4, r8
   1345c:	d308      	bcc.n	13470 <settings_parse_and_lookup+0x2c>
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   1345e:	4b1c      	ldr	r3, [pc, #112]	; (134d0 <settings_parse_and_lookup+0x8c>)
   13460:	681c      	ldr	r4, [r3, #0]
   13462:	b10c      	cbz	r4, 13468 <settings_parse_and_lookup+0x24>
   13464:	3c14      	subs	r4, #20
   13466:	b9c4      	cbnz	r4, 1349a <settings_parse_and_lookup+0x56>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   13468:	4628      	mov	r0, r5
   1346a:	b002      	add	sp, #8
   1346c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   13470:	6821      	ldr	r1, [r4, #0]
   13472:	aa01      	add	r2, sp, #4
   13474:	4638      	mov	r0, r7
   13476:	f011 fb82 	bl	24b7e <settings_name_steq>
   1347a:	b160      	cbz	r0, 13496 <settings_parse_and_lookup+0x52>
		if (!bestmatch) {
   1347c:	b925      	cbnz	r5, 13488 <settings_parse_and_lookup+0x44>
			if (next) {
   1347e:	b10e      	cbz	r6, 13484 <settings_parse_and_lookup+0x40>
				*next = tmpnext;
   13480:	9b01      	ldr	r3, [sp, #4]
   13482:	6033      	str	r3, [r6, #0]
   13484:	4625      	mov	r5, r4
   13486:	e006      	b.n	13496 <settings_parse_and_lookup+0x52>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   13488:	6829      	ldr	r1, [r5, #0]
   1348a:	6820      	ldr	r0, [r4, #0]
   1348c:	2200      	movs	r2, #0
   1348e:	f011 fb76 	bl	24b7e <settings_name_steq>
   13492:	2800      	cmp	r0, #0
   13494:	d1f3      	bne.n	1347e <settings_parse_and_lookup+0x3a>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   13496:	3414      	adds	r4, #20
   13498:	e7df      	b.n	1345a <settings_parse_and_lookup+0x16>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   1349a:	6821      	ldr	r1, [r4, #0]
   1349c:	aa01      	add	r2, sp, #4
   1349e:	4638      	mov	r0, r7
   134a0:	f011 fb6d 	bl	24b7e <settings_name_steq>
   134a4:	b160      	cbz	r0, 134c0 <settings_parse_and_lookup+0x7c>
		if (!bestmatch) {
   134a6:	b925      	cbnz	r5, 134b2 <settings_parse_and_lookup+0x6e>
			if (next) {
   134a8:	b10e      	cbz	r6, 134ae <settings_parse_and_lookup+0x6a>
				*next = tmpnext;
   134aa:	9b01      	ldr	r3, [sp, #4]
   134ac:	6033      	str	r3, [r6, #0]
   134ae:	4625      	mov	r5, r4
   134b0:	e006      	b.n	134c0 <settings_parse_and_lookup+0x7c>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   134b2:	6829      	ldr	r1, [r5, #0]
   134b4:	6820      	ldr	r0, [r4, #0]
   134b6:	2200      	movs	r2, #0
   134b8:	f011 fb61 	bl	24b7e <settings_name_steq>
   134bc:	2800      	cmp	r0, #0
   134be:	d1f3      	bne.n	134a8 <settings_parse_and_lookup+0x64>
Z_GENLIST_PEEK_NEXT(slist, snode)
   134c0:	f114 0f14 	cmn.w	r4, #20
   134c4:	d0d0      	beq.n	13468 <settings_parse_and_lookup+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   134c6:	6964      	ldr	r4, [r4, #20]
   134c8:	e7cb      	b.n	13462 <settings_parse_and_lookup+0x1e>
   134ca:	bf00      	nop
   134cc:	00028d5c 	.word	0x00028d5c
   134d0:	20002394 	.word	0x20002394
   134d4:	00028dd4 	.word	0x00028dd4

000134d8 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
   134d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   134dc:	b085      	sub	sp, #20
   134de:	4605      	mov	r5, r0
   134e0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	int rc;
	const char *name_key = name;
   134e4:	9003      	str	r0, [sp, #12]
{
   134e6:	460c      	mov	r4, r1
   134e8:	4616      	mov	r6, r2
   134ea:	461f      	mov	r7, r3

	if (load_arg && load_arg->subtree &&
   134ec:	f1b8 0f00 	cmp.w	r8, #0
   134f0:	d018      	beq.n	13524 <settings_call_set_handler+0x4c>
   134f2:	f8d8 1000 	ldr.w	r1, [r8]
   134f6:	b181      	cbz	r1, 1351a <settings_call_set_handler+0x42>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   134f8:	aa03      	add	r2, sp, #12
   134fa:	f011 fb40 	bl	24b7e <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   134fe:	b960      	cbnz	r0, 1351a <settings_call_set_handler+0x42>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				log_strdup(name), rc);
			/* Ignoring the error */
			rc = 0;
   13500:	2000      	movs	r0, #0
   13502:	e007      	b.n	13514 <settings_call_set_handler+0x3c>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   13504:	f8d8 3008 	ldr.w	r3, [r8, #8]
   13508:	9300      	str	r3, [sp, #0]
   1350a:	9803      	ldr	r0, [sp, #12]
   1350c:	463b      	mov	r3, r7
   1350e:	4632      	mov	r2, r6
   13510:	4621      	mov	r1, r4
   13512:	47c8      	blx	r9
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
   13514:	b005      	add	sp, #20
   13516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (load_arg && load_arg->cb) {
   1351a:	f8d8 9004 	ldr.w	r9, [r8, #4]
   1351e:	f1b9 0f00 	cmp.w	r9, #0
   13522:	d1ef      	bne.n	13504 <settings_call_set_handler+0x2c>
		ch = settings_parse_and_lookup(name, &name_key);
   13524:	a903      	add	r1, sp, #12
   13526:	4628      	mov	r0, r5
   13528:	f7ff ff8c 	bl	13444 <settings_parse_and_lookup>
		if (!ch) {
   1352c:	2800      	cmp	r0, #0
   1352e:	d0e7      	beq.n	13500 <settings_call_set_handler+0x28>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   13530:	f8d0 8008 	ldr.w	r8, [r0, #8]
   13534:	9803      	ldr	r0, [sp, #12]
   13536:	4632      	mov	r2, r6
   13538:	463b      	mov	r3, r7
   1353a:	4621      	mov	r1, r4
   1353c:	47c0      	blx	r8
		if (rc != 0) {
   1353e:	4606      	mov	r6, r0
   13540:	2800      	cmp	r0, #0
   13542:	d0dd      	beq.n	13500 <settings_call_set_handler+0x28>
   13544:	4b08      	ldr	r3, [pc, #32]	; (13568 <settings_call_set_handler+0x90>)
   13546:	4c09      	ldr	r4, [pc, #36]	; (1356c <settings_call_set_handler+0x94>)
{
	if (IS_ENABLED(CONFIG_LOG_MODE_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
   13548:	4628      	mov	r0, r5
   1354a:	1ae4      	subs	r4, r4, r3
   1354c:	08e4      	lsrs	r4, r4, #3
   1354e:	f7fe fcfb 	bl	11f48 <z_log_strdup>
			LOG_ERR("set-value failure. key: %s error(%d)",
   13552:	01a4      	lsls	r4, r4, #6
   13554:	f044 0401 	orr.w	r4, r4, #1
   13558:	4601      	mov	r1, r0
   1355a:	4623      	mov	r3, r4
   1355c:	4804      	ldr	r0, [pc, #16]	; (13570 <settings_call_set_handler+0x98>)
   1355e:	4632      	mov	r2, r6
   13560:	f010 fca0 	bl	23ea4 <log_2>
   13564:	e7cc      	b.n	13500 <settings_call_set_handler+0x28>
   13566:	bf00      	nop
   13568:	00028dd4 	.word	0x00028dd4
   1356c:	00028ef4 	.word	0x00028ef4
   13570:	0002a293 	.word	0x0002a293

00013574 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   13574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc;
	int rc2;

	rc = 0;

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   13576:	4c1a      	ldr	r4, [pc, #104]	; (135e0 <settings_commit_subtree+0x6c>)
   13578:	4f1a      	ldr	r7, [pc, #104]	; (135e4 <settings_commit_subtree+0x70>)
{
   1357a:	4606      	mov	r6, r0
	rc = 0;
   1357c:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   1357e:	42bc      	cmp	r4, r7
   13580:	d306      	bcc.n	13590 <settings_commit_subtree+0x1c>
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   13582:	4b19      	ldr	r3, [pc, #100]	; (135e8 <settings_commit_subtree+0x74>)
   13584:	681c      	ldr	r4, [r3, #0]
   13586:	b10c      	cbz	r4, 1358c <settings_commit_subtree+0x18>
   13588:	3c14      	subs	r4, #20
   1358a:	b99c      	cbnz	r4, 135b4 <settings_commit_subtree+0x40>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   1358c:	4628      	mov	r0, r5
   1358e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   13590:	b91e      	cbnz	r6, 1359a <settings_commit_subtree+0x26>
		if (ch->h_commit) {
   13592:	68e3      	ldr	r3, [r4, #12]
   13594:	b94b      	cbnz	r3, 135aa <settings_commit_subtree+0x36>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   13596:	3414      	adds	r4, #20
   13598:	e7f1      	b.n	1357e <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   1359a:	6820      	ldr	r0, [r4, #0]
   1359c:	2200      	movs	r2, #0
   1359e:	4631      	mov	r1, r6
   135a0:	f011 faed 	bl	24b7e <settings_name_steq>
   135a4:	2800      	cmp	r0, #0
   135a6:	d1f4      	bne.n	13592 <settings_commit_subtree+0x1e>
   135a8:	e7f5      	b.n	13596 <settings_commit_subtree+0x22>
			rc2 = ch->h_commit();
   135aa:	4798      	blx	r3
				rc = rc2;
   135ac:	2d00      	cmp	r5, #0
   135ae:	bf08      	it	eq
   135b0:	4605      	moveq	r5, r0
   135b2:	e7f0      	b.n	13596 <settings_commit_subtree+0x22>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   135b4:	b936      	cbnz	r6, 135c4 <settings_commit_subtree+0x50>
		if (ch->h_commit) {
   135b6:	68e3      	ldr	r3, [r4, #12]
   135b8:	b963      	cbnz	r3, 135d4 <settings_commit_subtree+0x60>
Z_GENLIST_PEEK_NEXT(slist, snode)
   135ba:	f114 0f14 	cmn.w	r4, #20
   135be:	d0e5      	beq.n	1358c <settings_commit_subtree+0x18>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   135c0:	6964      	ldr	r4, [r4, #20]
   135c2:	e7e0      	b.n	13586 <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   135c4:	6820      	ldr	r0, [r4, #0]
   135c6:	2200      	movs	r2, #0
   135c8:	4631      	mov	r1, r6
   135ca:	f011 fad8 	bl	24b7e <settings_name_steq>
   135ce:	2800      	cmp	r0, #0
   135d0:	d1f1      	bne.n	135b6 <settings_commit_subtree+0x42>
   135d2:	e7f2      	b.n	135ba <settings_commit_subtree+0x46>
			rc2 = ch->h_commit();
   135d4:	4798      	blx	r3
				rc = rc2;
   135d6:	2d00      	cmp	r5, #0
   135d8:	bf08      	it	eq
   135da:	4605      	moveq	r5, r0
   135dc:	e7ed      	b.n	135ba <settings_commit_subtree+0x46>
   135de:	bf00      	nop
   135e0:	00028d5c 	.word	0x00028d5c
   135e4:	00028dd4 	.word	0x00028dd4
   135e8:	20002394 	.word	0x20002394

000135ec <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   135ec:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   135ee:	4c06      	ldr	r4, [pc, #24]	; (13608 <settings_subsys_init+0x1c>)
   135f0:	7823      	ldrb	r3, [r4, #0]
   135f2:	b93b      	cbnz	r3, 13604 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
   135f4:	f7ff ff1e 	bl	13434 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
   135f8:	f000 f864 	bl	136c4 <settings_backend_init>

	if (!err) {
   135fc:	b908      	cbnz	r0, 13602 <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
   135fe:	2301      	movs	r3, #1
   13600:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
   13602:	bd10      	pop	{r4, pc}
		return 0;
   13604:	2000      	movs	r0, #0
   13606:	e7fc      	b.n	13602 <settings_subsys_init+0x16>
   13608:	2000285e 	.word	0x2000285e

0001360c <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   1360c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
   13610:	8f04      	ldrh	r4, [r0, #56]	; 0x38
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
   13612:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 136c0 <settings_nvs_load+0xb4>
	name_id = cf->last_name_id + 1;
   13616:	3401      	adds	r4, #1
{
   13618:	b098      	sub	sp, #96	; 0x60
   1361a:	4680      	mov	r8, r0
   1361c:	4689      	mov	r9, r1
	name_id = cf->last_name_id + 1;
   1361e:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   13620:	f100 0608 	add.w	r6, r0, #8
		name_id--;
   13624:	1e65      	subs	r5, r4, #1
   13626:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
   13628:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1362c:	d045      	beq.n	136ba <settings_nvs_load+0xae>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   1362e:	234a      	movs	r3, #74	; 0x4a
   13630:	aa05      	add	r2, sp, #20
   13632:	4629      	mov	r1, r5
   13634:	4630      	mov	r0, r6
   13636:	f011 f96b 	bl	24910 <nvs_read>
   1363a:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
   1363e:	343f      	adds	r4, #63	; 0x3f
   13640:	b2a4      	uxth	r4, r4
   13642:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   13644:	4621      	mov	r1, r4
   13646:	2301      	movs	r3, #1
   13648:	f10d 020b 	add.w	r2, sp, #11
   1364c:	4630      	mov	r0, r6
   1364e:	f011 f95f 	bl	24910 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
   13652:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   13654:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
   13656:	dc03      	bgt.n	13660 <settings_nvs_load+0x54>
   13658:	2800      	cmp	r0, #0
   1365a:	dc03      	bgt.n	13664 <settings_nvs_load+0x58>
{
   1365c:	462c      	mov	r4, r5
   1365e:	e7e1      	b.n	13624 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
   13660:	2800      	cmp	r0, #0
   13662:	dc16      	bgt.n	13692 <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
   13664:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   13668:	42ab      	cmp	r3, r5
   1366a:	d109      	bne.n	13680 <settings_nvs_load+0x74>
				cf->last_name_id--;
   1366c:	4642      	mov	r2, r8
   1366e:	1e6b      	subs	r3, r5, #1
   13670:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   13674:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   13678:	2302      	movs	r3, #2
   1367a:	4630      	mov	r0, r6
   1367c:	f7ff fb7e 	bl	12d7c <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
   13680:	4629      	mov	r1, r5
   13682:	4630      	mov	r0, r6
   13684:	f011 f940 	bl	24908 <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
   13688:	4621      	mov	r1, r4
   1368a:	4630      	mov	r0, r6
   1368c:	f011 f93c 	bl	24908 <nvs_delete>
			continue;
   13690:	e7e4      	b.n	1365c <settings_nvs_load+0x50>
		name[rc1] = '\0';
   13692:	ab18      	add	r3, sp, #96	; 0x60
   13694:	441f      	add	r7, r3
   13696:	2300      	movs	r3, #0
   13698:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
   1369c:	4652      	mov	r2, sl
   1369e:	f8cd 9000 	str.w	r9, [sp]
   136a2:	ab03      	add	r3, sp, #12
   136a4:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
   136a6:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
   136a8:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
   136ac:	f7ff ff14 	bl	134d8 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
   136b0:	2800      	cmp	r0, #0
   136b2:	d0d3      	beq.n	1365c <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
   136b4:	b018      	add	sp, #96	; 0x60
   136b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   136ba:	2000      	movs	r0, #0
	return ret;
   136bc:	e7fa      	b.n	136b4 <settings_nvs_load+0xa8>
   136be:	bf00      	nop
   136c0:	00024bf1 	.word	0x00024bf1

000136c4 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
   136c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
   136c6:	2301      	movs	r3, #1

	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
   136c8:	4669      	mov	r1, sp
   136ca:	2004      	movs	r0, #4
	uint32_t sector_cnt = 1;
   136cc:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
   136ce:	f7fe fa3d 	bl	11b4c <flash_area_open>
	if (rc) {
   136d2:	4604      	mov	r4, r0
   136d4:	2800      	cmp	r0, #0
   136d6:	d136      	bne.n	13746 <settings_backend_init+0x82>
		return rc;
	}

	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
   136d8:	aa02      	add	r2, sp, #8
   136da:	a901      	add	r1, sp, #4
   136dc:	2004      	movs	r0, #4
   136de:	f7fe fa53 	bl	11b88 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
   136e2:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
   136e6:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
   136e8:	d02d      	beq.n	13746 <settings_backend_init+0x82>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   136ea:	b138      	cbz	r0, 136fc <settings_backend_init+0x38>
   136ec:	340c      	adds	r4, #12
   136ee:	d005      	beq.n	136fc <settings_backend_init+0x38>
		k_panic();
   136f0:	4040      	eors	r0, r0
   136f2:	f380 8811 	msr	BASEPRI, r0
   136f6:	f04f 0004 	mov.w	r0, #4
   136fa:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
   136fc:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
   136fe:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   13702:	d223      	bcs.n	1374c <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
   13704:	9a00      	ldr	r2, [sp, #0]
   13706:	2300      	movs	r3, #0
   13708:	6895      	ldr	r5, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
   1370a:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
   1370c:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
   1370e:	4285      	cmp	r5, r0
   13710:	b29c      	uxth	r4, r3
   13712:	d303      	bcc.n	1371c <settings_backend_init+0x58>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
   13714:	3301      	adds	r3, #1
   13716:	2b08      	cmp	r3, #8
   13718:	d1f8      	bne.n	1370c <settings_backend_init+0x48>
   1371a:	461c      	mov	r4, r3
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   1371c:	4d0d      	ldr	r5, [pc, #52]	; (13754 <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   1371e:	6853      	ldr	r3, [r2, #4]
   13720:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;

	rc = settings_nvs_backend_init(&default_settings_nvs);
   13722:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
   13724:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_count = cnt;
   13726:	82ec      	strh	r4, [r5, #22]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   13728:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
   1372a:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
   1372c:	f011 faf7 	bl	24d1e <settings_nvs_backend_init>
	if (rc) {
   13730:	4604      	mov	r4, r0
   13732:	b940      	cbnz	r0, 13746 <settings_backend_init+0x82>
	cf->cf_store.cs_itf = &settings_nvs_itf;
   13734:	4e08      	ldr	r6, [pc, #32]	; (13758 <settings_backend_init+0x94>)
   13736:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
   13738:	4628      	mov	r0, r5
   1373a:	f000 f835 	bl	137a8 <settings_src_register>
	settings_dst_register(&cf->cf_store);
   1373e:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   13740:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
   13742:	f000 f83f 	bl	137c4 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
   13746:	4620      	mov	r0, r4
   13748:	b004      	add	sp, #16
   1374a:	bd70      	pop	{r4, r5, r6, pc}
		return -EDOM;
   1374c:	f06f 0420 	mvn.w	r4, #32
   13750:	e7f9      	b.n	13746 <settings_backend_init+0x82>
   13752:	bf00      	nop
   13754:	2000239c 	.word	0x2000239c
   13758:	20000574 	.word	0x20000574

0001375c <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   1375c:	4b10      	ldr	r3, [pc, #64]	; (137a0 <settings_save_one+0x44>)
{
   1375e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
   13762:	681c      	ldr	r4, [r3, #0]
{
   13764:	4605      	mov	r5, r0
   13766:	460e      	mov	r6, r1
   13768:	4617      	mov	r7, r2
	if (!cs) {
   1376a:	b1ac      	cbz	r4, 13798 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   1376c:	f04f 32ff 	mov.w	r2, #4294967295
   13770:	f04f 33ff 	mov.w	r3, #4294967295
   13774:	480b      	ldr	r0, [pc, #44]	; (137a4 <settings_save_one+0x48>)
   13776:	f00d fcc9 	bl	2110c <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   1377a:	6863      	ldr	r3, [r4, #4]
   1377c:	4632      	mov	r2, r6
   1377e:	f8d3 8008 	ldr.w	r8, [r3, #8]
   13782:	4629      	mov	r1, r5
   13784:	463b      	mov	r3, r7
   13786:	4620      	mov	r0, r4
   13788:	47c0      	blx	r8
   1378a:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   1378c:	4805      	ldr	r0, [pc, #20]	; (137a4 <settings_save_one+0x48>)
   1378e:	f00d fd3b 	bl	21208 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   13792:	4620      	mov	r0, r4
   13794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   13798:	f06f 0401 	mvn.w	r4, #1
   1379c:	e7f9      	b.n	13792 <settings_save_one+0x36>
   1379e:	bf00      	nop
   137a0:	200023e4 	.word	0x200023e4
   137a4:	2000098c 	.word	0x2000098c

000137a8 <settings_src_register>:
	parent->next = child;
   137a8:	2300      	movs	r3, #0
   137aa:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
   137ac:	4b04      	ldr	r3, [pc, #16]	; (137c0 <settings_src_register+0x18>)
   137ae:	685a      	ldr	r2, [r3, #4]
   137b0:	b912      	cbnz	r2, 137b8 <settings_src_register+0x10>
	list->head = node;
   137b2:	e9c3 0000 	strd	r0, r0, [r3]
}
   137b6:	4770      	bx	lr
	parent->next = child;
   137b8:	6010      	str	r0, [r2, #0]
	list->tail = node;
   137ba:	6058      	str	r0, [r3, #4]
}
   137bc:	4770      	bx	lr
   137be:	bf00      	nop
   137c0:	200023dc 	.word	0x200023dc

000137c4 <settings_dst_register>:
	settings_save_dst = cs;
   137c4:	4b01      	ldr	r3, [pc, #4]	; (137cc <settings_dst_register+0x8>)
   137c6:	6018      	str	r0, [r3, #0]
}
   137c8:	4770      	bx	lr
   137ca:	bf00      	nop
   137cc:	200023e4 	.word	0x200023e4

000137d0 <settings_load_subtree>:
{
   137d0:	b530      	push	{r4, r5, lr}
   137d2:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
   137d4:	2300      	movs	r3, #0
{
   137d6:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   137d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
   137dc:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   137de:	f04f 33ff 	mov.w	r3, #4294967295
   137e2:	480e      	ldr	r0, [pc, #56]	; (1381c <settings_load_subtree+0x4c>)
   137e4:	f04f 32ff 	mov.w	r2, #4294967295
   137e8:	f00d fc90 	bl	2110c <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   137ec:	4b0c      	ldr	r3, [pc, #48]	; (13820 <settings_load_subtree+0x50>)
   137ee:	681c      	ldr	r4, [r3, #0]
   137f0:	2c00      	cmp	r4, #0
   137f2:	bf38      	it	cc
   137f4:	2400      	movcc	r4, #0
   137f6:	b13c      	cbz	r4, 13808 <settings_load_subtree+0x38>
		cs->cs_itf->csi_load(cs, &arg);
   137f8:	6863      	ldr	r3, [r4, #4]
   137fa:	4620      	mov	r0, r4
   137fc:	681b      	ldr	r3, [r3, #0]
   137fe:	a901      	add	r1, sp, #4
   13800:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   13802:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   13804:	2c00      	cmp	r4, #0
   13806:	d1f6      	bne.n	137f6 <settings_load_subtree+0x26>
	rc = settings_commit_subtree(subtree);
   13808:	4628      	mov	r0, r5
   1380a:	f7ff feb3 	bl	13574 <settings_commit_subtree>
   1380e:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   13810:	4802      	ldr	r0, [pc, #8]	; (1381c <settings_load_subtree+0x4c>)
   13812:	f00d fcf9 	bl	21208 <z_impl_k_mutex_unlock>
}
   13816:	4620      	mov	r0, r4
   13818:	b005      	add	sp, #20
   1381a:	bd30      	pop	{r4, r5, pc}
   1381c:	2000098c 	.word	0x2000098c
   13820:	200023dc 	.word	0x200023dc

00013824 <settings_load_subtree_direct>:
{
   13824:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
   13826:	e9cd 0101 	strd	r0, r1, [sp, #4]
   1382a:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   1382c:	f04f 33ff 	mov.w	r3, #4294967295
   13830:	480c      	ldr	r0, [pc, #48]	; (13864 <settings_load_subtree_direct+0x40>)
   13832:	f04f 32ff 	mov.w	r2, #4294967295
   13836:	f00d fc69 	bl	2110c <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   1383a:	4b0b      	ldr	r3, [pc, #44]	; (13868 <settings_load_subtree_direct+0x44>)
   1383c:	681c      	ldr	r4, [r3, #0]
   1383e:	2c00      	cmp	r4, #0
   13840:	bf38      	it	cc
   13842:	2400      	movcc	r4, #0
   13844:	b13c      	cbz	r4, 13856 <settings_load_subtree_direct+0x32>
		cs->cs_itf->csi_load(cs, &arg);
   13846:	6863      	ldr	r3, [r4, #4]
   13848:	4620      	mov	r0, r4
   1384a:	681b      	ldr	r3, [r3, #0]
   1384c:	a901      	add	r1, sp, #4
   1384e:	4798      	blx	r3
   13850:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   13852:	2c00      	cmp	r4, #0
   13854:	d1f6      	bne.n	13844 <settings_load_subtree_direct+0x20>
	return z_impl_k_mutex_unlock(mutex);
   13856:	4803      	ldr	r0, [pc, #12]	; (13864 <settings_load_subtree_direct+0x40>)
   13858:	f00d fcd6 	bl	21208 <z_impl_k_mutex_unlock>
}
   1385c:	2000      	movs	r0, #0
   1385e:	b004      	add	sp, #16
   13860:	bd10      	pop	{r4, pc}
   13862:	bf00      	nop
   13864:	2000098c 	.word	0x2000098c
   13868:	200023dc 	.word	0x200023dc

0001386c <settings_store_init>:
	list->head = NULL;
   1386c:	4b02      	ldr	r3, [pc, #8]	; (13878 <settings_store_init+0xc>)
   1386e:	2200      	movs	r2, #0
	list->tail = NULL;
   13870:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   13874:	4770      	bx	lr
   13876:	bf00      	nop
   13878:	200023dc 	.word	0x200023dc

0001387c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   1387c:	4901      	ldr	r1, [pc, #4]	; (13884 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1387e:	2210      	movs	r2, #16
	str	r2, [r1]
   13880:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   13882:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   13884:	e000ed10 	.word	0xe000ed10

00013888 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   13888:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1388a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   1388c:	f380 8811 	msr	BASEPRI, r0
	isb
   13890:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   13894:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   13898:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   1389a:	b662      	cpsie	i
	isb
   1389c:	f3bf 8f6f 	isb	sy

	bx	lr
   138a0:	4770      	bx	lr
   138a2:	bf00      	nop

000138a4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   138a4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   138a6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   138a8:	f381 8811 	msr	BASEPRI, r1

	wfe
   138ac:	bf20      	wfe

	msr	BASEPRI, r0
   138ae:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   138b2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   138b4:	4770      	bx	lr
   138b6:	bf00      	nop

000138b8 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   138b8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   138ba:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   138bc:	4a0b      	ldr	r2, [pc, #44]	; (138ec <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   138be:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   138c0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   138c2:	bf1e      	ittt	ne
	movne	r1, #0
   138c4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   138c6:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   138c8:	f014 faa8 	blne	27e1c <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   138cc:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   138ce:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   138d2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   138d6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   138da:	4905      	ldr	r1, [pc, #20]	; (138f0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   138dc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   138de:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   138e0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   138e2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   138e6:	4903      	ldr	r1, [pc, #12]	; (138f4 <_isr_wrapper+0x3c>)
	bx r1
   138e8:	4708      	bx	r1
   138ea:	0000      	.short	0x0000
	ldr r2, =_kernel
   138ec:	200027d0 	.word	0x200027d0
	ldr r1, =_sw_isr_table
   138f0:	00028bac 	.word	0x00028bac
	ldr r1, =z_arm_int_exit
   138f4:	00013b9d 	.word	0x00013b9d

000138f8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   138f8:	bf30      	wfi
    b z_SysNmiOnReset
   138fa:	f7ff bffd 	b.w	138f8 <z_SysNmiOnReset>
   138fe:	bf00      	nop

00013900 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   13900:	4912      	ldr	r1, [pc, #72]	; (1394c <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   13902:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   13904:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   13908:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   1390a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   1390e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   13912:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   13914:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   13918:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   1391c:	4f0c      	ldr	r7, [pc, #48]	; (13950 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   1391e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   13922:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   13924:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   13926:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   13928:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   1392a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   1392c:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1392e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   13932:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   13934:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   13936:	f000 fc27 	bl	14188 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   1393a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1393e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   13942:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   13946:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   1394a:	4770      	bx	lr
    ldr r1, =_kernel
   1394c:	200027d0 	.word	0x200027d0
    ldr v4, =_SCS_ICSR
   13950:	e000ed04 	.word	0xe000ed04

00013954 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   13954:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   13958:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1395a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   1395e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   13962:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   13964:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   13968:	2902      	cmp	r1, #2
    beq _oops
   1396a:	d0ff      	beq.n	1396c <_oops>

0001396c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   1396c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   1396e:	f011 fa1b 	bl	24da8 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   13972:	bd01      	pop	{r0, pc}

00013974 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   13974:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13976:	4606      	mov	r6, r0

	if (esf != NULL) {
   13978:	460c      	mov	r4, r1
   1397a:	b301      	cbz	r1, 139be <z_arm_fatal_error+0x4a>
   1397c:	4b13      	ldr	r3, [pc, #76]	; (139cc <z_arm_fatal_error+0x58>)
   1397e:	4d14      	ldr	r5, [pc, #80]	; (139d0 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   13980:	4814      	ldr	r0, [pc, #80]	; (139d4 <z_arm_fatal_error+0x60>)
   13982:	1aed      	subs	r5, r5, r3
   13984:	08ed      	lsrs	r5, r5, #3
   13986:	01ad      	lsls	r5, r5, #6
   13988:	f045 0501 	orr.w	r5, r5, #1
   1398c:	f8ad 5000 	strh.w	r5, [sp]
   13990:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
   13994:	6809      	ldr	r1, [r1, #0]
   13996:	f010 fa9e 	bl	23ed6 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   1399a:	f8ad 5000 	strh.w	r5, [sp]
   1399e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   139a2:	68e1      	ldr	r1, [r4, #12]
   139a4:	480c      	ldr	r0, [pc, #48]	; (139d8 <z_arm_fatal_error+0x64>)
   139a6:	f010 fa96 	bl	23ed6 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   139aa:	69e1      	ldr	r1, [r4, #28]
   139ac:	480b      	ldr	r0, [pc, #44]	; (139dc <z_arm_fatal_error+0x68>)
   139ae:	462a      	mov	r2, r5
   139b0:	f010 fa64 	bl	23e7c <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   139b4:	69a1      	ldr	r1, [r4, #24]
   139b6:	480a      	ldr	r0, [pc, #40]	; (139e0 <z_arm_fatal_error+0x6c>)
   139b8:	462a      	mov	r2, r5
   139ba:	f010 fa5f 	bl	23e7c <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   139be:	4621      	mov	r1, r4
   139c0:	4630      	mov	r0, r6
}
   139c2:	b002      	add	sp, #8
   139c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
   139c8:	f00d ba02 	b.w	20dd0 <z_fatal_error>
   139cc:	00028dd4 	.word	0x00028dd4
   139d0:	00028ec4 	.word	0x00028ec4
   139d4:	0002a2b8 	.word	0x0002a2b8
   139d8:	0002a2e7 	.word	0x0002a2e7
   139dc:	0002a316 	.word	0x0002a316
   139e0:	0002a325 	.word	0x0002a325

000139e4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   139e4:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   139e6:	2b00      	cmp	r3, #0
   139e8:	db08      	blt.n	139fc <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   139ea:	2201      	movs	r2, #1
   139ec:	f000 001f 	and.w	r0, r0, #31
   139f0:	fa02 f000 	lsl.w	r0, r2, r0
   139f4:	095b      	lsrs	r3, r3, #5
   139f6:	4a02      	ldr	r2, [pc, #8]	; (13a00 <arch_irq_enable+0x1c>)
   139f8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   139fc:	4770      	bx	lr
   139fe:	bf00      	nop
   13a00:	e000e100 	.word	0xe000e100

00013a04 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   13a04:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   13a06:	2b00      	cmp	r3, #0
   13a08:	db0d      	blt.n	13a26 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13a0a:	2201      	movs	r2, #1
   13a0c:	095b      	lsrs	r3, r3, #5
   13a0e:	f000 001f 	and.w	r0, r0, #31
   13a12:	fa02 f000 	lsl.w	r0, r2, r0
   13a16:	3320      	adds	r3, #32
   13a18:	4a03      	ldr	r2, [pc, #12]	; (13a28 <arch_irq_disable+0x24>)
   13a1a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   13a1e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13a22:	f3bf 8f6f 	isb	sy
}
   13a26:	4770      	bx	lr
   13a28:	e000e100 	.word	0xe000e100

00013a2c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   13a2c:	4b05      	ldr	r3, [pc, #20]	; (13a44 <arch_irq_is_enabled+0x18>)
   13a2e:	0942      	lsrs	r2, r0, #5
   13a30:	f000 001f 	and.w	r0, r0, #31
   13a34:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   13a38:	2301      	movs	r3, #1
   13a3a:	fa03 f000 	lsl.w	r0, r3, r0
}
   13a3e:	4010      	ands	r0, r2
   13a40:	4770      	bx	lr
   13a42:	bf00      	nop
   13a44:	e000e100 	.word	0xe000e100

00013a48 <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   13a48:	07d3      	lsls	r3, r2, #31
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   13a4a:	b242      	sxtb	r2, r0
		prio += _IRQ_PRIO_OFFSET;
   13a4c:	bf54      	ite	pl
   13a4e:	3102      	addpl	r1, #2
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   13a50:	2100      	movmi	r1, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   13a52:	2a00      	cmp	r2, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13a54:	bfac      	ite	ge
   13a56:	f102 4260 	addge.w	r2, r2, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13a5a:	4a07      	ldrlt	r2, [pc, #28]	; (13a78 <z_arm_irq_priority_set+0x30>)
   13a5c:	ea4f 1341 	mov.w	r3, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13a60:	bfac      	ite	ge
   13a62:	f502 4261 	addge.w	r2, r2, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13a66:	f000 000f 	andlt.w	r0, r0, #15
   13a6a:	b2db      	uxtb	r3, r3
   13a6c:	bfb4      	ite	lt
   13a6e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13a70:	f882 3300 	strbge.w	r3, [r2, #768]	; 0x300
}
   13a74:	4770      	bx	lr
   13a76:	bf00      	nop
   13a78:	e000ed14 	.word	0xe000ed14

00013a7c <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   13a7c:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   13a7e:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   13a80:	4b04      	ldr	r3, [pc, #16]	; (13a94 <_arch_isr_direct_pm+0x18>)
   13a82:	699a      	ldr	r2, [r3, #24]
   13a84:	b11a      	cbz	r2, 13a8e <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   13a86:	2200      	movs	r2, #0
   13a88:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   13a8a:	f014 f9c7 	bl	27e1c <z_pm_save_idle_exit>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   13a8e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   13a90:	bd08      	pop	{r3, pc}
   13a92:	bf00      	nop
   13a94:	200027d0 	.word	0x200027d0

00013a98 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   13a98:	4a0b      	ldr	r2, [pc, #44]	; (13ac8 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   13a9a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   13a9c:	4b0b      	ldr	r3, [pc, #44]	; (13acc <z_arm_prep_c+0x34>)
   13a9e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   13aa2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   13aa4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13aa8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   13aac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   13ab0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   13ab4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   13ab8:	f00d fa44 	bl	20f44 <z_bss_zero>
	z_data_copy();
   13abc:	f00e fd24 	bl	22508 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   13ac0:	f000 faf6 	bl	140b0 <z_arm_interrupt_init>
	z_cstart();
   13ac4:	f00d fa48 	bl	20f58 <z_cstart>
   13ac8:	00000000 	.word	0x00000000
   13acc:	e000ed00 	.word	0xe000ed00

00013ad0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   13ad0:	4a09      	ldr	r2, [pc, #36]	; (13af8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   13ad2:	490a      	ldr	r1, [pc, #40]	; (13afc <arch_swap+0x2c>)
	_current->arch.basepri = key;
   13ad4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   13ad6:	6809      	ldr	r1, [r1, #0]
   13ad8:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13ada:	4909      	ldr	r1, [pc, #36]	; (13b00 <arch_swap+0x30>)
	_current->arch.basepri = key;
   13adc:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13ade:	684b      	ldr	r3, [r1, #4]
   13ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   13ae4:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
   13ae6:	2300      	movs	r3, #0
   13ae8:	f383 8811 	msr	BASEPRI, r3
   13aec:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   13af0:	6893      	ldr	r3, [r2, #8]
}
   13af2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   13af4:	4770      	bx	lr
   13af6:	bf00      	nop
   13af8:	200027d0 	.word	0x200027d0
   13afc:	00029b1c 	.word	0x00029b1c
   13b00:	e000ed00 	.word	0xe000ed00

00013b04 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   13b04:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   13b08:	9b00      	ldr	r3, [sp, #0]
   13b0a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   13b0e:	490a      	ldr	r1, [pc, #40]	; (13b38 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   13b10:	9b01      	ldr	r3, [sp, #4]
   13b12:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   13b16:	9b02      	ldr	r3, [sp, #8]
   13b18:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   13b1c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   13b20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   13b24:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   13b28:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   13b2c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   13b2e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   13b30:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   13b32:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   13b34:	4770      	bx	lr
   13b36:	bf00      	nop
   13b38:	00024d65 	.word	0x00024d65

00013b3c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   13b3c:	4a0b      	ldr	r2, [pc, #44]	; (13b6c <z_check_thread_stack_fail+0x30>)
{
   13b3e:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   13b40:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   13b42:	b190      	cbz	r0, 13b6a <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   13b44:	f113 0f16 	cmn.w	r3, #22
   13b48:	6e80      	ldr	r0, [r0, #104]	; 0x68
   13b4a:	d005      	beq.n	13b58 <z_check_thread_stack_fail+0x1c>
   13b4c:	f1a0 0220 	sub.w	r2, r0, #32
   13b50:	429a      	cmp	r2, r3
   13b52:	d806      	bhi.n	13b62 <z_check_thread_stack_fail+0x26>
   13b54:	4283      	cmp	r3, r0
   13b56:	d204      	bcs.n	13b62 <z_check_thread_stack_fail+0x26>
   13b58:	4281      	cmp	r1, r0
   13b5a:	bf2c      	ite	cs
   13b5c:	2100      	movcs	r1, #0
   13b5e:	2101      	movcc	r1, #1
   13b60:	e000      	b.n	13b64 <z_check_thread_stack_fail+0x28>
   13b62:	2100      	movs	r1, #0
   13b64:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   13b66:	bf08      	it	eq
   13b68:	2000      	moveq	r0, #0
}
   13b6a:	4770      	bx	lr
   13b6c:	200027d0 	.word	0x200027d0

00013b70 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   13b70:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   13b72:	4b09      	ldr	r3, [pc, #36]	; (13b98 <arch_switch_to_main_thread+0x28>)
   13b74:	6098      	str	r0, [r3, #8]
{
   13b76:	460d      	mov	r5, r1
   13b78:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   13b7a:	f000 fb05 	bl	14188 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   13b7e:	4620      	mov	r0, r4
   13b80:	f385 8809 	msr	PSP, r5
   13b84:	2100      	movs	r1, #0
   13b86:	b663      	cpsie	if
   13b88:	f381 8811 	msr	BASEPRI, r1
   13b8c:	f3bf 8f6f 	isb	sy
   13b90:	2200      	movs	r2, #0
   13b92:	2300      	movs	r3, #0
   13b94:	f011 f8e6 	bl	24d64 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   13b98:	200027d0 	.word	0x200027d0

00013b9c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   13b9c:	4b04      	ldr	r3, [pc, #16]	; (13bb0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   13b9e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   13ba0:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   13ba2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   13ba4:	d003      	beq.n	13bae <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   13ba6:	4903      	ldr	r1, [pc, #12]	; (13bb4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   13ba8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   13bac:	600a      	str	r2, [r1, #0]

00013bae <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   13bae:	4770      	bx	lr
	ldr r3, =_kernel
   13bb0:	200027d0 	.word	0x200027d0
	ldr r1, =_SCS_ICSR
   13bb4:	e000ed04 	.word	0xe000ed04

00013bb8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   13bb8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   13bbc:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   13bc0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   13bc2:	4672      	mov	r2, lr
	bl z_arm_fault
   13bc4:	f000 f980 	bl	13ec8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   13bc8:	bd01      	pop	{r0, pc}
   13bca:	bf00      	nop

00013bcc <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   13bcc:	2000      	movs	r0, #0
    msr CONTROL, r0
   13bce:	f380 8814 	msr	CONTROL, r0
    isb
   13bd2:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   13bd6:	f014 feaf 	bl	28938 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   13bda:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   13bdc:	4911      	ldr	r1, [pc, #68]	; (13c24 <__start+0x58>)
    str r0, [r1]
   13bde:	6008      	str	r0, [r1, #0]
    dsb
   13be0:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   13be4:	4810      	ldr	r0, [pc, #64]	; (13c28 <__start+0x5c>)
    msr msp, r0
   13be6:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   13bea:	f000 fa7d 	bl	140e8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   13bee:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   13bf0:	f380 8811 	msr	BASEPRI, r0
 * (may be larger due to rounding up for stack pointer aligning
 * purposes but this is sufficient during initialization).
 */

#ifdef CONFIG_INIT_STACKS
    ldr r0, =z_interrupt_stacks
   13bf4:	480d      	ldr	r0, [pc, #52]	; (13c2c <__start+0x60>)
    ldr r1, =0xaa
   13bf6:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   13bfa:	f44f 6202 	mov.w	r2, #2080	; 0x820
    bl memset
   13bfe:	f011 f94a 	bl	24e96 <memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   13c02:	480a      	ldr	r0, [pc, #40]	; (13c2c <__start+0x60>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   13c04:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   13c08:	1840      	adds	r0, r0, r1
    msr PSP, r0
   13c0a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   13c0e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   13c12:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   13c14:	4308      	orrs	r0, r1
    msr CONTROL, r0
   13c16:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   13c1a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   13c1e:	f7ff ff3b 	bl	13a98 <z_arm_prep_c>
   13c22:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   13c24:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   13c28:	20006220 	.word	0x20006220
    ldr r0, =z_interrupt_stacks
   13c2c:	200063a0 	.word	0x200063a0

00013c30 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   13c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13c34:	4b35      	ldr	r3, [pc, #212]	; (13d0c <mem_manage_fault+0xdc>)
   13c36:	4c36      	ldr	r4, [pc, #216]	; (13d10 <mem_manage_fault+0xe0>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   13c38:	4d36      	ldr	r5, [pc, #216]	; (13d14 <mem_manage_fault+0xe4>)
   13c3a:	1ae4      	subs	r4, r4, r3
   13c3c:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   13c3e:	01a4      	lsls	r4, r4, #6
   13c40:	f044 0901 	orr.w	r9, r4, #1
{
   13c44:	4607      	mov	r7, r0
   13c46:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   13c48:	4833      	ldr	r0, [pc, #204]	; (13d18 <mem_manage_fault+0xe8>)
   13c4a:	4649      	mov	r1, r9
{
   13c4c:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   13c4e:	f010 f908 	bl	23e62 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   13c52:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   13c54:	06d3      	lsls	r3, r2, #27
   13c56:	d503      	bpl.n	13c60 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Stacking error (context area might be"
   13c58:	4830      	ldr	r0, [pc, #192]	; (13d1c <mem_manage_fault+0xec>)
   13c5a:	4649      	mov	r1, r9
   13c5c:	f010 f901 	bl	23e62 <log_0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   13c60:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13c62:	0718      	lsls	r0, r3, #28
   13c64:	d504      	bpl.n	13c70 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Unstacking error");
   13c66:	482e      	ldr	r0, [pc, #184]	; (13d20 <mem_manage_fault+0xf0>)
   13c68:	f044 0101 	orr.w	r1, r4, #1
   13c6c:	f010 f8f9 	bl	23e62 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   13c70:	4d28      	ldr	r5, [pc, #160]	; (13d14 <mem_manage_fault+0xe4>)
   13c72:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13c74:	0799      	lsls	r1, r3, #30
   13c76:	d423      	bmi.n	13cc0 <mem_manage_fault+0x90>
	uint32_t mmfar = -EINVAL;
   13c78:	f06f 0915 	mvn.w	r9, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   13c7c:	4d25      	ldr	r5, [pc, #148]	; (13d14 <mem_manage_fault+0xe4>)
   13c7e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   13c80:	07d3      	lsls	r3, r2, #31
   13c82:	d504      	bpl.n	13c8e <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Instruction Access Violation");
   13c84:	4827      	ldr	r0, [pc, #156]	; (13d24 <mem_manage_fault+0xf4>)
   13c86:	f044 0101 	orr.w	r1, r4, #1
   13c8a:	f010 f8ea 	bl	23e62 <log_0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   13c8e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13c90:	0698      	lsls	r0, r3, #26
   13c92:	d504      	bpl.n	13c9e <mem_manage_fault+0x6e>
		PR_FAULT_INFO(
   13c94:	4824      	ldr	r0, [pc, #144]	; (13d28 <mem_manage_fault+0xf8>)
   13c96:	f044 0101 	orr.w	r1, r4, #1
   13c9a:	f010 f8e2 	bl	23e62 <log_0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   13c9e:	4b1d      	ldr	r3, [pc, #116]	; (13d14 <mem_manage_fault+0xe4>)
   13ca0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13ca2:	06d1      	lsls	r1, r2, #27
   13ca4:	d424      	bmi.n	13cf0 <mem_manage_fault+0xc0>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   13ca6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   13ca8:	0792      	lsls	r2, r2, #30
   13caa:	d421      	bmi.n	13cf0 <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   13cac:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   13cae:	4a19      	ldr	r2, [pc, #100]	; (13d14 <mem_manage_fault+0xe4>)
   13cb0:	6a93      	ldr	r3, [r2, #40]	; 0x28
   13cb2:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   13cb6:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   13cb8:	2300      	movs	r3, #0
   13cba:	7033      	strb	r3, [r6, #0]

	return reason;
}
   13cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
   13cc0:	f044 0a01 	orr.w	sl, r4, #1
   13cc4:	4819      	ldr	r0, [pc, #100]	; (13d2c <mem_manage_fault+0xfc>)
   13cc6:	4651      	mov	r1, sl
   13cc8:	f010 f8cb 	bl	23e62 <log_0>
		uint32_t temp = SCB->MMFAR;
   13ccc:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   13cd0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13cd2:	061a      	lsls	r2, r3, #24
   13cd4:	d5d0      	bpl.n	13c78 <mem_manage_fault+0x48>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   13cd6:	4816      	ldr	r0, [pc, #88]	; (13d30 <mem_manage_fault+0x100>)
   13cd8:	4652      	mov	r2, sl
   13cda:	4649      	mov	r1, r9
   13cdc:	f010 f8ce 	bl	23e7c <log_1>
			if (from_hard_fault != 0) {
   13ce0:	f1b8 0f00 	cmp.w	r8, #0
   13ce4:	d0ca      	beq.n	13c7c <mem_manage_fault+0x4c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   13ce6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13ce8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   13cec:	62ab      	str	r3, [r5, #40]	; 0x28
   13cee:	e7c5      	b.n	13c7c <mem_manage_fault+0x4c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   13cf0:	685b      	ldr	r3, [r3, #4]
   13cf2:	051b      	lsls	r3, r3, #20
   13cf4:	d5da      	bpl.n	13cac <mem_manage_fault+0x7c>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   13cf6:	4639      	mov	r1, r7
   13cf8:	4648      	mov	r0, r9
   13cfa:	f7ff ff1f 	bl	13b3c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   13cfe:	2800      	cmp	r0, #0
   13d00:	d0d4      	beq.n	13cac <mem_manage_fault+0x7c>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   13d02:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   13d06:	2002      	movs	r0, #2
   13d08:	e7d1      	b.n	13cae <mem_manage_fault+0x7e>
   13d0a:	bf00      	nop
   13d0c:	00028dd4 	.word	0x00028dd4
   13d10:	00028ec4 	.word	0x00028ec4
   13d14:	e000ed00 	.word	0xe000ed00
   13d18:	0002a353 	.word	0x0002a353
   13d1c:	0002a369 	.word	0x0002a369
   13d20:	0002a39c 	.word	0x0002a39c
   13d24:	0002a3dd 	.word	0x0002a3dd
   13d28:	0002a3fc 	.word	0x0002a3fc
   13d2c:	0002a3af 	.word	0x0002a3af
   13d30:	0002a3c7 	.word	0x0002a3c7

00013d34 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   13d34:	b570      	push	{r4, r5, r6, lr}
   13d36:	4b23      	ldr	r3, [pc, #140]	; (13dc4 <usage_fault.isra.0+0x90>)
   13d38:	4c23      	ldr	r4, [pc, #140]	; (13dc8 <usage_fault.isra.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   13d3a:	4d24      	ldr	r5, [pc, #144]	; (13dcc <usage_fault.isra.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
   13d3c:	4824      	ldr	r0, [pc, #144]	; (13dd0 <usage_fault.isra.0+0x9c>)
   13d3e:	1ae4      	subs	r4, r4, r3
   13d40:	08e4      	lsrs	r4, r4, #3
   13d42:	01a4      	lsls	r4, r4, #6
   13d44:	f044 0601 	orr.w	r6, r4, #1
   13d48:	4631      	mov	r1, r6
   13d4a:	f010 f88a 	bl	23e62 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   13d4e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   13d50:	0193      	lsls	r3, r2, #6
   13d52:	d503      	bpl.n	13d5c <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
   13d54:	481f      	ldr	r0, [pc, #124]	; (13dd4 <usage_fault.isra.0+0xa0>)
   13d56:	4631      	mov	r1, r6
   13d58:	f010 f883 	bl	23e62 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   13d5c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13d5e:	01dd      	lsls	r5, r3, #7
   13d60:	d504      	bpl.n	13d6c <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
   13d62:	481d      	ldr	r0, [pc, #116]	; (13dd8 <usage_fault.isra.0+0xa4>)
   13d64:	f044 0101 	orr.w	r1, r4, #1
   13d68:	f010 f87b 	bl	23e62 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   13d6c:	4d17      	ldr	r5, [pc, #92]	; (13dcc <usage_fault.isra.0+0x98>)
   13d6e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   13d70:	0310      	lsls	r0, r2, #12
   13d72:	d504      	bpl.n	13d7e <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
   13d74:	4819      	ldr	r0, [pc, #100]	; (13ddc <usage_fault.isra.0+0xa8>)
   13d76:	f044 0101 	orr.w	r1, r4, #1
   13d7a:	f010 f872 	bl	23e62 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   13d7e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13d80:	0359      	lsls	r1, r3, #13
   13d82:	d504      	bpl.n	13d8e <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   13d84:	4816      	ldr	r0, [pc, #88]	; (13de0 <usage_fault.isra.0+0xac>)
   13d86:	f044 0101 	orr.w	r1, r4, #1
   13d8a:	f010 f86a 	bl	23e62 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   13d8e:	4d0f      	ldr	r5, [pc, #60]	; (13dcc <usage_fault.isra.0+0x98>)
   13d90:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   13d92:	0392      	lsls	r2, r2, #14
   13d94:	d504      	bpl.n	13da0 <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   13d96:	4813      	ldr	r0, [pc, #76]	; (13de4 <usage_fault.isra.0+0xb0>)
   13d98:	f044 0101 	orr.w	r1, r4, #1
   13d9c:	f010 f861 	bl	23e62 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   13da0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13da2:	03db      	lsls	r3, r3, #15
   13da4:	d504      	bpl.n	13db0 <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   13da6:	4810      	ldr	r0, [pc, #64]	; (13de8 <usage_fault.isra.0+0xb4>)
   13da8:	f044 0101 	orr.w	r1, r4, #1
   13dac:	f010 f859 	bl	23e62 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   13db0:	4a06      	ldr	r2, [pc, #24]	; (13dcc <usage_fault.isra.0+0x98>)
   13db2:	6a93      	ldr	r3, [r2, #40]	; 0x28
   13db4:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   13db8:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   13dbc:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   13dbe:	2000      	movs	r0, #0
   13dc0:	bd70      	pop	{r4, r5, r6, pc}
   13dc2:	bf00      	nop
   13dc4:	00028dd4 	.word	0x00028dd4
   13dc8:	00028ec4 	.word	0x00028ec4
   13dcc:	e000ed00 	.word	0xe000ed00
   13dd0:	0002a42b 	.word	0x0002a42b
   13dd4:	0002a443 	.word	0x0002a443
   13dd8:	0002a456 	.word	0x0002a456
   13ddc:	0002a470 	.word	0x0002a470
   13de0:	0002a48e 	.word	0x0002a48e
   13de4:	0002a4b3 	.word	0x0002a4b3
   13de8:	0002a4cd 	.word	0x0002a4cd

00013dec <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   13dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13df0:	4b2a      	ldr	r3, [pc, #168]	; (13e9c <bus_fault.isra.0+0xb0>)
   13df2:	4c2b      	ldr	r4, [pc, #172]	; (13ea0 <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   13df4:	4d2b      	ldr	r5, [pc, #172]	; (13ea4 <bus_fault.isra.0+0xb8>)
   13df6:	1ae4      	subs	r4, r4, r3
   13df8:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   13dfa:	01a4      	lsls	r4, r4, #6
   13dfc:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   13e00:	4607      	mov	r7, r0
   13e02:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   13e04:	4828      	ldr	r0, [pc, #160]	; (13ea8 <bus_fault.isra.0+0xbc>)
   13e06:	4641      	mov	r1, r8
   13e08:	f010 f82b 	bl	23e62 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   13e0c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   13e0e:	04d1      	lsls	r1, r2, #19
   13e10:	d503      	bpl.n	13e1a <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
   13e12:	4826      	ldr	r0, [pc, #152]	; (13eac <bus_fault.isra.0+0xc0>)
   13e14:	4641      	mov	r1, r8
   13e16:	f010 f824 	bl	23e62 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   13e1a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13e1c:	051a      	lsls	r2, r3, #20
   13e1e:	d504      	bpl.n	13e2a <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   13e20:	4823      	ldr	r0, [pc, #140]	; (13eb0 <bus_fault.isra.0+0xc4>)
   13e22:	f044 0101 	orr.w	r1, r4, #1
   13e26:	f010 f81c 	bl	23e62 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   13e2a:	4d1e      	ldr	r5, [pc, #120]	; (13ea4 <bus_fault.isra.0+0xb8>)
   13e2c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13e2e:	059b      	lsls	r3, r3, #22
   13e30:	d512      	bpl.n	13e58 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
   13e32:	f044 0801 	orr.w	r8, r4, #1
   13e36:	481f      	ldr	r0, [pc, #124]	; (13eb4 <bus_fault.isra.0+0xc8>)
   13e38:	4641      	mov	r1, r8
   13e3a:	f010 f812 	bl	23e62 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   13e3e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   13e40:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13e42:	0418      	lsls	r0, r3, #16
   13e44:	d508      	bpl.n	13e58 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   13e46:	481c      	ldr	r0, [pc, #112]	; (13eb8 <bus_fault.isra.0+0xcc>)
   13e48:	4642      	mov	r2, r8
   13e4a:	f010 f817 	bl	23e7c <log_1>
			if (from_hard_fault != 0) {
   13e4e:	b11f      	cbz	r7, 13e58 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   13e50:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13e52:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   13e56:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   13e58:	4d12      	ldr	r5, [pc, #72]	; (13ea4 <bus_fault.isra.0+0xb8>)
   13e5a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13e5c:	0559      	lsls	r1, r3, #21
   13e5e:	d504      	bpl.n	13e6a <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
   13e60:	4816      	ldr	r0, [pc, #88]	; (13ebc <bus_fault.isra.0+0xd0>)
   13e62:	f044 0101 	orr.w	r1, r4, #1
   13e66:	f00f fffc 	bl	23e62 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   13e6a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13e6c:	05da      	lsls	r2, r3, #23
   13e6e:	d50d      	bpl.n	13e8c <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
   13e70:	4813      	ldr	r0, [pc, #76]	; (13ec0 <bus_fault.isra.0+0xd4>)
   13e72:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   13e76:	f00f fff4 	bl	23e62 <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   13e7a:	4a0a      	ldr	r2, [pc, #40]	; (13ea4 <bus_fault.isra.0+0xb8>)
   13e7c:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   13e7e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   13e80:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   13e84:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   13e86:	7030      	strb	r0, [r6, #0]
}
   13e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   13e8c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13e8e:	049b      	lsls	r3, r3, #18
   13e90:	d5f3      	bpl.n	13e7a <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   13e92:	480c      	ldr	r0, [pc, #48]	; (13ec4 <bus_fault.isra.0+0xd8>)
   13e94:	f044 0101 	orr.w	r1, r4, #1
   13e98:	e7ed      	b.n	13e76 <bus_fault.isra.0+0x8a>
   13e9a:	bf00      	nop
   13e9c:	00028dd4 	.word	0x00028dd4
   13ea0:	00028ec4 	.word	0x00028ec4
   13ea4:	e000ed00 	.word	0xe000ed00
   13ea8:	0002a4f8 	.word	0x0002a4f8
   13eac:	0002a50e 	.word	0x0002a50e
   13eb0:	0002a39c 	.word	0x0002a39c
   13eb4:	0002a51f 	.word	0x0002a51f
   13eb8:	0002a538 	.word	0x0002a538
   13ebc:	0002a54d 	.word	0x0002a54d
   13ec0:	0002a568 	.word	0x0002a568
   13ec4:	0002a3fc 	.word	0x0002a3fc

00013ec8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   13ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   13ecc:	4b65      	ldr	r3, [pc, #404]	; (14064 <z_arm_fault+0x19c>)
   13ece:	685e      	ldr	r6, [r3, #4]
{
   13ed0:	b08a      	sub	sp, #40	; 0x28
   13ed2:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   13ed4:	f3c6 0408 	ubfx	r4, r6, #0, #9
   13ed8:	2700      	movs	r7, #0
   13eda:	f387 8811 	msr	BASEPRI, r7
   13ede:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   13ee2:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   13ee6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   13eea:	d10d      	bne.n	13f08 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   13eec:	f002 030c 	and.w	r3, r2, #12
   13ef0:	2b08      	cmp	r3, #8
   13ef2:	d10b      	bne.n	13f0c <z_arm_fault+0x44>
   13ef4:	495c      	ldr	r1, [pc, #368]	; (14068 <z_arm_fault+0x1a0>)
   13ef6:	4b5d      	ldr	r3, [pc, #372]	; (1406c <z_arm_fault+0x1a4>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   13ef8:	485d      	ldr	r0, [pc, #372]	; (14070 <z_arm_fault+0x1a8>)
   13efa:	1ac9      	subs	r1, r1, r3
   13efc:	08c9      	lsrs	r1, r1, #3
   13efe:	0189      	lsls	r1, r1, #6
   13f00:	f041 0101 	orr.w	r1, r1, #1
   13f04:	f00f ffad 	bl	23e62 <log_0>
		return NULL;
   13f08:	463d      	mov	r5, r7
   13f0a:	e003      	b.n	13f14 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   13f0c:	0712      	lsls	r2, r2, #28
   13f0e:	d401      	bmi.n	13f14 <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
   13f10:	4605      	mov	r5, r0
			*nested_exc = true;
   13f12:	2701      	movs	r7, #1
	*recoverable = false;
   13f14:	2300      	movs	r3, #0
   13f16:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   13f1a:	1ee3      	subs	r3, r4, #3
   13f1c:	2b09      	cmp	r3, #9
   13f1e:	f200 8087 	bhi.w	14030 <z_arm_fault+0x168>
   13f22:	e8df f003 	tbb	[pc, r3]
   13f26:	7405      	.short	0x7405
   13f28:	85857178 	.word	0x85857178
   13f2c:	7c858585 	.word	0x7c858585
   13f30:	4a4e      	ldr	r2, [pc, #312]	; (1406c <z_arm_fault+0x1a4>)
   13f32:	4e4d      	ldr	r6, [pc, #308]	; (14068 <z_arm_fault+0x1a0>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   13f34:	484f      	ldr	r0, [pc, #316]	; (14074 <z_arm_fault+0x1ac>)
   13f36:	1ab6      	subs	r6, r6, r2
   13f38:	08f6      	lsrs	r6, r6, #3
   13f3a:	01b6      	lsls	r6, r6, #6
   13f3c:	f046 0601 	orr.w	r6, r6, #1
   13f40:	4631      	mov	r1, r6
   13f42:	f00f ff8e 	bl	23e62 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   13f46:	4b47      	ldr	r3, [pc, #284]	; (14064 <z_arm_fault+0x19c>)
   13f48:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
   13f4a:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   13f4e:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
   13f52:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   13f56:	d005      	beq.n	13f64 <z_arm_fault+0x9c>
		PR_EXC("  Bus fault on vector table read");
   13f58:	4847      	ldr	r0, [pc, #284]	; (14078 <z_arm_fault+0x1b0>)
   13f5a:	4631      	mov	r1, r6
	PR_FAULT_INFO(
   13f5c:	f00f ff81 	bl	23e62 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   13f60:	2400      	movs	r4, #0
}
   13f62:	e006      	b.n	13f72 <z_arm_fault+0xaa>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   13f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   13f66:	2a00      	cmp	r2, #0
   13f68:	da1d      	bge.n	13fa6 <z_arm_fault+0xde>
		PR_EXC("  Debug event");
   13f6a:	4844      	ldr	r0, [pc, #272]	; (1407c <z_arm_fault+0x1b4>)
   13f6c:	4631      	mov	r1, r6
   13f6e:	f00f ff78 	bl	23e62 <log_0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   13f72:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13f76:	b99b      	cbnz	r3, 13fa0 <z_arm_fault+0xd8>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   13f78:	2220      	movs	r2, #32
   13f7a:	4629      	mov	r1, r5
   13f7c:	a802      	add	r0, sp, #8
   13f7e:	f010 ff7f 	bl	24e80 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   13f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13f84:	2f00      	cmp	r7, #0
   13f86:	d067      	beq.n	14058 <z_arm_fault+0x190>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   13f88:	f3c3 0208 	ubfx	r2, r3, #0, #9
   13f8c:	b922      	cbnz	r2, 13f98 <z_arm_fault+0xd0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   13f8e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   13f92:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   13f96:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   13f98:	a902      	add	r1, sp, #8
   13f9a:	4620      	mov	r0, r4
   13f9c:	f7ff fcea 	bl	13974 <z_arm_fatal_error>
}
   13fa0:	b00a      	add	sp, #40	; 0x28
   13fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   13fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   13fa8:	005b      	lsls	r3, r3, #1
   13faa:	d5e2      	bpl.n	13f72 <z_arm_fault+0xaa>
		PR_EXC("  Fault escalation (see below)");
   13fac:	4834      	ldr	r0, [pc, #208]	; (14080 <z_arm_fault+0x1b8>)
   13fae:	4631      	mov	r1, r6
   13fb0:	f00f ff57 	bl	23e62 <log_0>
	uint16_t fault_insn = *(ret_addr - 1);
   13fb4:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   13fb6:	f833 2c02 	ldrh.w	r2, [r3, #-2]
   13fba:	f64d 7302 	movw	r3, #57090	; 0xdf02
   13fbe:	429a      	cmp	r2, r3
   13fc0:	d00d      	beq.n	13fde <z_arm_fault+0x116>
		} else if (SCB_MMFSR != 0) {
   13fc2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   13fc6:	f603 6326 	addw	r3, r3, #3622	; 0xe26
   13fca:	781b      	ldrb	r3, [r3, #0]
   13fcc:	b173      	cbz	r3, 13fec <z_arm_fault+0x124>
			reason = mem_manage_fault(esf, 1, recoverable);
   13fce:	f10d 0207 	add.w	r2, sp, #7
   13fd2:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   13fd4:	4628      	mov	r0, r5
   13fd6:	f7ff fe2b 	bl	13c30 <mem_manage_fault>
   13fda:	4604      	mov	r4, r0
		break;
   13fdc:	e7c9      	b.n	13f72 <z_arm_fault+0xaa>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   13fde:	6829      	ldr	r1, [r5, #0]
   13fe0:	4828      	ldr	r0, [pc, #160]	; (14084 <z_arm_fault+0x1bc>)
   13fe2:	4632      	mov	r2, r6
   13fe4:	f00f ff4a 	bl	23e7c <log_1>
			reason = esf->basic.r0;
   13fe8:	682c      	ldr	r4, [r5, #0]
   13fea:	e7c2      	b.n	13f72 <z_arm_fault+0xaa>
		} else if (SCB_BFSR != 0) {
   13fec:	4b26      	ldr	r3, [pc, #152]	; (14088 <z_arm_fault+0x1c0>)
   13fee:	781b      	ldrb	r3, [r3, #0]
   13ff0:	b12b      	cbz	r3, 13ffe <z_arm_fault+0x136>
			reason = bus_fault(esf, 1, recoverable);
   13ff2:	f10d 0107 	add.w	r1, sp, #7
   13ff6:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   13ff8:	f7ff fef8 	bl	13dec <bus_fault.isra.0>
   13ffc:	e7ed      	b.n	13fda <z_arm_fault+0x112>
		} else if (SCB_UFSR != 0) {
   13ffe:	4b23      	ldr	r3, [pc, #140]	; (1408c <z_arm_fault+0x1c4>)
   14000:	881b      	ldrh	r3, [r3, #0]
   14002:	b29b      	uxth	r3, r3
   14004:	2b00      	cmp	r3, #0
   14006:	d0b4      	beq.n	13f72 <z_arm_fault+0xaa>
		reason = usage_fault(esf);
   14008:	f7ff fe94 	bl	13d34 <usage_fault.isra.0>
   1400c:	e7e5      	b.n	13fda <z_arm_fault+0x112>
		reason = mem_manage_fault(esf, 0, recoverable);
   1400e:	f10d 0207 	add.w	r2, sp, #7
   14012:	2100      	movs	r1, #0
   14014:	e7de      	b.n	13fd4 <z_arm_fault+0x10c>
		reason = bus_fault(esf, 0, recoverable);
   14016:	f10d 0107 	add.w	r1, sp, #7
   1401a:	2000      	movs	r0, #0
   1401c:	e7ec      	b.n	13ff8 <z_arm_fault+0x130>
   1401e:	4912      	ldr	r1, [pc, #72]	; (14068 <z_arm_fault+0x1a0>)
   14020:	4b12      	ldr	r3, [pc, #72]	; (1406c <z_arm_fault+0x1a4>)
	PR_FAULT_INFO(
   14022:	481b      	ldr	r0, [pc, #108]	; (14090 <z_arm_fault+0x1c8>)
   14024:	1ac9      	subs	r1, r1, r3
   14026:	08c9      	lsrs	r1, r1, #3
   14028:	0189      	lsls	r1, r1, #6
   1402a:	f041 0101 	orr.w	r1, r1, #1
   1402e:	e795      	b.n	13f5c <z_arm_fault+0x94>
   14030:	4a0e      	ldr	r2, [pc, #56]	; (1406c <z_arm_fault+0x1a4>)
   14032:	4b0d      	ldr	r3, [pc, #52]	; (14068 <z_arm_fault+0x1a0>)
	PR_FAULT_INFO("***** %s %d) *****",
   14034:	4817      	ldr	r0, [pc, #92]	; (14094 <z_arm_fault+0x1cc>)
   14036:	4918      	ldr	r1, [pc, #96]	; (14098 <z_arm_fault+0x1d0>)
   14038:	1a9b      	subs	r3, r3, r2
   1403a:	08db      	lsrs	r3, r3, #3
   1403c:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
   14040:	ea4f 1383 	mov.w	r3, r3, lsl #6
   14044:	bf18      	it	ne
   14046:	4601      	movne	r1, r0
   14048:	f043 0301 	orr.w	r3, r3, #1
   1404c:	4813      	ldr	r0, [pc, #76]	; (1409c <z_arm_fault+0x1d4>)
   1404e:	f1a4 0210 	sub.w	r2, r4, #16
   14052:	f00f ff27 	bl	23ea4 <log_2>
   14056:	e783      	b.n	13f60 <z_arm_fault+0x98>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   14058:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   1405c:	f023 0301 	bic.w	r3, r3, #1
   14060:	e799      	b.n	13f96 <z_arm_fault+0xce>
   14062:	bf00      	nop
   14064:	e000ed00 	.word	0xe000ed00
   14068:	00028ec4 	.word	0x00028ec4
   1406c:	00028dd4 	.word	0x00028dd4
   14070:	0002a580 	.word	0x0002a580
   14074:	0002a5ab 	.word	0x0002a5ab
   14078:	0002a5c2 	.word	0x0002a5c2
   1407c:	0002a5e3 	.word	0x0002a5e3
   14080:	0002a5f1 	.word	0x0002a5f1
   14084:	0002a610 	.word	0x0002a610
   14088:	e000ed29 	.word	0xe000ed29
   1408c:	e000ed2a 	.word	0xe000ed2a
   14090:	0002a62c 	.word	0x0002a62c
   14094:	0002a665 	.word	0x0002a665
   14098:	0002a650 	.word	0x0002a650
   1409c:	0002a67e 	.word	0x0002a67e

000140a0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   140a0:	4a02      	ldr	r2, [pc, #8]	; (140ac <z_arm_fault_init+0xc>)
   140a2:	6953      	ldr	r3, [r2, #20]
   140a4:	f043 0310 	orr.w	r3, r3, #16
   140a8:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   140aa:	4770      	bx	lr
   140ac:	e000ed00 	.word	0xe000ed00

000140b0 <z_arm_interrupt_init>:
   140b0:	4804      	ldr	r0, [pc, #16]	; (140c4 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   140b2:	2300      	movs	r3, #0
   140b4:	2140      	movs	r1, #64	; 0x40
   140b6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   140b8:	3301      	adds	r3, #1
   140ba:	2b27      	cmp	r3, #39	; 0x27
   140bc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   140c0:	d1f9      	bne.n	140b6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   140c2:	4770      	bx	lr
   140c4:	e000e100 	.word	0xe000e100

000140c8 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   140c8:	4a06      	ldr	r2, [pc, #24]	; (140e4 <z_arm_clear_arm_mpu_config+0x1c>)
   140ca:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
   140cc:	2300      	movs	r3, #0
	int num_regions =
   140ce:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   140d2:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   140d4:	428b      	cmp	r3, r1
   140d6:	d100      	bne.n	140da <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
   140d8:	4770      	bx	lr
  MPU->RNR = rnr;
   140da:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   140dc:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
   140de:	3301      	adds	r3, #1
   140e0:	e7f8      	b.n	140d4 <z_arm_clear_arm_mpu_config+0xc>
   140e2:	bf00      	nop
   140e4:	e000ed90 	.word	0xe000ed90

000140e8 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   140e8:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   140ea:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   140ec:	2300      	movs	r3, #0
   140ee:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   140f2:	f7ff ffe9 	bl	140c8 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   140f6:	4b14      	ldr	r3, [pc, #80]	; (14148 <z_arm_init_arch_hw_at_boot+0x60>)
   140f8:	f04f 32ff 	mov.w	r2, #4294967295
   140fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   14100:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   14104:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   14108:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   1410c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   14110:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   14114:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   14118:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   1411c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   14120:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   14124:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   14128:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   1412c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   14130:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   14134:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   14138:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   1413c:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   1413e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14142:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   14146:	bd08      	pop	{r3, pc}
   14148:	e000e100 	.word	0xe000e100

0001414c <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   1414c:	4b06      	ldr	r3, [pc, #24]	; (14168 <z_impl_k_thread_abort+0x1c>)
   1414e:	689b      	ldr	r3, [r3, #8]
   14150:	4283      	cmp	r3, r0
   14152:	d107      	bne.n	14164 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   14154:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   14158:	b123      	cbz	r3, 14164 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1415a:	4a04      	ldr	r2, [pc, #16]	; (1416c <z_impl_k_thread_abort+0x20>)
   1415c:	6853      	ldr	r3, [r2, #4]
   1415e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   14162:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   14164:	f00d bc68 	b.w	21a38 <z_thread_abort>
   14168:	200027d0 	.word	0x200027d0
   1416c:	e000ed00 	.word	0xe000ed00

00014170 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   14170:	4b02      	ldr	r3, [pc, #8]	; (1417c <z_arm_configure_static_mpu_regions+0xc>)
   14172:	4a03      	ldr	r2, [pc, #12]	; (14180 <z_arm_configure_static_mpu_regions+0x10>)
   14174:	4803      	ldr	r0, [pc, #12]	; (14184 <z_arm_configure_static_mpu_regions+0x14>)
   14176:	2101      	movs	r1, #1
   14178:	f000 b884 	b.w	14284 <arm_core_mpu_configure_static_mpu_regions>
   1417c:	20010000 	.word	0x20010000
   14180:	20000000 	.word	0x20000000
   14184:	00029400 	.word	0x00029400

00014188 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   14188:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   1418a:	4b05      	ldr	r3, [pc, #20]	; (141a0 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   1418c:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
   1418e:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   14190:	4a04      	ldr	r2, [pc, #16]	; (141a4 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   14192:	2120      	movs	r1, #32
   14194:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   14198:	4618      	mov	r0, r3
   1419a:	2101      	movs	r1, #1
   1419c:	f000 b87c 	b.w	14298 <arm_core_mpu_configure_dynamic_mpu_regions>
   141a0:	200023e8 	.word	0x200023e8
   141a4:	150b0000 	.word	0x150b0000

000141a8 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   141a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   141aa:	4f28      	ldr	r7, [pc, #160]	; (1424c <mpu_configure_regions+0xa4>)
   141ac:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   141ae:	2100      	movs	r1, #0
   141b0:	42b1      	cmp	r1, r6
   141b2:	da14      	bge.n	141de <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
   141b4:	6844      	ldr	r4, [r0, #4]
   141b6:	2c00      	cmp	r4, #0
   141b8:	d045      	beq.n	14246 <mpu_configure_regions+0x9e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   141ba:	b1c3      	cbz	r3, 141ee <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   141bc:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   141c0:	ea14 0f0c 	tst.w	r4, ip
   141c4:	d00d      	beq.n	141e2 <mpu_configure_regions+0x3a>
   141c6:	4a22      	ldr	r2, [pc, #136]	; (14250 <mpu_configure_regions+0xa8>)
   141c8:	4b22      	ldr	r3, [pc, #136]	; (14254 <mpu_configure_regions+0xac>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   141ca:	4823      	ldr	r0, [pc, #140]	; (14258 <mpu_configure_regions+0xb0>)
   141cc:	1ad2      	subs	r2, r2, r3
   141ce:	08d2      	lsrs	r2, r2, #3
   141d0:	0192      	lsls	r2, r2, #6
   141d2:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   141d6:	f00f fe51 	bl	23e7c <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   141da:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   141de:	4610      	mov	r0, r2
   141e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
   141e2:	2c1f      	cmp	r4, #31
   141e4:	d9ef      	bls.n	141c6 <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
   141e6:	6805      	ldr	r5, [r0, #0]
		&&
   141e8:	ea1c 0f05 	tst.w	ip, r5
   141ec:	d1eb      	bne.n	141c6 <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   141ee:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   141f0:	b2d5      	uxtb	r5, r2
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   141f2:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
   141f6:	6802      	ldr	r2, [r0, #0]
   141f8:	d916      	bls.n	14228 <mpu_configure_regions+0x80>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
   141fa:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   141fe:	d815      	bhi.n	1422c <mpu_configure_regions+0x84>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   14200:	3c01      	subs	r4, #1
   14202:	fab4 f484 	clz	r4, r4
   14206:	f1c4 041f 	rsb	r4, r4, #31
   1420a:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   1420c:	2d07      	cmp	r5, #7
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   1420e:	ea4c 0404 	orr.w	r4, ip, r4
   14212:	d90d      	bls.n	14230 <mpu_configure_regions+0x88>
   14214:	4a0e      	ldr	r2, [pc, #56]	; (14250 <mpu_configure_regions+0xa8>)
   14216:	4b0f      	ldr	r3, [pc, #60]	; (14254 <mpu_configure_regions+0xac>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   14218:	4810      	ldr	r0, [pc, #64]	; (1425c <mpu_configure_regions+0xb4>)
   1421a:	1ad2      	subs	r2, r2, r3
   1421c:	08d2      	lsrs	r2, r2, #3
   1421e:	0192      	lsls	r2, r2, #6
   14220:	f042 0201 	orr.w	r2, r2, #1
   14224:	4629      	mov	r1, r5
   14226:	e7d6      	b.n	141d6 <mpu_configure_regions+0x2e>
		return REGION_32B;
   14228:	2408      	movs	r4, #8
   1422a:	e7ef      	b.n	1420c <mpu_configure_regions+0x64>
		return REGION_4G;
   1422c:	243e      	movs	r4, #62	; 0x3e
   1422e:	e7ed      	b.n	1420c <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14230:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
   14234:	432a      	orrs	r2, r5
   14236:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   1423a:	f044 0401 	orr.w	r4, r4, #1
   1423e:	60bd      	str	r5, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14240:	60fa      	str	r2, [r7, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   14242:	613c      	str	r4, [r7, #16]
		reg_index++;
   14244:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
   14246:	3101      	adds	r1, #1
   14248:	300c      	adds	r0, #12
   1424a:	e7b1      	b.n	141b0 <mpu_configure_regions+0x8>
   1424c:	e000ed90 	.word	0xe000ed90
   14250:	00028eb4 	.word	0x00028eb4
   14254:	00028dd4 	.word	0x00028dd4
   14258:	0002a695 	.word	0x0002a695
   1425c:	0002a6b8 	.word	0x0002a6b8

00014260 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   14260:	4b03      	ldr	r3, [pc, #12]	; (14270 <arm_core_mpu_enable+0x10>)
   14262:	2205      	movs	r2, #5
   14264:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   14266:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1426a:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   1426e:	4770      	bx	lr
   14270:	e000ed90 	.word	0xe000ed90

00014274 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   14274:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   14278:	4b01      	ldr	r3, [pc, #4]	; (14280 <arm_core_mpu_disable+0xc>)
   1427a:	2200      	movs	r2, #0
   1427c:	605a      	str	r2, [r3, #4]
}
   1427e:	4770      	bx	lr
   14280:	e000ed90 	.word	0xe000ed90

00014284 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   14284:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   14286:	4c03      	ldr	r4, [pc, #12]	; (14294 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   14288:	2301      	movs	r3, #1
   1428a:	7822      	ldrb	r2, [r4, #0]
   1428c:	f7ff ff8c 	bl	141a8 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   14290:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   14292:	bd10      	pop	{r4, pc}
   14294:	2000285f 	.word	0x2000285f

00014298 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   14298:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   1429a:	4a08      	ldr	r2, [pc, #32]	; (142bc <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
   1429c:	2300      	movs	r3, #0
   1429e:	7812      	ldrb	r2, [r2, #0]
   142a0:	f7ff ff82 	bl	141a8 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   142a4:	f110 0f16 	cmn.w	r0, #22
   142a8:	d003      	beq.n	142b2 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
   142aa:	4b05      	ldr	r3, [pc, #20]	; (142c0 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
   142ac:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   142ae:	2807      	cmp	r0, #7
   142b0:	dd00      	ble.n	142b4 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   142b2:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
   142b4:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
   142b6:	611a      	str	r2, [r3, #16]
   142b8:	3001      	adds	r0, #1
   142ba:	e7f8      	b.n	142ae <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
   142bc:	2000285f 	.word	0x2000285f
   142c0:	e000ed90 	.word	0xe000ed90

000142c4 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   142c4:	4913      	ldr	r1, [pc, #76]	; (14314 <z_arm_mpu_init+0x50>)
   142c6:	6808      	ldr	r0, [r1, #0]
   142c8:	2808      	cmp	r0, #8
{
   142ca:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   142cc:	d81e      	bhi.n	1430c <z_arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   142ce:	f7ff ffd1 	bl	14274 <arm_core_mpu_disable>
   142d2:	4c11      	ldr	r4, [pc, #68]	; (14318 <z_arm_mpu_init+0x54>)
   142d4:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   142d6:	2200      	movs	r2, #0
   142d8:	4290      	cmp	r0, r2
   142da:	f101 010c 	add.w	r1, r1, #12
   142de:	d105      	bne.n	142ec <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   142e0:	4b0e      	ldr	r3, [pc, #56]	; (1431c <z_arm_mpu_init+0x58>)
   142e2:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   142e4:	f7ff ffbc 	bl	14260 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   142e8:	2000      	movs	r0, #0
}
   142ea:	bd10      	pop	{r4, pc}
   142ec:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   142ee:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   142f2:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   142f6:	4313      	orrs	r3, r2
   142f8:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   142fc:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   142fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
   14302:	f043 0301 	orr.w	r3, r3, #1
   14306:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   14308:	3201      	adds	r2, #1
   1430a:	e7e5      	b.n	142d8 <z_arm_mpu_init+0x14>
		return -1;
   1430c:	f04f 30ff 	mov.w	r0, #4294967295
   14310:	e7eb      	b.n	142ea <z_arm_mpu_init+0x26>
   14312:	bf00      	nop
   14314:	0002940c 	.word	0x0002940c
   14318:	e000ed90 	.word	0xe000ed90
   1431c:	2000285f 	.word	0x2000285f

00014320 <printf>:

	return r;
}

int printf(const char *ZRESTRICT format, ...)
{
   14320:	b40f      	push	{r0, r1, r2, r3}
   14322:	b507      	push	{r0, r1, r2, lr}
   14324:	ab04      	add	r3, sp, #16
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
   14326:	2102      	movs	r1, #2
{
   14328:	f853 2b04 	ldr.w	r2, [r3], #4
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
   1432c:	4804      	ldr	r0, [pc, #16]	; (14340 <printf+0x20>)
	va_start(vargs, format);
   1432e:	9301      	str	r3, [sp, #4]
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
   14330:	f7fc fc5e 	bl	10bf0 <cbvprintf>
	va_end(vargs);

	return r;
}
   14334:	b003      	add	sp, #12
   14336:	f85d eb04 	ldr.w	lr, [sp], #4
   1433a:	b004      	add	sp, #16
   1433c:	4770      	bx	lr
   1433e:	bf00      	nop
   14340:	00024dcd 	.word	0x00024dcd

00014344 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   14344:	4b01      	ldr	r3, [pc, #4]	; (1434c <__stdout_hook_install+0x8>)
   14346:	6018      	str	r0, [r3, #0]
}
   14348:	4770      	bx	lr
   1434a:	bf00      	nop
   1434c:	20000584 	.word	0x20000584

00014350 <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
   14350:	3902      	subs	r1, #2
   14352:	2901      	cmp	r1, #1
   14354:	d802      	bhi.n	1435c <z_impl_zephyr_fputc+0xc>
   14356:	4b03      	ldr	r3, [pc, #12]	; (14364 <z_impl_zephyr_fputc+0x14>)
   14358:	681b      	ldr	r3, [r3, #0]
   1435a:	4718      	bx	r3
}
   1435c:	f04f 30ff 	mov.w	r0, #4294967295
   14360:	4770      	bx	lr
   14362:	bf00      	nop
   14364:	20000584 	.word	0x20000584

00014368 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   14368:	f04f 0240 	mov.w	r2, #64	; 0x40
   1436c:	f3ef 8311 	mrs	r3, BASEPRI
   14370:	f382 8812 	msr	BASEPRI_MAX, r2
   14374:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   14378:	4a04      	ldr	r2, [pc, #16]	; (1438c <nordicsemi_nrf52_init+0x24>)
   1437a:	2101      	movs	r1, #1
   1437c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   14380:	f383 8811 	msr	BASEPRI, r3
   14384:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   14388:	2000      	movs	r0, #0
   1438a:	4770      	bx	lr
   1438c:	4001e000 	.word	0x4001e000

00014390 <sys_arch_reboot>:
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
   14390:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14394:	b2c0      	uxtb	r0, r0
   14396:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   1439a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1439e:	4905      	ldr	r1, [pc, #20]	; (143b4 <sys_arch_reboot+0x24>)
   143a0:	4b05      	ldr	r3, [pc, #20]	; (143b8 <sys_arch_reboot+0x28>)
   143a2:	68ca      	ldr	r2, [r1, #12]
   143a4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   143a8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   143aa:	60cb      	str	r3, [r1, #12]
   143ac:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   143b0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   143b2:	e7fd      	b.n	143b0 <sys_arch_reboot+0x20>
   143b4:	e000ed00 	.word	0xe000ed00
   143b8:	05fa0004 	.word	0x05fa0004

000143bc <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   143bc:	b120      	cbz	r0, 143c8 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   143be:	4b03      	ldr	r3, [pc, #12]	; (143cc <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   143c0:	0180      	lsls	r0, r0, #6
   143c2:	f043 0301 	orr.w	r3, r3, #1
   143c6:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   143c8:	4770      	bx	lr
   143ca:	bf00      	nop
   143cc:	00029080 	.word	0x00029080

000143d0 <pwr_ctrl_init>:
	const char *port;
	uint32_t pin;
};

static int pwr_ctrl_init(const struct device *dev)
{
   143d0:	b538      	push	{r3, r4, r5, lr}
	const struct pwr_ctrl_cfg *cfg = dev->config;
   143d2:	6844      	ldr	r4, [r0, #4]
	const struct device *gpio;

	gpio = device_get_binding(cfg->port);
   143d4:	6820      	ldr	r0, [r4, #0]
   143d6:	f00c fcc9 	bl	20d6c <z_impl_device_get_binding>
	if (!gpio) {
   143da:	b930      	cbnz	r0, 143ea <pwr_ctrl_init+0x1a>
		printk("Could not bind device \"%s\"\n", cfg->port);
   143dc:	480d      	ldr	r0, [pc, #52]	; (14414 <pwr_ctrl_init+0x44>)
   143de:	6821      	ldr	r1, [r4, #0]
   143e0:	f010 fbae 	bl	24b40 <printk>
		return -ENODEV;
   143e4:	f06f 0012 	mvn.w	r0, #18
	gpio_pin_configure(gpio, cfg->pin, GPIO_OUTPUT_HIGH);

	k_sleep(K_MSEC(1)); /* Wait for the rail to come up and stabilize */

	return 0;
}
   143e8:	bd38      	pop	{r3, r4, r5, pc}
	gpio_pin_configure(gpio, cfg->pin, GPIO_OUTPUT_HIGH);
   143ea:	6861      	ldr	r1, [r4, #4]
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
   143ec:	6904      	ldr	r4, [r0, #16]
	const struct gpio_driver_api *api =
   143ee:	6885      	ldr	r5, [r0, #8]
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   143f0:	b2c9      	uxtb	r1, r1
   143f2:	2301      	movs	r3, #1
   143f4:	fa03 f201 	lsl.w	r2, r3, r1
   143f8:	6823      	ldr	r3, [r4, #0]
   143fa:	ea23 0302 	bic.w	r3, r3, r2
   143fe:	6023      	str	r3, [r4, #0]
	}

	return api->pin_configure(port, pin, flags);
   14400:	f44f 6220 	mov.w	r2, #2560	; 0xa00
   14404:	682b      	ldr	r3, [r5, #0]
   14406:	4798      	blx	r3
	return z_impl_k_sleep(timeout);
   14408:	2021      	movs	r0, #33	; 0x21
   1440a:	2100      	movs	r1, #0
   1440c:	f00d fae4 	bl	219d8 <z_impl_k_sleep>
	return 0;
   14410:	2000      	movs	r0, #0
   14412:	e7e9      	b.n	143e8 <pwr_ctrl_init+0x18>
   14414:	0002a6f1 	.word	0x0002a6f1

00014418 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   14418:	4b0e      	ldr	r3, [pc, #56]	; (14454 <bt_hex_real+0x3c>)
   1441a:	2940      	cmp	r1, #64	; 0x40
{
   1441c:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   1441e:	bf28      	it	cs
   14420:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
   14422:	4c0d      	ldr	r4, [pc, #52]	; (14458 <bt_hex_real+0x40>)
   14424:	1846      	adds	r6, r0, r1
   14426:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   14428:	42b0      	cmp	r0, r6
   1442a:	f103 0302 	add.w	r3, r3, #2
   1442e:	d104      	bne.n	1443a <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   14430:	2300      	movs	r3, #0
   14432:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   14436:	4807      	ldr	r0, [pc, #28]	; (14454 <bt_hex_real+0x3c>)
   14438:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
   1443a:	7802      	ldrb	r2, [r0, #0]
   1443c:	0912      	lsrs	r2, r2, #4
   1443e:	5ca2      	ldrb	r2, [r4, r2]
   14440:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   14444:	f810 2b01 	ldrb.w	r2, [r0], #1
   14448:	f002 020f 	and.w	r2, r2, #15
   1444c:	5ca2      	ldrb	r2, [r4, r2]
   1444e:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   14452:	e7e9      	b.n	14428 <bt_hex_real+0x10>
   14454:	20002860 	.word	0x20002860
   14458:	0002a714 	.word	0x0002a714

0001445c <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
   1445c:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   1445e:	7803      	ldrb	r3, [r0, #0]
   14460:	b08b      	sub	sp, #44	; 0x2c
   14462:	4604      	mov	r4, r0
   14464:	ad07      	add	r5, sp, #28
   14466:	2b03      	cmp	r3, #3
   14468:	d821      	bhi.n	144ae <bt_addr_le_str_real+0x52>
   1446a:	e8df f003 	tbb	[pc, r3]
   1446e:	1a02      	.short	0x1a02
   14470:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   14472:	4912      	ldr	r1, [pc, #72]	; (144bc <bt_addr_le_str_real+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   14474:	4628      	mov	r0, r5
   14476:	f010 fcab 	bl	24dd0 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   1447a:	7863      	ldrb	r3, [r4, #1]
   1447c:	9304      	str	r3, [sp, #16]
   1447e:	78a3      	ldrb	r3, [r4, #2]
   14480:	9303      	str	r3, [sp, #12]
   14482:	78e3      	ldrb	r3, [r4, #3]
   14484:	9302      	str	r3, [sp, #8]
   14486:	7923      	ldrb	r3, [r4, #4]
   14488:	9301      	str	r3, [sp, #4]
   1448a:	7963      	ldrb	r3, [r4, #5]
   1448c:	9300      	str	r3, [sp, #0]
   1448e:	4a0c      	ldr	r2, [pc, #48]	; (144c0 <bt_addr_le_str_real+0x64>)
   14490:	79a3      	ldrb	r3, [r4, #6]
   14492:	9505      	str	r5, [sp, #20]
   14494:	211e      	movs	r1, #30
   14496:	480b      	ldr	r0, [pc, #44]	; (144c4 <bt_addr_le_str_real+0x68>)
   14498:	f010 fb5f 	bl	24b5a <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   1449c:	4809      	ldr	r0, [pc, #36]	; (144c4 <bt_addr_le_str_real+0x68>)
   1449e:	b00b      	add	sp, #44	; 0x2c
   144a0:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   144a2:	4909      	ldr	r1, [pc, #36]	; (144c8 <bt_addr_le_str_real+0x6c>)
   144a4:	e7e6      	b.n	14474 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
   144a6:	4909      	ldr	r1, [pc, #36]	; (144cc <bt_addr_le_str_real+0x70>)
   144a8:	e7e4      	b.n	14474 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
   144aa:	4909      	ldr	r1, [pc, #36]	; (144d0 <bt_addr_le_str_real+0x74>)
   144ac:	e7e2      	b.n	14474 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   144ae:	4a09      	ldr	r2, [pc, #36]	; (144d4 <bt_addr_le_str_real+0x78>)
   144b0:	210a      	movs	r1, #10
   144b2:	4628      	mov	r0, r5
   144b4:	f010 fb51 	bl	24b5a <snprintk>
		break;
   144b8:	e7df      	b.n	1447a <bt_addr_le_str_real+0x1e>
   144ba:	bf00      	nop
   144bc:	00029ca6 	.word	0x00029ca6
   144c0:	00029cc8 	.word	0x00029cc8
   144c4:	200028e1 	.word	0x200028e1
   144c8:	00029cad 	.word	0x00029cad
   144cc:	00029cb4 	.word	0x00029cb4
   144d0:	00029cbe 	.word	0x00029cbe
   144d4:	0002c017 	.word	0x0002c017

000144d8 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   144d8:	6843      	ldr	r3, [r0, #4]
{
   144da:	b537      	push	{r0, r1, r2, r4, r5, lr}
   144dc:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   144de:	0558      	lsls	r0, r3, #21
   144e0:	d502      	bpl.n	144e8 <valid_adv_param+0x10>
		return false;
   144e2:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
   144e4:	b003      	add	sp, #12
   144e6:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   144e8:	6922      	ldr	r2, [r4, #16]
   144ea:	b12a      	cbz	r2, 144f8 <valid_adv_param+0x20>
   144ec:	07d9      	lsls	r1, r3, #31
   144ee:	d5f8      	bpl.n	144e2 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_USE_IDENTITY) &&
   144f0:	f003 0324 	and.w	r3, r3, #36	; 0x24
   144f4:	2b24      	cmp	r3, #36	; 0x24
   144f6:	d0f4      	beq.n	144e2 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   144f8:	4d1a      	ldr	r5, [pc, #104]	; (14564 <valid_adv_param+0x8c>)
   144fa:	7820      	ldrb	r0, [r4, #0]
   144fc:	79eb      	ldrb	r3, [r5, #7]
   144fe:	4283      	cmp	r3, r0
   14500:	d9ef      	bls.n	144e2 <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   14502:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   14506:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   14508:	2207      	movs	r2, #7
   1450a:	4669      	mov	r1, sp
   1450c:	4428      	add	r0, r5
   1450e:	9300      	str	r3, [sp, #0]
   14510:	f8cd 3003 	str.w	r3, [sp, #3]
   14514:	f010 fca4 	bl	24e60 <memcmp>
	if (param->id >= bt_dev.id_count ||
   14518:	2800      	cmp	r0, #0
   1451a:	d0e2      	beq.n	144e2 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1451c:	6860      	ldr	r0, [r4, #4]
   1451e:	07c2      	lsls	r2, r0, #31
   14520:	d406      	bmi.n	14530 <valid_adv_param+0x58>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   14522:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   14526:	2b08      	cmp	r3, #8
   14528:	d802      	bhi.n	14530 <valid_adv_param+0x58>
   1452a:	68a3      	ldr	r3, [r4, #8]
   1452c:	2b9f      	cmp	r3, #159	; 0x9f
   1452e:	d9d8      	bls.n	144e2 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   14530:	f010 0f30 	tst.w	r0, #48	; 0x30
   14534:	d002      	beq.n	1453c <valid_adv_param+0x64>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   14536:	6923      	ldr	r3, [r4, #16]
   14538:	2b00      	cmp	r3, #0
   1453a:	d0d2      	beq.n	144e2 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   1453c:	06c3      	lsls	r3, r0, #27
   1453e:	d401      	bmi.n	14544 <valid_adv_param+0x6c>
   14540:	6923      	ldr	r3, [r4, #16]
   14542:	b943      	cbnz	r3, 14556 <valid_adv_param+0x7e>
		if (param->interval_min > param->interval_max ||
   14544:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   14548:	429a      	cmp	r2, r3
   1454a:	d8ca      	bhi.n	144e2 <valid_adv_param+0xa>
   1454c:	2a1f      	cmp	r2, #31
   1454e:	d9c8      	bls.n	144e2 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   14550:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   14554:	d8c5      	bhi.n	144e2 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   14556:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   1455a:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   1455e:	bf18      	it	ne
   14560:	2001      	movne	r0, #1
   14562:	e7bf      	b.n	144e4 <valid_adv_param+0xc>
   14564:	200002b0 	.word	0x200002b0

00014568 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   14568:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1456c:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1456e:	2120      	movs	r1, #32
{
   14570:	4682      	mov	sl, r0
   14572:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   14574:	f004 fc2e 	bl	18dd4 <bt_hci_cmd_create>
	if (!buf) {
   14578:	4606      	mov	r6, r0
   1457a:	2800      	cmp	r0, #0
   1457c:	d05c      	beq.n	14638 <hci_set_ad+0xd0>
   1457e:	2120      	movs	r1, #32
   14580:	3008      	adds	r0, #8
   14582:	f012 fe39 	bl	271f8 <net_buf_simple_add>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));
   14586:	2220      	movs	r2, #32
   14588:	2100      	movs	r1, #0
   1458a:	4681      	mov	r9, r0
   1458c:	f010 fc83 	bl	24e96 <memset>

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   14590:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   14594:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   14598:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   1459a:	2500      	movs	r5, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   1459c:	f8d4 8000 	ldr.w	r8, [r4]
   145a0:	2300      	movs	r3, #0
   145a2:	6862      	ldr	r2, [r4, #4]
   145a4:	4293      	cmp	r3, r2
   145a6:	d30d      	bcc.n	145c4 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   145a8:	9b00      	ldr	r3, [sp, #0]
   145aa:	3408      	adds	r4, #8
   145ac:	429c      	cmp	r4, r3
   145ae:	d1f5      	bne.n	1459c <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   145b0:	2200      	movs	r2, #0
   145b2:	4631      	mov	r1, r6
   145b4:	4650      	mov	r0, sl
	*data_len = set_data_len;
   145b6:	f889 5000 	strb.w	r5, [r9]
}
   145ba:	b003      	add	sp, #12
   145bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   145c0:	f004 bd64 	b.w	1908c <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   145c4:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   145c8:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   145cc:	1ca8      	adds	r0, r5, #2
   145ce:	1881      	adds	r1, r0, r2
   145d0:	291f      	cmp	r1, #31
   145d2:	d91a      	bls.n	1460a <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   145d4:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   145d8:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
   145dc:	d101      	bne.n	145e2 <hci_set_ad+0x7a>
   145de:	2a00      	cmp	r2, #0
   145e0:	dc11      	bgt.n	14606 <hci_set_ad+0x9e>
   145e2:	4b17      	ldr	r3, [pc, #92]	; (14640 <hci_set_ad+0xd8>)
   145e4:	4917      	ldr	r1, [pc, #92]	; (14644 <hci_set_ad+0xdc>)
					BT_ERR("Too big advertising data");
   145e6:	4818      	ldr	r0, [pc, #96]	; (14648 <hci_set_ad+0xe0>)
   145e8:	1ac9      	subs	r1, r1, r3
   145ea:	08c9      	lsrs	r1, r1, #3
   145ec:	0189      	lsls	r1, r1, #6
   145ee:	f041 0101 	orr.w	r1, r1, #1
   145f2:	f00f fc36 	bl	23e62 <log_0>
		net_buf_unref(buf);
   145f6:	4630      	mov	r0, r6
   145f8:	f008 fd72 	bl	1d0e0 <net_buf_unref>
					return -EINVAL;
   145fc:	f06f 0015 	mvn.w	r0, #21
}
   14600:	b003      	add	sp, #12
   14602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   14606:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   1460a:	b2d7      	uxtb	r7, r2
   1460c:	1c79      	adds	r1, r7, #1
   1460e:	f80b 1005 	strb.w	r1, [fp, r5]
   14612:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
   14614:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   14616:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   1461a:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   1461e:	f8d8 1004 	ldr.w	r1, [r8, #4]
   14622:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   14624:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   14626:	f010 fc2b 	bl	24e80 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   1462a:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   1462c:	443d      	add	r5, r7
   1462e:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
   14630:	3301      	adds	r3, #1
   14632:	f108 0808 	add.w	r8, r8, #8
   14636:	e7b4      	b.n	145a2 <hci_set_ad+0x3a>
		return -ENOBUFS;
   14638:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1463c:	e7e0      	b.n	14600 <hci_set_ad+0x98>
   1463e:	bf00      	nop
   14640:	00028dd4 	.word	0x00028dd4
   14644:	00028dec 	.word	0x00028dec
   14648:	0002a72c 	.word	0x0002a72c

0001464c <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   1464c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   1464e:	4606      	mov	r6, r0
   14650:	4b1e      	ldr	r3, [pc, #120]	; (146cc <le_adv_start_add_conn+0x80>)
   14652:	f816 2b09 	ldrb.w	r2, [r6], #9
   14656:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   1465a:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   1465c:	2300      	movs	r3, #0
{
   1465e:	4605      	mov	r5, r0
   14660:	2207      	movs	r2, #7
   14662:	460f      	mov	r7, r1
   14664:	4630      	mov	r0, r6
   14666:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   14668:	9300      	str	r3, [sp, #0]
   1466a:	f8cd 3003 	str.w	r3, [sp, #3]
   1466e:	f010 fbf7 	bl	24e60 <memcmp>
   14672:	782a      	ldrb	r2, [r5, #0]
   14674:	4604      	mov	r4, r0
   14676:	b9a8      	cbnz	r0, 146a4 <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   14678:	4b15      	ldr	r3, [pc, #84]	; (146d0 <le_adv_start_add_conn+0x84>)
   1467a:	6818      	ldr	r0, [r3, #0]
   1467c:	8899      	ldrh	r1, [r3, #4]
   1467e:	9002      	str	r0, [sp, #8]
   14680:	799b      	ldrb	r3, [r3, #6]
   14682:	f8ad 100c 	strh.w	r1, [sp, #12]
   14686:	4610      	mov	r0, r2
   14688:	a902      	add	r1, sp, #8
   1468a:	f88d 300e 	strb.w	r3, [sp, #14]
   1468e:	f001 ffe1 	bl	16654 <bt_conn_add_le>
		if (!conn) {
   14692:	4605      	mov	r5, r0
   14694:	b1b8      	cbz	r0, 146c6 <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
   14696:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   14698:	f001 fdde 	bl	16258 <bt_conn_set_state>
	*out_conn = conn;
   1469c:	603d      	str	r5, [r7, #0]
	return 0;
}
   1469e:	4620      	mov	r0, r4
   146a0:	b005      	add	sp, #20
   146a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   146a4:	4631      	mov	r1, r6
   146a6:	4610      	mov	r0, r2
   146a8:	f002 f80e 	bl	166c8 <bt_conn_exists_le>
   146ac:	4604      	mov	r4, r0
   146ae:	b938      	cbnz	r0, 146c0 <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   146b0:	7828      	ldrb	r0, [r5, #0]
   146b2:	4631      	mov	r1, r6
   146b4:	f001 ffce 	bl	16654 <bt_conn_add_le>
	if (!conn) {
   146b8:	4605      	mov	r5, r0
   146ba:	b120      	cbz	r0, 146c6 <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   146bc:	2105      	movs	r1, #5
   146be:	e7eb      	b.n	14698 <le_adv_start_add_conn+0x4c>
		return -EINVAL;
   146c0:	f06f 0415 	mvn.w	r4, #21
   146c4:	e7eb      	b.n	1469e <le_adv_start_add_conn+0x52>
		return -ENOMEM;
   146c6:	f06f 040b 	mvn.w	r4, #11
   146ca:	e7e8      	b.n	1469e <le_adv_start_add_conn+0x52>
   146cc:	200002b0 	.word	0x200002b0
   146d0:	00029040 	.word	0x00029040

000146d4 <bt_le_ext_adv_foreach>:
{
   146d4:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   146d6:	4801      	ldr	r0, [pc, #4]	; (146dc <bt_le_ext_adv_foreach+0x8>)
   146d8:	4718      	bx	r3
   146da:	bf00      	nop
   146dc:	200002c8 	.word	0x200002c8

000146e0 <bt_le_adv_lookup_legacy>:
}
   146e0:	4800      	ldr	r0, [pc, #0]	; (146e4 <bt_le_adv_lookup_legacy+0x4>)
   146e2:	4770      	bx	lr
   146e4:	200002c8 	.word	0x200002c8

000146e8 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   146e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   146ec:	690e      	ldr	r6, [r1, #16]
{
   146ee:	b08f      	sub	sp, #60	; 0x3c
   146f0:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
   146f2:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
   146f4:	ebb6 0903 	subs.w	r9, r6, r3
{
   146f8:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   146fa:	4892      	ldr	r0, [pc, #584]	; (14944 <bt_le_adv_start_legacy+0x25c>)
   146fc:	9205      	str	r2, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable = false;
   146fe:	bf18      	it	ne
   14700:	f04f 0901 	movne.w	r9, #1
{
   14704:	460c      	mov	r4, r1
	struct bt_conn *conn = NULL;
   14706:	9307      	str	r3, [sp, #28]
   14708:	f010 fcc9 	bl	2509e <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1470c:	0787      	lsls	r7, r0, #30
   1470e:	f140 810d 	bpl.w	1492c <bt_le_adv_start_legacy+0x244>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   14712:	4608      	mov	r0, r1
   14714:	f7ff fee0 	bl	144d8 <valid_adv_param>
   14718:	b928      	cbnz	r0, 14726 <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   1471a:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   1471e:	4658      	mov	r0, fp
   14720:	b00f      	add	sp, #60	; 0x3c
   14722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   14726:	4620      	mov	r0, r4
   14728:	f011 ff89 	bl	2663e <bt_id_adv_random_addr_check>
   1472c:	4680      	mov	r8, r0
   1472e:	2800      	cmp	r0, #0
   14730:	d0f3      	beq.n	1471a <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   14732:	f105 0710 	add.w	r7, r5, #16
   14736:	4638      	mov	r0, r7
   14738:	f010 fcb1 	bl	2509e <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1473c:	f3c0 1b80 	ubfx	fp, r0, #6, #1
   14740:	0640      	lsls	r0, r0, #25
   14742:	f100 80f6 	bmi.w	14932 <bt_le_adv_start_legacy+0x24a>
	(void)memset(&set_param, 0, sizeof(set_param));
   14746:	220f      	movs	r2, #15
   14748:	4659      	mov	r1, fp
   1474a:	a80a      	add	r0, sp, #40	; 0x28
   1474c:	f010 fba3 	bl	24e96 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   14750:	68a3      	ldr	r3, [r4, #8]
   14752:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.channel_map  = get_adv_channel_map(param->options);
   14756:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   14758:	68e3      	ldr	r3, [r4, #12]
   1475a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   1475e:	f010 fc8f 	bl	25080 <get_adv_channel_map>
	if (adv->id != param->id) {
   14762:	782a      	ldrb	r2, [r5, #0]
   14764:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   14766:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
   1476a:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   1476c:	f88d b036 	strb.w	fp, [sp, #54]	; 0x36
	if (adv->id != param->id) {
   14770:	d004      	beq.n	1477c <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14772:	4874      	ldr	r0, [pc, #464]	; (14944 <bt_le_adv_start_legacy+0x25c>)
   14774:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   14778:	f010 fc97 	bl	250aa <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   1477c:	4a72      	ldr	r2, [pc, #456]	; (14948 <bt_le_adv_start_legacy+0x260>)
	adv->id = param->id;
   1477e:	7823      	ldrb	r3, [r4, #0]
   14780:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   14782:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   14786:	6861      	ldr	r1, [r4, #4]
   14788:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   1478c:	464a      	mov	r2, r9
   1478e:	4628      	mov	r0, r5
   14790:	f005 ffec 	bl	1a76c <bt_id_set_adv_own_addr>
	if (err) {
   14794:	4683      	mov	fp, r0
   14796:	2800      	cmp	r0, #0
   14798:	d1c1      	bne.n	1471e <bt_le_adv_start_legacy+0x36>
	if (dir_adv) {
   1479a:	f105 0009 	add.w	r0, r5, #9
   1479e:	2e00      	cmp	r6, #0
   147a0:	d053      	beq.n	1484a <bt_le_adv_start_legacy+0x162>
	memcpy(dst, src, sizeof(*dst));
   147a2:	6921      	ldr	r1, [r4, #16]
   147a4:	2207      	movs	r2, #7
   147a6:	f010 fb6b 	bl	24e80 <memcpy>
	name_type = get_adv_name_type_param(param);
   147aa:	4620      	mov	r0, r4
   147ac:	f010 fd1a 	bl	251e4 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   147b0:	6863      	ldr	r3, [r4, #4]
   147b2:	07d9      	lsls	r1, r3, #31
	name_type = get_adv_name_type_param(param);
   147b4:	4681      	mov	r9, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   147b6:	d551      	bpl.n	1485c <bt_le_adv_start_legacy+0x174>
		if (dir_adv) {
   147b8:	2e00      	cmp	r6, #0
   147ba:	d04c      	beq.n	14856 <bt_le_adv_start_legacy+0x16e>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   147bc:	f013 0f10 	tst.w	r3, #16
   147c0:	bf14      	ite	ne
   147c2:	2304      	movne	r3, #4
   147c4:	2301      	moveq	r3, #1
   147c6:	6921      	ldr	r1, [r4, #16]
   147c8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   147cc:	2207      	movs	r2, #7
   147ce:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   147d2:	f010 fb55 	bl	24e80 <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   147d6:	f04f 0800 	mov.w	r8, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   147da:	210f      	movs	r1, #15
   147dc:	f242 0006 	movw	r0, #8198	; 0x2006
   147e0:	f004 faf8 	bl	18dd4 <bt_hci_cmd_create>
	if (!buf) {
   147e4:	4683      	mov	fp, r0
   147e6:	2800      	cmp	r0, #0
   147e8:	f000 80a6 	beq.w	14938 <bt_le_adv_start_legacy+0x250>
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add_mem(struct net_buf *buf, const void *mem,
				    size_t len)
{
	return net_buf_simple_add_mem(&buf->b, mem, len);
   147ec:	220f      	movs	r2, #15
   147ee:	a90a      	add	r1, sp, #40	; 0x28
   147f0:	3008      	adds	r0, #8
   147f2:	f012 fd07 	bl	27204 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   147f6:	2200      	movs	r2, #0
   147f8:	4659      	mov	r1, fp
   147fa:	f242 0006 	movw	r0, #8198	; 0x2006
   147fe:	f004 fc45 	bl	1908c <bt_hci_cmd_send_sync>
	if (err) {
   14802:	2800      	cmp	r0, #0
   14804:	f040 809b 	bne.w	1493e <bt_le_adv_start_legacy+0x256>
	if (!dir_adv) {
   14808:	2e00      	cmp	r6, #0
   1480a:	d037      	beq.n	1487c <bt_le_adv_start_legacy+0x194>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1480c:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1480e:	07db      	lsls	r3, r3, #31
   14810:	d442      	bmi.n	14898 <bt_le_adv_start_legacy+0x1b0>
	return bt_le_adv_set_enable_legacy(adv, enable);
   14812:	2101      	movs	r1, #1
   14814:	4628      	mov	r0, r5
   14816:	f010 fcf5 	bl	25204 <bt_le_adv_set_enable_legacy>
	if (err) {
   1481a:	4683      	mov	fp, r0
   1481c:	2800      	cmp	r0, #0
   1481e:	d07e      	beq.n	1491e <bt_le_adv_start_legacy+0x236>
   14820:	4b4a      	ldr	r3, [pc, #296]	; (1494c <bt_le_adv_start_legacy+0x264>)
   14822:	494b      	ldr	r1, [pc, #300]	; (14950 <bt_le_adv_start_legacy+0x268>)
		BT_ERR("Failed to start advertiser");
   14824:	484b      	ldr	r0, [pc, #300]	; (14954 <bt_le_adv_start_legacy+0x26c>)
   14826:	1ac9      	subs	r1, r1, r3
   14828:	08c9      	lsrs	r1, r1, #3
   1482a:	0189      	lsls	r1, r1, #6
   1482c:	f041 0101 	orr.w	r1, r1, #1
   14830:	f00f fb17 	bl	23e62 <log_0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   14834:	9807      	ldr	r0, [sp, #28]
   14836:	2800      	cmp	r0, #0
   14838:	f43f af71 	beq.w	1471e <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1483c:	2100      	movs	r1, #0
   1483e:	f001 fd0b 	bl	16258 <bt_conn_set_state>
			bt_conn_unref(conn);
   14842:	9807      	ldr	r0, [sp, #28]
   14844:	f011 f990 	bl	25b68 <bt_conn_unref>
   14848:	e769      	b.n	1471e <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   1484a:	9608      	str	r6, [sp, #32]
   1484c:	2207      	movs	r2, #7
   1484e:	f8cd 6023 	str.w	r6, [sp, #35]	; 0x23
   14852:	a908      	add	r1, sp, #32
   14854:	e7a7      	b.n	147a6 <bt_le_adv_start_legacy+0xbe>
			set_param.type = BT_HCI_ADV_IND;
   14856:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
   1485a:	e7be      	b.n	147da <bt_le_adv_start_legacy+0xf2>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   1485c:	059a      	lsls	r2, r3, #22
   1485e:	d403      	bmi.n	14868 <bt_le_adv_start_legacy+0x180>
   14860:	9b18      	ldr	r3, [sp, #96]	; 0x60
   14862:	b90b      	cbnz	r3, 14868 <bt_le_adv_start_legacy+0x180>
   14864:	2802      	cmp	r0, #2
   14866:	d103      	bne.n	14870 <bt_le_adv_start_legacy+0x188>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   14868:	2302      	movs	r3, #2
   1486a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   1486e:	e7b4      	b.n	147da <bt_le_adv_start_legacy+0xf2>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   14870:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   14872:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   14876:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   1487a:	e7ae      	b.n	147da <bt_le_adv_start_legacy+0xf2>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   1487c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1487e:	9300      	str	r3, [sp, #0]
   14880:	e9cd 8901 	strd	r8, r9, [sp, #4]
   14884:	9b18      	ldr	r3, [sp, #96]	; 0x60
   14886:	9905      	ldr	r1, [sp, #20]
   14888:	4652      	mov	r2, sl
   1488a:	4628      	mov	r0, r5
   1488c:	f010 fc33 	bl	250f6 <le_adv_update.constprop.0>
		if (err) {
   14890:	4683      	mov	fp, r0
   14892:	2800      	cmp	r0, #0
   14894:	d0ba      	beq.n	1480c <bt_le_adv_start_legacy+0x124>
   14896:	e742      	b.n	1471e <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   14898:	a907      	add	r1, sp, #28
   1489a:	4628      	mov	r0, r5
   1489c:	f7ff fed6 	bl	1464c <le_adv_start_add_conn>
		if (err) {
   148a0:	4683      	mov	fp, r0
   148a2:	2800      	cmp	r0, #0
   148a4:	d0b5      	beq.n	14812 <bt_le_adv_start_legacy+0x12a>
			if (err == -ENOMEM && !dir_adv &&
   148a6:	f110 0f0c 	cmn.w	r0, #12
   148aa:	f47f af38 	bne.w	1471e <bt_le_adv_start_legacy+0x36>
   148ae:	2e00      	cmp	r6, #0
   148b0:	f47f af35 	bne.w	1471e <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   148b4:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   148b6:	0798      	lsls	r0, r3, #30
   148b8:	f53f af31 	bmi.w	1471e <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   148bc:	6862      	ldr	r2, [r4, #4]
   148be:	f082 0202 	eor.w	r2, r2, #2
   148c2:	f3c2 0b40 	ubfx	fp, r2, #1, #1
   148c6:	f00b 0201 	and.w	r2, fp, #1
   148ca:	210d      	movs	r1, #13
   148cc:	4638      	mov	r0, r7
   148ce:	f010 fbfb 	bl	250c8 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   148d2:	f109 33ff 	add.w	r3, r9, #4294967295
   148d6:	425a      	negs	r2, r3
   148d8:	415a      	adcs	r2, r3
   148da:	2107      	movs	r1, #7
   148dc:	4638      	mov	r0, r7
   148de:	f010 fbf3 	bl	250c8 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   148e2:	f1a9 0102 	sub.w	r1, r9, #2
   148e6:	424a      	negs	r2, r1
   148e8:	414a      	adcs	r2, r1
   148ea:	4638      	mov	r0, r7
   148ec:	2108      	movs	r1, #8
   148ee:	f010 fbeb 	bl	250c8 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   148f2:	6862      	ldr	r2, [r4, #4]
   148f4:	2109      	movs	r1, #9
   148f6:	f002 0201 	and.w	r2, r2, #1
   148fa:	4638      	mov	r0, r7
   148fc:	f010 fbe4 	bl	250c8 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   14900:	4642      	mov	r2, r8
   14902:	210a      	movs	r1, #10
   14904:	4638      	mov	r0, r7
   14906:	f010 fbdf 	bl	250c8 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   1490a:	6862      	ldr	r2, [r4, #4]
   1490c:	210c      	movs	r1, #12
   1490e:	f3c2 0280 	ubfx	r2, r2, #2, #1
   14912:	4638      	mov	r0, r7
   14914:	f010 fbd8 	bl	250c8 <atomic_set_bit_to>
	return 0;
   14918:	f04f 0b00 	mov.w	fp, #0
   1491c:	e6ff      	b.n	1471e <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   1491e:	9807      	ldr	r0, [sp, #28]
   14920:	b108      	cbz	r0, 14926 <bt_le_adv_start_legacy+0x23e>
		bt_conn_unref(conn);
   14922:	f011 f921 	bl	25b68 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   14926:	2e00      	cmp	r6, #0
   14928:	d1cd      	bne.n	148c6 <bt_le_adv_start_legacy+0x1de>
   1492a:	e7c7      	b.n	148bc <bt_le_adv_start_legacy+0x1d4>
		return -EAGAIN;
   1492c:	f06f 0b0a 	mvn.w	fp, #10
   14930:	e6f5      	b.n	1471e <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   14932:	f06f 0b77 	mvn.w	fp, #119	; 0x77
   14936:	e6f2      	b.n	1471e <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   14938:	f06f 0b68 	mvn.w	fp, #104	; 0x68
   1493c:	e6ef      	b.n	1471e <bt_le_adv_start_legacy+0x36>
   1493e:	4683      	mov	fp, r0
   14940:	e6ed      	b.n	1471e <bt_le_adv_start_legacy+0x36>
   14942:	bf00      	nop
   14944:	2000037c 	.word	0x2000037c
   14948:	200002b0 	.word	0x200002b0
   1494c:	00028dd4 	.word	0x00028dd4
   14950:	00028dec 	.word	0x00028dec
   14954:	0002a745 	.word	0x0002a745

00014958 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   14958:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1495a:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   1495c:	9a06      	ldr	r2, [sp, #24]
{
   1495e:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   14960:	e9cd 3200 	strd	r3, r2, [sp]
   14964:	462b      	mov	r3, r5
   14966:	460a      	mov	r2, r1
   14968:	4601      	mov	r1, r0
   1496a:	4811      	ldr	r0, [pc, #68]	; (149b0 <bt_le_adv_start+0x58>)
   1496c:	f7ff febc 	bl	146e8 <bt_le_adv_start_legacy>
   14970:	4621      	mov	r1, r4
   14972:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   14974:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   14976:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   1497a:	429d      	cmp	r5, r3
   1497c:	d102      	bne.n	14984 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   1497e:	4630      	mov	r0, r6
   14980:	b002      	add	sp, #8
   14982:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   14984:	880a      	ldrh	r2, [r1, #0]
   14986:	4282      	cmp	r2, r0
   14988:	d104      	bne.n	14994 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   1498a:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   1498c:	b112      	cbz	r2, 14994 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   1498e:	7812      	ldrb	r2, [r2, #0]
   14990:	07d2      	lsls	r2, r2, #31
   14992:	d402      	bmi.n	1499a <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   14994:	3301      	adds	r3, #1
   14996:	3108      	adds	r1, #8
   14998:	e7ef      	b.n	1497a <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   1499a:	4906      	ldr	r1, [pc, #24]	; (149b4 <bt_le_adv_start+0x5c>)
   1499c:	4806      	ldr	r0, [pc, #24]	; (149b8 <bt_le_adv_start+0x60>)
   1499e:	f013 ff76 	bl	2888e <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   149a2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   149a6:	2300      	movs	r3, #0
   149a8:	4803      	ldr	r0, [pc, #12]	; (149b8 <bt_le_adv_start+0x60>)
   149aa:	f00d fda7 	bl	224fc <k_work_reschedule>
   149ae:	e7e6      	b.n	1497e <bt_le_adv_start+0x26>
   149b0:	200002c8 	.word	0x200002c8
   149b4:	00014a59 	.word	0x00014a59
   149b8:	200002e0 	.word	0x200002e0

000149bc <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   149bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
	int err;

	(void)bt_le_lim_adv_cancel_timeout(adv);
   149be:	4821      	ldr	r0, [pc, #132]	; (14a44 <bt_le_adv_stop+0x88>)
   149c0:	f010 fc47 	bl	25252 <bt_le_lim_adv_cancel_timeout>
   149c4:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   149c8:	481f      	ldr	r0, [pc, #124]	; (14a48 <bt_le_adv_stop+0x8c>)
   149ca:	f010 fb6e 	bl	250aa <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   149ce:	481e      	ldr	r0, [pc, #120]	; (14a48 <bt_le_adv_stop+0x8c>)
   149d0:	f010 fb65 	bl	2509e <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   149d4:	0642      	lsls	r2, r0, #25
   149d6:	f3c0 1380 	ubfx	r3, r0, #6, #1
   149da:	d530      	bpl.n	14a3e <bt_le_adv_stop+0x82>
   149dc:	481a      	ldr	r0, [pc, #104]	; (14a48 <bt_le_adv_stop+0x8c>)
   149de:	f010 fb5e 	bl	2509e <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   149e2:	0583      	lsls	r3, r0, #22
   149e4:	d521      	bpl.n	14a2a <bt_le_adv_stop+0x6e>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   149e6:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   149e8:	4818      	ldr	r0, [pc, #96]	; (14a4c <bt_le_adv_stop+0x90>)
   149ea:	9300      	str	r3, [sp, #0]
   149ec:	2207      	movs	r2, #7
   149ee:	4669      	mov	r1, sp
   149f0:	f8cd 3003 	str.w	r3, [sp, #3]
   149f4:	f010 fa34 	bl	24e60 <memcmp>
   149f8:	4b15      	ldr	r3, [pc, #84]	; (14a50 <bt_le_adv_stop+0x94>)
   149fa:	b9e0      	cbnz	r0, 14a36 <bt_le_adv_stop+0x7a>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   149fc:	4a15      	ldr	r2, [pc, #84]	; (14a54 <bt_le_adv_stop+0x98>)
   149fe:	8891      	ldrh	r1, [r2, #4]
   14a00:	6810      	ldr	r0, [r2, #0]
   14a02:	7992      	ldrb	r2, [r2, #6]
   14a04:	f8ad 100c 	strh.w	r1, [sp, #12]
   14a08:	f88d 200e 	strb.w	r2, [sp, #14]
   14a0c:	9002      	str	r0, [sp, #8]
   14a0e:	2204      	movs	r2, #4
   14a10:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   14a12:	7e18      	ldrb	r0, [r3, #24]
   14a14:	f001 fe7e 	bl	16714 <bt_conn_lookup_state_le>
   14a18:	4604      	mov	r4, r0
	if (conn) {
   14a1a:	b130      	cbz	r0, 14a2a <bt_le_adv_stop+0x6e>
		conn->err = status;
   14a1c:	2100      	movs	r1, #0
   14a1e:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   14a20:	f001 fc1a 	bl	16258 <bt_conn_set_state>
		bt_conn_unref(conn);
   14a24:	4620      	mov	r0, r4
   14a26:	f011 f89f 	bl	25b68 <bt_conn_unref>
		err = bt_le_adv_set_enable_ext(adv, false, NULL);
		if (err) {
			return err;
		}
	} else {
		err = bt_le_adv_set_enable_legacy(adv, false);
   14a2a:	4806      	ldr	r0, [pc, #24]	; (14a44 <bt_le_adv_stop+0x88>)
   14a2c:	2100      	movs	r1, #0
   14a2e:	f010 fbe9 	bl	25204 <bt_le_adv_set_enable_legacy>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   14a32:	b004      	add	sp, #16
   14a34:	bd10      	pop	{r4, pc}
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   14a36:	2205      	movs	r2, #5
   14a38:	f103 0121 	add.w	r1, r3, #33	; 0x21
   14a3c:	e7e9      	b.n	14a12 <bt_le_adv_stop+0x56>
		return 0;
   14a3e:	4618      	mov	r0, r3
   14a40:	e7f7      	b.n	14a32 <bt_le_adv_stop+0x76>
   14a42:	bf00      	nop
   14a44:	200002c8 	.word	0x200002c8
   14a48:	200002d8 	.word	0x200002d8
   14a4c:	200002d1 	.word	0x200002d1
   14a50:	200002b0 	.word	0x200002b0
   14a54:	00029040 	.word	0x00029040

00014a58 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   14a58:	b508      	push	{r3, lr}
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   14a5a:	f7ff ffaf 	bl	149bc <bt_le_adv_stop>
   14a5e:	4b06      	ldr	r3, [pc, #24]	; (14a78 <adv_timeout+0x20>)
   14a60:	4a06      	ldr	r2, [pc, #24]	; (14a7c <adv_timeout+0x24>)
   14a62:	1ad2      	subs	r2, r2, r3
   14a64:	08d2      	lsrs	r2, r2, #3
#endif
	BT_WARN("Failed to stop advertising: %d", err);
   14a66:	0192      	lsls	r2, r2, #6
	err = bt_le_adv_stop();
   14a68:	4601      	mov	r1, r0
}
   14a6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_WARN("Failed to stop advertising: %d", err);
   14a6e:	4804      	ldr	r0, [pc, #16]	; (14a80 <adv_timeout+0x28>)
   14a70:	f042 0202 	orr.w	r2, r2, #2
   14a74:	f00f ba02 	b.w	23e7c <log_1>
   14a78:	00028dd4 	.word	0x00028dd4
   14a7c:	00028dec 	.word	0x00028dec
   14a80:	0002a760 	.word	0x0002a760

00014a84 <bt_le_adv_resume>:
{
   14a84:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14a86:	4822      	ldr	r0, [pc, #136]	; (14b10 <bt_le_adv_resume+0x8c>)
   14a88:	4c21      	ldr	r4, [pc, #132]	; (14b10 <bt_le_adv_resume+0x8c>)
   14a8a:	f010 fb08 	bl	2509e <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   14a8e:	f410 5f00 	tst.w	r0, #8192	; 0x2000
   14a92:	d03a      	beq.n	14b0a <bt_le_adv_resume+0x86>
   14a94:	4620      	mov	r0, r4
   14a96:	f010 fb02 	bl	2509e <atomic_get>
   14a9a:	0641      	lsls	r1, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   14a9c:	f3c0 1580 	ubfx	r5, r0, #6, #1
   14aa0:	d433      	bmi.n	14b0a <bt_le_adv_resume+0x86>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14aa2:	4620      	mov	r0, r4
   14aa4:	f010 fafb 	bl	2509e <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   14aa8:	0582      	lsls	r2, r0, #22
   14aaa:	d52e      	bpl.n	14b0a <bt_le_adv_resume+0x86>
	err = le_adv_start_add_conn(adv, &conn);
   14aac:	a901      	add	r1, sp, #4
   14aae:	f1a4 0010 	sub.w	r0, r4, #16
   14ab2:	f7ff fdcb 	bl	1464c <le_adv_start_add_conn>
	if (err) {
   14ab6:	bb40      	cbnz	r0, 14b0a <bt_le_adv_resume+0x86>
   14ab8:	4620      	mov	r0, r4
   14aba:	f010 faf0 	bl	2509e <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   14abe:	04c3      	lsls	r3, r0, #19
   14ac0:	d403      	bmi.n	14aca <bt_le_adv_resume+0x46>
		bt_id_set_adv_private_addr(adv);
   14ac2:	f1a4 0010 	sub.w	r0, r4, #16
   14ac6:	f011 fdb7 	bl	26638 <bt_id_set_adv_private_addr>
	return bt_le_adv_set_enable_legacy(adv, enable);
   14aca:	4812      	ldr	r0, [pc, #72]	; (14b14 <bt_le_adv_resume+0x90>)
   14acc:	2101      	movs	r1, #1
   14ace:	f010 fb99 	bl	25204 <bt_le_adv_set_enable_legacy>
	if (err) {
   14ad2:	b150      	cbz	r0, 14aea <bt_le_adv_resume+0x66>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   14ad4:	9801      	ldr	r0, [sp, #4]
   14ad6:	2100      	movs	r1, #0
   14ad8:	f001 fbbe 	bl	16258 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14adc:	480c      	ldr	r0, [pc, #48]	; (14b10 <bt_le_adv_resume+0x8c>)
   14ade:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   14ae2:	f010 fae2 	bl	250aa <atomic_and>
	return (old & mask) != 0;
   14ae6:	f3c0 3540 	ubfx	r5, r0, #13, #1
	bt_conn_unref(conn);
   14aea:	9801      	ldr	r0, [sp, #4]
   14aec:	f011 f83c 	bl	25b68 <bt_conn_unref>
	if (persist_paused) {
   14af0:	b15d      	cbz	r5, 14b0a <bt_le_adv_resume+0x86>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14af2:	f3bf 8f5b 	dmb	ish
   14af6:	e854 3f00 	ldrex	r3, [r4]
   14afa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   14afe:	e844 3200 	strex	r2, r3, [r4]
   14b02:	2a00      	cmp	r2, #0
   14b04:	d1f7      	bne.n	14af6 <bt_le_adv_resume+0x72>
   14b06:	f3bf 8f5b 	dmb	ish
}
   14b0a:	b003      	add	sp, #12
   14b0c:	bd30      	pop	{r4, r5, pc}
   14b0e:	bf00      	nop
   14b10:	200002d8 	.word	0x200002d8
   14b14:	200002c8 	.word	0x200002c8

00014b18 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   14b18:	4b02      	ldr	r3, [pc, #8]	; (14b24 <att_cfm_sent+0xc>)
   14b1a:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   14b1e:	f010 bbc8 	b.w	252b2 <att_sent>
   14b22:	bf00      	nop
   14b24:	0002551b 	.word	0x0002551b

00014b28 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   14b28:	4b02      	ldr	r3, [pc, #8]	; (14b34 <att_rsp_sent+0xc>)
   14b2a:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   14b2e:	f010 bbc0 	b.w	252b2 <att_sent>
   14b32:	bf00      	nop
   14b34:	000254ff 	.word	0x000254ff

00014b38 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   14b38:	4b02      	ldr	r3, [pc, #8]	; (14b44 <att_req_sent+0xc>)
   14b3a:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   14b3e:	f010 bbb8 	b.w	252b2 <att_sent>
   14b42:	bf00      	nop
   14b44:	000254e9 	.word	0x000254e9

00014b48 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   14b48:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   14b4a:	3808      	subs	r0, #8
   14b4c:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   14b4e:	a901      	add	r1, sp, #4
   14b50:	4802      	ldr	r0, [pc, #8]	; (14b5c <bt_att_released+0x14>)
   14b52:	f013 f9f1 	bl	27f38 <k_mem_slab_free>
}
   14b56:	b003      	add	sp, #12
   14b58:	f85d fb04 	ldr.w	pc, [sp], #4
   14b5c:	2000092c 	.word	0x2000092c

00014b60 <chan_send>:
{
   14b60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   14b64:	688b      	ldr	r3, [r1, #8]
   14b66:	781b      	ldrb	r3, [r3, #0]
   14b68:	2bd2      	cmp	r3, #210	; 0xd2
{
   14b6a:	4606      	mov	r6, r0
   14b6c:	460c      	mov	r4, r1
   14b6e:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   14b70:	d116      	bne.n	14ba0 <chan_send+0x40>
		err = bt_smp_sign(chan->att->conn, buf);
   14b72:	6803      	ldr	r3, [r0, #0]
   14b74:	6818      	ldr	r0, [r3, #0]
   14b76:	f007 fb47 	bl	1c208 <bt_smp_sign>
		if (err) {
   14b7a:	4605      	mov	r5, r0
   14b7c:	b180      	cbz	r0, 14ba0 <chan_send+0x40>
   14b7e:	4b24      	ldr	r3, [pc, #144]	; (14c10 <chan_send+0xb0>)
   14b80:	4924      	ldr	r1, [pc, #144]	; (14c14 <chan_send+0xb4>)
			BT_ERR("Error signing data");
   14b82:	4825      	ldr	r0, [pc, #148]	; (14c18 <chan_send+0xb8>)
   14b84:	1ac9      	subs	r1, r1, r3
   14b86:	08c9      	lsrs	r1, r1, #3
   14b88:	0189      	lsls	r1, r1, #6
   14b8a:	f041 0101 	orr.w	r1, r1, #1
   14b8e:	f00f f968 	bl	23e62 <log_0>
			net_buf_unref(buf);
   14b92:	4620      	mov	r0, r4
   14b94:	f008 faa4 	bl	1d0e0 <net_buf_unref>
}
   14b98:	4628      	mov	r0, r5
   14b9a:	b003      	add	sp, #12
   14b9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   14ba0:	f104 0008 	add.w	r0, r4, #8
   14ba4:	f012 fb5f 	bl	27266 <net_buf_simple_headroom>
	state->len = buf->len;
   14ba8:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   14bac:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   14bae:	b957      	cbnz	r7, 14bc6 <chan_send+0x66>
	switch (att_op_get_type(buf->data[0])) {
   14bb0:	68a3      	ldr	r3, [r4, #8]
   14bb2:	7818      	ldrb	r0, [r3, #0]
   14bb4:	f010 fb93 	bl	252de <att_op_get_type>
   14bb8:	1e43      	subs	r3, r0, #1
   14bba:	b2db      	uxtb	r3, r3
   14bbc:	2b04      	cmp	r3, #4
   14bbe:	bf9c      	itt	ls
   14bc0:	4a16      	ldrls	r2, [pc, #88]	; (14c1c <chan_send+0xbc>)
   14bc2:	f852 7023 	ldrls.w	r7, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   14bc6:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   14bc8:	f8c6 7140 	str.w	r7, [r6, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   14bcc:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
   14bce:	4b14      	ldr	r3, [pc, #80]	; (14c20 <chan_send+0xc0>)
   14bd0:	429f      	cmp	r7, r3
   14bd2:	d018      	beq.n	14c06 <chan_send+0xa6>
	} else if (cb == chan_cfm_sent) {
   14bd4:	4b13      	ldr	r3, [pc, #76]	; (14c24 <chan_send+0xc4>)
   14bd6:	429f      	cmp	r7, r3
   14bd8:	d017      	beq.n	14c0a <chan_send+0xaa>
		return att_sent;
   14bda:	4913      	ldr	r1, [pc, #76]	; (14c28 <chan_send+0xc8>)
   14bdc:	4b13      	ldr	r3, [pc, #76]	; (14c2c <chan_send+0xcc>)
   14bde:	4a14      	ldr	r2, [pc, #80]	; (14c30 <chan_send+0xd0>)
   14be0:	428f      	cmp	r7, r1
   14be2:	bf18      	it	ne
   14be4:	4613      	movne	r3, r2
			       &chan->chan.chan);
   14be6:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   14be8:	9600      	str	r6, [sp, #0]
   14bea:	4622      	mov	r2, r4
   14bec:	2104      	movs	r1, #4
   14bee:	f011 fdbc 	bl	2676a <bt_l2cap_send_cb>
	if (err) {
   14bf2:	4605      	mov	r5, r0
   14bf4:	2800      	cmp	r0, #0
   14bf6:	d0cf      	beq.n	14b98 <chan_send+0x38>
	buf->data = buf->__buf + state->offset;
   14bf8:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   14bfa:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   14bfe:	fa10 f088 	uxtah	r0, r0, r8
   14c02:	60a0      	str	r0, [r4, #8]
}
   14c04:	e7c8      	b.n	14b98 <chan_send+0x38>
		return att_rsp_sent;
   14c06:	4b0b      	ldr	r3, [pc, #44]	; (14c34 <chan_send+0xd4>)
   14c08:	e7ed      	b.n	14be6 <chan_send+0x86>
		return att_cfm_sent;
   14c0a:	4b0b      	ldr	r3, [pc, #44]	; (14c38 <chan_send+0xd8>)
   14c0c:	e7eb      	b.n	14be6 <chan_send+0x86>
   14c0e:	bf00      	nop
   14c10:	00028dd4 	.word	0x00028dd4
   14c14:	00028df4 	.word	0x00028df4
   14c18:	0002a786 	.word	0x0002a786
   14c1c:	0002943c 	.word	0x0002943c
   14c20:	000254ff 	.word	0x000254ff
   14c24:	0002551b 	.word	0x0002551b
   14c28:	000254e9 	.word	0x000254e9
   14c2c:	00014b39 	.word	0x00014b39
   14c30:	000252b3 	.word	0x000252b3
   14c34:	00014b29 	.word	0x00014b29
   14c38:	00014b19 	.word	0x00014b19

00014c3c <find_type_cb>:
{
   14c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   14c40:	f8d2 9000 	ldr.w	r9, [r2]
{
   14c44:	b091      	sub	sp, #68	; 0x44
   14c46:	4607      	mov	r7, r0
   14c48:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   14c4a:	2500      	movs	r5, #0
   14c4c:	f642 0301 	movw	r3, #10241	; 0x2801
   14c50:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   14c52:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   14c56:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   14c5a:	a90b      	add	r1, sp, #44	; 0x2c
{
   14c5c:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   14c5e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   14c62:	f012 f9d7 	bl	27014 <bt_uuid_cmp>
   14c66:	2800      	cmp	r0, #0
   14c68:	d066      	beq.n	14d38 <find_type_cb+0xfc>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   14c6a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   14c6e:	6838      	ldr	r0, [r7, #0]
   14c70:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   14c74:	a90b      	add	r1, sp, #44	; 0x2c
   14c76:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   14c7a:	f012 f9cb 	bl	27014 <bt_uuid_cmp>
   14c7e:	b138      	cbz	r0, 14c90 <find_type_cb+0x54>
		if (data->group &&
   14c80:	68a3      	ldr	r3, [r4, #8]
   14c82:	b11b      	cbz	r3, 14c8c <find_type_cb+0x50>
   14c84:	885a      	ldrh	r2, [r3, #2]
   14c86:	42b2      	cmp	r2, r6
   14c88:	d200      	bcs.n	14c8c <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   14c8a:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   14c8c:	2001      	movs	r0, #1
   14c8e:	e009      	b.n	14ca4 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   14c90:	6861      	ldr	r1, [r4, #4]
   14c92:	4608      	mov	r0, r1
   14c94:	f010 fb05 	bl	252a2 <net_buf_frags_len>
   14c98:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   14c9c:	1a1b      	subs	r3, r3, r0
   14c9e:	2b03      	cmp	r3, #3
   14ca0:	d803      	bhi.n	14caa <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   14ca2:	2000      	movs	r0, #0
}
   14ca4:	b011      	add	sp, #68	; 0x44
   14ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   14caa:	4608      	mov	r0, r1
   14cac:	f012 fa82 	bl	271b4 <net_buf_frag_last>
   14cb0:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   14cb2:	6860      	ldr	r0, [r4, #4]
   14cb4:	f010 faf5 	bl	252a2 <net_buf_frags_len>
   14cb8:	f8b9 a08a 	ldrh.w	sl, [r9, #138]	; 0x8a
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   14cbc:	f105 0b08 	add.w	fp, r5, #8
   14cc0:	ebaa 0a00 	sub.w	sl, sl, r0
   14cc4:	4658      	mov	r0, fp
   14cc6:	f012 fad2 	bl	2726e <net_buf_simple_tailroom>
   14cca:	4582      	cmp	sl, r0
   14ccc:	d237      	bcs.n	14d3e <find_type_cb+0x102>
   14cce:	6860      	ldr	r0, [r4, #4]
   14cd0:	f010 fae7 	bl	252a2 <net_buf_frags_len>
   14cd4:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   14cd8:	1a18      	subs	r0, r3, r0
	if (!len) {
   14cda:	b970      	cbnz	r0, 14cfa <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   14cdc:	6863      	ldr	r3, [r4, #4]
   14cde:	7998      	ldrb	r0, [r3, #6]
   14ce0:	f008 f93e 	bl	1cf60 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   14ce4:	2200      	movs	r2, #0
   14ce6:	2300      	movs	r3, #0
   14ce8:	f012 f9e7 	bl	270ba <net_buf_alloc_fixed>
		if (!frag) {
   14cec:	4605      	mov	r5, r0
   14cee:	2800      	cmp	r0, #0
   14cf0:	d0d7      	beq.n	14ca2 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   14cf2:	4601      	mov	r1, r0
   14cf4:	6860      	ldr	r0, [r4, #4]
   14cf6:	f012 fa6e 	bl	271d6 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   14cfa:	2300      	movs	r3, #0
   14cfc:	9300      	str	r3, [sp, #0]
   14cfe:	f8d7 9004 	ldr.w	r9, [r7, #4]
   14d02:	4639      	mov	r1, r7
   14d04:	2310      	movs	r3, #16
   14d06:	aa02      	add	r2, sp, #8
   14d08:	4640      	mov	r0, r8
   14d0a:	47c8      	blx	r9
	if (read < 0) {
   14d0c:	1e07      	subs	r7, r0, #0
   14d0e:	db13      	blt.n	14d38 <find_type_cb+0xfc>
	if (read != data->value_len) {
   14d10:	7c22      	ldrb	r2, [r4, #16]
   14d12:	68e0      	ldr	r0, [r4, #12]
   14d14:	42ba      	cmp	r2, r7
   14d16:	d037      	beq.n	14d88 <find_type_cb+0x14c>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   14d18:	4601      	mov	r1, r0
   14d1a:	a80b      	add	r0, sp, #44	; 0x2c
   14d1c:	f012 f9a4 	bl	27068 <bt_uuid_create>
   14d20:	b988      	cbnz	r0, 14d46 <find_type_cb+0x10a>
   14d22:	4a1b      	ldr	r2, [pc, #108]	; (14d90 <find_type_cb+0x154>)
   14d24:	4b1b      	ldr	r3, [pc, #108]	; (14d94 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   14d26:	7c21      	ldrb	r1, [r4, #16]
   14d28:	481b      	ldr	r0, [pc, #108]	; (14d98 <find_type_cb+0x15c>)
   14d2a:	1ad2      	subs	r2, r2, r3
   14d2c:	08d2      	lsrs	r2, r2, #3
   14d2e:	0192      	lsls	r2, r2, #6
   14d30:	f042 0202 	orr.w	r2, r2, #2
			BT_WARN("Unable to create UUID: size %d", read);
   14d34:	f00f f8a2 	bl	23e7c <log_1>
	data->group = NULL;
   14d38:	2300      	movs	r3, #0
   14d3a:	60a3      	str	r3, [r4, #8]
   14d3c:	e7a6      	b.n	14c8c <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   14d3e:	4658      	mov	r0, fp
   14d40:	f012 fa95 	bl	2726e <net_buf_simple_tailroom>
   14d44:	e7c9      	b.n	14cda <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   14d46:	b2fa      	uxtb	r2, r7
   14d48:	a902      	add	r1, sp, #8
   14d4a:	a806      	add	r0, sp, #24
   14d4c:	f012 f98c 	bl	27068 <bt_uuid_create>
   14d50:	b948      	cbnz	r0, 14d66 <find_type_cb+0x12a>
   14d52:	4a0f      	ldr	r2, [pc, #60]	; (14d90 <find_type_cb+0x154>)
   14d54:	4b0f      	ldr	r3, [pc, #60]	; (14d94 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %d", read);
   14d56:	4811      	ldr	r0, [pc, #68]	; (14d9c <find_type_cb+0x160>)
   14d58:	1ad2      	subs	r2, r2, r3
   14d5a:	08d2      	lsrs	r2, r2, #3
   14d5c:	0192      	lsls	r2, r2, #6
   14d5e:	f042 0202 	orr.w	r2, r2, #2
   14d62:	4639      	mov	r1, r7
   14d64:	e7e6      	b.n	14d34 <find_type_cb+0xf8>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   14d66:	a906      	add	r1, sp, #24
   14d68:	a80b      	add	r0, sp, #44	; 0x2c
   14d6a:	f012 f953 	bl	27014 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   14d6e:	2800      	cmp	r0, #0
   14d70:	d1e2      	bne.n	14d38 <find_type_cb+0xfc>
	data->err = 0x00;
   14d72:	2300      	movs	r3, #0
   14d74:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   14d76:	2104      	movs	r1, #4
   14d78:	f105 0008 	add.w	r0, r5, #8
   14d7c:	f012 fa3c 	bl	271f8 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   14d80:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   14d82:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   14d84:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   14d86:	e781      	b.n	14c8c <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
   14d88:	a902      	add	r1, sp, #8
   14d8a:	f010 f869 	bl	24e60 <memcmp>
   14d8e:	e7ee      	b.n	14d6e <find_type_cb+0x132>
   14d90:	00028df4 	.word	0x00028df4
   14d94:	00028dd4 	.word	0x00028dd4
   14d98:	0002a799 	.word	0x0002a799
   14d9c:	0002a7b8 	.word	0x0002a7b8

00014da0 <att_get>:
{
   14da0:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   14da2:	7b43      	ldrb	r3, [r0, #13]
   14da4:	2b07      	cmp	r3, #7
   14da6:	d00b      	beq.n	14dc0 <att_get+0x20>
   14da8:	4918      	ldr	r1, [pc, #96]	; (14e0c <att_get+0x6c>)
   14daa:	4b19      	ldr	r3, [pc, #100]	; (14e10 <att_get+0x70>)
		BT_WARN("Not connected");
   14dac:	4819      	ldr	r0, [pc, #100]	; (14e14 <att_get+0x74>)
   14dae:	1ac9      	subs	r1, r1, r3
   14db0:	08c9      	lsrs	r1, r1, #3
   14db2:	0189      	lsls	r1, r1, #6
   14db4:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("ATT channel flagged as disconnected");
   14db8:	f00f f853 	bl	23e62 <log_0>
		return NULL;
   14dbc:	2400      	movs	r4, #0
   14dbe:	e00e      	b.n	14dde <att_get+0x3e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   14dc0:	2104      	movs	r1, #4
   14dc2:	f011 fcfb 	bl	267bc <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   14dc6:	4604      	mov	r4, r0
   14dc8:	b958      	cbnz	r0, 14de2 <att_get+0x42>
   14dca:	4910      	ldr	r1, [pc, #64]	; (14e0c <att_get+0x6c>)
   14dcc:	4b10      	ldr	r3, [pc, #64]	; (14e10 <att_get+0x70>)
		BT_ERR("Unable to find ATT channel");
   14dce:	4812      	ldr	r0, [pc, #72]	; (14e18 <att_get+0x78>)
   14dd0:	1ac9      	subs	r1, r1, r3
   14dd2:	08c9      	lsrs	r1, r1, #3
   14dd4:	0189      	lsls	r1, r1, #6
   14dd6:	f041 0101 	orr.w	r1, r1, #1
   14dda:	f00f f842 	bl	23e62 <log_0>
}
   14dde:	4620      	mov	r0, r4
   14de0:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14de2:	f3bf 8f5b 	dmb	ish
   14de6:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
   14dea:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   14dee:	075b      	lsls	r3, r3, #29
   14df0:	d508      	bpl.n	14e04 <att_get+0x64>
   14df2:	4906      	ldr	r1, [pc, #24]	; (14e0c <att_get+0x6c>)
   14df4:	4b06      	ldr	r3, [pc, #24]	; (14e10 <att_get+0x70>)
		BT_WARN("ATT channel flagged as disconnected");
   14df6:	4809      	ldr	r0, [pc, #36]	; (14e1c <att_get+0x7c>)
   14df8:	1ac9      	subs	r1, r1, r3
   14dfa:	08c9      	lsrs	r1, r1, #3
   14dfc:	0189      	lsls	r1, r1, #6
   14dfe:	f041 0102 	orr.w	r1, r1, #2
   14e02:	e7d9      	b.n	14db8 <att_get+0x18>
	return att_chan->att;
   14e04:	f850 4c08 	ldr.w	r4, [r0, #-8]
   14e08:	e7e9      	b.n	14dde <att_get+0x3e>
   14e0a:	bf00      	nop
   14e0c:	00028df4 	.word	0x00028df4
   14e10:	00028dd4 	.word	0x00028dd4
   14e14:	0002a7d7 	.word	0x0002a7d7
   14e18:	0002a7e5 	.word	0x0002a7e5
   14e1c:	0002a800 	.word	0x0002a800

00014e20 <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   14e20:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
   14e22:	4a07      	ldr	r2, [pc, #28]	; (14e40 <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   14e24:	4604      	mov	r4, r0
   14e26:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   14e28:	f7ff fe9a 	bl	14b60 <chan_send>
	if (err) {
   14e2c:	b130      	cbz	r0, 14e3c <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
   14e2e:	4629      	mov	r1, r5
   14e30:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
}
   14e34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   14e38:	f012 b9ab 	b.w	27192 <net_buf_put>
}
   14e3c:	bd38      	pop	{r3, r4, r5, pc}
   14e3e:	bf00      	nop
   14e40:	000254ff 	.word	0x000254ff

00014e44 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   14e44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   14e46:	2300      	movs	r3, #0
{
   14e48:	4606      	mov	r6, r0
   14e4a:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   14e4c:	4828      	ldr	r0, [pc, #160]	; (14ef0 <bt_att_accept+0xac>)
   14e4e:	2200      	movs	r2, #0
   14e50:	4669      	mov	r1, sp
   14e52:	f00c f92b 	bl	210ac <k_mem_slab_alloc>
   14e56:	4604      	mov	r4, r0
   14e58:	b178      	cbz	r0, 14e7a <bt_att_accept+0x36>
   14e5a:	4a26      	ldr	r2, [pc, #152]	; (14ef4 <bt_att_accept+0xb0>)
   14e5c:	4b26      	ldr	r3, [pc, #152]	; (14ef8 <bt_att_accept+0xb4>)
		BT_ERR("No available ATT context for conn %p", conn);
   14e5e:	4827      	ldr	r0, [pc, #156]	; (14efc <bt_att_accept+0xb8>)
   14e60:	1ad2      	subs	r2, r2, r3
   14e62:	08d2      	lsrs	r2, r2, #3
   14e64:	0192      	lsls	r2, r2, #6
   14e66:	f042 0201 	orr.w	r2, r2, #1
   14e6a:	4631      	mov	r1, r6
		BT_ERR("No available ATT channel for conn %p", att->conn);
   14e6c:	f00f f806 	bl	23e7c <log_1>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   14e70:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   14e74:	4620      	mov	r0, r4
   14e76:	b003      	add	sp, #12
   14e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
   14e7a:	4601      	mov	r1, r0
   14e7c:	2234      	movs	r2, #52	; 0x34
   14e7e:	9800      	ldr	r0, [sp, #0]
   14e80:	f010 f809 	bl	24e96 <memset>
	att->conn = conn;
   14e84:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   14e86:	481e      	ldr	r0, [pc, #120]	; (14f00 <bt_att_accept+0xbc>)
   14e88:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
   14e8a:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
   14e8e:	e9c5 440b 	strd	r4, r4, [r5, #44]	; 0x2c
   14e92:	2200      	movs	r2, #0
   14e94:	2300      	movs	r3, #0
   14e96:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   14e98:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   14e9a:	f00c f907 	bl	210ac <k_mem_slab_alloc>
   14e9e:	4604      	mov	r4, r0
   14ea0:	b148      	cbz	r0, 14eb6 <bt_att_accept+0x72>
   14ea2:	4a14      	ldr	r2, [pc, #80]	; (14ef4 <bt_att_accept+0xb0>)
   14ea4:	4b14      	ldr	r3, [pc, #80]	; (14ef8 <bt_att_accept+0xb4>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
   14ea6:	6829      	ldr	r1, [r5, #0]
   14ea8:	4816      	ldr	r0, [pc, #88]	; (14f04 <bt_att_accept+0xc0>)
   14eaa:	1ad2      	subs	r2, r2, r3
   14eac:	08d2      	lsrs	r2, r2, #3
   14eae:	0192      	lsls	r2, r2, #6
   14eb0:	f042 0201 	orr.w	r2, r2, #1
   14eb4:	e7da      	b.n	14e6c <bt_att_accept+0x28>
	(void)memset(chan, 0, sizeof(*chan));
   14eb6:	4601      	mov	r1, r0
   14eb8:	f44f 72a4 	mov.w	r2, #328	; 0x148
   14ebc:	9801      	ldr	r0, [sp, #4]
   14ebe:	f00f ffea 	bl	24e96 <memset>
	chan->chan.chan.ops = &ops;
   14ec2:	9801      	ldr	r0, [sp, #4]
   14ec4:	4b10      	ldr	r3, [pc, #64]	; (14f08 <bt_att_accept+0xc4>)
   14ec6:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   14ec8:	30f8      	adds	r0, #248	; 0xf8
   14eca:	f013 fa27 	bl	2831c <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   14ece:	9b01      	ldr	r3, [sp, #4]
   14ed0:	f3bf 8f5b 	dmb	ish
   14ed4:	33f0      	adds	r3, #240	; 0xf0
   14ed6:	e853 2f00 	ldrex	r2, [r3]
   14eda:	e843 4100 	strex	r1, r4, [r3]
   14ede:	2900      	cmp	r1, #0
   14ee0:	d1f9      	bne.n	14ed6 <bt_att_accept+0x92>
   14ee2:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   14ee6:	9b01      	ldr	r3, [sp, #4]
   14ee8:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   14eec:	603b      	str	r3, [r7, #0]
	return 0;
   14eee:	e7c1      	b.n	14e74 <bt_att_accept+0x30>
   14ef0:	20000910 	.word	0x20000910
   14ef4:	00028df4 	.word	0x00028df4
   14ef8:	00028dd4 	.word	0x00028dd4
   14efc:	0002a824 	.word	0x0002a824
   14f00:	2000092c 	.word	0x2000092c
   14f04:	0002a849 	.word	0x0002a849
   14f08:	20000588 	.word	0x20000588

00014f0c <read_group_cb>:
{
   14f0c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   14f10:	4606      	mov	r6, r0
   14f12:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   14f14:	f04f 0800 	mov.w	r8, #0
   14f18:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   14f1c:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   14f1e:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   14f20:	f88d 8008 	strb.w	r8, [sp, #8]
   14f24:	a902      	add	r1, sp, #8
{
   14f26:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   14f28:	f8ad 300a 	strh.w	r3, [sp, #10]
   14f2c:	f012 f872 	bl	27014 <bt_uuid_cmp>
   14f30:	b1a0      	cbz	r0, 14f5c <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   14f32:	f642 0301 	movw	r3, #10241	; 0x2801
   14f36:	6830      	ldr	r0, [r6, #0]
   14f38:	f88d 800c 	strb.w	r8, [sp, #12]
   14f3c:	a903      	add	r1, sp, #12
   14f3e:	f8ad 300e 	strh.w	r3, [sp, #14]
   14f42:	f012 f867 	bl	27014 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   14f46:	b148      	cbz	r0, 14f5c <read_group_cb+0x50>
		if (data->group &&
   14f48:	6923      	ldr	r3, [r4, #16]
   14f4a:	b11b      	cbz	r3, 14f54 <read_group_cb+0x48>
   14f4c:	885a      	ldrh	r2, [r3, #2]
   14f4e:	42aa      	cmp	r2, r5
   14f50:	d200      	bcs.n	14f54 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   14f52:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   14f54:	2001      	movs	r0, #1
}
   14f56:	b004      	add	sp, #16
   14f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   14f5c:	6861      	ldr	r1, [r4, #4]
   14f5e:	6830      	ldr	r0, [r6, #0]
   14f60:	f012 f858 	bl	27014 <bt_uuid_cmp>
   14f64:	b110      	cbz	r0, 14f6c <read_group_cb+0x60>
		data->group = NULL;
   14f66:	2300      	movs	r3, #0
   14f68:	6123      	str	r3, [r4, #16]
   14f6a:	e7f3      	b.n	14f54 <read_group_cb+0x48>
	if (data->rsp->len &&
   14f6c:	68e3      	ldr	r3, [r4, #12]
   14f6e:	68a0      	ldr	r0, [r4, #8]
   14f70:	781a      	ldrb	r2, [r3, #0]
   14f72:	b13a      	cbz	r2, 14f84 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   14f74:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
   14f78:	8981      	ldrh	r1, [r0, #12]
   14f7a:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   14f7c:	4293      	cmp	r3, r2
   14f7e:	da01      	bge.n	14f84 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   14f80:	2000      	movs	r0, #0
   14f82:	e7e8      	b.n	14f56 <read_group_cb+0x4a>
   14f84:	2104      	movs	r1, #4
   14f86:	3008      	adds	r0, #8
   14f88:	f012 f936 	bl	271f8 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   14f8c:	4b09      	ldr	r3, [pc, #36]	; (14fb4 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   14f8e:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   14f90:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   14f92:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   14f94:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   14f96:	4631      	mov	r1, r6
   14f98:	9300      	str	r3, [sp, #0]
   14f9a:	9401      	str	r4, [sp, #4]
   14f9c:	2300      	movs	r3, #0
   14f9e:	4638      	mov	r0, r7
   14fa0:	f010 fac9 	bl	25536 <att_chan_read>
	if (read < 0) {
   14fa4:	2800      	cmp	r0, #0
   14fa6:	dbeb      	blt.n	14f80 <read_group_cb+0x74>
	if (!data->group) {
   14fa8:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   14faa:	3800      	subs	r0, #0
   14fac:	bf18      	it	ne
   14fae:	2001      	movne	r0, #1
   14fb0:	e7d1      	b.n	14f56 <read_group_cb+0x4a>
   14fb2:	bf00      	nop
   14fb4:	000254c9 	.word	0x000254c9

00014fb8 <read_type_cb>:
{
   14fb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   14fbc:	f8d2 8000 	ldr.w	r8, [r2]
{
   14fc0:	4606      	mov	r6, r0
   14fc2:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   14fc4:	6800      	ldr	r0, [r0, #0]
   14fc6:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   14fc8:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
   14fcc:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   14fce:	f012 f821 	bl	27014 <bt_uuid_cmp>
   14fd2:	4607      	mov	r7, r0
   14fd4:	2800      	cmp	r0, #0
   14fd6:	d13e      	bne.n	15056 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   14fd8:	4628      	mov	r0, r5
   14fda:	2215      	movs	r2, #21
   14fdc:	4631      	mov	r1, r6
   14fde:	f011 f90a 	bl	261f6 <bt_gatt_check_perm>
   14fe2:	4605      	mov	r5, r0
   14fe4:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   14fe6:	b148      	cbz	r0, 14ffc <read_type_cb+0x44>
		if (data->rsp->len) {
   14fe8:	68e3      	ldr	r3, [r4, #12]
   14fea:	781b      	ldrb	r3, [r3, #0]
   14fec:	b923      	cbnz	r3, 14ff8 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   14fee:	2500      	movs	r5, #0
}
   14ff0:	4628      	mov	r0, r5
   14ff2:	b003      	add	sp, #12
   14ff4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   14ff8:	7527      	strb	r7, [r4, #20]
   14ffa:	e7f8      	b.n	14fee <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   14ffc:	68a0      	ldr	r0, [r4, #8]
   14ffe:	f012 f8d9 	bl	271b4 <net_buf_frag_last>
   15002:	2102      	movs	r1, #2
   15004:	3008      	adds	r0, #8
   15006:	f012 f8f7 	bl	271f8 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1500a:	4b14      	ldr	r3, [pc, #80]	; (1505c <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1500c:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1500e:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   15010:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   15014:	4631      	mov	r1, r6
   15016:	9300      	str	r3, [sp, #0]
   15018:	9401      	str	r4, [sp, #4]
   1501a:	462b      	mov	r3, r5
   1501c:	4640      	mov	r0, r8
   1501e:	f010 fa8a 	bl	25536 <att_chan_read>
	if (read < 0) {
   15022:	2800      	cmp	r0, #0
   15024:	da07      	bge.n	15036 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   15026:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   1502a:	bf26      	itte	cs
   1502c:	4240      	negcs	r0, r0
   1502e:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   15030:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   15032:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   15034:	e7dc      	b.n	14ff0 <read_type_cb+0x38>
	if (!data->item) {
   15036:	6923      	ldr	r3, [r4, #16]
   15038:	2b00      	cmp	r3, #0
   1503a:	d0d8      	beq.n	14fee <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1503c:	68a0      	ldr	r0, [r4, #8]
   1503e:	f010 f930 	bl	252a2 <net_buf_frags_len>
   15042:	f8b8 508a 	ldrh.w	r5, [r8, #138]	; 0x8a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   15046:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   15048:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1504a:	7818      	ldrb	r0, [r3, #0]
   1504c:	4285      	cmp	r5, r0
   1504e:	bf94      	ite	ls
   15050:	2500      	movls	r5, #0
   15052:	2501      	movhi	r5, #1
   15054:	e7cc      	b.n	14ff0 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   15056:	2501      	movs	r5, #1
   15058:	e7ca      	b.n	14ff0 <read_type_cb+0x38>
   1505a:	bf00      	nop
   1505c:	000252bf 	.word	0x000252bf

00015060 <bt_att_connected>:
{
   15060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   15062:	4606      	mov	r6, r0
{
   15064:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   15066:	2104      	movs	r1, #4
   15068:	f856 0908 	ldr.w	r0, [r6], #-8
   1506c:	f011 fb96 	bl	2679c <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
   15070:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   15074:	6aef      	ldr	r7, [r5, #44]	; 0x2c
   15076:	b92f      	cbnz	r7, 15084 <bt_att_connected+0x24>
   15078:	f105 000c 	add.w	r0, r5, #12
   1507c:	f013 f94e 	bl	2831c <z_impl_k_queue_init>
   15080:	e9c5 7709 	strd	r7, r7, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   15084:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	parent->next = child;
   15086:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
Z_GENLIST_PREPEND(slist, snode)
   1508a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
	sys_slist_prepend(&att->chans, &chan->node);
   1508c:	f504 739e 	add.w	r3, r4, #316	; 0x13c
	list->head = node;
   15090:	62eb      	str	r3, [r5, #44]	; 0x2c
Z_GENLIST_PREPEND(slist, snode)
   15092:	b902      	cbnz	r2, 15096 <bt_att_connected+0x36>
	list->tail = node;
   15094:	632b      	str	r3, [r5, #48]	; 0x30
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15096:	f3bf 8f5b 	dmb	ish
   1509a:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
   1509e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   150a2:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   150a4:	bf58      	it	pl
   150a6:	2317      	movpl	r3, #23
	att_chan_mtu_updated(att_chan);
   150a8:	4630      	mov	r0, r6
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   150aa:	bf5c      	itt	pl
   150ac:	f8a4 3082 	strhpl.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   150b0:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
   150b4:	f010 f9cd 	bl	25452 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   150b8:	f504 7084 	add.w	r0, r4, #264	; 0x108
   150bc:	4902      	ldr	r1, [pc, #8]	; (150c8 <bt_att_connected+0x68>)
}
   150be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   150c2:	f013 bbe4 	b.w	2888e <k_work_init_delayable>
   150c6:	bf00      	nop
   150c8:	00015cf9 	.word	0x00015cf9

000150cc <prep_write_cb>:
{
   150cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   150d0:	4614      	mov	r4, r2
   150d2:	4606      	mov	r6, r0
   150d4:	460f      	mov	r7, r1
	data->err = bt_gatt_check_perm(data->conn, attr,
   150d6:	222a      	movs	r2, #42	; 0x2a
   150d8:	4601      	mov	r1, r0
   150da:	6820      	ldr	r0, [r4, #0]
   150dc:	f011 f88b 	bl	261f6 <bt_gatt_check_perm>
   150e0:	4605      	mov	r5, r0
   150e2:	7420      	strb	r0, [r4, #16]
	if (data->err) {
   150e4:	2800      	cmp	r0, #0
   150e6:	d12e      	bne.n	15146 <prep_write_cb+0x7a>
	if (!(attr->perm & BT_GATT_PERM_PREPARE_WRITE)) {
   150e8:	7cb3      	ldrb	r3, [r6, #18]
   150ea:	065b      	lsls	r3, r3, #25
   150ec:	d516      	bpl.n	1511c <prep_write_cb+0x50>
	write = attr->write(data->conn, attr, data->value, data->len,
   150ee:	2301      	movs	r3, #1
   150f0:	9301      	str	r3, [sp, #4]
   150f2:	89e3      	ldrh	r3, [r4, #14]
   150f4:	9300      	str	r3, [sp, #0]
   150f6:	f8d6 8008 	ldr.w	r8, [r6, #8]
   150fa:	89a3      	ldrh	r3, [r4, #12]
   150fc:	68a2      	ldr	r2, [r4, #8]
   150fe:	6820      	ldr	r0, [r4, #0]
   15100:	4631      	mov	r1, r6
   15102:	47c0      	blx	r8
	if (write != 0) {
   15104:	b150      	cbz	r0, 1511c <prep_write_cb+0x50>
	if (err < 0 && err >= -0xff) {
   15106:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   1510a:	bf26      	itte	cs
   1510c:	4243      	negcs	r3, r0
   1510e:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   15110:	230e      	movcc	r3, #14
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
   15112:	7423      	strb	r3, [r4, #16]
}
   15114:	4628      	mov	r0, r5
   15116:	b002      	add	sp, #8
   15118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_alloc_fixed(pool, timeout);
   1511c:	480b      	ldr	r0, [pc, #44]	; (1514c <prep_write_cb+0x80>)
   1511e:	2200      	movs	r2, #0
   15120:	2300      	movs	r3, #0
   15122:	f011 ffca 	bl	270ba <net_buf_alloc_fixed>
	data->buf = net_buf_alloc(&prep_pool, K_NO_WAIT);
   15126:	6060      	str	r0, [r4, #4]
	if (!data->buf) {
   15128:	b908      	cbnz	r0, 1512e <prep_write_cb+0x62>
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
   1512a:	2309      	movs	r3, #9
   1512c:	e7f1      	b.n	15112 <prep_write_cb+0x46>
	attr_data->offset = data->offset;
   1512e:	89e3      	ldrh	r3, [r4, #14]
   15130:	82c3      	strh	r3, [r0, #22]
	attr_data->handle = handle;
   15132:	8287      	strh	r7, [r0, #20]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   15134:	89a2      	ldrh	r2, [r4, #12]
   15136:	68a1      	ldr	r1, [r4, #8]
   15138:	3008      	adds	r0, #8
   1513a:	f012 f863 	bl	27204 <net_buf_simple_add_mem>
	data->err = 0U;
   1513e:	2300      	movs	r3, #0
   15140:	7423      	strb	r3, [r4, #16]
	return BT_GATT_ITER_CONTINUE;
   15142:	2501      	movs	r5, #1
   15144:	e7e6      	b.n	15114 <prep_write_cb+0x48>
		return BT_GATT_ITER_STOP;
   15146:	2500      	movs	r5, #0
   15148:	e7e4      	b.n	15114 <prep_write_cb+0x48>
   1514a:	bf00      	nop
   1514c:	20000b38 	.word	0x20000b38

00015150 <bt_att_chan_create_pdu>:
{
   15150:	b538      	push	{r3, r4, r5, lr}
   15152:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   15154:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   15158:	3201      	adds	r2, #1
   1515a:	428a      	cmp	r2, r1
   1515c:	d90c      	bls.n	15178 <bt_att_chan_create_pdu+0x28>
   1515e:	481a      	ldr	r0, [pc, #104]	; (151c8 <bt_att_chan_create_pdu+0x78>)
   15160:	4b1a      	ldr	r3, [pc, #104]	; (151cc <bt_att_chan_create_pdu+0x7c>)
   15162:	1a1b      	subs	r3, r3, r0
   15164:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   15166:	019b      	lsls	r3, r3, #6
   15168:	4819      	ldr	r0, [pc, #100]	; (151d0 <bt_att_chan_create_pdu+0x80>)
   1516a:	f043 0302 	orr.w	r3, r3, #2
   1516e:	f00e fe99 	bl	23ea4 <log_2>
		return NULL;
   15172:	2400      	movs	r4, #0
}
   15174:	4620      	mov	r0, r4
   15176:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
   15178:	4628      	mov	r0, r5
   1517a:	f010 f8b0 	bl	252de <att_op_get_type>
   1517e:	2802      	cmp	r0, #2
   15180:	d001      	beq.n	15186 <bt_att_chan_create_pdu+0x36>
   15182:	2804      	cmp	r0, #4
   15184:	d114      	bne.n	151b0 <bt_att_chan_create_pdu+0x60>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   15186:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1518a:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   1518c:	2100      	movs	r1, #0
   1518e:	4608      	mov	r0, r1
   15190:	f011 fae8 	bl	26764 <bt_l2cap_create_pdu_timeout>
   15194:	4604      	mov	r4, r0
	if (!buf) {
   15196:	b980      	cbnz	r0, 151ba <bt_att_chan_create_pdu+0x6a>
   15198:	4b0b      	ldr	r3, [pc, #44]	; (151c8 <bt_att_chan_create_pdu+0x78>)
   1519a:	4a0c      	ldr	r2, [pc, #48]	; (151cc <bt_att_chan_create_pdu+0x7c>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   1519c:	480d      	ldr	r0, [pc, #52]	; (151d4 <bt_att_chan_create_pdu+0x84>)
   1519e:	1ad2      	subs	r2, r2, r3
   151a0:	08d2      	lsrs	r2, r2, #3
   151a2:	0192      	lsls	r2, r2, #6
   151a4:	f042 0201 	orr.w	r2, r2, #1
   151a8:	4629      	mov	r1, r5
   151aa:	f00e fe67 	bl	23e7c <log_1>
		return NULL;
   151ae:	e7e1      	b.n	15174 <bt_att_chan_create_pdu+0x24>
		buf = bt_l2cap_create_pdu(NULL, 0);
   151b0:	f04f 32ff 	mov.w	r2, #4294967295
   151b4:	f04f 33ff 	mov.w	r3, #4294967295
   151b8:	e7e8      	b.n	1518c <bt_att_chan_create_pdu+0x3c>
	return net_buf_simple_add(&buf->b, len);
   151ba:	2101      	movs	r1, #1
   151bc:	3008      	adds	r0, #8
   151be:	f012 f81b 	bl	271f8 <net_buf_simple_add>
	hdr->code = op;
   151c2:	7005      	strb	r5, [r0, #0]
	return buf;
   151c4:	e7d6      	b.n	15174 <bt_att_chan_create_pdu+0x24>
   151c6:	bf00      	nop
   151c8:	00028dd4 	.word	0x00028dd4
   151cc:	00028df4 	.word	0x00028df4
   151d0:	0002a86e 	.word	0x0002a86e
   151d4:	0002a893 	.word	0x0002a893

000151d8 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   151d8:	898b      	ldrh	r3, [r1, #12]
{
   151da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   151de:	4604      	mov	r4, r0
   151e0:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
   151e2:	b963      	cbnz	r3, 151fe <bt_att_recv+0x26>
   151e4:	494e      	ldr	r1, [pc, #312]	; (15320 <bt_att_recv+0x148>)
   151e6:	4b4f      	ldr	r3, [pc, #316]	; (15324 <bt_att_recv+0x14c>)
		BT_ERR("Too small ATT PDU received");
   151e8:	484f      	ldr	r0, [pc, #316]	; (15328 <bt_att_recv+0x150>)
   151ea:	1ac9      	subs	r1, r1, r3
   151ec:	08c9      	lsrs	r1, r1, #3
   151ee:	0189      	lsls	r1, r1, #6
   151f0:	f041 0101 	orr.w	r1, r1, #1
			BT_WARN("Ignoring unexpected indication");
   151f4:	f00e fe35 	bl	23e62 <log_0>
}
   151f8:	2000      	movs	r0, #0
   151fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   151fe:	2101      	movs	r1, #1
   15200:	f108 0008 	add.w	r0, r8, #8
   15204:	f012 f81f 	bl	27246 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   15208:	f854 3c08 	ldr.w	r3, [r4, #-8]
   1520c:	4605      	mov	r5, r0
   1520e:	2b00      	cmp	r3, #0
   15210:	d0f2      	beq.n	151f8 <bt_att_recv+0x20>
		if (hdr->code == handlers[i].op) {
   15212:	4a46      	ldr	r2, [pc, #280]	; (1532c <bt_att_recv+0x154>)
   15214:	7801      	ldrb	r1, [r0, #0]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   15216:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1521a:	2300      	movs	r3, #0
   1521c:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
   1521e:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
   15222:	4288      	cmp	r0, r1
   15224:	d11d      	bne.n	15262 <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
   15226:	00d8      	lsls	r0, r3, #3
   15228:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1522c:	789f      	ldrb	r7, [r3, #2]
   1522e:	2f01      	cmp	r7, #1
   15230:	d134      	bne.n	1529c <bt_att_recv+0xc4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15232:	f3bf 8f5b 	dmb	ish
   15236:	34e8      	adds	r4, #232	; 0xe8
   15238:	e854 3f00 	ldrex	r3, [r4]
   1523c:	f043 0201 	orr.w	r2, r3, #1
   15240:	e844 2100 	strex	r1, r2, [r4]
   15244:	2900      	cmp	r1, #0
   15246:	d1f7      	bne.n	15238 <bt_att_recv+0x60>
   15248:	f3bf 8f5b 	dmb	ish
   1524c:	07da      	lsls	r2, r3, #31
   1524e:	d53f      	bpl.n	152d0 <bt_att_recv+0xf8>
   15250:	4933      	ldr	r1, [pc, #204]	; (15320 <bt_att_recv+0x148>)
   15252:	4b34      	ldr	r3, [pc, #208]	; (15324 <bt_att_recv+0x14c>)
			BT_WARN("Ignoring unexpected request");
   15254:	4836      	ldr	r0, [pc, #216]	; (15330 <bt_att_recv+0x158>)
   15256:	1ac9      	subs	r1, r1, r3
   15258:	08c9      	lsrs	r1, r1, #3
   1525a:	0189      	lsls	r1, r1, #6
   1525c:	f041 0102 	orr.w	r1, r1, #2
   15260:	e7c8      	b.n	151f4 <bt_att_recv+0x1c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   15262:	3301      	adds	r3, #1
   15264:	2b0e      	cmp	r3, #14
   15266:	d1da      	bne.n	1521e <bt_att_recv+0x46>
   15268:	4b2e      	ldr	r3, [pc, #184]	; (15324 <bt_att_recv+0x14c>)
   1526a:	4a2d      	ldr	r2, [pc, #180]	; (15320 <bt_att_recv+0x148>)
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   1526c:	4831      	ldr	r0, [pc, #196]	; (15334 <bt_att_recv+0x15c>)
   1526e:	1ad2      	subs	r2, r2, r3
   15270:	08d2      	lsrs	r2, r2, #3
   15272:	0192      	lsls	r2, r2, #6
   15274:	f042 0202 	orr.w	r2, r2, #2
   15278:	f00e fe00 	bl	23e7c <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   1527c:	7829      	ldrb	r1, [r5, #0]
   1527e:	4608      	mov	r0, r1
   15280:	f010 f82d 	bl	252de <att_op_get_type>
   15284:	2800      	cmp	r0, #0
   15286:	d0b7      	beq.n	151f8 <bt_att_recv+0x20>
   15288:	2805      	cmp	r0, #5
   1528a:	d0b5      	beq.n	151f8 <bt_att_recv+0x20>
	if (!req) {
   1528c:	2900      	cmp	r1, #0
   1528e:	d0b3      	beq.n	151f8 <bt_att_recv+0x20>
   15290:	2306      	movs	r3, #6
   15292:	2200      	movs	r2, #0
   15294:	4630      	mov	r0, r6
   15296:	f010 fac2 	bl	2581e <send_err_rsp.part.0>
   1529a:	e7ad      	b.n	151f8 <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
   1529c:	2f05      	cmp	r7, #5
   1529e:	d117      	bne.n	152d0 <bt_att_recv+0xf8>
   152a0:	f3bf 8f5b 	dmb	ish
   152a4:	34e8      	adds	r4, #232	; 0xe8
   152a6:	e854 3f00 	ldrex	r3, [r4]
   152aa:	f043 0202 	orr.w	r2, r3, #2
   152ae:	e844 2100 	strex	r1, r2, [r4]
   152b2:	2900      	cmp	r1, #0
   152b4:	d1f7      	bne.n	152a6 <bt_att_recv+0xce>
   152b6:	f3bf 8f5b 	dmb	ish
   152ba:	079b      	lsls	r3, r3, #30
   152bc:	d508      	bpl.n	152d0 <bt_att_recv+0xf8>
   152be:	4918      	ldr	r1, [pc, #96]	; (15320 <bt_att_recv+0x148>)
   152c0:	4b18      	ldr	r3, [pc, #96]	; (15324 <bt_att_recv+0x14c>)
			BT_WARN("Ignoring unexpected indication");
   152c2:	481d      	ldr	r0, [pc, #116]	; (15338 <bt_att_recv+0x160>)
   152c4:	1ac9      	subs	r1, r1, r3
   152c6:	08c9      	lsrs	r1, r1, #3
   152c8:	0189      	lsls	r1, r1, #6
   152ca:	f041 0102 	orr.w	r1, r1, #2
   152ce:	e791      	b.n	151f4 <bt_att_recv+0x1c>
	if (buf->len < handler->expect_len) {
   152d0:	eb0c 0300 	add.w	r3, ip, r0
   152d4:	f8b8 100c 	ldrh.w	r1, [r8, #12]
   152d8:	785a      	ldrb	r2, [r3, #1]
   152da:	428a      	cmp	r2, r1
   152dc:	d90f      	bls.n	152fe <bt_att_recv+0x126>
   152de:	4a11      	ldr	r2, [pc, #68]	; (15324 <bt_att_recv+0x14c>)
   152e0:	4b0f      	ldr	r3, [pc, #60]	; (15320 <bt_att_recv+0x148>)
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   152e2:	4816      	ldr	r0, [pc, #88]	; (1533c <bt_att_recv+0x164>)
   152e4:	1a9b      	subs	r3, r3, r2
   152e6:	08db      	lsrs	r3, r3, #3
   152e8:	019b      	lsls	r3, r3, #6
   152ea:	782a      	ldrb	r2, [r5, #0]
   152ec:	f043 0301 	orr.w	r3, r3, #1
   152f0:	f00e fdd8 	bl	23ea4 <log_2>
	if (handler->type == ATT_REQUEST && err) {
   152f4:	2f01      	cmp	r7, #1
   152f6:	f47f af7f 	bne.w	151f8 <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
   152fa:	2304      	movs	r3, #4
   152fc:	e00a      	b.n	15314 <bt_att_recv+0x13c>
		err = handler->func(att_chan, buf);
   152fe:	685b      	ldr	r3, [r3, #4]
   15300:	4641      	mov	r1, r8
   15302:	4630      	mov	r0, r6
   15304:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   15306:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
   15308:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   1530a:	f47f af75 	bne.w	151f8 <bt_att_recv+0x20>
   1530e:	2800      	cmp	r0, #0
   15310:	f43f af72 	beq.w	151f8 <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
   15314:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   15316:	2900      	cmp	r1, #0
   15318:	f43f af6e 	beq.w	151f8 <bt_att_recv+0x20>
   1531c:	e7b9      	b.n	15292 <bt_att_recv+0xba>
   1531e:	bf00      	nop
   15320:	00028df4 	.word	0x00028df4
   15324:	00028dd4 	.word	0x00028dd4
   15328:	0002a8bb 	.word	0x0002a8bb
   1532c:	00029450 	.word	0x00029450
   15330:	0002a8d6 	.word	0x0002a8d6
   15334:	0002a930 	.word	0x0002a930
   15338:	0002a8f2 	.word	0x0002a8f2
   1533c:	0002a911 	.word	0x0002a911

00015340 <att_write_rsp>:
{
   15340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15344:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   15346:	6803      	ldr	r3, [r0, #0]
   15348:	460e      	mov	r6, r1
   1534a:	3900      	subs	r1, #0
{
   1534c:	b086      	sub	sp, #24
   1534e:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   15350:	bf18      	it	ne
   15352:	2101      	movne	r1, #1
   15354:	6818      	ldr	r0, [r3, #0]
{
   15356:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   15358:	f010 ff78 	bl	2624c <bt_gatt_change_aware>
   1535c:	2800      	cmp	r0, #0
   1535e:	d04d      	beq.n	153fc <att_write_rsp+0xbc>
	if (!handle) {
   15360:	2f00      	cmp	r7, #0
   15362:	d04d      	beq.n	15400 <att_write_rsp+0xc0>
	(void)memset(&data, 0, sizeof(data));
   15364:	2218      	movs	r2, #24
   15366:	2100      	movs	r1, #0
   15368:	4668      	mov	r0, sp
   1536a:	f00f fd94 	bl	24e96 <memset>
	if (rsp) {
   1536e:	f1b8 0f00 	cmp.w	r8, #0
   15372:	d126      	bne.n	153c2 <att_write_rsp+0x82>
	data.conn = chan->att->conn;
   15374:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   15376:	4a23      	ldr	r2, [pc, #140]	; (15404 <att_write_rsp+0xc4>)
	data.conn = chan->att->conn;
   15378:	681b      	ldr	r3, [r3, #0]
   1537a:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   1537c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   15380:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   15384:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15386:	9303      	str	r3, [sp, #12]
	data.len = len;
   15388:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1538c:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   15390:	2301      	movs	r3, #1
   15392:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   15396:	4639      	mov	r1, r7
   15398:	466b      	mov	r3, sp
   1539a:	4638      	mov	r0, r7
	data.req = req;
   1539c:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   153a0:	f010 f800 	bl	253a4 <bt_gatt_foreach_attr>
	if (data.err) {
   153a4:	f89d 4014 	ldrb.w	r4, [sp, #20]
   153a8:	b30c      	cbz	r4, 153ee <att_write_rsp+0xae>
		if (rsp) {
   153aa:	f1b8 0f00 	cmp.w	r8, #0
   153ae:	d019      	beq.n	153e4 <att_write_rsp+0xa4>
			net_buf_unref(data.buf);
   153b0:	9801      	ldr	r0, [sp, #4]
   153b2:	f007 fe95 	bl	1d0e0 <net_buf_unref>
	if (!req) {
   153b6:	b976      	cbnz	r6, 153d6 <att_write_rsp+0x96>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   153b8:	2400      	movs	r4, #0
}
   153ba:	4620      	mov	r0, r4
   153bc:	b006      	add	sp, #24
   153be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   153c2:	2200      	movs	r2, #0
   153c4:	4641      	mov	r1, r8
   153c6:	4628      	mov	r0, r5
   153c8:	f7ff fec2 	bl	15150 <bt_att_chan_create_pdu>
   153cc:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   153ce:	2800      	cmp	r0, #0
   153d0:	d1d0      	bne.n	15374 <att_write_rsp+0x34>
			return BT_ATT_ERR_UNLIKELY;
   153d2:	240e      	movs	r4, #14
   153d4:	e7f1      	b.n	153ba <att_write_rsp+0x7a>
   153d6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   153da:	463a      	mov	r2, r7
   153dc:	4631      	mov	r1, r6
   153de:	4628      	mov	r0, r5
   153e0:	f010 fa1d 	bl	2581e <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   153e4:	2e18      	cmp	r6, #24
   153e6:	d1e7      	bne.n	153b8 <att_write_rsp+0x78>
   153e8:	f89d 4014 	ldrb.w	r4, [sp, #20]
   153ec:	e7e5      	b.n	153ba <att_write_rsp+0x7a>
	if (data.buf) {
   153ee:	9901      	ldr	r1, [sp, #4]
   153f0:	2900      	cmp	r1, #0
   153f2:	d0e1      	beq.n	153b8 <att_write_rsp+0x78>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   153f4:	4628      	mov	r0, r5
   153f6:	f7ff fd13 	bl	14e20 <bt_att_chan_send_rsp.constprop.0>
   153fa:	e7de      	b.n	153ba <att_write_rsp+0x7a>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   153fc:	2412      	movs	r4, #18
   153fe:	e7dc      	b.n	153ba <att_write_rsp+0x7a>
		return BT_ATT_ERR_INVALID_HANDLE;
   15400:	2401      	movs	r4, #1
   15402:	e7da      	b.n	153ba <att_write_rsp+0x7a>
   15404:	000256ed 	.word	0x000256ed

00015408 <att_signed_write_cmd>:
{
   15408:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1540c:	6887      	ldr	r7, [r0, #8]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1540e:	f3bf 8f5b 	dmb	ish
   15412:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   15416:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1541a:	071b      	lsls	r3, r3, #28
{
   1541c:	b085      	sub	sp, #20
   1541e:	4606      	mov	r6, r0
   15420:	460d      	mov	r5, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   15422:	d418      	bmi.n	15456 <att_signed_write_cmd+0x4e>
	handle = sys_le16_to_cpu(req->handle);
   15424:	4689      	mov	r9, r1
	return net_buf_simple_push(&buf->b, len);
   15426:	2101      	movs	r1, #1
   15428:	f859 3f08 	ldr.w	r3, [r9, #8]!
   1542c:	4648      	mov	r0, r9
   1542e:	f8b3 8000 	ldrh.w	r8, [r3]
   15432:	f011 fef8 	bl	27226 <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
   15436:	4638      	mov	r0, r7
   15438:	4629      	mov	r1, r5
   1543a:	f006 fe69 	bl	1c110 <bt_smp_sign_verify>
	if (err) {
   1543e:	4607      	mov	r7, r0
   15440:	b158      	cbz	r0, 1545a <att_signed_write_cmd+0x52>
   15442:	4912      	ldr	r1, [pc, #72]	; (1548c <att_signed_write_cmd+0x84>)
   15444:	4b12      	ldr	r3, [pc, #72]	; (15490 <att_signed_write_cmd+0x88>)
		BT_ERR("Error verifying data");
   15446:	4813      	ldr	r0, [pc, #76]	; (15494 <att_signed_write_cmd+0x8c>)
   15448:	1ac9      	subs	r1, r1, r3
   1544a:	08c9      	lsrs	r1, r1, #3
   1544c:	0189      	lsls	r1, r1, #6
   1544e:	f041 0101 	orr.w	r1, r1, #1
   15452:	f00e fd06 	bl	23e62 <log_0>
		return 0;
   15456:	2000      	movs	r0, #0
   15458:	e014      	b.n	15484 <att_signed_write_cmd+0x7c>
	return net_buf_simple_pull(&buf->b, len);
   1545a:	2101      	movs	r1, #1
   1545c:	4648      	mov	r0, r9
   1545e:	f011 feea 	bl	27236 <net_buf_simple_pull>
   15462:	2102      	movs	r1, #2
   15464:	4648      	mov	r0, r9
   15466:	f011 fee6 	bl	27236 <net_buf_simple_pull>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data,
   1546a:	89ab      	ldrh	r3, [r5, #12]
   1546c:	3b0c      	subs	r3, #12
   1546e:	b29b      	uxth	r3, r3
   15470:	9302      	str	r3, [sp, #8]
   15472:	68ab      	ldr	r3, [r5, #8]
   15474:	463a      	mov	r2, r7
   15476:	e9cd 7300 	strd	r7, r3, [sp]
   1547a:	4639      	mov	r1, r7
   1547c:	4643      	mov	r3, r8
   1547e:	4630      	mov	r0, r6
   15480:	f7ff ff5e 	bl	15340 <att_write_rsp>
}
   15484:	b005      	add	sp, #20
   15486:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1548a:	bf00      	nop
   1548c:	00028df4 	.word	0x00028df4
   15490:	00028dd4 	.word	0x00028dd4
   15494:	0002a94a 	.word	0x0002a94a

00015498 <bt_att_create_pdu>:
{
   15498:	b570      	push	{r4, r5, r6, lr}
   1549a:	460e      	mov	r6, r1
   1549c:	4615      	mov	r5, r2
	att = att_get(conn);
   1549e:	f7ff fc7f 	bl	14da0 <att_get>
	if (!att) {
   154a2:	b1c0      	cbz	r0, 154d6 <bt_att_create_pdu+0x3e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   154a4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	return list->head;
   154a6:	1c69      	adds	r1, r5, #1
   154a8:	b15b      	cbz	r3, 154c2 <bt_att_create_pdu+0x2a>
   154aa:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   154ae:	d008      	beq.n	154c2 <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   154b0:	681b      	ldr	r3, [r3, #0]
   154b2:	b10b      	cbz	r3, 154b8 <bt_att_create_pdu+0x20>
   154b4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   154b8:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
   154bc:	4291      	cmp	r1, r2
   154be:	d90c      	bls.n	154da <bt_att_create_pdu+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   154c0:	b98b      	cbnz	r3, 154e6 <bt_att_create_pdu+0x4e>
   154c2:	4a0e      	ldr	r2, [pc, #56]	; (154fc <bt_att_create_pdu+0x64>)
   154c4:	4b0e      	ldr	r3, [pc, #56]	; (15500 <bt_att_create_pdu+0x68>)
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   154c6:	480f      	ldr	r0, [pc, #60]	; (15504 <bt_att_create_pdu+0x6c>)
   154c8:	1ad2      	subs	r2, r2, r3
   154ca:	08d2      	lsrs	r2, r2, #3
   154cc:	0192      	lsls	r2, r2, #6
   154ce:	f042 0202 	orr.w	r2, r2, #2
   154d2:	f00e fcd3 	bl	23e7c <log_1>
}
   154d6:	2000      	movs	r0, #0
   154d8:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   154da:	462a      	mov	r2, r5
   154dc:	4631      	mov	r1, r6
}
   154de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   154e2:	f7ff be35 	b.w	15150 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   154e6:	f513 74a2 	adds.w	r4, r3, #324	; 0x144
   154ea:	d004      	beq.n	154f6 <bt_att_create_pdu+0x5e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   154ec:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   154f0:	b10c      	cbz	r4, 154f6 <bt_att_create_pdu+0x5e>
   154f2:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
   154f6:	4618      	mov	r0, r3
   154f8:	4623      	mov	r3, r4
   154fa:	e7dd      	b.n	154b8 <bt_att_create_pdu+0x20>
   154fc:	00028df4 	.word	0x00028df4
   15500:	00028dd4 	.word	0x00028dd4
   15504:	0002a95f 	.word	0x0002a95f

00015508 <att_exec_write_req>:
{
   15508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return att_exec_write_rsp(chan, req->flags);
   1550c:	688b      	ldr	r3, [r1, #8]
	buf->len  = 0U;
   1550e:	4f50      	ldr	r7, [pc, #320]	; (15650 <att_exec_write_req+0x148>)
   15510:	781b      	ldrb	r3, [r3, #0]
{
   15512:	b089      	sub	sp, #36	; 0x24
   15514:	4606      	mov	r6, r0
	return att_exec_write_rsp(chan, req->flags);
   15516:	9305      	str	r3, [sp, #20]
	struct bt_conn *conn = chan->chan.chan.conn;
   15518:	6883      	ldr	r3, [r0, #8]
   1551a:	9306      	str	r3, [sp, #24]
	uint8_t err = 0U;
   1551c:	2400      	movs	r4, #0
	while (!sys_slist_is_empty(&chan->att->prep_queue)) {
   1551e:	6830      	ldr	r0, [r6, #0]
   15520:	6a43      	ldr	r3, [r0, #36]	; 0x24
   15522:	b98b      	cbnz	r3, 15548 <att_exec_write_req+0x40>
	if (err) {
   15524:	2c00      	cmp	r4, #0
   15526:	f040 8089 	bne.w	1563c <att_exec_write_req+0x134>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_EXEC_WRITE_RSP, 0);
   1552a:	2119      	movs	r1, #25
   1552c:	9806      	ldr	r0, [sp, #24]
   1552e:	4622      	mov	r2, r4
   15530:	f7ff ffb2 	bl	15498 <bt_att_create_pdu>
	if (!buf) {
   15534:	4601      	mov	r1, r0
   15536:	2800      	cmp	r0, #0
   15538:	d078      	beq.n	1562c <att_exec_write_req+0x124>
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1553a:	4630      	mov	r0, r6
   1553c:	f7ff fc70 	bl	14e20 <bt_att_chan_send_rsp.constprop.0>
}
   15540:	4620      	mov	r0, r4
   15542:	b009      	add	sp, #36	; 0x24
   15544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf = net_buf_slist_get(&chan->att->prep_queue);
   15548:	3024      	adds	r0, #36	; 0x24
   1554a:	f011 fdf6 	bl	2713a <net_buf_slist_get>
   1554e:	f04f 0300 	mov.w	r3, #0
		handle = data->handle;
   15552:	f8b0 a014 	ldrh.w	sl, [r0, #20]
		net_buf_simple_add_mem(&reassembled_data, buf->data, buf->len);
   15556:	8982      	ldrh	r2, [r0, #12]
   15558:	6881      	ldr	r1, [r0, #8]
   1555a:	80bb      	strh	r3, [r7, #4]
		buf = net_buf_slist_get(&chan->att->prep_queue);
   1555c:	4605      	mov	r5, r0
	buf->data = buf->__buf;
   1555e:	68bb      	ldr	r3, [r7, #8]
		net_buf_simple_add_mem(&reassembled_data, buf->data, buf->len);
   15560:	483b      	ldr	r0, [pc, #236]	; (15650 <att_exec_write_req+0x148>)
   15562:	603b      	str	r3, [r7, #0]
   15564:	f011 fe4e 	bl	27204 <net_buf_simple_add_mem>
					    &chan->att->prep_queue,
   15568:	f8d6 9000 	ldr.w	r9, [r6]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, entry, next, node) {
   1556c:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
   15570:	2c00      	cmp	r4, #0
   15572:	d067      	beq.n	15644 <att_exec_write_req+0x13c>
		err = exec_write_reassemble(handle, data->offset,
   15574:	8aeb      	ldrh	r3, [r5, #22]
   15576:	9307      	str	r3, [sp, #28]
	return node->next;
   15578:	6823      	ldr	r3, [r4, #0]
   1557a:	2b00      	cmp	r3, #0
   1557c:	bf38      	it	cc
   1557e:	2300      	movcc	r3, #0
   15580:	4698      	mov	r8, r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15582:	f04f 0b00 	mov.w	fp, #0
		if (tmp_data->handle == handle) {
   15586:	8aa2      	ldrh	r2, [r4, #20]
   15588:	4552      	cmp	r2, sl
   1558a:	d135      	bne.n	155f8 <att_exec_write_req+0xf0>
			if (tmp_data->offset == 0) {
   1558c:	8ae2      	ldrh	r2, [r4, #22]
   1558e:	2a00      	cmp	r2, #0
   15590:	d058      	beq.n	15644 <att_exec_write_req+0x13c>
			if (tmp_data->offset != buf->len + offset) {
   15592:	88b9      	ldrh	r1, [r7, #4]
   15594:	9b07      	ldr	r3, [sp, #28]
   15596:	1858      	adds	r0, r3, r1
   15598:	4282      	cmp	r2, r0
   1559a:	d149      	bne.n	15630 <att_exec_write_req+0x128>
			if (buf->len + entry->len > buf->size) {
   1559c:	89a2      	ldrh	r2, [r4, #12]
   1559e:	88f8      	ldrh	r0, [r7, #6]
   155a0:	4411      	add	r1, r2
   155a2:	4281      	cmp	r1, r0
   155a4:	dc4c      	bgt.n	15640 <att_exec_write_req+0x138>
			net_buf_simple_add_mem(buf, entry->data, entry->len);
   155a6:	68a1      	ldr	r1, [r4, #8]
   155a8:	4638      	mov	r0, r7
   155aa:	f011 fe2b 	bl	27204 <net_buf_simple_add_mem>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   155ae:	6822      	ldr	r2, [r4, #0]
   155b0:	f1bb 0f00 	cmp.w	fp, #0
   155b4:	d117      	bne.n	155e6 <att_exec_write_req+0xde>
   155b6:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
	list->head = node;
   155ba:	f8c9 2024 	str.w	r2, [r9, #36]	; 0x24
Z_GENLIST_REMOVE(slist, snode)
   155be:	428c      	cmp	r4, r1
   155c0:	d101      	bne.n	155c6 <att_exec_write_req+0xbe>
	list->tail = node;
   155c2:	f8c9 2028 	str.w	r2, [r9, #40]	; 0x28
	parent->next = child;
   155c6:	2300      	movs	r3, #0
   155c8:	6023      	str	r3, [r4, #0]
			net_buf_unref(entry);
   155ca:	4620      	mov	r0, r4
   155cc:	f007 fd88 	bl	1d0e0 <net_buf_unref>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, entry, next, node) {
   155d0:	f1b8 0f00 	cmp.w	r8, #0
   155d4:	d036      	beq.n	15644 <att_exec_write_req+0x13c>
	return node->next;
   155d6:	f8d8 2000 	ldr.w	r2, [r8]
   155da:	2a00      	cmp	r2, #0
   155dc:	bf38      	it	cc
   155de:	2200      	movcc	r2, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   155e0:	4644      	mov	r4, r8
   155e2:	4690      	mov	r8, r2
   155e4:	e7cf      	b.n	15586 <att_exec_write_req+0x7e>
	parent->next = child;
   155e6:	f8cb 2000 	str.w	r2, [fp]
Z_GENLIST_REMOVE(slist, snode)
   155ea:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
   155ee:	4294      	cmp	r4, r2
	list->tail = node;
   155f0:	bf08      	it	eq
   155f2:	f8c9 b028 	streq.w	fp, [r9, #40]	; 0x28
}
   155f6:	e7e6      	b.n	155c6 <att_exec_write_req+0xbe>
			prev = &entry->node;
   155f8:	46a3      	mov	fp, r4
   155fa:	e7e9      	b.n	155d0 <att_exec_write_req+0xc8>
			err = att_write_rsp(chan, BT_ATT_OP_EXEC_WRITE_REQ, 0,
   155fc:	88bb      	ldrh	r3, [r7, #4]
   155fe:	9302      	str	r3, [sp, #8]
   15600:	683b      	ldr	r3, [r7, #0]
   15602:	9301      	str	r3, [sp, #4]
   15604:	8aeb      	ldrh	r3, [r5, #22]
   15606:	9300      	str	r3, [sp, #0]
   15608:	2200      	movs	r2, #0
   1560a:	4653      	mov	r3, sl
   1560c:	2118      	movs	r1, #24
   1560e:	4630      	mov	r0, r6
   15610:	f7ff fe96 	bl	15340 <att_write_rsp>
			if (err) {
   15614:	4604      	mov	r4, r0
   15616:	b128      	cbz	r0, 15624 <att_exec_write_req+0x11c>
	if (!req) {
   15618:	4603      	mov	r3, r0
   1561a:	8aaa      	ldrh	r2, [r5, #20]
   1561c:	2118      	movs	r1, #24
   1561e:	4630      	mov	r0, r6
   15620:	f010 f8fd 	bl	2581e <send_err_rsp.part.0>
		net_buf_unref(buf);
   15624:	4628      	mov	r0, r5
   15626:	f007 fd5b 	bl	1d0e0 <net_buf_unref>
   1562a:	e778      	b.n	1551e <att_exec_write_req+0x16>
		return BT_ATT_ERR_UNLIKELY;
   1562c:	240e      	movs	r4, #14
   1562e:	e787      	b.n	15540 <att_exec_write_req+0x38>
				return BT_ATT_ERR_INVALID_OFFSET;
   15630:	2307      	movs	r3, #7
	if (!req) {
   15632:	4652      	mov	r2, sl
   15634:	2118      	movs	r1, #24
   15636:	4630      	mov	r0, r6
   15638:	f010 f8f1 	bl	2581e <send_err_rsp.part.0>
			return 0;
   1563c:	2400      	movs	r4, #0
	return att_exec_write_rsp(chan, req->flags);
   1563e:	e77f      	b.n	15540 <att_exec_write_req+0x38>
				return BT_ATT_ERR_INVALID_ATTRIBUTE_LEN;
   15640:	230d      	movs	r3, #13
   15642:	e7f6      	b.n	15632 <att_exec_write_req+0x12a>
		if (!err && flags == BT_ATT_FLAG_EXEC) {
   15644:	9b05      	ldr	r3, [sp, #20]
   15646:	2b01      	cmp	r3, #1
   15648:	d0d8      	beq.n	155fc <att_exec_write_req+0xf4>
		err = exec_write_reassemble(handle, data->offset,
   1564a:	2400      	movs	r4, #0
   1564c:	e7ea      	b.n	15624 <att_exec_write_req+0x11c>
   1564e:	bf00      	nop
   15650:	200005ac 	.word	0x200005ac

00015654 <att_prepare_write_req>:
{
   15654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15658:	460c      	mov	r4, r1
   1565a:	b087      	sub	sp, #28
   1565c:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1565e:	2104      	movs	r1, #4
   15660:	f104 0008 	add.w	r0, r4, #8
   15664:	f011 fdef 	bl	27246 <net_buf_simple_pull_mem>
	struct bt_conn *conn = chan->chan.chan.conn;
   15668:	f8d5 b008 	ldr.w	fp, [r5, #8]
	handle = sys_le16_to_cpu(req->handle);
   1566c:	f8b0 a000 	ldrh.w	sl, [r0]
	offset = sys_le16_to_cpu(req->offset);
   15670:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	return att_prep_write_rsp(chan, handle, offset, buf->data, buf->len);
   15674:	f8d4 8008 	ldr.w	r8, [r4, #8]
   15678:	89a7      	ldrh	r7, [r4, #12]
	if (!bt_gatt_change_aware(conn, true)) {
   1567a:	2101      	movs	r1, #1
   1567c:	4658      	mov	r0, fp
	handle = sys_le16_to_cpu(req->handle);
   1567e:	fa1f f68a 	uxth.w	r6, sl
	if (!bt_gatt_change_aware(conn, true)) {
   15682:	f010 fde3 	bl	2624c <bt_gatt_change_aware>
   15686:	2800      	cmp	r0, #0
   15688:	d04a      	beq.n	15720 <att_prepare_write_req+0xcc>
	if (!handle) {
   1568a:	2e00      	cmp	r6, #0
   1568c:	d04a      	beq.n	15724 <att_prepare_write_req+0xd0>
	(void)memset(&data, 0, sizeof(data));
   1568e:	2214      	movs	r2, #20
   15690:	2100      	movs	r1, #0
   15692:	a801      	add	r0, sp, #4
   15694:	f00f fbff 	bl	24e96 <memset>
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   15698:	2301      	movs	r3, #1
   1569a:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
   1569e:	4a23      	ldr	r2, [pc, #140]	; (1572c <att_prepare_write_req+0xd8>)
	data.conn = conn;
   156a0:	f8cd b004 	str.w	fp, [sp, #4]
	data.len = len;
   156a4:	b2ff      	uxtb	r7, r7
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
   156a6:	ab01      	add	r3, sp, #4
   156a8:	4631      	mov	r1, r6
   156aa:	4630      	mov	r0, r6
	data.offset = offset;
   156ac:	f8ad 9012 	strh.w	r9, [sp, #18]
	data.value = value;
   156b0:	f8cd 800c 	str.w	r8, [sp, #12]
	data.len = len;
   156b4:	f8ad 7010 	strh.w	r7, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
   156b8:	f00f fe74 	bl	253a4 <bt_gatt_foreach_attr>
	if (data.err) {
   156bc:	f89d 4014 	ldrb.w	r4, [sp, #20]
   156c0:	b154      	cbz	r4, 156d8 <att_prepare_write_req+0x84>
	if (!req) {
   156c2:	4623      	mov	r3, r4
   156c4:	4632      	mov	r2, r6
   156c6:	2116      	movs	r1, #22
   156c8:	4628      	mov	r0, r5
   156ca:	f010 f8a8 	bl	2581e <send_err_rsp.part.0>
		return 0;
   156ce:	2400      	movs	r4, #0
}
   156d0:	4620      	mov	r0, r4
   156d2:	b007      	add	sp, #28
   156d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_buf_slist_put(&chan->att->prep_queue, data.buf);
   156d8:	6828      	ldr	r0, [r5, #0]
   156da:	9902      	ldr	r1, [sp, #8]
   156dc:	3024      	adds	r0, #36	; 0x24
   156de:	f011 fd0f 	bl	27100 <net_buf_slist_put>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_PREPARE_WRITE_RSP, 0);
   156e2:	4622      	mov	r2, r4
   156e4:	2117      	movs	r1, #23
   156e6:	4658      	mov	r0, fp
   156e8:	f7ff fed6 	bl	15498 <bt_att_create_pdu>
   156ec:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   156ee:	b1d8      	cbz	r0, 15728 <att_prepare_write_req+0xd4>
	return net_buf_simple_add(&buf->b, len);
   156f0:	2104      	movs	r1, #4
   156f2:	3008      	adds	r0, #8
   156f4:	f011 fd80 	bl	271f8 <net_buf_simple_add>
   156f8:	4606      	mov	r6, r0
	rsp->handle = sys_cpu_to_le16(handle);
   156fa:	f8a0 a000 	strh.w	sl, [r0]
	rsp->offset = sys_cpu_to_le16(offset);
   156fe:	f8a0 9002 	strh.w	r9, [r0, #2]
   15702:	9802      	ldr	r0, [sp, #8]
   15704:	4639      	mov	r1, r7
   15706:	3008      	adds	r0, #8
   15708:	f011 fd76 	bl	271f8 <net_buf_simple_add>
	memcpy(rsp->value, value, len);
   1570c:	4641      	mov	r1, r8
   1570e:	463a      	mov	r2, r7
   15710:	1d30      	adds	r0, r6, #4
   15712:	f00f fbb5 	bl	24e80 <memcpy>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   15716:	9902      	ldr	r1, [sp, #8]
   15718:	4628      	mov	r0, r5
   1571a:	f7ff fb81 	bl	14e20 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   1571e:	e7d7      	b.n	156d0 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   15720:	2412      	movs	r4, #18
   15722:	e7d5      	b.n	156d0 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_INVALID_HANDLE;
   15724:	2401      	movs	r4, #1
   15726:	e7d3      	b.n	156d0 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_UNLIKELY;
   15728:	240e      	movs	r4, #14
   1572a:	e7d1      	b.n	156d0 <att_prepare_write_req+0x7c>
   1572c:	000150cd 	.word	0x000150cd

00015730 <att_read_group_req>:
{
   15730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   15734:	7b0c      	ldrb	r4, [r1, #12]
   15736:	3c04      	subs	r4, #4
   15738:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   1573a:	2c02      	cmp	r4, #2
{
   1573c:	4605      	mov	r5, r0
   1573e:	b08c      	sub	sp, #48	; 0x30
   15740:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   15742:	d001      	beq.n	15748 <att_read_group_req+0x18>
   15744:	2c10      	cmp	r4, #16
   15746:	d16e      	bne.n	15826 <att_read_group_req+0xf6>
	return net_buf_simple_pull_mem(&buf->b, len);
   15748:	2104      	movs	r1, #4
   1574a:	3008      	adds	r0, #8
   1574c:	f011 fd7b 	bl	27246 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   15750:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   15754:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   15756:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   15758:	1d01      	adds	r1, r0, #4
   1575a:	4622      	mov	r2, r4
   1575c:	4640      	mov	r0, r8
   1575e:	f011 fc83 	bl	27068 <bt_uuid_create>
   15762:	2800      	cmp	r0, #0
   15764:	d061      	beq.n	1582a <att_read_group_req+0xfa>
	if (!start || !end) {
   15766:	2e00      	cmp	r6, #0
   15768:	d03a      	beq.n	157e0 <att_read_group_req+0xb0>
   1576a:	2400      	movs	r4, #0
   1576c:	2f00      	cmp	r7, #0
   1576e:	d036      	beq.n	157de <att_read_group_req+0xae>
	if (start > end) {
   15770:	42b7      	cmp	r7, r6
   15772:	d335      	bcc.n	157e0 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   15774:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   15778:	a901      	add	r1, sp, #4
   1577a:	4640      	mov	r0, r8
   1577c:	f88d 4004 	strb.w	r4, [sp, #4]
   15780:	f8ad 3006 	strh.w	r3, [sp, #6]
   15784:	f011 fc46 	bl	27014 <bt_uuid_cmp>
   15788:	2800      	cmp	r0, #0
   1578a:	d134      	bne.n	157f6 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   1578c:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   1578e:	2214      	movs	r2, #20
   15790:	2100      	movs	r1, #0
   15792:	a807      	add	r0, sp, #28
   15794:	f00f fb7f 	bl	24e96 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   15798:	2201      	movs	r2, #1
   1579a:	2111      	movs	r1, #17
   1579c:	4620      	mov	r0, r4
   1579e:	f7ff fe7b 	bl	15498 <bt_att_create_pdu>
   157a2:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   157a4:	2800      	cmp	r0, #0
   157a6:	d040      	beq.n	1582a <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
   157a8:	2101      	movs	r1, #1
   157aa:	3008      	adds	r0, #8
	data.uuid = uuid;
   157ac:	e9cd 5807 	strd	r5, r8, [sp, #28]
   157b0:	f011 fd22 	bl	271f8 <net_buf_simple_add>
	data.rsp->len = 0U;
   157b4:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   157b8:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   157ba:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   157bc:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   157c0:	4a1b      	ldr	r2, [pc, #108]	; (15830 <att_read_group_req+0x100>)
	data.group = NULL;
   157c2:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   157c6:	4639      	mov	r1, r7
   157c8:	4630      	mov	r0, r6
   157ca:	f00f fdeb 	bl	253a4 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   157ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   157d0:	781c      	ldrb	r4, [r3, #0]
   157d2:	bb1c      	cbnz	r4, 1581c <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   157d4:	9809      	ldr	r0, [sp, #36]	; 0x24
   157d6:	f007 fc83 	bl	1d0e0 <net_buf_unref>
	if (!req) {
   157da:	230a      	movs	r3, #10
   157dc:	e018      	b.n	15810 <att_read_group_req+0xe0>
			*err = 0U;
   157de:	463e      	mov	r6, r7
	if (!req) {
   157e0:	2301      	movs	r3, #1
   157e2:	4632      	mov	r2, r6
   157e4:	2110      	movs	r1, #16
   157e6:	4628      	mov	r0, r5
   157e8:	f010 f819 	bl	2581e <send_err_rsp.part.0>
		return 0;
   157ec:	2400      	movs	r4, #0
}
   157ee:	4620      	mov	r0, r4
   157f0:	b00c      	add	sp, #48	; 0x30
   157f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   157f6:	f642 0301 	movw	r3, #10241	; 0x2801
   157fa:	a907      	add	r1, sp, #28
   157fc:	4640      	mov	r0, r8
   157fe:	f88d 401c 	strb.w	r4, [sp, #28]
   15802:	f8ad 301e 	strh.w	r3, [sp, #30]
   15806:	f011 fc05 	bl	27014 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1580a:	2800      	cmp	r0, #0
   1580c:	d0be      	beq.n	1578c <att_read_group_req+0x5c>
	if (!req) {
   1580e:	2310      	movs	r3, #16
   15810:	4632      	mov	r2, r6
   15812:	2110      	movs	r1, #16
   15814:	4628      	mov	r0, r5
   15816:	f010 f802 	bl	2581e <send_err_rsp.part.0>
		return 0;
   1581a:	e7e8      	b.n	157ee <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1581c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1581e:	4628      	mov	r0, r5
   15820:	f7ff fafe 	bl	14e20 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   15824:	e7e2      	b.n	157ec <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   15826:	2404      	movs	r4, #4
   15828:	e7e1      	b.n	157ee <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   1582a:	240e      	movs	r4, #14
   1582c:	e7df      	b.n	157ee <att_read_group_req+0xbe>
   1582e:	bf00      	nop
   15830:	00014f0d 	.word	0x00014f0d

00015834 <att_read_mult_req>:
{
   15834:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   15838:	6886      	ldr	r6, [r0, #8]
{
   1583a:	b085      	sub	sp, #20
   1583c:	4604      	mov	r4, r0
   1583e:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   15840:	4630      	mov	r0, r6
   15842:	2101      	movs	r1, #1
   15844:	f010 fd02 	bl	2624c <bt_gatt_change_aware>
   15848:	b3b8      	cbz	r0, 158ba <att_read_mult_req+0x86>
	(void)memset(&data, 0, sizeof(data));
   1584a:	2210      	movs	r2, #16
   1584c:	2100      	movs	r1, #0
   1584e:	4668      	mov	r0, sp
   15850:	f00f fb21 	bl	24e96 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   15854:	2200      	movs	r2, #0
   15856:	210f      	movs	r1, #15
   15858:	4630      	mov	r0, r6
   1585a:	f7ff fe1d 	bl	15498 <bt_att_create_pdu>
   1585e:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   15860:	b368      	cbz	r0, 158be <att_read_mult_req+0x8a>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15862:	f8df 9060 	ldr.w	r9, [pc, #96]	; 158c4 <att_read_mult_req+0x90>
	data.chan = chan;
   15866:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   15868:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1586c:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   15870:	89ab      	ldrh	r3, [r5, #12]
   15872:	2b01      	cmp	r3, #1
   15874:	d804      	bhi.n	15880 <att_read_mult_req+0x4c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   15876:	9902      	ldr	r1, [sp, #8]
   15878:	4620      	mov	r0, r4
   1587a:	f7ff fad1 	bl	14e20 <bt_att_chan_send_rsp.constprop.0>
   1587e:	e018      	b.n	158b2 <att_read_mult_req+0x7e>
   15880:	4638      	mov	r0, r7
   15882:	f011 fce8 	bl	27256 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15886:	466b      	mov	r3, sp
   15888:	464a      	mov	r2, r9
   1588a:	4601      	mov	r1, r0
   1588c:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1588e:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15892:	f00f fd87 	bl	253a4 <bt_gatt_foreach_attr>
		if (data.err) {
   15896:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1589a:	2b00      	cmp	r3, #0
   1589c:	d0e8      	beq.n	15870 <att_read_mult_req+0x3c>
			net_buf_unref(data.buf);
   1589e:	9802      	ldr	r0, [sp, #8]
   158a0:	f007 fc1e 	bl	1d0e0 <net_buf_unref>
	if (!req) {
   158a4:	f89d 300c 	ldrb.w	r3, [sp, #12]
   158a8:	4632      	mov	r2, r6
   158aa:	210e      	movs	r1, #14
   158ac:	4620      	mov	r0, r4
   158ae:	f00f ffb6 	bl	2581e <send_err_rsp.part.0>
	return 0;
   158b2:	2000      	movs	r0, #0
}
   158b4:	b005      	add	sp, #20
   158b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   158ba:	2012      	movs	r0, #18
   158bc:	e7fa      	b.n	158b4 <att_read_mult_req+0x80>
		return BT_ATT_ERR_UNLIKELY;
   158be:	200e      	movs	r0, #14
   158c0:	e7f8      	b.n	158b4 <att_read_mult_req+0x80>
   158c2:	bf00      	nop
   158c4:	000257cb 	.word	0x000257cb

000158c8 <att_read_rsp>:
{
   158c8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   158cc:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   158d0:	4605      	mov	r5, r0
   158d2:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   158d4:	4640      	mov	r0, r8
   158d6:	2101      	movs	r1, #1
{
   158d8:	4614      	mov	r4, r2
   158da:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   158dc:	f010 fcb6 	bl	2624c <bt_gatt_change_aware>
   158e0:	b388      	cbz	r0, 15946 <att_read_rsp+0x7e>
	if (!handle) {
   158e2:	b396      	cbz	r6, 1594a <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
   158e4:	2210      	movs	r2, #16
   158e6:	2100      	movs	r1, #0
   158e8:	4668      	mov	r0, sp
   158ea:	f00f fad4 	bl	24e96 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   158ee:	2200      	movs	r2, #0
   158f0:	4621      	mov	r1, r4
   158f2:	4640      	mov	r0, r8
   158f4:	f7ff fdd0 	bl	15498 <bt_att_create_pdu>
   158f8:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   158fa:	b340      	cbz	r0, 1594e <att_read_rsp+0x86>
	data.offset = offset;
   158fc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   15900:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   15904:	2301      	movs	r3, #1
   15906:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1590a:	4a12      	ldr	r2, [pc, #72]	; (15954 <att_read_rsp+0x8c>)
	data.chan = chan;
   1590c:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1590e:	466b      	mov	r3, sp
   15910:	4631      	mov	r1, r6
   15912:	4630      	mov	r0, r6
   15914:	f00f fd46 	bl	253a4 <bt_gatt_foreach_attr>
	if (data.err) {
   15918:	f89d 400c 	ldrb.w	r4, [sp, #12]
   1591c:	b174      	cbz	r4, 1593c <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   1591e:	9802      	ldr	r0, [sp, #8]
   15920:	f007 fbde 	bl	1d0e0 <net_buf_unref>
	if (!req) {
   15924:	f89d 300c 	ldrb.w	r3, [sp, #12]
   15928:	4632      	mov	r2, r6
   1592a:	4639      	mov	r1, r7
   1592c:	4628      	mov	r0, r5
   1592e:	f00f ff76 	bl	2581e <send_err_rsp.part.0>
		return 0;
   15932:	2400      	movs	r4, #0
}
   15934:	4620      	mov	r0, r4
   15936:	b004      	add	sp, #16
   15938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1593c:	9902      	ldr	r1, [sp, #8]
   1593e:	4628      	mov	r0, r5
   15940:	f7ff fa6e 	bl	14e20 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   15944:	e7f6      	b.n	15934 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   15946:	2412      	movs	r4, #18
   15948:	e7f4      	b.n	15934 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   1594a:	2401      	movs	r4, #1
   1594c:	e7f2      	b.n	15934 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   1594e:	240e      	movs	r4, #14
   15950:	e7f0      	b.n	15934 <att_read_rsp+0x6c>
   15952:	bf00      	nop
   15954:	000257cb 	.word	0x000257cb

00015958 <att_read_type_req>:
{
   15958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1595c:	7b0c      	ldrb	r4, [r1, #12]
   1595e:	3c04      	subs	r4, #4
   15960:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   15962:	2c02      	cmp	r4, #2
{
   15964:	4605      	mov	r5, r0
   15966:	b08c      	sub	sp, #48	; 0x30
   15968:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   1596a:	d001      	beq.n	15970 <att_read_type_req+0x18>
   1596c:	2c10      	cmp	r4, #16
   1596e:	d14f      	bne.n	15a10 <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
   15970:	2104      	movs	r1, #4
   15972:	3008      	adds	r0, #8
   15974:	f011 fc67 	bl	27246 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   15978:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   1597c:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1597e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   15980:	1d01      	adds	r1, r0, #4
   15982:	4622      	mov	r2, r4
   15984:	4640      	mov	r0, r8
   15986:	f011 fb6f 	bl	27068 <bt_uuid_create>
   1598a:	b188      	cbz	r0, 159b0 <att_read_type_req+0x58>
	if (!start || !end) {
   1598c:	b19e      	cbz	r6, 159b6 <att_read_type_req+0x5e>
   1598e:	b18f      	cbz	r7, 159b4 <att_read_type_req+0x5c>
	if (start > end) {
   15990:	42be      	cmp	r6, r7
   15992:	d810      	bhi.n	159b6 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   15994:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   15996:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   15998:	2100      	movs	r1, #0
   1599a:	eb0d 0002 	add.w	r0, sp, r2
   1599e:	f00f fa7a 	bl	24e96 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   159a2:	2201      	movs	r2, #1
   159a4:	2109      	movs	r1, #9
   159a6:	4620      	mov	r0, r4
   159a8:	f7ff fd76 	bl	15498 <bt_att_create_pdu>
   159ac:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   159ae:	b968      	cbnz	r0, 159cc <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   159b0:	240e      	movs	r4, #14
   159b2:	e007      	b.n	159c4 <att_read_type_req+0x6c>
			*err = 0U;
   159b4:	463e      	mov	r6, r7
	if (!req) {
   159b6:	2301      	movs	r3, #1
   159b8:	4632      	mov	r2, r6
   159ba:	2108      	movs	r1, #8
   159bc:	4628      	mov	r0, r5
   159be:	f00f ff2e 	bl	2581e <send_err_rsp.part.0>
		return 0;
   159c2:	2400      	movs	r4, #0
}
   159c4:	4620      	mov	r0, r4
   159c6:	b00c      	add	sp, #48	; 0x30
   159c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   159cc:	2101      	movs	r1, #1
   159ce:	3008      	adds	r0, #8
	data.uuid = uuid;
   159d0:	e9cd 5806 	strd	r5, r8, [sp, #24]
   159d4:	f011 fc10 	bl	271f8 <net_buf_simple_add>
	data.rsp->len = 0U;
   159d8:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   159dc:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   159de:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   159e0:	4a0c      	ldr	r2, [pc, #48]	; (15a14 <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
   159e2:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   159e6:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   159e8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   159ec:	4630      	mov	r0, r6
   159ee:	ab06      	add	r3, sp, #24
   159f0:	f00f fcd8 	bl	253a4 <bt_gatt_foreach_attr>
	if (data.err) {
   159f4:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   159f8:	b12c      	cbz	r4, 15a06 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   159fa:	9808      	ldr	r0, [sp, #32]
   159fc:	f007 fb70 	bl	1d0e0 <net_buf_unref>
	if (!req) {
   15a00:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   15a04:	e7d8      	b.n	159b8 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   15a06:	9908      	ldr	r1, [sp, #32]
   15a08:	4628      	mov	r0, r5
   15a0a:	f7ff fa09 	bl	14e20 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   15a0e:	e7d9      	b.n	159c4 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   15a10:	2404      	movs	r4, #4
   15a12:	e7d7      	b.n	159c4 <att_read_type_req+0x6c>
   15a14:	00014fb9 	.word	0x00014fb9

00015a18 <att_find_type_req>:
{
   15a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15a1c:	4688      	mov	r8, r1
   15a1e:	b086      	sub	sp, #24
   15a20:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   15a22:	2106      	movs	r1, #6
   15a24:	f108 0008 	add.w	r0, r8, #8
   15a28:	f011 fc0d 	bl	27246 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   15a2c:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   15a2e:	b317      	cbz	r7, 15a76 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   15a30:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   15a34:	f1b9 0f00 	cmp.w	r9, #0
   15a38:	d01c      	beq.n	15a74 <att_find_type_req+0x5c>
	if (start > end) {
   15a3a:	45b9      	cmp	r9, r7
   15a3c:	d31b      	bcc.n	15a76 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   15a3e:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   15a40:	f8ad 3002 	strh.w	r3, [sp, #2]
   15a44:	2400      	movs	r4, #0
   15a46:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   15a4a:	a901      	add	r1, sp, #4
   15a4c:	4668      	mov	r0, sp
	value = buf->data;
   15a4e:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   15a52:	f88d 4000 	strb.w	r4, [sp]
   15a56:	f88d 4004 	strb.w	r4, [sp, #4]
   15a5a:	f8ad 3006 	strh.w	r3, [sp, #6]
   15a5e:	f011 fad9 	bl	27014 <bt_uuid_cmp>
   15a62:	4606      	mov	r6, r0
   15a64:	b190      	cbz	r0, 15a8c <att_find_type_req+0x74>
	if (!req) {
   15a66:	230a      	movs	r3, #10
   15a68:	463a      	mov	r2, r7
   15a6a:	2106      	movs	r1, #6
   15a6c:	4628      	mov	r0, r5
   15a6e:	f00f fed6 	bl	2581e <send_err_rsp.part.0>
		return 0;
   15a72:	e007      	b.n	15a84 <att_find_type_req+0x6c>
			*err = 0U;
   15a74:	464f      	mov	r7, r9
	if (!req) {
   15a76:	2301      	movs	r3, #1
   15a78:	463a      	mov	r2, r7
   15a7a:	2106      	movs	r1, #6
   15a7c:	4628      	mov	r0, r5
   15a7e:	f00f fece 	bl	2581e <send_err_rsp.part.0>
		return 0;
   15a82:	2400      	movs	r4, #0
}
   15a84:	4620      	mov	r0, r4
   15a86:	b006      	add	sp, #24
   15a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   15a8c:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   15a90:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   15a94:	4601      	mov	r1, r0
   15a96:	2214      	movs	r2, #20
   15a98:	a801      	add	r0, sp, #4
   15a9a:	f00f f9fc 	bl	24e96 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   15a9e:	4632      	mov	r2, r6
   15aa0:	2107      	movs	r1, #7
   15aa2:	4640      	mov	r0, r8
   15aa4:	f7ff fcf8 	bl	15498 <bt_att_create_pdu>
   15aa8:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   15aaa:	b1d8      	cbz	r0, 15ae4 <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   15aac:	230a      	movs	r3, #10
   15aae:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   15ab2:	4a0d      	ldr	r2, [pc, #52]	; (15ae8 <att_find_type_req+0xd0>)
	data.value_len = value_len;
   15ab4:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   15ab8:	ab01      	add	r3, sp, #4
   15aba:	4649      	mov	r1, r9
   15abc:	4638      	mov	r0, r7
	data.value = value;
   15abe:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   15ac2:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   15ac4:	f00f fc6e 	bl	253a4 <bt_gatt_foreach_attr>
	if (data.err) {
   15ac8:	f89d 4015 	ldrb.w	r4, [sp, #21]
   15acc:	b12c      	cbz	r4, 15ada <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   15ace:	9802      	ldr	r0, [sp, #8]
   15ad0:	f007 fb06 	bl	1d0e0 <net_buf_unref>
	if (!req) {
   15ad4:	f89d 3015 	ldrb.w	r3, [sp, #21]
   15ad8:	e7ce      	b.n	15a78 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   15ada:	9902      	ldr	r1, [sp, #8]
   15adc:	4628      	mov	r0, r5
   15ade:	f7ff f99f 	bl	14e20 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   15ae2:	e7cf      	b.n	15a84 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   15ae4:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   15ae6:	e7cd      	b.n	15a84 <att_find_type_req+0x6c>
   15ae8:	00014c3d 	.word	0x00014c3d

00015aec <att_find_info_req>:
{
   15aec:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   15aee:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   15af0:	881e      	ldrh	r6, [r3, #0]
{
   15af2:	b085      	sub	sp, #20
   15af4:	4605      	mov	r5, r0
	if (!start || !end) {
   15af6:	b19e      	cbz	r6, 15b20 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   15af8:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   15afa:	b184      	cbz	r4, 15b1e <att_find_info_req+0x32>
	if (start > end) {
   15afc:	42a6      	cmp	r6, r4
   15afe:	d80f      	bhi.n	15b20 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   15b00:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   15b02:	2210      	movs	r2, #16
   15b04:	2100      	movs	r1, #0
   15b06:	4668      	mov	r0, sp
   15b08:	f00f f9c5 	bl	24e96 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   15b0c:	2200      	movs	r2, #0
   15b0e:	2105      	movs	r1, #5
   15b10:	4638      	mov	r0, r7
   15b12:	f7ff fcc1 	bl	15498 <bt_att_create_pdu>
   15b16:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   15b18:	b958      	cbnz	r0, 15b32 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   15b1a:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   15b1c:	e007      	b.n	15b2e <att_find_info_req+0x42>
			*err = 0U;
   15b1e:	4626      	mov	r6, r4
	if (!req) {
   15b20:	2301      	movs	r3, #1
   15b22:	4632      	mov	r2, r6
   15b24:	2104      	movs	r1, #4
   15b26:	4628      	mov	r0, r5
   15b28:	f00f fe79 	bl	2581e <send_err_rsp.part.0>
	return 0;
   15b2c:	2000      	movs	r0, #0
}
   15b2e:	b005      	add	sp, #20
   15b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   15b32:	4621      	mov	r1, r4
   15b34:	4a08      	ldr	r2, [pc, #32]	; (15b58 <att_find_info_req+0x6c>)
	data.chan = chan;
   15b36:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   15b38:	466b      	mov	r3, sp
   15b3a:	4630      	mov	r0, r6
   15b3c:	f00f fc32 	bl	253a4 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   15b40:	9c02      	ldr	r4, [sp, #8]
   15b42:	b924      	cbnz	r4, 15b4e <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   15b44:	9801      	ldr	r0, [sp, #4]
   15b46:	f007 facb 	bl	1d0e0 <net_buf_unref>
	if (!req) {
   15b4a:	230a      	movs	r3, #10
   15b4c:	e7e9      	b.n	15b22 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   15b4e:	9901      	ldr	r1, [sp, #4]
   15b50:	4628      	mov	r0, r5
   15b52:	f7ff f965 	bl	14e20 <bt_att_chan_send_rsp.constprop.0>
   15b56:	e7e9      	b.n	15b2c <att_find_info_req+0x40>
   15b58:	000253bb 	.word	0x000253bb

00015b5c <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   15b5c:	b513      	push	{r0, r1, r4, lr}
   15b5e:	4602      	mov	r2, r0
   15b60:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   15b62:	4808      	ldr	r0, [pc, #32]	; (15b84 <bt_att_req_alloc+0x28>)
   15b64:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   15b66:	2400      	movs	r4, #0
   15b68:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   15b6a:	f00b fa9f 	bl	210ac <k_mem_slab_alloc>
   15b6e:	4601      	mov	r1, r0
   15b70:	b930      	cbnz	r0, 15b80 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   15b72:	9801      	ldr	r0, [sp, #4]
   15b74:	221c      	movs	r2, #28
   15b76:	f00f f98e 	bl	24e96 <memset>

	return req;
   15b7a:	9801      	ldr	r0, [sp, #4]
}
   15b7c:	b002      	add	sp, #8
   15b7e:	bd10      	pop	{r4, pc}
		return NULL;
   15b80:	4620      	mov	r0, r4
   15b82:	e7fb      	b.n	15b7c <bt_att_req_alloc+0x20>
   15b84:	20000948 	.word	0x20000948

00015b88 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   15b88:	b507      	push	{r0, r1, r2, lr}
   15b8a:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   15b8c:	6880      	ldr	r0, [r0, #8]
   15b8e:	b120      	cbz	r0, 15b9a <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
   15b90:	f007 faa6 	bl	1d0e0 <net_buf_unref>
		req->buf = NULL;
   15b94:	9b01      	ldr	r3, [sp, #4]
   15b96:	2200      	movs	r2, #0
   15b98:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   15b9a:	4803      	ldr	r0, [pc, #12]	; (15ba8 <bt_att_req_free+0x20>)
   15b9c:	a901      	add	r1, sp, #4
   15b9e:	f012 f9cb 	bl	27f38 <k_mem_slab_free>
}
   15ba2:	b003      	add	sp, #12
   15ba4:	f85d fb04 	ldr.w	pc, [sp], #4
   15ba8:	20000948 	.word	0x20000948

00015bac <att_handle_rsp>:
{
   15bac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15bb0:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   15bb2:	f500 7088 	add.w	r0, r0, #272	; 0x110
{
   15bb6:	460f      	mov	r7, r1
   15bb8:	4690      	mov	r8, r2
   15bba:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
   15bbc:	f012 fe73 	bl	288a6 <k_work_cancel_delayable>
	if (!chan->req) {
   15bc0:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
   15bc4:	b9e5      	cbnz	r5, 15c00 <att_handle_rsp+0x54>
   15bc6:	4919      	ldr	r1, [pc, #100]	; (15c2c <att_handle_rsp+0x80>)
   15bc8:	4819      	ldr	r0, [pc, #100]	; (15c30 <att_handle_rsp+0x84>)
   15bca:	1a40      	subs	r0, r0, r1
   15bcc:	08c0      	lsrs	r0, r0, #3
		BT_WARN("No pending ATT request");
   15bce:	0180      	lsls	r0, r0, #6
   15bd0:	f040 0102 	orr.w	r1, r0, #2
   15bd4:	4817      	ldr	r0, [pc, #92]	; (15c34 <att_handle_rsp+0x88>)
   15bd6:	f00e f944 	bl	23e62 <log_0>
	bt_att_func_t func = NULL;
   15bda:	46aa      	mov	sl, r5
	att_req_send_process(chan->att);
   15bdc:	6820      	ldr	r0, [r4, #0]
   15bde:	f00f fd59 	bl	25694 <att_req_send_process>
	if (func) {
   15be2:	f1ba 0f00 	cmp.w	sl, #0
   15be6:	d007      	beq.n	15bf8 <att_handle_rsp+0x4c>
		func(chan->att->conn, err, pdu, len, params);
   15be8:	6820      	ldr	r0, [r4, #0]
   15bea:	f8cd 9000 	str.w	r9, [sp]
   15bee:	6800      	ldr	r0, [r0, #0]
   15bf0:	4643      	mov	r3, r8
   15bf2:	463a      	mov	r2, r7
   15bf4:	4631      	mov	r1, r6
   15bf6:	47d0      	blx	sl
}
   15bf8:	2000      	movs	r0, #0
   15bfa:	b003      	add	sp, #12
   15bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
   15c00:	4b0d      	ldr	r3, [pc, #52]	; (15c38 <att_handle_rsp+0x8c>)
   15c02:	429d      	cmp	r5, r3
   15c04:	f04f 0b00 	mov.w	fp, #0
   15c08:	d103      	bne.n	15c12 <att_handle_rsp+0x66>
		chan->req = NULL;
   15c0a:	f8c4 b0f4 	str.w	fp, [r4, #244]	; 0xf4
	bt_att_func_t func = NULL;
   15c0e:	46da      	mov	sl, fp
		goto process;
   15c10:	e7e4      	b.n	15bdc <att_handle_rsp+0x30>
	func = chan->req->func;
   15c12:	f8d5 a004 	ldr.w	sl, [r5, #4]
	chan->req->func = NULL;
   15c16:	f8c5 b004 	str.w	fp, [r5, #4]
	bt_att_req_free(chan->req);
   15c1a:	4628      	mov	r0, r5
	params = chan->req->user_data;
   15c1c:	f8d5 9018 	ldr.w	r9, [r5, #24]
	bt_att_req_free(chan->req);
   15c20:	f7ff ffb2 	bl	15b88 <bt_att_req_free>
	chan->req = NULL;
   15c24:	f8c4 b0f4 	str.w	fp, [r4, #244]	; 0xf4
   15c28:	e7d8      	b.n	15bdc <att_handle_rsp+0x30>
   15c2a:	bf00      	nop
   15c2c:	00028dd4 	.word	0x00028dd4
   15c30:	00028df4 	.word	0x00028df4
   15c34:	0002a97a 	.word	0x0002a97a
   15c38:	200023f4 	.word	0x200023f4

00015c3c <bt_att_disconnected>:
{
   15c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
   15c3e:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   15c42:	b085      	sub	sp, #20
   15c44:	4604      	mov	r4, r0
	if (!att_chan->att) {
   15c46:	2d00      	cmp	r5, #0
   15c48:	d036      	beq.n	15cb8 <bt_att_disconnected+0x7c>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   15c4a:	f500 719e 	add.w	r1, r0, #316	; 0x13c
   15c4e:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   15c52:	f00f fb0b 	bl	2526c <sys_slist_find_and_remove>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   15c56:	f1a4 0608 	sub.w	r6, r4, #8
   15c5a:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
   15c5e:	2200      	movs	r2, #0
   15c60:	2300      	movs	r3, #0
   15c62:	4638      	mov	r0, r7
   15c64:	f011 fa2e 	bl	270c4 <net_buf_get>
   15c68:	4602      	mov	r2, r0
   15c6a:	bb38      	cbnz	r0, 15cbc <bt_att_disconnected+0x80>
	if (chan->req) {
   15c6c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   15c70:	b123      	cbz	r3, 15c7c <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   15c72:	4601      	mov	r1, r0
   15c74:	230e      	movs	r3, #14
   15c76:	4630      	mov	r0, r6
   15c78:	f7ff ff98 	bl	15bac <att_handle_rsp>
	chan->att = NULL;
   15c7c:	2300      	movs	r3, #0
   15c7e:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
   15c82:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   15c84:	b9c3      	cbnz	r3, 15cb8 <bt_att_disconnected+0x7c>
	att_reset(att);
   15c86:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_slist_get(&att->prep_queue))) {
   15c88:	9803      	ldr	r0, [sp, #12]
   15c8a:	3024      	adds	r0, #36	; 0x24
   15c8c:	f011 fa55 	bl	2713a <net_buf_slist_get>
   15c90:	b9b8      	cbnz	r0, 15cc2 <bt_att_disconnected+0x86>
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   15c92:	9803      	ldr	r0, [sp, #12]
   15c94:	2200      	movs	r2, #0
   15c96:	2300      	movs	r3, #0
   15c98:	300c      	adds	r0, #12
   15c9a:	f011 fa13 	bl	270c4 <net_buf_get>
   15c9e:	b998      	cbnz	r0, 15cc8 <bt_att_disconnected+0x8c>
	att->conn = NULL;
   15ca0:	9a03      	ldr	r2, [sp, #12]
   15ca2:	6010      	str	r0, [r2, #0]
	while (!sys_slist_is_empty(&att->reqs)) {
   15ca4:	9b03      	ldr	r3, [sp, #12]
Z_GENLIST_IS_EMPTY(slist)
   15ca6:	685d      	ldr	r5, [r3, #4]
   15ca8:	b98d      	cbnz	r5, 15cce <bt_att_disconnected+0x92>
	k_mem_slab_free(&att_slab, (void **)&att);
   15caa:	4812      	ldr	r0, [pc, #72]	; (15cf4 <bt_att_disconnected+0xb8>)
   15cac:	a903      	add	r1, sp, #12
   15cae:	f012 f943 	bl	27f38 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
   15cb2:	6820      	ldr	r0, [r4, #0]
   15cb4:	f002 facc 	bl	18250 <bt_gatt_disconnected>
}
   15cb8:	b005      	add	sp, #20
   15cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   15cbc:	f007 fa10 	bl	1d0e0 <net_buf_unref>
   15cc0:	e7cd      	b.n	15c5e <bt_att_disconnected+0x22>
		net_buf_unref(buf);
   15cc2:	f007 fa0d 	bl	1d0e0 <net_buf_unref>
   15cc6:	e7df      	b.n	15c88 <bt_att_disconnected+0x4c>
		net_buf_unref(buf);
   15cc8:	f007 fa0a 	bl	1d0e0 <net_buf_unref>
   15ccc:	e7e1      	b.n	15c92 <bt_att_disconnected+0x56>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15cce:	6899      	ldr	r1, [r3, #8]
		if (req->func) {
   15cd0:	686e      	ldr	r6, [r5, #4]
   15cd2:	682a      	ldr	r2, [r5, #0]
	list->head = node;
   15cd4:	605a      	str	r2, [r3, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15cd6:	428d      	cmp	r5, r1
	list->tail = node;
   15cd8:	bf08      	it	eq
   15cda:	609a      	streq	r2, [r3, #8]
   15cdc:	b136      	cbz	r6, 15cec <bt_att_disconnected+0xb0>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   15cde:	69ab      	ldr	r3, [r5, #24]
   15ce0:	9300      	str	r3, [sp, #0]
   15ce2:	2300      	movs	r3, #0
   15ce4:	461a      	mov	r2, r3
   15ce6:	210e      	movs	r1, #14
   15ce8:	4618      	mov	r0, r3
   15cea:	47b0      	blx	r6
		bt_att_req_free(req);
   15cec:	4628      	mov	r0, r5
   15cee:	f7ff ff4b 	bl	15b88 <bt_att_req_free>
   15cf2:	e7d7      	b.n	15ca4 <bt_att_disconnected+0x68>
   15cf4:	20000910 	.word	0x20000910

00015cf8 <att_timeout>:
   15cf8:	4b08      	ldr	r3, [pc, #32]	; (15d1c <att_timeout+0x24>)
   15cfa:	4909      	ldr	r1, [pc, #36]	; (15d20 <att_timeout+0x28>)
{
   15cfc:	b510      	push	{r4, lr}
   15cfe:	1ac9      	subs	r1, r1, r3
   15d00:	08c9      	lsrs	r1, r1, #3
	BT_ERR("ATT Timeout");
   15d02:	0189      	lsls	r1, r1, #6
{
   15d04:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   15d06:	f041 0101 	orr.w	r1, r1, #1
   15d0a:	4806      	ldr	r0, [pc, #24]	; (15d24 <att_timeout+0x2c>)
   15d0c:	f00e f8a9 	bl	23e62 <log_0>
	bt_att_disconnected(&chan->chan.chan);
   15d10:	f5a4 7084 	sub.w	r0, r4, #264	; 0x108
}
   15d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   15d18:	f7ff bf90 	b.w	15c3c <bt_att_disconnected>
   15d1c:	00028dd4 	.word	0x00028dd4
   15d20:	00028df4 	.word	0x00028df4
   15d24:	0002a991 	.word	0x0002a991

00015d28 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   15d28:	b538      	push	{r3, r4, r5, lr}
   15d2a:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
   15d2c:	4805      	ldr	r0, [pc, #20]	; (15d44 <bt_buf_get_rx+0x1c>)
   15d2e:	f011 f9c4 	bl	270ba <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   15d32:	4604      	mov	r4, r0
   15d34:	b120      	cbz	r0, 15d40 <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
   15d36:	2100      	movs	r1, #0
   15d38:	3008      	adds	r0, #8
   15d3a:	f011 f9dd 	bl	270f8 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   15d3e:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   15d40:	4620      	mov	r0, r4
   15d42:	bd38      	pop	{r3, r4, r5, pc}
   15d44:	20000ae0 	.word	0x20000ae0

00015d48 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   15d48:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   15d4a:	490b      	ldr	r1, [pc, #44]	; (15d78 <bt_buf_get_cmd_complete+0x30>)
{
   15d4c:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   15d4e:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
{
   15d52:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
   15d54:	b920      	cbnz	r0, 15d60 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   15d56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   15d5a:	2001      	movs	r0, #1
   15d5c:	f7ff bfe4 	b.w	15d28 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   15d60:	f011 fa24 	bl	271ac <net_buf_ref>
   15d64:	2301      	movs	r3, #1
		buf->len = 0U;
   15d66:	2100      	movs	r1, #0
   15d68:	7503      	strb	r3, [r0, #20]
   15d6a:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
   15d6c:	4604      	mov	r4, r0
   15d6e:	3008      	adds	r0, #8
   15d70:	f011 f9c2 	bl	270f8 <net_buf_simple_reserve>
}
   15d74:	4620      	mov	r0, r4
   15d76:	bd10      	pop	{r4, pc}
   15d78:	200002b0 	.word	0x200002b0

00015d7c <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   15d7c:	b570      	push	{r4, r5, r6, lr}
   15d7e:	4604      	mov	r4, r0
	switch (evt) {
   15d80:	2c0f      	cmp	r4, #15
{
   15d82:	460d      	mov	r5, r1
   15d84:	4610      	mov	r0, r2
   15d86:	4619      	mov	r1, r3
	switch (evt) {
   15d88:	d805      	bhi.n	15d96 <bt_buf_get_evt+0x1a>
   15d8a:	2c0d      	cmp	r4, #13
   15d8c:	d912      	bls.n	15db4 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   15d8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   15d92:	f7ff bfd9 	b.w	15d48 <bt_buf_get_cmd_complete>
	switch (evt) {
   15d96:	2c13      	cmp	r4, #19
   15d98:	d10c      	bne.n	15db4 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   15d9a:	480b      	ldr	r0, [pc, #44]	; (15dc8 <bt_buf_get_evt+0x4c>)
   15d9c:	f011 f98d 	bl	270ba <net_buf_alloc_fixed>
			if (buf) {
   15da0:	4604      	mov	r4, r0
   15da2:	b128      	cbz	r0, 15db0 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   15da4:	2100      	movs	r1, #0
   15da6:	3008      	adds	r0, #8
   15da8:	f011 f9a6 	bl	270f8 <net_buf_simple_reserve>
   15dac:	2301      	movs	r3, #1
   15dae:	7523      	strb	r3, [r4, #20]
}
   15db0:	4620      	mov	r0, r4
   15db2:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   15db4:	4602      	mov	r2, r0
   15db6:	460b      	mov	r3, r1
		if (discardable) {
   15db8:	b10d      	cbz	r5, 15dbe <bt_buf_get_evt+0x42>
   15dba:	4804      	ldr	r0, [pc, #16]	; (15dcc <bt_buf_get_evt+0x50>)
   15dbc:	e7ee      	b.n	15d9c <bt_buf_get_evt+0x20>
}
   15dbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   15dc2:	2001      	movs	r0, #1
   15dc4:	f7ff bfb0 	b.w	15d28 <bt_buf_get_rx>
   15dc8:	20000b0c 	.word	0x20000b0c
   15dcc:	20000a5c 	.word	0x20000a5c

00015dd0 <tx_free>:
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   15dd0:	2300      	movs	r3, #0
	tx->user_data = NULL;
   15dd2:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
   15dd6:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
   15dd8:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   15dda:	4801      	ldr	r0, [pc, #4]	; (15de0 <tx_free+0x10>)
   15ddc:	f012 baaa 	b.w	28334 <k_queue_append>
   15de0:	20000a18 	.word	0x20000a18

00015de4 <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   15de4:	4b0e      	ldr	r3, [pc, #56]	; (15e20 <notify_connected+0x3c>)
{
   15de6:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
   15de8:	681d      	ldr	r5, [r3, #0]
{
   15dea:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   15dec:	b955      	cbnz	r5, 15e04 <notify_connected+0x20>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15dee:	4d0d      	ldr	r5, [pc, #52]	; (15e24 <notify_connected+0x40>)
   15df0:	4e0d      	ldr	r6, [pc, #52]	; (15e28 <notify_connected+0x44>)
   15df2:	7b21      	ldrb	r1, [r4, #12]
   15df4:	42b5      	cmp	r5, r6
   15df6:	d30c      	bcc.n	15e12 <notify_connected+0x2e>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	if (!conn->err) {
   15df8:	b989      	cbnz	r1, 15e1e <notify_connected+0x3a>
		bt_gatt_connected(conn);
   15dfa:	4620      	mov	r0, r4
	}
}
   15dfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_gatt_connected(conn);
   15e00:	f002 b8f0 	b.w	17fe4 <bt_gatt_connected>
		if (cb->connected) {
   15e04:	682b      	ldr	r3, [r5, #0]
   15e06:	b113      	cbz	r3, 15e0e <notify_connected+0x2a>
			cb->connected(conn, conn->err);
   15e08:	7b21      	ldrb	r1, [r4, #12]
   15e0a:	4620      	mov	r0, r4
   15e0c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   15e0e:	69ad      	ldr	r5, [r5, #24]
   15e10:	e7ec      	b.n	15dec <notify_connected+0x8>
		if (cb->connected) {
   15e12:	682b      	ldr	r3, [r5, #0]
   15e14:	b10b      	cbz	r3, 15e1a <notify_connected+0x36>
			cb->connected(conn, conn->err);
   15e16:	4620      	mov	r0, r4
   15e18:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15e1a:	351c      	adds	r5, #28
   15e1c:	e7e9      	b.n	15df2 <notify_connected+0xe>
}
   15e1e:	bd70      	pop	{r4, r5, r6, pc}
   15e20:	20002414 	.word	0x20002414
   15e24:	00028d08 	.word	0x00028d08
   15e28:	00028d24 	.word	0x00028d24

00015e2c <send_frag>:
{
   15e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   15e30:	694d      	ldr	r5, [r1, #20]
{
   15e32:	4604      	mov	r4, r0
   15e34:	460e      	mov	r6, r1
   15e36:	4691      	mov	r9, r2
   15e38:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
   15e3a:	f04f 33ff 	mov.w	r3, #4294967295
   15e3e:	4845      	ldr	r0, [pc, #276]	; (15f54 <send_frag+0x128>)
   15e40:	f04f 32ff 	mov.w	r2, #4294967295
   15e44:	f00b fe82 	bl	21b4c <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   15e48:	7b63      	ldrb	r3, [r4, #13]
   15e4a:	2b07      	cmp	r3, #7
   15e4c:	d151      	bne.n	15ef2 <send_frag+0xc6>
	__asm__ volatile(
   15e4e:	f04f 0340 	mov.w	r3, #64	; 0x40
   15e52:	f3ef 8211 	mrs	r2, BASEPRI
   15e56:	f383 8812 	msr	BASEPRI_MAX, r3
   15e5a:	f3bf 8f6f 	isb	sy
	if (tx) {
   15e5e:	2d00      	cmp	r5, #0
   15e60:	d059      	beq.n	15f16 <send_frag+0xea>
	parent->next = child;
   15e62:	2300      	movs	r3, #0
   15e64:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   15e66:	69a3      	ldr	r3, [r4, #24]
   15e68:	2b00      	cmp	r3, #0
   15e6a:	d151      	bne.n	15f10 <send_frag+0xe4>
	list->head = node;
   15e6c:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   15e70:	f382 8811 	msr	BASEPRI, r2
   15e74:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   15e78:	2104      	movs	r1, #4
   15e7a:	f106 0008 	add.w	r0, r6, #8
   15e7e:	f011 f9d2 	bl	27226 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   15e82:	8823      	ldrh	r3, [r4, #0]
   15e84:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
   15e88:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   15e8c:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   15e8e:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   15e92:	3b04      	subs	r3, #4
   15e94:	8043      	strh	r3, [r0, #2]
   15e96:	2302      	movs	r3, #2
   15e98:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   15e9a:	4630      	mov	r0, r6
   15e9c:	f010 fae5 	bl	2646a <bt_send>
	if (err) {
   15ea0:	4601      	mov	r1, r0
   15ea2:	2800      	cmp	r0, #0
   15ea4:	d053      	beq.n	15f4e <send_frag+0x122>
   15ea6:	4b2c      	ldr	r3, [pc, #176]	; (15f58 <send_frag+0x12c>)
   15ea8:	4a2c      	ldr	r2, [pc, #176]	; (15f5c <send_frag+0x130>)
		BT_ERR("Unable to send to driver (err %d)", err);
   15eaa:	482d      	ldr	r0, [pc, #180]	; (15f60 <send_frag+0x134>)
   15eac:	1ad2      	subs	r2, r2, r3
   15eae:	08d2      	lsrs	r2, r2, #3
   15eb0:	0192      	lsls	r2, r2, #6
   15eb2:	f042 0201 	orr.w	r2, r2, #1
   15eb6:	f00d ffe1 	bl	23e7c <log_1>
	__asm__ volatile(
   15eba:	f04f 0340 	mov.w	r3, #64	; 0x40
   15ebe:	f3ef 8111 	mrs	r1, BASEPRI
   15ec2:	f383 8812 	msr	BASEPRI_MAX, r3
   15ec6:	f3bf 8f6f 	isb	sy
		if (tx) {
   15eca:	2d00      	cmp	r5, #0
   15ecc:	d039      	beq.n	15f42 <send_frag+0x116>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15ece:	6963      	ldr	r3, [r4, #20]
   15ed0:	2200      	movs	r2, #0
   15ed2:	b153      	cbz	r3, 15eea <send_frag+0xbe>
   15ed4:	429d      	cmp	r5, r3
   15ed6:	d131      	bne.n	15f3c <send_frag+0x110>
Z_GENLIST_REMOVE(slist, snode)
   15ed8:	682b      	ldr	r3, [r5, #0]
   15eda:	bb4a      	cbnz	r2, 15f30 <send_frag+0x104>
   15edc:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
   15ede:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   15ee0:	4295      	cmp	r5, r2
   15ee2:	d100      	bne.n	15ee6 <send_frag+0xba>
	list->tail = node;
   15ee4:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   15ee6:	2300      	movs	r3, #0
   15ee8:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   15eea:	f381 8811 	msr	BASEPRI, r1
   15eee:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   15ef2:	4818      	ldr	r0, [pc, #96]	; (15f54 <send_frag+0x128>)
   15ef4:	f00b fe04 	bl	21b00 <z_impl_k_sem_give>
	if (tx) {
   15ef8:	b115      	cbz	r5, 15f00 <send_frag+0xd4>
		tx_free(tx);
   15efa:	4628      	mov	r0, r5
   15efc:	f7ff ff68 	bl	15dd0 <tx_free>
	if (always_consume) {
   15f00:	b11f      	cbz	r7, 15f0a <send_frag+0xde>
		net_buf_unref(buf);
   15f02:	4630      	mov	r0, r6
   15f04:	f007 f8ec 	bl	1d0e0 <net_buf_unref>
	return false;
   15f08:	2700      	movs	r7, #0
}
   15f0a:	4638      	mov	r0, r7
   15f0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15f10:	601d      	str	r5, [r3, #0]
	list->tail = node;
   15f12:	61a5      	str	r5, [r4, #24]
}
   15f14:	e7ac      	b.n	15e70 <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
   15f16:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   15f18:	b133      	cbz	r3, 15f28 <send_frag+0xfc>
			pending_no_cb = &tail_tx->pending_no_cb;
   15f1a:	f103 080c 	add.w	r8, r3, #12
   15f1e:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   15f20:	3301      	adds	r3, #1
   15f22:	f8c8 3000 	str.w	r3, [r8]
   15f26:	e7a3      	b.n	15e70 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   15f28:	69e3      	ldr	r3, [r4, #28]
   15f2a:	f104 081c 	add.w	r8, r4, #28
   15f2e:	e7f7      	b.n	15f20 <send_frag+0xf4>
	parent->next = child;
   15f30:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   15f32:	69a3      	ldr	r3, [r4, #24]
   15f34:	429d      	cmp	r5, r3
	list->tail = node;
   15f36:	bf08      	it	eq
   15f38:	61a2      	streq	r2, [r4, #24]
}
   15f3a:	e7d4      	b.n	15ee6 <send_frag+0xba>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15f3c:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15f3e:	681b      	ldr	r3, [r3, #0]
   15f40:	e7c7      	b.n	15ed2 <send_frag+0xa6>
			(*pending_no_cb)--;
   15f42:	f8d8 3000 	ldr.w	r3, [r8]
   15f46:	3b01      	subs	r3, #1
   15f48:	f8c8 3000 	str.w	r3, [r8]
   15f4c:	e7cd      	b.n	15eea <send_frag+0xbe>
	return true;
   15f4e:	2701      	movs	r7, #1
   15f50:	e7db      	b.n	15f0a <send_frag+0xde>
   15f52:	bf00      	nop
   15f54:	200003b0 	.word	0x200003b0
   15f58:	00028dd4 	.word	0x00028dd4
   15f5c:	00028e04 	.word	0x00028e04
   15f60:	0002a9ab 	.word	0x0002a9ab

00015f64 <bt_conn_get_pkts>:
}
   15f64:	4800      	ldr	r0, [pc, #0]	; (15f68 <bt_conn_get_pkts+0x4>)
   15f66:	4770      	bx	lr
   15f68:	200003b0 	.word	0x200003b0

00015f6c <bt_conn_new>:
{
   15f6c:	b538      	push	{r3, r4, r5, lr}
   15f6e:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   15f70:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   15f72:	2501      	movs	r5, #1
   15f74:	428b      	cmp	r3, r1
   15f76:	d102      	bne.n	15f7e <bt_conn_new+0x12>
		return NULL;
   15f78:	2400      	movs	r4, #0
}
   15f7a:	4620      	mov	r0, r4
   15f7c:	bd38      	pop	{r3, r4, r5, pc}
   15f7e:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   15f82:	f3bf 8f5b 	dmb	ish
   15f86:	e852 0f00 	ldrex	r0, [r2]
   15f8a:	2800      	cmp	r0, #0
   15f8c:	d104      	bne.n	15f98 <bt_conn_new+0x2c>
   15f8e:	e842 5c00 	strex	ip, r5, [r2]
   15f92:	f1bc 0f00 	cmp.w	ip, #0
   15f96:	d1f6      	bne.n	15f86 <bt_conn_new+0x1a>
   15f98:	f3bf 8f5b 	dmb	ish
   15f9c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   15fa0:	d002      	beq.n	15fa8 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   15fa2:	3301      	adds	r3, #1
   15fa4:	4604      	mov	r4, r0
   15fa6:	e7e5      	b.n	15f74 <bt_conn_new+0x8>
	if (!conn) {
   15fa8:	2c00      	cmp	r4, #0
   15faa:	d0e6      	beq.n	15f7a <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   15fac:	22b8      	movs	r2, #184	; 0xb8
   15fae:	2100      	movs	r1, #0
   15fb0:	4620      	mov	r0, r4
   15fb2:	f00e ff70 	bl	24e96 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   15fb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
   15fba:	4904      	ldr	r1, [pc, #16]	; (15fcc <bt_conn_new+0x60>)
   15fbc:	f012 fc67 	bl	2888e <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   15fc0:	4903      	ldr	r1, [pc, #12]	; (15fd0 <bt_conn_new+0x64>)
   15fc2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   15fc6:	f012 fc3c 	bl	28842 <k_work_init>
	return conn;
   15fca:	e7d6      	b.n	15f7a <bt_conn_new+0xe>
   15fcc:	000167c5 	.word	0x000167c5
   15fd0:	00025adf 	.word	0x00025adf

00015fd4 <bt_conn_recv>:
{
   15fd4:	b570      	push	{r4, r5, r6, lr}
   15fd6:	4616      	mov	r6, r2
   15fd8:	4604      	mov	r4, r0
   15fda:	460d      	mov	r5, r1
	tx_notify(conn);
   15fdc:	f00f fd5c 	bl	25a98 <tx_notify>
	switch (flags) {
   15fe0:	2e01      	cmp	r6, #1
   15fe2:	d02e      	beq.n	16042 <bt_conn_recv+0x6e>
   15fe4:	2e02      	cmp	r6, #2
   15fe6:	d164      	bne.n	160b2 <bt_conn_recv+0xde>
		if (conn->rx) {
   15fe8:	6923      	ldr	r3, [r4, #16]
   15fea:	b163      	cbz	r3, 16006 <bt_conn_recv+0x32>
   15fec:	4b3c      	ldr	r3, [pc, #240]	; (160e0 <bt_conn_recv+0x10c>)
   15fee:	493d      	ldr	r1, [pc, #244]	; (160e4 <bt_conn_recv+0x110>)
			BT_ERR("Unexpected first L2CAP frame");
   15ff0:	483d      	ldr	r0, [pc, #244]	; (160e8 <bt_conn_recv+0x114>)
   15ff2:	1ac9      	subs	r1, r1, r3
   15ff4:	08c9      	lsrs	r1, r1, #3
   15ff6:	0189      	lsls	r1, r1, #6
   15ff8:	f041 0101 	orr.w	r1, r1, #1
   15ffc:	f00d ff31 	bl	23e62 <log_0>
			bt_conn_reset_rx_state(conn);
   16000:	4620      	mov	r0, r4
   16002:	f00f fd6f 	bl	25ae4 <bt_conn_reset_rx_state>
		conn->rx = buf;
   16006:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   16008:	6923      	ldr	r3, [r4, #16]
   1600a:	8999      	ldrh	r1, [r3, #12]
   1600c:	2901      	cmp	r1, #1
   1600e:	d965      	bls.n	160dc <bt_conn_recv+0x108>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   16010:	6898      	ldr	r0, [r3, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   16012:	7845      	ldrb	r5, [r0, #1]
   16014:	7802      	ldrb	r2, [r0, #0]
   16016:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   1601a:	3204      	adds	r2, #4
   1601c:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
   1601e:	4291      	cmp	r1, r2
   16020:	d35c      	bcc.n	160dc <bt_conn_recv+0x108>
	if (conn->rx->len > acl_total_len) {
   16022:	d952      	bls.n	160ca <bt_conn_recv+0xf6>
   16024:	482e      	ldr	r0, [pc, #184]	; (160e0 <bt_conn_recv+0x10c>)
   16026:	4b2f      	ldr	r3, [pc, #188]	; (160e4 <bt_conn_recv+0x110>)
   16028:	1a1b      	subs	r3, r3, r0
   1602a:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL len mismatch (%u > %u)",
   1602c:	019b      	lsls	r3, r3, #6
   1602e:	482f      	ldr	r0, [pc, #188]	; (160ec <bt_conn_recv+0x118>)
   16030:	f043 0301 	orr.w	r3, r3, #1
   16034:	f00d ff36 	bl	23ea4 <log_2>
		bt_conn_reset_rx_state(conn);
   16038:	4620      	mov	r0, r4
}
   1603a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   1603e:	f00f bd51 	b.w	25ae4 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   16042:	6920      	ldr	r0, [r4, #16]
   16044:	b968      	cbnz	r0, 16062 <bt_conn_recv+0x8e>
   16046:	4927      	ldr	r1, [pc, #156]	; (160e4 <bt_conn_recv+0x110>)
   16048:	4b25      	ldr	r3, [pc, #148]	; (160e0 <bt_conn_recv+0x10c>)
			BT_ERR("Unexpected L2CAP continuation");
   1604a:	4829      	ldr	r0, [pc, #164]	; (160f0 <bt_conn_recv+0x11c>)
   1604c:	1ac9      	subs	r1, r1, r3
   1604e:	08c9      	lsrs	r1, r1, #3
   16050:	0189      	lsls	r1, r1, #6
   16052:	f041 0101 	orr.w	r1, r1, #1
   16056:	f00d ff04 	bl	23e62 <log_0>
		bt_conn_reset_rx_state(conn);
   1605a:	4620      	mov	r0, r4
   1605c:	f00f fd42 	bl	25ae4 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   16060:	e001      	b.n	16066 <bt_conn_recv+0x92>
		if (!buf->len) {
   16062:	89ae      	ldrh	r6, [r5, #12]
   16064:	b926      	cbnz	r6, 16070 <bt_conn_recv+0x9c>
			net_buf_unref(buf);
   16066:	4628      	mov	r0, r5
}
   16068:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   1606c:	f007 b838 	b.w	1d0e0 <net_buf_unref>
	return net_buf_simple_tailroom(&buf->b);
   16070:	3008      	adds	r0, #8
   16072:	f011 f8fc 	bl	2726e <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   16076:	4286      	cmp	r6, r0
   16078:	d911      	bls.n	1609e <bt_conn_recv+0xca>
   1607a:	4b19      	ldr	r3, [pc, #100]	; (160e0 <bt_conn_recv+0x10c>)
   1607c:	4919      	ldr	r1, [pc, #100]	; (160e4 <bt_conn_recv+0x110>)
			BT_ERR("Not enough buffer space for L2CAP data");
   1607e:	481d      	ldr	r0, [pc, #116]	; (160f4 <bt_conn_recv+0x120>)
   16080:	1ac9      	subs	r1, r1, r3
   16082:	08c9      	lsrs	r1, r1, #3
   16084:	0189      	lsls	r1, r1, #6
   16086:	f041 0101 	orr.w	r1, r1, #1
   1608a:	f00d feea 	bl	23e62 <log_0>
			bt_l2cap_recv(conn, conn->rx, false);
   1608e:	6921      	ldr	r1, [r4, #16]
   16090:	2200      	movs	r2, #0
   16092:	4620      	mov	r0, r4
   16094:	f004 ff1e 	bl	1aed4 <bt_l2cap_recv>
			conn->rx = NULL;
   16098:	2300      	movs	r3, #0
   1609a:	6123      	str	r3, [r4, #16]
   1609c:	e7e3      	b.n	16066 <bt_conn_recv+0x92>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1609e:	6920      	ldr	r0, [r4, #16]
   160a0:	89aa      	ldrh	r2, [r5, #12]
   160a2:	68a9      	ldr	r1, [r5, #8]
   160a4:	3008      	adds	r0, #8
   160a6:	f011 f8ad 	bl	27204 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   160aa:	4628      	mov	r0, r5
   160ac:	f007 f818 	bl	1d0e0 <net_buf_unref>
		break;
   160b0:	e7aa      	b.n	16008 <bt_conn_recv+0x34>
   160b2:	4a0b      	ldr	r2, [pc, #44]	; (160e0 <bt_conn_recv+0x10c>)
   160b4:	4b0b      	ldr	r3, [pc, #44]	; (160e4 <bt_conn_recv+0x110>)
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   160b6:	4810      	ldr	r0, [pc, #64]	; (160f8 <bt_conn_recv+0x124>)
   160b8:	1a9b      	subs	r3, r3, r2
   160ba:	08db      	lsrs	r3, r3, #3
   160bc:	019b      	lsls	r3, r3, #6
   160be:	f043 0201 	orr.w	r2, r3, #1
   160c2:	4631      	mov	r1, r6
   160c4:	f00d feda 	bl	23e7c <log_1>
   160c8:	e7c7      	b.n	1605a <bt_conn_recv+0x86>
	conn->rx = NULL;
   160ca:	2200      	movs	r2, #0
   160cc:	6122      	str	r2, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   160ce:	4620      	mov	r0, r4
   160d0:	2201      	movs	r2, #1
}
   160d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   160d6:	4619      	mov	r1, r3
   160d8:	f004 befc 	b.w	1aed4 <bt_l2cap_recv>
}
   160dc:	bd70      	pop	{r4, r5, r6, pc}
   160de:	bf00      	nop
   160e0:	00028dd4 	.word	0x00028dd4
   160e4:	00028e04 	.word	0x00028e04
   160e8:	0002a9cd 	.word	0x0002a9cd
   160ec:	0002aa4d 	.word	0x0002aa4d
   160f0:	0002a9ea 	.word	0x0002a9ea
   160f4:	0002aa08 	.word	0x0002aa08
   160f8:	0002aa2f 	.word	0x0002aa2f

000160fc <bt_conn_send_cb>:
{
   160fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16100:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   16102:	7b43      	ldrb	r3, [r0, #13]
   16104:	2b07      	cmp	r3, #7
{
   16106:	4605      	mov	r5, r0
   16108:	460e      	mov	r6, r1
   1610a:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   1610c:	d00c      	beq.n	16128 <bt_conn_send_cb+0x2c>
   1610e:	4926      	ldr	r1, [pc, #152]	; (161a8 <bt_conn_send_cb+0xac>)
   16110:	4b26      	ldr	r3, [pc, #152]	; (161ac <bt_conn_send_cb+0xb0>)
		BT_ERR("not connected!");
   16112:	4827      	ldr	r0, [pc, #156]	; (161b0 <bt_conn_send_cb+0xb4>)
   16114:	1ac9      	subs	r1, r1, r3
   16116:	08c9      	lsrs	r1, r1, #3
   16118:	0189      	lsls	r1, r1, #6
   1611a:	f041 0101 	orr.w	r1, r1, #1
   1611e:	f00d fea0 	bl	23e62 <log_0>
			return -ENOTCONN;
   16122:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   16126:	e01d      	b.n	16164 <bt_conn_send_cb+0x68>
	if (cb) {
   16128:	2a00      	cmp	r2, #0
   1612a:	d03a      	beq.n	161a2 <bt_conn_send_cb+0xa6>
	return z_impl_z_current_get();
   1612c:	f00b fc6e 	bl	21a0c <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   16130:	4b20      	ldr	r3, [pc, #128]	; (161b4 <bt_conn_send_cb+0xb8>)
   16132:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   16134:	4820      	ldr	r0, [pc, #128]	; (161b8 <bt_conn_send_cb+0xbc>)
   16136:	bf07      	ittee	eq
   16138:	2200      	moveq	r2, #0
   1613a:	2300      	moveq	r3, #0
   1613c:	f04f 32ff 	movne.w	r2, #4294967295
   16140:	f04f 33ff 	movne.w	r3, #4294967295
   16144:	f00b f92a 	bl	2139c <z_impl_k_queue_get>
   16148:	4604      	mov	r4, r0
		if (!tx) {
   1614a:	b968      	cbnz	r0, 16168 <bt_conn_send_cb+0x6c>
   1614c:	4b17      	ldr	r3, [pc, #92]	; (161ac <bt_conn_send_cb+0xb0>)
   1614e:	4916      	ldr	r1, [pc, #88]	; (161a8 <bt_conn_send_cb+0xac>)
			BT_ERR("Unable to allocate TX context");
   16150:	481a      	ldr	r0, [pc, #104]	; (161bc <bt_conn_send_cb+0xc0>)
   16152:	1ac9      	subs	r1, r1, r3
   16154:	08c9      	lsrs	r1, r1, #3
   16156:	0189      	lsls	r1, r1, #6
   16158:	f041 0101 	orr.w	r1, r1, #1
   1615c:	f00d fe81 	bl	23e62 <log_0>
			return -ENOBUFS;
   16160:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   16164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   16168:	7b6b      	ldrb	r3, [r5, #13]
   1616a:	2b07      	cmp	r3, #7
   1616c:	d00d      	beq.n	1618a <bt_conn_send_cb+0x8e>
   1616e:	4b0f      	ldr	r3, [pc, #60]	; (161ac <bt_conn_send_cb+0xb0>)
   16170:	490d      	ldr	r1, [pc, #52]	; (161a8 <bt_conn_send_cb+0xac>)
			BT_WARN("Disconnected while allocating context");
   16172:	4813      	ldr	r0, [pc, #76]	; (161c0 <bt_conn_send_cb+0xc4>)
   16174:	1ac9      	subs	r1, r1, r3
   16176:	08c9      	lsrs	r1, r1, #3
   16178:	0189      	lsls	r1, r1, #6
   1617a:	f041 0102 	orr.w	r1, r1, #2
   1617e:	f00d fe70 	bl	23e62 <log_0>
			tx_free(tx);
   16182:	4620      	mov	r0, r4
   16184:	f7ff fe24 	bl	15dd0 <tx_free>
   16188:	e7cb      	b.n	16122 <bt_conn_send_cb+0x26>
		tx->pending_no_cb = 0U;
   1618a:	2300      	movs	r3, #0
		tx->user_data = user_data;
   1618c:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   16190:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   16192:	6170      	str	r0, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
   16194:	f105 0038 	add.w	r0, r5, #56	; 0x38
   16198:	4631      	mov	r1, r6
   1619a:	f010 fffa 	bl	27192 <net_buf_put>
	return 0;
   1619e:	2000      	movs	r0, #0
   161a0:	e7e0      	b.n	16164 <bt_conn_send_cb+0x68>
		tx_data(buf)->tx = NULL;
   161a2:	614a      	str	r2, [r1, #20]
   161a4:	e7f6      	b.n	16194 <bt_conn_send_cb+0x98>
   161a6:	bf00      	nop
   161a8:	00028e04 	.word	0x00028e04
   161ac:	00028dd4 	.word	0x00028dd4
   161b0:	0002aa68 	.word	0x0002aa68
   161b4:	20002190 	.word	0x20002190
   161b8:	20000a18 	.word	0x20000a18
   161bc:	0002aa77 	.word	0x0002aa77
   161c0:	0002aa95 	.word	0x0002aa95

000161c4 <bt_conn_prepare_events>:
{
   161c4:	b538      	push	{r3, r4, r5, lr}
	conn_change.signaled = 0U;
   161c6:	4b1b      	ldr	r3, [pc, #108]	; (16234 <bt_conn_prepare_events+0x70>)
   161c8:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   161ca:	2101      	movs	r1, #1
	conn_change.signaled = 0U;
   161cc:	609a      	str	r2, [r3, #8]
{
   161ce:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   161d0:	f012 f817 	bl	28202 <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   161d4:	f3bf 8f5b 	dmb	ish
   161d8:	4b17      	ldr	r3, [pc, #92]	; (16238 <bt_conn_prepare_events+0x74>)
   161da:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   161de:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
   161e2:	f104 0014 	add.w	r0, r4, #20
   161e6:	4619      	mov	r1, r3
	if (!atomic_get(&conn->ref)) {
   161e8:	b90a      	cbnz	r2, 161ee <bt_conn_prepare_events+0x2a>
		conn_cleanup(conn);
   161ea:	2001      	movs	r0, #1
}
   161ec:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   161ee:	7b5a      	ldrb	r2, [r3, #13]
   161f0:	b99a      	cbnz	r2, 1621a <bt_conn_prepare_events+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   161f2:	f3bf 8f5b 	dmb	ish
   161f6:	1d1a      	adds	r2, r3, #4
   161f8:	e852 5f00 	ldrex	r5, [r2]
   161fc:	f025 0c40 	bic.w	ip, r5, #64	; 0x40
   16200:	e842 ce00 	strex	lr, ip, [r2]
   16204:	f1be 0f00 	cmp.w	lr, #0
   16208:	d1f6      	bne.n	161f8 <bt_conn_prepare_events+0x34>
   1620a:	f3bf 8f5b 	dmb	ish
   1620e:	066a      	lsls	r2, r5, #25
   16210:	d503      	bpl.n	1621a <bt_conn_prepare_events+0x56>
		conn_cleanup(conn);
   16212:	4618      	mov	r0, r3
   16214:	f00f fc6f 	bl	25af6 <conn_cleanup>
   16218:	e7e7      	b.n	161ea <bt_conn_prepare_events+0x26>
	if (conn->state != BT_CONN_CONNECTED) {
   1621a:	7b4b      	ldrb	r3, [r1, #13]
   1621c:	2b07      	cmp	r3, #7
   1621e:	d1e4      	bne.n	161ea <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[0],
   16220:	4b06      	ldr	r3, [pc, #24]	; (1623c <bt_conn_prepare_events+0x78>)
   16222:	2200      	movs	r2, #0
   16224:	2104      	movs	r1, #4
   16226:	f011 ffec 	bl	28202 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   1622a:	2301      	movs	r3, #1
   1622c:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   16230:	2002      	movs	r0, #2
	return ev_count;
   16232:	e7db      	b.n	161ec <bt_conn_prepare_events+0x28>
   16234:	200005b8 	.word	0x200005b8
   16238:	20001830 	.word	0x20001830
   1623c:	20001868 	.word	0x20001868

00016240 <bt_conn_lookup_handle>:
{
   16240:	4602      	mov	r2, r0
   16242:	b508      	push	{r3, lr}
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   16244:	2101      	movs	r1, #1
   16246:	4803      	ldr	r0, [pc, #12]	; (16254 <bt_conn_lookup_handle+0x14>)
   16248:	f00f fca8 	bl	25b9c <conn_lookup_handle>
}
   1624c:	2800      	cmp	r0, #0
   1624e:	bf38      	it	cc
   16250:	2000      	movcc	r0, #0
   16252:	bd08      	pop	{r3, pc}
   16254:	20001830 	.word	0x20001830

00016258 <bt_conn_set_state>:
{
   16258:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   1625a:	7b46      	ldrb	r6, [r0, #13]
   1625c:	428e      	cmp	r6, r1
{
   1625e:	4604      	mov	r4, r0
   16260:	460d      	mov	r5, r1
	if (conn->state == state) {
   16262:	d112      	bne.n	1628a <bt_conn_set_state+0x32>
   16264:	4b66      	ldr	r3, [pc, #408]	; (16400 <bt_conn_set_state+0x1a8>)
   16266:	4a67      	ldr	r2, [pc, #412]	; (16404 <bt_conn_set_state+0x1ac>)
		BT_WARN("no transition %s", state2str(state));
   16268:	4867      	ldr	r0, [pc, #412]	; (16408 <bt_conn_set_state+0x1b0>)
   1626a:	2e08      	cmp	r6, #8
   1626c:	eba2 0203 	sub.w	r2, r2, r3
   16270:	bf96      	itet	ls
   16272:	4b66      	ldrls	r3, [pc, #408]	; (1640c <bt_conn_set_state+0x1b4>)
   16274:	4966      	ldrhi	r1, [pc, #408]	; (16410 <bt_conn_set_state+0x1b8>)
   16276:	f853 1026 	ldrls.w	r1, [r3, r6, lsl #2]
   1627a:	08d2      	lsrs	r2, r2, #3
   1627c:	0192      	lsls	r2, r2, #6
   1627e:	f042 0202 	orr.w	r2, r2, #2
}
   16282:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
   16286:	f00d bdf9 	b.w	23e7c <log_1>
	conn->state = state;
   1628a:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   1628c:	b926      	cbnz	r6, 16298 <bt_conn_set_state+0x40>
		if (conn->type != BT_CONN_TYPE_ISO) {
   1628e:	7883      	ldrb	r3, [r0, #2]
   16290:	2b08      	cmp	r3, #8
   16292:	d001      	beq.n	16298 <bt_conn_set_state+0x40>
			bt_conn_ref(conn);
   16294:	f00f fc4d 	bl	25b32 <bt_conn_ref>
	switch (conn->state) {
   16298:	7b63      	ldrb	r3, [r4, #13]
   1629a:	2b08      	cmp	r3, #8
   1629c:	f200 80a5 	bhi.w	163ea <bt_conn_set_state+0x192>
   162a0:	e8df f003 	tbb	[pc, r3]
   162a4:	adad0537 	.word	0xadad0537
   162a8:	1cadadad 	.word	0x1cadadad
   162ac:	ad          	.byte	0xad
   162ad:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
   162ae:	4d59      	ldr	r5, [pc, #356]	; (16414 <bt_conn_set_state+0x1bc>)
		tx->pending_no_cb = 0U;
   162b0:	2600      	movs	r6, #0
	__asm__ volatile(
   162b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   162b6:	f3ef 8211 	mrs	r2, BASEPRI
   162ba:	f383 8812 	msr	BASEPRI_MAX, r3
   162be:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   162c2:	69e3      	ldr	r3, [r4, #28]
   162c4:	2b00      	cmp	r3, #0
   162c6:	d071      	beq.n	163ac <bt_conn_set_state+0x154>
			conn->pending_no_cb--;
   162c8:	3b01      	subs	r3, #1
   162ca:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   162cc:	f382 8811 	msr	BASEPRI, r2
   162d0:	f3bf 8f6f 	isb	sy
   162d4:	4628      	mov	r0, r5
   162d6:	f00b fc13 	bl	21b00 <z_impl_k_sem_give>
}
   162da:	e7ea      	b.n	162b2 <bt_conn_set_state+0x5a>
		if (conn->type == BT_CONN_TYPE_SCO) {
   162dc:	78a3      	ldrb	r3, [r4, #2]
   162de:	2b04      	cmp	r3, #4
   162e0:	f000 808d 	beq.w	163fe <bt_conn_set_state+0x1a6>
	z_impl_k_queue_init(queue);
   162e4:	f104 0038 	add.w	r0, r4, #56	; 0x38
   162e8:	f012 f818 	bl	2831c <z_impl_k_queue_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   162ec:	484a      	ldr	r0, [pc, #296]	; (16418 <bt_conn_set_state+0x1c0>)
   162ee:	2100      	movs	r1, #0
   162f0:	f00b f82c 	bl	2134c <z_impl_k_poll_signal_raise>
	list->head = NULL;
   162f4:	2300      	movs	r3, #0
	list->tail = NULL;
   162f6:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   162fa:	78e3      	ldrb	r3, [r4, #3]
   162fc:	2b01      	cmp	r3, #1
   162fe:	d17e      	bne.n	163fe <bt_conn_set_state+0x1a6>
			k_work_schedule(&conn->deferred_work,
   16300:	f104 0058 	add.w	r0, r4, #88	; 0x58
   16304:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
   16308:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   1630c:	2300      	movs	r3, #0
   1630e:	f00c b8c1 	b.w	22494 <k_work_schedule>
		if (conn->type == BT_CONN_TYPE_SCO) {
   16312:	78a3      	ldrb	r3, [r4, #2]
   16314:	2b04      	cmp	r3, #4
   16316:	d104      	bne.n	16322 <bt_conn_set_state+0xca>
			bt_conn_unref(conn);
   16318:	4620      	mov	r0, r4
}
   1631a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   1631e:	f00f bc23 	b.w	25b68 <bt_conn_unref>
		switch (old_state) {
   16322:	2e08      	cmp	r6, #8
   16324:	d86b      	bhi.n	163fe <bt_conn_set_state+0x1a6>
   16326:	a301      	add	r3, pc, #4	; (adr r3, 1632c <bt_conn_set_state+0xd4>)
   16328:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1632c:	00016399 	.word	0x00016399
   16330:	00016351 	.word	0x00016351
   16334:	0001638b 	.word	0x0001638b
   16338:	00016319 	.word	0x00016319
   1633c:	00016319 	.word	0x00016319
   16340:	0001638b 	.word	0x0001638b
   16344:	0001638b 	.word	0x0001638b
   16348:	00016399 	.word	0x00016399
   1634c:	00016399 	.word	0x00016399
			tx_notify(conn);
   16350:	4620      	mov	r0, r4
   16352:	f00f fba1 	bl	25a98 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   16356:	78a3      	ldrb	r3, [r4, #2]
   16358:	2b01      	cmp	r3, #1
   1635a:	d103      	bne.n	16364 <bt_conn_set_state+0x10c>
				k_work_cancel_delayable(&conn->deferred_work);
   1635c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   16360:	f012 faa1 	bl	288a6 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16364:	f3bf 8f5b 	dmb	ish
   16368:	3404      	adds	r4, #4
   1636a:	e854 3f00 	ldrex	r3, [r4]
   1636e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   16372:	e844 3200 	strex	r2, r3, [r4]
   16376:	2a00      	cmp	r2, #0
   16378:	d1f7      	bne.n	1636a <bt_conn_set_state+0x112>
   1637a:	f3bf 8f5b 	dmb	ish
   1637e:	4826      	ldr	r0, [pc, #152]	; (16418 <bt_conn_set_state+0x1c0>)
}
   16380:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   16384:	2100      	movs	r1, #0
   16386:	f00a bfe1 	b.w	2134c <z_impl_k_poll_signal_raise>
			if (conn->err) {
   1638a:	7b23      	ldrb	r3, [r4, #12]
   1638c:	2b00      	cmp	r3, #0
   1638e:	d0c3      	beq.n	16318 <bt_conn_set_state+0xc0>
				notify_connected(conn);
   16390:	4620      	mov	r0, r4
   16392:	f7ff fd27 	bl	15de4 <notify_connected>
   16396:	e7bf      	b.n	16318 <bt_conn_set_state+0xc0>
   16398:	4a1a      	ldr	r2, [pc, #104]	; (16404 <bt_conn_set_state+0x1ac>)
   1639a:	4b19      	ldr	r3, [pc, #100]	; (16400 <bt_conn_set_state+0x1a8>)
			BT_WARN("Invalid (%u) old state", state);
   1639c:	481f      	ldr	r0, [pc, #124]	; (1641c <bt_conn_set_state+0x1c4>)
   1639e:	1ad2      	subs	r2, r2, r3
   163a0:	08d2      	lsrs	r2, r2, #3
   163a2:	0192      	lsls	r2, r2, #6
   163a4:	f042 0202 	orr.w	r2, r2, #2
   163a8:	4629      	mov	r1, r5
   163aa:	e76a      	b.n	16282 <bt_conn_set_state+0x2a>
Z_GENLIST_IS_EMPTY(slist)
   163ac:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   163ae:	b128      	cbz	r0, 163bc <bt_conn_set_state+0x164>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   163b0:	69a1      	ldr	r1, [r4, #24]
   163b2:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   163b4:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   163b6:	4288      	cmp	r0, r1
	list->tail = node;
   163b8:	bf08      	it	eq
   163ba:	61a3      	streq	r3, [r4, #24]
   163bc:	f382 8811 	msr	BASEPRI, r2
   163c0:	f3bf 8f6f 	isb	sy
		if (!node) {
   163c4:	b1d8      	cbz	r0, 163fe <bt_conn_set_state+0x1a6>
	__asm__ volatile(
   163c6:	f04f 0240 	mov.w	r2, #64	; 0x40
   163ca:	f3ef 8311 	mrs	r3, BASEPRI
   163ce:	f382 8812 	msr	BASEPRI_MAX, r2
   163d2:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   163d6:	68c2      	ldr	r2, [r0, #12]
   163d8:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   163da:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   163dc:	f383 8811 	msr	BASEPRI, r3
   163e0:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   163e4:	f7ff fcf4 	bl	15dd0 <tx_free>
   163e8:	e774      	b.n	162d4 <bt_conn_set_state+0x7c>
   163ea:	4a06      	ldr	r2, [pc, #24]	; (16404 <bt_conn_set_state+0x1ac>)
   163ec:	4b04      	ldr	r3, [pc, #16]	; (16400 <bt_conn_set_state+0x1a8>)
		BT_WARN("no valid (%u) state was set", state);
   163ee:	480c      	ldr	r0, [pc, #48]	; (16420 <bt_conn_set_state+0x1c8>)
   163f0:	1ad2      	subs	r2, r2, r3
   163f2:	08d2      	lsrs	r2, r2, #3
   163f4:	0192      	lsls	r2, r2, #6
   163f6:	f042 0202 	orr.w	r2, r2, #2
   163fa:	4629      	mov	r1, r5
   163fc:	e741      	b.n	16282 <bt_conn_set_state+0x2a>
}
   163fe:	bd70      	pop	{r4, r5, r6, pc}
   16400:	00028dd4 	.word	0x00028dd4
   16404:	00028e04 	.word	0x00028e04
   16408:	0002aac5 	.word	0x0002aac5
   1640c:	00029500 	.word	0x00029500
   16410:	0002aabb 	.word	0x0002aabb
   16414:	200003b0 	.word	0x200003b0
   16418:	200005b8 	.word	0x200005b8
   1641c:	0002aad6 	.word	0x0002aad6
   16420:	0002aaed 	.word	0x0002aaed

00016424 <bt_conn_index>:
		index = conn - acl_conns;
   16424:	4b03      	ldr	r3, [pc, #12]	; (16434 <bt_conn_index+0x10>)
   16426:	1ac0      	subs	r0, r0, r3
   16428:	4b03      	ldr	r3, [pc, #12]	; (16438 <bt_conn_index+0x14>)
   1642a:	1180      	asrs	r0, r0, #6
   1642c:	4358      	muls	r0, r3
}
   1642e:	b2c0      	uxtb	r0, r0
   16430:	4770      	bx	lr
   16432:	bf00      	nop
   16434:	20001830 	.word	0x20001830
   16438:	aaaaaaab 	.word	0xaaaaaaab

0001643c <bt_conn_create_pdu_timeout>:
{
   1643c:	b538      	push	{r3, r4, r5, lr}
   1643e:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   16440:	490c      	ldr	r1, [pc, #48]	; (16474 <bt_conn_create_pdu_timeout+0x38>)
   16442:	2800      	cmp	r0, #0
   16444:	bf08      	it	eq
   16446:	4608      	moveq	r0, r1
   16448:	f010 fe37 	bl	270ba <net_buf_alloc_fixed>
	if (!buf) {
   1644c:	4604      	mov	r4, r0
   1644e:	b958      	cbnz	r0, 16468 <bt_conn_create_pdu_timeout+0x2c>
   16450:	4909      	ldr	r1, [pc, #36]	; (16478 <bt_conn_create_pdu_timeout+0x3c>)
   16452:	4b0a      	ldr	r3, [pc, #40]	; (1647c <bt_conn_create_pdu_timeout+0x40>)
		BT_WARN("Unable to allocate buffer within timeout");
   16454:	480a      	ldr	r0, [pc, #40]	; (16480 <bt_conn_create_pdu_timeout+0x44>)
   16456:	1ac9      	subs	r1, r1, r3
   16458:	08c9      	lsrs	r1, r1, #3
   1645a:	0189      	lsls	r1, r1, #6
   1645c:	f041 0102 	orr.w	r1, r1, #2
   16460:	f00d fcff 	bl	23e62 <log_0>
}
   16464:	4620      	mov	r0, r4
   16466:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   16468:	1d29      	adds	r1, r5, #4
   1646a:	3008      	adds	r0, #8
   1646c:	f010 fe44 	bl	270f8 <net_buf_simple_reserve>
	return buf;
   16470:	e7f8      	b.n	16464 <bt_conn_create_pdu_timeout+0x28>
   16472:	bf00      	nop
   16474:	20000a30 	.word	0x20000a30
   16478:	00028e04 	.word	0x00028e04
   1647c:	00028dd4 	.word	0x00028dd4
   16480:	0002ab09 	.word	0x0002ab09

00016484 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   16484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16486:	f3bf 8f5b 	dmb	ish
   1648a:	6842      	ldr	r2, [r0, #4]
   1648c:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   16490:	0592      	lsls	r2, r2, #22
{
   16492:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   16494:	f100 0304 	add.w	r3, r0, #4
   16498:	d519      	bpl.n	164ce <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   1649a:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1649e:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
   164a2:	4291      	cmp	r1, r2
   164a4:	d813      	bhi.n	164ce <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   164a6:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
   164aa:	4291      	cmp	r1, r2
   164ac:	d30f      	bcc.n	164ce <notify_le_param_updated+0x4a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   164ae:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
   164b2:	4291      	cmp	r1, r2
   164b4:	d10b      	bne.n	164ce <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   164b6:	f3bf 8f5b 	dmb	ish
   164ba:	e853 2f00 	ldrex	r2, [r3]
   164be:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   164c2:	e843 2100 	strex	r1, r2, [r3]
   164c6:	2900      	cmp	r1, #0
   164c8:	d1f7      	bne.n	164ba <notify_le_param_updated+0x36>
   164ca:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   164ce:	4b10      	ldr	r3, [pc, #64]	; (16510 <notify_le_param_updated+0x8c>)
   164d0:	681d      	ldr	r5, [r3, #0]
   164d2:	b925      	cbnz	r5, 164de <notify_le_param_updated+0x5a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   164d4:	4d0f      	ldr	r5, [pc, #60]	; (16514 <notify_le_param_updated+0x90>)
   164d6:	4f10      	ldr	r7, [pc, #64]	; (16518 <notify_le_param_updated+0x94>)
   164d8:	42bd      	cmp	r5, r7
   164da:	d30c      	bcc.n	164f6 <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   164dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
   164de:	68ee      	ldr	r6, [r5, #12]
   164e0:	b13e      	cbz	r6, 164f2 <notify_le_param_updated+0x6e>
			cb->le_param_updated(conn, conn->le.interval,
   164e2:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   164e6:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   164ea:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   164ee:	4620      	mov	r0, r4
   164f0:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   164f2:	69ad      	ldr	r5, [r5, #24]
   164f4:	e7ed      	b.n	164d2 <notify_le_param_updated+0x4e>
		if (cb->le_param_updated) {
   164f6:	68ee      	ldr	r6, [r5, #12]
   164f8:	b13e      	cbz	r6, 1650a <notify_le_param_updated+0x86>
			cb->le_param_updated(conn, conn->le.interval,
   164fa:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   164fe:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   16502:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   16506:	4620      	mov	r0, r4
   16508:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1650a:	351c      	adds	r5, #28
   1650c:	e7e4      	b.n	164d8 <notify_le_param_updated+0x54>
   1650e:	bf00      	nop
   16510:	20002414 	.word	0x20002414
   16514:	00028d08 	.word	0x00028d08
   16518:	00028d24 	.word	0x00028d24

0001651c <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   1651c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16520:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   16522:	4608      	mov	r0, r1
{
   16524:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   16526:	f00f ff80 	bl	2642a <bt_le_conn_params_valid>
   1652a:	4605      	mov	r5, r0
   1652c:	b918      	cbnz	r0, 16536 <le_param_req+0x1a>
		return false;
   1652e:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   16530:	4628      	mov	r0, r5
   16532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   16536:	4b13      	ldr	r3, [pc, #76]	; (16584 <le_param_req+0x68>)
   16538:	681e      	ldr	r6, [r3, #0]
   1653a:	b946      	cbnz	r6, 1654e <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1653c:	4e12      	ldr	r6, [pc, #72]	; (16588 <le_param_req+0x6c>)
   1653e:	f8df 804c 	ldr.w	r8, [pc, #76]	; 1658c <le_param_req+0x70>
   16542:	4546      	cmp	r6, r8
   16544:	d2f4      	bcs.n	16530 <le_param_req+0x14>
		if (!cb->le_param_req) {
   16546:	68b3      	ldr	r3, [r6, #8]
   16548:	b983      	cbnz	r3, 1656c <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1654a:	361c      	adds	r6, #28
   1654c:	e7f9      	b.n	16542 <le_param_req+0x26>
		if (!cb->le_param_req) {
   1654e:	68b3      	ldr	r3, [r6, #8]
   16550:	b90b      	cbnz	r3, 16556 <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
   16552:	69b6      	ldr	r6, [r6, #24]
   16554:	e7f1      	b.n	1653a <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   16556:	4621      	mov	r1, r4
   16558:	4638      	mov	r0, r7
   1655a:	4798      	blx	r3
   1655c:	2800      	cmp	r0, #0
   1655e:	d0e6      	beq.n	1652e <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   16560:	4620      	mov	r0, r4
   16562:	f00f ff62 	bl	2642a <bt_le_conn_params_valid>
   16566:	2800      	cmp	r0, #0
   16568:	d1f3      	bne.n	16552 <le_param_req+0x36>
   1656a:	e7e0      	b.n	1652e <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   1656c:	4621      	mov	r1, r4
   1656e:	4638      	mov	r0, r7
   16570:	4798      	blx	r3
   16572:	2800      	cmp	r0, #0
   16574:	d0db      	beq.n	1652e <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   16576:	4620      	mov	r0, r4
   16578:	f00f ff57 	bl	2642a <bt_le_conn_params_valid>
   1657c:	2800      	cmp	r0, #0
   1657e:	d1e4      	bne.n	1654a <le_param_req+0x2e>
   16580:	e7d5      	b.n	1652e <le_param_req+0x12>
   16582:	bf00      	nop
   16584:	20002414 	.word	0x20002414
   16588:	00028d08 	.word	0x00028d08
   1658c:	00028d24 	.word	0x00028d24

00016590 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   16590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   16594:	78c3      	ldrb	r3, [r0, #3]
{
   16596:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   16598:	b973      	cbnz	r3, 165b8 <bt_conn_identity_resolved+0x28>
		rpa = &conn->le.resp_addr;
   1659a:	f100 0696 	add.w	r6, r0, #150	; 0x96
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   1659e:	4b10      	ldr	r3, [pc, #64]	; (165e0 <bt_conn_identity_resolved+0x50>)
   165a0:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   165a2:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
   165a6:	b955      	cbnz	r5, 165be <bt_conn_identity_resolved+0x2e>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   165a8:	4d0e      	ldr	r5, [pc, #56]	; (165e4 <bt_conn_identity_resolved+0x54>)
   165aa:	4f0f      	ldr	r7, [pc, #60]	; (165e8 <bt_conn_identity_resolved+0x58>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   165ac:	f104 0888 	add.w	r8, r4, #136	; 0x88
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   165b0:	42bd      	cmp	r5, r7
   165b2:	d30c      	bcc.n	165ce <bt_conn_identity_resolved+0x3e>
		}
	}
}
   165b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rpa = &conn->le.init_addr;
   165b8:	f100 068f 	add.w	r6, r0, #143	; 0x8f
   165bc:	e7ef      	b.n	1659e <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   165be:	692b      	ldr	r3, [r5, #16]
   165c0:	b11b      	cbz	r3, 165ca <bt_conn_identity_resolved+0x3a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   165c2:	463a      	mov	r2, r7
   165c4:	4631      	mov	r1, r6
   165c6:	4620      	mov	r0, r4
   165c8:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   165ca:	69ad      	ldr	r5, [r5, #24]
   165cc:	e7eb      	b.n	165a6 <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   165ce:	692b      	ldr	r3, [r5, #16]
   165d0:	b11b      	cbz	r3, 165da <bt_conn_identity_resolved+0x4a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   165d2:	4642      	mov	r2, r8
   165d4:	4631      	mov	r1, r6
   165d6:	4620      	mov	r0, r4
   165d8:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   165da:	351c      	adds	r5, #28
   165dc:	e7e8      	b.n	165b0 <bt_conn_identity_resolved+0x20>
   165de:	bf00      	nop
   165e0:	20002414 	.word	0x20002414
   165e4:	00028d08 	.word	0x00028d08
   165e8:	00028d24 	.word	0x00028d24

000165ec <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   165ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   165ee:	7a43      	ldrb	r3, [r0, #9]
   165f0:	7283      	strb	r3, [r0, #10]
{
   165f2:	4604      	mov	r4, r0
   165f4:	4615      	mov	r5, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   165f6:	f010 f89b 	bl	26730 <bt_l2cap_security_changed>

	for (cb = callback_list; cb; cb = cb->_next) {
   165fa:	4b13      	ldr	r3, [pc, #76]	; (16648 <bt_conn_security_changed+0x5c>)
   165fc:	681e      	ldr	r6, [r3, #0]
   165fe:	b98e      	cbnz	r6, 16624 <bt_conn_security_changed+0x38>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16600:	4e12      	ldr	r6, [pc, #72]	; (1664c <bt_conn_security_changed+0x60>)
   16602:	4f13      	ldr	r7, [pc, #76]	; (16650 <bt_conn_security_changed+0x64>)
   16604:	42be      	cmp	r6, r7
   16606:	d315      	bcc.n	16634 <bt_conn_security_changed+0x48>
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

#if IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST)
	if (!err && conn->sec_level >= BT_SECURITY_L2) {
   16608:	b9e5      	cbnz	r5, 16644 <bt_conn_security_changed+0x58>
   1660a:	7a63      	ldrb	r3, [r4, #9]
   1660c:	2b01      	cmp	r3, #1
   1660e:	d919      	bls.n	16644 <bt_conn_security_changed+0x58>
		if (conn->type == BT_CONN_TYPE_LE) {
   16610:	78a3      	ldrb	r3, [r4, #2]
   16612:	2b01      	cmp	r3, #1
   16614:	d116      	bne.n	16644 <bt_conn_security_changed+0x58>
			bt_keys_update_usage(conn->id, bt_conn_get_dst(conn));
   16616:	7a20      	ldrb	r0, [r4, #8]
   16618:	f104 0188 	add.w	r1, r4, #136	; 0x88
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   1661c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			bt_keys_update_usage(conn->id, bt_conn_get_dst(conn));
   16620:	f004 bb08 	b.w	1ac34 <bt_keys_update_usage>
		if (cb->security_changed) {
   16624:	6973      	ldr	r3, [r6, #20]
   16626:	b11b      	cbz	r3, 16630 <bt_conn_security_changed+0x44>
			cb->security_changed(conn, conn->sec_level, err);
   16628:	7a61      	ldrb	r1, [r4, #9]
   1662a:	462a      	mov	r2, r5
   1662c:	4620      	mov	r0, r4
   1662e:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   16630:	69b6      	ldr	r6, [r6, #24]
   16632:	e7e4      	b.n	165fe <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   16634:	6973      	ldr	r3, [r6, #20]
   16636:	b11b      	cbz	r3, 16640 <bt_conn_security_changed+0x54>
			cb->security_changed(conn, conn->sec_level, err);
   16638:	7a61      	ldrb	r1, [r4, #9]
   1663a:	462a      	mov	r2, r5
   1663c:	4620      	mov	r0, r4
   1663e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16640:	361c      	adds	r6, #28
   16642:	e7df      	b.n	16604 <bt_conn_security_changed+0x18>
}
   16644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16646:	bf00      	nop
   16648:	20002414 	.word	0x20002414
   1664c:	00028d08 	.word	0x00028d08
   16650:	00028d24 	.word	0x00028d24

00016654 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   16654:	b570      	push	{r4, r5, r6, lr}
   16656:	4606      	mov	r6, r0
   16658:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   1665a:	480a      	ldr	r0, [pc, #40]	; (16684 <bt_conn_add_le+0x30>)
   1665c:	2101      	movs	r1, #1
   1665e:	f7ff fc85 	bl	15f6c <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   16662:	4604      	mov	r4, r0
   16664:	b160      	cbz	r0, 16680 <bt_conn_add_le+0x2c>
		return NULL;
	}

	conn->id = id;
   16666:	7206      	strb	r6, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
   16668:	2207      	movs	r2, #7
   1666a:	4629      	mov	r1, r5
   1666c:	3088      	adds	r0, #136	; 0x88
   1666e:	f00e fc07 	bl	24e80 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   16672:	2301      	movs	r3, #1
   16674:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   16676:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   16678:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   1667a:	4b03      	ldr	r3, [pc, #12]	; (16688 <bt_conn_add_le+0x34>)
   1667c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   16680:	4620      	mov	r0, r4
   16682:	bd70      	pop	{r4, r5, r6, pc}
   16684:	20001830 	.word	0x20001830
   16688:	00280018 	.word	0x00280018

0001668c <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   1668c:	b570      	push	{r4, r5, r6, lr}
   1668e:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   16690:	480c      	ldr	r0, [pc, #48]	; (166c4 <bt_conn_lookup_addr_le+0x38>)
{
   16692:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   16694:	f00f fa4d 	bl	25b32 <bt_conn_ref>

		if (!conn) {
   16698:	4604      	mov	r4, r0
   1669a:	b128      	cbz	r0, 166a8 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   1669c:	7883      	ldrb	r3, [r0, #2]
   1669e:	2b01      	cmp	r3, #1
   166a0:	d004      	beq.n	166ac <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
   166a2:	f00f fa61 	bl	25b68 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   166a6:	2400      	movs	r4, #0
}
   166a8:	4620      	mov	r0, r4
   166aa:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   166ac:	4629      	mov	r1, r5
   166ae:	4632      	mov	r2, r6
   166b0:	f00f faf8 	bl	25ca4 <bt_conn_is_peer_addr_le>
   166b4:	4605      	mov	r5, r0
   166b6:	2800      	cmp	r0, #0
   166b8:	d1f6      	bne.n	166a8 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   166ba:	4620      	mov	r0, r4
   166bc:	f00f fa54 	bl	25b68 <bt_conn_unref>
	return NULL;
   166c0:	462c      	mov	r4, r5
			continue;
   166c2:	e7f1      	b.n	166a8 <bt_conn_lookup_addr_le+0x1c>
   166c4:	20001830 	.word	0x20001830

000166c8 <bt_conn_exists_le>:
{
   166c8:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   166ca:	f7ff ffdf 	bl	1668c <bt_conn_lookup_addr_le>
	if (conn) {
   166ce:	4604      	mov	r4, r0
   166d0:	b1a0      	cbz	r0, 166fc <bt_conn_exists_le+0x34>
   166d2:	4b0b      	ldr	r3, [pc, #44]	; (16700 <bt_conn_exists_le+0x38>)
   166d4:	4a0b      	ldr	r2, [pc, #44]	; (16704 <bt_conn_exists_le+0x3c>)
   166d6:	1ad2      	subs	r2, r2, r3
		BT_WARN("Found valid connection in %s state",
   166d8:	7b43      	ldrb	r3, [r0, #13]
   166da:	480b      	ldr	r0, [pc, #44]	; (16708 <bt_conn_exists_le+0x40>)
   166dc:	2b08      	cmp	r3, #8
   166de:	bf96      	itet	ls
   166e0:	490a      	ldrls	r1, [pc, #40]	; (1670c <bt_conn_exists_le+0x44>)
   166e2:	490b      	ldrhi	r1, [pc, #44]	; (16710 <bt_conn_exists_le+0x48>)
   166e4:	f851 1023 	ldrls.w	r1, [r1, r3, lsl #2]
   166e8:	08d2      	lsrs	r2, r2, #3
   166ea:	0192      	lsls	r2, r2, #6
   166ec:	f042 0202 	orr.w	r2, r2, #2
   166f0:	f00d fbc4 	bl	23e7c <log_1>
		bt_conn_unref(conn);
   166f4:	4620      	mov	r0, r4
   166f6:	f00f fa37 	bl	25b68 <bt_conn_unref>
		return true;
   166fa:	2001      	movs	r0, #1
}
   166fc:	bd10      	pop	{r4, pc}
   166fe:	bf00      	nop
   16700:	00028dd4 	.word	0x00028dd4
   16704:	00028e04 	.word	0x00028e04
   16708:	0002ab32 	.word	0x0002ab32
   1670c:	00029500 	.word	0x00029500
   16710:	0002aabb 	.word	0x0002aabb

00016714 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   16714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16716:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   16718:	480e      	ldr	r0, [pc, #56]	; (16754 <bt_conn_lookup_state_le+0x40>)
{
   1671a:	460e      	mov	r6, r1
   1671c:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1671e:	f00f fa08 	bl	25b32 <bt_conn_ref>

		if (!conn) {
   16722:	4604      	mov	r4, r0
   16724:	b1a0      	cbz	r0, 16750 <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   16726:	7883      	ldrb	r3, [r0, #2]
   16728:	2b01      	cmp	r3, #1
   1672a:	d003      	beq.n	16734 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   1672c:	f00f fa1c 	bl	25b68 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   16730:	2400      	movs	r4, #0
			continue;
   16732:	e00d      	b.n	16750 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   16734:	b136      	cbz	r6, 16744 <bt_conn_lookup_state_le+0x30>
   16736:	4632      	mov	r2, r6
   16738:	4629      	mov	r1, r5
   1673a:	f00f fab3 	bl	25ca4 <bt_conn_is_peer_addr_le>
   1673e:	b908      	cbnz	r0, 16744 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   16740:	4620      	mov	r0, r4
   16742:	e7f3      	b.n	1672c <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   16744:	7b63      	ldrb	r3, [r4, #13]
   16746:	42bb      	cmp	r3, r7
   16748:	d1fa      	bne.n	16740 <bt_conn_lookup_state_le+0x2c>
   1674a:	7a23      	ldrb	r3, [r4, #8]
   1674c:	42ab      	cmp	r3, r5
   1674e:	d1f7      	bne.n	16740 <bt_conn_lookup_state_le+0x2c>
}
   16750:	4620      	mov	r0, r4
   16752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16754:	20001830 	.word	0x20001830

00016758 <send_conn_le_param_update>:
{
   16758:	b538      	push	{r3, r4, r5, lr}
   1675a:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   1675c:	4608      	mov	r0, r1
{
   1675e:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   16760:	f00f fe63 	bl	2642a <bt_le_conn_params_valid>
   16764:	b348      	cbz	r0, 167ba <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   16766:	4b16      	ldr	r3, [pc, #88]	; (167c0 <send_conn_le_param_update+0x68>)
   16768:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   1676c:	0799      	lsls	r1, r3, #30
   1676e:	d407      	bmi.n	16780 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   16770:	78e3      	ldrb	r3, [r4, #3]
   16772:	b183      	cbz	r3, 16796 <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   16774:	4629      	mov	r1, r5
   16776:	4620      	mov	r0, r4
}
   16778:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   1677c:	f004 bbe2 	b.w	1af44 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   16780:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   16784:	079a      	lsls	r2, r3, #30
   16786:	d5f3      	bpl.n	16770 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16788:	f3bf 8f5b 	dmb	ish
   1678c:	6863      	ldr	r3, [r4, #4]
   1678e:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   16792:	055b      	lsls	r3, r3, #21
   16794:	d4ec      	bmi.n	16770 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   16796:	4629      	mov	r1, r5
   16798:	4620      	mov	r0, r4
   1679a:	f00f faa5 	bl	25ce8 <bt_conn_le_conn_update>
		if (rc == 0) {
   1679e:	b958      	cbnz	r0, 167b8 <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
   167a0:	882b      	ldrh	r3, [r5, #0]
   167a2:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   167a6:	886b      	ldrh	r3, [r5, #2]
   167a8:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   167ac:	88ab      	ldrh	r3, [r5, #4]
   167ae:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   167b2:	88eb      	ldrh	r3, [r5, #6]
   167b4:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   167b8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   167ba:	f06f 0015 	mvn.w	r0, #21
   167be:	e7fb      	b.n	167b8 <send_conn_le_param_update+0x60>
   167c0:	200002b0 	.word	0x200002b0

000167c4 <deferred_work>:
{
   167c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   167c6:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
   167ca:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   167cc:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   167d0:	b9f3      	cbnz	r3, 16810 <deferred_work+0x4c>
		bt_l2cap_disconnected(conn);
   167d2:	4628      	mov	r0, r5
   167d4:	f00f ff96 	bl	26704 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   167d8:	4b25      	ldr	r3, [pc, #148]	; (16870 <deferred_work+0xac>)
   167da:	681e      	ldr	r6, [r3, #0]
   167dc:	b946      	cbnz	r6, 167f0 <deferred_work+0x2c>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   167de:	4e25      	ldr	r6, [pc, #148]	; (16874 <deferred_work+0xb0>)
   167e0:	4f25      	ldr	r7, [pc, #148]	; (16878 <deferred_work+0xb4>)
   167e2:	42be      	cmp	r6, r7
   167e4:	d30c      	bcc.n	16800 <deferred_work+0x3c>
		bt_conn_unref(conn);
   167e6:	4628      	mov	r0, r5
   167e8:	f00f f9be 	bl	25b68 <bt_conn_unref>
}
   167ec:	b003      	add	sp, #12
   167ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (cb->disconnected) {
   167f0:	6873      	ldr	r3, [r6, #4]
   167f2:	b11b      	cbz	r3, 167fc <deferred_work+0x38>
			cb->disconnected(conn, conn->err);
   167f4:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   167f8:	4628      	mov	r0, r5
   167fa:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   167fc:	69b6      	ldr	r6, [r6, #24]
   167fe:	e7ed      	b.n	167dc <deferred_work+0x18>
		if (cb->disconnected) {
   16800:	6873      	ldr	r3, [r6, #4]
   16802:	b11b      	cbz	r3, 1680c <deferred_work+0x48>
			cb->disconnected(conn, conn->err);
   16804:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   16808:	4628      	mov	r0, r5
   1680a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1680c:	361c      	adds	r6, #28
   1680e:	e7e8      	b.n	167e2 <deferred_work+0x1e>
	if (conn->type != BT_CONN_TYPE_LE) {
   16810:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   16814:	2b01      	cmp	r3, #1
   16816:	d1e9      	bne.n	167ec <deferred_work+0x28>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16818:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
   1681c:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
   16820:	e856 3f00 	ldrex	r3, [r6]
   16824:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   16828:	e846 2100 	strex	r1, r2, [r6]
   1682c:	2900      	cmp	r1, #0
   1682e:	d1f7      	bne.n	16820 <deferred_work+0x5c>
   16830:	f3bf 8f5b 	dmb	ish
   16834:	059b      	lsls	r3, r3, #22
   16836:	d514      	bpl.n	16862 <deferred_work+0x9e>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   16838:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1683a:	9300      	str	r3, [sp, #0]
   1683c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1683e:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   16840:	4669      	mov	r1, sp
   16842:	4628      	mov	r0, r5
   16844:	f7ff ff88 	bl	16758 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16848:	f3bf 8f5b 	dmb	ish
   1684c:	e856 3f00 	ldrex	r3, [r6]
   16850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   16854:	e846 3200 	strex	r2, r3, [r6]
   16858:	2a00      	cmp	r2, #0
   1685a:	d1f7      	bne.n	1684c <deferred_work+0x88>
   1685c:	f3bf 8f5b 	dmb	ish
   16860:	e7c4      	b.n	167ec <deferred_work+0x28>
		param = BT_LE_CONN_PARAM(
   16862:	4a06      	ldr	r2, [pc, #24]	; (1687c <deferred_work+0xb8>)
   16864:	6810      	ldr	r0, [r2, #0]
   16866:	6851      	ldr	r1, [r2, #4]
   16868:	466b      	mov	r3, sp
   1686a:	c303      	stmia	r3!, {r0, r1}
   1686c:	e7e8      	b.n	16840 <deferred_work+0x7c>
   1686e:	bf00      	nop
   16870:	20002414 	.word	0x20002414
   16874:	00028d08 	.word	0x00028d08
   16878:	00028d24 	.word	0x00028d24
   1687c:	00029038 	.word	0x00029038

00016880 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   16880:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   16882:	4801      	ldr	r0, [pc, #4]	; (16888 <bt_conn_create_frag_timeout+0x8>)
   16884:	f7ff bdda 	b.w	1643c <bt_conn_create_pdu_timeout>
   16888:	20000a88 	.word	0x20000a88

0001688c <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   1688c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16890:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   16892:	f04f 33ff 	mov.w	r3, #4294967295
   16896:	f04f 32ff 	mov.w	r2, #4294967295
   1689a:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   1689c:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   1689e:	f7ff ffef 	bl	16880 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   168a2:	7833      	ldrb	r3, [r6, #0]
   168a4:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   168a6:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   168a8:	f04f 0600 	mov.w	r6, #0
   168ac:	d005      	beq.n	168ba <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
   168ae:	f006 fc17 	bl	1d0e0 <net_buf_unref>
		return NULL;
   168b2:	4635      	mov	r5, r6
}
   168b4:	4628      	mov	r0, r5
   168b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   168ba:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   168bc:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   168c0:	4e0c      	ldr	r6, [pc, #48]	; (168f4 <create_frag.isra.0+0x68>)
   168c2:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   168c4:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   168c8:	f010 fcd1 	bl	2726e <net_buf_simple_tailroom>
   168cc:	4580      	cmp	r8, r0
   168ce:	d20c      	bcs.n	168ea <create_frag.isra.0+0x5e>
	return bt_dev.le.acl_mtu;
   168d0:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   168d4:	f854 1f08 	ldr.w	r1, [r4, #8]!
   168d8:	4632      	mov	r2, r6
   168da:	4638      	mov	r0, r7
   168dc:	f010 fc92 	bl	27204 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   168e0:	4631      	mov	r1, r6
   168e2:	4620      	mov	r0, r4
   168e4:	f010 fca7 	bl	27236 <net_buf_simple_pull>
   168e8:	e7e4      	b.n	168b4 <create_frag.isra.0+0x28>
	return net_buf_simple_tailroom(&buf->b);
   168ea:	4638      	mov	r0, r7
   168ec:	f010 fcbf 	bl	2726e <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   168f0:	b286      	uxth	r6, r0
   168f2:	e7ef      	b.n	168d4 <create_frag.isra.0+0x48>
   168f4:	200002b0 	.word	0x200002b0

000168f8 <bt_conn_process_tx>:
{
   168f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   168fa:	7b43      	ldrb	r3, [r0, #13]
{
   168fc:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   168fe:	b993      	cbnz	r3, 16926 <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16900:	f3bf 8f5b 	dmb	ish
   16904:	1d03      	adds	r3, r0, #4
   16906:	e853 2f00 	ldrex	r2, [r3]
   1690a:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   1690e:	e843 1400 	strex	r4, r1, [r3]
   16912:	2c00      	cmp	r4, #0
   16914:	d1f7      	bne.n	16906 <bt_conn_process_tx+0xe>
   16916:	f3bf 8f5b 	dmb	ish
   1691a:	0653      	lsls	r3, r2, #25
   1691c:	d503      	bpl.n	16926 <bt_conn_process_tx+0x2e>
}
   1691e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
   16922:	f00f b8e8 	b.w	25af6 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   16926:	2200      	movs	r2, #0
   16928:	2300      	movs	r3, #0
   1692a:	f105 0038 	add.w	r0, r5, #56	; 0x38
   1692e:	f010 fbc9 	bl	270c4 <net_buf_get>
	BT_ASSERT(buf);
   16932:	4604      	mov	r4, r0
   16934:	b960      	cbnz	r0, 16950 <bt_conn_process_tx+0x58>
   16936:	4a20      	ldr	r2, [pc, #128]	; (169b8 <bt_conn_process_tx+0xc0>)
   16938:	4920      	ldr	r1, [pc, #128]	; (169bc <bt_conn_process_tx+0xc4>)
   1693a:	4821      	ldr	r0, [pc, #132]	; (169c0 <bt_conn_process_tx+0xc8>)
   1693c:	f240 23e7 	movw	r3, #743	; 0x2e7
   16940:	f00e f8fe 	bl	24b40 <printk>
   16944:	4040      	eors	r0, r0
   16946:	f380 8811 	msr	BASEPRI, r0
   1694a:	f04f 0003 	mov.w	r0, #3
   1694e:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   16950:	4f1c      	ldr	r7, [pc, #112]	; (169c4 <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
   16952:	89a1      	ldrh	r1, [r4, #12]
   16954:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	; 0xfc
   16958:	4291      	cmp	r1, r2
   1695a:	d807      	bhi.n	1696c <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   1695c:	2300      	movs	r3, #0
   1695e:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   16960:	4621      	mov	r1, r4
   16962:	4628      	mov	r0, r5
   16964:	f7ff fa62 	bl	15e2c <send_frag>
	if (!send_buf(conn, buf)) {
   16968:	b140      	cbz	r0, 1697c <bt_conn_process_tx+0x84>
}
   1696a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
   1696c:	f105 060d 	add.w	r6, r5, #13
   16970:	4621      	mov	r1, r4
   16972:	4630      	mov	r0, r6
   16974:	f7ff ff8a 	bl	1688c <create_frag.isra.0>
	if (!frag) {
   16978:	4601      	mov	r1, r0
   1697a:	b920      	cbnz	r0, 16986 <bt_conn_process_tx+0x8e>
		net_buf_unref(buf);
   1697c:	4620      	mov	r0, r4
}
   1697e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
   16982:	f006 bbad 	b.w	1d0e0 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   16986:	2301      	movs	r3, #1
   16988:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   1698a:	4628      	mov	r0, r5
   1698c:	f7ff fa4e 	bl	15e2c <send_frag>
   16990:	2800      	cmp	r0, #0
   16992:	d0f3      	beq.n	1697c <bt_conn_process_tx+0x84>
	while (buf->len > conn_mtu(conn)) {
   16994:	89a2      	ldrh	r2, [r4, #12]
   16996:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
   1699a:	429a      	cmp	r2, r3
   1699c:	d802      	bhi.n	169a4 <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, FRAG_END, false);
   1699e:	2300      	movs	r3, #0
   169a0:	2203      	movs	r2, #3
   169a2:	e7dd      	b.n	16960 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
   169a4:	4621      	mov	r1, r4
   169a6:	4630      	mov	r0, r6
   169a8:	f7ff ff70 	bl	1688c <create_frag.isra.0>
		if (!frag) {
   169ac:	4601      	mov	r1, r0
   169ae:	2800      	cmp	r0, #0
   169b0:	d0e4      	beq.n	1697c <bt_conn_process_tx+0x84>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   169b2:	2301      	movs	r3, #1
   169b4:	461a      	mov	r2, r3
   169b6:	e7e8      	b.n	1698a <bt_conn_process_tx+0x92>
   169b8:	0002ab55 	.word	0x0002ab55
   169bc:	0002a9a7 	.word	0x0002a9a7
   169c0:	0002ab85 	.word	0x0002ab85
   169c4:	200002b0 	.word	0x200002b0

000169c8 <bt_conn_auth_cb_register>:
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   169c8:	4b0c      	ldr	r3, [pc, #48]	; (169fc <bt_conn_auth_cb_register+0x34>)
   169ca:	b908      	cbnz	r0, 169d0 <bt_conn_auth_cb_register+0x8>
		bt_auth = NULL;
   169cc:	6018      	str	r0, [r3, #0]
		return 0;
   169ce:	4770      	bx	lr
	}

	if (bt_auth) {
   169d0:	681a      	ldr	r2, [r3, #0]
   169d2:	b962      	cbnz	r2, 169ee <bt_conn_auth_cb_register+0x26>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   169d4:	6902      	ldr	r2, [r0, #16]
   169d6:	b93a      	cbnz	r2, 169e8 <bt_conn_auth_cb_register+0x20>
   169d8:	6802      	ldr	r2, [r0, #0]
   169da:	b95a      	cbnz	r2, 169f4 <bt_conn_auth_cb_register+0x2c>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   169dc:	6842      	ldr	r2, [r0, #4]
   169de:	b94a      	cbnz	r2, 169f4 <bt_conn_auth_cb_register+0x2c>
   169e0:	6882      	ldr	r2, [r0, #8]
   169e2:	b93a      	cbnz	r2, 169f4 <bt_conn_auth_cb_register+0x2c>
   169e4:	6942      	ldr	r2, [r0, #20]
   169e6:	b92a      	cbnz	r2, 169f4 <bt_conn_auth_cb_register+0x2c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   169e8:	6018      	str	r0, [r3, #0]
	return 0;
   169ea:	2000      	movs	r0, #0
   169ec:	4770      	bx	lr
		return -EALREADY;
   169ee:	f06f 0077 	mvn.w	r0, #119	; 0x77
   169f2:	4770      	bx	lr
		return -EINVAL;
   169f4:	f06f 0015 	mvn.w	r0, #21
}
   169f8:	4770      	bx	lr
   169fa:	bf00      	nop
   169fc:	20002410 	.word	0x20002410

00016a00 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   16a00:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   16a02:	490b      	ldr	r1, [pc, #44]	; (16a30 <bt_conn_init+0x30>)
   16a04:	480b      	ldr	r0, [pc, #44]	; (16a34 <bt_conn_init+0x34>)
   16a06:	f011 fc95 	bl	28334 <k_queue_append>
   16a0a:	490b      	ldr	r1, [pc, #44]	; (16a38 <bt_conn_init+0x38>)
   16a0c:	4809      	ldr	r0, [pc, #36]	; (16a34 <bt_conn_init+0x34>)
   16a0e:	f011 fc91 	bl	28334 <k_queue_append>
   16a12:	490a      	ldr	r1, [pc, #40]	; (16a3c <bt_conn_init+0x3c>)
   16a14:	4807      	ldr	r0, [pc, #28]	; (16a34 <bt_conn_init+0x34>)
   16a16:	f011 fc8d 	bl	28334 <k_queue_append>
	}

	bt_att_init();
   16a1a:	f00e ff95 	bl	25948 <bt_att_init>

	err = bt_smp_init();
   16a1e:	f006 f9f1 	bl	1ce04 <bt_smp_init>
	if (err) {
   16a22:	4604      	mov	r4, r0
   16a24:	b908      	cbnz	r0, 16a2a <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
   16a26:	f00f fed9 	bl	267dc <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   16a2a:	4620      	mov	r0, r4
   16a2c:	bd10      	pop	{r4, pc}
   16a2e:	bf00      	nop
   16a30:	20002418 	.word	0x20002418
   16a34:	20000a18 	.word	0x20000a18
   16a38:	20002428 	.word	0x20002428
   16a3c:	20002438 	.word	0x20002438

00016a40 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   16a40:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   16a42:	4904      	ldr	r1, [pc, #16]	; (16a54 <bt_pub_key_is_debug+0x14>)
   16a44:	2240      	movs	r2, #64	; 0x40
   16a46:	f00e fa0b 	bl	24e60 <memcmp>
}
   16a4a:	fab0 f080 	clz	r0, r0
   16a4e:	0940      	lsrs	r0, r0, #5
   16a50:	bd08      	pop	{r3, pc}
   16a52:	bf00      	nop
   16a54:	0002ac8d 	.word	0x0002ac8d

00016a58 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   16a58:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   16a5a:	4b44      	ldr	r3, [pc, #272]	; (16b6c <bt_pub_key_gen+0x114>)
   16a5c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   16a60:	f003 0306 	and.w	r3, r3, #6
   16a64:	2b06      	cmp	r3, #6
   16a66:	d00d      	beq.n	16a84 <bt_pub_key_gen+0x2c>
   16a68:	4b41      	ldr	r3, [pc, #260]	; (16b70 <bt_pub_key_gen+0x118>)
   16a6a:	4942      	ldr	r1, [pc, #264]	; (16b74 <bt_pub_key_gen+0x11c>)
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
   16a6c:	4842      	ldr	r0, [pc, #264]	; (16b78 <bt_pub_key_gen+0x120>)
   16a6e:	1ac9      	subs	r1, r1, r3
   16a70:	08c9      	lsrs	r1, r1, #3
   16a72:	0189      	lsls	r1, r1, #6
   16a74:	f041 0102 	orr.w	r1, r1, #2
   16a78:	f00d f9f3 	bl	23e62 <log_0>
		return -ENOTSUP;
   16a7c:	f06f 0685 	mvn.w	r6, #133	; 0x85
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   16a80:	4630      	mov	r0, r6
   16a82:	bd70      	pop	{r4, r5, r6, pc}
	if (!new_cb) {
   16a84:	2800      	cmp	r0, #0
   16a86:	d06d      	beq.n	16b64 <bt_pub_key_gen+0x10c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   16a88:	4d3c      	ldr	r5, [pc, #240]	; (16b7c <bt_pub_key_gen+0x124>)
   16a8a:	682a      	ldr	r2, [r5, #0]
   16a8c:	b10a      	cbz	r2, 16a92 <bt_pub_key_gen+0x3a>
   16a8e:	1f13      	subs	r3, r2, #4
   16a90:	b9bb      	cbnz	r3, 16ac2 <bt_pub_key_gen+0x6a>
	parent->next = child;
   16a92:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   16a94:	686a      	ldr	r2, [r5, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   16a96:	1d03      	adds	r3, r0, #4
	list->head = node;
   16a98:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   16a9a:	b902      	cbnz	r2, 16a9e <bt_pub_key_gen+0x46>
	list->tail = node;
   16a9c:	606b      	str	r3, [r5, #4]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16a9e:	4c38      	ldr	r4, [pc, #224]	; (16b80 <bt_pub_key_gen+0x128>)
   16aa0:	f3bf 8f5b 	dmb	ish
   16aa4:	e854 2f00 	ldrex	r2, [r4]
   16aa8:	f042 0310 	orr.w	r3, r2, #16
   16aac:	e844 3100 	strex	r1, r3, [r4]
   16ab0:	2900      	cmp	r1, #0
   16ab2:	d1f7      	bne.n	16aa4 <bt_pub_key_gen+0x4c>
   16ab4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   16ab8:	f012 0210 	ands.w	r2, r2, #16
   16abc:	d017      	beq.n	16aee <bt_pub_key_gen+0x96>
		return 0;
   16abe:	2600      	movs	r6, #0
   16ac0:	e7de      	b.n	16a80 <bt_pub_key_gen+0x28>
		if (cb == new_cb) {
   16ac2:	4298      	cmp	r0, r3
   16ac4:	d10c      	bne.n	16ae0 <bt_pub_key_gen+0x88>
   16ac6:	4b2a      	ldr	r3, [pc, #168]	; (16b70 <bt_pub_key_gen+0x118>)
   16ac8:	492a      	ldr	r1, [pc, #168]	; (16b74 <bt_pub_key_gen+0x11c>)
			BT_WARN("Callback already registered");
   16aca:	482e      	ldr	r0, [pc, #184]	; (16b84 <bt_pub_key_gen+0x12c>)
   16acc:	1ac9      	subs	r1, r1, r3
   16ace:	08c9      	lsrs	r1, r1, #3
   16ad0:	0189      	lsls	r1, r1, #6
   16ad2:	f041 0102 	orr.w	r1, r1, #2
   16ad6:	f00d f9c4 	bl	23e62 <log_0>
			return -EALREADY;
   16ada:	f06f 0677 	mvn.w	r6, #119	; 0x77
   16ade:	e7cf      	b.n	16a80 <bt_pub_key_gen+0x28>
Z_GENLIST_PEEK_NEXT(slist, snode)
   16ae0:	1d19      	adds	r1, r3, #4
   16ae2:	d0d6      	beq.n	16a92 <bt_pub_key_gen+0x3a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16ae4:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   16ae6:	2b00      	cmp	r3, #0
   16ae8:	d0d3      	beq.n	16a92 <bt_pub_key_gen+0x3a>
   16aea:	3b04      	subs	r3, #4
   16aec:	e7d0      	b.n	16a90 <bt_pub_key_gen+0x38>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16aee:	f3bf 8f5b 	dmb	ish
   16af2:	e854 3f00 	ldrex	r3, [r4]
   16af6:	f023 0308 	bic.w	r3, r3, #8
   16afa:	e844 3100 	strex	r1, r3, [r4]
   16afe:	2900      	cmp	r1, #0
   16b00:	d1f7      	bne.n	16af2 <bt_pub_key_gen+0x9a>
   16b02:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   16b06:	4611      	mov	r1, r2
   16b08:	f242 0025 	movw	r0, #8229	; 0x2025
   16b0c:	f002 fabe 	bl	1908c <bt_hci_cmd_send_sync>
	if (err) {
   16b10:	4606      	mov	r6, r0
   16b12:	2800      	cmp	r0, #0
   16b14:	d0d3      	beq.n	16abe <bt_pub_key_gen+0x66>
   16b16:	4b16      	ldr	r3, [pc, #88]	; (16b70 <bt_pub_key_gen+0x118>)
   16b18:	4916      	ldr	r1, [pc, #88]	; (16b74 <bt_pub_key_gen+0x11c>)
		BT_ERR("Sending LE P256 Public Key command failed");
   16b1a:	481b      	ldr	r0, [pc, #108]	; (16b88 <bt_pub_key_gen+0x130>)
   16b1c:	1ac9      	subs	r1, r1, r3
   16b1e:	08c9      	lsrs	r1, r1, #3
   16b20:	0189      	lsls	r1, r1, #6
   16b22:	f041 0101 	orr.w	r1, r1, #1
   16b26:	f00d f99c 	bl	23e62 <log_0>
   16b2a:	f3bf 8f5b 	dmb	ish
   16b2e:	e854 3f00 	ldrex	r3, [r4]
   16b32:	f023 0310 	bic.w	r3, r3, #16
   16b36:	e844 3200 	strex	r2, r3, [r4]
   16b3a:	2a00      	cmp	r2, #0
   16b3c:	d1f7      	bne.n	16b2e <bt_pub_key_gen+0xd6>
   16b3e:	f3bf 8f5b 	dmb	ish
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   16b42:	682c      	ldr	r4, [r5, #0]
   16b44:	b91c      	cbnz	r4, 16b4e <bt_pub_key_gen+0xf6>
	list->head = NULL;
   16b46:	2300      	movs	r3, #0
	list->tail = NULL;
   16b48:	e9c5 3300 	strd	r3, r3, [r5]
		return err;
   16b4c:	e798      	b.n	16a80 <bt_pub_key_gen+0x28>
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   16b4e:	3c04      	subs	r4, #4
   16b50:	2c00      	cmp	r4, #0
   16b52:	d0f8      	beq.n	16b46 <bt_pub_key_gen+0xee>
			if (cb->func) {
   16b54:	6823      	ldr	r3, [r4, #0]
   16b56:	b10b      	cbz	r3, 16b5c <bt_pub_key_gen+0x104>
				cb->func(NULL);
   16b58:	2000      	movs	r0, #0
   16b5a:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   16b5c:	1d23      	adds	r3, r4, #4
   16b5e:	d0f2      	beq.n	16b46 <bt_pub_key_gen+0xee>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16b60:	6864      	ldr	r4, [r4, #4]
	return node->next;
   16b62:	e7ef      	b.n	16b44 <bt_pub_key_gen+0xec>
		return -EINVAL;
   16b64:	f06f 0615 	mvn.w	r6, #21
   16b68:	e78a      	b.n	16a80 <bt_pub_key_gen+0x28>
   16b6a:	bf00      	nop
   16b6c:	200002b0 	.word	0x200002b0
   16b70:	00028dd4 	.word	0x00028dd4
   16b74:	00028e14 	.word	0x00028e14
   16b78:	0002abff 	.word	0x0002abff
   16b7c:	2000244c 	.word	0x2000244c
   16b80:	2000037c 	.word	0x2000037c
   16b84:	0002ac1e 	.word	0x0002ac1e
   16b88:	0002ac3a 	.word	0x0002ac3a

00016b8c <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16b8c:	4b05      	ldr	r3, [pc, #20]	; (16ba4 <bt_pub_key_get+0x18>)
   16b8e:	f3bf 8f5b 	dmb	ish
   16b92:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
   16b94:	4804      	ldr	r0, [pc, #16]	; (16ba8 <bt_pub_key_get+0x1c>)
   16b96:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   16b9a:	f013 0f08 	tst.w	r3, #8
}
   16b9e:	bf08      	it	eq
   16ba0:	2000      	moveq	r0, #0
   16ba2:	4770      	bx	lr
   16ba4:	2000037c 	.word	0x2000037c
   16ba8:	200028ff 	.word	0x200028ff

00016bac <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   16bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
   16bae:	4d25      	ldr	r5, [pc, #148]	; (16c44 <bt_dh_key_gen+0x98>)
   16bb0:	682b      	ldr	r3, [r5, #0]
   16bb2:	428b      	cmp	r3, r1
{
   16bb4:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
   16bb6:	d03f      	beq.n	16c38 <bt_dh_key_gen+0x8c>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   16bb8:	b11b      	cbz	r3, 16bc2 <bt_dh_key_gen+0x16>
		return -EBUSY;
   16bba:	f06f 040f 	mvn.w	r4, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   16bbe:	4620      	mov	r0, r4
   16bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16bc2:	4b21      	ldr	r3, [pc, #132]	; (16c48 <bt_dh_key_gen+0x9c>)
   16bc4:	f3bf 8f5b 	dmb	ish
   16bc8:	681a      	ldr	r2, [r3, #0]
   16bca:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   16bce:	f3c2 1700 	ubfx	r7, r2, #4, #1
   16bd2:	06d2      	lsls	r2, r2, #27
   16bd4:	d4f1      	bmi.n	16bba <bt_dh_key_gen+0xe>
   16bd6:	f3bf 8f5b 	dmb	ish
   16bda:	681b      	ldr	r3, [r3, #0]
   16bdc:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   16be0:	071b      	lsls	r3, r3, #28
   16be2:	d52c      	bpl.n	16c3e <bt_dh_key_gen+0x92>
	dh_key_cb = cb;
   16be4:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   16be6:	f242 0026 	movw	r0, #8230	; 0x2026
   16bea:	2140      	movs	r1, #64	; 0x40
   16bec:	f002 f8f2 	bl	18dd4 <bt_hci_cmd_create>
	if (!buf) {
   16bf0:	4604      	mov	r4, r0
   16bf2:	b1f0      	cbz	r0, 16c32 <bt_dh_key_gen+0x86>
	return net_buf_simple_add(&buf->b, len);
   16bf4:	2140      	movs	r1, #64	; 0x40
   16bf6:	3008      	adds	r0, #8
   16bf8:	f010 fafe 	bl	271f8 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   16bfc:	2240      	movs	r2, #64	; 0x40
   16bfe:	4631      	mov	r1, r6
   16c00:	f00e f93e 	bl	24e80 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   16c04:	4621      	mov	r1, r4
   16c06:	463a      	mov	r2, r7
   16c08:	f242 0026 	movw	r0, #8230	; 0x2026
   16c0c:	f002 fa3e 	bl	1908c <bt_hci_cmd_send_sync>
	if (err) {
   16c10:	4604      	mov	r4, r0
   16c12:	2800      	cmp	r0, #0
   16c14:	d0d3      	beq.n	16bbe <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
   16c16:	2300      	movs	r3, #0
   16c18:	602b      	str	r3, [r5, #0]
   16c1a:	4a0c      	ldr	r2, [pc, #48]	; (16c4c <bt_dh_key_gen+0xa0>)
   16c1c:	4b0c      	ldr	r3, [pc, #48]	; (16c50 <bt_dh_key_gen+0xa4>)
		BT_WARN("Failed to generate DHKey (err %d)", err);
   16c1e:	480d      	ldr	r0, [pc, #52]	; (16c54 <bt_dh_key_gen+0xa8>)
   16c20:	1ad2      	subs	r2, r2, r3
   16c22:	08d2      	lsrs	r2, r2, #3
   16c24:	0192      	lsls	r2, r2, #6
   16c26:	f042 0202 	orr.w	r2, r2, #2
   16c2a:	4621      	mov	r1, r4
   16c2c:	f00d f926 	bl	23e7c <log_1>
		return err;
   16c30:	e7c5      	b.n	16bbe <bt_dh_key_gen+0x12>
		return -ENOBUFS;
   16c32:	f06f 0468 	mvn.w	r4, #104	; 0x68
   16c36:	e7ee      	b.n	16c16 <bt_dh_key_gen+0x6a>
		return -EALREADY;
   16c38:	f06f 0477 	mvn.w	r4, #119	; 0x77
   16c3c:	e7bf      	b.n	16bbe <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
   16c3e:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   16c42:	e7bc      	b.n	16bbe <bt_dh_key_gen+0x12>
   16c44:	20002448 	.word	0x20002448
   16c48:	2000037c 	.word	0x2000037c
   16c4c:	00028e14 	.word	0x00028e14
   16c50:	00028dd4 	.word	0x00028dd4
   16c54:	0002ac64 	.word	0x0002ac64

00016c58 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   16c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16c5a:	4c1d      	ldr	r4, [pc, #116]	; (16cd0 <bt_hci_evt_le_pkey_complete+0x78>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   16c5c:	6886      	ldr	r6, [r0, #8]
   16c5e:	f3bf 8f5b 	dmb	ish
   16c62:	e854 3f00 	ldrex	r3, [r4]
   16c66:	f023 0310 	bic.w	r3, r3, #16
   16c6a:	e844 3200 	strex	r2, r3, [r4]
   16c6e:	2a00      	cmp	r2, #0
   16c70:	d1f7      	bne.n	16c62 <bt_hci_evt_le_pkey_complete+0xa>
   16c72:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   16c76:	7833      	ldrb	r3, [r6, #0]
   16c78:	b983      	cbnz	r3, 16c9c <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   16c7a:	4816      	ldr	r0, [pc, #88]	; (16cd4 <bt_hci_evt_le_pkey_complete+0x7c>)
   16c7c:	2240      	movs	r2, #64	; 0x40
   16c7e:	1c71      	adds	r1, r6, #1
   16c80:	f00e f8fe 	bl	24e80 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16c84:	f3bf 8f5b 	dmb	ish
   16c88:	e854 3f00 	ldrex	r3, [r4]
   16c8c:	f043 0308 	orr.w	r3, r3, #8
   16c90:	e844 3200 	strex	r2, r3, [r4]
   16c94:	2a00      	cmp	r2, #0
   16c96:	d1f7      	bne.n	16c88 <bt_hci_evt_le_pkey_complete+0x30>
   16c98:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   16c9c:	4d0e      	ldr	r5, [pc, #56]	; (16cd8 <bt_hci_evt_le_pkey_complete+0x80>)
   16c9e:	682c      	ldr	r4, [r5, #0]
   16ca0:	b91c      	cbnz	r4, 16caa <bt_hci_evt_le_pkey_complete+0x52>
	list->head = NULL;
   16ca2:	2300      	movs	r3, #0
	list->tail = NULL;
   16ca4:	e9c5 3300 	strd	r3, r3, [r5]
			cb->func(evt->status ? NULL : pub_key);
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   16ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			cb->func(evt->status ? NULL : pub_key);
   16caa:	4f0a      	ldr	r7, [pc, #40]	; (16cd4 <bt_hci_evt_le_pkey_complete+0x7c>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   16cac:	3c04      	subs	r4, #4
   16cae:	2c00      	cmp	r4, #0
   16cb0:	d0f7      	beq.n	16ca2 <bt_hci_evt_le_pkey_complete+0x4a>
		if (cb->func) {
   16cb2:	6823      	ldr	r3, [r4, #0]
   16cb4:	b12b      	cbz	r3, 16cc2 <bt_hci_evt_le_pkey_complete+0x6a>
			cb->func(evt->status ? NULL : pub_key);
   16cb6:	7832      	ldrb	r2, [r6, #0]
   16cb8:	2a00      	cmp	r2, #0
   16cba:	bf0c      	ite	eq
   16cbc:	4638      	moveq	r0, r7
   16cbe:	2000      	movne	r0, #0
   16cc0:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   16cc2:	1d23      	adds	r3, r4, #4
   16cc4:	d0ed      	beq.n	16ca2 <bt_hci_evt_le_pkey_complete+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16cc6:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   16cc8:	2c00      	cmp	r4, #0
   16cca:	d0ea      	beq.n	16ca2 <bt_hci_evt_le_pkey_complete+0x4a>
   16ccc:	3c04      	subs	r4, #4
   16cce:	e7ee      	b.n	16cae <bt_hci_evt_le_pkey_complete+0x56>
   16cd0:	2000037c 	.word	0x2000037c
   16cd4:	200028ff 	.word	0x200028ff
   16cd8:	2000244c 	.word	0x2000244c

00016cdc <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   16cdc:	4905      	ldr	r1, [pc, #20]	; (16cf4 <bt_hci_evt_le_dhkey_complete+0x18>)
   16cde:	680b      	ldr	r3, [r1, #0]
   16ce0:	b133      	cbz	r3, 16cf0 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   16ce2:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   16ce4:	2000      	movs	r0, #0
   16ce6:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   16ce8:	7811      	ldrb	r1, [r2, #0]
   16cea:	b901      	cbnz	r1, 16cee <bt_hci_evt_le_dhkey_complete+0x12>
   16cec:	1c50      	adds	r0, r2, #1
   16cee:	4718      	bx	r3
	}
}
   16cf0:	4770      	bx	lr
   16cf2:	bf00      	nop
   16cf4:	20002448 	.word	0x20002448

00016cf8 <db_hash_store>:

static void db_hash_store(void)
{
	int err;

	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   16cf8:	490a      	ldr	r1, [pc, #40]	; (16d24 <db_hash_store+0x2c>)
   16cfa:	480b      	ldr	r0, [pc, #44]	; (16d28 <db_hash_store+0x30>)
{
   16cfc:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   16cfe:	2210      	movs	r2, #16
   16d00:	f7fc fd2c 	bl	1375c <settings_save_one>
	if (err) {
   16d04:	4601      	mov	r1, r0
   16d06:	b158      	cbz	r0, 16d20 <db_hash_store+0x28>
   16d08:	4b08      	ldr	r3, [pc, #32]	; (16d2c <db_hash_store+0x34>)
   16d0a:	4a09      	ldr	r2, [pc, #36]	; (16d30 <db_hash_store+0x38>)
		BT_ERR("Failed to save Database Hash (err %d)", err);
   16d0c:	4809      	ldr	r0, [pc, #36]	; (16d34 <db_hash_store+0x3c>)
   16d0e:	1ad2      	subs	r2, r2, r3
   16d10:	08d2      	lsrs	r2, r2, #3
   16d12:	0192      	lsls	r2, r2, #6
	}

	BT_DBG("Database Hash stored");
}
   16d14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
   16d18:	f042 0201 	orr.w	r2, r2, #1
   16d1c:	f00d b8ae 	b.w	23e7c <log_1>
}
   16d20:	bd08      	pop	{r3, pc}
   16d22:	bf00      	nop
   16d24:	200018f0 	.word	0x200018f0
   16d28:	0002accd 	.word	0x0002accd
   16d2c:	00028dd4 	.word	0x00028dd4
   16d30:	00028e1c 	.word	0x00028e1c
   16d34:	0002acd5 	.word	0x0002acd5

00016d38 <db_hash_set>:

SETTINGS_STATIC_HANDLER_DEFINE(bt_cf, "bt/cf", NULL, cf_set, NULL, NULL);

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   16d38:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   16d3a:	490b      	ldr	r1, [pc, #44]	; (16d68 <db_hash_set+0x30>)
{
   16d3c:	4614      	mov	r4, r2
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   16d3e:	4618      	mov	r0, r3
   16d40:	2210      	movs	r2, #16
   16d42:	47a0      	blx	r4
	if (len < 0) {
   16d44:	1e04      	subs	r4, r0, #0
   16d46:	da0c      	bge.n	16d62 <db_hash_set+0x2a>
   16d48:	4a08      	ldr	r2, [pc, #32]	; (16d6c <db_hash_set+0x34>)
   16d4a:	4b09      	ldr	r3, [pc, #36]	; (16d70 <db_hash_set+0x38>)
		BT_ERR("Failed to decode value (err %zd)", len);
   16d4c:	4809      	ldr	r0, [pc, #36]	; (16d74 <db_hash_set+0x3c>)
   16d4e:	1ad2      	subs	r2, r2, r3
   16d50:	08d2      	lsrs	r2, r2, #3
   16d52:	0192      	lsls	r2, r2, #6
   16d54:	f042 0201 	orr.w	r2, r2, #1
   16d58:	4621      	mov	r1, r4
   16d5a:	f00d f88f 	bl	23e7c <log_1>

	BT_HEXDUMP_DBG(db_hash.stored_hash, sizeof(db_hash.stored_hash),
		       "Stored Hash: ");

	return 0;
}
   16d5e:	4620      	mov	r0, r4
   16d60:	bd10      	pop	{r4, pc}
	return 0;
   16d62:	2400      	movs	r4, #0
   16d64:	e7fb      	b.n	16d5e <db_hash_set+0x26>
   16d66:	bf00      	nop
   16d68:	20001900 	.word	0x20001900
   16d6c:	00028e1c 	.word	0x00028e1c
   16d70:	00028dd4 	.word	0x00028dd4
   16d74:	0002acfb 	.word	0x0002acfb

00016d78 <sc_store>:
{
   16d78:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
   16d7a:	4605      	mov	r5, r0
{
   16d7c:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   16d7e:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   16d82:	4604      	mov	r4, r0
	if (cfg->id) {
   16d84:	b1fa      	cbz	r2, 16dc6 <sc_store+0x4e>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   16d86:	ae02      	add	r6, sp, #8
   16d88:	2104      	movs	r1, #4
   16d8a:	4630      	mov	r0, r6
   16d8c:	f00b fe83 	bl	22a96 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   16d90:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   16d92:	4a0e      	ldr	r2, [pc, #56]	; (16dcc <sc_store+0x54>)
   16d94:	462b      	mov	r3, r5
   16d96:	2124      	movs	r1, #36	; 0x24
   16d98:	a803      	add	r0, sp, #12
   16d9a:	f004 f9e9 	bl	1b170 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   16d9e:	f104 0108 	add.w	r1, r4, #8
   16da2:	2204      	movs	r2, #4
   16da4:	a803      	add	r0, sp, #12
   16da6:	f7fc fcd9 	bl	1375c <settings_save_one>
	if (err) {
   16daa:	4601      	mov	r1, r0
   16dac:	b148      	cbz	r0, 16dc2 <sc_store+0x4a>
   16dae:	4a08      	ldr	r2, [pc, #32]	; (16dd0 <sc_store+0x58>)
   16db0:	4b08      	ldr	r3, [pc, #32]	; (16dd4 <sc_store+0x5c>)
		BT_ERR("failed to store SC (err %d)", err);
   16db2:	4809      	ldr	r0, [pc, #36]	; (16dd8 <sc_store+0x60>)
   16db4:	1ad2      	subs	r2, r2, r3
   16db6:	08d2      	lsrs	r2, r2, #3
   16db8:	0192      	lsls	r2, r2, #6
   16dba:	f042 0201 	orr.w	r2, r2, #1
   16dbe:	f00d f85d 	bl	23e7c <log_1>
}
   16dc2:	b00c      	add	sp, #48	; 0x30
   16dc4:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   16dc6:	9200      	str	r2, [sp, #0]
   16dc8:	e7e3      	b.n	16d92 <sc_store+0x1a>
   16dca:	bf00      	nop
   16dcc:	0002afc4 	.word	0x0002afc4
   16dd0:	00028e1c 	.word	0x00028e1c
   16dd4:	00028dd4 	.word	0x00028dd4
   16dd8:	0002ad1c 	.word	0x0002ad1c

00016ddc <db_hash_commit>:

static int db_hash_commit(void)
{
   16ddc:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16dde:	2108      	movs	r1, #8
   16de0:	4804      	ldr	r0, [pc, #16]	; (16df4 <db_hash_commit+0x18>)
   16de2:	f00f f85e 	bl	25ea2 <atomic_or>
	atomic_set_bit(gatt_sc.flags, DB_HASH_LOAD);
	/* Reschedule work to calculate and compare against the Hash value
	 * loaded from flash.
	 */
	k_work_reschedule(&db_hash.work, K_NO_WAIT);
   16de6:	2200      	movs	r2, #0
   16de8:	2300      	movs	r3, #0
   16dea:	4803      	ldr	r0, [pc, #12]	; (16df8 <db_hash_commit+0x1c>)
   16dec:	f00b fb86 	bl	224fc <k_work_reschedule>

	return 0;
}
   16df0:	2000      	movs	r0, #0
   16df2:	bd08      	pop	{r3, pc}
   16df4:	200019f0 	.word	0x200019f0
   16df8:	20001910 	.word	0x20001910

00016dfc <ccc_load>:
{
   16dfc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   16dfe:	4b21      	ldr	r3, [pc, #132]	; (16e84 <ccc_load+0x88>)
{
   16e00:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   16e02:	6882      	ldr	r2, [r0, #8]
   16e04:	429a      	cmp	r2, r3
   16e06:	d002      	beq.n	16e0e <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
   16e08:	2001      	movs	r0, #1
}
   16e0a:	b002      	add	sp, #8
   16e0c:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
   16e0e:	68a3      	ldr	r3, [r4, #8]
	ccc = attr->user_data;
   16e10:	68c6      	ldr	r6, [r0, #12]
	if (!load->entry) {
   16e12:	b94b      	cbnz	r3, 16e28 <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
   16e14:	7922      	ldrb	r2, [r4, #4]
   16e16:	6821      	ldr	r1, [r4, #0]
   16e18:	4630      	mov	r0, r6
   16e1a:	f00f f87d 	bl	25f18 <ccc_find_cfg>
	if (!cfg) {
   16e1e:	2800      	cmp	r0, #0
   16e20:	d0f2      	beq.n	16e08 <ccc_load+0xc>
	clear_ccc_cfg(cfg);
   16e22:	f00e ffb2 	bl	25d8a <clear_ccc_cfg>
   16e26:	e7ef      	b.n	16e08 <ccc_load+0xc>
	} else if (!load->count) {
   16e28:	68e0      	ldr	r0, [r4, #12]
   16e2a:	2800      	cmp	r0, #0
   16e2c:	d0ed      	beq.n	16e0a <ccc_load+0xe>
	if (load->entry->handle != handle) {
   16e2e:	881b      	ldrh	r3, [r3, #0]
   16e30:	4299      	cmp	r1, r3
   16e32:	d00a      	beq.n	16e4a <ccc_load+0x4e>
		if (load->entry->handle < handle) {
   16e34:	d9e8      	bls.n	16e08 <ccc_load+0xc>
	load->count--;
   16e36:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   16e38:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   16e3a:	3801      	subs	r0, #1
	load->entry++;
   16e3c:	3304      	adds	r3, #4
	load->count--;
   16e3e:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   16e40:	3800      	subs	r0, #0
	load->entry++;
   16e42:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   16e44:	bf18      	it	ne
   16e46:	2001      	movne	r0, #1
   16e48:	e7df      	b.n	16e0a <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   16e4a:	7922      	ldrb	r2, [r4, #4]
   16e4c:	6821      	ldr	r1, [r4, #0]
   16e4e:	4630      	mov	r0, r6
   16e50:	f00f f862 	bl	25f18 <ccc_find_cfg>
	if (!cfg) {
   16e54:	4605      	mov	r5, r0
   16e56:	b980      	cbnz	r0, 16e7a <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   16e58:	9000      	str	r0, [sp, #0]
   16e5a:	4602      	mov	r2, r0
   16e5c:	f8cd 0003 	str.w	r0, [sp, #3]
   16e60:	4669      	mov	r1, sp
   16e62:	4630      	mov	r0, r6
   16e64:	f00f f858 	bl	25f18 <ccc_find_cfg>
		if (!cfg) {
   16e68:	4605      	mov	r5, r0
   16e6a:	2800      	cmp	r0, #0
   16e6c:	d0e3      	beq.n	16e36 <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   16e6e:	6821      	ldr	r1, [r4, #0]
   16e70:	3001      	adds	r0, #1
   16e72:	f00e ff87 	bl	25d84 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   16e76:	7923      	ldrb	r3, [r4, #4]
   16e78:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   16e7a:	68a3      	ldr	r3, [r4, #8]
   16e7c:	885b      	ldrh	r3, [r3, #2]
   16e7e:	812b      	strh	r3, [r5, #8]
   16e80:	e7d9      	b.n	16e36 <ccc_load+0x3a>
   16e82:	bf00      	nop
   16e84:	00016ee9 	.word	0x00016ee9

00016e88 <ccc_save>:
{
   16e88:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   16e8a:	4b0c      	ldr	r3, [pc, #48]	; (16ebc <ccc_save+0x34>)
{
   16e8c:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   16e8e:	6882      	ldr	r2, [r0, #8]
   16e90:	429a      	cmp	r2, r3
{
   16e92:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   16e94:	d10f      	bne.n	16eb6 <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   16e96:	7922      	ldrb	r2, [r4, #4]
   16e98:	6821      	ldr	r1, [r4, #0]
   16e9a:	68c0      	ldr	r0, [r0, #12]
   16e9c:	f00f f83c 	bl	25f18 <ccc_find_cfg>
	if (!cfg) {
   16ea0:	b148      	cbz	r0, 16eb6 <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   16ea2:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
   16ea6:	8901      	ldrh	r1, [r0, #8]
   16ea8:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   16eac:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   16eae:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   16eb0:	8151      	strh	r1, [r2, #10]
	save->count++;
   16eb2:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   16eb6:	2001      	movs	r0, #1
   16eb8:	bd38      	pop	{r3, r4, r5, pc}
   16eba:	bf00      	nop
   16ebc:	00016ee9 	.word	0x00016ee9

00016ec0 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   16ec0:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   16ec2:	6881      	ldr	r1, [r0, #8]
{
   16ec4:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   16ec6:	4a07      	ldr	r2, [pc, #28]	; (16ee4 <remove_peer_from_attr+0x24>)
   16ec8:	4291      	cmp	r1, r2
   16eca:	d109      	bne.n	16ee0 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   16ecc:	791a      	ldrb	r2, [r3, #4]
   16ece:	6819      	ldr	r1, [r3, #0]
   16ed0:	68c0      	ldr	r0, [r0, #12]
   16ed2:	f00f f821 	bl	25f18 <ccc_find_cfg>
	if (cfg) {
   16ed6:	b118      	cbz	r0, 16ee0 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   16ed8:	220a      	movs	r2, #10
   16eda:	2100      	movs	r1, #0
   16edc:	f00d ffdb 	bl	24e96 <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   16ee0:	2001      	movs	r0, #1
   16ee2:	bd08      	pop	{r3, pc}
   16ee4:	00016ee9 	.word	0x00016ee9

00016ee8 <bt_gatt_attr_write_ccc>:
{
   16ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16eec:	461f      	mov	r7, r3
   16eee:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   16ef2:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   16ef6:	4605      	mov	r5, r0
   16ef8:	4688      	mov	r8, r1
	if (offset) {
   16efa:	2b00      	cmp	r3, #0
   16efc:	d16d      	bne.n	16fda <bt_gatt_attr_write_ccc+0xf2>
	if (!len || len > sizeof(uint16_t)) {
   16efe:	1e7b      	subs	r3, r7, #1
   16f00:	2b01      	cmp	r3, #1
   16f02:	d86d      	bhi.n	16fe0 <bt_gatt_attr_write_ccc+0xf8>
	if (len < sizeof(uint16_t)) {
   16f04:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
   16f06:	7816      	ldrb	r6, [r2, #0]
   16f08:	bf18      	it	ne
   16f0a:	7853      	ldrbne	r3, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
   16f0c:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   16f0e:	bf0c      	ite	eq
   16f10:	b2b6      	uxtheq	r6, r6
   16f12:	ea46 2603 	orrne.w	r6, r6, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   16f16:	f00f f80e 	bl	25f36 <find_ccc_cfg>
	if (!cfg) {
   16f1a:	4604      	mov	r4, r0
   16f1c:	b9e0      	cbnz	r0, 16f58 <bt_gatt_attr_write_ccc+0x70>
		if (!value) {
   16f1e:	b916      	cbnz	r6, 16f26 <bt_gatt_attr_write_ccc+0x3e>
			return len;
   16f20:	4638      	mov	r0, r7
}
   16f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   16f26:	4649      	mov	r1, r9
   16f28:	f00f f805 	bl	25f36 <find_ccc_cfg>
		if (!cfg) {
   16f2c:	4604      	mov	r4, r0
   16f2e:	b960      	cbnz	r0, 16f4a <bt_gatt_attr_write_ccc+0x62>
   16f30:	4b2d      	ldr	r3, [pc, #180]	; (16fe8 <bt_gatt_attr_write_ccc+0x100>)
   16f32:	492e      	ldr	r1, [pc, #184]	; (16fec <bt_gatt_attr_write_ccc+0x104>)
			BT_WARN("No space to store CCC cfg");
   16f34:	482e      	ldr	r0, [pc, #184]	; (16ff0 <bt_gatt_attr_write_ccc+0x108>)
   16f36:	1ac9      	subs	r1, r1, r3
   16f38:	08c9      	lsrs	r1, r1, #3
   16f3a:	0189      	lsls	r1, r1, #6
   16f3c:	f041 0102 	orr.w	r1, r1, #2
   16f40:	f00c ff8f 	bl	23e62 <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   16f44:	f06f 0010 	mvn.w	r0, #16
   16f48:	e7eb      	b.n	16f22 <bt_gatt_attr_write_ccc+0x3a>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   16f4a:	f105 0188 	add.w	r1, r5, #136	; 0x88
   16f4e:	3001      	adds	r0, #1
   16f50:	f00e ff18 	bl	25d84 <bt_addr_le_copy>
		cfg->id = conn->id;
   16f54:	7a2b      	ldrb	r3, [r5, #8]
   16f56:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   16f58:	f8d9 3010 	ldr.w	r3, [r9, #16]
   16f5c:	bb8b      	cbnz	r3, 16fc2 <bt_gatt_attr_write_ccc+0xda>
	if (cfg->value != ccc->value) {
   16f5e:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	value_changed = cfg->value != value;
   16f62:	f8b4 a008 	ldrh.w	sl, [r4, #8]
	cfg->value = value;
   16f66:	8126      	strh	r6, [r4, #8]
	if (cfg->value != ccc->value) {
   16f68:	42b3      	cmp	r3, r6
   16f6a:	d003      	beq.n	16f74 <bt_gatt_attr_write_ccc+0x8c>
		gatt_ccc_changed(attr, ccc);
   16f6c:	4649      	mov	r1, r9
   16f6e:	4640      	mov	r0, r8
   16f70:	f00e fee5 	bl	25d3e <gatt_ccc_changed>
	if (value_changed) {
   16f74:	45b2      	cmp	sl, r6
   16f76:	d01e      	beq.n	16fb6 <bt_gatt_attr_write_ccc+0xce>
	return (conn == gatt_ccc_store.conn_list[bt_conn_index(conn)]);
   16f78:	4628      	mov	r0, r5
   16f7a:	f7ff fa53 	bl	16424 <bt_conn_index>
   16f7e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 16ff4 <bt_gatt_attr_write_ccc+0x10c>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   16f82:	f858 3020 	ldr.w	r3, [r8, r0, lsl #2]
   16f86:	429d      	cmp	r5, r3
   16f88:	d015      	beq.n	16fb6 <bt_gatt_attr_write_ccc+0xce>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   16f8a:	7a28      	ldrb	r0, [r5, #8]
   16f8c:	f105 0188 	add.w	r1, r5, #136	; 0x88
   16f90:	f00f fa6d 	bl	2646e <bt_addr_le_is_bonded>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   16f94:	b178      	cbz	r0, 16fb6 <bt_gatt_attr_write_ccc+0xce>
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   16f96:	4628      	mov	r0, r5
   16f98:	f7ff fa44 	bl	16424 <bt_conn_index>
   16f9c:	4681      	mov	r9, r0
			bt_conn_ref(conn);
   16f9e:	4628      	mov	r0, r5
   16fa0:	f00e fdc7 	bl	25b32 <bt_conn_ref>
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   16fa4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   16fa8:	f848 0029 	str.w	r0, [r8, r9, lsl #2]
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   16fac:	2300      	movs	r3, #0
   16fae:	f108 0008 	add.w	r0, r8, #8
   16fb2:	f00b faa3 	bl	224fc <k_work_reschedule>
	if (!value) {
   16fb6:	2e00      	cmp	r6, #0
   16fb8:	d1b2      	bne.n	16f20 <bt_gatt_attr_write_ccc+0x38>
		clear_ccc_cfg(cfg);
   16fba:	4620      	mov	r0, r4
   16fbc:	f00e fee5 	bl	25d8a <clear_ccc_cfg>
   16fc0:	e7ae      	b.n	16f20 <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   16fc2:	4632      	mov	r2, r6
   16fc4:	4641      	mov	r1, r8
   16fc6:	4628      	mov	r0, r5
   16fc8:	4798      	blx	r3
		if (write < 0) {
   16fca:	2800      	cmp	r0, #0
   16fcc:	dba9      	blt.n	16f22 <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
   16fce:	1e42      	subs	r2, r0, #1
   16fd0:	2a01      	cmp	r2, #1
   16fd2:	d9c4      	bls.n	16f5e <bt_gatt_attr_write_ccc+0x76>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   16fd4:	f06f 000d 	mvn.w	r0, #13
   16fd8:	e7a3      	b.n	16f22 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   16fda:	f06f 0006 	mvn.w	r0, #6
   16fde:	e7a0      	b.n	16f22 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   16fe0:	f06f 000c 	mvn.w	r0, #12
   16fe4:	e79d      	b.n	16f22 <bt_gatt_attr_write_ccc+0x3a>
   16fe6:	bf00      	nop
   16fe8:	00028dd4 	.word	0x00028dd4
   16fec:	00028e1c 	.word	0x00028e1c
   16ff0:	0002ad38 	.word	0x0002ad38
   16ff4:	20001968 	.word	0x20001968

00016ff8 <sc_commit>:
{
   16ff8:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16ffa:	f06f 0102 	mvn.w	r1, #2
   16ffe:	4808      	ldr	r0, [pc, #32]	; (17020 <sc_commit+0x28>)
   17000:	f00e ff5e 	bl	25ec0 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17004:	4806      	ldr	r0, [pc, #24]	; (17020 <sc_commit+0x28>)
   17006:	f00e fef0 	bl	25dea <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1700a:	07c3      	lsls	r3, r0, #31
   1700c:	d505      	bpl.n	1701a <sc_commit+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   1700e:	4805      	ldr	r0, [pc, #20]	; (17024 <sc_commit+0x2c>)
   17010:	f44f 72a4 	mov.w	r2, #328	; 0x148
   17014:	2300      	movs	r3, #0
   17016:	f00b fa71 	bl	224fc <k_work_reschedule>
}
   1701a:	2000      	movs	r0, #0
   1701c:	bd08      	pop	{r3, pc}
   1701e:	bf00      	nop
   17020:	200019f0 	.word	0x200019f0
   17024:	200019c0 	.word	0x200019c0

00017028 <find_sc_cfg>:
{
   17028:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   1702a:	4c0e      	ldr	r4, [pc, #56]	; (17064 <find_sc_cfg+0x3c>)
   1702c:	7823      	ldrb	r3, [r4, #0]
   1702e:	4283      	cmp	r3, r0
{
   17030:	4605      	mov	r5, r0
   17032:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   17034:	d00a      	beq.n	1704c <find_sc_cfg+0x24>
   17036:	7b23      	ldrb	r3, [r4, #12]
   17038:	42ab      	cmp	r3, r5
   1703a:	d111      	bne.n	17060 <find_sc_cfg+0x38>
	return memcmp(a, b, sizeof(*a));
   1703c:	480a      	ldr	r0, [pc, #40]	; (17068 <find_sc_cfg+0x40>)
   1703e:	2207      	movs	r2, #7
   17040:	4631      	mov	r1, r6
   17042:	f00d ff0d 	bl	24e60 <memcmp>
   17046:	b958      	cbnz	r0, 17060 <find_sc_cfg+0x38>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   17048:	2001      	movs	r0, #1
   1704a:	e005      	b.n	17058 <find_sc_cfg+0x30>
   1704c:	2207      	movs	r2, #7
   1704e:	1c60      	adds	r0, r4, #1
   17050:	f00d ff06 	bl	24e60 <memcmp>
		if (id == sc_cfg[i].id &&
   17054:	2800      	cmp	r0, #0
   17056:	d1ee      	bne.n	17036 <find_sc_cfg+0xe>
			return &sc_cfg[i];
   17058:	230c      	movs	r3, #12
   1705a:	fb03 4000 	mla	r0, r3, r0, r4
   1705e:	e000      	b.n	17062 <find_sc_cfg+0x3a>
	return NULL;
   17060:	2000      	movs	r0, #0
}
   17062:	bd70      	pop	{r4, r5, r6, pc}
   17064:	20002812 	.word	0x20002812
   17068:	2000281f 	.word	0x2000281f

0001706c <sc_save>:
{
   1706c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   17070:	4680      	mov	r8, r0
   17072:	460f      	mov	r7, r1
   17074:	4616      	mov	r6, r2
   17076:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   17078:	f7ff ffd6 	bl	17028 <find_sc_cfg>
	if (!cfg) {
   1707c:	4604      	mov	r4, r0
   1707e:	b9c8      	cbnz	r0, 170b4 <sc_save+0x48>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   17080:	4669      	mov	r1, sp
   17082:	9000      	str	r0, [sp, #0]
   17084:	f8cd 0003 	str.w	r0, [sp, #3]
   17088:	f7ff ffce 	bl	17028 <find_sc_cfg>
		if (!cfg) {
   1708c:	4604      	mov	r4, r0
   1708e:	b960      	cbnz	r0, 170aa <sc_save+0x3e>
   17090:	4915      	ldr	r1, [pc, #84]	; (170e8 <sc_save+0x7c>)
   17092:	4b16      	ldr	r3, [pc, #88]	; (170ec <sc_save+0x80>)
			BT_ERR("unable to save SC: no cfg left");
   17094:	4816      	ldr	r0, [pc, #88]	; (170f0 <sc_save+0x84>)
   17096:	1ac9      	subs	r1, r1, r3
   17098:	08c9      	lsrs	r1, r1, #3
   1709a:	0189      	lsls	r1, r1, #6
   1709c:	f041 0101 	orr.w	r1, r1, #1
   170a0:	f00c fedf 	bl	23e62 <log_0>
}
   170a4:	b002      	add	sp, #8
   170a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
   170aa:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   170ae:	4639      	mov	r1, r7
   170b0:	f00e fe68 	bl	25d84 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   170b4:	8922      	ldrh	r2, [r4, #8]
   170b6:	8963      	ldrh	r3, [r4, #10]
   170b8:	b96a      	cbnz	r2, 170d6 <sc_save+0x6a>
   170ba:	b973      	cbnz	r3, 170da <sc_save+0x6e>
		cfg->data.start = start;
   170bc:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   170be:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   170c0:	4621      	mov	r1, r4
   170c2:	f811 0b01 	ldrb.w	r0, [r1], #1
   170c6:	f00f f9d2 	bl	2646e <bt_addr_le_is_bonded>
   170ca:	2800      	cmp	r0, #0
   170cc:	d0ea      	beq.n	170a4 <sc_save+0x38>
		sc_store(cfg);
   170ce:	4620      	mov	r0, r4
   170d0:	f7ff fe52 	bl	16d78 <sc_store>
   170d4:	e7e6      	b.n	170a4 <sc_save+0x38>
	if (new_start >= *start && new_end <= *end) {
   170d6:	4296      	cmp	r6, r2
   170d8:	d302      	bcc.n	170e0 <sc_save+0x74>
   170da:	429d      	cmp	r5, r3
   170dc:	d8ef      	bhi.n	170be <sc_save+0x52>
   170de:	e7e1      	b.n	170a4 <sc_save+0x38>
	if (*end < new_end) {
   170e0:	429d      	cmp	r5, r3
		*start = new_start;
   170e2:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   170e4:	d9ec      	bls.n	170c0 <sc_save+0x54>
   170e6:	e7ea      	b.n	170be <sc_save+0x52>
   170e8:	00028e1c 	.word	0x00028e1c
   170ec:	00028dd4 	.word	0x00028dd4
   170f0:	0002ad52 	.word	0x0002ad52

000170f4 <sc_set>:
{
   170f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   170f8:	460e      	mov	r6, r1
   170fa:	b086      	sub	sp, #24
   170fc:	4617      	mov	r7, r2
   170fe:	4698      	mov	r8, r3
	if (!name) {
   17100:	4605      	mov	r5, r0
   17102:	b978      	cbnz	r0, 17124 <sc_set+0x30>
   17104:	493b      	ldr	r1, [pc, #236]	; (171f4 <sc_set+0x100>)
   17106:	4b3c      	ldr	r3, [pc, #240]	; (171f8 <sc_set+0x104>)
		BT_ERR("Insufficient number of arguments");
   17108:	483c      	ldr	r0, [pc, #240]	; (171fc <sc_set+0x108>)
   1710a:	1ac9      	subs	r1, r1, r3
   1710c:	08c9      	lsrs	r1, r1, #3
   1710e:	0189      	lsls	r1, r1, #6
   17110:	f041 0101 	orr.w	r1, r1, #1
   17114:	f00c fea5 	bl	23e62 <log_0>
		return -EINVAL;
   17118:	f06f 0415 	mvn.w	r4, #21
}
   1711c:	4620      	mov	r0, r4
   1711e:	b006      	add	sp, #24
   17120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
   17124:	a902      	add	r1, sp, #8
   17126:	f00f fb5a 	bl	267de <bt_settings_decode_key>
	if (err) {
   1712a:	4604      	mov	r4, r0
   1712c:	b178      	cbz	r0, 1714e <sc_set+0x5a>
   1712e:	4a32      	ldr	r2, [pc, #200]	; (171f8 <sc_set+0x104>)
   17130:	4c30      	ldr	r4, [pc, #192]	; (171f4 <sc_set+0x100>)
   17132:	4628      	mov	r0, r5
   17134:	1aa4      	subs	r4, r4, r2
   17136:	f7fa ff07 	bl	11f48 <z_log_strdup>
   1713a:	08e4      	lsrs	r4, r4, #3
		BT_ERR("Unable to decode address %s", log_strdup(name));
   1713c:	01a4      	lsls	r4, r4, #6
   1713e:	f044 0401 	orr.w	r4, r4, #1
   17142:	4601      	mov	r1, r0
   17144:	482e      	ldr	r0, [pc, #184]	; (17200 <sc_set+0x10c>)
   17146:	4622      	mov	r2, r4
   17148:	f00c fe98 	bl	23e7c <log_1>
   1714c:	e7e4      	b.n	17118 <sc_set+0x24>
	settings_name_next(name, &next);
   1714e:	a901      	add	r1, sp, #4
   17150:	4628      	mov	r0, r5
   17152:	f00d fd37 	bl	24bc4 <settings_name_next>
	if (!next) {
   17156:	9801      	ldr	r0, [sp, #4]
   17158:	b170      	cbz	r0, 17178 <sc_set+0x84>
		unsigned long next_id = strtoul(next, NULL, 10);
   1715a:	4621      	mov	r1, r4
   1715c:	220a      	movs	r2, #10
   1715e:	f00d fea3 	bl	24ea8 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   17162:	4601      	mov	r1, r0
   17164:	b140      	cbz	r0, 17178 <sc_set+0x84>
   17166:	4a23      	ldr	r2, [pc, #140]	; (171f4 <sc_set+0x100>)
   17168:	4b23      	ldr	r3, [pc, #140]	; (171f8 <sc_set+0x104>)
			BT_ERR("Invalid local identity %lu", next_id);
   1716a:	4826      	ldr	r0, [pc, #152]	; (17204 <sc_set+0x110>)
   1716c:	1ad2      	subs	r2, r2, r3
   1716e:	08d2      	lsrs	r2, r2, #3
   17170:	0192      	lsls	r2, r2, #6
   17172:	f042 0201 	orr.w	r2, r2, #1
   17176:	e7e7      	b.n	17148 <sc_set+0x54>
	cfg = find_sc_cfg(id, &addr);
   17178:	a902      	add	r1, sp, #8
   1717a:	2000      	movs	r0, #0
   1717c:	f7ff ff54 	bl	17028 <find_sc_cfg>
	if (!cfg && len_rd) {
   17180:	4605      	mov	r5, r0
   17182:	bb80      	cbnz	r0, 171e6 <sc_set+0xf2>
   17184:	2e00      	cmp	r6, #0
   17186:	d0c9      	beq.n	1711c <sc_set+0x28>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   17188:	a904      	add	r1, sp, #16
   1718a:	9004      	str	r0, [sp, #16]
   1718c:	4606      	mov	r6, r0
   1718e:	f8cd 0013 	str.w	r0, [sp, #19]
   17192:	f7ff ff49 	bl	17028 <find_sc_cfg>
		if (!cfg) {
   17196:	4605      	mov	r5, r0
   17198:	b960      	cbnz	r0, 171b4 <sc_set+0xc0>
   1719a:	4b17      	ldr	r3, [pc, #92]	; (171f8 <sc_set+0x104>)
   1719c:	4915      	ldr	r1, [pc, #84]	; (171f4 <sc_set+0x100>)
			BT_ERR("Unable to restore SC: no cfg left");
   1719e:	481a      	ldr	r0, [pc, #104]	; (17208 <sc_set+0x114>)
   171a0:	1ac9      	subs	r1, r1, r3
   171a2:	08c9      	lsrs	r1, r1, #3
   171a4:	0189      	lsls	r1, r1, #6
   171a6:	f041 0101 	orr.w	r1, r1, #1
   171aa:	f00c fe5a 	bl	23e62 <log_0>
			return -ENOMEM;
   171ae:	f06f 040b 	mvn.w	r4, #11
   171b2:	e7b3      	b.n	1711c <sc_set+0x28>
		cfg->id = id;
   171b4:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   171b8:	a902      	add	r1, sp, #8
   171ba:	f00e fde3 	bl	25d84 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   171be:	f105 0108 	add.w	r1, r5, #8
   171c2:	2204      	movs	r2, #4
   171c4:	4640      	mov	r0, r8
   171c6:	47b8      	blx	r7
		if (len < 0) {
   171c8:	1e05      	subs	r5, r0, #0
   171ca:	daa7      	bge.n	1711c <sc_set+0x28>
   171cc:	4b0a      	ldr	r3, [pc, #40]	; (171f8 <sc_set+0x104>)
   171ce:	4a09      	ldr	r2, [pc, #36]	; (171f4 <sc_set+0x100>)
			BT_ERR("Failed to decode value (err %zd)", len);
   171d0:	480e      	ldr	r0, [pc, #56]	; (1720c <sc_set+0x118>)
   171d2:	1ad2      	subs	r2, r2, r3
   171d4:	08d2      	lsrs	r2, r2, #3
   171d6:	0192      	lsls	r2, r2, #6
   171d8:	f042 0201 	orr.w	r2, r2, #1
   171dc:	4629      	mov	r1, r5
   171de:	f00c fe4d 	bl	23e7c <log_1>
			return len;
   171e2:	462c      	mov	r4, r5
   171e4:	e79a      	b.n	1711c <sc_set+0x28>
	if (len_rd) {
   171e6:	2e00      	cmp	r6, #0
   171e8:	d1e9      	bne.n	171be <sc_set+0xca>
		memset(cfg, 0, sizeof(*cfg));
   171ea:	220c      	movs	r2, #12
   171ec:	4631      	mov	r1, r6
   171ee:	f00d fe52 	bl	24e96 <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   171f2:	e793      	b.n	1711c <sc_set+0x28>
   171f4:	00028e1c 	.word	0x00028e1c
   171f8:	00028dd4 	.word	0x00028dd4
   171fc:	0002ad71 	.word	0x0002ad71
   17200:	0002ad92 	.word	0x0002ad92
   17204:	0002adae 	.word	0x0002adae
   17208:	0002adc9 	.word	0x0002adc9
   1720c:	0002acfb 	.word	0x0002acfb

00017210 <find_cf_cfg_by_addr>:
{
   17210:	b570      	push	{r4, r5, r6, lr}
			if (id == cf_cfg[i].id &&
   17212:	4c0e      	ldr	r4, [pc, #56]	; (1724c <find_cf_cfg_by_addr+0x3c>)
   17214:	7823      	ldrb	r3, [r4, #0]
   17216:	4283      	cmp	r3, r0
{
   17218:	4606      	mov	r6, r0
   1721a:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
   1721c:	d00a      	beq.n	17234 <find_cf_cfg_by_addr+0x24>
   1721e:	7c23      	ldrb	r3, [r4, #16]
   17220:	42b3      	cmp	r3, r6
   17222:	d111      	bne.n	17248 <find_cf_cfg_by_addr+0x38>
   17224:	490a      	ldr	r1, [pc, #40]	; (17250 <find_cf_cfg_by_addr+0x40>)
   17226:	2207      	movs	r2, #7
   17228:	4628      	mov	r0, r5
   1722a:	f00d fe19 	bl	24e60 <memcmp>
   1722e:	b958      	cbnz	r0, 17248 <find_cf_cfg_by_addr+0x38>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   17230:	2001      	movs	r0, #1
   17232:	e006      	b.n	17242 <find_cf_cfg_by_addr+0x32>
   17234:	2207      	movs	r2, #7
   17236:	1c61      	adds	r1, r4, #1
   17238:	4628      	mov	r0, r5
   1723a:	f00d fe11 	bl	24e60 <memcmp>
			if (id == cf_cfg[i].id &&
   1723e:	2800      	cmp	r0, #0
   17240:	d1ed      	bne.n	1721e <find_cf_cfg_by_addr+0xe>
				return &cf_cfg[i];
   17242:	eb04 1000 	add.w	r0, r4, r0, lsl #4
   17246:	e000      	b.n	1724a <find_cf_cfg_by_addr+0x3a>
	return NULL;
   17248:	2000      	movs	r0, #0
}
   1724a:	bd70      	pop	{r4, r5, r6, pc}
   1724c:	2000245c 	.word	0x2000245c
   17250:	2000246d 	.word	0x2000246d

00017254 <find_cf_cfg>:
{
   17254:	b537      	push	{r0, r1, r2, r4, r5, lr}
   17256:	4c16      	ldr	r4, [pc, #88]	; (172b0 <find_cf_cfg+0x5c>)
		if (!conn) {
   17258:	4605      	mov	r5, r0
   1725a:	b140      	cbz	r0, 1726e <find_cf_cfg+0x1a>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1725c:	4622      	mov	r2, r4
   1725e:	f812 1b01 	ldrb.w	r1, [r2], #1
   17262:	f00e fd1f 	bl	25ca4 <bt_conn_is_peer_addr_le>
   17266:	b1c0      	cbz	r0, 1729a <find_cf_cfg+0x46>
}
   17268:	4620      	mov	r0, r4
   1726a:	b003      	add	sp, #12
   1726c:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1726e:	9000      	str	r0, [sp, #0]
   17270:	2207      	movs	r2, #7
   17272:	f8cd 0003 	str.w	r0, [sp, #3]
   17276:	4669      	mov	r1, sp
   17278:	1c60      	adds	r0, r4, #1
   1727a:	f00d fdf1 	bl	24e60 <memcmp>
   1727e:	2800      	cmp	r0, #0
   17280:	d0f2      	beq.n	17268 <find_cf_cfg+0x14>
   17282:	2207      	movs	r2, #7
   17284:	4669      	mov	r1, sp
   17286:	f104 0011 	add.w	r0, r4, #17
   1728a:	9500      	str	r5, [sp, #0]
   1728c:	f8cd 5003 	str.w	r5, [sp, #3]
   17290:	f00d fde6 	bl	24e60 <memcmp>
   17294:	b948      	cbnz	r0, 172aa <find_cf_cfg+0x56>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   17296:	3410      	adds	r4, #16
   17298:	e7e6      	b.n	17268 <find_cf_cfg+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1729a:	7c21      	ldrb	r1, [r4, #16]
   1729c:	f104 0211 	add.w	r2, r4, #17
   172a0:	4628      	mov	r0, r5
   172a2:	f00e fcff 	bl	25ca4 <bt_conn_is_peer_addr_le>
   172a6:	2800      	cmp	r0, #0
   172a8:	d1f5      	bne.n	17296 <find_cf_cfg+0x42>
	return NULL;
   172aa:	2400      	movs	r4, #0
   172ac:	e7dc      	b.n	17268 <find_cf_cfg+0x14>
   172ae:	bf00      	nop
   172b0:	2000245c 	.word	0x2000245c

000172b4 <cf_write>:
{
   172b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   172b8:	4698      	mov	r8, r3
   172ba:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   172be:	2b01      	cmp	r3, #1
{
   172c0:	4606      	mov	r6, r0
   172c2:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   172c4:	d83d      	bhi.n	17342 <cf_write+0x8e>
	if (offset + len > sizeof(cfg->data)) {
   172c6:	4443      	add	r3, r8
   172c8:	2b01      	cmp	r3, #1
   172ca:	4645      	mov	r5, r8
   172cc:	dc3c      	bgt.n	17348 <cf_write+0x94>
	cfg = find_cf_cfg(conn);
   172ce:	f7ff ffc1 	bl	17254 <find_cf_cfg>
	if (!cfg) {
   172d2:	4604      	mov	r4, r0
   172d4:	b990      	cbnz	r0, 172fc <cf_write+0x48>
		cfg = find_cf_cfg(NULL);
   172d6:	f7ff ffbd 	bl	17254 <find_cf_cfg>
	if (!cfg) {
   172da:	4604      	mov	r4, r0
   172dc:	b970      	cbnz	r0, 172fc <cf_write+0x48>
   172de:	4b1d      	ldr	r3, [pc, #116]	; (17354 <cf_write+0xa0>)
   172e0:	491d      	ldr	r1, [pc, #116]	; (17358 <cf_write+0xa4>)
		BT_WARN("No space to store Client Supported Features");
   172e2:	481e      	ldr	r0, [pc, #120]	; (1735c <cf_write+0xa8>)
   172e4:	1ac9      	subs	r1, r1, r3
   172e6:	08c9      	lsrs	r1, r1, #3
   172e8:	0189      	lsls	r1, r1, #6
   172ea:	f041 0102 	orr.w	r1, r1, #2
   172ee:	f00c fdb8 	bl	23e62 <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   172f2:	f06f 0510 	mvn.w	r5, #16
}
   172f6:	4628      	mov	r0, r5
   172f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   172fc:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   172fe:	f1b8 0f00 	cmp.w	r8, #0
   17302:	d10c      	bne.n	1731e <cf_write+0x6a>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   17304:	f106 0188 	add.w	r1, r6, #136	; 0x88
   17308:	1c60      	adds	r0, r4, #1
   1730a:	f00e fd3b 	bl	25d84 <bt_addr_le_copy>
	cfg->id = conn->id;
   1730e:	4620      	mov	r0, r4
   17310:	7a33      	ldrb	r3, [r6, #8]
   17312:	f800 3b0c 	strb.w	r3, [r0], #12
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   17316:	2101      	movs	r1, #1
   17318:	f00e fdc3 	bl	25ea2 <atomic_or>
}
   1731c:	e7eb      	b.n	172f6 <cf_write+0x42>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1731e:	7a20      	ldrb	r0, [r4, #8]
   17320:	fa20 f301 	lsr.w	r3, r0, r1
   17324:	07da      	lsls	r2, r3, #31
   17326:	d503      	bpl.n	17330 <cf_write+0x7c>
		    !(value[i / 8] & BIT(i % 8))) {
   17328:	783b      	ldrb	r3, [r7, #0]
   1732a:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1732c:	07db      	lsls	r3, r3, #31
   1732e:	d50e      	bpl.n	1734e <cf_write+0x9a>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   17330:	3101      	adds	r1, #1
   17332:	2903      	cmp	r1, #3
   17334:	d1e3      	bne.n	172fe <cf_write+0x4a>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   17336:	783b      	ldrb	r3, [r7, #0]
   17338:	f003 0307 	and.w	r3, r3, #7
   1733c:	4318      	orrs	r0, r3
   1733e:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   17340:	e7e0      	b.n	17304 <cf_write+0x50>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   17342:	f06f 0506 	mvn.w	r5, #6
   17346:	e7d6      	b.n	172f6 <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   17348:	f06f 050c 	mvn.w	r5, #12
   1734c:	e7d3      	b.n	172f6 <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1734e:	f06f 0512 	mvn.w	r5, #18
   17352:	e7d0      	b.n	172f6 <cf_write+0x42>
   17354:	00028dd4 	.word	0x00028dd4
   17358:	00028e1c 	.word	0x00028e1c
   1735c:	0002adeb 	.word	0x0002adeb

00017360 <cf_set>:
{
   17360:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   17364:	4688      	mov	r8, r1
   17366:	4616      	mov	r6, r2
   17368:	461f      	mov	r7, r3
	if (!name) {
   1736a:	4605      	mov	r5, r0
   1736c:	b978      	cbnz	r0, 1738e <cf_set+0x2e>
   1736e:	4939      	ldr	r1, [pc, #228]	; (17454 <cf_set+0xf4>)
   17370:	4b39      	ldr	r3, [pc, #228]	; (17458 <cf_set+0xf8>)
		BT_ERR("Insufficient number of arguments");
   17372:	483a      	ldr	r0, [pc, #232]	; (1745c <cf_set+0xfc>)
   17374:	1ac9      	subs	r1, r1, r3
   17376:	08c9      	lsrs	r1, r1, #3
   17378:	0189      	lsls	r1, r1, #6
   1737a:	f041 0101 	orr.w	r1, r1, #1
   1737e:	f00c fd70 	bl	23e62 <log_0>
		return -EINVAL;
   17382:	f06f 0415 	mvn.w	r4, #21
}
   17386:	4620      	mov	r0, r4
   17388:	b004      	add	sp, #16
   1738a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
   1738e:	a902      	add	r1, sp, #8
   17390:	f00f fa25 	bl	267de <bt_settings_decode_key>
	if (err) {
   17394:	4604      	mov	r4, r0
   17396:	b178      	cbz	r0, 173b8 <cf_set+0x58>
   17398:	4a2f      	ldr	r2, [pc, #188]	; (17458 <cf_set+0xf8>)
   1739a:	4c2e      	ldr	r4, [pc, #184]	; (17454 <cf_set+0xf4>)
   1739c:	4628      	mov	r0, r5
   1739e:	1aa4      	subs	r4, r4, r2
   173a0:	f7fa fdd2 	bl	11f48 <z_log_strdup>
   173a4:	08e4      	lsrs	r4, r4, #3
		BT_ERR("Unable to decode address %s", log_strdup(name));
   173a6:	01a4      	lsls	r4, r4, #6
   173a8:	f044 0401 	orr.w	r4, r4, #1
   173ac:	4601      	mov	r1, r0
   173ae:	482c      	ldr	r0, [pc, #176]	; (17460 <cf_set+0x100>)
   173b0:	4622      	mov	r2, r4
   173b2:	f00c fd63 	bl	23e7c <log_1>
   173b6:	e7e4      	b.n	17382 <cf_set+0x22>
	settings_name_next(name, &next);
   173b8:	a901      	add	r1, sp, #4
   173ba:	4628      	mov	r0, r5
   173bc:	f00d fc02 	bl	24bc4 <settings_name_next>
	if (!next) {
   173c0:	9801      	ldr	r0, [sp, #4]
   173c2:	b170      	cbz	r0, 173e2 <cf_set+0x82>
		unsigned long next_id = strtoul(next, NULL, 10);
   173c4:	4621      	mov	r1, r4
   173c6:	220a      	movs	r2, #10
   173c8:	f00d fd6e 	bl	24ea8 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   173cc:	4601      	mov	r1, r0
   173ce:	b140      	cbz	r0, 173e2 <cf_set+0x82>
   173d0:	4a20      	ldr	r2, [pc, #128]	; (17454 <cf_set+0xf4>)
   173d2:	4b21      	ldr	r3, [pc, #132]	; (17458 <cf_set+0xf8>)
			BT_ERR("Invalid local identity %lu", next_id);
   173d4:	4823      	ldr	r0, [pc, #140]	; (17464 <cf_set+0x104>)
   173d6:	1ad2      	subs	r2, r2, r3
   173d8:	08d2      	lsrs	r2, r2, #3
   173da:	0192      	lsls	r2, r2, #6
   173dc:	f042 0201 	orr.w	r2, r2, #1
   173e0:	e7e7      	b.n	173b2 <cf_set+0x52>
	cfg = find_cf_cfg_by_addr(id, &addr);
   173e2:	a902      	add	r1, sp, #8
   173e4:	2000      	movs	r0, #0
   173e6:	f7ff ff13 	bl	17210 <find_cf_cfg_by_addr>
	if (!cfg) {
   173ea:	4605      	mov	r5, r0
   173ec:	b9b0      	cbnz	r0, 1741c <cf_set+0xbc>
		cfg = find_cf_cfg(NULL);
   173ee:	f7ff ff31 	bl	17254 <find_cf_cfg>
		if (!cfg) {
   173f2:	4605      	mov	r5, r0
   173f4:	b960      	cbnz	r0, 17410 <cf_set+0xb0>
   173f6:	4b18      	ldr	r3, [pc, #96]	; (17458 <cf_set+0xf8>)
   173f8:	4916      	ldr	r1, [pc, #88]	; (17454 <cf_set+0xf4>)
			BT_ERR("Unable to restore CF: no cfg left");
   173fa:	481b      	ldr	r0, [pc, #108]	; (17468 <cf_set+0x108>)
   173fc:	1ac9      	subs	r1, r1, r3
   173fe:	08c9      	lsrs	r1, r1, #3
   17400:	0189      	lsls	r1, r1, #6
   17402:	f041 0101 	orr.w	r1, r1, #1
   17406:	f00c fd2c 	bl	23e62 <log_0>
			return -ENOMEM;
   1740a:	f06f 040b 	mvn.w	r4, #11
   1740e:	e7ba      	b.n	17386 <cf_set+0x26>
		cfg->id = id;
   17410:	2300      	movs	r3, #0
   17412:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   17416:	a902      	add	r1, sp, #8
   17418:	f00e fcb4 	bl	25d84 <bt_addr_le_copy>
	if (len_rd) {
   1741c:	f1b8 0f00 	cmp.w	r8, #0
   17420:	d013      	beq.n	1744a <cf_set+0xea>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   17422:	f105 0108 	add.w	r1, r5, #8
   17426:	2201      	movs	r2, #1
   17428:	4638      	mov	r0, r7
   1742a:	47b0      	blx	r6
		if (len < 0) {
   1742c:	1e05      	subs	r5, r0, #0
   1742e:	daaa      	bge.n	17386 <cf_set+0x26>
   17430:	4b09      	ldr	r3, [pc, #36]	; (17458 <cf_set+0xf8>)
   17432:	4a08      	ldr	r2, [pc, #32]	; (17454 <cf_set+0xf4>)
			BT_ERR("Failed to decode value (err %zd)", len);
   17434:	480d      	ldr	r0, [pc, #52]	; (1746c <cf_set+0x10c>)
   17436:	1ad2      	subs	r2, r2, r3
   17438:	08d2      	lsrs	r2, r2, #3
   1743a:	0192      	lsls	r2, r2, #6
   1743c:	f042 0201 	orr.w	r2, r2, #1
   17440:	4629      	mov	r1, r5
   17442:	f00c fd1b 	bl	23e7c <log_1>
			return len;
   17446:	462c      	mov	r4, r5
   17448:	e79d      	b.n	17386 <cf_set+0x26>
		clear_cf_cfg(cfg);
   1744a:	4628      	mov	r0, r5
   1744c:	f00e fd47 	bl	25ede <clear_cf_cfg>
   17450:	e799      	b.n	17386 <cf_set+0x26>
   17452:	bf00      	nop
   17454:	00028e1c 	.word	0x00028e1c
   17458:	00028dd4 	.word	0x00028dd4
   1745c:	0002ad71 	.word	0x0002ad71
   17460:	0002ad92 	.word	0x0002ad92
   17464:	0002adae 	.word	0x0002adae
   17468:	0002ae17 	.word	0x0002ae17
   1746c:	0002acfb 	.word	0x0002acfb

00017470 <read_ppcp>:
{
   17470:	b513      	push	{r0, r1, r4, lr}
   17472:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   17476:	4c0b      	ldr	r4, [pc, #44]	; (174a4 <read_ppcp+0x34>)
{
   17478:	4610      	mov	r0, r2
	if (offset > value_len) {
   1747a:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   1747c:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
   17480:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   17484:	d80b      	bhi.n	1749e <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
   17486:	f1c1 0408 	rsb	r4, r1, #8
   1748a:	429c      	cmp	r4, r3
   1748c:	bfa8      	it	ge
   1748e:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   17490:	4622      	mov	r2, r4
   17492:	4469      	add	r1, sp
   17494:	f00d fcf4 	bl	24e80 <memcpy>
}
   17498:	4620      	mov	r0, r4
   1749a:	b002      	add	sp, #8
   1749c:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1749e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   174a2:	e7f9      	b.n	17498 <read_ppcp+0x28>
   174a4:	00280018 	.word	0x00280018

000174a8 <sc_indicate_rsp>:
{
   174a8:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   174aa:	f06f 0102 	mvn.w	r1, #2
   174ae:	4604      	mov	r4, r0
   174b0:	480d      	ldr	r0, [pc, #52]	; (174e8 <sc_indicate_rsp+0x40>)
   174b2:	f00e fd05 	bl	25ec0 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   174b6:	480c      	ldr	r0, [pc, #48]	; (174e8 <sc_indicate_rsp+0x40>)
   174b8:	f00e fc97 	bl	25dea <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   174bc:	07c2      	lsls	r2, r0, #31
   174be:	d504      	bpl.n	174ca <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   174c0:	480a      	ldr	r0, [pc, #40]	; (174ec <sc_indicate_rsp+0x44>)
   174c2:	2200      	movs	r2, #0
   174c4:	2300      	movs	r3, #0
   174c6:	f00b f819 	bl	224fc <k_work_reschedule>
	cfg = find_cf_cfg(conn);
   174ca:	4620      	mov	r0, r4
   174cc:	f7ff fec2 	bl	17254 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   174d0:	b140      	cbz	r0, 174e4 <sc_indicate_rsp+0x3c>
   174d2:	7a03      	ldrb	r3, [r0, #8]
   174d4:	07db      	lsls	r3, r3, #31
   174d6:	d505      	bpl.n	174e4 <sc_indicate_rsp+0x3c>
}
   174d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   174dc:	2101      	movs	r1, #1
   174de:	300c      	adds	r0, #12
   174e0:	f00e bcdf 	b.w	25ea2 <atomic_or>
   174e4:	bd10      	pop	{r4, pc}
   174e6:	bf00      	nop
   174e8:	200019f0 	.word	0x200019f0
   174ec:	200019c0 	.word	0x200019c0

000174f0 <bt_gatt_clear_sc>:
{
   174f0:	b570      	push	{r4, r5, r6, lr}
   174f2:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   174f4:	f7ff fd98 	bl	17028 <find_sc_cfg>
	if (!cfg) {
   174f8:	4604      	mov	r4, r0
   174fa:	b318      	cbz	r0, 17544 <bt_gatt_clear_sc+0x54>
		if (cfg->id) {
   174fc:	4605      	mov	r5, r0
   174fe:	f815 2b01 	ldrb.w	r2, [r5], #1
   17502:	b312      	cbz	r2, 1754a <bt_gatt_clear_sc+0x5a>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   17504:	ae02      	add	r6, sp, #8
   17506:	2104      	movs	r1, #4
   17508:	4630      	mov	r0, r6
   1750a:	f00b fac4 	bl	22a96 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   1750e:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   17510:	2124      	movs	r1, #36	; 0x24
   17512:	4a0f      	ldr	r2, [pc, #60]	; (17550 <bt_gatt_clear_sc+0x60>)
   17514:	462b      	mov	r3, r5
   17516:	a803      	add	r0, sp, #12
   17518:	f003 fe2a 	bl	1b170 <bt_settings_encode_key>
		err = settings_delete(key);
   1751c:	a803      	add	r0, sp, #12
   1751e:	f00d fc1d 	bl	24d5c <settings_delete>
		if (err) {
   17522:	4601      	mov	r1, r0
   17524:	b148      	cbz	r0, 1753a <bt_gatt_clear_sc+0x4a>
   17526:	4a0b      	ldr	r2, [pc, #44]	; (17554 <bt_gatt_clear_sc+0x64>)
   17528:	4b0b      	ldr	r3, [pc, #44]	; (17558 <bt_gatt_clear_sc+0x68>)
			BT_ERR("failed to delete SC (err %d)", err);
   1752a:	480c      	ldr	r0, [pc, #48]	; (1755c <bt_gatt_clear_sc+0x6c>)
   1752c:	1ad2      	subs	r2, r2, r3
   1752e:	08d2      	lsrs	r2, r2, #3
   17530:	0192      	lsls	r2, r2, #6
   17532:	f042 0201 	orr.w	r2, r2, #1
   17536:	f00c fca1 	bl	23e7c <log_1>
	memset(cfg, 0, sizeof(*cfg));
   1753a:	220c      	movs	r2, #12
   1753c:	2100      	movs	r1, #0
   1753e:	4620      	mov	r0, r4
   17540:	f00d fca9 	bl	24e96 <memset>
}
   17544:	2000      	movs	r0, #0
   17546:	b00c      	add	sp, #48	; 0x30
   17548:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   1754a:	9200      	str	r2, [sp, #0]
   1754c:	e7e0      	b.n	17510 <bt_gatt_clear_sc+0x20>
   1754e:	bf00      	nop
   17550:	0002afc4 	.word	0x0002afc4
   17554:	00028e1c 	.word	0x00028e1c
   17558:	00028dd4 	.word	0x00028dd4
   1755c:	0002ae39 	.word	0x0002ae39

00017560 <sc_clear>:
{
   17560:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   17562:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   17566:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   17568:	4631      	mov	r1, r6
   1756a:	7a00      	ldrb	r0, [r0, #8]
   1756c:	f00e ff7f 	bl	2646e <bt_addr_le_is_bonded>
   17570:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   17572:	4631      	mov	r1, r6
   17574:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   17576:	b17d      	cbz	r5, 17598 <sc_clear+0x38>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   17578:	f7ff ffba 	bl	174f0 <bt_gatt_clear_sc>
		if (err) {
   1757c:	4601      	mov	r1, r0
   1757e:	b1a0      	cbz	r0, 175aa <sc_clear+0x4a>
   17580:	4a0a      	ldr	r2, [pc, #40]	; (175ac <sc_clear+0x4c>)
   17582:	4b0b      	ldr	r3, [pc, #44]	; (175b0 <sc_clear+0x50>)
			BT_ERR("Failed to clear SC %d", err);
   17584:	480b      	ldr	r0, [pc, #44]	; (175b4 <sc_clear+0x54>)
   17586:	1ad2      	subs	r2, r2, r3
   17588:	08d2      	lsrs	r2, r2, #3
   1758a:	0192      	lsls	r2, r2, #6
}
   1758c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Failed to clear SC %d", err);
   17590:	f042 0201 	orr.w	r2, r2, #1
   17594:	f00c bc72 	b.w	23e7c <log_1>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   17598:	f7ff fd46 	bl	17028 <find_sc_cfg>
		if (cfg) {
   1759c:	b128      	cbz	r0, 175aa <sc_clear+0x4a>
	memset(cfg, 0, sizeof(*cfg));
   1759e:	4629      	mov	r1, r5
   175a0:	220c      	movs	r2, #12
}
   175a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   175a6:	f00d bc76 	b.w	24e96 <memset>
}
   175aa:	bd70      	pop	{r4, r5, r6, pc}
   175ac:	00028e1c 	.word	0x00028e1c
   175b0:	00028dd4 	.word	0x00028dd4
   175b4:	0002ae56 	.word	0x0002ae56

000175b8 <disconnected_cb>:
{
   175b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   175bc:	4b1f      	ldr	r3, [pc, #124]	; (1763c <disconnected_cb+0x84>)
{
   175be:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   175c0:	6882      	ldr	r2, [r0, #8]
   175c2:	429a      	cmp	r2, r3
{
   175c4:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   175c6:	d102      	bne.n	175ce <disconnected_cb+0x16>
	ccc = attr->user_data;
   175c8:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   175ca:	8963      	ldrh	r3, [r4, #10]
   175cc:	b9c3      	cbnz	r3, 17600 <disconnected_cb+0x48>
}
   175ce:	2001      	movs	r0, #1
   175d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   175d4:	f105 0888 	add.w	r8, r5, #136	; 0x88
   175d8:	7a28      	ldrb	r0, [r5, #8]
   175da:	4641      	mov	r1, r8
   175dc:	f00e ff47 	bl	2646e <bt_addr_le_is_bonded>
   175e0:	b948      	cbnz	r0, 175f6 <disconnected_cb+0x3e>
				if (ccc == &sc_ccc) {
   175e2:	4b17      	ldr	r3, [pc, #92]	; (17640 <disconnected_cb+0x88>)
   175e4:	429c      	cmp	r4, r3
   175e6:	d102      	bne.n	175ee <disconnected_cb+0x36>
					sc_clear(conn);
   175e8:	4628      	mov	r0, r5
   175ea:	f7ff ffb9 	bl	17560 <sc_clear>
				clear_ccc_cfg(cfg);
   175ee:	4620      	mov	r0, r4
   175f0:	f00e fbcb 	bl	25d8a <clear_ccc_cfg>
	if (!value_used) {
   175f4:	e019      	b.n	1762a <disconnected_cb+0x72>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   175f6:	4641      	mov	r1, r8
   175f8:	4638      	mov	r0, r7
   175fa:	f00e fbc3 	bl	25d84 <bt_addr_le_copy>
	if (!value_used) {
   175fe:	e014      	b.n	1762a <disconnected_cb+0x72>
		if (!cfg->value) {
   17600:	8923      	ldrh	r3, [r4, #8]
   17602:	b193      	cbz	r3, 1762a <disconnected_cb+0x72>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   17604:	4627      	mov	r7, r4
   17606:	4628      	mov	r0, r5
   17608:	f817 1b01 	ldrb.w	r1, [r7], #1
   1760c:	463a      	mov	r2, r7
   1760e:	f00e fb49 	bl	25ca4 <bt_conn_is_peer_addr_le>
   17612:	2800      	cmp	r0, #0
   17614:	d1de      	bne.n	175d4 <disconnected_cb+0x1c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   17616:	7820      	ldrb	r0, [r4, #0]
   17618:	4639      	mov	r1, r7
   1761a:	f7ff f837 	bl	1668c <bt_conn_lookup_addr_le>
			if (tmp) {
   1761e:	b120      	cbz	r0, 1762a <disconnected_cb+0x72>
				if (tmp->state == BT_CONN_CONNECTED) {
   17620:	7b45      	ldrb	r5, [r0, #13]
				bt_conn_unref(tmp);
   17622:	f00e faa1 	bl	25b68 <bt_conn_unref>
	if (!value_used) {
   17626:	2d07      	cmp	r5, #7
   17628:	d0d1      	beq.n	175ce <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
   1762a:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   1762c:	2100      	movs	r1, #0
   1762e:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   17630:	2b00      	cmp	r3, #0
   17632:	d0cc      	beq.n	175ce <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   17634:	4630      	mov	r0, r6
   17636:	4798      	blx	r3
   17638:	e7c9      	b.n	175ce <disconnected_cb+0x16>
   1763a:	bf00      	nop
   1763c:	00016ee9 	.word	0x00016ee9
   17640:	200005f8 	.word	0x200005f8

00017644 <bt_gatt_init>:
{
   17644:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   17646:	4b24      	ldr	r3, [pc, #144]	; (176d8 <bt_gatt_init+0x94>)
   17648:	f3bf 8f5b 	dmb	ish
   1764c:	2201      	movs	r2, #1
   1764e:	e853 1f00 	ldrex	r1, [r3]
   17652:	2900      	cmp	r1, #0
   17654:	d103      	bne.n	1765e <bt_gatt_init+0x1a>
   17656:	e843 2000 	strex	r0, r2, [r3]
   1765a:	2800      	cmp	r0, #0
   1765c:	d1f7      	bne.n	1764e <bt_gatt_init+0xa>
   1765e:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   17662:	d138      	bne.n	176d6 <bt_gatt_init+0x92>
   17664:	f3bf 8f5b 	dmb	ish
   17668:	4b1c      	ldr	r3, [pc, #112]	; (176dc <bt_gatt_init+0x98>)
   1766a:	e853 1f00 	ldrex	r1, [r3]
   1766e:	2900      	cmp	r1, #0
   17670:	d103      	bne.n	1767a <bt_gatt_init+0x36>
   17672:	e843 2000 	strex	r0, r2, [r3]
   17676:	2800      	cmp	r0, #0
   17678:	d1f7      	bne.n	1766a <bt_gatt_init+0x26>
   1767a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   1767e:	d108      	bne.n	17692 <bt_gatt_init+0x4e>
   17680:	4a17      	ldr	r2, [pc, #92]	; (176e0 <bt_gatt_init+0x9c>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   17682:	4918      	ldr	r1, [pc, #96]	; (176e4 <bt_gatt_init+0xa0>)
   17684:	8813      	ldrh	r3, [r2, #0]
   17686:	4c18      	ldr	r4, [pc, #96]	; (176e8 <bt_gatt_init+0xa4>)
	if (!atomic_cas(&service_init, 0, 1)) {
   17688:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1768a:	42a1      	cmp	r1, r4
   1768c:	d31d      	bcc.n	176ca <bt_gatt_init+0x86>
   1768e:	b100      	cbz	r0, 17692 <bt_gatt_init+0x4e>
   17690:	8013      	strh	r3, [r2, #0]
	list->head = NULL;
   17692:	4b16      	ldr	r3, [pc, #88]	; (176ec <bt_gatt_init+0xa8>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   17694:	4916      	ldr	r1, [pc, #88]	; (176f0 <bt_gatt_init+0xac>)
   17696:	4817      	ldr	r0, [pc, #92]	; (176f4 <bt_gatt_init+0xb0>)
   17698:	2200      	movs	r2, #0
	list->tail = NULL;
   1769a:	e9c3 2200 	strd	r2, r2, [r3]
   1769e:	f011 f8f6 	bl	2888e <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   176a2:	f44f 72a4 	mov.w	r2, #328	; 0x148
   176a6:	2300      	movs	r3, #0
   176a8:	4812      	ldr	r0, [pc, #72]	; (176f4 <bt_gatt_init+0xb0>)
   176aa:	f00a fef3 	bl	22494 <k_work_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   176ae:	4912      	ldr	r1, [pc, #72]	; (176f8 <bt_gatt_init+0xb4>)
   176b0:	4812      	ldr	r0, [pc, #72]	; (176fc <bt_gatt_init+0xb8>)
   176b2:	f011 f8ec 	bl	2888e <k_work_init_delayable>
   176b6:	2102      	movs	r1, #2
   176b8:	4811      	ldr	r0, [pc, #68]	; (17700 <bt_gatt_init+0xbc>)
   176ba:	f00e fbf2 	bl	25ea2 <atomic_or>
}
   176be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_ccc_store.work, ccc_delayed_store);
   176c2:	4910      	ldr	r1, [pc, #64]	; (17704 <bt_gatt_init+0xc0>)
   176c4:	4810      	ldr	r0, [pc, #64]	; (17708 <bt_gatt_init+0xc4>)
   176c6:	f011 b8e2 	b.w	2888e <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   176ca:	6848      	ldr	r0, [r1, #4]
   176cc:	4403      	add	r3, r0
   176ce:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   176d0:	3108      	adds	r1, #8
   176d2:	2001      	movs	r0, #1
   176d4:	e7d9      	b.n	1768a <bt_gatt_init+0x46>
}
   176d6:	bd10      	pop	{r4, pc}
   176d8:	2000247c 	.word	0x2000247c
   176dc:	20002498 	.word	0x20002498
   176e0:	20002810 	.word	0x20002810
   176e4:	00028d24 	.word	0x00028d24
   176e8:	00028d5c 	.word	0x00028d5c
   176ec:	20002454 	.word	0x20002454
   176f0:	000178e1 	.word	0x000178e1
   176f4:	20001910 	.word	0x20001910
   176f8:	00017cc9 	.word	0x00017cc9
   176fc:	200019c0 	.word	0x200019c0
   17700:	200019f0 	.word	0x200019f0
   17704:	0002629b 	.word	0x0002629b
   17708:	20001970 	.word	0x20001970

0001770c <bt_gatt_cb_register>:
	parent->next = child;
   1770c:	2300      	movs	r3, #0
   1770e:	6043      	str	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   17710:	4b04      	ldr	r3, [pc, #16]	; (17724 <bt_gatt_cb_register+0x18>)
   17712:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&callback_list, &cb->node);
   17714:	1d02      	adds	r2, r0, #4
   17716:	b911      	cbnz	r1, 1771e <bt_gatt_cb_register+0x12>
	list->head = node;
   17718:	e9c3 2200 	strd	r2, r2, [r3]
}
   1771c:	4770      	bx	lr
	parent->next = child;
   1771e:	600a      	str	r2, [r1, #0]
	list->tail = node;
   17720:	605a      	str	r2, [r3, #4]
}
   17722:	4770      	bx	lr
   17724:	20002454 	.word	0x20002454

00017728 <bt_gatt_attr_get_handle>:
{
   17728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   1772c:	4603      	mov	r3, r0
   1772e:	b148      	cbz	r0, 17744 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   17730:	8a00      	ldrh	r0, [r0, #16]
   17732:	b938      	cbnz	r0, 17744 <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17734:	4912      	ldr	r1, [pc, #72]	; (17780 <bt_gatt_attr_get_handle+0x58>)
   17736:	f8df e04c 	ldr.w	lr, [pc, #76]	; 17784 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   1773a:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1773c:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17740:	4571      	cmp	r1, lr
   17742:	d301      	bcc.n	17748 <bt_gatt_attr_get_handle+0x20>
}
   17744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((attr < &static_svc->attrs[0]) ||
   17748:	e9d1 7600 	ldrd	r7, r6, [r1]
   1774c:	42bb      	cmp	r3, r7
   1774e:	d304      	bcc.n	1775a <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   17750:	fb0c 7206 	mla	r2, ip, r6, r7
   17754:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   17756:	4293      	cmp	r3, r2
   17758:	d90e      	bls.n	17778 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   1775a:	19a2      	adds	r2, r4, r6
   1775c:	b292      	uxth	r2, r2
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1775e:	3108      	adds	r1, #8
   17760:	4614      	mov	r4, r2
   17762:	e7ed      	b.n	17740 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   17764:	fb0c 7805 	mla	r8, ip, r5, r7
   17768:	4543      	cmp	r3, r8
   1776a:	d007      	beq.n	1777c <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1776c:	3501      	adds	r5, #1
   1776e:	1962      	adds	r2, r4, r5
   17770:	42b5      	cmp	r5, r6
   17772:	b292      	uxth	r2, r2
   17774:	d1f6      	bne.n	17764 <bt_gatt_attr_get_handle+0x3c>
   17776:	e7f2      	b.n	1775e <bt_gatt_attr_get_handle+0x36>
   17778:	2500      	movs	r5, #0
   1777a:	e7f8      	b.n	1776e <bt_gatt_attr_get_handle+0x46>
   1777c:	4610      	mov	r0, r2
   1777e:	e7e1      	b.n	17744 <bt_gatt_attr_get_handle+0x1c>
   17780:	00028d24 	.word	0x00028d24
   17784:	00028d5c 	.word	0x00028d5c

00017788 <bt_gatt_foreach_attr_type>:
{
   17788:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1778c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   17790:	9100      	str	r1, [sp, #0]
   17792:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   17794:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17798:	2d00      	cmp	r5, #0
   1779a:	bf08      	it	eq
   1779c:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1779e:	4b24      	ldr	r3, [pc, #144]	; (17830 <bt_gatt_foreach_attr_type+0xa8>)
   177a0:	881b      	ldrh	r3, [r3, #0]
   177a2:	4283      	cmp	r3, r0
{
   177a4:	4607      	mov	r7, r0
   177a6:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   177a8:	d23c      	bcs.n	17824 <bt_gatt_foreach_attr_type+0x9c>
}
   177aa:	b003      	add	sp, #12
   177ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   177b0:	6873      	ldr	r3, [r6, #4]
   177b2:	4423      	add	r3, r4
   177b4:	42bb      	cmp	r3, r7
   177b6:	d232      	bcs.n	1781e <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   177b8:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   177ba:	3608      	adds	r6, #8
   177bc:	4b1d      	ldr	r3, [pc, #116]	; (17834 <bt_gatt_foreach_attr_type+0xac>)
   177be:	429e      	cmp	r6, r3
   177c0:	d3f6      	bcc.n	177b0 <bt_gatt_foreach_attr_type+0x28>
   177c2:	e7f2      	b.n	177aa <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   177c4:	5889      	ldr	r1, [r1, r2]
   177c6:	9301      	str	r3, [sp, #4]
   177c8:	4640      	mov	r0, r8
   177ca:	f00f fc23 	bl	27014 <bt_uuid_cmp>
   177ce:	9b01      	ldr	r3, [sp, #4]
   177d0:	b190      	cbz	r0, 177f8 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   177d2:	3401      	adds	r4, #1
   177d4:	f10a 0a01 	add.w	sl, sl, #1
   177d8:	b2a4      	uxth	r4, r4
   177da:	6873      	ldr	r3, [r6, #4]
   177dc:	4553      	cmp	r3, sl
   177de:	d9ec      	bls.n	177ba <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   177e0:	9b00      	ldr	r3, [sp, #0]
   177e2:	429c      	cmp	r4, r3
   177e4:	d8e1      	bhi.n	177aa <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   177e6:	42bc      	cmp	r4, r7
   177e8:	d3f3      	bcc.n	177d2 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   177ea:	6831      	ldr	r1, [r6, #0]
   177ec:	fb0b f20a 	mul.w	r2, fp, sl
   177f0:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   177f2:	f1b8 0f00 	cmp.w	r8, #0
   177f6:	d1e5      	bne.n	177c4 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   177f8:	f1b9 0f00 	cmp.w	r9, #0
   177fc:	d10b      	bne.n	17816 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   177fe:	3d01      	subs	r5, #1
   17800:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   17802:	4618      	mov	r0, r3
   17804:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17806:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   17808:	4621      	mov	r1, r4
   1780a:	4798      	blx	r3
	if (!*num_matches) {
   1780c:	2d00      	cmp	r5, #0
   1780e:	d0cc      	beq.n	177aa <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   17810:	2800      	cmp	r0, #0
   17812:	d1de      	bne.n	177d2 <bt_gatt_foreach_attr_type+0x4a>
   17814:	e7c9      	b.n	177aa <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   17816:	68da      	ldr	r2, [r3, #12]
   17818:	4591      	cmp	r9, r2
   1781a:	d1da      	bne.n	177d2 <bt_gatt_foreach_attr_type+0x4a>
   1781c:	e7ef      	b.n	177fe <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1781e:	f04f 0a00 	mov.w	sl, #0
   17822:	e7da      	b.n	177da <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17824:	4e04      	ldr	r6, [pc, #16]	; (17838 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   17826:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   17828:	f04f 0b14 	mov.w	fp, #20
   1782c:	e7c6      	b.n	177bc <bt_gatt_foreach_attr_type+0x34>
   1782e:	bf00      	nop
   17830:	20002810 	.word	0x20002810
   17834:	00028d5c 	.word	0x00028d5c
   17838:	00028d24 	.word	0x00028d24

0001783c <db_hash_gen>:
{
   1783c:	b530      	push	{r4, r5, lr}
   1783e:	b0c9      	sub	sp, #292	; 0x124
	uint8_t key[16] = {};
   17840:	2300      	movs	r3, #0
{
   17842:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   17844:	aa1c      	add	r2, sp, #112	; 0x70
   17846:	4669      	mov	r1, sp
   17848:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   1784a:	e9cd 3300 	strd	r3, r3, [sp]
   1784e:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   17852:	f00b f853 	bl	228fc <tc_cmac_setup>
   17856:	b958      	cbnz	r0, 17870 <db_hash_gen+0x34>
   17858:	491a      	ldr	r1, [pc, #104]	; (178c4 <db_hash_gen+0x88>)
   1785a:	4b1b      	ldr	r3, [pc, #108]	; (178c8 <db_hash_gen+0x8c>)
		BT_ERR("Unable to setup AES CMAC");
   1785c:	481b      	ldr	r0, [pc, #108]	; (178cc <db_hash_gen+0x90>)
   1785e:	1ac9      	subs	r1, r1, r3
   17860:	08c9      	lsrs	r1, r1, #3
   17862:	0189      	lsls	r1, r1, #6
   17864:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to calculate hash");
   17868:	f00c fafb 	bl	23e62 <log_0>
}
   1786c:	b049      	add	sp, #292	; 0x124
   1786e:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   17870:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17874:	2001      	movs	r0, #1
   17876:	4a16      	ldr	r2, [pc, #88]	; (178d0 <db_hash_gen+0x94>)
   17878:	ab04      	add	r3, sp, #16
   1787a:	f00e fcb1 	bl	261e0 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1787e:	4815      	ldr	r0, [pc, #84]	; (178d4 <db_hash_gen+0x98>)
   17880:	a904      	add	r1, sp, #16
   17882:	f00b f8d2 	bl	22a2a <tc_cmac_final>
   17886:	b940      	cbnz	r0, 1789a <db_hash_gen+0x5e>
   17888:	490e      	ldr	r1, [pc, #56]	; (178c4 <db_hash_gen+0x88>)
   1788a:	4b0f      	ldr	r3, [pc, #60]	; (178c8 <db_hash_gen+0x8c>)
		BT_ERR("Unable to calculate hash");
   1788c:	4812      	ldr	r0, [pc, #72]	; (178d8 <db_hash_gen+0x9c>)
   1788e:	1ac9      	subs	r1, r1, r3
   17890:	08c9      	lsrs	r1, r1, #3
   17892:	0189      	lsls	r1, r1, #6
   17894:	f041 0101 	orr.w	r1, r1, #1
   17898:	e7e6      	b.n	17868 <db_hash_gen+0x2c>
   1789a:	4b0e      	ldr	r3, [pc, #56]	; (178d4 <db_hash_gen+0x98>)
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1789c:	2208      	movs	r2, #8
   1789e:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   178a2:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   178a4:	780d      	ldrb	r5, [r1, #0]
   178a6:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < (length/2); i++) {
   178aa:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   178ac:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
   178b0:	d1f7      	bne.n	178a2 <db_hash_gen+0x66>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   178b2:	b10c      	cbz	r4, 178b8 <db_hash_gen+0x7c>
		db_hash_store();
   178b4:	f7ff fa20 	bl	16cf8 <db_hash_store>
   178b8:	2104      	movs	r1, #4
   178ba:	4808      	ldr	r0, [pc, #32]	; (178dc <db_hash_gen+0xa0>)
   178bc:	f00e faf1 	bl	25ea2 <atomic_or>
   178c0:	e7d4      	b.n	1786c <db_hash_gen+0x30>
   178c2:	bf00      	nop
   178c4:	00028e1c 	.word	0x00028e1c
   178c8:	00028dd4 	.word	0x00028dd4
   178cc:	0002ae6c 	.word	0x0002ae6c
   178d0:	00025df7 	.word	0x00025df7
   178d4:	200018f0 	.word	0x200018f0
   178d8:	0002ae85 	.word	0x0002ae85
   178dc:	200019f0 	.word	0x200019f0

000178e0 <db_hash_process>:
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   178e0:	f06f 0108 	mvn.w	r1, #8
{
   178e4:	b510      	push	{r4, lr}
   178e6:	4828      	ldr	r0, [pc, #160]	; (17988 <db_hash_process+0xa8>)
   178e8:	f00e faea 	bl	25ec0 <atomic_and>
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
   178ec:	0701      	lsls	r1, r0, #28
   178ee:	d545      	bpl.n	1797c <db_hash_process+0x9c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   178f0:	4825      	ldr	r0, [pc, #148]	; (17988 <db_hash_process+0xa8>)
   178f2:	f00e fa7a 	bl	25dea <atomic_get>
   178f6:	4603      	mov	r3, r0
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   178f8:	075a      	lsls	r2, r3, #29
   178fa:	f3c0 0080 	ubfx	r0, r0, #2, #1
   178fe:	d401      	bmi.n	17904 <db_hash_process+0x24>
			db_hash_gen(false);
   17900:	f7ff ff9c 	bl	1783c <db_hash_gen>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   17904:	4921      	ldr	r1, [pc, #132]	; (1798c <db_hash_process+0xac>)
   17906:	2210      	movs	r2, #16
   17908:	1888      	adds	r0, r1, r2
   1790a:	f00d faa9 	bl	24e60 <memcmp>
   1790e:	b948      	cbnz	r0, 17924 <db_hash_process+0x44>
			k_work_cancel_delayable(&gatt_sc.work);
   17910:	481f      	ldr	r0, [pc, #124]	; (17990 <db_hash_process+0xb0>)
   17912:	f010 ffc8 	bl	288a6 <k_work_cancel_delayable>
}
   17916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1791a:	481b      	ldr	r0, [pc, #108]	; (17988 <db_hash_process+0xa8>)
   1791c:	f06f 0101 	mvn.w	r1, #1
   17920:	f00e bace 	b.w	25ec0 <atomic_and>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   17924:	4c1b      	ldr	r4, [pc, #108]	; (17994 <db_hash_process+0xb4>)
   17926:	2101      	movs	r1, #1
   17928:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1792c:	f00e fab9 	bl	25ea2 <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   17930:	f010 0f01 	tst.w	r0, #1
   17934:	4623      	mov	r3, r4
   17936:	d110      	bne.n	1795a <db_hash_process+0x7a>
		gatt_sc.start = start;
   17938:	4b17      	ldr	r3, [pc, #92]	; (17998 <db_hash_process+0xb8>)
   1793a:	61a3      	str	r3, [r4, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1793c:	4812      	ldr	r0, [pc, #72]	; (17988 <db_hash_process+0xa8>)
   1793e:	f00e fa54 	bl	25dea <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   17942:	0783      	lsls	r3, r0, #30
   17944:	d405      	bmi.n	17952 <db_hash_process+0x72>
	k_work_reschedule(&gatt_sc.work, timeout);
   17946:	4812      	ldr	r0, [pc, #72]	; (17990 <db_hash_process+0xb0>)
   17948:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1794c:	2300      	movs	r3, #0
   1794e:	f00a fdd5 	bl	224fc <k_work_reschedule>
}
   17952:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		db_hash_store();
   17956:	f7ff b9cf 	b.w	16cf8 <db_hash_store>
	if (new_start >= *start && new_end <= *end) {
   1795a:	8b22      	ldrh	r2, [r4, #24]
   1795c:	8b61      	ldrh	r1, [r4, #26]
   1795e:	2a01      	cmp	r2, #1
   17960:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17964:	d805      	bhi.n	17972 <db_hash_process+0x92>
   17966:	4291      	cmp	r1, r2
   17968:	d0f3      	beq.n	17952 <db_hash_process+0x72>
		*end = new_end;
   1796a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1796e:	835a      	strh	r2, [r3, #26]
   17970:	e7e4      	b.n	1793c <db_hash_process+0x5c>
		*start = new_start;
   17972:	2001      	movs	r0, #1
	if (*end < new_end) {
   17974:	4291      	cmp	r1, r2
		*start = new_start;
   17976:	8320      	strh	r0, [r4, #24]
	if (*end < new_end) {
   17978:	d0e0      	beq.n	1793c <db_hash_process+0x5c>
   1797a:	e7f6      	b.n	1796a <db_hash_process+0x8a>
}
   1797c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	db_hash_gen(true);
   17980:	2001      	movs	r0, #1
   17982:	f7ff bf5b 	b.w	1783c <db_hash_gen>
   17986:	bf00      	nop
   17988:	200019f0 	.word	0x200019f0
   1798c:	200018f0 	.word	0x200018f0
   17990:	200019c0 	.word	0x200019c0
   17994:	200019a0 	.word	0x200019a0
   17998:	ffff0001 	.word	0xffff0001

0001799c <ccc_set_direct>:
{
   1799c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   179a0:	b0b9      	sub	sp, #228	; 0xe4
   179a2:	4688      	mov	r8, r1
   179a4:	4614      	mov	r4, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   179a6:	493f      	ldr	r1, [pc, #252]	; (17aa4 <ccc_set_direct+0x108>)
   179a8:	9840      	ldr	r0, [sp, #256]	; 0x100
   179aa:	466a      	mov	r2, sp
{
   179ac:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   179ae:	f00d f8e6 	bl	24b7e <settings_name_steq>
   179b2:	b978      	cbnz	r0, 179d4 <ccc_set_direct+0x38>
   179b4:	4b3c      	ldr	r3, [pc, #240]	; (17aa8 <ccc_set_direct+0x10c>)
   179b6:	493d      	ldr	r1, [pc, #244]	; (17aac <ccc_set_direct+0x110>)
			BT_ERR("Invalid key");
   179b8:	483d      	ldr	r0, [pc, #244]	; (17ab0 <ccc_set_direct+0x114>)
   179ba:	1ac9      	subs	r1, r1, r3
   179bc:	08c9      	lsrs	r1, r1, #3
   179be:	0189      	lsls	r1, r1, #6
   179c0:	f041 0101 	orr.w	r1, r1, #1
   179c4:	f00c fa4d 	bl	23e62 <log_0>
			return -EINVAL;
   179c8:	f06f 0515 	mvn.w	r5, #21
}
   179cc:	4628      	mov	r0, r5
   179ce:	b039      	add	sp, #228	; 0xe4
   179d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   179d4:	9e00      	ldr	r6, [sp, #0]
		settings_name_next(name, &next);
   179d6:	a901      	add	r1, sp, #4
   179d8:	4630      	mov	r0, r6
   179da:	f00d f8f3 	bl	24bc4 <settings_name_next>
		if (!name) {
   179de:	b96e      	cbnz	r6, 179fc <ccc_set_direct+0x60>
   179e0:	4932      	ldr	r1, [pc, #200]	; (17aac <ccc_set_direct+0x110>)
   179e2:	4b31      	ldr	r3, [pc, #196]	; (17aa8 <ccc_set_direct+0x10c>)
			BT_ERR("Insufficient number of arguments");
   179e4:	4833      	ldr	r0, [pc, #204]	; (17ab4 <ccc_set_direct+0x118>)
   179e6:	1ac9      	subs	r1, r1, r3
   179e8:	08c9      	lsrs	r1, r1, #3
   179ea:	0189      	lsls	r1, r1, #6
   179ec:	f041 0101 	orr.w	r1, r1, #1
   179f0:	f00c fa37 	bl	23e62 <log_0>
			return -EINVAL;
   179f4:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
   179f8:	4625      	mov	r5, r4
   179fa:	e7e7      	b.n	179cc <ccc_set_direct+0x30>
		} else if (!next) {
   179fc:	9801      	ldr	r0, [sp, #4]
   179fe:	b9c0      	cbnz	r0, 17a32 <ccc_set_direct+0x96>
		err = bt_settings_decode_key(name, &addr);
   17a00:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = BT_ID_DEFAULT;
   17a04:	2300      	movs	r3, #0
		err = bt_settings_decode_key(name, &addr);
   17a06:	4649      	mov	r1, r9
   17a08:	4630      	mov	r0, r6
			load.addr_with_id.id = BT_ID_DEFAULT;
   17a0a:	f88d 3014 	strb.w	r3, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
   17a0e:	f00e fee6 	bl	267de <bt_settings_decode_key>
		if (err) {
   17a12:	4605      	mov	r5, r0
   17a14:	b1f8      	cbz	r0, 17a56 <ccc_set_direct+0xba>
   17a16:	4a24      	ldr	r2, [pc, #144]	; (17aa8 <ccc_set_direct+0x10c>)
   17a18:	4c24      	ldr	r4, [pc, #144]	; (17aac <ccc_set_direct+0x110>)
   17a1a:	4630      	mov	r0, r6
   17a1c:	1aa4      	subs	r4, r4, r2
   17a1e:	08e4      	lsrs	r4, r4, #3
   17a20:	f7fa fa92 	bl	11f48 <z_log_strdup>
			BT_ERR("Unable to decode address %s", log_strdup(name));
   17a24:	01a4      	lsls	r4, r4, #6
   17a26:	f044 0401 	orr.w	r4, r4, #1
   17a2a:	4601      	mov	r1, r0
   17a2c:	4622      	mov	r2, r4
   17a2e:	4822      	ldr	r0, [pc, #136]	; (17ab8 <ccc_set_direct+0x11c>)
   17a30:	e00e      	b.n	17a50 <ccc_set_direct+0xb4>
			unsigned long next_id = strtoul(next, NULL, 10);
   17a32:	2100      	movs	r1, #0
   17a34:	220a      	movs	r2, #10
   17a36:	f00d fa37 	bl	24ea8 <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
   17a3a:	4601      	mov	r1, r0
   17a3c:	2800      	cmp	r0, #0
   17a3e:	d0df      	beq.n	17a00 <ccc_set_direct+0x64>
   17a40:	4a1a      	ldr	r2, [pc, #104]	; (17aac <ccc_set_direct+0x110>)
   17a42:	4b19      	ldr	r3, [pc, #100]	; (17aa8 <ccc_set_direct+0x10c>)
				BT_ERR("Invalid local identity %lu", next_id);
   17a44:	481d      	ldr	r0, [pc, #116]	; (17abc <ccc_set_direct+0x120>)
   17a46:	1ad2      	subs	r2, r2, r3
   17a48:	08d2      	lsrs	r2, r2, #3
   17a4a:	0192      	lsls	r2, r2, #6
   17a4c:	f042 0201 	orr.w	r2, r2, #1
			BT_ERR("Unable to decode address %s", log_strdup(name));
   17a50:	f00c fa14 	bl	23e7c <log_1>
   17a54:	e7ce      	b.n	179f4 <ccc_set_direct+0x58>
		load.addr_with_id.addr = &addr;
   17a56:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
   17a5a:	f1b8 0f00 	cmp.w	r8, #0
   17a5e:	d01d      	beq.n	17a9c <ccc_set_direct+0x100>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   17a60:	ae08      	add	r6, sp, #32
   17a62:	22c0      	movs	r2, #192	; 0xc0
   17a64:	4631      	mov	r1, r6
   17a66:	4638      	mov	r0, r7
   17a68:	47a0      	blx	r4
			if (len < 0) {
   17a6a:	1e04      	subs	r4, r0, #0
   17a6c:	da0b      	bge.n	17a86 <ccc_set_direct+0xea>
   17a6e:	4b0e      	ldr	r3, [pc, #56]	; (17aa8 <ccc_set_direct+0x10c>)
   17a70:	4a0e      	ldr	r2, [pc, #56]	; (17aac <ccc_set_direct+0x110>)
				BT_ERR("Failed to decode value (err %zd)", len);
   17a72:	4813      	ldr	r0, [pc, #76]	; (17ac0 <ccc_set_direct+0x124>)
   17a74:	1ad2      	subs	r2, r2, r3
   17a76:	08d2      	lsrs	r2, r2, #3
   17a78:	0192      	lsls	r2, r2, #6
   17a7a:	f042 0201 	orr.w	r2, r2, #1
   17a7e:	4621      	mov	r1, r4
   17a80:	f00c f9fc 	bl	23e7c <log_1>
				return len;
   17a84:	e7b8      	b.n	179f8 <ccc_set_direct+0x5c>
			load.count = len / sizeof(*ccc_store);
   17a86:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
   17a88:	9606      	str	r6, [sp, #24]
			load.count = len / sizeof(*ccc_store);
   17a8a:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   17a8c:	4a0d      	ldr	r2, [pc, #52]	; (17ac4 <ccc_set_direct+0x128>)
   17a8e:	ab04      	add	r3, sp, #16
   17a90:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17a94:	2001      	movs	r0, #1
   17a96:	f00e fba3 	bl	261e0 <bt_gatt_foreach_attr>
	return 0;
   17a9a:	e797      	b.n	179cc <ccc_set_direct+0x30>
			load.count = 0;
   17a9c:	e9cd 0006 	strd	r0, r0, [sp, #24]
   17aa0:	e7f4      	b.n	17a8c <ccc_set_direct+0xf0>
   17aa2:	bf00      	nop
   17aa4:	0002ae9e 	.word	0x0002ae9e
   17aa8:	00028dd4 	.word	0x00028dd4
   17aac:	00028e1c 	.word	0x00028e1c
   17ab0:	0002aea5 	.word	0x0002aea5
   17ab4:	0002ad71 	.word	0x0002ad71
   17ab8:	0002ad92 	.word	0x0002ad92
   17abc:	0002adae 	.word	0x0002adae
   17ac0:	0002acfb 	.word	0x0002acfb
   17ac4:	00016dfd 	.word	0x00016dfd

00017ac8 <bt_gatt_find_by_uuid>:
{
   17ac8:	b530      	push	{r4, r5, lr}
   17aca:	b087      	sub	sp, #28
	struct bt_gatt_attr *found = NULL;
   17acc:	2300      	movs	r3, #0
{
   17ace:	460c      	mov	r4, r1
   17ad0:	4615      	mov	r5, r2
	struct bt_gatt_attr *found = NULL;
   17ad2:	9305      	str	r3, [sp, #20]
	uint16_t start_handle = bt_gatt_attr_value_handle(attr);
   17ad4:	f00e fb36 	bl	26144 <bt_gatt_attr_value_handle>
	uint16_t end_handle = start_handle && attr_count ?
   17ad8:	b178      	cbz	r0, 17afa <bt_gatt_find_by_uuid+0x32>
   17ada:	b174      	cbz	r4, 17afa <bt_gatt_find_by_uuid+0x32>
   17adc:	1901      	adds	r1, r0, r4
   17ade:	b289      	uxth	r1, r1
	bt_gatt_foreach_attr_type(start_handle, end_handle, uuid, NULL, 1,
   17ae0:	ab05      	add	r3, sp, #20
   17ae2:	9302      	str	r3, [sp, #8]
   17ae4:	4b06      	ldr	r3, [pc, #24]	; (17b00 <bt_gatt_find_by_uuid+0x38>)
   17ae6:	9301      	str	r3, [sp, #4]
   17ae8:	2301      	movs	r3, #1
   17aea:	9300      	str	r3, [sp, #0]
   17aec:	462a      	mov	r2, r5
   17aee:	2300      	movs	r3, #0
   17af0:	f7ff fe4a 	bl	17788 <bt_gatt_foreach_attr_type>
}
   17af4:	9805      	ldr	r0, [sp, #20]
   17af6:	b007      	add	sp, #28
   17af8:	bd30      	pop	{r4, r5, pc}
	uint16_t end_handle = start_handle && attr_count ?
   17afa:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17afe:	e7ef      	b.n	17ae0 <bt_gatt_find_by_uuid+0x18>
   17b00:	00025d39 	.word	0x00025d39

00017b04 <gatt_indicate>:
{
   17b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17b08:	4615      	mov	r5, r2
   17b0a:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
   17b0c:	2214      	movs	r2, #20
   17b0e:	6869      	ldr	r1, [r5, #4]
{
   17b10:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
   17b12:	f00e fb70 	bl	261f6 <bt_gatt_check_perm>
   17b16:	4607      	mov	r7, r0
   17b18:	b170      	cbz	r0, 17b38 <gatt_indicate+0x34>
   17b1a:	4b2a      	ldr	r3, [pc, #168]	; (17bc4 <gatt_indicate+0xc0>)
   17b1c:	492a      	ldr	r1, [pc, #168]	; (17bc8 <gatt_indicate+0xc4>)
		BT_WARN("Link is not encrypted");
   17b1e:	482b      	ldr	r0, [pc, #172]	; (17bcc <gatt_indicate+0xc8>)
   17b20:	1ac9      	subs	r1, r1, r3
   17b22:	08c9      	lsrs	r1, r1, #3
   17b24:	0189      	lsls	r1, r1, #6
   17b26:	f041 0102 	orr.w	r1, r1, #2
   17b2a:	f00c f99a 	bl	23e62 <log_0>
		return -EPERM;
   17b2e:	f04f 35ff 	mov.w	r5, #4294967295
}
   17b32:	4628      	mov	r0, r5
   17b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   17b38:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   17b3c:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   17b3e:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   17b40:	f7fe f80c 	bl	15b5c <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   17b44:	3602      	adds	r6, #2
	if (!req) {
   17b46:	4604      	mov	r4, r0
   17b48:	b910      	cbnz	r0, 17b50 <gatt_indicate+0x4c>
		return -ENOMEM;
   17b4a:	f06f 050b 	mvn.w	r5, #11
   17b4e:	e7f0      	b.n	17b32 <gatt_indicate+0x2e>
	req->func = func;
   17b50:	4b1f      	ldr	r3, [pc, #124]	; (17bd0 <gatt_indicate+0xcc>)
	req->len = len;
   17b52:	6146      	str	r6, [r0, #20]
	req->att_op = op;
   17b54:	211d      	movs	r1, #29
   17b56:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   17b58:	60c7      	str	r7, [r0, #12]
	req->func = func;
   17b5a:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   17b5c:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   17b5e:	4632      	mov	r2, r6
   17b60:	4640      	mov	r0, r8
   17b62:	f7fd fc99 	bl	15498 <bt_att_create_pdu>
	if (!buf) {
   17b66:	4606      	mov	r6, r0
   17b68:	b968      	cbnz	r0, 17b86 <gatt_indicate+0x82>
   17b6a:	4b16      	ldr	r3, [pc, #88]	; (17bc4 <gatt_indicate+0xc0>)
   17b6c:	4916      	ldr	r1, [pc, #88]	; (17bc8 <gatt_indicate+0xc4>)
		BT_WARN("No buffer available to send indication");
   17b6e:	4819      	ldr	r0, [pc, #100]	; (17bd4 <gatt_indicate+0xd0>)
   17b70:	1ac9      	subs	r1, r1, r3
   17b72:	08c9      	lsrs	r1, r1, #3
   17b74:	0189      	lsls	r1, r1, #6
   17b76:	f041 0102 	orr.w	r1, r1, #2
   17b7a:	f00c f972 	bl	23e62 <log_0>
		bt_att_req_free(req);
   17b7e:	4620      	mov	r0, r4
   17b80:	f7fe f802 	bl	15b88 <bt_att_req_free>
   17b84:	e7e1      	b.n	17b4a <gatt_indicate+0x46>
   17b86:	f100 0a08 	add.w	sl, r0, #8
   17b8a:	2102      	movs	r1, #2
   17b8c:	4650      	mov	r0, sl
   17b8e:	f00f fb33 	bl	271f8 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   17b92:	4607      	mov	r7, r0
   17b94:	8aa9      	ldrh	r1, [r5, #20]
   17b96:	f827 9b02 	strh.w	r9, [r7], #2
   17b9a:	4650      	mov	r0, sl
   17b9c:	f00f fb2c 	bl	271f8 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   17ba0:	8aaa      	ldrh	r2, [r5, #20]
   17ba2:	6929      	ldr	r1, [r5, #16]
   17ba4:	4638      	mov	r0, r7
   17ba6:	f00d f96b 	bl	24e80 <memcpy>
	req->buf = buf;
   17baa:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   17bac:	4621      	mov	r1, r4
   17bae:	4640      	mov	r0, r8
   17bb0:	f00d ff5d 	bl	25a6e <bt_att_req_send>
	if (err) {
   17bb4:	4605      	mov	r5, r0
   17bb6:	2800      	cmp	r0, #0
   17bb8:	d0bb      	beq.n	17b32 <gatt_indicate+0x2e>
		bt_att_req_free(req);
   17bba:	4620      	mov	r0, r4
   17bbc:	f7fd ffe4 	bl	15b88 <bt_att_req_free>
   17bc0:	e7b7      	b.n	17b32 <gatt_indicate+0x2e>
   17bc2:	bf00      	nop
   17bc4:	00028dd4 	.word	0x00028dd4
   17bc8:	00028e1c 	.word	0x00028e1c
   17bcc:	0002aeb1 	.word	0x0002aeb1
   17bd0:	00025d53 	.word	0x00025d53
   17bd4:	0002aec7 	.word	0x0002aec7

00017bd8 <bt_gatt_indicate>:
{
   17bd8:	b530      	push	{r4, r5, lr}
   17bda:	4604      	mov	r4, r0
   17bdc:	b08b      	sub	sp, #44	; 0x2c
   17bde:	4837      	ldr	r0, [pc, #220]	; (17cbc <bt_gatt_indicate+0xe4>)
   17be0:	460d      	mov	r5, r1
   17be2:	f00e f902 	bl	25dea <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   17be6:	0782      	lsls	r2, r0, #30
   17be8:	d561      	bpl.n	17cae <bt_gatt_indicate+0xd6>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   17bea:	b114      	cbz	r4, 17bf2 <bt_gatt_indicate+0x1a>
   17bec:	7b63      	ldrb	r3, [r4, #13]
   17bee:	2b07      	cmp	r3, #7
   17bf0:	d160      	bne.n	17cb4 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
   17bf2:	6868      	ldr	r0, [r5, #4]
   17bf4:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   17bf6:	f7ff fd97 	bl	17728 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   17bfa:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   17bfc:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   17c00:	b33a      	cbz	r2, 17c52 <bt_gatt_indicate+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17c02:	a905      	add	r1, sp, #20
   17c04:	9102      	str	r1, [sp, #8]
   17c06:	492e      	ldr	r1, [pc, #184]	; (17cc0 <bt_gatt_indicate+0xe8>)
   17c08:	9101      	str	r1, [sp, #4]
   17c0a:	2101      	movs	r1, #1
	found->attr = NULL;
   17c0c:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17c0e:	9100      	str	r1, [sp, #0]
   17c10:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   17c14:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17c16:	f7ff fdb7 	bl	17788 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   17c1a:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   17c1c:	b91b      	cbnz	r3, 17c26 <bt_gatt_indicate+0x4e>
			return -ENOENT;
   17c1e:	f06f 0001 	mvn.w	r0, #1
}
   17c22:	b00b      	add	sp, #44	; 0x2c
   17c24:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   17c26:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   17c28:	9b05      	ldr	r3, [sp, #20]
   17c2a:	6818      	ldr	r0, [r3, #0]
   17c2c:	2300      	movs	r3, #0
   17c2e:	f88d 3010 	strb.w	r3, [sp, #16]
   17c32:	a904      	add	r1, sp, #16
   17c34:	f642 0303 	movw	r3, #10243	; 0x2803
   17c38:	f8ad 3012 	strh.w	r3, [sp, #18]
   17c3c:	f00f f9ea 	bl	27014 <bt_uuid_cmp>
   17c40:	b970      	cbnz	r0, 17c60 <bt_gatt_indicate+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   17c42:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   17c44:	68c3      	ldr	r3, [r0, #12]
   17c46:	799b      	ldrb	r3, [r3, #6]
   17c48:	069b      	lsls	r3, r3, #26
   17c4a:	d405      	bmi.n	17c58 <bt_gatt_indicate+0x80>
			return -EINVAL;
   17c4c:	f06f 0015 	mvn.w	r0, #21
   17c50:	e7e7      	b.n	17c22 <bt_gatt_indicate+0x4a>
		if (!data.handle) {
   17c52:	2800      	cmp	r0, #0
   17c54:	d1e8      	bne.n	17c28 <bt_gatt_indicate+0x50>
   17c56:	e7e2      	b.n	17c1e <bt_gatt_indicate+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   17c58:	f00e fa74 	bl	26144 <bt_gatt_attr_value_handle>
   17c5c:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   17c60:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   17c64:	b13c      	cbz	r4, 17c76 <bt_gatt_indicate+0x9e>
		params->_ref = 1;
   17c66:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   17c68:	4601      	mov	r1, r0
		params->_ref = 1;
   17c6a:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   17c6c:	462a      	mov	r2, r5
   17c6e:	4620      	mov	r0, r4
   17c70:	f7ff ff48 	bl	17b04 <gatt_indicate>
   17c74:	e7d5      	b.n	17c22 <bt_gatt_indicate+0x4a>
	data.err = -ENOTCONN;
   17c76:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   17c7a:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   17c7c:	2302      	movs	r3, #2
   17c7e:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17c82:	f642 1302 	movw	r3, #10498	; 0x2902
   17c86:	f8ad 3012 	strh.w	r3, [sp, #18]
   17c8a:	ab05      	add	r3, sp, #20
   17c8c:	9302      	str	r3, [sp, #8]
   17c8e:	4b0d      	ldr	r3, [pc, #52]	; (17cc4 <bt_gatt_indicate+0xec>)
   17c90:	9301      	str	r3, [sp, #4]
   17c92:	2301      	movs	r3, #1
   17c94:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
   17c96:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17c98:	4623      	mov	r3, r4
   17c9a:	aa04      	add	r2, sp, #16
   17c9c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   17ca0:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17ca2:	f88d 4010 	strb.w	r4, [sp, #16]
   17ca6:	f7ff fd6f 	bl	17788 <bt_gatt_foreach_attr_type>
	return data.err;
   17caa:	9807      	ldr	r0, [sp, #28]
   17cac:	e7b9      	b.n	17c22 <bt_gatt_indicate+0x4a>
		return -EAGAIN;
   17cae:	f06f 000a 	mvn.w	r0, #10
   17cb2:	e7b6      	b.n	17c22 <bt_gatt_indicate+0x4a>
		return -ENOTCONN;
   17cb4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   17cb8:	e7b3      	b.n	17c22 <bt_gatt_indicate+0x4a>
   17cba:	bf00      	nop
   17cbc:	2000037c 	.word	0x2000037c
   17cc0:	00025d79 	.word	0x00025d79
   17cc4:	00017dc5 	.word	0x00017dc5

00017cc8 <sc_process>:
{
   17cc8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   17cca:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   17cce:	4604      	mov	r4, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
   17cd0:	f850 3c08 	ldr.w	r3, [r0, #-8]
   17cd4:	9301      	str	r3, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   17cd6:	f1a0 0620 	sub.w	r6, r0, #32
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17cda:	f06f 0101 	mvn.w	r1, #1
   17cde:	4628      	mov	r0, r5
   17ce0:	f00e f8ee 	bl	25ec0 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   17ce4:	4b0d      	ldr	r3, [pc, #52]	; (17d1c <sc_process+0x54>)
   17ce6:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   17cea:	4b0d      	ldr	r3, [pc, #52]	; (17d20 <sc_process+0x58>)
   17cec:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   17cf0:	ab01      	add	r3, sp, #4
	sc->start = 0U;
   17cf2:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   17cf4:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   17cf8:	2304      	movs	r3, #4
	sc->start = 0U;
   17cfa:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   17cfe:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   17d02:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   17d06:	4631      	mov	r1, r6
   17d08:	f7ff ff66 	bl	17bd8 <bt_gatt_indicate>
   17d0c:	b918      	cbnz	r0, 17d16 <sc_process+0x4e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   17d0e:	2102      	movs	r1, #2
   17d10:	4628      	mov	r0, r5
   17d12:	f00e f8c6 	bl	25ea2 <atomic_or>
}
   17d16:	b002      	add	sp, #8
   17d18:	bd70      	pop	{r4, r5, r6, pc}
   17d1a:	bf00      	nop
   17d1c:	0002956c 	.word	0x0002956c
   17d20:	000174a9 	.word	0x000174a9

00017d24 <gatt_notify>:
{
   17d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17d28:	4614      	mov	r4, r2
   17d2a:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   17d2c:	2214      	movs	r2, #20
   17d2e:	6861      	ldr	r1, [r4, #4]
{
   17d30:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   17d32:	f00e fa60 	bl	261f6 <bt_gatt_check_perm>
   17d36:	b168      	cbz	r0, 17d54 <gatt_notify+0x30>
   17d38:	4b1e      	ldr	r3, [pc, #120]	; (17db4 <gatt_notify+0x90>)
   17d3a:	491f      	ldr	r1, [pc, #124]	; (17db8 <gatt_notify+0x94>)
		BT_WARN("Link is not encrypted");
   17d3c:	481f      	ldr	r0, [pc, #124]	; (17dbc <gatt_notify+0x98>)
   17d3e:	1ac9      	subs	r1, r1, r3
   17d40:	08c9      	lsrs	r1, r1, #3
   17d42:	0189      	lsls	r1, r1, #6
   17d44:	f041 0102 	orr.w	r1, r1, #2
   17d48:	f00c f88b 	bl	23e62 <log_0>
		return -EPERM;
   17d4c:	f04f 30ff 	mov.w	r0, #4294967295
}
   17d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				sizeof(*nfy) + params->len);
   17d54:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   17d56:	211b      	movs	r1, #27
   17d58:	3202      	adds	r2, #2
   17d5a:	4638      	mov	r0, r7
   17d5c:	f7fd fb9c 	bl	15498 <bt_att_create_pdu>
	if (!buf) {
   17d60:	4605      	mov	r5, r0
   17d62:	b960      	cbnz	r0, 17d7e <gatt_notify+0x5a>
   17d64:	4b13      	ldr	r3, [pc, #76]	; (17db4 <gatt_notify+0x90>)
   17d66:	4914      	ldr	r1, [pc, #80]	; (17db8 <gatt_notify+0x94>)
		BT_WARN("No buffer available to send notification");
   17d68:	4815      	ldr	r0, [pc, #84]	; (17dc0 <gatt_notify+0x9c>)
   17d6a:	1ac9      	subs	r1, r1, r3
   17d6c:	08c9      	lsrs	r1, r1, #3
   17d6e:	0189      	lsls	r1, r1, #6
   17d70:	f041 0102 	orr.w	r1, r1, #2
   17d74:	f00c f875 	bl	23e62 <log_0>
		return -ENOMEM;
   17d78:	f06f 000b 	mvn.w	r0, #11
   17d7c:	e7e8      	b.n	17d50 <gatt_notify+0x2c>
   17d7e:	f100 0908 	add.w	r9, r0, #8
   17d82:	2102      	movs	r1, #2
   17d84:	4648      	mov	r0, r9
   17d86:	f00f fa37 	bl	271f8 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   17d8a:	4606      	mov	r6, r0
   17d8c:	89a1      	ldrh	r1, [r4, #12]
   17d8e:	f826 8b02 	strh.w	r8, [r6], #2
   17d92:	4648      	mov	r0, r9
   17d94:	f00f fa30 	bl	271f8 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   17d98:	89a2      	ldrh	r2, [r4, #12]
   17d9a:	68a1      	ldr	r1, [r4, #8]
   17d9c:	4630      	mov	r0, r6
   17d9e:	f00d f86f 	bl	24e80 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   17da2:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   17da6:	4629      	mov	r1, r5
   17da8:	4638      	mov	r0, r7
}
   17daa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   17dae:	f00d be13 	b.w	259d8 <bt_att_send>
   17db2:	bf00      	nop
   17db4:	00028dd4 	.word	0x00028dd4
   17db8:	00028e1c 	.word	0x00028e1c
   17dbc:	0002aeb1 	.word	0x0002aeb1
   17dc0:	0002aeee 	.word	0x0002aeee

00017dc4 <notify_cb>:
{
   17dc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   17dc8:	4b3c      	ldr	r3, [pc, #240]	; (17ebc <notify_cb+0xf8>)
{
   17dca:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   17dcc:	6882      	ldr	r2, [r0, #8]
   17dce:	429a      	cmp	r2, r3
{
   17dd0:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   17dd2:	d113      	bne.n	17dfc <notify_cb+0x38>
	ccc = attr->user_data;
   17dd4:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   17dd6:	4b3a      	ldr	r3, [pc, #232]	; (17ec0 <notify_cb+0xfc>)
   17dd8:	429f      	cmp	r7, r3
   17dda:	d014      	beq.n	17e06 <notify_cb+0x42>
		if (cfg->value != data->type) {
   17ddc:	893a      	ldrh	r2, [r7, #8]
   17dde:	89a3      	ldrh	r3, [r4, #12]
   17de0:	429a      	cmp	r2, r3
   17de2:	d10b      	bne.n	17dfc <notify_cb+0x38>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   17de4:	4639      	mov	r1, r7
   17de6:	f811 0b01 	ldrb.w	r0, [r1], #1
   17dea:	f7fe fc4f 	bl	1668c <bt_conn_lookup_addr_le>
		if (!conn) {
   17dee:	4605      	mov	r5, r0
   17df0:	b120      	cbz	r0, 17dfc <notify_cb+0x38>
		if (conn->state != BT_CONN_CONNECTED) {
   17df2:	7b43      	ldrb	r3, [r0, #13]
   17df4:	2b07      	cmp	r3, #7
   17df6:	d02e      	beq.n	17e56 <notify_cb+0x92>
			bt_conn_unref(conn);
   17df8:	f00d feb6 	bl	25b68 <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
   17dfc:	2701      	movs	r7, #1
}
   17dfe:	4638      	mov	r0, r7
   17e00:	b003      	add	sp, #12
   17e02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   17e06:	f04f 0800 	mov.w	r8, #0
   17e0a:	4d2e      	ldr	r5, [pc, #184]	; (17ec4 <notify_cb+0x100>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   17e0c:	46c1      	mov	r9, r8
   17e0e:	2207      	movs	r2, #7
   17e10:	4669      	mov	r1, sp
   17e12:	4628      	mov	r0, r5
   17e14:	f8cd 9000 	str.w	r9, [sp]
   17e18:	f8cd 9003 	str.w	r9, [sp, #3]
   17e1c:	f00d f820 	bl	24e60 <memcmp>
   17e20:	b178      	cbz	r0, 17e42 <notify_cb+0x7e>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   17e22:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   17e26:	2207      	movs	r2, #7
   17e28:	4629      	mov	r1, r5
   17e2a:	f7fe fc73 	bl	16714 <bt_conn_lookup_state_le>
			if (!conn) {
   17e2e:	b978      	cbnz	r0, 17e50 <notify_cb+0x8c>
				sc = (struct sc_data *)data->ind_params->data;
   17e30:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   17e32:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   17e36:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   17e38:	4629      	mov	r1, r5
   17e3a:	8853      	ldrh	r3, [r2, #2]
   17e3c:	8812      	ldrh	r2, [r2, #0]
   17e3e:	f7ff f915 	bl	1706c <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   17e42:	350c      	adds	r5, #12
   17e44:	f1b8 0f00 	cmp.w	r8, #0
   17e48:	d1c8      	bne.n	17ddc <notify_cb+0x18>
   17e4a:	f04f 0801 	mov.w	r8, #1
   17e4e:	e7de      	b.n	17e0e <notify_cb+0x4a>
			bt_conn_unref(conn);
   17e50:	f00d fe8a 	bl	25b68 <bt_conn_unref>
   17e54:	e7f5      	b.n	17e42 <notify_cb+0x7e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   17e56:	697b      	ldr	r3, [r7, #20]
   17e58:	b123      	cbz	r3, 17e64 <notify_cb+0xa0>
   17e5a:	4631      	mov	r1, r6
   17e5c:	4798      	blx	r3
   17e5e:	b908      	cbnz	r0, 17e64 <notify_cb+0xa0>
			bt_conn_unref(conn);
   17e60:	4628      	mov	r0, r5
   17e62:	e7c9      	b.n	17df8 <notify_cb+0x34>
		if (bt_gatt_check_perm(conn, attr,
   17e64:	2214      	movs	r2, #20
   17e66:	4631      	mov	r1, r6
   17e68:	4628      	mov	r0, r5
   17e6a:	f00e f9c4 	bl	261f6 <bt_gatt_check_perm>
   17e6e:	4607      	mov	r7, r0
   17e70:	b150      	cbz	r0, 17e88 <notify_cb+0xc4>
   17e72:	4b15      	ldr	r3, [pc, #84]	; (17ec8 <notify_cb+0x104>)
   17e74:	4915      	ldr	r1, [pc, #84]	; (17ecc <notify_cb+0x108>)
			BT_WARN("Link is not encrypted");
   17e76:	4816      	ldr	r0, [pc, #88]	; (17ed0 <notify_cb+0x10c>)
   17e78:	1ac9      	subs	r1, r1, r3
   17e7a:	08c9      	lsrs	r1, r1, #3
   17e7c:	0189      	lsls	r1, r1, #6
   17e7e:	f041 0102 	orr.w	r1, r1, #2
   17e82:	f00b ffee 	bl	23e62 <log_0>
			continue;
   17e86:	e7b9      	b.n	17dfc <notify_cb+0x38>
		if (data->type == BT_GATT_CCC_INDICATE) {
   17e88:	89a3      	ldrh	r3, [r4, #12]
   17e8a:	88a1      	ldrh	r1, [r4, #4]
   17e8c:	6922      	ldr	r2, [r4, #16]
   17e8e:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   17e90:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   17e92:	d10f      	bne.n	17eb4 <notify_cb+0xf0>
			err = gatt_indicate(conn, data->handle,
   17e94:	f7ff fe36 	bl	17b04 <gatt_indicate>
			if (err == 0) {
   17e98:	4606      	mov	r6, r0
   17e9a:	b918      	cbnz	r0, 17ea4 <notify_cb+0xe0>
				data->ind_params->_ref++;
   17e9c:	6922      	ldr	r2, [r4, #16]
   17e9e:	7d93      	ldrb	r3, [r2, #22]
   17ea0:	3301      	adds	r3, #1
   17ea2:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   17ea4:	4628      	mov	r0, r5
   17ea6:	f00d fe5f 	bl	25b68 <bt_conn_unref>
		if (err < 0) {
   17eaa:	2e00      	cmp	r6, #0
   17eac:	dba7      	blt.n	17dfe <notify_cb+0x3a>
		data->err = 0;
   17eae:	2300      	movs	r3, #0
   17eb0:	60a3      	str	r3, [r4, #8]
   17eb2:	e7a3      	b.n	17dfc <notify_cb+0x38>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   17eb4:	f7ff ff36 	bl	17d24 <gatt_notify>
   17eb8:	4606      	mov	r6, r0
   17eba:	e7f3      	b.n	17ea4 <notify_cb+0xe0>
   17ebc:	00016ee9 	.word	0x00016ee9
   17ec0:	200005f8 	.word	0x200005f8
   17ec4:	20002813 	.word	0x20002813
   17ec8:	00028dd4 	.word	0x00028dd4
   17ecc:	00028e1c 	.word	0x00028e1c
   17ed0:	0002aeb1 	.word	0x0002aeb1

00017ed4 <update_ccc>:
{
   17ed4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   17ed8:	4b39      	ldr	r3, [pc, #228]	; (17fc0 <update_ccc+0xec>)
	struct bt_conn *conn = data->conn;
   17eda:	6814      	ldr	r4, [r2, #0]
{
   17edc:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   17ede:	6882      	ldr	r2, [r0, #8]
   17ee0:	429a      	cmp	r2, r3
{
   17ee2:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   17ee4:	d11c      	bne.n	17f20 <update_ccc+0x4c>
	ccc = attr->user_data;
   17ee6:	68c7      	ldr	r7, [r0, #12]
		if (!cfg->value ||
   17ee8:	893b      	ldrh	r3, [r7, #8]
   17eea:	b1cb      	cbz	r3, 17f20 <update_ccc+0x4c>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   17eec:	463a      	mov	r2, r7
   17eee:	4620      	mov	r0, r4
   17ef0:	f812 1b01 	ldrb.w	r1, [r2], #1
   17ef4:	f00d fed6 	bl	25ca4 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   17ef8:	b190      	cbz	r0, 17f20 <update_ccc+0x4c>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   17efa:	222a      	movs	r2, #42	; 0x2a
   17efc:	4629      	mov	r1, r5
   17efe:	4620      	mov	r0, r4
   17f00:	f00e f979 	bl	261f6 <bt_gatt_check_perm>
		if (err) {
   17f04:	b308      	cbz	r0, 17f4a <update_ccc+0x76>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   17f06:	2803      	cmp	r0, #3
   17f08:	d10e      	bne.n	17f28 <update_ccc+0x54>
   17f0a:	4a2e      	ldr	r2, [pc, #184]	; (17fc4 <update_ccc+0xf0>)
   17f0c:	4b2e      	ldr	r3, [pc, #184]	; (17fc8 <update_ccc+0xf4>)
				BT_WARN("CCC %p not writable", attr);
   17f0e:	482f      	ldr	r0, [pc, #188]	; (17fcc <update_ccc+0xf8>)
   17f10:	1ad2      	subs	r2, r2, r3
   17f12:	08d2      	lsrs	r2, r2, #3
   17f14:	0192      	lsls	r2, r2, #6
   17f16:	f042 0202 	orr.w	r2, r2, #2
   17f1a:	4629      	mov	r1, r5
   17f1c:	f00b ffae 	bl	23e7c <log_1>
}
   17f20:	2001      	movs	r0, #1
   17f22:	b002      	add	sp, #8
   17f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				sec = BT_SECURITY_L3;
   17f28:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   17f2a:	4620      	mov	r0, r4
				sec = BT_SECURITY_L3;
   17f2c:	bf14      	ite	ne
   17f2e:	f04f 0802 	movne.w	r8, #2
   17f32:	f04f 0803 	moveq.w	r8, #3
			    bt_conn_get_security(conn) < sec) {
   17f36:	f00d feb3 	bl	25ca0 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   17f3a:	4580      	cmp	r8, r0
   17f3c:	d905      	bls.n	17f4a <update_ccc+0x76>
				if (data->sec < sec) {
   17f3e:	7933      	ldrb	r3, [r6, #4]
   17f40:	4543      	cmp	r3, r8
   17f42:	d2ed      	bcs.n	17f20 <update_ccc+0x4c>
					data->sec = sec;
   17f44:	f886 8004 	strb.w	r8, [r6, #4]
   17f48:	e7ea      	b.n	17f20 <update_ccc+0x4c>
		gatt_ccc_changed(attr, ccc);
   17f4a:	4639      	mov	r1, r7
   17f4c:	4628      	mov	r0, r5
   17f4e:	f00d fef6 	bl	25d3e <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   17f52:	4b1f      	ldr	r3, [pc, #124]	; (17fd0 <update_ccc+0xfc>)
   17f54:	429f      	cmp	r7, r3
   17f56:	d1e3      	bne.n	17f20 <update_ccc+0x4c>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   17f58:	7a20      	ldrb	r0, [r4, #8]
   17f5a:	f104 0188 	add.w	r1, r4, #136	; 0x88
   17f5e:	f7ff f863 	bl	17028 <find_sc_cfg>
	if (!cfg) {
   17f62:	2800      	cmp	r0, #0
   17f64:	d0dc      	beq.n	17f20 <update_ccc+0x4c>
	if (!(cfg->data.start || cfg->data.end)) {
   17f66:	8902      	ldrh	r2, [r0, #8]
   17f68:	8943      	ldrh	r3, [r0, #10]
   17f6a:	ea52 0103 	orrs.w	r1, r2, r3
   17f6e:	d0d7      	beq.n	17f20 <update_ccc+0x4c>
	index = bt_conn_index(conn);
   17f70:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   17f72:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   17f76:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   17f7a:	f7fe fa53 	bl	16424 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   17f7e:	4915      	ldr	r1, [pc, #84]	; (17fd4 <update_ccc+0x100>)
   17f80:	4a15      	ldr	r2, [pc, #84]	; (17fd8 <update_ccc+0x104>)
   17f82:	2318      	movs	r3, #24
   17f84:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   17f88:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   17f8a:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   17f8c:	4a13      	ldr	r2, [pc, #76]	; (17fdc <update_ccc+0x108>)
   17f8e:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   17f90:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   17f92:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   17f96:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   17f98:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   17f9a:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   17f9e:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   17fa0:	4620      	mov	r0, r4
   17fa2:	f7ff fe19 	bl	17bd8 <bt_gatt_indicate>
   17fa6:	2800      	cmp	r0, #0
   17fa8:	d0ba      	beq.n	17f20 <update_ccc+0x4c>
   17faa:	4b07      	ldr	r3, [pc, #28]	; (17fc8 <update_ccc+0xf4>)
   17fac:	4905      	ldr	r1, [pc, #20]	; (17fc4 <update_ccc+0xf0>)
		BT_ERR("SC restore indication failed");
   17fae:	480c      	ldr	r0, [pc, #48]	; (17fe0 <update_ccc+0x10c>)
   17fb0:	1ac9      	subs	r1, r1, r3
   17fb2:	08c9      	lsrs	r1, r1, #3
   17fb4:	0189      	lsls	r1, r1, #6
   17fb6:	f041 0101 	orr.w	r1, r1, #1
   17fba:	f00b ff52 	bl	23e62 <log_0>
   17fbe:	e7af      	b.n	17f20 <update_ccc+0x4c>
   17fc0:	00016ee9 	.word	0x00016ee9
   17fc4:	00028e1c 	.word	0x00028e1c
   17fc8:	00028dd4 	.word	0x00028dd4
   17fcc:	0002af17 	.word	0x0002af17
   17fd0:	200005f8 	.word	0x200005f8
   17fd4:	20002480 	.word	0x20002480
   17fd8:	0002956c 	.word	0x0002956c
   17fdc:	00025f6b 	.word	0x00025f6b
   17fe0:	0002af2b 	.word	0x0002af2b

00017fe4 <bt_gatt_connected>:
{
   17fe4:	b570      	push	{r4, r5, r6, lr}
   17fe6:	b08e      	sub	sp, #56	; 0x38
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   17fe8:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
   17fec:	4604      	mov	r4, r0
	data.conn = conn;
   17fee:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
   17ff0:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   17ff2:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   17ff4:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   17ff8:	4629      	mov	r1, r5
   17ffa:	f00e fa38 	bl	2646e <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   17ffe:	b190      	cbz	r0, 18026 <bt_gatt_connected+0x42>
		if (conn->id) {
   18000:	7a22      	ldrb	r2, [r4, #8]
   18002:	b37a      	cbz	r2, 18064 <bt_gatt_connected+0x80>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   18004:	ae02      	add	r6, sp, #8
   18006:	2104      	movs	r1, #4
   18008:	4630      	mov	r0, r6
   1800a:	f00a fd44 	bl	22a96 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1800e:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   18010:	4a15      	ldr	r2, [pc, #84]	; (18068 <bt_gatt_connected+0x84>)
   18012:	2124      	movs	r1, #36	; 0x24
   18014:	a805      	add	r0, sp, #20
   18016:	462b      	mov	r3, r5
   18018:	f003 f8aa 	bl	1b170 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   1801c:	aa05      	add	r2, sp, #20
   1801e:	4913      	ldr	r1, [pc, #76]	; (1806c <bt_gatt_connected+0x88>)
   18020:	4610      	mov	r0, r2
   18022:	f7fb fbff 	bl	13824 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   18026:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1802a:	4a11      	ldr	r2, [pc, #68]	; (18070 <bt_gatt_connected+0x8c>)
   1802c:	ab03      	add	r3, sp, #12
   1802e:	2001      	movs	r0, #1
   18030:	f00e f8d6 	bl	261e0 <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
   18034:	4620      	mov	r0, r4
   18036:	f00d fe33 	bl	25ca0 <bt_conn_get_security>
   1803a:	f89d 1010 	ldrb.w	r1, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1803e:	4288      	cmp	r0, r1
   18040:	d20e      	bcs.n	18060 <bt_gatt_connected+0x7c>
		int err = bt_conn_set_security(conn, data.sec);
   18042:	4620      	mov	r0, r4
   18044:	f00d fdf9 	bl	25c3a <bt_conn_set_security>
		if (err) {
   18048:	4601      	mov	r1, r0
   1804a:	b148      	cbz	r0, 18060 <bt_gatt_connected+0x7c>
   1804c:	4a09      	ldr	r2, [pc, #36]	; (18074 <bt_gatt_connected+0x90>)
   1804e:	4b0a      	ldr	r3, [pc, #40]	; (18078 <bt_gatt_connected+0x94>)
			BT_WARN("Failed to set security for bonded peer (%d)",
   18050:	480a      	ldr	r0, [pc, #40]	; (1807c <bt_gatt_connected+0x98>)
   18052:	1ad2      	subs	r2, r2, r3
   18054:	08d2      	lsrs	r2, r2, #3
   18056:	0192      	lsls	r2, r2, #6
   18058:	f042 0202 	orr.w	r2, r2, #2
   1805c:	f00b ff0e 	bl	23e7c <log_1>
}
   18060:	b00e      	add	sp, #56	; 0x38
   18062:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   18064:	9200      	str	r2, [sp, #0]
   18066:	e7d3      	b.n	18010 <bt_gatt_connected+0x2c>
   18068:	0002aea1 	.word	0x0002aea1
   1806c:	0001799d 	.word	0x0001799d
   18070:	00017ed5 	.word	0x00017ed5
   18074:	00028e1c 	.word	0x00028e1c
   18078:	00028dd4 	.word	0x00028dd4
   1807c:	0002af48 	.word	0x0002af48

00018080 <bt_gatt_att_max_mtu_changed>:
{
   18080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   18082:	4b09      	ldr	r3, [pc, #36]	; (180a8 <bt_gatt_att_max_mtu_changed+0x28>)
   18084:	681c      	ldr	r4, [r3, #0]
{
   18086:	4605      	mov	r5, r0
   18088:	460e      	mov	r6, r1
   1808a:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1808c:	b10c      	cbz	r4, 18092 <bt_gatt_att_max_mtu_changed+0x12>
   1808e:	3c04      	subs	r4, #4
   18090:	b904      	cbnz	r4, 18094 <bt_gatt_att_max_mtu_changed+0x14>
}
   18092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->att_mtu_updated) {
   18094:	6823      	ldr	r3, [r4, #0]
   18096:	b11b      	cbz	r3, 180a0 <bt_gatt_att_max_mtu_changed+0x20>
			cb->att_mtu_updated(conn, tx, rx);
   18098:	463a      	mov	r2, r7
   1809a:	4631      	mov	r1, r6
   1809c:	4628      	mov	r0, r5
   1809e:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   180a0:	1d23      	adds	r3, r4, #4
   180a2:	d0f6      	beq.n	18092 <bt_gatt_att_max_mtu_changed+0x12>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   180a4:	6864      	ldr	r4, [r4, #4]
   180a6:	e7f1      	b.n	1808c <bt_gatt_att_max_mtu_changed+0xc>
   180a8:	20002454 	.word	0x20002454

000180ac <bt_gatt_encrypt_change>:
{
   180ac:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   180ae:	4a06      	ldr	r2, [pc, #24]	; (180c8 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
   180b0:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   180b2:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   180b4:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   180b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   180ba:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   180be:	f00e f88f 	bl	261e0 <bt_gatt_foreach_attr>
}
   180c2:	b003      	add	sp, #12
   180c4:	f85d fb04 	ldr.w	pc, [sp], #4
   180c8:	00017ed5 	.word	0x00017ed5

000180cc <db_hash_read>:
{
   180cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   180ce:	4914      	ldr	r1, [pc, #80]	; (18120 <db_hash_read+0x54>)
{
   180d0:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   180d4:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   180d6:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   180da:	461f      	mov	r7, r3
   180dc:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   180de:	f010 fbf6 	bl	288ce <k_work_cancel_delayable_sync>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   180e2:	4810      	ldr	r0, [pc, #64]	; (18124 <db_hash_read+0x58>)
   180e4:	f00d fe81 	bl	25dea <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   180e8:	0743      	lsls	r3, r0, #29
   180ea:	d402      	bmi.n	180f2 <db_hash_read+0x26>
		db_hash_gen(true);
   180ec:	2001      	movs	r0, #1
   180ee:	f7ff fba5 	bl	1783c <db_hash_gen>
	(void)bt_gatt_change_aware(conn, true);
   180f2:	2101      	movs	r1, #1
   180f4:	4620      	mov	r0, r4
   180f6:	f00e f8a9 	bl	2624c <bt_gatt_change_aware>
	if (offset > value_len) {
   180fa:	2e10      	cmp	r6, #16
   180fc:	d80c      	bhi.n	18118 <db_hash_read+0x4c>
	len = MIN(buf_len, value_len - offset);
   180fe:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   18102:	4909      	ldr	r1, [pc, #36]	; (18128 <db_hash_read+0x5c>)
	len = MIN(buf_len, value_len - offset);
   18104:	42bc      	cmp	r4, r7
   18106:	bfa8      	it	ge
   18108:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1810a:	4622      	mov	r2, r4
   1810c:	4431      	add	r1, r6
   1810e:	4628      	mov	r0, r5
   18110:	f00c feb6 	bl	24e80 <memcpy>
}
   18114:	4620      	mov	r0, r4
   18116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   18118:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1811c:	e7fa      	b.n	18114 <db_hash_read+0x48>
   1811e:	bf00      	nop
   18120:	20001940 	.word	0x20001940
   18124:	200019f0 	.word	0x200019f0
   18128:	200018f0 	.word	0x200018f0

0001812c <bt_gatt_store_ccc>:
{
   1812c:	b570      	push	{r4, r5, r6, lr}
   1812e:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
   18130:	2300      	movs	r3, #0
{
   18132:	4604      	mov	r4, r0
   18134:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   18136:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
   18138:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
   1813c:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   1813e:	4a18      	ldr	r2, [pc, #96]	; (181a0 <bt_gatt_store_ccc+0x74>)
   18140:	ab0d      	add	r3, sp, #52	; 0x34
   18142:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18146:	2001      	movs	r0, #1
   18148:	f00e f84a 	bl	261e0 <bt_gatt_foreach_attr>
	if (id) {
   1814c:	b31c      	cbz	r4, 18196 <bt_gatt_store_ccc+0x6a>
		u8_to_dec(id_str, sizeof(id_str), id);
   1814e:	ae03      	add	r6, sp, #12
   18150:	4622      	mov	r2, r4
   18152:	2104      	movs	r1, #4
   18154:	4630      	mov	r0, r6
   18156:	f00a fc9e 	bl	22a96 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   1815a:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1815c:	4a11      	ldr	r2, [pc, #68]	; (181a4 <bt_gatt_store_ccc+0x78>)
   1815e:	462b      	mov	r3, r5
   18160:	2124      	movs	r1, #36	; 0x24
   18162:	a804      	add	r0, sp, #16
   18164:	f003 f804 	bl	1b170 <bt_settings_encode_key>
	if (save.count) {
   18168:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
   1816a:	b1b2      	cbz	r2, 1819a <bt_gatt_store_ccc+0x6e>
		len = save.count * sizeof(*save.store);
   1816c:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   1816e:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
   18170:	a804      	add	r0, sp, #16
   18172:	f7fb faf3 	bl	1375c <settings_save_one>
	if (err) {
   18176:	4604      	mov	r4, r0
   18178:	b150      	cbz	r0, 18190 <bt_gatt_store_ccc+0x64>
   1817a:	4a0b      	ldr	r2, [pc, #44]	; (181a8 <bt_gatt_store_ccc+0x7c>)
   1817c:	4b0b      	ldr	r3, [pc, #44]	; (181ac <bt_gatt_store_ccc+0x80>)
   1817e:	1ad2      	subs	r2, r2, r3
   18180:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Failed to store CCCs (err %d)", err);
   18182:	0192      	lsls	r2, r2, #6
   18184:	4601      	mov	r1, r0
   18186:	f042 0201 	orr.w	r2, r2, #1
   1818a:	4809      	ldr	r0, [pc, #36]	; (181b0 <bt_gatt_store_ccc+0x84>)
   1818c:	f00b fe76 	bl	23e7c <log_1>
}
   18190:	4620      	mov	r0, r4
   18192:	b040      	add	sp, #256	; 0x100
   18194:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   18196:	9400      	str	r4, [sp, #0]
   18198:	e7e0      	b.n	1815c <bt_gatt_store_ccc+0x30>
		str = NULL;
   1819a:	4611      	mov	r1, r2
   1819c:	e7e8      	b.n	18170 <bt_gatt_store_ccc+0x44>
   1819e:	bf00      	nop
   181a0:	00016e89 	.word	0x00016e89
   181a4:	0002aea1 	.word	0x0002aea1
   181a8:	00028e1c 	.word	0x00028e1c
   181ac:	00028dd4 	.word	0x00028dd4
   181b0:	0002af74 	.word	0x0002af74

000181b4 <bt_gatt_clear>:
		gatt_sub_remove(NULL, sub, prev, params);
	}
}

int bt_gatt_clear(uint8_t id, const bt_addr_le_t *addr)
{
   181b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   181b6:	b08f      	sub	sp, #60	; 0x3c
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
   181b8:	ae03      	add	r6, sp, #12
{
   181ba:	4604      	mov	r4, r0
   181bc:	460d      	mov	r5, r1
	struct addr_with_id addr_with_id = {
   181be:	9103      	str	r1, [sp, #12]
   181c0:	f88d 0010 	strb.w	r0, [sp, #16]
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
   181c4:	4a1f      	ldr	r2, [pc, #124]	; (18244 <bt_gatt_clear+0x90>)
   181c6:	4633      	mov	r3, r6
   181c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   181cc:	2001      	movs	r0, #1
   181ce:	f00e f807 	bl	261e0 <bt_gatt_foreach_attr>
		if (id) {
   181d2:	b394      	cbz	r4, 1823a <bt_gatt_clear+0x86>
			u8_to_dec(id_str, sizeof(id_str), id);
   181d4:	af02      	add	r7, sp, #8
   181d6:	4622      	mov	r2, r4
   181d8:	2104      	movs	r1, #4
   181da:	4638      	mov	r0, r7
   181dc:	f00a fc5b 	bl	22a96 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   181e0:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   181e2:	4a19      	ldr	r2, [pc, #100]	; (18248 <bt_gatt_clear+0x94>)
   181e4:	462b      	mov	r3, r5
   181e6:	2124      	movs	r1, #36	; 0x24
   181e8:	a805      	add	r0, sp, #20
   181ea:	f002 ffc1 	bl	1b170 <bt_settings_encode_key>
		return settings_delete(key);
   181ee:	a805      	add	r0, sp, #20
   181f0:	f00c fdb4 	bl	24d5c <settings_delete>
	int err;

	err = bt_gatt_clear_ccc(id, addr);
	if (err < 0) {
   181f4:	2800      	cmp	r0, #0
   181f6:	db1e      	blt.n	18236 <bt_gatt_clear+0x82>
		return err;
	}

	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
		err = bt_gatt_clear_sc(id, addr);
   181f8:	4629      	mov	r1, r5
   181fa:	4620      	mov	r0, r4
   181fc:	f7ff f978 	bl	174f0 <bt_gatt_clear_sc>
		if (err < 0) {
   18200:	2800      	cmp	r0, #0
   18202:	db18      	blt.n	18236 <bt_gatt_clear+0x82>
	cfg = find_cf_cfg_by_addr(id, addr);
   18204:	4629      	mov	r1, r5
   18206:	4620      	mov	r0, r4
   18208:	f7ff f802 	bl	17210 <find_cf_cfg_by_addr>
	if (cfg) {
   1820c:	b108      	cbz	r0, 18212 <bt_gatt_clear+0x5e>
		clear_cf_cfg(cfg);
   1820e:	f00d fe66 	bl	25ede <clear_cf_cfg>
		if (id) {
   18212:	b1a4      	cbz	r4, 1823e <bt_gatt_clear+0x8a>
			u8_to_dec(id_str, sizeof(id_str), id);
   18214:	4622      	mov	r2, r4
   18216:	2104      	movs	r1, #4
   18218:	4630      	mov	r0, r6
   1821a:	f00a fc3c 	bl	22a96 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1821e:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "cf",
   18220:	4a0a      	ldr	r2, [pc, #40]	; (1824c <bt_gatt_clear+0x98>)
   18222:	462b      	mov	r3, r5
   18224:	2124      	movs	r1, #36	; 0x24
   18226:	a805      	add	r0, sp, #20
   18228:	f002 ffa2 	bl	1b170 <bt_settings_encode_key>
		return settings_delete(key);
   1822c:	a805      	add	r0, sp, #20
   1822e:	f00c fd95 	bl	24d5c <settings_delete>
		}
	}

	if (IS_ENABLED(CONFIG_BT_GATT_CACHING)) {
		err = bt_gatt_clear_cf(id, addr);
		if (err < 0) {
   18232:	ea00 70e0 	and.w	r0, r0, r0, asr #31
	if (IS_ENABLED(CONFIG_BT_GATT_CLIENT)) {
		bt_gatt_clear_subscriptions(id, addr);
	}

	return 0;
}
   18236:	b00f      	add	sp, #60	; 0x3c
   18238:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1823a:	9400      	str	r4, [sp, #0]
   1823c:	e7d1      	b.n	181e2 <bt_gatt_clear+0x2e>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1823e:	9400      	str	r4, [sp, #0]
   18240:	e7ee      	b.n	18220 <bt_gatt_clear+0x6c>
   18242:	bf00      	nop
   18244:	00016ec1 	.word	0x00016ec1
   18248:	0002aea1 	.word	0x0002aea1
   1824c:	0002afbe 	.word	0x0002afbe

00018250 <bt_gatt_disconnected>:

void bt_gatt_disconnected(struct bt_conn *conn)
{
   18250:	b5f0      	push	{r4, r5, r6, r7, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   18252:	4603      	mov	r3, r0
   18254:	4a41      	ldr	r2, [pc, #260]	; (1835c <bt_gatt_disconnected+0x10c>)
	if (gatt_ccc_store.conn_list[index] != NULL) {
   18256:	4e42      	ldr	r6, [pc, #264]	; (18360 <bt_gatt_disconnected+0x110>)
{
   18258:	b08d      	sub	sp, #52	; 0x34
   1825a:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1825c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18260:	2001      	movs	r0, #1
   18262:	f00d ffbd 	bl	261e0 <bt_gatt_foreach_attr>
	uint8_t index = bt_conn_index(conn);
   18266:	4620      	mov	r0, r4
   18268:	f7fe f8dc 	bl	16424 <bt_conn_index>
   1826c:	4605      	mov	r5, r0
	if (gatt_ccc_store.conn_list[index] != NULL) {
   1826e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
   18272:	b120      	cbz	r0, 1827e <bt_gatt_disconnected+0x2e>
		bt_conn_unref(gatt_ccc_store.conn_list[index]);
   18274:	f00d fc78 	bl	25b68 <bt_conn_unref>
		gatt_ccc_store.conn_list[index] = NULL;
   18278:	2300      	movs	r3, #0
   1827a:	f846 3025 	str.w	r3, [r6, r5, lsl #2]

#if defined(CONFIG_BT_SETTINGS_CCC_STORE_ON_WRITE)
	gatt_ccc_conn_unqueue(conn);

	if (gatt_ccc_conn_queue_is_empty()) {
		k_work_cancel_delayable(&gatt_ccc_store.work);
   1827e:	4839      	ldr	r0, [pc, #228]	; (18364 <bt_gatt_disconnected+0x114>)
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18280:	f104 0588 	add.w	r5, r4, #136	; 0x88
		k_work_cancel_delayable(&gatt_ccc_store.work);
   18284:	f010 fb0f 	bl	288a6 <k_work_cancel_delayable>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18288:	7a20      	ldrb	r0, [r4, #8]
   1828a:	4629      	mov	r1, r5
   1828c:	f00e f8ef 	bl	2646e <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   18290:	2800      	cmp	r0, #0
   18292:	d035      	beq.n	18300 <bt_gatt_disconnected+0xb0>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   18294:	4629      	mov	r1, r5
   18296:	7a20      	ldrb	r0, [r4, #8]
   18298:	f7ff ff48 	bl	1812c <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   1829c:	4620      	mov	r0, r4
   1829e:	f7fe ffd9 	bl	17254 <find_cf_cfg>
	if (!cfg) {
   182a2:	4606      	mov	r6, r0
   182a4:	2800      	cmp	r0, #0
   182a6:	d04a      	beq.n	1833e <bt_gatt_disconnected+0xee>
		if (conn->id) {
   182a8:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
   182aa:	3608      	adds	r6, #8
		if (conn->id) {
   182ac:	2a00      	cmp	r2, #0
   182ae:	d048      	beq.n	18342 <bt_gatt_disconnected+0xf2>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   182b0:	af02      	add	r7, sp, #8
   182b2:	2104      	movs	r1, #4
   182b4:	4638      	mov	r0, r7
   182b6:	f00a fbee 	bl	22a96 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   182ba:	9700      	str	r7, [sp, #0]
   182bc:	462b      	mov	r3, r5
   182be:	4a2a      	ldr	r2, [pc, #168]	; (18368 <bt_gatt_disconnected+0x118>)
   182c0:	2124      	movs	r1, #36	; 0x24
   182c2:	a803      	add	r0, sp, #12
   182c4:	f002 ff54 	bl	1b170 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   182c8:	7a23      	ldrb	r3, [r4, #8]
   182ca:	2701      	movs	r7, #1
   182cc:	b93b      	cbnz	r3, 182de <bt_gatt_disconnected+0x8e>
		bt_settings_encode_key(key, sizeof(key), "cf",
   182ce:	2300      	movs	r3, #0
   182d0:	9300      	str	r3, [sp, #0]
   182d2:	4a25      	ldr	r2, [pc, #148]	; (18368 <bt_gatt_disconnected+0x118>)
   182d4:	462b      	mov	r3, r5
   182d6:	2124      	movs	r1, #36	; 0x24
   182d8:	a803      	add	r0, sp, #12
   182da:	f002 ff49 	bl	1b170 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   182de:	4631      	mov	r1, r6
   182e0:	463a      	mov	r2, r7
   182e2:	a803      	add	r0, sp, #12
   182e4:	f7fb fa3a 	bl	1375c <settings_save_one>
	if (err) {
   182e8:	4601      	mov	r1, r0
   182ea:	b148      	cbz	r0, 18300 <bt_gatt_disconnected+0xb0>
   182ec:	4a1f      	ldr	r2, [pc, #124]	; (1836c <bt_gatt_disconnected+0x11c>)
   182ee:	4b20      	ldr	r3, [pc, #128]	; (18370 <bt_gatt_disconnected+0x120>)
		BT_ERR("Failed to store Client Features (err %d)", err);
   182f0:	4820      	ldr	r0, [pc, #128]	; (18374 <bt_gatt_disconnected+0x124>)
   182f2:	1ad2      	subs	r2, r2, r3
   182f4:	08d2      	lsrs	r2, r2, #3
   182f6:	0192      	lsls	r2, r2, #6
   182f8:	f042 0201 	orr.w	r2, r2, #1
   182fc:	f00b fdbe 	bl	23e7c <log_1>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18300:	7a20      	ldrb	r0, [r4, #8]
   18302:	4629      	mov	r1, r5
   18304:	f00e f8b3 	bl	2646e <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   18308:	b150      	cbz	r0, 18320 <bt_gatt_disconnected+0xd0>
		struct addr_with_id addr_with_id = {
   1830a:	7a23      	ldrb	r3, [r4, #8]
   1830c:	f88d 3010 	strb.w	r3, [sp, #16]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   18310:	4a19      	ldr	r2, [pc, #100]	; (18378 <bt_gatt_disconnected+0x128>)
		struct addr_with_id addr_with_id = {
   18312:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   18314:	ab03      	add	r3, sp, #12
   18316:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1831a:	2001      	movs	r0, #1
   1831c:	f00d ff60 	bl	261e0 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   18320:	4620      	mov	r0, r4
   18322:	f7fe ff97 	bl	17254 <find_cf_cfg>
	if (!cfg) {
   18326:	4606      	mov	r6, r0
   18328:	b138      	cbz	r0, 1833a <bt_gatt_disconnected+0xea>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1832a:	7a20      	ldrb	r0, [r4, #8]
   1832c:	4629      	mov	r1, r5
   1832e:	f00e f89e 	bl	2646e <bt_addr_le_is_bonded>
   18332:	b940      	cbnz	r0, 18346 <bt_gatt_disconnected+0xf6>
		clear_cf_cfg(cfg);
   18334:	4630      	mov	r0, r6
   18336:	f00d fdd2 	bl	25ede <clear_cf_cfg>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1833a:	b00d      	add	sp, #52	; 0x34
   1833c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = 0;
   1833e:	4607      	mov	r7, r0
   18340:	e7c5      	b.n	182ce <bt_gatt_disconnected+0x7e>
   18342:	2701      	movs	r7, #1
   18344:	e7c3      	b.n	182ce <bt_gatt_disconnected+0x7e>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   18346:	4629      	mov	r1, r5
   18348:	1c70      	adds	r0, r6, #1
   1834a:	f00d fd1b 	bl	25d84 <bt_addr_le_copy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1834e:	f06f 0102 	mvn.w	r1, #2
   18352:	f106 000c 	add.w	r0, r6, #12
   18356:	f00d fdb3 	bl	25ec0 <atomic_and>
}
   1835a:	e7ee      	b.n	1833a <bt_gatt_disconnected+0xea>
   1835c:	000175b9 	.word	0x000175b9
   18360:	20001968 	.word	0x20001968
   18364:	20001970 	.word	0x20001970
   18368:	0002afbe 	.word	0x0002afbe
   1836c:	00028e1c 	.word	0x00028e1c
   18370:	00028dd4 	.word	0x00028dd4
   18374:	0002af92 	.word	0x0002af92
   18378:	00016ec1 	.word	0x00016ec1

0001837c <ver_str>:
{
   1837c:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
   1837e:	4d0b      	ldr	r5, [pc, #44]	; (183ac <ver_str+0x30>)
{
   18380:	4606      	mov	r6, r0
	const char * const str[] = {
   18382:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   18384:	b08e      	sub	sp, #56	; 0x38
	const char * const str[] = {
   18386:	ac01      	add	r4, sp, #4
   18388:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1838a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1838c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1838e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   18390:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	if (ver < ARRAY_SIZE(str)) {
   18392:	2e0c      	cmp	r6, #12
	const char * const str[] = {
   18394:	682b      	ldr	r3, [r5, #0]
   18396:	6023      	str	r3, [r4, #0]
		return str[ver];
   18398:	bf9b      	ittet	ls
   1839a:	ab0e      	addls	r3, sp, #56	; 0x38
   1839c:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	return "unknown";
   183a0:	4803      	ldrhi	r0, [pc, #12]	; (183b0 <ver_str+0x34>)
		return str[ver];
   183a2:	f856 0c34 	ldrls.w	r0, [r6, #-52]
}
   183a6:	b00e      	add	sp, #56	; 0x38
   183a8:	bd70      	pop	{r4, r5, r6, pc}
   183aa:	bf00      	nop
   183ac:	00028ff0 	.word	0x00028ff0
   183b0:	0002b0be 	.word	0x0002b0be

000183b4 <hci_data_buf_overflow>:
   183b4:	4905      	ldr	r1, [pc, #20]	; (183cc <hci_data_buf_overflow+0x18>)
   183b6:	4a06      	ldr	r2, [pc, #24]	; (183d0 <hci_data_buf_overflow+0x1c>)
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
   183b8:	6883      	ldr	r3, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   183ba:	4806      	ldr	r0, [pc, #24]	; (183d4 <hci_data_buf_overflow+0x20>)
   183bc:	1a52      	subs	r2, r2, r1
   183be:	08d2      	lsrs	r2, r2, #3
   183c0:	0192      	lsls	r2, r2, #6
   183c2:	7819      	ldrb	r1, [r3, #0]
   183c4:	f042 0202 	orr.w	r2, r2, #2
   183c8:	f00b bd58 	b.w	23e7c <log_1>
   183cc:	00028dd4 	.word	0x00028dd4
   183d0:	00028e24 	.word	0x00028e24
   183d4:	0002b0c6 	.word	0x0002b0c6

000183d8 <unpair>:
{
   183d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   183dc:	4606      	mov	r6, r0
   183de:	460f      	mov	r7, r1
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, addr);
   183e0:	f7fe f954 	bl	1668c <bt_conn_lookup_addr_le>
	if (conn) {
   183e4:	4604      	mov	r4, r0
   183e6:	b9b0      	cbnz	r0, 18416 <unpair+0x3e>
			keys = bt_keys_find_addr(id, addr);
   183e8:	4639      	mov	r1, r7
   183ea:	4630      	mov	r0, r6
   183ec:	f002 faee 	bl	1a9cc <bt_keys_find_addr>
		if (keys) {
   183f0:	4605      	mov	r5, r0
   183f2:	b110      	cbz	r0, 183fa <unpair+0x22>
			bt_keys_clear(keys);
   183f4:	4628      	mov	r0, r5
   183f6:	f002 faf9 	bl	1a9ec <bt_keys_clear>
	bt_gatt_clear(id, addr);
   183fa:	4639      	mov	r1, r7
   183fc:	4630      	mov	r0, r6
   183fe:	f7ff fed9 	bl	181b4 <bt_gatt_clear>
	if (bt_auth && bt_auth->bond_deleted) {
   18402:	4b10      	ldr	r3, [pc, #64]	; (18444 <unpair+0x6c>)
   18404:	681b      	ldr	r3, [r3, #0]
   18406:	b1db      	cbz	r3, 18440 <unpair+0x68>
   18408:	6a1b      	ldr	r3, [r3, #32]
   1840a:	b1cb      	cbz	r3, 18440 <unpair+0x68>
		bt_auth->bond_deleted(id, addr);
   1840c:	4639      	mov	r1, r7
   1840e:	4630      	mov	r0, r6
}
   18410:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_auth->bond_deleted(id, addr);
   18414:	4718      	bx	r3
		if (conn->type == BT_CONN_TYPE_LE) {
   18416:	7883      	ldrb	r3, [r0, #2]
   18418:	2b01      	cmp	r3, #1
   1841a:	f04f 0300 	mov.w	r3, #0
			keys = conn->le.keys;
   1841e:	bf04      	itt	eq
   18420:	f8d0 50b4 	ldreq.w	r5, [r0, #180]	; 0xb4
			conn->le.keys = NULL;
   18424:	f8c0 30b4 	streq.w	r3, [r0, #180]	; 0xb4
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   18428:	f04f 0113 	mov.w	r1, #19
	struct bt_keys *keys = NULL;
   1842c:	bf18      	it	ne
   1842e:	461d      	movne	r5, r3
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   18430:	f00d fbdf 	bl	25bf2 <bt_conn_disconnect>
		bt_conn_unref(conn);
   18434:	4620      	mov	r0, r4
   18436:	f00d fb97 	bl	25b68 <bt_conn_unref>
		if (!keys) {
   1843a:	2d00      	cmp	r5, #0
   1843c:	d1da      	bne.n	183f4 <unpair+0x1c>
   1843e:	e7d3      	b.n	183e8 <unpair+0x10>
}
   18440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18444:	20002410 	.word	0x20002410

00018448 <hci_disconn_complete_prio>:
{
   18448:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1844a:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
   1844c:	781a      	ldrb	r2, [r3, #0]
   1844e:	b972      	cbnz	r2, 1846e <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   18450:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   18454:	4620      	mov	r0, r4
   18456:	f7fd fef3 	bl	16240 <bt_conn_lookup_handle>
	if (!conn) {
   1845a:	4605      	mov	r5, r0
   1845c:	b940      	cbnz	r0, 18470 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   1845e:	4b08      	ldr	r3, [pc, #32]	; (18480 <hci_disconn_complete_prio+0x38>)
   18460:	881a      	ldrh	r2, [r3, #0]
   18462:	b922      	cbnz	r2, 1846e <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   18464:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   18468:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   1846c:	8018      	strh	r0, [r3, #0]
}
   1846e:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   18470:	2101      	movs	r1, #1
   18472:	f7fd fef1 	bl	16258 <bt_conn_set_state>
	bt_conn_unref(conn);
   18476:	4628      	mov	r0, r5
}
   18478:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1847c:	f00d bb74 	b.w	25b68 <bt_conn_unref>
   18480:	2000282a 	.word	0x2000282a

00018484 <hci_disconn_complete>:
{
   18484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   18486:	6885      	ldr	r5, [r0, #8]
	if (evt->status) {
   18488:	782e      	ldrb	r6, [r5, #0]
   1848a:	b9ee      	cbnz	r6, 184c8 <hci_disconn_complete+0x44>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1848c:	f8b5 7001 	ldrh.w	r7, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   18490:	4638      	mov	r0, r7
   18492:	f7fd fed5 	bl	16240 <bt_conn_lookup_handle>
	if (!conn) {
   18496:	4604      	mov	r4, r0
   18498:	b960      	cbnz	r0, 184b4 <hci_disconn_complete+0x30>
   1849a:	4b0c      	ldr	r3, [pc, #48]	; (184cc <hci_disconn_complete+0x48>)
   1849c:	4a0c      	ldr	r2, [pc, #48]	; (184d0 <hci_disconn_complete+0x4c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
   1849e:	480d      	ldr	r0, [pc, #52]	; (184d4 <hci_disconn_complete+0x50>)
   184a0:	1ad2      	subs	r2, r2, r3
   184a2:	08d2      	lsrs	r2, r2, #3
   184a4:	0192      	lsls	r2, r2, #6
   184a6:	4639      	mov	r1, r7
   184a8:	f042 0201 	orr.w	r2, r2, #1
}
   184ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   184b0:	f00b bce4 	b.w	23e7c <log_1>
	conn->err = evt->reason;
   184b4:	78eb      	ldrb	r3, [r5, #3]
   184b6:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   184b8:	4631      	mov	r1, r6
   184ba:	f7fd fecd 	bl	16258 <bt_conn_set_state>
		bt_conn_unref(conn);
   184be:	4620      	mov	r0, r4
}
   184c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   184c4:	f00d bb50 	b.w	25b68 <bt_conn_unref>
}
   184c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   184ca:	bf00      	nop
   184cc:	00028dd4 	.word	0x00028dd4
   184d0:	00028e24 	.word	0x00028e24
   184d4:	0002b0ee 	.word	0x0002b0ee

000184d8 <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   184d8:	6883      	ldr	r3, [r0, #8]
{
   184da:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   184dc:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   184de:	4620      	mov	r0, r4
   184e0:	f7fd feae 	bl	16240 <bt_conn_lookup_handle>
	if (!conn) {
   184e4:	b960      	cbnz	r0, 18500 <le_data_len_change+0x28>
   184e6:	4a08      	ldr	r2, [pc, #32]	; (18508 <le_data_len_change+0x30>)
   184e8:	4b08      	ldr	r3, [pc, #32]	; (1850c <le_data_len_change+0x34>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   184ea:	4809      	ldr	r0, [pc, #36]	; (18510 <le_data_len_change+0x38>)
   184ec:	1ad2      	subs	r2, r2, r3
   184ee:	08d2      	lsrs	r2, r2, #3
   184f0:	0192      	lsls	r2, r2, #6
   184f2:	4621      	mov	r1, r4
   184f4:	f042 0201 	orr.w	r2, r2, #1
}
   184f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   184fc:	f00b bcbe 	b.w	23e7c <log_1>
}
   18500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   18504:	f00d bb30 	b.w	25b68 <bt_conn_unref>
   18508:	00028e24 	.word	0x00028e24
   1850c:	00028dd4 	.word	0x00028dd4
   18510:	0002b114 	.word	0x0002b114

00018514 <hci_hardware_error>:
{
   18514:	b508      	push	{r3, lr}
	return net_buf_simple_pull_mem(&buf->b, len);
   18516:	2101      	movs	r1, #1
   18518:	3008      	adds	r0, #8
   1851a:	f00e fe94 	bl	27246 <net_buf_simple_pull_mem>
   1851e:	4b06      	ldr	r3, [pc, #24]	; (18538 <hci_hardware_error+0x24>)
   18520:	4a06      	ldr	r2, [pc, #24]	; (1853c <hci_hardware_error+0x28>)
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   18522:	7801      	ldrb	r1, [r0, #0]
   18524:	4806      	ldr	r0, [pc, #24]	; (18540 <hci_hardware_error+0x2c>)
   18526:	1ad2      	subs	r2, r2, r3
   18528:	08d2      	lsrs	r2, r2, #3
   1852a:	0192      	lsls	r2, r2, #6
}
   1852c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   18530:	f042 0201 	orr.w	r2, r2, #1
   18534:	f00b bca2 	b.w	23e7c <log_1>
   18538:	00028dd4 	.word	0x00028dd4
   1853c:	00028e24 	.word	0x00028e24
   18540:	0002b138 	.word	0x0002b138

00018544 <hci_vendor_event>:
{
   18544:	b510      	push	{r4, lr}
   18546:	4a0a      	ldr	r2, [pc, #40]	; (18570 <hci_vendor_event+0x2c>)
   18548:	4c0a      	ldr	r4, [pc, #40]	; (18574 <hci_vendor_event+0x30>)
		BT_WARN("Unhandled vendor-specific event: %s",
   1854a:	8981      	ldrh	r1, [r0, #12]
   1854c:	6880      	ldr	r0, [r0, #8]
   1854e:	1aa4      	subs	r4, r4, r2
   18550:	f7fb ff62 	bl	14418 <bt_hex_real>
   18554:	f7f9 fcf8 	bl	11f48 <z_log_strdup>
   18558:	08e4      	lsrs	r4, r4, #3
   1855a:	01a4      	lsls	r4, r4, #6
   1855c:	f044 0402 	orr.w	r4, r4, #2
   18560:	4601      	mov	r1, r0
   18562:	4622      	mov	r2, r4
   18564:	4804      	ldr	r0, [pc, #16]	; (18578 <hci_vendor_event+0x34>)
}
   18566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
   1856a:	f00b bc87 	b.w	23e7c <log_1>
   1856e:	bf00      	nop
   18570:	00028dd4 	.word	0x00028dd4
   18574:	00028e24 	.word	0x00028e24
   18578:	0002b15a 	.word	0x0002b15a

0001857c <hci_encrypt_key_refresh_complete>:
{
   1857c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   1857e:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   18580:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
   18584:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   18586:	4630      	mov	r0, r6
   18588:	f7fd fe5a 	bl	16240 <bt_conn_lookup_handle>
	if (!conn) {
   1858c:	4604      	mov	r4, r0
   1858e:	b960      	cbnz	r0, 185aa <hci_encrypt_key_refresh_complete+0x2e>
   18590:	4a1e      	ldr	r2, [pc, #120]	; (1860c <hci_encrypt_key_refresh_complete+0x90>)
   18592:	4b1f      	ldr	r3, [pc, #124]	; (18610 <hci_encrypt_key_refresh_complete+0x94>)
		BT_ERR("Unable to look up conn with handle %u", handle);
   18594:	481f      	ldr	r0, [pc, #124]	; (18614 <hci_encrypt_key_refresh_complete+0x98>)
   18596:	1ad2      	subs	r2, r2, r3
   18598:	08d2      	lsrs	r2, r2, #3
   1859a:	0192      	lsls	r2, r2, #6
   1859c:	4631      	mov	r1, r6
   1859e:	f042 0201 	orr.w	r2, r2, #1
}
   185a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   185a6:	f00b bc69 	b.w	23e7c <log_1>
	if (status) {
   185aa:	b165      	cbz	r5, 185c6 <hci_encrypt_key_refresh_complete+0x4a>
	switch (hci_err) {
   185ac:	2d29      	cmp	r5, #41	; 0x29
   185ae:	bf96      	itet	ls
   185b0:	4b19      	ldrls	r3, [pc, #100]	; (18618 <hci_encrypt_key_refresh_complete+0x9c>)
	if (status) {
   185b2:	2209      	movhi	r2, #9
   185b4:	5d5a      	ldrbls	r2, [r3, r5]
		bt_conn_security_changed(conn, status,
   185b6:	4629      	mov	r1, r5
   185b8:	f7fe f818 	bl	165ec <bt_conn_security_changed>
	bt_conn_unref(conn);
   185bc:	4620      	mov	r0, r4
}
   185be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   185c2:	f00d bad1 	b.w	25b68 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   185c6:	7883      	ldrb	r3, [r0, #2]
   185c8:	2b01      	cmp	r3, #1
   185ca:	d107      	bne.n	185dc <hci_encrypt_key_refresh_complete+0x60>
		bt_smp_update_keys(conn);
   185cc:	f004 fb8e 	bl	1ccec <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   185d0:	4620      	mov	r0, r4
   185d2:	f00d fe8d 	bl	262f0 <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   185d6:	2800      	cmp	r0, #0
   185d8:	bf08      	it	eq
   185da:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   185dc:	4b0e      	ldr	r3, [pc, #56]	; (18618 <hci_encrypt_key_refresh_complete+0x9c>)
   185de:	4629      	mov	r1, r5
   185e0:	5d5a      	ldrb	r2, [r3, r5]
   185e2:	4620      	mov	r0, r4
   185e4:	f7fe f802 	bl	165ec <bt_conn_security_changed>
	if (status) {
   185e8:	2d00      	cmp	r5, #0
   185ea:	d0e7      	beq.n	185bc <hci_encrypt_key_refresh_complete+0x40>
   185ec:	4b08      	ldr	r3, [pc, #32]	; (18610 <hci_encrypt_key_refresh_complete+0x94>)
   185ee:	4907      	ldr	r1, [pc, #28]	; (1860c <hci_encrypt_key_refresh_complete+0x90>)
		BT_ERR("Failed to set required security level");
   185f0:	480a      	ldr	r0, [pc, #40]	; (1861c <hci_encrypt_key_refresh_complete+0xa0>)
   185f2:	1ac9      	subs	r1, r1, r3
   185f4:	08c9      	lsrs	r1, r1, #3
   185f6:	0189      	lsls	r1, r1, #6
   185f8:	f041 0101 	orr.w	r1, r1, #1
   185fc:	f00b fc31 	bl	23e62 <log_0>
		bt_conn_disconnect(conn, status);
   18600:	4629      	mov	r1, r5
   18602:	4620      	mov	r0, r4
   18604:	f00d faf5 	bl	25bf2 <bt_conn_disconnect>
   18608:	e7d8      	b.n	185bc <hci_encrypt_key_refresh_complete+0x40>
   1860a:	bf00      	nop
   1860c:	00028e24 	.word	0x00028e24
   18610:	00028dd4 	.word	0x00028dd4
   18614:	0002b0ee 	.word	0x0002b0ee
   18618:	0002b712 	.word	0x0002b712
   1861c:	0002b17e 	.word	0x0002b17e

00018620 <hci_encrypt_change>:
{
   18620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   18622:	6886      	ldr	r6, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   18624:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
   18628:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   1862a:	4638      	mov	r0, r7
   1862c:	f7fd fe08 	bl	16240 <bt_conn_lookup_handle>
	if (!conn) {
   18630:	4604      	mov	r4, r0
   18632:	b960      	cbnz	r0, 1864e <hci_encrypt_change+0x2e>
   18634:	4b1f      	ldr	r3, [pc, #124]	; (186b4 <hci_encrypt_change+0x94>)
   18636:	4a20      	ldr	r2, [pc, #128]	; (186b8 <hci_encrypt_change+0x98>)
		BT_ERR("Unable to look up conn with handle %u", handle);
   18638:	4820      	ldr	r0, [pc, #128]	; (186bc <hci_encrypt_change+0x9c>)
   1863a:	1ad2      	subs	r2, r2, r3
   1863c:	08d2      	lsrs	r2, r2, #3
   1863e:	0192      	lsls	r2, r2, #6
   18640:	4639      	mov	r1, r7
   18642:	f042 0201 	orr.w	r2, r2, #1
}
   18646:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   1864a:	f00b bc17 	b.w	23e7c <log_1>
	if (status) {
   1864e:	b165      	cbz	r5, 1866a <hci_encrypt_change+0x4a>
	switch (hci_err) {
   18650:	2d29      	cmp	r5, #41	; 0x29
   18652:	bf96      	itet	ls
   18654:	4b1a      	ldrls	r3, [pc, #104]	; (186c0 <hci_encrypt_change+0xa0>)
	if (status) {
   18656:	2209      	movhi	r2, #9
   18658:	5d5a      	ldrbls	r2, [r3, r5]
		bt_conn_security_changed(conn, status,
   1865a:	4629      	mov	r1, r5
   1865c:	f7fd ffc6 	bl	165ec <bt_conn_security_changed>
	bt_conn_unref(conn);
   18660:	4620      	mov	r0, r4
}
   18662:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   18666:	f00d ba7f 	b.w	25b68 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   1866a:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   1866c:	78f3      	ldrb	r3, [r6, #3]
   1866e:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   18670:	2a01      	cmp	r2, #1
   18672:	d108      	bne.n	18686 <hci_encrypt_change+0x66>
		if (conn->encrypt) {
   18674:	b10b      	cbz	r3, 1867a <hci_encrypt_change+0x5a>
			bt_smp_update_keys(conn);
   18676:	f004 fb39 	bl	1ccec <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   1867a:	4620      	mov	r0, r4
   1867c:	f00d fe38 	bl	262f0 <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   18680:	2800      	cmp	r0, #0
   18682:	bf08      	it	eq
   18684:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   18686:	4b0e      	ldr	r3, [pc, #56]	; (186c0 <hci_encrypt_change+0xa0>)
   18688:	4629      	mov	r1, r5
   1868a:	5d5a      	ldrb	r2, [r3, r5]
   1868c:	4620      	mov	r0, r4
   1868e:	f7fd ffad 	bl	165ec <bt_conn_security_changed>
	if (status) {
   18692:	2d00      	cmp	r5, #0
   18694:	d0e4      	beq.n	18660 <hci_encrypt_change+0x40>
   18696:	4b07      	ldr	r3, [pc, #28]	; (186b4 <hci_encrypt_change+0x94>)
   18698:	4907      	ldr	r1, [pc, #28]	; (186b8 <hci_encrypt_change+0x98>)
		BT_ERR("Failed to set required security level");
   1869a:	480a      	ldr	r0, [pc, #40]	; (186c4 <hci_encrypt_change+0xa4>)
   1869c:	1ac9      	subs	r1, r1, r3
   1869e:	08c9      	lsrs	r1, r1, #3
   186a0:	0189      	lsls	r1, r1, #6
   186a2:	f041 0101 	orr.w	r1, r1, #1
   186a6:	f00b fbdc 	bl	23e62 <log_0>
		bt_conn_disconnect(conn, status);
   186aa:	4629      	mov	r1, r5
   186ac:	4620      	mov	r0, r4
   186ae:	f00d faa0 	bl	25bf2 <bt_conn_disconnect>
   186b2:	e7d5      	b.n	18660 <hci_encrypt_change+0x40>
   186b4:	00028dd4 	.word	0x00028dd4
   186b8:	00028e24 	.word	0x00028e24
   186bc:	0002b0ee 	.word	0x0002b0ee
   186c0:	0002b712 	.word	0x0002b712
   186c4:	0002b17e 	.word	0x0002b17e

000186c8 <le_conn_update_complete>:
{
   186c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   186ca:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   186cc:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   186d0:	4630      	mov	r0, r6
   186d2:	f7fd fdb5 	bl	16240 <bt_conn_lookup_handle>
	if (!conn) {
   186d6:	4604      	mov	r4, r0
   186d8:	b960      	cbnz	r0, 186f4 <le_conn_update_complete+0x2c>
   186da:	4a1f      	ldr	r2, [pc, #124]	; (18758 <le_conn_update_complete+0x90>)
   186dc:	4b1f      	ldr	r3, [pc, #124]	; (1875c <le_conn_update_complete+0x94>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   186de:	4820      	ldr	r0, [pc, #128]	; (18760 <le_conn_update_complete+0x98>)
   186e0:	1ad2      	subs	r2, r2, r3
   186e2:	08d2      	lsrs	r2, r2, #3
   186e4:	0192      	lsls	r2, r2, #6
   186e6:	f042 0201 	orr.w	r2, r2, #1
   186ea:	4631      	mov	r1, r6
   186ec:	f00b fbc6 	bl	23e7c <log_1>
}
   186f0:	b002      	add	sp, #8
   186f2:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
   186f4:	782b      	ldrb	r3, [r5, #0]
   186f6:	b9bb      	cbnz	r3, 18728 <le_conn_update_complete+0x60>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   186f8:	792a      	ldrb	r2, [r5, #4]
   186fa:	78eb      	ldrb	r3, [r5, #3]
   186fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   18700:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   18704:	79aa      	ldrb	r2, [r5, #6]
   18706:	796b      	ldrb	r3, [r5, #5]
   18708:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1870c:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   18710:	79eb      	ldrb	r3, [r5, #7]
   18712:	7a2a      	ldrb	r2, [r5, #8]
   18714:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   18718:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   1871c:	f7fd feb2 	bl	16484 <notify_le_param_updated>
	bt_conn_unref(conn);
   18720:	4620      	mov	r0, r4
   18722:	f00d fa21 	bl	25b68 <bt_conn_unref>
   18726:	e7e3      	b.n	186f0 <le_conn_update_complete+0x28>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   18728:	2b1a      	cmp	r3, #26
   1872a:	d1f9      	bne.n	18720 <le_conn_update_complete+0x58>
   1872c:	78c3      	ldrb	r3, [r0, #3]
   1872e:	2b01      	cmp	r3, #1
   18730:	d1f6      	bne.n	18720 <le_conn_update_complete+0x58>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   18732:	f44f 6180 	mov.w	r1, #1024	; 0x400
   18736:	3004      	adds	r0, #4
   18738:	f00d fdf2 	bl	26320 <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   1873c:	0543      	lsls	r3, r0, #21
   1873e:	d4ef      	bmi.n	18720 <le_conn_update_complete+0x58>
		param.interval_min = conn->le.interval_min;
   18740:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   18744:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   18746:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   18748:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1874c:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   1874e:	4620      	mov	r0, r4
   18750:	f002 fbf8 	bl	1af44 <bt_l2cap_update_conn_param>
   18754:	e7e4      	b.n	18720 <le_conn_update_complete+0x58>
   18756:	bf00      	nop
   18758:	00028e24 	.word	0x00028e24
   1875c:	00028dd4 	.word	0x00028dd4
   18760:	0002b114 	.word	0x0002b114

00018764 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   18764:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   18766:	4c0c      	ldr	r4, [pc, #48]	; (18798 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   18768:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   1876a:	2205      	movs	r2, #5
   1876c:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   18770:	f7fd ffd0 	bl	16714 <bt_conn_lookup_state_le>
		if (!conn) {
   18774:	b970      	cbnz	r0, 18794 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
   18776:	4b09      	ldr	r3, [pc, #36]	; (1879c <find_pending_connect.part.0+0x38>)
   18778:	6818      	ldr	r0, [r3, #0]
   1877a:	889a      	ldrh	r2, [r3, #4]
   1877c:	9000      	str	r0, [sp, #0]
   1877e:	799b      	ldrb	r3, [r3, #6]
   18780:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   18784:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
						       BT_ADDR_LE_NONE,
   18788:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   1878c:	2204      	movs	r2, #4
   1878e:	4669      	mov	r1, sp
   18790:	f7fd ffc0 	bl	16714 <bt_conn_lookup_state_le>
}
   18794:	b002      	add	sp, #8
   18796:	bd10      	pop	{r4, pc}
   18798:	200002b0 	.word	0x200002b0
   1879c:	00029024 	.word	0x00029024

000187a0 <hci_cmd_done>:
{
   187a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   187a4:	4606      	mov	r6, r0
   187a6:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   187a8:	7990      	ldrb	r0, [r2, #6]
   187aa:	f8df 8128 	ldr.w	r8, [pc, #296]	; 188d4 <hci_cmd_done+0x134>
{
   187ae:	460f      	mov	r7, r1
   187b0:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   187b2:	f004 fbd5 	bl	1cf60 <net_buf_pool_get>
   187b6:	4580      	cmp	r8, r0
   187b8:	d016      	beq.n	187e8 <hci_cmd_done+0x48>
   187ba:	4b41      	ldr	r3, [pc, #260]	; (188c0 <hci_cmd_done+0x120>)
   187bc:	4d41      	ldr	r5, [pc, #260]	; (188c4 <hci_cmd_done+0x124>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   187be:	79a0      	ldrb	r0, [r4, #6]
   187c0:	9600      	str	r6, [sp, #0]
   187c2:	1aed      	subs	r5, r5, r3
   187c4:	08ed      	lsrs	r5, r5, #3
   187c6:	9001      	str	r0, [sp, #4]
   187c8:	f004 fbca 	bl	1cf60 <net_buf_pool_get>
   187cc:	01ad      	lsls	r5, r5, #6
   187ce:	f045 0502 	orr.w	r5, r5, #2
   187d2:	e9cd 0802 	strd	r0, r8, [sp, #8]
   187d6:	462b      	mov	r3, r5
   187d8:	483b      	ldr	r0, [pc, #236]	; (188c8 <hci_cmd_done+0x128>)
   187da:	2204      	movs	r2, #4
   187dc:	4669      	mov	r1, sp
   187de:	f00b fb96 	bl	23f0e <log_n>
}
   187e2:	b005      	add	sp, #20
   187e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   187e8:	4620      	mov	r0, r4
   187ea:	f004 fbc1 	bl	1cf70 <net_buf_id>
   187ee:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 188d8 <hci_cmd_done+0x138>
   187f2:	f04f 090c 	mov.w	r9, #12
   187f6:	fb09 8000 	mla	r0, r9, r0, r8
   187fa:	4645      	mov	r5, r8
   187fc:	8843      	ldrh	r3, [r0, #2]
   187fe:	42b3      	cmp	r3, r6
   18800:	d012      	beq.n	18828 <hci_cmd_done+0x88>
   18802:	4b2f      	ldr	r3, [pc, #188]	; (188c0 <hci_cmd_done+0x120>)
   18804:	4d2f      	ldr	r5, [pc, #188]	; (188c4 <hci_cmd_done+0x124>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   18806:	4620      	mov	r0, r4
   18808:	1aed      	subs	r5, r5, r3
   1880a:	f004 fbb1 	bl	1cf70 <net_buf_id>
   1880e:	08ed      	lsrs	r5, r5, #3
   18810:	fb09 8000 	mla	r0, r9, r0, r8
   18814:	01ad      	lsls	r5, r5, #6
   18816:	f045 0502 	orr.w	r5, r5, #2
   1881a:	8842      	ldrh	r2, [r0, #2]
   1881c:	482b      	ldr	r0, [pc, #172]	; (188cc <hci_cmd_done+0x12c>)
   1881e:	462b      	mov	r3, r5
   18820:	4631      	mov	r1, r6
   18822:	f00b fb3f 	bl	23ea4 <log_2>
		return;
   18826:	e7dc      	b.n	187e2 <hci_cmd_done+0x42>
	if (bt_dev.sent_cmd) {
   18828:	4e29      	ldr	r6, [pc, #164]	; (188d0 <hci_cmd_done+0x130>)
   1882a:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   1882e:	b120      	cbz	r0, 1883a <hci_cmd_done+0x9a>
		net_buf_unref(bt_dev.sent_cmd);
   18830:	f004 fc56 	bl	1d0e0 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   18834:	2300      	movs	r3, #0
   18836:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   1883a:	4620      	mov	r0, r4
   1883c:	f004 fb98 	bl	1cf70 <net_buf_id>
   18840:	260c      	movs	r6, #12
   18842:	fb06 5000 	mla	r0, r6, r0, r5
   18846:	6843      	ldr	r3, [r0, #4]
   18848:	b1a3      	cbz	r3, 18874 <hci_cmd_done+0xd4>
   1884a:	b99f      	cbnz	r7, 18874 <hci_cmd_done+0xd4>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   1884c:	4620      	mov	r0, r4
   1884e:	f004 fb8f 	bl	1cf70 <net_buf_id>
   18852:	fb06 5000 	mla	r0, r6, r0, r5
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   18856:	2301      	movs	r3, #1
   18858:	6846      	ldr	r6, [r0, #4]
   1885a:	e9d6 2000 	ldrd	r2, r0, [r6]
   1885e:	f000 011f 	and.w	r1, r0, #31
   18862:	fa03 f101 	lsl.w	r1, r3, r1

	if (val) {
   18866:	7a33      	ldrb	r3, [r6, #8]
   18868:	0940      	lsrs	r0, r0, #5
   1886a:	b1d3      	cbz	r3, 188a2 <hci_cmd_done+0x102>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1886c:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   18870:	f00d fd56 	bl	26320 <atomic_or>
	if (cmd(buf)->sync) {
   18874:	4620      	mov	r0, r4
   18876:	f004 fb7b 	bl	1cf70 <net_buf_id>
   1887a:	260c      	movs	r6, #12
   1887c:	fb06 5000 	mla	r0, r6, r0, r5
   18880:	6883      	ldr	r3, [r0, #8]
   18882:	2b00      	cmp	r3, #0
   18884:	d0ad      	beq.n	187e2 <hci_cmd_done+0x42>
		cmd(buf)->status = status;
   18886:	4620      	mov	r0, r4
   18888:	f004 fb72 	bl	1cf70 <net_buf_id>
   1888c:	4370      	muls	r0, r6
   1888e:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   18890:	4620      	mov	r0, r4
   18892:	f004 fb6d 	bl	1cf70 <net_buf_id>
   18896:	fb06 5500 	mla	r5, r6, r0, r5
   1889a:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   1889c:	f009 f930 	bl	21b00 <z_impl_k_sem_give>
}
   188a0:	e79f      	b.n	187e2 <hci_cmd_done+0x42>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   188a2:	43cb      	mvns	r3, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   188a4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   188a8:	f3bf 8f5b 	dmb	ish
   188ac:	e852 1f00 	ldrex	r1, [r2]
   188b0:	4019      	ands	r1, r3
   188b2:	e842 1000 	strex	r0, r1, [r2]
   188b6:	2800      	cmp	r0, #0
   188b8:	d1f8      	bne.n	188ac <hci_cmd_done+0x10c>
   188ba:	f3bf 8f5b 	dmb	ish
   188be:	e7d9      	b.n	18874 <hci_cmd_done+0xd4>
   188c0:	00028dd4 	.word	0x00028dd4
   188c4:	00028e24 	.word	0x00028e24
   188c8:	0002b1a4 	.word	0x0002b1a4
   188cc:	0002b1d9 	.word	0x0002b1d9
   188d0:	200002b0 	.word	0x200002b0
   188d4:	20000ab4 	.word	0x20000ab4
   188d8:	2000249c 	.word	0x2000249c

000188dc <handle_event>:
{
   188dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   188de:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   188e2:	4605      	mov	r5, r0
   188e4:	4608      	mov	r0, r1
		if (handler->event != event) {
   188e6:	7811      	ldrb	r1, [r2, #0]
   188e8:	42a9      	cmp	r1, r5
   188ea:	d01a      	beq.n	18922 <handle_event+0x46>
	for (i = 0; i < num_handlers; i++) {
   188ec:	3208      	adds	r2, #8
   188ee:	429a      	cmp	r2, r3
   188f0:	d1f9      	bne.n	188e6 <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   188f2:	8986      	ldrh	r6, [r0, #12]
   188f4:	4b16      	ldr	r3, [pc, #88]	; (18950 <handle_event+0x74>)
   188f6:	4c17      	ldr	r4, [pc, #92]	; (18954 <handle_event+0x78>)
   188f8:	6880      	ldr	r0, [r0, #8]
   188fa:	4631      	mov	r1, r6
   188fc:	1ae4      	subs	r4, r4, r3
   188fe:	f7fb fd8b 	bl	14418 <bt_hex_real>
   18902:	f7f9 fb21 	bl	11f48 <z_log_strdup>
   18906:	08e4      	lsrs	r4, r4, #3
   18908:	01a4      	lsls	r4, r4, #6
   1890a:	f044 0402 	orr.w	r4, r4, #2
   1890e:	4603      	mov	r3, r0
   18910:	f8ad 4000 	strh.w	r4, [sp]
   18914:	4810      	ldr	r0, [pc, #64]	; (18958 <handle_event+0x7c>)
   18916:	4632      	mov	r2, r6
   18918:	4629      	mov	r1, r5
   1891a:	f00b fadc 	bl	23ed6 <log_3>
}
   1891e:	b002      	add	sp, #8
   18920:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
   18922:	8981      	ldrh	r1, [r0, #12]
   18924:	7853      	ldrb	r3, [r2, #1]
   18926:	428b      	cmp	r3, r1
   18928:	d90d      	bls.n	18946 <handle_event+0x6a>
   1892a:	4a09      	ldr	r2, [pc, #36]	; (18950 <handle_event+0x74>)
   1892c:	4b09      	ldr	r3, [pc, #36]	; (18954 <handle_event+0x78>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
   1892e:	480b      	ldr	r0, [pc, #44]	; (1895c <handle_event+0x80>)
   18930:	1a9b      	subs	r3, r3, r2
   18932:	08db      	lsrs	r3, r3, #3
   18934:	019b      	lsls	r3, r3, #6
   18936:	f043 0301 	orr.w	r3, r3, #1
   1893a:	462a      	mov	r2, r5
}
   1893c:	b002      	add	sp, #8
   1893e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
   18942:	f00b baaf 	b.w	23ea4 <log_2>
		handler->handler(buf);
   18946:	6853      	ldr	r3, [r2, #4]
}
   18948:	b002      	add	sp, #8
   1894a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
   1894e:	4718      	bx	r3
   18950:	00028dd4 	.word	0x00028dd4
   18954:	00028e24 	.word	0x00028e24
   18958:	0002b22e 	.word	0x0002b22e
   1895c:	0002b20c 	.word	0x0002b20c

00018960 <hci_rx_thread>:
	}
}

#if !defined(CONFIG_BT_RECV_IS_RX_THREAD)
static void hci_rx_thread(void)
{
   18960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18964:	4b47      	ldr	r3, [pc, #284]	; (18a84 <hci_rx_thread+0x124>)
   18966:	4d48      	ldr	r5, [pc, #288]	; (18a88 <hci_rx_thread+0x128>)

	BT_DBG("started");

	while (1) {
		BT_DBG("calling fifo_get_wait");
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   18968:	f8df 813c 	ldr.w	r8, [pc, #316]	; 18aa8 <hci_rx_thread+0x148>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   1896c:	f8df 913c 	ldr.w	r9, [pc, #316]	; 18aac <hci_rx_thread+0x14c>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   18970:	4f46      	ldr	r7, [pc, #280]	; (18a8c <hci_rx_thread+0x12c>)
   18972:	1aed      	subs	r5, r5, r3
   18974:	08ed      	lsrs	r5, r5, #3
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   18976:	f04f 32ff 	mov.w	r2, #4294967295
   1897a:	f04f 33ff 	mov.w	r3, #4294967295
   1897e:	4640      	mov	r0, r8
   18980:	f00e fba0 	bl	270c4 <net_buf_get>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   18984:	7d01      	ldrb	r1, [r0, #20]

		BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
		       buf->len);

		switch (bt_buf_get_type(buf)) {
   18986:	2901      	cmp	r1, #1
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   18988:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
   1898a:	d046      	beq.n	18a1a <hci_rx_thread+0xba>
   1898c:	2903      	cmp	r1, #3
   1898e:	d173      	bne.n	18a78 <hci_rx_thread+0x118>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   18990:	8983      	ldrh	r3, [r0, #12]
   18992:	2b03      	cmp	r3, #3
   18994:	d80c      	bhi.n	189b0 <hci_rx_thread+0x50>
   18996:	493e      	ldr	r1, [pc, #248]	; (18a90 <hci_rx_thread+0x130>)
   18998:	483e      	ldr	r0, [pc, #248]	; (18a94 <hci_rx_thread+0x134>)
   1899a:	f240 13b5 	movw	r3, #437	; 0x1b5
   1899e:	463a      	mov	r2, r7
   189a0:	f00c f8ce 	bl	24b40 <printk>
   189a4:	4040      	eors	r0, r0
   189a6:	f380 8811 	msr	BASEPRI, r0
   189aa:	f04f 0003 	mov.w	r0, #3
   189ae:	df02      	svc	2
   189b0:	2104      	movs	r1, #4
   189b2:	f104 0008 	add.w	r0, r4, #8
   189b6:	f00e fc46 	bl	27246 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   189ba:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
   189bc:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   189be:	f8b0 a000 	ldrh.w	sl, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   189c2:	23ff      	movs	r3, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
   189c4:	f3ca 000b 	ubfx	r0, sl, #0, #12
	if (buf->len != len) {
   189c8:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
   189ca:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   189cc:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
   189ce:	d009      	beq.n	189e4 <hci_rx_thread+0x84>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   189d0:	01ab      	lsls	r3, r5, #6
   189d2:	4831      	ldr	r0, [pc, #196]	; (18a98 <hci_rx_thread+0x138>)
   189d4:	f043 0301 	orr.w	r3, r3, #1
   189d8:	f00b fa64 	bl	23ea4 <log_2>
		case BT_BUF_EVT:
			hci_event(buf);
			break;
		default:
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
			net_buf_unref(buf);
   189dc:	4620      	mov	r0, r4
   189de:	f004 fb7f 	bl	1d0e0 <net_buf_unref>
			break;
   189e2:	e017      	b.n	18a14 <hci_rx_thread+0xb4>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   189e4:	f7fd fc2c 	bl	16240 <bt_conn_lookup_handle>
	if (!conn) {
   189e8:	4606      	mov	r6, r0
   189ea:	b938      	cbnz	r0, 189fc <hci_rx_thread+0x9c>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   189ec:	01aa      	lsls	r2, r5, #6
   189ee:	8ae1      	ldrh	r1, [r4, #22]
   189f0:	482a      	ldr	r0, [pc, #168]	; (18a9c <hci_rx_thread+0x13c>)
   189f2:	f042 0201 	orr.w	r2, r2, #1
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   189f6:	f00b fa41 	bl	23e7c <log_1>
   189fa:	e7ef      	b.n	189dc <hci_rx_thread+0x7c>
	acl(buf)->index = bt_conn_index(conn);
   189fc:	f7fd fd12 	bl	16424 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   18a00:	ea4f 321a 	mov.w	r2, sl, lsr #12
	acl(buf)->index = bt_conn_index(conn);
   18a04:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   18a06:	4621      	mov	r1, r4
   18a08:	4630      	mov	r0, r6
   18a0a:	f7fd fae3 	bl	15fd4 <bt_conn_recv>
	bt_conn_unref(conn);
   18a0e:	4630      	mov	r0, r6
   18a10:	f00d f8aa 	bl	25b68 <bt_conn_unref>
	z_impl_k_yield();
   18a14:	f008 ff52 	bl	218bc <z_impl_k_yield>
	while (1) {
   18a18:	e7ad      	b.n	18976 <hci_rx_thread+0x16>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   18a1a:	8983      	ldrh	r3, [r0, #12]
   18a1c:	2b01      	cmp	r3, #1
   18a1e:	d80c      	bhi.n	18a3a <hci_rx_thread+0xda>
   18a20:	491b      	ldr	r1, [pc, #108]	; (18a90 <hci_rx_thread+0x130>)
   18a22:	481c      	ldr	r0, [pc, #112]	; (18a94 <hci_rx_thread+0x134>)
   18a24:	f640 1317 	movw	r3, #2327	; 0x917
   18a28:	463a      	mov	r2, r7
   18a2a:	f00c f889 	bl	24b40 <printk>
   18a2e:	4040      	eors	r0, r0
   18a30:	f380 8811 	msr	BASEPRI, r0
   18a34:	f04f 0003 	mov.w	r0, #3
   18a38:	df02      	svc	2
   18a3a:	2102      	movs	r1, #2
   18a3c:	f104 0008 	add.w	r0, r4, #8
   18a40:	f00e fc01 	bl	27246 <net_buf_simple_pull_mem>
   18a44:	4606      	mov	r6, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   18a46:	7800      	ldrb	r0, [r0, #0]
   18a48:	f00d fc40 	bl	262cc <bt_hci_evt_get_flags>
   18a4c:	0783      	lsls	r3, r0, #30
   18a4e:	d40c      	bmi.n	18a6a <hci_rx_thread+0x10a>
   18a50:	4913      	ldr	r1, [pc, #76]	; (18aa0 <hci_rx_thread+0x140>)
   18a52:	4810      	ldr	r0, [pc, #64]	; (18a94 <hci_rx_thread+0x134>)
   18a54:	f640 131b 	movw	r3, #2331	; 0x91b
   18a58:	463a      	mov	r2, r7
   18a5a:	f00c f871 	bl	24b40 <printk>
   18a5e:	4040      	eors	r0, r0
   18a60:	f380 8811 	msr	BASEPRI, r0
   18a64:	f04f 0003 	mov.w	r0, #3
   18a68:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   18a6a:	7830      	ldrb	r0, [r6, #0]
   18a6c:	2306      	movs	r3, #6
   18a6e:	464a      	mov	r2, r9
   18a70:	4621      	mov	r1, r4
   18a72:	f7ff ff33 	bl	188dc <handle_event>
	net_buf_unref(buf);
   18a76:	e7b1      	b.n	189dc <hci_rx_thread+0x7c>
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   18a78:	01aa      	lsls	r2, r5, #6
   18a7a:	480a      	ldr	r0, [pc, #40]	; (18aa4 <hci_rx_thread+0x144>)
   18a7c:	f042 0201 	orr.w	r2, r2, #1
   18a80:	e7b9      	b.n	189f6 <hci_rx_thread+0x96>
   18a82:	bf00      	nop
   18a84:	00028dd4 	.word	0x00028dd4
   18a88:	00028e24 	.word	0x00028e24
   18a8c:	0002b250 	.word	0x0002b250
   18a90:	0002b284 	.word	0x0002b284
   18a94:	0002ab85 	.word	0x0002ab85
   18a98:	0002b29d 	.word	0x0002b29d
   18a9c:	0002b2c1 	.word	0x0002b2c1
   18aa0:	0002b2e3 	.word	0x0002b2e3
   18aa4:	0002b311 	.word	0x0002b311
   18aa8:	200003ec 	.word	0x200003ec
   18aac:	000296e0 	.word	0x000296e0

00018ab0 <hci_le_meta_event>:
{
   18ab0:	b510      	push	{r4, lr}
   18ab2:	2101      	movs	r1, #1
   18ab4:	4604      	mov	r4, r0
   18ab6:	3008      	adds	r0, #8
   18ab8:	f00e fbc5 	bl	27246 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   18abc:	4621      	mov	r1, r4
   18abe:	4a03      	ldr	r2, [pc, #12]	; (18acc <hci_le_meta_event+0x1c>)
   18ac0:	7800      	ldrb	r0, [r0, #0]
}
   18ac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   18ac6:	230a      	movs	r3, #10
   18ac8:	f7ff bf08 	b.w	188dc <handle_event>
   18acc:	00029670 	.word	0x00029670

00018ad0 <hci_num_completed_packets>:
{
   18ad0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ad4:	4d39      	ldr	r5, [pc, #228]	; (18bbc <hci_num_completed_packets+0xec>)
   18ad6:	4b3a      	ldr	r3, [pc, #232]	; (18bc0 <hci_num_completed_packets+0xf0>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   18ad8:	f8d0 8008 	ldr.w	r8, [r0, #8]
				BT_ERR("packets count mismatch");
   18adc:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 18bc8 <hci_num_completed_packets+0xf8>
   18ae0:	1aed      	subs	r5, r5, r3
	for (i = 0; i < evt->num_handles; i++) {
   18ae2:	2600      	movs	r6, #0
   18ae4:	08ed      	lsrs	r5, r5, #3
			tx->pending_no_cb = 0U;
   18ae6:	46b1      	mov	r9, r6
	for (i = 0; i < evt->num_handles; i++) {
   18ae8:	f898 3000 	ldrb.w	r3, [r8]
   18aec:	429e      	cmp	r6, r3
   18aee:	db01      	blt.n	18af4 <hci_num_completed_packets+0x24>
}
   18af0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   18af4:	eb08 0386 	add.w	r3, r8, r6, lsl #2
   18af8:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   18afc:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   18b00:	4658      	mov	r0, fp
   18b02:	f7fd fb9d 	bl	16240 <bt_conn_lookup_handle>
		if (!conn) {
   18b06:	4604      	mov	r4, r0
   18b08:	b1d8      	cbz	r0, 18b42 <hci_num_completed_packets+0x72>
			k_work_submit(&conn->tx_complete_work);
   18b0a:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   18b0e:	2f00      	cmp	r7, #0
   18b10:	d033      	beq.n	18b7a <hci_num_completed_packets+0xaa>
	__asm__ volatile(
   18b12:	f04f 0340 	mov.w	r3, #64	; 0x40
   18b16:	f3ef 8211 	mrs	r2, BASEPRI
   18b1a:	f383 8812 	msr	BASEPRI_MAX, r3
   18b1e:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   18b22:	69e3      	ldr	r3, [r4, #28]
   18b24:	b1b3      	cbz	r3, 18b54 <hci_num_completed_packets+0x84>
				conn->pending_no_cb--;
   18b26:	3b01      	subs	r3, #1
   18b28:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   18b2a:	f382 8811 	msr	BASEPRI, r2
   18b2e:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   18b32:	4620      	mov	r0, r4
   18b34:	f7fd fa16 	bl	15f64 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   18b38:	3f01      	subs	r7, #1
   18b3a:	f008 ffe1 	bl	21b00 <z_impl_k_sem_give>
   18b3e:	b2bf      	uxth	r7, r7
   18b40:	e7e5      	b.n	18b0e <hci_num_completed_packets+0x3e>
			BT_ERR("No connection for handle %u", handle);
   18b42:	01aa      	lsls	r2, r5, #6
   18b44:	481f      	ldr	r0, [pc, #124]	; (18bc4 <hci_num_completed_packets+0xf4>)
   18b46:	f042 0201 	orr.w	r2, r2, #1
   18b4a:	4659      	mov	r1, fp
   18b4c:	f00b f996 	bl	23e7c <log_1>
	for (i = 0; i < evt->num_handles; i++) {
   18b50:	3601      	adds	r6, #1
   18b52:	e7c9      	b.n	18ae8 <hci_num_completed_packets+0x18>
Z_GENLIST_IS_EMPTY(slist)
   18b54:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
   18b56:	b12b      	cbz	r3, 18b64 <hci_num_completed_packets+0x94>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18b58:	69a1      	ldr	r1, [r4, #24]
   18b5a:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   18b5c:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18b5e:	428b      	cmp	r3, r1
	list->tail = node;
   18b60:	bf08      	it	eq
   18b62:	61a0      	streq	r0, [r4, #24]
   18b64:	f382 8811 	msr	BASEPRI, r2
   18b68:	f3bf 8f6f 	isb	sy
			if (!node) {
   18b6c:	b94b      	cbnz	r3, 18b82 <hci_num_completed_packets+0xb2>
				BT_ERR("packets count mismatch");
   18b6e:	01a9      	lsls	r1, r5, #6
   18b70:	f041 0101 	orr.w	r1, r1, #1
   18b74:	4650      	mov	r0, sl
   18b76:	f00b f974 	bl	23e62 <log_0>
		bt_conn_unref(conn);
   18b7a:	4620      	mov	r0, r4
   18b7c:	f00c fff4 	bl	25b68 <bt_conn_unref>
   18b80:	e7e6      	b.n	18b50 <hci_num_completed_packets+0x80>
	__asm__ volatile(
   18b82:	f04f 0240 	mov.w	r2, #64	; 0x40
   18b86:	f3ef 8111 	mrs	r1, BASEPRI
   18b8a:	f382 8812 	msr	BASEPRI_MAX, r2
   18b8e:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   18b92:	68da      	ldr	r2, [r3, #12]
   18b94:	61e2      	str	r2, [r4, #28]
	parent->next = child;
   18b96:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
   18b9a:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   18b9c:	f8c3 900c 	str.w	r9, [r3, #12]
   18ba0:	b94a      	cbnz	r2, 18bb6 <hci_num_completed_packets+0xe6>
	list->head = node;
   18ba2:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   18ba6:	f381 8811 	msr	BASEPRI, r1
   18baa:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   18bae:	4658      	mov	r0, fp
   18bb0:	f009 fc06 	bl	223c0 <k_work_submit>
   18bb4:	e7bd      	b.n	18b32 <hci_num_completed_packets+0x62>
	parent->next = child;
   18bb6:	6013      	str	r3, [r2, #0]
	list->tail = node;
   18bb8:	6263      	str	r3, [r4, #36]	; 0x24
}
   18bba:	e7f4      	b.n	18ba6 <hci_num_completed_packets+0xd6>
   18bbc:	00028e24 	.word	0x00028e24
   18bc0:	00028dd4 	.word	0x00028dd4
   18bc4:	0002b325 	.word	0x0002b325
   18bc8:	0002b341 	.word	0x0002b341

00018bcc <hci_tx_thread>:
{
   18bcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18bd0:	4d51      	ldr	r5, [pc, #324]	; (18d18 <hci_tx_thread+0x14c>)
   18bd2:	4b52      	ldr	r3, [pc, #328]	; (18d1c <hci_tx_thread+0x150>)
		events[0].state = K_POLL_STATE_NOT_READY;
   18bd4:	f8df 914c 	ldr.w	r9, [pc, #332]	; 18d24 <hci_tx_thread+0x158>
		BT_ASSERT(err == 0);
   18bd8:	f8df a174 	ldr.w	sl, [pc, #372]	; 18d50 <hci_tx_thread+0x184>
   18bdc:	1aed      	subs	r5, r5, r3
   18bde:	08ed      	lsrs	r5, r5, #3
		events[0].state = K_POLL_STATE_NOT_READY;
   18be0:	f8d9 300c 	ldr.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   18be4:	484e      	ldr	r0, [pc, #312]	; (18d20 <hci_tx_thread+0x154>)
		events[0].state = K_POLL_STATE_NOT_READY;
   18be6:	f36f 3352 	bfc	r3, #13, #6
   18bea:	f8c9 300c 	str.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   18bee:	f7fd fae9 	bl	161c4 <bt_conn_prepare_events>
   18bf2:	1c47      	adds	r7, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   18bf4:	484b      	ldr	r0, [pc, #300]	; (18d24 <hci_tx_thread+0x158>)
   18bf6:	f04f 32ff 	mov.w	r2, #4294967295
   18bfa:	f04f 33ff 	mov.w	r3, #4294967295
   18bfe:	4639      	mov	r1, r7
   18c00:	f008 fb48 	bl	21294 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   18c04:	b160      	cbz	r0, 18c20 <hci_tx_thread+0x54>
   18c06:	4948      	ldr	r1, [pc, #288]	; (18d28 <hci_tx_thread+0x15c>)
   18c08:	4848      	ldr	r0, [pc, #288]	; (18d2c <hci_tx_thread+0x160>)
   18c0a:	f640 1393 	movw	r3, #2451	; 0x993
   18c0e:	4652      	mov	r2, sl
   18c10:	f00b ff96 	bl	24b40 <printk>
   18c14:	4040      	eors	r0, r0
   18c16:	f380 8811 	msr	BASEPRI, r0
   18c1a:	f04f 0003 	mov.w	r0, #3
   18c1e:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   18c20:	4e43      	ldr	r6, [pc, #268]	; (18d30 <hci_tx_thread+0x164>)
{
   18c22:	f8df 8100 	ldr.w	r8, [pc, #256]	; 18d24 <hci_tx_thread+0x158>
   18c26:	f506 7b90 	add.w	fp, r6, #288	; 0x120
	for (; count; ev++, count--) {
   18c2a:	b917      	cbnz	r7, 18c32 <hci_tx_thread+0x66>
	z_impl_k_yield();
   18c2c:	f008 fe46 	bl	218bc <z_impl_k_yield>
	while (1) {
   18c30:	e7d6      	b.n	18be0 <hci_tx_thread+0x14>
		switch (ev->state) {
   18c32:	f8d8 100c 	ldr.w	r1, [r8, #12]
   18c36:	f3c1 3145 	ubfx	r1, r1, #13, #6
   18c3a:	2901      	cmp	r1, #1
   18c3c:	d959      	bls.n	18cf2 <hci_tx_thread+0x126>
   18c3e:	2904      	cmp	r1, #4
   18c40:	d163      	bne.n	18d0a <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
   18c42:	f898 300c 	ldrb.w	r3, [r8, #12]
   18c46:	2b00      	cmp	r3, #0
   18c48:	d157      	bne.n	18cfa <hci_tx_thread+0x12e>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   18c4a:	483a      	ldr	r0, [pc, #232]	; (18d34 <hci_tx_thread+0x168>)
   18c4c:	2200      	movs	r2, #0
   18c4e:	2300      	movs	r3, #0
   18c50:	f00e fa38 	bl	270c4 <net_buf_get>
	BT_ASSERT(buf);
   18c54:	4604      	mov	r4, r0
   18c56:	b960      	cbnz	r0, 18c72 <hci_tx_thread+0xa6>
   18c58:	4937      	ldr	r1, [pc, #220]	; (18d38 <hci_tx_thread+0x16c>)
   18c5a:	4834      	ldr	r0, [pc, #208]	; (18d2c <hci_tx_thread+0x160>)
   18c5c:	f640 132a 	movw	r3, #2346	; 0x92a
   18c60:	4652      	mov	r2, sl
   18c62:	f00b ff6d 	bl	24b40 <printk>
   18c66:	4040      	eors	r0, r0
   18c68:	f380 8811 	msr	BASEPRI, r0
   18c6c:	f04f 0003 	mov.w	r0, #3
   18c70:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   18c72:	f04f 33ff 	mov.w	r3, #4294967295
   18c76:	f04f 32ff 	mov.w	r2, #4294967295
   18c7a:	4658      	mov	r0, fp
   18c7c:	f008 ff66 	bl	21b4c <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   18c80:	f8d6 3138 	ldr.w	r3, [r6, #312]	; 0x138
   18c84:	b163      	cbz	r3, 18ca0 <hci_tx_thread+0xd4>
		BT_ERR("Uncleared pending sent_cmd");
   18c86:	01a9      	lsls	r1, r5, #6
   18c88:	482c      	ldr	r0, [pc, #176]	; (18d3c <hci_tx_thread+0x170>)
   18c8a:	f041 0101 	orr.w	r1, r1, #1
   18c8e:	f00b f8e8 	bl	23e62 <log_0>
		net_buf_unref(bt_dev.sent_cmd);
   18c92:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   18c96:	f004 fa23 	bl	1d0e0 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   18c9a:	2300      	movs	r3, #0
   18c9c:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   18ca0:	4620      	mov	r0, r4
   18ca2:	f00e fa83 	bl	271ac <net_buf_ref>
   18ca6:	f8c6 0138 	str.w	r0, [r6, #312]	; 0x138
		return bt_hci_ecc_send(buf);
   18caa:	4620      	mov	r0, r4
   18cac:	f001 f82a 	bl	19d04 <bt_hci_ecc_send>
	if (err) {
   18cb0:	4601      	mov	r1, r0
   18cb2:	b1f0      	cbz	r0, 18cf2 <hci_tx_thread+0x126>
		BT_ERR("Unable to send to driver (err %d)", err);
   18cb4:	01aa      	lsls	r2, r5, #6
   18cb6:	4822      	ldr	r0, [pc, #136]	; (18d40 <hci_tx_thread+0x174>)
   18cb8:	f042 0201 	orr.w	r2, r2, #1
   18cbc:	f00b f8de 	bl	23e7c <log_1>
	z_impl_k_sem_give(sem);
   18cc0:	4820      	ldr	r0, [pc, #128]	; (18d44 <hci_tx_thread+0x178>)
   18cc2:	f008 ff1d 	bl	21b00 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   18cc6:	4620      	mov	r0, r4
   18cc8:	f004 f952 	bl	1cf70 <net_buf_id>
   18ccc:	4b1e      	ldr	r3, [pc, #120]	; (18d48 <hci_tx_thread+0x17c>)
   18cce:	220c      	movs	r2, #12
   18cd0:	fb02 3000 	mla	r0, r2, r0, r3
   18cd4:	211f      	movs	r1, #31
   18cd6:	8840      	ldrh	r0, [r0, #2]
   18cd8:	4622      	mov	r2, r4
   18cda:	f7ff fd61 	bl	187a0 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   18cde:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   18ce2:	f004 f9fd 	bl	1d0e0 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   18ce6:	2300      	movs	r3, #0
		net_buf_unref(buf);
   18ce8:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   18cea:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
		net_buf_unref(buf);
   18cee:	f004 f9f7 	bl	1d0e0 <net_buf_unref>
	for (; count; ev++, count--) {
   18cf2:	f108 0814 	add.w	r8, r8, #20
   18cf6:	3f01      	subs	r7, #1
   18cf8:	e797      	b.n	18c2a <hci_tx_thread+0x5e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   18cfa:	2b01      	cmp	r3, #1
   18cfc:	d1f9      	bne.n	18cf2 <hci_tx_thread+0x126>
					conn = CONTAINER_OF(ev->fifo,
   18cfe:	f8d8 0010 	ldr.w	r0, [r8, #16]
					bt_conn_process_tx(conn);
   18d02:	3838      	subs	r0, #56	; 0x38
   18d04:	f7fd fdf8 	bl	168f8 <bt_conn_process_tx>
   18d08:	e7f3      	b.n	18cf2 <hci_tx_thread+0x126>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   18d0a:	01aa      	lsls	r2, r5, #6
   18d0c:	480f      	ldr	r0, [pc, #60]	; (18d4c <hci_tx_thread+0x180>)
   18d0e:	f042 0202 	orr.w	r2, r2, #2
   18d12:	f00b f8b3 	bl	23e7c <log_1>
   18d16:	e7ec      	b.n	18cf2 <hci_tx_thread+0x126>
   18d18:	00028e24 	.word	0x00028e24
   18d1c:	00028dd4 	.word	0x00028dd4
   18d20:	20000624 	.word	0x20000624
   18d24:	20000610 	.word	0x20000610
   18d28:	0002b358 	.word	0x0002b358
   18d2c:	0002ab85 	.word	0x0002ab85
   18d30:	200002b0 	.word	0x200002b0
   18d34:	20000404 	.word	0x20000404
   18d38:	0002a9a7 	.word	0x0002a9a7
   18d3c:	0002b361 	.word	0x0002b361
   18d40:	0002a9ab 	.word	0x0002a9ab
   18d44:	200003d0 	.word	0x200003d0
   18d48:	2000249c 	.word	0x2000249c
   18d4c:	0002b37c 	.word	0x0002b37c
   18d50:	0002b250 	.word	0x0002b250

00018d54 <hci_cmd_status>:
{
   18d54:	b538      	push	{r3, r4, r5, lr}
   18d56:	2104      	movs	r1, #4
   18d58:	4604      	mov	r4, r0
   18d5a:	3008      	adds	r0, #8
   18d5c:	f00e fa73 	bl	27246 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   18d60:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   18d62:	7801      	ldrb	r1, [r0, #0]
   18d64:	8840      	ldrh	r0, [r0, #2]
   18d66:	4622      	mov	r2, r4
   18d68:	f7ff fd1a 	bl	187a0 <hci_cmd_done>
	if (ncmd) {
   18d6c:	b125      	cbz	r5, 18d78 <hci_cmd_status+0x24>
   18d6e:	4803      	ldr	r0, [pc, #12]	; (18d7c <hci_cmd_status+0x28>)
}
   18d70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   18d74:	f008 bec4 	b.w	21b00 <z_impl_k_sem_give>
   18d78:	bd38      	pop	{r3, r4, r5, pc}
   18d7a:	bf00      	nop
   18d7c:	200003d0 	.word	0x200003d0

00018d80 <hci_cmd_complete>:
{
   18d80:	b538      	push	{r3, r4, r5, lr}
   18d82:	2103      	movs	r1, #3
   18d84:	4604      	mov	r4, r0
   18d86:	3008      	adds	r0, #8
   18d88:	f00e fa5d 	bl	27246 <net_buf_simple_pull_mem>
	status = buf->data[0];
   18d8c:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   18d8e:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   18d90:	7819      	ldrb	r1, [r3, #0]
   18d92:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   18d96:	4622      	mov	r2, r4
   18d98:	f7ff fd02 	bl	187a0 <hci_cmd_done>
	if (ncmd) {
   18d9c:	b125      	cbz	r5, 18da8 <hci_cmd_complete+0x28>
   18d9e:	4803      	ldr	r0, [pc, #12]	; (18dac <hci_cmd_complete+0x2c>)
}
   18da0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   18da4:	f008 beac 	b.w	21b00 <z_impl_k_sem_give>
   18da8:	bd38      	pop	{r3, r4, r5, pc}
   18daa:	bf00      	nop
   18dac:	200003d0 	.word	0x200003d0

00018db0 <bt_hci_cmd_state_set_init>:
{
   18db0:	b510      	push	{r4, lr}
	state->bit = bit;
   18db2:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   18db6:	f89d 3008 	ldrb.w	r3, [sp, #8]
   18dba:	720b      	strb	r3, [r1, #8]
{
   18dbc:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   18dbe:	f004 f8d7 	bl	1cf70 <net_buf_id>
   18dc2:	4b03      	ldr	r3, [pc, #12]	; (18dd0 <bt_hci_cmd_state_set_init+0x20>)
   18dc4:	220c      	movs	r2, #12
   18dc6:	fb02 3000 	mla	r0, r2, r0, r3
   18dca:	6044      	str	r4, [r0, #4]
}
   18dcc:	bd10      	pop	{r4, pc}
   18dce:	bf00      	nop
   18dd0:	2000249c 	.word	0x2000249c

00018dd4 <bt_hci_cmd_create>:
{
   18dd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_alloc_fixed(pool, timeout);
   18dd8:	f04f 32ff 	mov.w	r2, #4294967295
   18ddc:	f04f 33ff 	mov.w	r3, #4294967295
   18de0:	4605      	mov	r5, r0
   18de2:	4816      	ldr	r0, [pc, #88]	; (18e3c <bt_hci_cmd_create+0x68>)
	cmd(buf)->opcode = opcode;
   18de4:	f8df 8058 	ldr.w	r8, [pc, #88]	; 18e40 <bt_hci_cmd_create+0x6c>
{
   18de8:	460e      	mov	r6, r1
   18dea:	f00e f966 	bl	270ba <net_buf_alloc_fixed>
   18dee:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   18df0:	f100 0b08 	add.w	fp, r0, #8
   18df4:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   18df6:	2700      	movs	r7, #0
   18df8:	4658      	mov	r0, fp
   18dfa:	f00e f97d 	bl	270f8 <net_buf_simple_reserve>
   18dfe:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
   18e00:	4620      	mov	r0, r4
   18e02:	f004 f8b5 	bl	1cf70 <net_buf_id>
   18e06:	f04f 0a0c 	mov.w	sl, #12
   18e0a:	fb0a 8000 	mla	r0, sl, r0, r8
   18e0e:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
   18e10:	4620      	mov	r0, r4
   18e12:	f004 f8ad 	bl	1cf70 <net_buf_id>
   18e16:	fb0a 8000 	mla	r0, sl, r0, r8
   18e1a:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   18e1c:	4620      	mov	r0, r4
   18e1e:	f004 f8a7 	bl	1cf70 <net_buf_id>
   18e22:	fb0a 8000 	mla	r0, sl, r0, r8
	return net_buf_simple_add(&buf->b, len);
   18e26:	2103      	movs	r1, #3
   18e28:	6047      	str	r7, [r0, #4]
   18e2a:	4658      	mov	r0, fp
   18e2c:	f00e f9e4 	bl	271f8 <net_buf_simple_add>
	hdr->param_len = param_len;
   18e30:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   18e32:	8005      	strh	r5, [r0, #0]
}
   18e34:	4620      	mov	r0, r4
   18e36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e3a:	bf00      	nop
   18e3c:	20000ab4 	.word	0x20000ab4
   18e40:	2000249c 	.word	0x2000249c

00018e44 <bt_hci_cmd_send>:
{
   18e44:	b538      	push	{r3, r4, r5, lr}
   18e46:	4605      	mov	r5, r0
	if (!buf) {
   18e48:	460c      	mov	r4, r1
   18e4a:	b919      	cbnz	r1, 18e54 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   18e4c:	f7ff ffc2 	bl	18dd4 <bt_hci_cmd_create>
		if (!buf) {
   18e50:	4604      	mov	r4, r0
   18e52:	b1f0      	cbz	r0, 18e92 <bt_hci_cmd_send+0x4e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   18e54:	f640 4335 	movw	r3, #3125	; 0xc35
   18e58:	429d      	cmp	r5, r3
   18e5a:	d114      	bne.n	18e86 <bt_hci_cmd_send+0x42>
		return bt_hci_ecc_send(buf);
   18e5c:	4620      	mov	r0, r4
   18e5e:	f000 ff51 	bl	19d04 <bt_hci_ecc_send>
		if (err) {
   18e62:	4605      	mov	r5, r0
   18e64:	b168      	cbz	r0, 18e82 <bt_hci_cmd_send+0x3e>
   18e66:	4b0c      	ldr	r3, [pc, #48]	; (18e98 <bt_hci_cmd_send+0x54>)
   18e68:	4a0c      	ldr	r2, [pc, #48]	; (18e9c <bt_hci_cmd_send+0x58>)
   18e6a:	1ad2      	subs	r2, r2, r3
   18e6c:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Unable to send to driver (err %d)", err);
   18e6e:	0192      	lsls	r2, r2, #6
   18e70:	4601      	mov	r1, r0
   18e72:	f042 0201 	orr.w	r2, r2, #1
   18e76:	480a      	ldr	r0, [pc, #40]	; (18ea0 <bt_hci_cmd_send+0x5c>)
   18e78:	f00b f800 	bl	23e7c <log_1>
			net_buf_unref(buf);
   18e7c:	4620      	mov	r0, r4
   18e7e:	f004 f92f 	bl	1d0e0 <net_buf_unref>
}
   18e82:	4628      	mov	r0, r5
   18e84:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   18e86:	4807      	ldr	r0, [pc, #28]	; (18ea4 <bt_hci_cmd_send+0x60>)
   18e88:	4621      	mov	r1, r4
   18e8a:	f00e f982 	bl	27192 <net_buf_put>
	return 0;
   18e8e:	2500      	movs	r5, #0
   18e90:	e7f7      	b.n	18e82 <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
   18e92:	f06f 0568 	mvn.w	r5, #104	; 0x68
   18e96:	e7f4      	b.n	18e82 <bt_hci_cmd_send+0x3e>
   18e98:	00028dd4 	.word	0x00028dd4
   18e9c:	00028e24 	.word	0x00028e24
   18ea0:	0002a9ab 	.word	0x0002a9ab
   18ea4:	20000404 	.word	0x20000404

00018ea8 <le_ltk_request>:
{
   18ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   18eaa:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   18eac:	882e      	ldrh	r6, [r5, #0]
   18eae:	b2b7      	uxth	r7, r6
{
   18eb0:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
   18eb2:	4638      	mov	r0, r7
   18eb4:	f7fd f9c4 	bl	16240 <bt_conn_lookup_handle>
	if (!conn) {
   18eb8:	4604      	mov	r4, r0
   18eba:	b960      	cbnz	r0, 18ed6 <le_ltk_request+0x2e>
   18ebc:	4a26      	ldr	r2, [pc, #152]	; (18f58 <le_ltk_request+0xb0>)
   18ebe:	4b27      	ldr	r3, [pc, #156]	; (18f5c <le_ltk_request+0xb4>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   18ec0:	4827      	ldr	r0, [pc, #156]	; (18f60 <le_ltk_request+0xb8>)
   18ec2:	1ad2      	subs	r2, r2, r3
   18ec4:	08d2      	lsrs	r2, r2, #3
   18ec6:	0192      	lsls	r2, r2, #6
   18ec8:	f042 0201 	orr.w	r2, r2, #1
   18ecc:	4639      	mov	r1, r7
   18ece:	f00a ffd5 	bl	23e7c <log_1>
}
   18ed2:	b007      	add	sp, #28
   18ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   18ed6:	af02      	add	r7, sp, #8
   18ed8:	f8d5 2002 	ldr.w	r2, [r5, #2]
   18edc:	f8d5 3006 	ldr.w	r3, [r5, #6]
   18ee0:	9701      	str	r7, [sp, #4]
   18ee2:	8969      	ldrh	r1, [r5, #10]
   18ee4:	9100      	str	r1, [sp, #0]
   18ee6:	f00d ff02 	bl	26cee <bt_smp_request_ltk>
   18eea:	b320      	cbz	r0, 18f36 <le_ltk_request+0x8e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   18eec:	2112      	movs	r1, #18
   18eee:	f242 001a 	movw	r0, #8218	; 0x201a
   18ef2:	f7ff ff6f 	bl	18dd4 <bt_hci_cmd_create>
	if (!buf) {
   18ef6:	4605      	mov	r5, r0
   18ef8:	b968      	cbnz	r0, 18f16 <le_ltk_request+0x6e>
   18efa:	4917      	ldr	r1, [pc, #92]	; (18f58 <le_ltk_request+0xb0>)
   18efc:	4b17      	ldr	r3, [pc, #92]	; (18f5c <le_ltk_request+0xb4>)
		BT_ERR("Out of command buffers");
   18efe:	4819      	ldr	r0, [pc, #100]	; (18f64 <le_ltk_request+0xbc>)
   18f00:	1ac9      	subs	r1, r1, r3
   18f02:	08c9      	lsrs	r1, r1, #3
   18f04:	0189      	lsls	r1, r1, #6
   18f06:	f041 0101 	orr.w	r1, r1, #1
   18f0a:	f00a ffaa 	bl	23e62 <log_0>
	bt_conn_unref(conn);
   18f0e:	4620      	mov	r0, r4
   18f10:	f00c fe2a 	bl	25b68 <bt_conn_unref>
   18f14:	e7dd      	b.n	18ed2 <le_ltk_request+0x2a>
   18f16:	2112      	movs	r1, #18
   18f18:	3008      	adds	r0, #8
   18f1a:	f00e f96d 	bl	271f8 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   18f1e:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
   18f20:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   18f24:	2210      	movs	r2, #16
   18f26:	f00b ffab 	bl	24e80 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   18f2a:	4629      	mov	r1, r5
   18f2c:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   18f30:	f7ff ff88 	bl	18e44 <bt_hci_cmd_send>
   18f34:	e7eb      	b.n	18f0e <le_ltk_request+0x66>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   18f36:	2102      	movs	r1, #2
   18f38:	f242 001b 	movw	r0, #8219	; 0x201b
   18f3c:	f7ff ff4a 	bl	18dd4 <bt_hci_cmd_create>
	if (!buf) {
   18f40:	4605      	mov	r5, r0
   18f42:	2800      	cmp	r0, #0
   18f44:	d0d9      	beq.n	18efa <le_ltk_request+0x52>
   18f46:	2102      	movs	r1, #2
   18f48:	3008      	adds	r0, #8
   18f4a:	f00e f955 	bl	271f8 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   18f4e:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(handle);
   18f50:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   18f52:	f242 001b 	movw	r0, #8219	; 0x201b
   18f56:	e7eb      	b.n	18f30 <le_ltk_request+0x88>
   18f58:	00028e24 	.word	0x00028e24
   18f5c:	00028dd4 	.word	0x00028dd4
   18f60:	0002b114 	.word	0x0002b114
   18f64:	0002b39d 	.word	0x0002b39d

00018f68 <le_conn_param_neg_reply>:
{
   18f68:	b570      	push	{r4, r5, r6, lr}
   18f6a:	4606      	mov	r6, r0
   18f6c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   18f6e:	f242 0021 	movw	r0, #8225	; 0x2021
   18f72:	2103      	movs	r1, #3
   18f74:	f7ff ff2e 	bl	18dd4 <bt_hci_cmd_create>
	if (!buf) {
   18f78:	4604      	mov	r4, r0
   18f7a:	b958      	cbnz	r0, 18f94 <le_conn_param_neg_reply+0x2c>
   18f7c:	490c      	ldr	r1, [pc, #48]	; (18fb0 <le_conn_param_neg_reply+0x48>)
   18f7e:	4b0d      	ldr	r3, [pc, #52]	; (18fb4 <le_conn_param_neg_reply+0x4c>)
		BT_ERR("Unable to allocate buffer");
   18f80:	480d      	ldr	r0, [pc, #52]	; (18fb8 <le_conn_param_neg_reply+0x50>)
   18f82:	1ac9      	subs	r1, r1, r3
   18f84:	08c9      	lsrs	r1, r1, #3
   18f86:	0189      	lsls	r1, r1, #6
}
   18f88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
   18f8c:	f041 0101 	orr.w	r1, r1, #1
   18f90:	f00a bf67 	b.w	23e62 <log_0>
   18f94:	2103      	movs	r1, #3
   18f96:	3008      	adds	r0, #8
   18f98:	f00e f92e 	bl	271f8 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   18f9c:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   18f9e:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   18fa0:	4621      	mov	r1, r4
   18fa2:	f242 0021 	movw	r0, #8225	; 0x2021
}
   18fa6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   18faa:	f7ff bf4b 	b.w	18e44 <bt_hci_cmd_send>
   18fae:	bf00      	nop
   18fb0:	00028e24 	.word	0x00028e24
   18fb4:	00028dd4 	.word	0x00028dd4
   18fb8:	0002b3b4 	.word	0x0002b3b4

00018fbc <le_conn_param_req>:
{
   18fbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   18fbe:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   18fc0:	78d9      	ldrb	r1, [r3, #3]
   18fc2:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   18fc4:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   18fc6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   18fca:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   18fce:	7959      	ldrb	r1, [r3, #5]
   18fd0:	791a      	ldrb	r2, [r3, #4]
   18fd2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   18fd6:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   18fda:	799a      	ldrb	r2, [r3, #6]
   18fdc:	79d9      	ldrb	r1, [r3, #7]
   18fde:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   18fe2:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   18fe6:	7a1a      	ldrb	r2, [r3, #8]
   18fe8:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   18fea:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   18fec:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   18ff0:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   18ff2:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   18ff6:	f7fd f923 	bl	16240 <bt_conn_lookup_handle>
	if (!conn) {
   18ffa:	4606      	mov	r6, r0
   18ffc:	b980      	cbnz	r0, 19020 <le_conn_param_req+0x64>
   18ffe:	4b20      	ldr	r3, [pc, #128]	; (19080 <le_conn_param_req+0xc4>)
   19000:	4a20      	ldr	r2, [pc, #128]	; (19084 <le_conn_param_req+0xc8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   19002:	4821      	ldr	r0, [pc, #132]	; (19088 <le_conn_param_req+0xcc>)
   19004:	1ad2      	subs	r2, r2, r3
   19006:	08d2      	lsrs	r2, r2, #3
   19008:	0192      	lsls	r2, r2, #6
   1900a:	4621      	mov	r1, r4
   1900c:	f042 0201 	orr.w	r2, r2, #1
   19010:	f00a ff34 	bl	23e7c <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   19014:	2102      	movs	r1, #2
   19016:	4620      	mov	r0, r4
   19018:	f7ff ffa6 	bl	18f68 <le_conn_param_neg_reply>
}
   1901c:	b003      	add	sp, #12
   1901e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   19020:	4669      	mov	r1, sp
   19022:	f7fd fa7b 	bl	1651c <le_param_req>
   19026:	b938      	cbnz	r0, 19038 <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   19028:	211e      	movs	r1, #30
   1902a:	4620      	mov	r0, r4
   1902c:	f7ff ff9c 	bl	18f68 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   19030:	4630      	mov	r0, r6
   19032:	f00c fd99 	bl	25b68 <bt_conn_unref>
   19036:	e7f1      	b.n	1901c <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   19038:	210e      	movs	r1, #14
   1903a:	f242 0020 	movw	r0, #8224	; 0x2020
   1903e:	f7ff fec9 	bl	18dd4 <bt_hci_cmd_create>
	if (!buf) {
   19042:	4605      	mov	r5, r0
   19044:	2800      	cmp	r0, #0
   19046:	d0f3      	beq.n	19030 <le_conn_param_req+0x74>
   19048:	210e      	movs	r1, #14
   1904a:	3008      	adds	r0, #8
   1904c:	f00e f8d4 	bl	271f8 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   19050:	220e      	movs	r2, #14
   19052:	4604      	mov	r4, r0
   19054:	2100      	movs	r1, #0
   19056:	f00b ff1e 	bl	24e96 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   1905a:	f8bd 3000 	ldrh.w	r3, [sp]
   1905e:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   19060:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   19064:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   19066:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1906a:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1906c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   19070:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   19072:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   19074:	4629      	mov	r1, r5
   19076:	f242 0020 	movw	r0, #8224	; 0x2020
   1907a:	f7ff fee3 	bl	18e44 <bt_hci_cmd_send>
   1907e:	e7d7      	b.n	19030 <le_conn_param_req+0x74>
   19080:	00028dd4 	.word	0x00028dd4
   19084:	00028e24 	.word	0x00028e24
   19088:	0002b114 	.word	0x0002b114

0001908c <bt_hci_cmd_send_sync>:
{
   1908c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19090:	4607      	mov	r7, r0
   19092:	b086      	sub	sp, #24
   19094:	4615      	mov	r5, r2
	if (!buf) {
   19096:	460c      	mov	r4, r1
   19098:	b921      	cbnz	r1, 190a4 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
   1909a:	f7ff fe9b 	bl	18dd4 <bt_hci_cmd_create>
		if (!buf) {
   1909e:	4604      	mov	r4, r0
   190a0:	2800      	cmp	r0, #0
   190a2:	d055      	beq.n	19150 <bt_hci_cmd_send_sync+0xc4>
	return z_impl_k_sem_init(sem, initial_count, limit);
   190a4:	2201      	movs	r2, #1
   190a6:	2100      	movs	r1, #0
   190a8:	4668      	mov	r0, sp
   190aa:	f00f faac 	bl	28606 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   190ae:	4620      	mov	r0, r4
   190b0:	f003 ff5e 	bl	1cf70 <net_buf_id>
   190b4:	4e28      	ldr	r6, [pc, #160]	; (19158 <bt_hci_cmd_send_sync+0xcc>)
   190b6:	230c      	movs	r3, #12
   190b8:	fb03 6000 	mla	r0, r3, r0, r6
   190bc:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   190c0:	4620      	mov	r0, r4
   190c2:	f00e f873 	bl	271ac <net_buf_ref>
   190c6:	4601      	mov	r1, r0
   190c8:	4824      	ldr	r0, [pc, #144]	; (1915c <bt_hci_cmd_send_sync+0xd0>)
   190ca:	f00e f862 	bl	27192 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   190ce:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   190d2:	2300      	movs	r3, #0
   190d4:	4668      	mov	r0, sp
   190d6:	f008 fd39 	bl	21b4c <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   190da:	4680      	mov	r8, r0
   190dc:	b180      	cbz	r0, 19100 <bt_hci_cmd_send_sync+0x74>
   190de:	4a20      	ldr	r2, [pc, #128]	; (19160 <bt_hci_cmd_send_sync+0xd4>)
   190e0:	4920      	ldr	r1, [pc, #128]	; (19164 <bt_hci_cmd_send_sync+0xd8>)
   190e2:	4821      	ldr	r0, [pc, #132]	; (19168 <bt_hci_cmd_send_sync+0xdc>)
   190e4:	f240 1331 	movw	r3, #305	; 0x131
   190e8:	f00b fd2a 	bl	24b40 <printk>
   190ec:	481f      	ldr	r0, [pc, #124]	; (1916c <bt_hci_cmd_send_sync+0xe0>)
   190ee:	4641      	mov	r1, r8
   190f0:	f00b fd26 	bl	24b40 <printk>
   190f4:	4040      	eors	r0, r0
   190f6:	f380 8811 	msr	BASEPRI, r0
   190fa:	f04f 0003 	mov.w	r0, #3
   190fe:	df02      	svc	2
	status = cmd(buf)->status;
   19100:	4620      	mov	r0, r4
   19102:	f003 ff35 	bl	1cf70 <net_buf_id>
   19106:	230c      	movs	r3, #12
   19108:	4343      	muls	r3, r0
   1910a:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
   1910c:	b1be      	cbz	r6, 1913e <bt_hci_cmd_send_sync+0xb2>
   1910e:	4a18      	ldr	r2, [pc, #96]	; (19170 <bt_hci_cmd_send_sync+0xe4>)
   19110:	4b18      	ldr	r3, [pc, #96]	; (19174 <bt_hci_cmd_send_sync+0xe8>)
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   19112:	4819      	ldr	r0, [pc, #100]	; (19178 <bt_hci_cmd_send_sync+0xec>)
   19114:	1a9b      	subs	r3, r3, r2
   19116:	08db      	lsrs	r3, r3, #3
   19118:	019b      	lsls	r3, r3, #6
   1911a:	f043 0302 	orr.w	r3, r3, #2
   1911e:	4632      	mov	r2, r6
   19120:	4639      	mov	r1, r7
   19122:	f00a febf 	bl	23ea4 <log_2>
		net_buf_unref(buf);
   19126:	4620      	mov	r0, r4
   19128:	f003 ffda 	bl	1d0e0 <net_buf_unref>
			return -EIO;
   1912c:	2e09      	cmp	r6, #9
   1912e:	bf0c      	ite	eq
   19130:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   19134:	f06f 0004 	mvnne.w	r0, #4
}
   19138:	b006      	add	sp, #24
   1913a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
   1913e:	b115      	cbz	r5, 19146 <bt_hci_cmd_send_sync+0xba>
		*rsp = buf;
   19140:	602c      	str	r4, [r5, #0]
	return 0;
   19142:	4630      	mov	r0, r6
   19144:	e7f8      	b.n	19138 <bt_hci_cmd_send_sync+0xac>
		net_buf_unref(buf);
   19146:	4620      	mov	r0, r4
   19148:	f003 ffca 	bl	1d0e0 <net_buf_unref>
	return 0;
   1914c:	4628      	mov	r0, r5
   1914e:	e7f3      	b.n	19138 <bt_hci_cmd_send_sync+0xac>
			return -ENOBUFS;
   19150:	f06f 0068 	mvn.w	r0, #104	; 0x68
   19154:	e7f0      	b.n	19138 <bt_hci_cmd_send_sync+0xac>
   19156:	bf00      	nop
   19158:	2000249c 	.word	0x2000249c
   1915c:	20000404 	.word	0x20000404
   19160:	0002b250 	.word	0x0002b250
   19164:	0002b358 	.word	0x0002b358
   19168:	0002ab85 	.word	0x0002ab85
   1916c:	0002b3ce 	.word	0x0002b3ce
   19170:	00028dd4 	.word	0x00028dd4
   19174:	00028e24 	.word	0x00028e24
   19178:	0002b3ee 	.word	0x0002b3ee

0001917c <hci_le_read_max_data_len>:
{
   1917c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1917e:	4606      	mov	r6, r0
   19180:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   19182:	aa01      	add	r2, sp, #4
   19184:	2100      	movs	r1, #0
   19186:	f242 002f 	movw	r0, #8239	; 0x202f
   1918a:	f7ff ff7f 	bl	1908c <bt_hci_cmd_send_sync>
	if (err) {
   1918e:	4604      	mov	r4, r0
   19190:	b160      	cbz	r0, 191ac <hci_le_read_max_data_len+0x30>
   19192:	490c      	ldr	r1, [pc, #48]	; (191c4 <hci_le_read_max_data_len+0x48>)
   19194:	4b0c      	ldr	r3, [pc, #48]	; (191c8 <hci_le_read_max_data_len+0x4c>)
		BT_ERR("Failed to read DLE max data len");
   19196:	480d      	ldr	r0, [pc, #52]	; (191cc <hci_le_read_max_data_len+0x50>)
   19198:	1ac9      	subs	r1, r1, r3
   1919a:	08c9      	lsrs	r1, r1, #3
   1919c:	0189      	lsls	r1, r1, #6
   1919e:	f041 0101 	orr.w	r1, r1, #1
   191a2:	f00a fe5e 	bl	23e62 <log_0>
}
   191a6:	4620      	mov	r0, r4
   191a8:	b002      	add	sp, #8
   191aa:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   191ac:	9801      	ldr	r0, [sp, #4]
   191ae:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   191b0:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   191b4:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   191b6:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   191ba:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   191bc:	f003 ff90 	bl	1d0e0 <net_buf_unref>
	return 0;
   191c0:	e7f1      	b.n	191a6 <hci_le_read_max_data_len+0x2a>
   191c2:	bf00      	nop
   191c4:	00028e24 	.word	0x00028e24
   191c8:	00028dd4 	.word	0x00028dd4
   191cc:	0002b40a 	.word	0x0002b40a

000191d0 <conn_auto_initiate>:
{
   191d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   191d2:	7b43      	ldrb	r3, [r0, #13]
   191d4:	2b07      	cmp	r3, #7
{
   191d6:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   191d8:	d121      	bne.n	1921e <conn_auto_initiate+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   191da:	f3bf 8f5b 	dmb	ish
   191de:	6843      	ldr	r3, [r0, #4]
   191e0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   191e4:	049b      	lsls	r3, r3, #18
   191e6:	f100 0604 	add.w	r6, r0, #4
   191ea:	d41a      	bmi.n	19222 <conn_auto_initiate+0x52>
   191ec:	78c3      	ldrb	r3, [r0, #3]
   191ee:	b123      	cbz	r3, 191fa <conn_auto_initiate+0x2a>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
   191f0:	4b31      	ldr	r3, [pc, #196]	; (192b8 <conn_auto_initiate+0xe8>)
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   191f2:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   191f6:	071d      	lsls	r5, r3, #28
   191f8:	d513      	bpl.n	19222 <conn_auto_initiate+0x52>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   191fa:	2102      	movs	r1, #2
   191fc:	f242 0016 	movw	r0, #8214	; 0x2016
   19200:	f7ff fde8 	bl	18dd4 <bt_hci_cmd_create>
	if (!buf) {
   19204:	4605      	mov	r5, r0
   19206:	b160      	cbz	r0, 19222 <conn_auto_initiate+0x52>
   19208:	2102      	movs	r1, #2
   1920a:	3008      	adds	r0, #8
   1920c:	f00d fff4 	bl	271f8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   19210:	8823      	ldrh	r3, [r4, #0]
   19212:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   19214:	4629      	mov	r1, r5
   19216:	f242 0016 	movw	r0, #8214	; 0x2016
   1921a:	f7ff fe13 	bl	18e44 <bt_hci_cmd_send>
}
   1921e:	b004      	add	sp, #16
   19220:	bd70      	pop	{r4, r5, r6, pc}
   19222:	f3bf 8f5b 	dmb	ish
   19226:	6863      	ldr	r3, [r4, #4]
   19228:	4d23      	ldr	r5, [pc, #140]	; (192b8 <conn_auto_initiate+0xe8>)
   1922a:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   1922e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   19232:	f3c3 3100 	ubfx	r1, r3, #12, #1
   19236:	d11a      	bne.n	1926e <conn_auto_initiate+0x9e>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   19238:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
   1923c:	07d8      	lsls	r0, r3, #31
   1923e:	d516      	bpl.n	1926e <conn_auto_initiate+0x9e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   19240:	2302      	movs	r3, #2
   19242:	9100      	str	r1, [sp, #0]
   19244:	461a      	mov	r2, r3
   19246:	4620      	mov	r0, r4
   19248:	f00d f8c6 	bl	263d8 <bt_le_set_phy>
		if (!err) {
   1924c:	4601      	mov	r1, r0
   1924e:	b920      	cbnz	r0, 1925a <conn_auto_initiate+0x8a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   19250:	2180      	movs	r1, #128	; 0x80
   19252:	4630      	mov	r0, r6
   19254:	f00d f864 	bl	26320 <atomic_or>
			return;
   19258:	e7e1      	b.n	1921e <conn_auto_initiate+0x4e>
   1925a:	4a18      	ldr	r2, [pc, #96]	; (192bc <conn_auto_initiate+0xec>)
   1925c:	4b18      	ldr	r3, [pc, #96]	; (192c0 <conn_auto_initiate+0xf0>)
		BT_ERR("Failed to set LE PHY (%d)", err);
   1925e:	4819      	ldr	r0, [pc, #100]	; (192c4 <conn_auto_initiate+0xf4>)
   19260:	1ad2      	subs	r2, r2, r3
   19262:	08d2      	lsrs	r2, r2, #3
   19264:	0192      	lsls	r2, r2, #6
   19266:	f042 0201 	orr.w	r2, r2, #1
   1926a:	f00a fe07 	bl	23e7c <log_1>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   1926e:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   19272:	069a      	lsls	r2, r3, #26
   19274:	d5d3      	bpl.n	1921e <conn_auto_initiate+0x4e>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   19276:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   1927a:	689b      	ldr	r3, [r3, #8]
   1927c:	079b      	lsls	r3, r3, #30
   1927e:	d5ce      	bpl.n	1921e <conn_auto_initiate+0x4e>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   19280:	f10d 010e 	add.w	r1, sp, #14
   19284:	a803      	add	r0, sp, #12
   19286:	f7ff ff79 	bl	1917c <hci_le_read_max_data_len>
			if (!err) {
   1928a:	2800      	cmp	r0, #0
   1928c:	d1c7      	bne.n	1921e <conn_auto_initiate+0x4e>
				err = bt_le_set_data_len(conn,
   1928e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   19292:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   19296:	4620      	mov	r0, r4
   19298:	f00d f881 	bl	2639e <bt_le_set_data_len>
				if (err) {
   1929c:	4601      	mov	r1, r0
   1929e:	2800      	cmp	r0, #0
   192a0:	d0bd      	beq.n	1921e <conn_auto_initiate+0x4e>
   192a2:	4b07      	ldr	r3, [pc, #28]	; (192c0 <conn_auto_initiate+0xf0>)
   192a4:	4a05      	ldr	r2, [pc, #20]	; (192bc <conn_auto_initiate+0xec>)
					BT_ERR("Failed to set data len (%d)", err);
   192a6:	4808      	ldr	r0, [pc, #32]	; (192c8 <conn_auto_initiate+0xf8>)
   192a8:	1ad2      	subs	r2, r2, r3
   192aa:	08d2      	lsrs	r2, r2, #3
   192ac:	0192      	lsls	r2, r2, #6
   192ae:	f042 0201 	orr.w	r2, r2, #1
   192b2:	f00a fde3 	bl	23e7c <log_1>
		}
   192b6:	e7b2      	b.n	1921e <conn_auto_initiate+0x4e>
   192b8:	200002b0 	.word	0x200002b0
   192bc:	00028e24 	.word	0x00028e24
   192c0:	00028dd4 	.word	0x00028dd4
   192c4:	0002b42a 	.word	0x0002b42a
   192c8:	0002b444 	.word	0x0002b444

000192cc <le_phy_update_complete>:
{
   192cc:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   192ce:	6883      	ldr	r3, [r0, #8]
   192d0:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   192d4:	4628      	mov	r0, r5
   192d6:	f7fc ffb3 	bl	16240 <bt_conn_lookup_handle>
	if (!conn) {
   192da:	4604      	mov	r4, r0
   192dc:	b960      	cbnz	r0, 192f8 <le_phy_update_complete+0x2c>
   192de:	4b14      	ldr	r3, [pc, #80]	; (19330 <le_phy_update_complete+0x64>)
   192e0:	4a14      	ldr	r2, [pc, #80]	; (19334 <le_phy_update_complete+0x68>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   192e2:	4815      	ldr	r0, [pc, #84]	; (19338 <le_phy_update_complete+0x6c>)
   192e4:	1ad2      	subs	r2, r2, r3
   192e6:	08d2      	lsrs	r2, r2, #3
   192e8:	0192      	lsls	r2, r2, #6
   192ea:	4629      	mov	r1, r5
   192ec:	f042 0201 	orr.w	r2, r2, #1
}
   192f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   192f4:	f00a bdc2 	b.w	23e7c <log_1>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   192f8:	3004      	adds	r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   192fa:	f3bf 8f5b 	dmb	ish
   192fe:	e850 3f00 	ldrex	r3, [r0]
   19302:	f023 0280 	bic.w	r2, r3, #128	; 0x80
   19306:	e840 2100 	strex	r1, r2, [r0]
   1930a:	2900      	cmp	r1, #0
   1930c:	d1f7      	bne.n	192fe <le_phy_update_complete+0x32>
   1930e:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   19312:	061b      	lsls	r3, r3, #24
   19314:	d506      	bpl.n	19324 <le_phy_update_complete+0x58>
   19316:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1931a:	f00d f801 	bl	26320 <atomic_or>
		conn_auto_initiate(conn);
   1931e:	4620      	mov	r0, r4
   19320:	f7ff ff56 	bl	191d0 <conn_auto_initiate>
	bt_conn_unref(conn);
   19324:	4620      	mov	r0, r4
}
   19326:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1932a:	f00c bc1d 	b.w	25b68 <bt_conn_unref>
   1932e:	bf00      	nop
   19330:	00028dd4 	.word	0x00028dd4
   19334:	00028e24 	.word	0x00028e24
   19338:	0002b114 	.word	0x0002b114

0001933c <le_remote_feat_complete>:
{
   1933c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   1933e:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   19340:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   19344:	4630      	mov	r0, r6
   19346:	f7fc ff7b 	bl	16240 <bt_conn_lookup_handle>
	if (!conn) {
   1934a:	4604      	mov	r4, r0
   1934c:	b960      	cbnz	r0, 19368 <le_remote_feat_complete+0x2c>
   1934e:	4a10      	ldr	r2, [pc, #64]	; (19390 <le_remote_feat_complete+0x54>)
   19350:	4b10      	ldr	r3, [pc, #64]	; (19394 <le_remote_feat_complete+0x58>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   19352:	4811      	ldr	r0, [pc, #68]	; (19398 <le_remote_feat_complete+0x5c>)
   19354:	1ad2      	subs	r2, r2, r3
   19356:	08d2      	lsrs	r2, r2, #3
   19358:	0192      	lsls	r2, r2, #6
   1935a:	4631      	mov	r1, r6
   1935c:	f042 0201 	orr.w	r2, r2, #1
}
   19360:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   19364:	f00a bd8a 	b.w	23e7c <log_1>
	if (!evt->status) {
   19368:	782b      	ldrb	r3, [r5, #0]
   1936a:	b923      	cbnz	r3, 19376 <le_remote_feat_complete+0x3a>
		memcpy(conn->le.features, evt->features,
   1936c:	2208      	movs	r2, #8
   1936e:	1ce9      	adds	r1, r5, #3
   19370:	30ac      	adds	r0, #172	; 0xac
   19372:	f00b fd85 	bl	24e80 <memcpy>
   19376:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   1937a:	1d20      	adds	r0, r4, #4
   1937c:	f00c ffd0 	bl	26320 <atomic_or>
	conn_auto_initiate(conn);
   19380:	4620      	mov	r0, r4
   19382:	f7ff ff25 	bl	191d0 <conn_auto_initiate>
	bt_conn_unref(conn);
   19386:	4620      	mov	r0, r4
}
   19388:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   1938c:	f00c bbec 	b.w	25b68 <bt_conn_unref>
   19390:	00028e24 	.word	0x00028e24
   19394:	00028dd4 	.word	0x00028dd4
   19398:	0002b114 	.word	0x0002b114

0001939c <bt_hci_le_enh_conn_complete>:
{
   1939c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   193a0:	f8b0 9001 	ldrh.w	r9, [r0, #1]
		if (disconnected_handles[i] == handle) {
   193a4:	4a8d      	ldr	r2, [pc, #564]	; (195dc <bt_hci_le_enh_conn_complete+0x240>)
	handle |= ~BT_ACL_HANDLE_MASK;
   193a6:	ea6f 5309 	mvn.w	r3, r9, lsl #20
		if (disconnected_handles[i] == handle) {
   193aa:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   193ac:	ea6f 5313 	mvn.w	r3, r3, lsr #20
{
   193b0:	4604      	mov	r4, r0
		if (disconnected_handles[i] == handle) {
   193b2:	b29b      	uxth	r3, r3
   193b4:	4299      	cmp	r1, r3
   193b6:	f04f 0800 	mov.w	r8, #0
{
   193ba:	b087      	sub	sp, #28
			disconnected_handles[i] = 0;
   193bc:	bf04      	itt	eq
   193be:	f8a2 8000 	strheq.w	r8, [r2]
			return true;
   193c2:	f04f 0801 	moveq.w	r8, #1
	bt_id_pending_keys_update();
   193c6:	f000 feaf 	bl	1a128 <bt_id_pending_keys_update>
	if (evt->status) {
   193ca:	7825      	ldrb	r5, [r4, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   193cc:	fa1f f789 	uxth.w	r7, r9
	if (evt->status) {
   193d0:	b3b5      	cbz	r5, 19440 <bt_hci_le_enh_conn_complete+0xa4>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   193d2:	2d3c      	cmp	r5, #60	; 0x3c
   193d4:	d128      	bne.n	19428 <bt_hci_le_enh_conn_complete+0x8c>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   193d6:	f7fb f983 	bl	146e0 <bt_le_adv_lookup_legacy>
   193da:	f3bf 8f5b 	dmb	ish
   193de:	3010      	adds	r0, #16
   193e0:	e850 3f00 	ldrex	r3, [r0]
   193e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   193e8:	e840 3200 	strex	r2, r3, [r0]
   193ec:	2a00      	cmp	r2, #0
   193ee:	d1f7      	bne.n	193e0 <bt_hci_le_enh_conn_complete+0x44>
   193f0:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   193f4:	2000      	movs	r0, #0
   193f6:	f7ff f9b5 	bl	18764 <find_pending_connect.part.0>
		if (!conn) {
   193fa:	4604      	mov	r4, r0
   193fc:	b960      	cbnz	r0, 19418 <bt_hci_le_enh_conn_complete+0x7c>
   193fe:	4978      	ldr	r1, [pc, #480]	; (195e0 <bt_hci_le_enh_conn_complete+0x244>)
   19400:	4b78      	ldr	r3, [pc, #480]	; (195e4 <bt_hci_le_enh_conn_complete+0x248>)
			BT_ERR("No pending peripheral connection");
   19402:	4879      	ldr	r0, [pc, #484]	; (195e8 <bt_hci_le_enh_conn_complete+0x24c>)
   19404:	1ac9      	subs	r1, r1, r3
   19406:	08c9      	lsrs	r1, r1, #3
   19408:	0189      	lsls	r1, r1, #6
   1940a:	f041 0101 	orr.w	r1, r1, #1
   1940e:	f00a fd28 	bl	23e62 <log_0>
}
   19412:	b007      	add	sp, #28
   19414:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   19418:	7305      	strb	r5, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1941a:	2100      	movs	r1, #0
   1941c:	f7fc ff1c 	bl	16258 <bt_conn_set_state>
		bt_conn_unref(conn);
   19420:	4620      	mov	r0, r4
	bt_conn_unref(conn);
   19422:	f00c fba1 	bl	25b68 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   19426:	e7f4      	b.n	19412 <bt_hci_le_enh_conn_complete+0x76>
   19428:	4b6e      	ldr	r3, [pc, #440]	; (195e4 <bt_hci_le_enh_conn_complete+0x248>)
   1942a:	4a6d      	ldr	r2, [pc, #436]	; (195e0 <bt_hci_le_enh_conn_complete+0x244>)
		BT_WARN("Unexpected status 0x%02x", evt->status);
   1942c:	486f      	ldr	r0, [pc, #444]	; (195ec <bt_hci_le_enh_conn_complete+0x250>)
   1942e:	1ad2      	subs	r2, r2, r3
   19430:	08d2      	lsrs	r2, r2, #3
   19432:	0192      	lsls	r2, r2, #6
   19434:	f042 0202 	orr.w	r2, r2, #2
   19438:	4629      	mov	r1, r5
   1943a:	f00a fd1f 	bl	23e7c <log_1>
		return;
   1943e:	e7e8      	b.n	19412 <bt_hci_le_enh_conn_complete+0x76>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   19440:	7923      	ldrb	r3, [r4, #4]
   19442:	3b02      	subs	r3, #2
   19444:	2b01      	cmp	r3, #1
   19446:	f104 0604 	add.w	r6, r4, #4
   1944a:	d846      	bhi.n	194da <bt_hci_le_enh_conn_complete+0x13e>
	memcpy(dst, src, sizeof(*dst));
   1944c:	2207      	movs	r2, #7
   1944e:	4631      	mov	r1, r6
   19450:	a804      	add	r0, sp, #16
   19452:	f00b fd15 	bl	24e80 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   19456:	f89d 3010 	ldrb.w	r3, [sp, #16]
	memcpy(dst, src, sizeof(*dst));
   1945a:	2206      	movs	r2, #6
   1945c:	3b02      	subs	r3, #2
   1945e:	f104 0111 	add.w	r1, r4, #17
   19462:	f10d 0009 	add.w	r0, sp, #9
   19466:	f88d 3010 	strb.w	r3, [sp, #16]
   1946a:	f00b fd09 	bl	24e80 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   1946e:	2301      	movs	r3, #1
   19470:	f88d 3008 	strb.w	r3, [sp, #8]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   19474:	78e3      	ldrb	r3, [r4, #3]
   19476:	2b01      	cmp	r3, #1
   19478:	d119      	bne.n	194ae <bt_hci_le_enh_conn_complete+0x112>
   1947a:	a804      	add	r0, sp, #16
   1947c:	f7ff f972 	bl	18764 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   19480:	78e3      	ldrb	r3, [r4, #3]
   19482:	2b01      	cmp	r3, #1
   19484:	4605      	mov	r5, r0
   19486:	d111      	bne.n	194ac <bt_hci_le_enh_conn_complete+0x110>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   19488:	f7fb f92a 	bl	146e0 <bt_le_adv_lookup_legacy>
   1948c:	f3bf 8f5b 	dmb	ish
   19490:	f100 0310 	add.w	r3, r0, #16
   19494:	e853 2f00 	ldrex	r2, [r3]
   19498:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1949c:	e843 2100 	strex	r1, r2, [r3]
   194a0:	2900      	cmp	r1, #0
   194a2:	d1f7      	bne.n	19494 <bt_hci_le_enh_conn_complete+0xf8>
   194a4:	f3bf 8f5b 	dmb	ish
		(void)bt_le_lim_adv_cancel_timeout(adv);
   194a8:	f00b fed3 	bl	25252 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   194ac:	bb55      	cbnz	r5, 19504 <bt_hci_le_enh_conn_complete+0x168>
   194ae:	4a4d      	ldr	r2, [pc, #308]	; (195e4 <bt_hci_le_enh_conn_complete+0x248>)
   194b0:	4c4b      	ldr	r4, [pc, #300]	; (195e0 <bt_hci_le_enh_conn_complete+0x244>)
		BT_ERR("No pending conn for peer %s",
   194b2:	4630      	mov	r0, r6
   194b4:	1aa4      	subs	r4, r4, r2
   194b6:	f7fa ffd1 	bl	1445c <bt_addr_le_str_real>
   194ba:	f7f8 fd45 	bl	11f48 <z_log_strdup>
   194be:	08e4      	lsrs	r4, r4, #3
   194c0:	01a4      	lsls	r4, r4, #6
   194c2:	f044 0401 	orr.w	r4, r4, #1
   194c6:	4601      	mov	r1, r0
   194c8:	4622      	mov	r2, r4
   194ca:	4849      	ldr	r0, [pc, #292]	; (195f0 <bt_hci_le_enh_conn_complete+0x254>)
   194cc:	f00a fcd6 	bl	23e7c <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   194d0:	211f      	movs	r1, #31
   194d2:	4638      	mov	r0, r7
   194d4:	f00c ff48 	bl	26368 <bt_hci_disconnect>
		return;
   194d8:	e79b      	b.n	19412 <bt_hci_le_enh_conn_complete+0x76>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   194da:	78e3      	ldrb	r3, [r4, #3]
   194dc:	2b01      	cmp	r3, #1
   194de:	bf04      	itt	eq
   194e0:	4b44      	ldreq	r3, [pc, #272]	; (195f4 <bt_hci_le_enh_conn_complete+0x258>)
   194e2:	f893 5067 	ldrbeq.w	r5, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   194e6:	4631      	mov	r1, r6
   194e8:	4628      	mov	r0, r5
   194ea:	f00d f89d 	bl	26628 <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
   194ee:	2207      	movs	r2, #7
   194f0:	4601      	mov	r1, r0
   194f2:	a804      	add	r0, sp, #16
   194f4:	f00b fcc4 	bl	24e80 <memcpy>
   194f8:	2207      	movs	r2, #7
   194fa:	4631      	mov	r1, r6
   194fc:	a802      	add	r0, sp, #8
   194fe:	f00b fcbf 	bl	24e80 <memcpy>
}
   19502:	e7b7      	b.n	19474 <bt_hci_le_enh_conn_complete+0xd8>
	conn->handle = handle;
   19504:	4628      	mov	r0, r5
	memcpy(dst, src, sizeof(*dst));
   19506:	2207      	movs	r2, #7
   19508:	f820 9b88 	strh.w	r9, [r0], #136
   1950c:	a904      	add	r1, sp, #16
   1950e:	f00b fcb7 	bl	24e80 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   19512:	7e22      	ldrb	r2, [r4, #24]
   19514:	7de3      	ldrb	r3, [r4, #23]
   19516:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1951a:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   1951e:	7ea2      	ldrb	r2, [r4, #26]
   19520:	7e63      	ldrb	r3, [r4, #25]
   19522:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   19526:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1952a:	7ee3      	ldrb	r3, [r4, #27]
   1952c:	7f22      	ldrb	r2, [r4, #28]
   1952e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   19532:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
   19536:	78e7      	ldrb	r7, [r4, #3]
   19538:	70ef      	strb	r7, [r5, #3]
	conn->err = 0U;
   1953a:	2300      	movs	r3, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1953c:	2f01      	cmp	r7, #1
	conn->err = 0U;
   1953e:	732b      	strb	r3, [r5, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   19540:	d12e      	bne.n	195a0 <bt_hci_le_enh_conn_complete+0x204>
   19542:	2207      	movs	r2, #7
   19544:	a902      	add	r1, sp, #8
   19546:	f105 008f 	add.w	r0, r5, #143	; 0x8f
   1954a:	f00b fc99 	bl	24e80 <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   1954e:	f7fb f8c7 	bl	146e0 <bt_le_adv_lookup_legacy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19552:	f3bf 8f5b 	dmb	ish
   19556:	6902      	ldr	r2, [r0, #16]
   19558:	4e26      	ldr	r6, [pc, #152]	; (195f4 <bt_hci_le_enh_conn_complete+0x258>)
   1955a:	f3bf 8f5b 	dmb	ish
			if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   1955e:	f412 5f80 	tst.w	r2, #4096	; 0x1000
   19562:	f3c2 3300 	ubfx	r3, r2, #12, #1
   19566:	d131      	bne.n	195cc <bt_hci_le_enh_conn_complete+0x230>
				if (bt_addr_cmp(&evt->local_rpa,
   19568:	340b      	adds	r4, #11
	return memcmp(a, b, sizeof(*a));
   1956a:	2206      	movs	r2, #6
				conn->le.resp_addr.type = BT_ADDR_LE_RANDOM;
   1956c:	f885 7096 	strb.w	r7, [r5, #150]	; 0x96
   19570:	4669      	mov	r1, sp
   19572:	4620      	mov	r0, r4
						BT_ADDR_ANY) != 0) {
   19574:	9300      	str	r3, [sp, #0]
   19576:	f8ad 3004 	strh.w	r3, [sp, #4]
   1957a:	f00b fc71 	bl	24e60 <memcmp>
   1957e:	4603      	mov	r3, r0
	memcpy(dst, src, sizeof(*dst));
   19580:	2206      	movs	r2, #6
   19582:	f105 0097 	add.w	r0, r5, #151	; 0x97
				if (bt_addr_cmp(&evt->local_rpa,
   19586:	b1f3      	cbz	r3, 195c6 <bt_hci_le_enh_conn_complete+0x22a>
   19588:	4621      	mov	r1, r4
	memcpy(dst, src, sizeof(*dst));
   1958a:	f00b fc79 	bl	24e80 <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   1958e:	f8d6 10dc 	ldr.w	r1, [r6, #220]	; 0xdc
   19592:	2200      	movs	r2, #0
   19594:	f001 0340 	and.w	r3, r1, #64	; 0x40
   19598:	4313      	orrs	r3, r2
   1959a:	d001      	beq.n	195a0 <bt_hci_le_enh_conn_complete+0x204>
			bt_le_adv_resume();
   1959c:	f7fb fa72 	bl	14a84 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   195a0:	2107      	movs	r1, #7
   195a2:	4628      	mov	r0, r5
   195a4:	f7fc fe58 	bl	16258 <bt_conn_set_state>
	if (is_disconnected) {
   195a8:	f1b8 0f00 	cmp.w	r8, #0
   195ac:	d003      	beq.n	195b6 <bt_hci_le_enh_conn_complete+0x21a>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   195ae:	2101      	movs	r1, #1
   195b0:	4628      	mov	r0, r5
   195b2:	f7fc fe51 	bl	16258 <bt_conn_set_state>
	bt_conn_connected(conn);
   195b6:	4628      	mov	r0, r5
   195b8:	f00c fb12 	bl	25be0 <bt_conn_connected>
	conn_auto_initiate(conn);
   195bc:	4628      	mov	r0, r5
   195be:	f7ff fe07 	bl	191d0 <conn_auto_initiate>
	bt_conn_unref(conn);
   195c2:	4628      	mov	r0, r5
   195c4:	e72d      	b.n	19422 <bt_hci_le_enh_conn_complete+0x86>
	memcpy(dst, src, sizeof(*dst));
   195c6:	f106 0161 	add.w	r1, r6, #97	; 0x61
   195ca:	e7de      	b.n	1958a <bt_hci_le_enh_conn_complete+0x1ee>
						&bt_dev.id_addr[conn->id]);
   195cc:	7a29      	ldrb	r1, [r5, #8]
   195ce:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
	memcpy(dst, src, sizeof(*dst));
   195d2:	2207      	movs	r2, #7
   195d4:	4431      	add	r1, r6
   195d6:	f105 0096 	add.w	r0, r5, #150	; 0x96
   195da:	e7d6      	b.n	1958a <bt_hci_le_enh_conn_complete+0x1ee>
   195dc:	2000282a 	.word	0x2000282a
   195e0:	00028e24 	.word	0x00028e24
   195e4:	00028dd4 	.word	0x00028dd4
   195e8:	0002b460 	.word	0x0002b460
   195ec:	0002b481 	.word	0x0002b481
   195f0:	0002b49a 	.word	0x0002b49a
   195f4:	200002b0 	.word	0x200002b0

000195f8 <le_legacy_conn_complete>:
{
   195f8:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   195fa:	6881      	ldr	r1, [r0, #8]
{
   195fc:	b08b      	sub	sp, #44	; 0x2c
	enh.status         = evt->status;
   195fe:	780b      	ldrb	r3, [r1, #0]
   19600:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   19604:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   19608:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   1960c:	78cb      	ldrb	r3, [r1, #3]
   1960e:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   19612:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   19616:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   1961a:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   1961e:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   19622:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   19626:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   1962a:	7c4b      	ldrb	r3, [r1, #17]
   1962c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   19630:	2207      	movs	r2, #7
   19632:	3104      	adds	r1, #4
   19634:	a803      	add	r0, sp, #12
   19636:	f00b fc23 	bl	24e80 <memcpy>
	memcpy(dst, src, sizeof(*dst));
   1963a:	490b      	ldr	r1, [pc, #44]	; (19668 <le_legacy_conn_complete+0x70>)
   1963c:	2206      	movs	r2, #6
   1963e:	f10d 0013 	add.w	r0, sp, #19
   19642:	f00b fc1d 	bl	24e80 <memcpy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   19646:	2300      	movs	r3, #0
   19648:	2206      	movs	r2, #6
   1964a:	4669      	mov	r1, sp
   1964c:	f10d 0019 	add.w	r0, sp, #25
   19650:	9300      	str	r3, [sp, #0]
   19652:	f8ad 3004 	strh.w	r3, [sp, #4]
   19656:	f00b fc13 	bl	24e80 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   1965a:	a802      	add	r0, sp, #8
   1965c:	f7ff fe9e 	bl	1939c <bt_hci_le_enh_conn_complete>
}
   19660:	b00b      	add	sp, #44	; 0x2c
   19662:	f85d fb04 	ldr.w	pc, [sp], #4
   19666:	bf00      	nop
   19668:	20000311 	.word	0x20000311

0001966c <bt_unpair>:
{
   1966c:	b530      	push	{r4, r5, lr}
   1966e:	b085      	sub	sp, #20
   19670:	460d      	mov	r5, r1
   19672:	f88d 0007 	strb.w	r0, [sp, #7]
	if (id >= CONFIG_BT_ID_MAX) {
   19676:	b9d0      	cbnz	r0, 196ae <bt_unpair+0x42>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   19678:	b949      	cbnz	r1, 1968e <bt_unpair+0x22>
		bt_foreach_bond(id, unpair_remote, &id);
   1967a:	490e      	ldr	r1, [pc, #56]	; (196b4 <bt_unpair+0x48>)
   1967c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   19680:	f10d 0207 	add.w	r2, sp, #7
   19684:	f001 f924 	bl	1a8d0 <bt_foreach_bond>
		return 0;
   19688:	2000      	movs	r0, #0
}
   1968a:	b005      	add	sp, #20
   1968c:	bd30      	pop	{r4, r5, pc}
	    (!addr || !bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   1968e:	9002      	str	r0, [sp, #8]
	return memcmp(a, b, sizeof(*a));
   19690:	2207      	movs	r2, #7
   19692:	f8cd 000b 	str.w	r0, [sp, #11]
   19696:	a902      	add	r1, sp, #8
   19698:	4628      	mov	r0, r5
   1969a:	f00b fbe1 	bl	24e60 <memcmp>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1969e:	2800      	cmp	r0, #0
   196a0:	d0eb      	beq.n	1967a <bt_unpair+0xe>
	unpair(id, addr);
   196a2:	f89d 0007 	ldrb.w	r0, [sp, #7]
   196a6:	4629      	mov	r1, r5
   196a8:	f7fe fe96 	bl	183d8 <unpair>
	return 0;
   196ac:	e7ec      	b.n	19688 <bt_unpair+0x1c>
		return -EINVAL;
   196ae:	f06f 0015 	mvn.w	r0, #21
   196b2:	e7ea      	b.n	1968a <bt_unpair+0x1e>
   196b4:	0002633f 	.word	0x0002633f

000196b8 <bt_security_err_get>:
	switch (hci_err) {
   196b8:	2829      	cmp	r0, #41	; 0x29
   196ba:	bf9a      	itte	ls
   196bc:	4b01      	ldrls	r3, [pc, #4]	; (196c4 <bt_security_err_get+0xc>)
   196be:	5c18      	ldrbls	r0, [r3, r0]
{
   196c0:	2009      	movhi	r0, #9
}
   196c2:	4770      	bx	lr
   196c4:	0002b712 	.word	0x0002b712

000196c8 <hci_event_prio>:
{
   196c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   196cc:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   196ce:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   196d2:	4630      	mov	r0, r6
   196d4:	f00d fdc7 	bl	27266 <net_buf_simple_headroom>
	state->len = buf->len;
   196d8:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   196dc:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   196e0:	4605      	mov	r5, r0
   196e2:	d80c      	bhi.n	196fe <hci_event_prio+0x36>
   196e4:	4a1c      	ldr	r2, [pc, #112]	; (19758 <hci_event_prio+0x90>)
   196e6:	491d      	ldr	r1, [pc, #116]	; (1975c <hci_event_prio+0x94>)
   196e8:	481d      	ldr	r0, [pc, #116]	; (19760 <hci_event_prio+0x98>)
   196ea:	f640 5327 	movw	r3, #3367	; 0xd27
   196ee:	f00b fa27 	bl	24b40 <printk>
   196f2:	4040      	eors	r0, r0
   196f4:	f380 8811 	msr	BASEPRI, r0
   196f8:	f04f 0003 	mov.w	r0, #3
   196fc:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   196fe:	2102      	movs	r1, #2
   19700:	4630      	mov	r0, r6
   19702:	f00d fda0 	bl	27246 <net_buf_simple_pull_mem>
   19706:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   19708:	7800      	ldrb	r0, [r0, #0]
   1970a:	f00c fddf 	bl	262cc <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1970e:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   19710:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   19712:	d40c      	bmi.n	1972e <hci_event_prio+0x66>
   19714:	4a10      	ldr	r2, [pc, #64]	; (19758 <hci_event_prio+0x90>)
   19716:	4913      	ldr	r1, [pc, #76]	; (19764 <hci_event_prio+0x9c>)
   19718:	4811      	ldr	r0, [pc, #68]	; (19760 <hci_event_prio+0x98>)
   1971a:	f640 532b 	movw	r3, #3371	; 0xd2b
   1971e:	f00b fa0f 	bl	24b40 <printk>
   19722:	4040      	eors	r0, r0
   19724:	f380 8811 	msr	BASEPRI, r0
   19728:	f04f 0003 	mov.w	r0, #3
   1972c:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   1972e:	2305      	movs	r3, #5
   19730:	4a0d      	ldr	r2, [pc, #52]	; (19768 <hci_event_prio+0xa0>)
   19732:	7838      	ldrb	r0, [r7, #0]
   19734:	4621      	mov	r1, r4
   19736:	f7ff f8d1 	bl	188dc <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1973a:	07b3      	lsls	r3, r6, #30
   1973c:	d507      	bpl.n	1974e <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   1973e:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   19740:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   19744:	fa10 f585 	uxtah	r5, r0, r5
   19748:	60a5      	str	r5, [r4, #8]
}
   1974a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   1974e:	4620      	mov	r0, r4
}
   19750:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   19754:	f003 bcc4 	b.w	1d0e0 <net_buf_unref>
   19758:	0002b250 	.word	0x0002b250
   1975c:	0002b284 	.word	0x0002b284
   19760:	0002ab85 	.word	0x0002ab85
   19764:	0002b4b6 	.word	0x0002b4b6
   19768:	00029720 	.word	0x00029720

0001976c <bt_recv>:
{
   1976c:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1976e:	7d01      	ldrb	r1, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   19770:	2901      	cmp	r1, #1
{
   19772:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   19774:	d007      	beq.n	19786 <bt_recv+0x1a>
   19776:	2903      	cmp	r1, #3
   19778:	d113      	bne.n	197a2 <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
   1977a:	4812      	ldr	r0, [pc, #72]	; (197c4 <bt_recv+0x58>)
   1977c:	4629      	mov	r1, r5
   1977e:	f00d fd08 	bl	27192 <net_buf_put>
		return 0;
   19782:	2000      	movs	r0, #0
   19784:	e00c      	b.n	197a0 <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   19786:	6883      	ldr	r3, [r0, #8]
   19788:	7818      	ldrb	r0, [r3, #0]
   1978a:	f00c fd9f 	bl	262cc <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1978e:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   19790:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   19792:	d502      	bpl.n	1979a <bt_recv+0x2e>
			hci_event_prio(buf);
   19794:	4628      	mov	r0, r5
   19796:	f7ff ff97 	bl	196c8 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1979a:	f014 0002 	ands.w	r0, r4, #2
   1979e:	d1ec      	bne.n	1977a <bt_recv+0xe>
}
   197a0:	bd38      	pop	{r3, r4, r5, pc}
   197a2:	4b09      	ldr	r3, [pc, #36]	; (197c8 <bt_recv+0x5c>)
   197a4:	4a09      	ldr	r2, [pc, #36]	; (197cc <bt_recv+0x60>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   197a6:	480a      	ldr	r0, [pc, #40]	; (197d0 <bt_recv+0x64>)
   197a8:	1ad2      	subs	r2, r2, r3
   197aa:	08d2      	lsrs	r2, r2, #3
   197ac:	0192      	lsls	r2, r2, #6
   197ae:	f042 0201 	orr.w	r2, r2, #1
   197b2:	f00a fb63 	bl	23e7c <log_1>
		net_buf_unref(buf);
   197b6:	4628      	mov	r0, r5
   197b8:	f003 fc92 	bl	1d0e0 <net_buf_unref>
		return -EINVAL;
   197bc:	f06f 0015 	mvn.w	r0, #21
   197c0:	e7ee      	b.n	197a0 <bt_recv+0x34>
   197c2:	bf00      	nop
   197c4:	200003ec 	.word	0x200003ec
   197c8:	00028dd4 	.word	0x00028dd4
   197cc:	00028e24 	.word	0x00028e24
   197d0:	0002b4cf 	.word	0x0002b4cf

000197d4 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   197d4:	4a08      	ldr	r2, [pc, #32]	; (197f8 <bt_hci_driver_register+0x24>)
{
   197d6:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   197d8:	f8d2 016c 	ldr.w	r0, [r2, #364]	; 0x16c
   197dc:	b930      	cbnz	r0, 197ec <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   197de:	68d9      	ldr	r1, [r3, #12]
   197e0:	b139      	cbz	r1, 197f2 <bt_hci_driver_register+0x1e>
   197e2:	6919      	ldr	r1, [r3, #16]
   197e4:	b129      	cbz	r1, 197f2 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   197e6:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	return 0;
   197ea:	4770      	bx	lr
		return -EALREADY;
   197ec:	f06f 0077 	mvn.w	r0, #119	; 0x77
   197f0:	4770      	bx	lr
		return -EINVAL;
   197f2:	f06f 0015 	mvn.w	r0, #21
}
   197f6:	4770      	bx	lr
   197f8:	200002b0 	.word	0x200002b0

000197fc <bt_finalize_init>:
{
   197fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19800:	4c2d      	ldr	r4, [pc, #180]	; (198b8 <bt_finalize_init+0xbc>)
   19802:	4d2e      	ldr	r5, [pc, #184]	; (198bc <bt_finalize_init+0xc0>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   19804:	4e2e      	ldr	r6, [pc, #184]	; (198c0 <bt_finalize_init+0xc4>)
		BT_INFO("Identity[%d]: %s",
   19806:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 198d8 <bt_finalize_init+0xdc>
{
   1980a:	b087      	sub	sp, #28
   1980c:	2102      	movs	r1, #2
   1980e:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
   19812:	f00c fd85 	bl	26320 <atomic_or>
   19816:	4b2b      	ldr	r3, [pc, #172]	; (198c4 <bt_finalize_init+0xc8>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   19818:	492b      	ldr	r1, [pc, #172]	; (198c8 <bt_finalize_init+0xcc>)
   1981a:	1aed      	subs	r5, r5, r3
   1981c:	79e3      	ldrb	r3, [r4, #7]
   1981e:	4620      	mov	r0, r4
   19820:	2b01      	cmp	r3, #1
   19822:	bf88      	it	hi
   19824:	460e      	movhi	r6, r1
   19826:	f7fa fe19 	bl	1445c <bt_addr_le_str_real>
   1982a:	f7f8 fb8d 	bl	11f48 <z_log_strdup>
   1982e:	08ed      	lsrs	r5, r5, #3
   19830:	01ad      	lsls	r5, r5, #6
   19832:	f045 0703 	orr.w	r7, r5, #3
   19836:	4602      	mov	r2, r0
   19838:	4631      	mov	r1, r6
   1983a:	4824      	ldr	r0, [pc, #144]	; (198cc <bt_finalize_init+0xd0>)
   1983c:	463b      	mov	r3, r7
   1983e:	f00a fb31 	bl	23ea4 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
   19842:	46a0      	mov	r8, r4
   19844:	2601      	movs	r6, #1
   19846:	79e3      	ldrb	r3, [r4, #7]
   19848:	429e      	cmp	r6, r3
   1984a:	f108 0807 	add.w	r8, r8, #7
   1984e:	db25      	blt.n	1989c <bt_finalize_init+0xa0>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
   19850:	f894 6068 	ldrb.w	r6, [r4, #104]	; 0x68
   19854:	4630      	mov	r0, r6
   19856:	f7fe fd91 	bl	1837c <ver_str>
   1985a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
   1985e:	9304      	str	r3, [sp, #16]
   19860:	f045 0503 	orr.w	r5, r5, #3
   19864:	f8b4 306e 	ldrh.w	r3, [r4, #110]	; 0x6e
   19868:	9305      	str	r3, [sp, #20]
   1986a:	e9cd 0602 	strd	r0, r6, [sp, #8]
   1986e:	462b      	mov	r3, r5
   19870:	a902      	add	r1, sp, #8
   19872:	2204      	movs	r2, #4
   19874:	4816      	ldr	r0, [pc, #88]	; (198d0 <bt_finalize_init+0xd4>)
   19876:	f00a fb4a 	bl	23f0e <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
   1987a:	f894 6069 	ldrb.w	r6, [r4, #105]	; 0x69
   1987e:	4630      	mov	r0, r6
   19880:	f7fe fd7c 	bl	1837c <ver_str>
   19884:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
   19888:	f8ad 5000 	strh.w	r5, [sp]
   1988c:	4601      	mov	r1, r0
   1988e:	4632      	mov	r2, r6
   19890:	4810      	ldr	r0, [pc, #64]	; (198d4 <bt_finalize_init+0xd8>)
   19892:	f00a fb20 	bl	23ed6 <log_3>
}
   19896:	b007      	add	sp, #28
   19898:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_INFO("Identity[%d]: %s",
   1989c:	4640      	mov	r0, r8
   1989e:	f7fa fddd 	bl	1445c <bt_addr_le_str_real>
   198a2:	f7f8 fb51 	bl	11f48 <z_log_strdup>
   198a6:	4631      	mov	r1, r6
   198a8:	4602      	mov	r2, r0
   198aa:	463b      	mov	r3, r7
   198ac:	4648      	mov	r0, r9
   198ae:	f00a faf9 	bl	23ea4 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
   198b2:	3601      	adds	r6, #1
   198b4:	e7c7      	b.n	19846 <bt_finalize_init+0x4a>
   198b6:	bf00      	nop
   198b8:	200002b0 	.word	0x200002b0
   198bc:	00028e24 	.word	0x00028e24
   198c0:	0002a0fb 	.word	0x0002a0fb
   198c4:	00028dd4 	.word	0x00028dd4
   198c8:	0002b4e3 	.word	0x0002b4e3
   198cc:	0002b4e7 	.word	0x0002b4e7
   198d0:	0002b507 	.word	0x0002b507
   198d4:	0002b545 	.word	0x0002b545
   198d8:	0002b4f6 	.word	0x0002b4f6

000198dc <init_work>:
{
   198dc:	b510      	push	{r4, lr}
	err = bt_init();
   198de:	f7f6 faab 	bl	fe38 <bt_init>
	if (ready_cb) {
   198e2:	4b03      	ldr	r3, [pc, #12]	; (198f0 <init_work+0x14>)
   198e4:	681b      	ldr	r3, [r3, #0]
   198e6:	b113      	cbz	r3, 198ee <init_work+0x12>
}
   198e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   198ec:	4718      	bx	r3
}
   198ee:	bd10      	pop	{r4, pc}
   198f0:	200024b4 	.word	0x200024b4

000198f4 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
   198f4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	int err;

	if (!bt_dev.drv) {
   198f8:	4d38      	ldr	r5, [pc, #224]	; (199dc <bt_enable+0xe8>)
   198fa:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
{
   198fe:	b088      	sub	sp, #32
   19900:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   19902:	b97b      	cbnz	r3, 19924 <bt_enable+0x30>
   19904:	4b36      	ldr	r3, [pc, #216]	; (199e0 <bt_enable+0xec>)
   19906:	4937      	ldr	r1, [pc, #220]	; (199e4 <bt_enable+0xf0>)
		BT_ERR("No HCI driver registered");
   19908:	4837      	ldr	r0, [pc, #220]	; (199e8 <bt_enable+0xf4>)
   1990a:	1ac9      	subs	r1, r1, r3
   1990c:	08c9      	lsrs	r1, r1, #3
   1990e:	0189      	lsls	r1, r1, #6
   19910:	f041 0101 	orr.w	r1, r1, #1
   19914:	f00a faa5 	bl	23e62 <log_0>
		return -ENODEV;
   19918:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   1991c:	4620      	mov	r0, r4
   1991e:	b008      	add	sp, #32
   19920:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   19924:	2101      	movs	r1, #1
   19926:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   1992a:	f00c fcf9 	bl	26320 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1992e:	07c3      	lsls	r3, r0, #31
   19930:	d451      	bmi.n	199d6 <bt_enable+0xe2>
		err = bt_settings_init();
   19932:	f001 fc9d 	bl	1b270 <bt_settings_init>
		if (err) {
   19936:	4604      	mov	r4, r0
   19938:	2800      	cmp	r0, #0
   1993a:	d1ef      	bne.n	1991c <bt_enable+0x28>
	ready_cb = cb;
   1993c:	4b2b      	ldr	r3, [pc, #172]	; (199ec <bt_enable+0xf8>)
   1993e:	f04f 0800 	mov.w	r8, #0
   19942:	601e      	str	r6, [r3, #0]
	k_thread_create(&tx_thread_data, tx_thread_stack,
   19944:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   19948:	f06f 0308 	mvn.w	r3, #8
   1994c:	e9cd 0302 	strd	r0, r3, [sp, #8]
   19950:	e9cd 0000 	strd	r0, r0, [sp]
   19954:	9004      	str	r0, [sp, #16]
   19956:	e9cd 8906 	strd	r8, r9, [sp, #24]
   1995a:	4b25      	ldr	r3, [pc, #148]	; (199f0 <bt_enable+0xfc>)
   1995c:	4925      	ldr	r1, [pc, #148]	; (199f4 <bt_enable+0x100>)
   1995e:	4826      	ldr	r0, [pc, #152]	; (199f8 <bt_enable+0x104>)
   19960:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   19964:	f008 f994 	bl	21c90 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   19968:	4924      	ldr	r1, [pc, #144]	; (199fc <bt_enable+0x108>)
   1996a:	4823      	ldr	r0, [pc, #140]	; (199f8 <bt_enable+0x104>)
   1996c:	f00e fe61 	bl	28632 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   19970:	f06f 0307 	mvn.w	r3, #7
   19974:	e9cd 4302 	strd	r4, r3, [sp, #8]
   19978:	e9cd 8906 	strd	r8, r9, [sp, #24]
   1997c:	e9cd 4400 	strd	r4, r4, [sp]
   19980:	4b1f      	ldr	r3, [pc, #124]	; (19a00 <bt_enable+0x10c>)
   19982:	4920      	ldr	r1, [pc, #128]	; (19a04 <bt_enable+0x110>)
   19984:	9404      	str	r4, [sp, #16]
   19986:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1998a:	481f      	ldr	r0, [pc, #124]	; (19a08 <bt_enable+0x114>)
   1998c:	f008 f980 	bl	21c90 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   19990:	491e      	ldr	r1, [pc, #120]	; (19a0c <bt_enable+0x118>)
   19992:	481d      	ldr	r0, [pc, #116]	; (19a08 <bt_enable+0x114>)
   19994:	f00e fe4d 	bl	28632 <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
   19998:	f000 fa22 	bl	19de0 <bt_hci_ecc_init>
	err = bt_dev.drv->open();
   1999c:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   199a0:	68db      	ldr	r3, [r3, #12]
   199a2:	4798      	blx	r3
	if (err) {
   199a4:	4604      	mov	r4, r0
   199a6:	b158      	cbz	r0, 199c0 <bt_enable+0xcc>
   199a8:	4b0d      	ldr	r3, [pc, #52]	; (199e0 <bt_enable+0xec>)
   199aa:	4a0e      	ldr	r2, [pc, #56]	; (199e4 <bt_enable+0xf0>)
   199ac:	1ad2      	subs	r2, r2, r3
   199ae:	08d2      	lsrs	r2, r2, #3
		BT_ERR("HCI driver open failed (%d)", err);
   199b0:	0192      	lsls	r2, r2, #6
   199b2:	4601      	mov	r1, r0
   199b4:	f042 0201 	orr.w	r2, r2, #1
   199b8:	4815      	ldr	r0, [pc, #84]	; (19a10 <bt_enable+0x11c>)
   199ba:	f00a fa5f 	bl	23e7c <log_1>
		return err;
   199be:	e7ad      	b.n	1991c <bt_enable+0x28>
	if (!cb) {
   199c0:	b926      	cbnz	r6, 199cc <bt_enable+0xd8>
}
   199c2:	b008      	add	sp, #32
   199c4:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
		return bt_init();
   199c8:	f7f6 ba36 	b.w	fe38 <bt_init>
	k_work_submit(&bt_dev.init);
   199cc:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   199d0:	f008 fcf6 	bl	223c0 <k_work_submit>
	return 0;
   199d4:	e7a2      	b.n	1991c <bt_enable+0x28>
		return -EALREADY;
   199d6:	f06f 0477 	mvn.w	r4, #119	; 0x77
   199da:	e79f      	b.n	1991c <bt_enable+0x28>
   199dc:	200002b0 	.word	0x200002b0
   199e0:	00028dd4 	.word	0x00028dd4
   199e4:	00028e24 	.word	0x00028e24
   199e8:	0002b6b4 	.word	0x0002b6b4
   199ec:	200024b4 	.word	0x200024b4
   199f0:	00018bcd 	.word	0x00018bcd
   199f4:	20004720 	.word	0x20004720
   199f8:	20001a78 	.word	0x20001a78
   199fc:	0002b6cd 	.word	0x0002b6cd
   19a00:	00018961 	.word	0x00018961
   19a04:	20003700 	.word	0x20003700
   19a08:	200019f8 	.word	0x200019f8
   19a0c:	0002b6d3 	.word	0x0002b6d3
   19a10:	0002b6d9 	.word	0x0002b6d9

00019a14 <bt_set_name>:
#else
BUILD_ASSERT(DEVICE_NAME_LEN < 248);
#endif

int bt_set_name(const char *name)
{
   19a14:	b570      	push	{r4, r5, r6, lr}
   19a16:	4604      	mov	r4, r0
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	size_t len = strlen(name);
   19a18:	f00b f9f7 	bl	24e0a <strlen>
	int err;

	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
   19a1c:	2841      	cmp	r0, #65	; 0x41
	size_t len = strlen(name);
   19a1e:	4605      	mov	r5, r0
	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
   19a20:	d825      	bhi.n	19a6e <bt_set_name+0x5a>
		return -ENOMEM;
	}

	if (!strcmp(bt_dev.name, name)) {
   19a22:	4e14      	ldr	r6, [pc, #80]	; (19a74 <bt_set_name+0x60>)
   19a24:	4621      	mov	r1, r4
   19a26:	f506 70d8 	add.w	r0, r6, #432	; 0x1b0
   19a2a:	f00b f9fe 	bl	24e2a <strcmp>
   19a2e:	b908      	cbnz	r0, 19a34 <bt_set_name+0x20>
		return 0;
   19a30:	2000      	movs	r0, #0

	return 0;
#else
	return -ENOMEM;
#endif
}
   19a32:	bd70      	pop	{r4, r5, r6, pc}
	strncpy(bt_dev.name, name, len);
   19a34:	4621      	mov	r1, r4
   19a36:	462a      	mov	r2, r5
   19a38:	f506 70d8 	add.w	r0, r6, #432	; 0x1b0
   19a3c:	f00b f9d2 	bl	24de4 <strncpy>
	bt_dev.name[len] = '\0';
   19a40:	1973      	adds	r3, r6, r5
   19a42:	2400      	movs	r4, #0
		err = settings_save_one("bt/name", bt_dev.name, len);
   19a44:	480c      	ldr	r0, [pc, #48]	; (19a78 <bt_set_name+0x64>)
	bt_dev.name[len] = '\0';
   19a46:	f883 41b0 	strb.w	r4, [r3, #432]	; 0x1b0
		err = settings_save_one("bt/name", bt_dev.name, len);
   19a4a:	462a      	mov	r2, r5
   19a4c:	f506 71d8 	add.w	r1, r6, #432	; 0x1b0
   19a50:	f7f9 fe84 	bl	1375c <settings_save_one>
		if (err) {
   19a54:	2800      	cmp	r0, #0
   19a56:	d0eb      	beq.n	19a30 <bt_set_name+0x1c>
   19a58:	4b08      	ldr	r3, [pc, #32]	; (19a7c <bt_set_name+0x68>)
   19a5a:	4909      	ldr	r1, [pc, #36]	; (19a80 <bt_set_name+0x6c>)
			BT_WARN("Unable to store name");
   19a5c:	4809      	ldr	r0, [pc, #36]	; (19a84 <bt_set_name+0x70>)
   19a5e:	1ac9      	subs	r1, r1, r3
   19a60:	08c9      	lsrs	r1, r1, #3
   19a62:	0189      	lsls	r1, r1, #6
   19a64:	f041 0102 	orr.w	r1, r1, #2
   19a68:	f00a f9fb 	bl	23e62 <log_0>
   19a6c:	e7e0      	b.n	19a30 <bt_set_name+0x1c>
		return -ENOMEM;
   19a6e:	f06f 000b 	mvn.w	r0, #11
   19a72:	e7de      	b.n	19a32 <bt_set_name+0x1e>
   19a74:	200002b0 	.word	0x200002b0
   19a78:	0002b6f5 	.word	0x0002b6f5
   19a7c:	00028dd4 	.word	0x00028dd4
   19a80:	00028e24 	.word	0x00028e24
   19a84:	0002b6fd 	.word	0x0002b6fd

00019a88 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   19a88:	4800      	ldr	r0, [pc, #0]	; (19a8c <bt_get_name+0x4>)
   19a8a:	4770      	bx	lr
   19a8c:	20000460 	.word	0x20000460

00019a90 <ecc_thread>:

	bt_recv(buf);
}

static void ecc_thread(void *p1, void *p2, void *p3)
{
   19a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19a94:	4b6a      	ldr	r3, [pc, #424]	; (19c40 <ecc_thread+0x1b0>)
   19a96:	4d6b      	ldr	r5, [pc, #428]	; (19c44 <ecc_thread+0x1b4>)
   19a98:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 19c64 <ecc_thread+0x1d4>
	return z_impl_k_sem_take(sem, timeout);
   19a9c:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 19c68 <ecc_thread+0x1d8>
   19aa0:	1aed      	subs	r5, r5, r3
   19aa2:	08ed      	lsrs	r5, r5, #3
   19aa4:	4647      	mov	r7, r8
   19aa6:	f04f 32ff 	mov.w	r2, #4294967295
   19aaa:	f04f 33ff 	mov.w	r3, #4294967295
   19aae:	4648      	mov	r0, r9
   19ab0:	f008 f84c 	bl	21b4c <z_impl_k_sem_take>
   19ab4:	f3bf 8f5b 	dmb	ish
   19ab8:	f8d8 4000 	ldr.w	r4, [r8]
   19abc:	f3bf 8f5b 	dmb	ish
	while (true) {
		k_sem_take(&cmd_sem, K_FOREVER);

		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   19ac0:	f014 0401 	ands.w	r4, r4, #1
   19ac4:	d05a      	beq.n	19b7c <ecc_thread+0xec>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   19ac6:	f8df a194 	ldr.w	sl, [pc, #404]	; 19c5c <ecc_thread+0x1cc>
   19aca:	4c5f      	ldr	r4, [pc, #380]	; (19c48 <ecc_thread+0x1b8>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
   19acc:	4e5f      	ldr	r6, [pc, #380]	; (19c4c <ecc_thread+0x1bc>)
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   19ace:	4860      	ldr	r0, [pc, #384]	; (19c50 <ecc_thread+0x1c0>)
   19ad0:	4652      	mov	r2, sl
   19ad2:	4621      	mov	r1, r4
   19ad4:	f009 fe60 	bl	23798 <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
   19ad8:	bbe8      	cbnz	r0, 19b56 <ecc_thread+0xc6>
			BT_ERR("Failed to create ECC public/private pair");
   19ada:	01a9      	lsls	r1, r5, #6
   19adc:	485d      	ldr	r0, [pc, #372]	; (19c54 <ecc_thread+0x1c4>)
   19ade:	f041 0101 	orr.w	r1, r1, #1
   19ae2:	f00a f9be 	bl	23e62 <log_0>
			return BT_HCI_ERR_UNSPECIFIED;
   19ae6:	f04f 0a1f 	mov.w	sl, #31
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   19aea:	f04f 32ff 	mov.w	r2, #4294967295
   19aee:	f04f 33ff 	mov.w	r3, #4294967295
   19af2:	2001      	movs	r0, #1
   19af4:	f7fc f918 	bl	15d28 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   19af8:	f100 0608 	add.w	r6, r0, #8
   19afc:	2102      	movs	r1, #2
   19afe:	4604      	mov	r4, r0
   19b00:	4630      	mov	r0, r6
   19b02:	f00d fb79 	bl	271f8 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   19b06:	233e      	movs	r3, #62	; 0x3e
   19b08:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   19b0a:	2342      	movs	r3, #66	; 0x42
   19b0c:	7043      	strb	r3, [r0, #1]
   19b0e:	2101      	movs	r1, #1
   19b10:	4630      	mov	r0, r6
   19b12:	f00d fb71 	bl	271f8 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   19b16:	2308      	movs	r3, #8
   19b18:	7003      	strb	r3, [r0, #0]
   19b1a:	2141      	movs	r1, #65	; 0x41
   19b1c:	4630      	mov	r0, r6
   19b1e:	f00d fb6b 	bl	271f8 <net_buf_simple_add>
   19b22:	4606      	mov	r6, r0
	evt->status = status;
   19b24:	f800 ab01 	strb.w	sl, [r0], #1
	if (status) {
   19b28:	f1ba 0f00 	cmp.w	sl, #0
   19b2c:	d01d      	beq.n	19b6a <ecc_thread+0xda>
		(void)memset(evt->key, 0, sizeof(evt->key));
   19b2e:	2240      	movs	r2, #64	; 0x40
   19b30:	2100      	movs	r1, #0
   19b32:	f00b f9b0 	bl	24e96 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19b36:	f3bf 8f5b 	dmb	ish
   19b3a:	e857 3f00 	ldrex	r3, [r7]
   19b3e:	f023 0301 	bic.w	r3, r3, #1
   19b42:	e847 3200 	strex	r2, r3, [r7]
   19b46:	2a00      	cmp	r2, #0
   19b48:	d1f7      	bne.n	19b3a <ecc_thread+0xaa>
   19b4a:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   19b4e:	4620      	mov	r0, r4
	bt_recv(buf);
   19b50:	f7ff fe0c 	bl	1976c <bt_recv>
	while (true) {
   19b54:	e7a7      	b.n	19aa6 <ecc_thread+0x16>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
   19b56:	2220      	movs	r2, #32
   19b58:	4631      	mov	r1, r6
   19b5a:	4620      	mov	r0, r4
   19b5c:	f00b f980 	bl	24e60 <memcmp>
   19b60:	2800      	cmp	r0, #0
   19b62:	d0b4      	beq.n	19ace <ecc_thread+0x3e>
	return 0;
   19b64:	f04f 0a00 	mov.w	sl, #0
   19b68:	e7bf      	b.n	19aea <ecc_thread+0x5a>
		sys_memcpy_swap(evt->key, ecc.public_key_be, BT_PUB_KEY_COORD_LEN);
   19b6a:	4939      	ldr	r1, [pc, #228]	; (19c50 <ecc_thread+0x1c0>)
   19b6c:	f00c fcac 	bl	264c8 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[BT_PUB_KEY_COORD_LEN],
   19b70:	4939      	ldr	r1, [pc, #228]	; (19c58 <ecc_thread+0x1c8>)
   19b72:	f106 0021 	add.w	r0, r6, #33	; 0x21
   19b76:	f00c fca7 	bl	264c8 <sys_memcpy_swap.constprop.0>
   19b7a:	e7dc      	b.n	19b36 <ecc_thread+0xa6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19b7c:	f3bf 8f5b 	dmb	ish
   19b80:	f8d8 3000 	ldr.w	r3, [r8]
   19b84:	f3bf 8f5b 	dmb	ish
			emulate_le_p256_public_key_cmd();
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
   19b88:	079b      	lsls	r3, r3, #30
   19b8a:	d58c      	bpl.n	19aa6 <ecc_thread+0x16>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
   19b8c:	4933      	ldr	r1, [pc, #204]	; (19c5c <ecc_thread+0x1cc>)
   19b8e:	4830      	ldr	r0, [pc, #192]	; (19c50 <ecc_thread+0x1c0>)
   19b90:	f009 fddf 	bl	23752 <uECC_valid_public_key>
	if (ret < 0) {
   19b94:	1e01      	subs	r1, r0, #0
   19b96:	da38      	bge.n	19c0a <ecc_thread+0x17a>
		BT_ERR("public key is not valid (ret %d)", ret);
   19b98:	01aa      	lsls	r2, r5, #6
   19b9a:	4831      	ldr	r0, [pc, #196]	; (19c60 <ecc_thread+0x1d0>)
   19b9c:	f042 0201 	orr.w	r2, r2, #1
   19ba0:	f00a f96c 	bl	23e7c <log_1>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   19ba4:	f04f 32ff 	mov.w	r2, #4294967295
   19ba8:	f04f 33ff 	mov.w	r3, #4294967295
   19bac:	2001      	movs	r0, #1
   19bae:	f7fc f8bb 	bl	15d28 <bt_buf_get_rx>
   19bb2:	f100 0a08 	add.w	sl, r0, #8
   19bb6:	2102      	movs	r1, #2
   19bb8:	4606      	mov	r6, r0
   19bba:	4650      	mov	r0, sl
   19bbc:	f00d fb1c 	bl	271f8 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   19bc0:	233e      	movs	r3, #62	; 0x3e
   19bc2:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   19bc4:	2322      	movs	r3, #34	; 0x22
   19bc6:	7043      	strb	r3, [r0, #1]
   19bc8:	2101      	movs	r1, #1
   19bca:	4650      	mov	r0, sl
   19bcc:	f00d fb14 	bl	271f8 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   19bd0:	2309      	movs	r3, #9
   19bd2:	7003      	strb	r3, [r0, #0]
   19bd4:	2121      	movs	r1, #33	; 0x21
   19bd6:	4650      	mov	r0, sl
   19bd8:	f00d fb0e 	bl	271f8 <net_buf_simple_add>
   19bdc:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
   19bde:	3001      	adds	r0, #1
   19be0:	bb3c      	cbnz	r4, 19c32 <ecc_thread+0x1a2>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
   19be2:	221f      	movs	r2, #31
   19be4:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   19be6:	21ff      	movs	r1, #255	; 0xff
   19be8:	2220      	movs	r2, #32
   19bea:	f00b f954 	bl	24e96 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19bee:	f3bf 8f5b 	dmb	ish
   19bf2:	e857 3f00 	ldrex	r3, [r7]
   19bf6:	f023 0302 	bic.w	r3, r3, #2
   19bfa:	e847 3200 	strex	r2, r3, [r7]
   19bfe:	2a00      	cmp	r2, #0
   19c00:	d1f7      	bne.n	19bf2 <ecc_thread+0x162>
   19c02:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   19c06:	4630      	mov	r0, r6
   19c08:	e7a2      	b.n	19b50 <ecc_thread+0xc0>
		ret = uECC_shared_secret(ecc.public_key_be,
   19c0a:	490f      	ldr	r1, [pc, #60]	; (19c48 <ecc_thread+0x1b8>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19c0c:	f3bf 8f5b 	dmb	ish
   19c10:	f8d8 3000 	ldr.w	r3, [r8]
   19c14:	480d      	ldr	r0, [pc, #52]	; (19c4c <ecc_thread+0x1bc>)
   19c16:	f3bf 8f5b 	dmb	ish
   19c1a:	f013 0f04 	tst.w	r3, #4
   19c1e:	f101 0220 	add.w	r2, r1, #32
   19c22:	4b0e      	ldr	r3, [pc, #56]	; (19c5c <ecc_thread+0x1cc>)
   19c24:	bf18      	it	ne
   19c26:	4601      	movne	r1, r0
   19c28:	4610      	mov	r0, r2
   19c2a:	f009 fe04 	bl	23836 <uECC_shared_secret>
   19c2e:	4604      	mov	r4, r0
   19c30:	e7b8      	b.n	19ba4 <ecc_thread+0x114>
		evt->status = 0U;
   19c32:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
   19c34:	4906      	ldr	r1, [pc, #24]	; (19c50 <ecc_thread+0x1c0>)
		evt->status = 0U;
   19c36:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
   19c38:	f00c fc46 	bl	264c8 <sys_memcpy_swap.constprop.0>
   19c3c:	e7d7      	b.n	19bee <ecc_thread+0x15e>
   19c3e:	bf00      	nop
   19c40:	00028dd4 	.word	0x00028dd4
   19c44:	00028e2c 	.word	0x00028e2c
   19c48:	2000293f 	.word	0x2000293f
   19c4c:	0002b798 	.word	0x0002b798
   19c50:	2000295f 	.word	0x2000295f
   19c54:	0002b73c 	.word	0x0002b73c
   19c58:	2000297f 	.word	0x2000297f
   19c5c:	00029758 	.word	0x00029758
   19c60:	0002b765 	.word	0x0002b765
   19c64:	200024b8 	.word	0x200024b8
   19c68:	200009a0 	.word	0x200009a0

00019c6c <le_gen_dhkey>:
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
}

static uint8_t le_gen_dhkey(uint8_t *key, uint8_t key_type)
{
   19c6c:	b570      	push	{r4, r5, r6, lr}
   19c6e:	4c21      	ldr	r4, [pc, #132]	; (19cf4 <le_gen_dhkey+0x88>)
   19c70:	f3bf 8f5b 	dmb	ish
   19c74:	6823      	ldr	r3, [r4, #0]
   19c76:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   19c7a:	07da      	lsls	r2, r3, #31
{
   19c7c:	4606      	mov	r6, r0
   19c7e:	460d      	mov	r5, r1
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   19c80:	d501      	bpl.n	19c86 <le_gen_dhkey+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19c82:	200c      	movs	r0, #12
			  key_type == BT_HCI_LE_KEY_TYPE_DEBUG);

	k_sem_give(&cmd_sem);

	return BT_HCI_ERR_SUCCESS;
}
   19c84:	bd70      	pop	{r4, r5, r6, pc}
	if (key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   19c86:	2901      	cmp	r1, #1
   19c88:	d831      	bhi.n	19cee <le_gen_dhkey+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19c8a:	f3bf 8f5b 	dmb	ish
   19c8e:	e854 3f00 	ldrex	r3, [r4]
   19c92:	f043 0202 	orr.w	r2, r3, #2
   19c96:	e844 2100 	strex	r1, r2, [r4]
   19c9a:	2900      	cmp	r1, #0
   19c9c:	d1f7      	bne.n	19c8e <le_gen_dhkey+0x22>
   19c9e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
   19ca2:	079b      	lsls	r3, r3, #30
   19ca4:	d4ed      	bmi.n	19c82 <le_gen_dhkey+0x16>
	sys_memcpy_swap(ecc.public_key_be, key, BT_PUB_KEY_COORD_LEN);
   19ca6:	4814      	ldr	r0, [pc, #80]	; (19cf8 <le_gen_dhkey+0x8c>)
   19ca8:	4631      	mov	r1, r6
   19caa:	f00c fc0d 	bl	264c8 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.public_key_be[BT_PUB_KEY_COORD_LEN], &key[BT_PUB_KEY_COORD_LEN],
   19cae:	4813      	ldr	r0, [pc, #76]	; (19cfc <le_gen_dhkey+0x90>)
   19cb0:	f106 0120 	add.w	r1, r6, #32
   19cb4:	f00c fc08 	bl	264c8 <sys_memcpy_swap.constprop.0>
   19cb8:	f3bf 8f5b 	dmb	ish
	if (val) {
   19cbc:	b175      	cbz	r5, 19cdc <le_gen_dhkey+0x70>
   19cbe:	e854 3f00 	ldrex	r3, [r4]
   19cc2:	f043 0304 	orr.w	r3, r3, #4
   19cc6:	e844 3200 	strex	r2, r3, [r4]
   19cca:	2a00      	cmp	r2, #0
   19ccc:	d1f7      	bne.n	19cbe <le_gen_dhkey+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19cce:	f3bf 8f5b 	dmb	ish
	z_impl_k_sem_give(sem);
   19cd2:	480b      	ldr	r0, [pc, #44]	; (19d00 <le_gen_dhkey+0x94>)
   19cd4:	f007 ff14 	bl	21b00 <z_impl_k_sem_give>
   19cd8:	2000      	movs	r0, #0
   19cda:	e7d3      	b.n	19c84 <le_gen_dhkey+0x18>
   19cdc:	e854 3f00 	ldrex	r3, [r4]
   19ce0:	f023 0304 	bic.w	r3, r3, #4
   19ce4:	e844 3200 	strex	r2, r3, [r4]
   19ce8:	2a00      	cmp	r2, #0
   19cea:	d0f0      	beq.n	19cce <le_gen_dhkey+0x62>
   19cec:	e7f6      	b.n	19cdc <le_gen_dhkey+0x70>
		return BT_HCI_ERR_INVALID_PARAM;
   19cee:	2012      	movs	r0, #18
   19cf0:	e7c8      	b.n	19c84 <le_gen_dhkey+0x18>
   19cf2:	bf00      	nop
   19cf4:	200024b8 	.word	0x200024b8
   19cf8:	2000295f 	.word	0x2000295f
   19cfc:	2000297f 	.word	0x2000297f
   19d00:	200009a0 	.word	0x200009a0

00019d04 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
   19d04:	b570      	push	{r4, r5, r6, lr}
   19d06:	7d06      	ldrb	r6, [r0, #20]
   19d08:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
   19d0a:	b976      	cbnz	r6, 19d2a <bt_hci_ecc_send+0x26>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
   19d0c:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
   19d0e:	881d      	ldrh	r5, [r3, #0]
   19d10:	f242 0226 	movw	r2, #8230	; 0x2026
   19d14:	4295      	cmp	r5, r2
   19d16:	d045      	beq.n	19da4 <bt_hci_ecc_send+0xa0>
   19d18:	d80f      	bhi.n	19d3a <bt_hci_ecc_send+0x36>
   19d1a:	f242 0201 	movw	r2, #8193	; 0x2001
   19d1e:	4295      	cmp	r5, r2
   19d20:	d04f      	beq.n	19dc2 <bt_hci_ecc_send+0xbe>
   19d22:	f242 0325 	movw	r3, #8229	; 0x2025
   19d26:	429d      	cmp	r5, r3
   19d28:	d013      	beq.n	19d52 <bt_hci_ecc_send+0x4e>
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
   19d2a:	4b2a      	ldr	r3, [pc, #168]	; (19dd4 <bt_hci_ecc_send+0xd0>)
   19d2c:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   19d30:	4620      	mov	r0, r4
   19d32:	691b      	ldr	r3, [r3, #16]
}
   19d34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
   19d38:	4718      	bx	r3
		switch (sys_le16_to_cpu(chdr->opcode)) {
   19d3a:	f242 035e 	movw	r3, #8286	; 0x205e
   19d3e:	429d      	cmp	r5, r3
   19d40:	d1f3      	bne.n	19d2a <bt_hci_ecc_send+0x26>
	return net_buf_simple_pull(&buf->b, len);
   19d42:	2103      	movs	r1, #3
   19d44:	3008      	adds	r0, #8
   19d46:	f00d fa76 	bl	27236 <net_buf_simple_pull>
	cmd = (void *)buf->data;
   19d4a:	68a0      	ldr	r0, [r4, #8]
	status = le_gen_dhkey(cmd->key, cmd->key_type);
   19d4c:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   19d50:	e02e      	b.n	19db0 <bt_hci_ecc_send+0xac>
   19d52:	2103      	movs	r1, #3
   19d54:	3008      	adds	r0, #8
   19d56:	f00d fa6e 	bl	27236 <net_buf_simple_pull>
	net_buf_unref(buf);
   19d5a:	4620      	mov	r0, r4
   19d5c:	f003 f9c0 	bl	1d0e0 <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19d60:	f3bf 8f5b 	dmb	ish
   19d64:	4b1c      	ldr	r3, [pc, #112]	; (19dd8 <bt_hci_ecc_send+0xd4>)
   19d66:	681a      	ldr	r2, [r3, #0]
   19d68:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
   19d6c:	0792      	lsls	r2, r2, #30
   19d6e:	d507      	bpl.n	19d80 <bt_hci_ecc_send+0x7c>
		status = BT_HCI_ERR_CMD_DISALLOWED;
   19d70:	260c      	movs	r6, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
   19d72:	4631      	mov	r1, r6
   19d74:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
   19d78:	f00c fb82 	bl	26480 <send_cmd_status>
}
   19d7c:	2000      	movs	r0, #0
   19d7e:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19d80:	f3bf 8f5b 	dmb	ish
   19d84:	e853 2f00 	ldrex	r2, [r3]
   19d88:	f042 0101 	orr.w	r1, r2, #1
   19d8c:	e843 1000 	strex	r0, r1, [r3]
   19d90:	2800      	cmp	r0, #0
   19d92:	d1f7      	bne.n	19d84 <bt_hci_ecc_send+0x80>
   19d94:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
   19d98:	07d3      	lsls	r3, r2, #31
   19d9a:	d4e9      	bmi.n	19d70 <bt_hci_ecc_send+0x6c>
   19d9c:	480f      	ldr	r0, [pc, #60]	; (19ddc <bt_hci_ecc_send+0xd8>)
   19d9e:	f007 feaf 	bl	21b00 <z_impl_k_sem_give>
}
   19da2:	e7e6      	b.n	19d72 <bt_hci_ecc_send+0x6e>
   19da4:	2103      	movs	r1, #3
   19da6:	3008      	adds	r0, #8
   19da8:	f00d fa45 	bl	27236 <net_buf_simple_pull>
	status = le_gen_dhkey(cmd->key, BT_HCI_LE_KEY_TYPE_GENERATED);
   19dac:	68a0      	ldr	r0, [r4, #8]
   19dae:	4631      	mov	r1, r6
	status = le_gen_dhkey(cmd->key, cmd->key_type);
   19db0:	f7ff ff5c 	bl	19c6c <le_gen_dhkey>
   19db4:	4606      	mov	r6, r0
	net_buf_unref(buf);
   19db6:	4620      	mov	r0, r4
   19db8:	f003 f992 	bl	1d0e0 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
   19dbc:	4631      	mov	r1, r6
   19dbe:	4628      	mov	r0, r5
   19dc0:	e7da      	b.n	19d78 <bt_hci_ecc_send+0x74>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
   19dc2:	78da      	ldrb	r2, [r3, #3]
   19dc4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   19dc8:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
   19dca:	791a      	ldrb	r2, [r3, #4]
   19dcc:	f022 0201 	bic.w	r2, r2, #1
   19dd0:	711a      	strb	r2, [r3, #4]
}
   19dd2:	e7aa      	b.n	19d2a <bt_hci_ecc_send+0x26>
   19dd4:	200002b0 	.word	0x200002b0
   19dd8:	200024b8 	.word	0x200024b8
   19ddc:	200009a0 	.word	0x200009a0

00019de0 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
   19de0:	b510      	push	{r4, lr}
   19de2:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   19de4:	4c0c      	ldr	r4, [pc, #48]	; (19e18 <bt_hci_ecc_init+0x38>)
   19de6:	490d      	ldr	r1, [pc, #52]	; (19e1c <bt_hci_ecc_init+0x3c>)
   19de8:	2200      	movs	r2, #0
   19dea:	2300      	movs	r3, #0
   19dec:	e9cd 2306 	strd	r2, r3, [sp, #24]
   19df0:	2300      	movs	r3, #0
   19df2:	220a      	movs	r2, #10
   19df4:	e9cd 2303 	strd	r2, r3, [sp, #12]
   19df8:	e9cd 3301 	strd	r3, r3, [sp, #4]
   19dfc:	9300      	str	r3, [sp, #0]
   19dfe:	f44f 628f 	mov.w	r2, #1144	; 0x478
   19e02:	4b07      	ldr	r3, [pc, #28]	; (19e20 <bt_hci_ecc_init+0x40>)
   19e04:	4620      	mov	r0, r4
   19e06:	f007 ff43 	bl	21c90 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   19e0a:	4906      	ldr	r1, [pc, #24]	; (19e24 <bt_hci_ecc_init+0x44>)
   19e0c:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
   19e0e:	b008      	add	sp, #32
   19e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19e14:	f00e bc0d 	b.w	28632 <z_impl_k_thread_name_set>
   19e18:	20001af8 	.word	0x20001af8
   19e1c:	20004d40 	.word	0x20004d40
   19e20:	00019a91 	.word	0x00019a91
   19e24:	0002b786 	.word	0x0002b786

00019e28 <hci_id_add>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
				    buf, NULL);
}

static int hci_id_add(uint8_t id, const bt_addr_le_t *addr, uint8_t peer_irk[16])
{
   19e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19e2c:	4605      	mov	r5, r0
   19e2e:	4688      	mov	r8, r1
	struct bt_hci_cp_le_add_dev_to_rl *cp;
	struct net_buf *buf;

	BT_DBG("addr %s", bt_addr_le_str(addr));

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   19e30:	f242 0027 	movw	r0, #8231	; 0x2027
   19e34:	2127      	movs	r1, #39	; 0x27
{
   19e36:	4617      	mov	r7, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   19e38:	f7fe ffcc 	bl	18dd4 <bt_hci_cmd_create>
	if (!buf) {
   19e3c:	4604      	mov	r4, r0
   19e3e:	b1e8      	cbz	r0, 19e7c <hci_id_add+0x54>
	return net_buf_simple_add(&buf->b, len);
   19e40:	2127      	movs	r1, #39	; 0x27
   19e42:	3008      	adds	r0, #8
   19e44:	f00d f9d8 	bl	271f8 <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   19e48:	4641      	mov	r1, r8
   19e4a:	4606      	mov	r6, r0
   19e4c:	f00c fb5a 	bl	26504 <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   19e50:	4639      	mov	r1, r7
   19e52:	2210      	movs	r2, #16
   19e54:	1df0      	adds	r0, r6, #7
   19e56:	f00b f813 	bl	24e80 <memcpy>

#if defined(CONFIG_BT_PRIVACY)
	(void)memcpy(cp->local_irk, &bt_dev.irk[id], 16);
   19e5a:	490a      	ldr	r1, [pc, #40]	; (19e84 <hci_id_add+0x5c>)
   19e5c:	3517      	adds	r5, #23
   19e5e:	eb01 1105 	add.w	r1, r1, r5, lsl #4
   19e62:	2210      	movs	r2, #16
   19e64:	f106 0017 	add.w	r0, r6, #23
   19e68:	f00b f80a 	bl	24e80 <memcpy>
#else
	(void)memset(cp->local_irk, 0, 16);
#endif

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   19e6c:	4621      	mov	r1, r4
   19e6e:	2200      	movs	r2, #0
}
   19e70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   19e74:	f242 0027 	movw	r0, #8231	; 0x2027
   19e78:	f7ff b908 	b.w	1908c <bt_hci_cmd_send_sync>
}
   19e7c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   19e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19e84:	200002b0 	.word	0x200002b0

00019e88 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   19e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   19e8a:	4f0b      	ldr	r7, [pc, #44]	; (19eb8 <id_find+0x30>)
{
   19e8c:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   19e8e:	2500      	movs	r5, #0
   19e90:	79fb      	ldrb	r3, [r7, #7]
   19e92:	b2ec      	uxtb	r4, r5
   19e94:	42a3      	cmp	r3, r4
   19e96:	d802      	bhi.n	19e9e <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   19e98:	f06f 0401 	mvn.w	r4, #1
   19e9c:	e009      	b.n	19eb2 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   19e9e:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   19ea2:	2207      	movs	r2, #7
   19ea4:	4439      	add	r1, r7
   19ea6:	4630      	mov	r0, r6
   19ea8:	f00a ffda 	bl	24e60 <memcmp>
   19eac:	3501      	adds	r5, #1
   19eae:	2800      	cmp	r0, #0
   19eb0:	d1ee      	bne.n	19e90 <id_find+0x8>
}
   19eb2:	4620      	mov	r0, r4
   19eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19eb6:	bf00      	nop
   19eb8:	200002b0 	.word	0x200002b0

00019ebc <le_rpa_invalidate>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19ebc:	4b08      	ldr	r3, [pc, #32]	; (19ee0 <le_rpa_invalidate+0x24>)
   19ebe:	f3bf 8f5b 	dmb	ish
   19ec2:	e853 2f00 	ldrex	r2, [r3]
   19ec6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   19eca:	e843 2100 	strex	r1, r2, [r3]
   19ece:	2900      	cmp	r1, #0
   19ed0:	d1f7      	bne.n	19ec2 <le_rpa_invalidate+0x6>
   19ed2:	f3bf 8f5b 	dmb	ish
		bt_le_ext_adv_foreach(adv_rpa_invalidate, NULL);
   19ed6:	4803      	ldr	r0, [pc, #12]	; (19ee4 <le_rpa_invalidate+0x28>)
   19ed8:	2100      	movs	r1, #0
   19eda:	f7fa bbfb 	b.w	146d4 <bt_le_ext_adv_foreach>
   19ede:	bf00      	nop
   19ee0:	2000037c 	.word	0x2000037c
   19ee4:	000265d5 	.word	0x000265d5

00019ee8 <set_random_address>:
{
   19ee8:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   19eea:	4914      	ldr	r1, [pc, #80]	; (19f3c <set_random_address+0x54>)
   19eec:	2206      	movs	r2, #6
   19eee:	4605      	mov	r5, r0
   19ef0:	f00a ffb6 	bl	24e60 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   19ef4:	4604      	mov	r4, r0
   19ef6:	b1e0      	cbz	r0, 19f32 <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   19ef8:	2106      	movs	r1, #6
   19efa:	f242 0005 	movw	r0, #8197	; 0x2005
   19efe:	f7fe ff69 	bl	18dd4 <bt_hci_cmd_create>
	if (!buf) {
   19f02:	4604      	mov	r4, r0
   19f04:	b1b8      	cbz	r0, 19f36 <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   19f06:	2206      	movs	r2, #6
   19f08:	4629      	mov	r1, r5
   19f0a:	3008      	adds	r0, #8
   19f0c:	f00d f97a 	bl	27204 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   19f10:	4621      	mov	r1, r4
   19f12:	2200      	movs	r2, #0
   19f14:	f242 0005 	movw	r0, #8197	; 0x2005
   19f18:	f7ff f8b8 	bl	1908c <bt_hci_cmd_send_sync>
	if (err) {
   19f1c:	4604      	mov	r4, r0
   19f1e:	b940      	cbnz	r0, 19f32 <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
   19f20:	2206      	movs	r2, #6
   19f22:	4806      	ldr	r0, [pc, #24]	; (19f3c <set_random_address+0x54>)
   19f24:	4629      	mov	r1, r5
   19f26:	f00a ffab 	bl	24e80 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   19f2a:	4b05      	ldr	r3, [pc, #20]	; (19f40 <set_random_address+0x58>)
   19f2c:	2201      	movs	r2, #1
   19f2e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
   19f32:	4620      	mov	r0, r4
   19f34:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   19f36:	f06f 0468 	mvn.w	r4, #104	; 0x68
   19f3a:	e7fa      	b.n	19f32 <set_random_address+0x4a>
   19f3c:	20000311 	.word	0x20000311
   19f40:	200002b0 	.word	0x200002b0

00019f44 <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   19f44:	b5f0      	push	{r4, r5, r6, r7, lr}
   19f46:	4604      	mov	r4, r0
   19f48:	b087      	sub	sp, #28
   19f4a:	4615      	mov	r5, r2
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   19f4c:	460e      	mov	r6, r1
   19f4e:	b389      	cbz	r1, 19fb4 <id_create+0x70>
   19f50:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   19f52:	2207      	movs	r2, #7
   19f54:	4669      	mov	r1, sp
   19f56:	4630      	mov	r0, r6
   19f58:	9300      	str	r3, [sp, #0]
   19f5a:	f8cd 3003 	str.w	r3, [sp, #3]
   19f5e:	f00a ff7f 	bl	24e60 <memcmp>
   19f62:	b338      	cbz	r0, 19fb4 <id_create+0x70>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   19f64:	4b26      	ldr	r3, [pc, #152]	; (1a000 <id_create+0xbc>)
   19f66:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   19f6a:	4631      	mov	r1, r6
   19f6c:	4418      	add	r0, r3
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   19f6e:	f00c fac9 	bl	26504 <bt_addr_le_copy>
		}
	}

#if defined(CONFIG_BT_PRIVACY)
	{
		uint8_t zero_irk[16] = { 0 };
   19f72:	4823      	ldr	r0, [pc, #140]	; (1a000 <id_create+0xbc>)
   19f74:	2300      	movs	r3, #0
   19f76:	3417      	adds	r4, #23
   19f78:	e9cd 3302 	strd	r3, r3, [sp, #8]
   19f7c:	e9cd 3304 	strd	r3, r3, [sp, #16]

		if (irk && memcmp(irk, zero_irk, 16)) {
   19f80:	eb00 1404 	add.w	r4, r0, r4, lsl #4
   19f84:	b36d      	cbz	r5, 19fe2 <id_create+0x9e>
   19f86:	2210      	movs	r2, #16
   19f88:	a902      	add	r1, sp, #8
   19f8a:	4628      	mov	r0, r5
   19f8c:	f00a ff68 	bl	24e60 <memcmp>
   19f90:	b338      	cbz	r0, 19fe2 <id_create+0x9e>
			memcpy(&bt_dev.irk[id], irk, 16);
   19f92:	2210      	movs	r2, #16
   19f94:	4629      	mov	r1, r5
   19f96:	4620      	mov	r0, r4
			if (err) {
				return err;
			}

			if (irk) {
				memcpy(irk, &bt_dev.irk[id], 16);
   19f98:	f00a ff72 	bl	24e80 <memcpy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   19f9c:	4819      	ldr	r0, [pc, #100]	; (1a004 <id_create+0xc0>)
   19f9e:	f00c fab4 	bl	2650a <atomic_get>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   19fa2:	0782      	lsls	r2, r0, #30
   19fa4:	f3c0 0340 	ubfx	r3, r0, #1, #1
   19fa8:	d527      	bpl.n	19ffa <id_create+0xb6>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
   19faa:	f001 f911 	bl	1b1d0 <bt_settings_save_id>
	}

	return 0;
   19fae:	2000      	movs	r0, #0
}
   19fb0:	b007      	add	sp, #28
   19fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			err = bt_addr_le_create_static(&new_addr);
   19fb4:	a802      	add	r0, sp, #8
   19fb6:	f00b f855 	bl	25064 <bt_addr_le_create_static>
			if (err) {
   19fba:	2800      	cmp	r0, #0
   19fbc:	d1f8      	bne.n	19fb0 <id_create+0x6c>
		} while (id_find(&new_addr) >= 0);
   19fbe:	a802      	add	r0, sp, #8
   19fc0:	f7ff ff62 	bl	19e88 <id_find>
   19fc4:	2800      	cmp	r0, #0
   19fc6:	daf5      	bge.n	19fb4 <id_create+0x70>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   19fc8:	480d      	ldr	r0, [pc, #52]	; (1a000 <id_create+0xbc>)
   19fca:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   19fce:	4407      	add	r7, r0
   19fd0:	a902      	add	r1, sp, #8
   19fd2:	4638      	mov	r0, r7
   19fd4:	f00c fa96 	bl	26504 <bt_addr_le_copy>
		if (addr) {
   19fd8:	2e00      	cmp	r6, #0
   19fda:	d0ca      	beq.n	19f72 <id_create+0x2e>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   19fdc:	4639      	mov	r1, r7
   19fde:	4630      	mov	r0, r6
   19fe0:	e7c5      	b.n	19f6e <id_create+0x2a>
			err = bt_rand(&bt_dev.irk[id], 16);
   19fe2:	2110      	movs	r1, #16
   19fe4:	4620      	mov	r0, r4
   19fe6:	f004 ff03 	bl	1edf0 <bt_rand>
			if (err) {
   19fea:	2800      	cmp	r0, #0
   19fec:	d1e0      	bne.n	19fb0 <id_create+0x6c>
			if (irk) {
   19fee:	2d00      	cmp	r5, #0
   19ff0:	d0d4      	beq.n	19f9c <id_create+0x58>
				memcpy(irk, &bt_dev.irk[id], 16);
   19ff2:	2210      	movs	r2, #16
   19ff4:	4621      	mov	r1, r4
   19ff6:	4628      	mov	r0, r5
   19ff8:	e7ce      	b.n	19f98 <id_create+0x54>
	return 0;
   19ffa:	4618      	mov	r0, r3
   19ffc:	e7d8      	b.n	19fb0 <id_create+0x6c>
   19ffe:	bf00      	nop
   1a000:	200002b0 	.word	0x200002b0
   1a004:	2000037c 	.word	0x2000037c

0001a008 <bt_id_set_private_addr>:
{
   1a008:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1a00a:	4603      	mov	r3, r0
   1a00c:	4812      	ldr	r0, [pc, #72]	; (1a058 <bt_id_set_private_addr+0x50>)
   1a00e:	f00c fa7c 	bl	2650a <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_RPA_VALID)) {
   1a012:	04c2      	lsls	r2, r0, #19
   1a014:	d41d      	bmi.n	1a052 <bt_id_set_private_addr+0x4a>
	err = bt_rpa_create(bt_dev.irk[id], &rpa);
   1a016:	4d11      	ldr	r5, [pc, #68]	; (1a05c <bt_id_set_private_addr+0x54>)
   1a018:	f103 0017 	add.w	r0, r3, #23
   1a01c:	4669      	mov	r1, sp
   1a01e:	eb05 1000 	add.w	r0, r5, r0, lsl #4
   1a022:	f00b f808 	bl	25036 <bt_rpa_create>
	if (!err) {
   1a026:	4604      	mov	r4, r0
   1a028:	b950      	cbnz	r0, 1a040 <bt_id_set_private_addr+0x38>
		err = set_random_address(&rpa);
   1a02a:	4668      	mov	r0, sp
   1a02c:	f7ff ff5c 	bl	19ee8 <set_random_address>
		if (!err) {
   1a030:	4604      	mov	r4, r0
   1a032:	b928      	cbnz	r0, 1a040 <bt_id_set_private_addr+0x38>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a034:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1a038:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   1a03c:	f00c fa83 	bl	26546 <atomic_or>
	(void)k_work_schedule(&bt_dev.rpa_update, RPA_TIMEOUT);
   1a040:	4807      	ldr	r0, [pc, #28]	; (1a060 <bt_id_set_private_addr+0x58>)
   1a042:	f04f 72e1 	mov.w	r2, #29491200	; 0x1c20000
   1a046:	2300      	movs	r3, #0
   1a048:	f008 fa24 	bl	22494 <k_work_schedule>
}
   1a04c:	4620      	mov	r0, r4
   1a04e:	b003      	add	sp, #12
   1a050:	bd30      	pop	{r4, r5, pc}
		return 0;
   1a052:	2400      	movs	r4, #0
   1a054:	e7fa      	b.n	1a04c <bt_id_set_private_addr+0x44>
   1a056:	bf00      	nop
   1a058:	2000037c 	.word	0x2000037c
   1a05c:	200002b0 	.word	0x200002b0
   1a060:	20000430 	.word	0x20000430

0001a064 <le_update_private_addr>:
{
   1a064:	b570      	push	{r4, r5, r6, lr}
		adv = bt_le_adv_lookup_legacy();
   1a066:	f7fa fb3b 	bl	146e0 <bt_le_adv_lookup_legacy>
		if (adv &&
   1a06a:	4604      	mov	r4, r0
   1a06c:	b990      	cbnz	r0, 1a094 <le_update_private_addr+0x30>
	uint8_t id = BT_ID_DEFAULT;
   1a06e:	2600      	movs	r6, #0
	bool adv_enabled = false;
   1a070:	4635      	mov	r5, r6
	err = bt_id_set_private_addr(id);
   1a072:	4630      	mov	r0, r6
   1a074:	f7ff ffc8 	bl	1a008 <bt_id_set_private_addr>
	if (err) {
   1a078:	4601      	mov	r1, r0
   1a07a:	b300      	cbz	r0, 1a0be <le_update_private_addr+0x5a>
   1a07c:	4a14      	ldr	r2, [pc, #80]	; (1a0d0 <le_update_private_addr+0x6c>)
   1a07e:	4b15      	ldr	r3, [pc, #84]	; (1a0d4 <le_update_private_addr+0x70>)
		BT_WARN("Failed to update RPA address (%d)", err);
   1a080:	4815      	ldr	r0, [pc, #84]	; (1a0d8 <le_update_private_addr+0x74>)
   1a082:	1ad2      	subs	r2, r2, r3
   1a084:	08d2      	lsrs	r2, r2, #3
   1a086:	0192      	lsls	r2, r2, #6
}
   1a088:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("Failed to update RPA address (%d)", err);
   1a08c:	f042 0202 	orr.w	r2, r2, #2
   1a090:	f009 bef4 	b.w	23e7c <log_1>
		    atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   1a094:	f100 0210 	add.w	r2, r0, #16
   1a098:	2106      	movs	r1, #6
   1a09a:	4610      	mov	r0, r2
   1a09c:	f00c fa3b 	bl	26516 <atomic_test_bit>
		if (adv &&
   1a0a0:	4605      	mov	r5, r0
   1a0a2:	2800      	cmp	r0, #0
   1a0a4:	d0e3      	beq.n	1a06e <le_update_private_addr+0xa>
		    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
   1a0a6:	210c      	movs	r1, #12
   1a0a8:	4610      	mov	r0, r2
   1a0aa:	f00c fa34 	bl	26516 <atomic_test_bit>
		    atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   1a0ae:	4601      	mov	r1, r0
   1a0b0:	2800      	cmp	r0, #0
   1a0b2:	d1dc      	bne.n	1a06e <le_update_private_addr+0xa>
			bt_le_adv_set_enable_legacy(adv, false);
   1a0b4:	4620      	mov	r0, r4
			id = adv->id;
   1a0b6:	7826      	ldrb	r6, [r4, #0]
			bt_le_adv_set_enable_legacy(adv, false);
   1a0b8:	f00b f8a4 	bl	25204 <bt_le_adv_set_enable_legacy>
   1a0bc:	e7d9      	b.n	1a072 <le_update_private_addr+0xe>
	if (IS_ENABLED(CONFIG_BT_BROADCASTER) &&
   1a0be:	b134      	cbz	r4, 1a0ce <le_update_private_addr+0x6a>
	    adv && adv_enabled) {
   1a0c0:	b12d      	cbz	r5, 1a0ce <le_update_private_addr+0x6a>
		bt_le_adv_set_enable_legacy(adv, true);
   1a0c2:	4620      	mov	r0, r4
   1a0c4:	2101      	movs	r1, #1
}
   1a0c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_le_adv_set_enable_legacy(adv, true);
   1a0ca:	f00b b89b 	b.w	25204 <bt_le_adv_set_enable_legacy>
}
   1a0ce:	bd70      	pop	{r4, r5, r6, pc}
   1a0d0:	00028e34 	.word	0x00028e34
   1a0d4:	00028dd4 	.word	0x00028dd4
   1a0d8:	0002b7b8 	.word	0x0002b7b8

0001a0dc <rpa_timeout>:
{
   1a0dc:	b507      	push	{r0, r1, r2, lr}
	bool adv_enabled = false;
   1a0de:	2300      	movs	r3, #0
   1a0e0:	f88d 3007 	strb.w	r3, [sp, #7]
	le_rpa_invalidate();
   1a0e4:	f7ff feea 	bl	19ebc <le_rpa_invalidate>
		bt_le_ext_adv_foreach(adv_is_private_enabled, &adv_enabled);
   1a0e8:	480d      	ldr	r0, [pc, #52]	; (1a120 <rpa_timeout+0x44>)
   1a0ea:	f10d 0107 	add.w	r1, sp, #7
   1a0ee:	f7fa faf1 	bl	146d4 <bt_le_ext_adv_foreach>
	if (!(adv_enabled ||
   1a0f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1a0f6:	b973      	cbnz	r3, 1a116 <rpa_timeout+0x3a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a0f8:	480a      	ldr	r0, [pc, #40]	; (1a124 <rpa_timeout+0x48>)
   1a0fa:	f00c fa06 	bl	2650a <atomic_get>
   1a0fe:	0501      	lsls	r1, r0, #20
   1a100:	d409      	bmi.n	1a116 <rpa_timeout+0x3a>
   1a102:	4808      	ldr	r0, [pc, #32]	; (1a124 <rpa_timeout+0x48>)
   1a104:	f00c fa01 	bl	2650a <atomic_get>
   1a108:	0682      	lsls	r2, r0, #26
   1a10a:	d506      	bpl.n	1a11a <rpa_timeout+0x3e>
   1a10c:	4805      	ldr	r0, [pc, #20]	; (1a124 <rpa_timeout+0x48>)
   1a10e:	f00c f9fc 	bl	2650a <atomic_get>
	      (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   1a112:	0603      	lsls	r3, r0, #24
   1a114:	d501      	bpl.n	1a11a <rpa_timeout+0x3e>
	le_update_private_addr();
   1a116:	f7ff ffa5 	bl	1a064 <le_update_private_addr>
}
   1a11a:	b003      	add	sp, #12
   1a11c:	f85d fb04 	ldr.w	pc, [sp], #4
   1a120:	00026525 	.word	0x00026525
   1a124:	2000037c 	.word	0x2000037c

0001a128 <bt_id_pending_keys_update>:
   1a128:	4b0a      	ldr	r3, [pc, #40]	; (1a154 <bt_id_pending_keys_update+0x2c>)
   1a12a:	f3bf 8f5b 	dmb	ish
   1a12e:	e853 2f00 	ldrex	r2, [r3]
   1a132:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   1a136:	e843 1000 	strex	r0, r1, [r3]
   1a13a:	2800      	cmp	r0, #0
   1a13c:	d1f7      	bne.n	1a12e <bt_id_pending_keys_update+0x6>
   1a13e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   1a142:	0493      	lsls	r3, r2, #18
   1a144:	d504      	bpl.n	1a150 <bt_id_pending_keys_update+0x28>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
   1a146:	4904      	ldr	r1, [pc, #16]	; (1a158 <bt_id_pending_keys_update+0x30>)
   1a148:	2200      	movs	r2, #0
   1a14a:	2002      	movs	r0, #2
   1a14c:	f000 bbd6 	b.w	1a8fc <bt_keys_foreach>
}
   1a150:	4770      	bx	lr
   1a152:	bf00      	nop
   1a154:	2000037c 	.word	0x2000037c
   1a158:	00026643 	.word	0x00026643

0001a15c <bt_id_add>:
{
   1a15c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   1a15e:	4f5b      	ldr	r7, [pc, #364]	; (1a2cc <bt_id_add+0x170>)
   1a160:	f897 2118 	ldrb.w	r2, [r7, #280]	; 0x118
   1a164:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
{
   1a168:	4604      	mov	r4, r0
   1a16a:	463d      	mov	r5, r7
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   1a16c:	b10a      	cbz	r2, 1a172 <bt_id_add+0x16>
   1a16e:	429a      	cmp	r2, r3
   1a170:	d208      	bcs.n	1a184 <bt_id_add+0x28>
		bt_dev.le.rl_entries++;
   1a172:	3301      	adds	r3, #1
   1a174:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   1a178:	7a23      	ldrb	r3, [r4, #8]
   1a17a:	f043 0304 	orr.w	r3, r3, #4
   1a17e:	7223      	strb	r3, [r4, #8]
}
   1a180:	b003      	add	sp, #12
   1a182:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   1a184:	2100      	movs	r1, #0
   1a186:	2206      	movs	r2, #6
   1a188:	4608      	mov	r0, r1
   1a18a:	f7fc fac3 	bl	16714 <bt_conn_lookup_state_le>
	if (conn) {
   1a18e:	4606      	mov	r6, r0
   1a190:	b168      	cbz	r0, 1a1ae <bt_id_add+0x52>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a192:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   1a196:	f107 00cc 	add.w	r0, r7, #204	; 0xcc
   1a19a:	f00c f9d4 	bl	26546 <atomic_or>
	keys->state |= flag;
   1a19e:	7a23      	ldrb	r3, [r4, #8]
   1a1a0:	f043 0301 	orr.w	r3, r3, #1
   1a1a4:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
   1a1a6:	4630      	mov	r0, r6
   1a1a8:	f00b fcde 	bl	25b68 <bt_conn_unref>
		return;
   1a1ac:	e7e8      	b.n	1a180 <bt_id_add+0x24>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   1a1ae:	4601      	mov	r1, r0
   1a1b0:	4847      	ldr	r0, [pc, #284]	; (1a2d0 <bt_id_add+0x174>)
   1a1b2:	f7fa fa8f 	bl	146d4 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   1a1b6:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
   1a1ba:	b173      	cbz	r3, 1a1da <bt_id_add+0x7e>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   1a1bc:	4630      	mov	r0, r6
   1a1be:	f00c f9d1 	bl	26564 <addr_res_enable>
		if (err) {
   1a1c2:	b150      	cbz	r0, 1a1da <bt_id_add+0x7e>
   1a1c4:	4943      	ldr	r1, [pc, #268]	; (1a2d4 <bt_id_add+0x178>)
   1a1c6:	4b44      	ldr	r3, [pc, #272]	; (1a2d8 <bt_id_add+0x17c>)
			BT_WARN("Failed to disable address resolution");
   1a1c8:	4844      	ldr	r0, [pc, #272]	; (1a2dc <bt_id_add+0x180>)
   1a1ca:	1ac9      	subs	r1, r1, r3
   1a1cc:	08c9      	lsrs	r1, r1, #3
   1a1ce:	0189      	lsls	r1, r1, #6
   1a1d0:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("Set privacy mode command is not supported");
   1a1d4:	f009 fe45 	bl	23e62 <log_0>
	if (err) {
   1a1d8:	e023      	b.n	1a222 <bt_id_add+0xc6>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   1a1da:	f895 2119 	ldrb.w	r2, [r5, #281]	; 0x119
   1a1de:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   1a1e2:	429a      	cmp	r2, r3
   1a1e4:	d125      	bne.n	1a232 <bt_id_add+0xd6>
   1a1e6:	4b3c      	ldr	r3, [pc, #240]	; (1a2d8 <bt_id_add+0x17c>)
   1a1e8:	4e3a      	ldr	r6, [pc, #232]	; (1a2d4 <bt_id_add+0x178>)
		BT_WARN("Resolving list size exceeded. Switching to host.");
   1a1ea:	483d      	ldr	r0, [pc, #244]	; (1a2e0 <bt_id_add+0x184>)
   1a1ec:	1af6      	subs	r6, r6, r3
   1a1ee:	08f6      	lsrs	r6, r6, #3
   1a1f0:	01b6      	lsls	r6, r6, #6
   1a1f2:	f046 0102 	orr.w	r1, r6, #2
   1a1f6:	f009 fe34 	bl	23e62 <log_0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   1a1fa:	2200      	movs	r2, #0
   1a1fc:	4611      	mov	r1, r2
   1a1fe:	f242 0029 	movw	r0, #8233	; 0x2029
   1a202:	f7fe ff43 	bl	1908c <bt_hci_cmd_send_sync>
		if (err) {
   1a206:	b118      	cbz	r0, 1a210 <bt_id_add+0xb4>
			BT_ERR("Failed to clear resolution list");
   1a208:	4836      	ldr	r0, [pc, #216]	; (1a2e4 <bt_id_add+0x188>)
   1a20a:	f046 0101 	orr.w	r1, r6, #1
   1a20e:	e7e1      	b.n	1a1d4 <bt_id_add+0x78>
		bt_dev.le.rl_entries++;
   1a210:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   1a214:	3301      	adds	r3, #1
   1a216:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   1a21a:	7a23      	ldrb	r3, [r4, #8]
   1a21c:	f043 0304 	orr.w	r3, r3, #4
   1a220:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   1a222:	2001      	movs	r0, #1
   1a224:	f00c f99e 	bl	26564 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   1a228:	482f      	ldr	r0, [pc, #188]	; (1a2e8 <bt_id_add+0x18c>)
   1a22a:	2100      	movs	r1, #0
   1a22c:	f7fa fa52 	bl	146d4 <bt_le_ext_adv_foreach>
   1a230:	e7a6      	b.n	1a180 <bt_id_add+0x24>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   1a232:	4622      	mov	r2, r4
   1a234:	1c67      	adds	r7, r4, #1
   1a236:	f812 0b2a 	ldrb.w	r0, [r2], #42
   1a23a:	4639      	mov	r1, r7
   1a23c:	f7ff fdf4 	bl	19e28 <hci_id_add>
	if (err) {
   1a240:	4606      	mov	r6, r0
   1a242:	b140      	cbz	r0, 1a256 <bt_id_add+0xfa>
   1a244:	4923      	ldr	r1, [pc, #140]	; (1a2d4 <bt_id_add+0x178>)
   1a246:	4b24      	ldr	r3, [pc, #144]	; (1a2d8 <bt_id_add+0x17c>)
		BT_ERR("Failed to add IRK to controller");
   1a248:	4828      	ldr	r0, [pc, #160]	; (1a2ec <bt_id_add+0x190>)
   1a24a:	1ac9      	subs	r1, r1, r3
   1a24c:	08c9      	lsrs	r1, r1, #3
   1a24e:	0189      	lsls	r1, r1, #6
   1a250:	f041 0101 	orr.w	r1, r1, #1
   1a254:	e7be      	b.n	1a1d4 <bt_id_add+0x78>
	bt_dev.le.rl_entries++;
   1a256:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   1a25a:	3301      	adds	r3, #1
   1a25c:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   1a260:	7a23      	ldrb	r3, [r4, #8]
   1a262:	f043 0304 	orr.w	r3, r3, #4
   1a266:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   1a268:	f895 309f 	ldrb.w	r3, [r5, #159]	; 0x9f
   1a26c:	075b      	lsls	r3, r3, #29
   1a26e:	d408      	bmi.n	1a282 <bt_id_add+0x126>
   1a270:	4918      	ldr	r1, [pc, #96]	; (1a2d4 <bt_id_add+0x178>)
   1a272:	4b19      	ldr	r3, [pc, #100]	; (1a2d8 <bt_id_add+0x17c>)
		BT_WARN("Set privacy mode command is not supported");
   1a274:	481e      	ldr	r0, [pc, #120]	; (1a2f0 <bt_id_add+0x194>)
   1a276:	1ac9      	subs	r1, r1, r3
   1a278:	08c9      	lsrs	r1, r1, #3
   1a27a:	0189      	lsls	r1, r1, #6
   1a27c:	f041 0102 	orr.w	r1, r1, #2
   1a280:	e7a8      	b.n	1a1d4 <bt_id_add+0x78>
	bt_addr_le_copy(&cp.id_addr, addr);
   1a282:	4639      	mov	r1, r7
   1a284:	4668      	mov	r0, sp
   1a286:	f00c f93d 	bl	26504 <bt_addr_le_copy>
	cp.mode = mode;
   1a28a:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   1a28c:	2108      	movs	r1, #8
   1a28e:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   1a292:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   1a296:	f7fe fd9d 	bl	18dd4 <bt_hci_cmd_create>
	if (!buf) {
   1a29a:	4604      	mov	r4, r0
   1a29c:	b940      	cbnz	r0, 1a2b0 <bt_id_add+0x154>
   1a29e:	490d      	ldr	r1, [pc, #52]	; (1a2d4 <bt_id_add+0x178>)
   1a2a0:	4b0d      	ldr	r3, [pc, #52]	; (1a2d8 <bt_id_add+0x17c>)
		BT_ERR("Failed to set privacy mode");
   1a2a2:	4814      	ldr	r0, [pc, #80]	; (1a2f4 <bt_id_add+0x198>)
   1a2a4:	1ac9      	subs	r1, r1, r3
   1a2a6:	08c9      	lsrs	r1, r1, #3
   1a2a8:	0189      	lsls	r1, r1, #6
   1a2aa:	f041 0101 	orr.w	r1, r1, #1
   1a2ae:	e791      	b.n	1a1d4 <bt_id_add+0x78>
   1a2b0:	2208      	movs	r2, #8
   1a2b2:	4669      	mov	r1, sp
   1a2b4:	4410      	add	r0, r2
   1a2b6:	f00c ffa5 	bl	27204 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   1a2ba:	4632      	mov	r2, r6
   1a2bc:	4621      	mov	r1, r4
   1a2be:	f242 004e 	movw	r0, #8270	; 0x204e
   1a2c2:	f7fe fee3 	bl	1908c <bt_hci_cmd_send_sync>
	if (err) {
   1a2c6:	2800      	cmp	r0, #0
   1a2c8:	d0ab      	beq.n	1a222 <bt_id_add+0xc6>
   1a2ca:	e7e8      	b.n	1a29e <bt_id_add+0x142>
   1a2cc:	200002b0 	.word	0x200002b0
   1a2d0:	000265ab 	.word	0x000265ab
   1a2d4:	00028e34 	.word	0x00028e34
   1a2d8:	00028dd4 	.word	0x00028dd4
   1a2dc:	0002b7da 	.word	0x0002b7da
   1a2e0:	0002b7ff 	.word	0x0002b7ff
   1a2e4:	0002b830 	.word	0x0002b830
   1a2e8:	000265ff 	.word	0x000265ff
   1a2ec:	0002b850 	.word	0x0002b850
   1a2f0:	0002b870 	.word	0x0002b870
   1a2f4:	0002b89a 	.word	0x0002b89a

0001a2f8 <bt_id_del>:
{
   1a2f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size ||
   1a2fc:	4f44      	ldr	r7, [pc, #272]	; (1a410 <bt_id_del+0x118>)
   1a2fe:	f897 2118 	ldrb.w	r2, [r7, #280]	; 0x118
   1a302:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
{
   1a306:	4604      	mov	r4, r0
   1a308:	463d      	mov	r5, r7
	if (!bt_dev.le.rl_size ||
   1a30a:	b112      	cbz	r2, 1a312 <bt_id_del+0x1a>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   1a30c:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   1a30e:	4293      	cmp	r3, r2
   1a310:	dd08      	ble.n	1a324 <bt_id_del+0x2c>
		bt_dev.le.rl_entries--;
   1a312:	3b01      	subs	r3, #1
   1a314:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   1a318:	7a23      	ldrb	r3, [r4, #8]
   1a31a:	f023 0304 	bic.w	r3, r3, #4
   1a31e:	7223      	strb	r3, [r4, #8]
}
   1a320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   1a324:	2100      	movs	r1, #0
   1a326:	2206      	movs	r2, #6
   1a328:	4608      	mov	r0, r1
   1a32a:	f7fc f9f3 	bl	16714 <bt_conn_lookup_state_le>
	if (conn) {
   1a32e:	4606      	mov	r6, r0
   1a330:	b170      	cbz	r0, 1a350 <bt_id_del+0x58>
   1a332:	f107 00cc 	add.w	r0, r7, #204	; 0xcc
   1a336:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   1a33a:	f00c f904 	bl	26546 <atomic_or>
	keys->state |= flag;
   1a33e:	7a23      	ldrb	r3, [r4, #8]
   1a340:	f043 0302 	orr.w	r3, r3, #2
   1a344:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
   1a346:	4630      	mov	r0, r6
}
   1a348:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   1a34c:	f00b bc0c 	b.w	25b68 <bt_conn_unref>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   1a350:	4601      	mov	r1, r0
   1a352:	4830      	ldr	r0, [pc, #192]	; (1a414 <bt_id_del+0x11c>)
   1a354:	f7fa f9be 	bl	146d4 <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   1a358:	4630      	mov	r0, r6
   1a35a:	f00c f903 	bl	26564 <addr_res_enable>
	if (err) {
   1a35e:	4606      	mov	r6, r0
   1a360:	b1b0      	cbz	r0, 1a390 <bt_id_del+0x98>
   1a362:	4a2d      	ldr	r2, [pc, #180]	; (1a418 <bt_id_del+0x120>)
   1a364:	4b2d      	ldr	r3, [pc, #180]	; (1a41c <bt_id_del+0x124>)
   1a366:	1ad2      	subs	r2, r2, r3
   1a368:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Disabling address resolution failed (err %d)", err);
   1a36a:	0192      	lsls	r2, r2, #6
   1a36c:	4601      	mov	r1, r0
   1a36e:	f042 0201 	orr.w	r2, r2, #1
   1a372:	482b      	ldr	r0, [pc, #172]	; (1a420 <bt_id_del+0x128>)
   1a374:	f009 fd82 	bl	23e7c <log_1>
	if (bt_dev.le.rl_entries) {
   1a378:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   1a37c:	b113      	cbz	r3, 1a384 <bt_id_del+0x8c>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   1a37e:	2001      	movs	r0, #1
   1a380:	f00c f8f0 	bl	26564 <addr_res_enable>
}
   1a384:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   1a388:	4826      	ldr	r0, [pc, #152]	; (1a424 <bt_id_del+0x12c>)
   1a38a:	2100      	movs	r1, #0
   1a38c:	f7fa b9a2 	b.w	146d4 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   1a390:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
   1a394:	f897 2118 	ldrb.w	r2, [r7, #280]	; 0x118
   1a398:	429a      	cmp	r2, r3
   1a39a:	d20c      	bcs.n	1a3b6 <bt_id_del+0xbe>
		bt_dev.le.rl_entries--;
   1a39c:	3b01      	subs	r3, #1
   1a39e:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   1a3a2:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   1a3a4:	4920      	ldr	r1, [pc, #128]	; (1a428 <bt_id_del+0x130>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   1a3a6:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   1a3aa:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   1a3ac:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   1a3ae:	2002      	movs	r0, #2
   1a3b0:	f000 faa4 	bl	1a8fc <bt_keys_foreach>
		goto done;
   1a3b4:	e7e0      	b.n	1a378 <bt_id_del+0x80>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   1a3b6:	2107      	movs	r1, #7
   1a3b8:	f242 0028 	movw	r0, #8232	; 0x2028
   1a3bc:	f7fe fd0a 	bl	18dd4 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   1a3c0:	f104 0801 	add.w	r8, r4, #1
	if (!buf) {
   1a3c4:	4607      	mov	r7, r0
   1a3c6:	b950      	cbnz	r0, 1a3de <bt_id_del+0xe6>
   1a3c8:	4b14      	ldr	r3, [pc, #80]	; (1a41c <bt_id_del+0x124>)
   1a3ca:	4913      	ldr	r1, [pc, #76]	; (1a418 <bt_id_del+0x120>)
		BT_ERR("Failed to remove IRK from controller");
   1a3cc:	4817      	ldr	r0, [pc, #92]	; (1a42c <bt_id_del+0x134>)
   1a3ce:	1ac9      	subs	r1, r1, r3
   1a3d0:	08c9      	lsrs	r1, r1, #3
   1a3d2:	0189      	lsls	r1, r1, #6
   1a3d4:	f041 0101 	orr.w	r1, r1, #1
   1a3d8:	f009 fd43 	bl	23e62 <log_0>
		goto done;
   1a3dc:	e7cc      	b.n	1a378 <bt_id_del+0x80>
	return net_buf_simple_add(&buf->b, len);
   1a3de:	2107      	movs	r1, #7
   1a3e0:	3008      	adds	r0, #8
   1a3e2:	f00c ff09 	bl	271f8 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   1a3e6:	4641      	mov	r1, r8
   1a3e8:	f00c f88c 	bl	26504 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   1a3ec:	4632      	mov	r2, r6
   1a3ee:	4639      	mov	r1, r7
   1a3f0:	f242 0028 	movw	r0, #8232	; 0x2028
   1a3f4:	f7fe fe4a 	bl	1908c <bt_hci_cmd_send_sync>
	if (err) {
   1a3f8:	2800      	cmp	r0, #0
   1a3fa:	d1e5      	bne.n	1a3c8 <bt_id_del+0xd0>
	bt_dev.le.rl_entries--;
   1a3fc:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   1a400:	3b01      	subs	r3, #1
   1a402:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   1a406:	7a23      	ldrb	r3, [r4, #8]
   1a408:	f023 0304 	bic.w	r3, r3, #4
   1a40c:	7223      	strb	r3, [r4, #8]
   1a40e:	e7b3      	b.n	1a378 <bt_id_del+0x80>
   1a410:	200002b0 	.word	0x200002b0
   1a414:	000265ab 	.word	0x000265ab
   1a418:	00028e34 	.word	0x00028e34
   1a41c:	00028dd4 	.word	0x00028dd4
   1a420:	0002b8b5 	.word	0x0002b8b5
   1a424:	000265ff 	.word	0x000265ff
   1a428:	00026595 	.word	0x00026595
   1a42c:	0002b8e2 	.word	0x0002b8e2

0001a430 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   1a430:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a432:	460e      	mov	r6, r1
   1a434:	b087      	sub	sp, #28
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   1a436:	4604      	mov	r4, r0
   1a438:	b930      	cbnz	r0, 1a448 <bt_id_create+0x18>

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   1a43a:	4d2d      	ldr	r5, [pc, #180]	; (1a4f0 <bt_id_create+0xc0>)
   1a43c:	79eb      	ldrb	r3, [r5, #7]
   1a43e:	2b01      	cmp	r3, #1
   1a440:	d12a      	bne.n	1a498 <bt_id_create+0x68>
		return -ENOMEM;
   1a442:	f06f 000b 	mvn.w	r0, #11
   1a446:	e025      	b.n	1a494 <bt_id_create+0x64>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   1a448:	2300      	movs	r3, #0
   1a44a:	2207      	movs	r2, #7
   1a44c:	a902      	add	r1, sp, #8
   1a44e:	9302      	str	r3, [sp, #8]
   1a450:	f8cd 300b 	str.w	r3, [sp, #11]
   1a454:	f00a fd04 	bl	24e60 <memcmp>
   1a458:	2800      	cmp	r0, #0
   1a45a:	d0ee      	beq.n	1a43a <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   1a45c:	7823      	ldrb	r3, [r4, #0]
   1a45e:	2b01      	cmp	r3, #1
   1a460:	d104      	bne.n	1a46c <bt_id_create+0x3c>
   1a462:	79a3      	ldrb	r3, [r4, #6]
   1a464:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1a468:	2bc0      	cmp	r3, #192	; 0xc0
   1a46a:	d00c      	beq.n	1a486 <bt_id_create+0x56>
   1a46c:	4921      	ldr	r1, [pc, #132]	; (1a4f4 <bt_id_create+0xc4>)
   1a46e:	4b22      	ldr	r3, [pc, #136]	; (1a4f8 <bt_id_create+0xc8>)
			BT_ERR("Only static random identity address supported");
   1a470:	4822      	ldr	r0, [pc, #136]	; (1a4fc <bt_id_create+0xcc>)
   1a472:	1ac9      	subs	r1, r1, r3
   1a474:	08c9      	lsrs	r1, r1, #3
   1a476:	0189      	lsls	r1, r1, #6
   1a478:	f041 0101 	orr.w	r1, r1, #1
   1a47c:	f009 fcf1 	bl	23e62 <log_0>
			return -EINVAL;
   1a480:	f06f 0015 	mvn.w	r0, #21
   1a484:	e006      	b.n	1a494 <bt_id_create+0x64>
		if (id_find(addr) >= 0) {
   1a486:	4620      	mov	r0, r4
   1a488:	f7ff fcfe 	bl	19e88 <id_find>
   1a48c:	2800      	cmp	r0, #0
   1a48e:	dbd4      	blt.n	1a43a <bt_id_create+0xa>
			return -EALREADY;
   1a490:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
   1a494:	b007      	add	sp, #28
   1a496:	bdf0      	pop	{r4, r5, r6, r7, pc}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a498:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   1a49c:	f00c f835 	bl	2650a <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1a4a0:	f010 0001 	ands.w	r0, r0, #1
   1a4a4:	d118      	bne.n	1a4d8 <bt_id_create+0xa8>
		uint8_t zero_irk[16] = { 0 };
   1a4a6:	e9cd 0002 	strd	r0, r0, [sp, #8]
   1a4aa:	e9cd 0004 	strd	r0, r0, [sp, #16]
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   1a4ae:	2c00      	cmp	r4, #0
   1a4b0:	d0e6      	beq.n	1a480 <bt_id_create+0x50>
   1a4b2:	9000      	str	r0, [sp, #0]
   1a4b4:	2207      	movs	r2, #7
   1a4b6:	f8cd 0003 	str.w	r0, [sp, #3]
   1a4ba:	4669      	mov	r1, sp
   1a4bc:	4620      	mov	r0, r4
   1a4be:	f00a fccf 	bl	24e60 <memcmp>
   1a4c2:	2800      	cmp	r0, #0
   1a4c4:	d0dc      	beq.n	1a480 <bt_id_create+0x50>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   1a4c6:	2e00      	cmp	r6, #0
   1a4c8:	d0da      	beq.n	1a480 <bt_id_create+0x50>
		    !(irk && memcmp(irk, zero_irk, 16))) {
   1a4ca:	2210      	movs	r2, #16
   1a4cc:	a902      	add	r1, sp, #8
   1a4ce:	4630      	mov	r0, r6
   1a4d0:	f00a fcc6 	bl	24e60 <memcmp>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   1a4d4:	2800      	cmp	r0, #0
   1a4d6:	d0d3      	beq.n	1a480 <bt_id_create+0x50>
	new_id = bt_dev.id_count++;
   1a4d8:	79ef      	ldrb	r7, [r5, #7]
	err = id_create(new_id, addr, irk);
   1a4da:	4632      	mov	r2, r6
	new_id = bt_dev.id_count++;
   1a4dc:	1c7b      	adds	r3, r7, #1
	err = id_create(new_id, addr, irk);
   1a4de:	4621      	mov	r1, r4
   1a4e0:	4638      	mov	r0, r7
	new_id = bt_dev.id_count++;
   1a4e2:	71eb      	strb	r3, [r5, #7]
	err = id_create(new_id, addr, irk);
   1a4e4:	f7ff fd2e 	bl	19f44 <id_create>
	new_id = bt_dev.id_count++;
   1a4e8:	2800      	cmp	r0, #0
   1a4ea:	bf08      	it	eq
   1a4ec:	4638      	moveq	r0, r7
   1a4ee:	e7d1      	b.n	1a494 <bt_id_create+0x64>
   1a4f0:	200002b0 	.word	0x200002b0
   1a4f4:	00028e34 	.word	0x00028e34
   1a4f8:	00028dd4 	.word	0x00028dd4
   1a4fc:	0002b907 	.word	0x0002b907

0001a500 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   1a500:	b570      	push	{r4, r5, r6, lr}
   1a502:	b086      	sub	sp, #24
   1a504:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   1a506:	aa01      	add	r2, sp, #4
   1a508:	2100      	movs	r1, #0
   1a50a:	f241 0009 	movw	r0, #4105	; 0x1009
   1a50e:	f7fe fdbd 	bl	1908c <bt_hci_cmd_send_sync>
	if (err) {
   1a512:	4604      	mov	r4, r0
   1a514:	b160      	cbz	r0, 1a530 <bt_id_read_public_addr+0x30>
   1a516:	491a      	ldr	r1, [pc, #104]	; (1a580 <bt_id_read_public_addr+0x80>)
   1a518:	4b1a      	ldr	r3, [pc, #104]	; (1a584 <bt_id_read_public_addr+0x84>)
		BT_WARN("Failed to read public address");
   1a51a:	481b      	ldr	r0, [pc, #108]	; (1a588 <bt_id_read_public_addr+0x88>)
   1a51c:	1ac9      	subs	r1, r1, r3
   1a51e:	08c9      	lsrs	r1, r1, #3
   1a520:	0189      	lsls	r1, r1, #6
   1a522:	f041 0102 	orr.w	r1, r1, #2
   1a526:	f009 fc9c 	bl	23e62 <log_0>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
   1a52a:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   1a52c:	b006      	add	sp, #24
   1a52e:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   1a530:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1a532:	9002      	str	r0, [sp, #8]
   1a534:	689d      	ldr	r5, [r3, #8]
   1a536:	f8ad 000c 	strh.w	r0, [sp, #12]
   1a53a:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   1a53c:	2206      	movs	r2, #6
   1a53e:	a902      	add	r1, sp, #8
   1a540:	4628      	mov	r0, r5
   1a542:	f00a fc8d 	bl	24e60 <memcmp>
   1a546:	b918      	cbnz	r0, 1a550 <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
   1a548:	9801      	ldr	r0, [sp, #4]
   1a54a:	f002 fdc9 	bl	1d0e0 <net_buf_unref>
   1a54e:	e7ec      	b.n	1a52a <bt_id_read_public_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   1a550:	f04f 33ff 	mov.w	r3, #4294967295
   1a554:	2206      	movs	r2, #6
   1a556:	a904      	add	r1, sp, #16
   1a558:	4628      	mov	r0, r5
   1a55a:	9304      	str	r3, [sp, #16]
   1a55c:	f8ad 3014 	strh.w	r3, [sp, #20]
   1a560:	f00a fc7e 	bl	24e60 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1a564:	2800      	cmp	r0, #0
   1a566:	d0ef      	beq.n	1a548 <bt_id_read_public_addr+0x48>
	memcpy(dst, src, sizeof(*dst));
   1a568:	2206      	movs	r2, #6
   1a56a:	4629      	mov	r1, r5
   1a56c:	1c70      	adds	r0, r6, #1
   1a56e:	f00a fc87 	bl	24e80 <memcpy>
	net_buf_unref(rsp);
   1a572:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   1a574:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   1a576:	f002 fdb3 	bl	1d0e0 <net_buf_unref>
	return 1U;
   1a57a:	2001      	movs	r0, #1
   1a57c:	e7d6      	b.n	1a52c <bt_id_read_public_addr+0x2c>
   1a57e:	bf00      	nop
   1a580:	00028e34 	.word	0x00028e34
   1a584:	00028dd4 	.word	0x00028dd4
   1a588:	0002b935 	.word	0x0002b935

0001a58c <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   1a58c:	b510      	push	{r4, lr}
   1a58e:	b08a      	sub	sp, #40	; 0x28
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   1a590:	4668      	mov	r0, sp
   1a592:	f7ff ffb5 	bl	1a500 <bt_id_read_public_addr>
   1a596:	4c1d      	ldr	r4, [pc, #116]	; (1a60c <bt_setup_public_id_addr+0x80>)
   1a598:	71e0      	strb	r0, [r4, #7]

	if (!bt_dev.id_count) {
   1a59a:	b340      	cbz	r0, 1a5ee <bt_setup_public_id_addr+0x62>
	memset(ir, 0, 16);
   1a59c:	2210      	movs	r2, #16
   1a59e:	2100      	movs	r1, #0
   1a5a0:	a806      	add	r0, sp, #24
   1a5a2:	f00a fc78 	bl	24e96 <memset>
	if (!BT_VS_CMD_READ_KEY_ROOTS(bt_dev.vs_commands)) {
   1a5a6:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   1a5aa:	079b      	lsls	r3, r3, #30
   1a5ac:	d510      	bpl.n	1a5d0 <bt_setup_public_id_addr+0x44>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_KEY_HIERARCHY_ROOTS, NULL,
   1a5ae:	aa02      	add	r2, sp, #8
   1a5b0:	2100      	movs	r1, #0
   1a5b2:	f64f 400a 	movw	r0, #64522	; 0xfc0a
   1a5b6:	f7fe fd69 	bl	1908c <bt_hci_cmd_send_sync>
	if (err) {
   1a5ba:	b1d0      	cbz	r0, 1a5f2 <bt_setup_public_id_addr+0x66>
   1a5bc:	4914      	ldr	r1, [pc, #80]	; (1a610 <bt_setup_public_id_addr+0x84>)
   1a5be:	4b15      	ldr	r3, [pc, #84]	; (1a614 <bt_setup_public_id_addr+0x88>)
		BT_WARN("Failed to read identity root");
   1a5c0:	4815      	ldr	r0, [pc, #84]	; (1a618 <bt_setup_public_id_addr+0x8c>)
   1a5c2:	1ac9      	subs	r1, r1, r3
   1a5c4:	08c9      	lsrs	r1, r1, #3
   1a5c6:	0189      	lsls	r1, r1, #6
   1a5c8:	f041 0102 	orr.w	r1, r1, #2
   1a5cc:	f009 fc49 	bl	23e62 <log_0>
	uint8_t ir_irk[16];
	uint8_t ir[16];

	bt_read_identity_root(ir);

	if (!bt_smp_irk_get(ir, ir_irk)) {
   1a5d0:	a902      	add	r1, sp, #8
   1a5d2:	a806      	add	r0, sp, #24
   1a5d4:	f00c fc2a 	bl	26e2c <bt_smp_irk_get>
   1a5d8:	b1b0      	cbz	r0, 1a608 <bt_setup_public_id_addr+0x7c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a5da:	4810      	ldr	r0, [pc, #64]	; (1a61c <bt_setup_public_id_addr+0x90>)
   1a5dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   1a5e0:	f00b ffb1 	bl	26546 <atomic_or>
	uint8_t *irk = NULL;
   1a5e4:	2200      	movs	r2, #0
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
   1a5e6:	4669      	mov	r1, sp
   1a5e8:	2000      	movs	r0, #0
   1a5ea:	f7ff fcab 	bl	19f44 <id_create>
}
   1a5ee:	b00a      	add	sp, #40	; 0x28
   1a5f0:	bd10      	pop	{r4, pc}
	rp = (void *)rsp->data;
   1a5f2:	9b02      	ldr	r3, [sp, #8]
	memcpy(ir, rp->ir, 16);
   1a5f4:	6899      	ldr	r1, [r3, #8]
   1a5f6:	2210      	movs	r2, #16
   1a5f8:	3101      	adds	r1, #1
   1a5fa:	a806      	add	r0, sp, #24
   1a5fc:	f00a fc40 	bl	24e80 <memcpy>
	net_buf_unref(rsp);
   1a600:	9802      	ldr	r0, [sp, #8]
   1a602:	f002 fd6d 	bl	1d0e0 <net_buf_unref>
   1a606:	e7e3      	b.n	1a5d0 <bt_setup_public_id_addr+0x44>
		irk = ir_irk;
   1a608:	aa02      	add	r2, sp, #8
   1a60a:	e7ec      	b.n	1a5e6 <bt_setup_public_id_addr+0x5a>
   1a60c:	200002b0 	.word	0x200002b0
   1a610:	00028e34 	.word	0x00028e34
   1a614:	00028dd4 	.word	0x00028dd4
   1a618:	0002b953 	.word	0x0002b953
   1a61c:	2000037c 	.word	0x2000037c

0001a620 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   1a620:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1a624:	4b25      	ldr	r3, [pc, #148]	; (1a6bc <bt_read_static_addr+0x9c>)
   1a626:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
   1a62a:	f014 0401 	ands.w	r4, r4, #1
{
   1a62e:	4607      	mov	r7, r0
   1a630:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1a632:	d10a      	bne.n	1a64a <bt_read_static_addr+0x2a>
   1a634:	4922      	ldr	r1, [pc, #136]	; (1a6c0 <bt_read_static_addr+0xa0>)
   1a636:	4b23      	ldr	r3, [pc, #140]	; (1a6c4 <bt_read_static_addr+0xa4>)
		BT_WARN("Read Static Addresses command not available");
   1a638:	4823      	ldr	r0, [pc, #140]	; (1a6c8 <bt_read_static_addr+0xa8>)
   1a63a:	1ac9      	subs	r1, r1, r3
   1a63c:	08c9      	lsrs	r1, r1, #3
   1a63e:	0189      	lsls	r1, r1, #6
   1a640:	f041 0102 	orr.w	r1, r1, #2
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
   1a644:	f009 fc0d 	bl	23e62 <log_0>
   1a648:	e012      	b.n	1a670 <bt_read_static_addr+0x50>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   1a64a:	aa01      	add	r2, sp, #4
   1a64c:	2100      	movs	r1, #0
   1a64e:	f64f 4009 	movw	r0, #64521	; 0xfc09
   1a652:	f7fe fd1b 	bl	1908c <bt_hci_cmd_send_sync>
	if (err) {
   1a656:	4605      	mov	r5, r0
   1a658:	b170      	cbz	r0, 1a678 <bt_read_static_addr+0x58>
   1a65a:	4b1a      	ldr	r3, [pc, #104]	; (1a6c4 <bt_read_static_addr+0xa4>)
   1a65c:	4918      	ldr	r1, [pc, #96]	; (1a6c0 <bt_read_static_addr+0xa0>)
		BT_WARN("Failed to read static addresses");
   1a65e:	481b      	ldr	r0, [pc, #108]	; (1a6cc <bt_read_static_addr+0xac>)
   1a660:	1ac9      	subs	r1, r1, r3
   1a662:	08c9      	lsrs	r1, r1, #3
   1a664:	0189      	lsls	r1, r1, #6
   1a666:	f041 0102 	orr.w	r1, r1, #2
   1a66a:	f009 fbfa 	bl	23e62 <log_0>
		return 0;
   1a66e:	2400      	movs	r4, #0
	}

	return cnt;
}
   1a670:	4620      	mov	r0, r4
   1a672:	b002      	add	sp, #8
   1a674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rp = (void *)rsp->data;
   1a678:	9b01      	ldr	r3, [sp, #4]
   1a67a:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   1a67c:	785c      	ldrb	r4, [r3, #1]
   1a67e:	42b4      	cmp	r4, r6
   1a680:	bf28      	it	cs
   1a682:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   1a684:	f04f 0816 	mov.w	r8, #22
   1a688:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   1a68a:	42a5      	cmp	r5, r4
   1a68c:	db0d      	blt.n	1a6aa <bt_read_static_addr+0x8a>
	net_buf_unref(rsp);
   1a68e:	9801      	ldr	r0, [sp, #4]
   1a690:	f002 fd26 	bl	1d0e0 <net_buf_unref>
	if (!cnt) {
   1a694:	2c00      	cmp	r4, #0
   1a696:	d1eb      	bne.n	1a670 <bt_read_static_addr+0x50>
   1a698:	4909      	ldr	r1, [pc, #36]	; (1a6c0 <bt_read_static_addr+0xa0>)
   1a69a:	4b0a      	ldr	r3, [pc, #40]	; (1a6c4 <bt_read_static_addr+0xa4>)
		BT_WARN("No static addresses stored in controller");
   1a69c:	480c      	ldr	r0, [pc, #48]	; (1a6d0 <bt_read_static_addr+0xb0>)
   1a69e:	1ac9      	subs	r1, r1, r3
   1a6a0:	08c9      	lsrs	r1, r1, #3
   1a6a2:	0189      	lsls	r1, r1, #6
   1a6a4:	f041 0102 	orr.w	r1, r1, #2
   1a6a8:	e7cc      	b.n	1a644 <bt_read_static_addr+0x24>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   1a6aa:	fb08 7005 	mla	r0, r8, r5, r7
   1a6ae:	2216      	movs	r2, #22
   1a6b0:	4631      	mov	r1, r6
   1a6b2:	f00a fbe5 	bl	24e80 <memcpy>
	for (i = 0; i < cnt; i++) {
   1a6b6:	3501      	adds	r5, #1
   1a6b8:	e7e7      	b.n	1a68a <bt_read_static_addr+0x6a>
   1a6ba:	bf00      	nop
   1a6bc:	200002b0 	.word	0x200002b0
   1a6c0:	00028e34 	.word	0x00028e34
   1a6c4:	00028dd4 	.word	0x00028dd4
   1a6c8:	0002b970 	.word	0x0002b970
   1a6cc:	0002b99c 	.word	0x0002b99c
   1a6d0:	0002b9bc 	.word	0x0002b9bc

0001a6d4 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   1a6d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   1a6d8:	4c22      	ldr	r4, [pc, #136]	; (1a764 <bt_setup_random_id_addr+0x90>)
   1a6da:	79e5      	ldrb	r5, [r4, #7]
{
   1a6dc:	b08c      	sub	sp, #48	; 0x30
	if (!bt_dev.id_count) {
   1a6de:	b92d      	cbnz	r5, 1a6ec <bt_setup_random_id_addr+0x18>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   1a6e0:	2101      	movs	r1, #1
   1a6e2:	a806      	add	r0, sp, #24
   1a6e4:	f7ff ff9c 	bl	1a620 <bt_read_static_addr>
   1a6e8:	71e0      	strb	r0, [r4, #7]

		if (bt_dev.id_count) {
   1a6ea:	bb80      	cbnz	r0, 1a74e <bt_setup_random_id_addr+0x7a>
   1a6ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   1a6f0:	481d      	ldr	r0, [pc, #116]	; (1a768 <bt_setup_random_id_addr+0x94>)
   1a6f2:	f00b ff28 	bl	26546 <atomic_or>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   1a6f6:	2100      	movs	r1, #0
   1a6f8:	4608      	mov	r0, r1
   1a6fa:	f7ff fe99 	bl	1a430 <bt_id_create>
   1a6fe:	e021      	b.n	1a744 <bt_setup_random_id_addr+0x70>
				if (!bt_smp_irk_get(addrs[i].ir, ir_irk)) {
   1a700:	fb08 fa06 	mul.w	sl, r8, r6
   1a704:	f10a 0006 	add.w	r0, sl, #6
   1a708:	ab06      	add	r3, sp, #24
   1a70a:	a902      	add	r1, sp, #8
   1a70c:	4418      	add	r0, r3
   1a70e:	f00c fb8d 	bl	26e2c <bt_smp_irk_get>
   1a712:	b1d0      	cbz	r0, 1a74a <bt_setup_random_id_addr+0x76>
   1a714:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   1a718:	4648      	mov	r0, r9
   1a71a:	f00b ff14 	bl	26546 <atomic_or>
				uint8_t *irk = NULL;
   1a71e:	2700      	movs	r7, #0
   1a720:	ab06      	add	r3, sp, #24
   1a722:	eb03 010a 	add.w	r1, r3, sl
   1a726:	2206      	movs	r2, #6
   1a728:	f10d 0001 	add.w	r0, sp, #1
   1a72c:	f00a fba8 	bl	24e80 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   1a730:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   1a732:	463a      	mov	r2, r7
   1a734:	4669      	mov	r1, sp
   1a736:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
   1a738:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   1a73c:	f7ff fc02 	bl	19f44 <id_create>
				if (err) {
   1a740:	3501      	adds	r5, #1
   1a742:	b140      	cbz	r0, 1a756 <bt_setup_random_id_addr+0x82>
}
   1a744:	b00c      	add	sp, #48	; 0x30
   1a746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					irk = ir_irk;
   1a74a:	af02      	add	r7, sp, #8
   1a74c:	e7e8      	b.n	1a720 <bt_setup_random_id_addr+0x4c>
   1a74e:	f04f 0816 	mov.w	r8, #22
   1a752:	f104 09cc 	add.w	r9, r4, #204	; 0xcc
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   1a756:	79e3      	ldrb	r3, [r4, #7]
   1a758:	b2ee      	uxtb	r6, r5
   1a75a:	42b3      	cmp	r3, r6
   1a75c:	d8d0      	bhi.n	1a700 <bt_setup_random_id_addr+0x2c>
			return 0;
   1a75e:	2000      	movs	r0, #0
   1a760:	e7f0      	b.n	1a744 <bt_setup_random_id_addr+0x70>
   1a762:	bf00      	nop
   1a764:	200002b0 	.word	0x200002b0
   1a768:	2000037c 	.word	0x2000037c

0001a76c <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   1a76c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   1a770:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
   1a774:	7805      	ldrb	r5, [r0, #0]
{
   1a776:	4684      	mov	ip, r0
   1a778:	460f      	mov	r7, r1
   1a77a:	4690      	mov	r8, r2
   1a77c:	461e      	mov	r6, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   1a77e:	d035      	beq.n	1a7ec <bt_id_set_adv_own_addr+0x80>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   1a780:	b132      	cbz	r2, 1a790 <bt_id_set_adv_own_addr+0x24>
   1a782:	068b      	lsls	r3, r1, #26
   1a784:	d504      	bpl.n	1a790 <bt_id_set_adv_own_addr+0x24>
		    !BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   1a786:	4b28      	ldr	r3, [pc, #160]	; (1a828 <bt_id_set_adv_own_addr+0xbc>)
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   1a788:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   1a78c:	065c      	lsls	r4, r3, #25
   1a78e:	d547      	bpl.n	1a820 <bt_id_set_adv_own_addr+0xb4>
			return -ENOTSUP;
		}

		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   1a790:	0778      	lsls	r0, r7, #29
   1a792:	d40b      	bmi.n	1a7ac <bt_id_set_adv_own_addr+0x40>
		    !(options & BT_LE_ADV_OPT_USE_IDENTITY)) {
			err = bt_id_set_adv_private_addr(adv);
   1a794:	4660      	mov	r0, ip
   1a796:	f00b ff4f 	bl	26638 <bt_id_set_adv_private_addr>
			if (err) {
   1a79a:	bb00      	cbnz	r0, 1a7de <bt_id_set_adv_own_addr+0x72>
				return err;
			}

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   1a79c:	f1b8 0f00 	cmp.w	r8, #0
   1a7a0:	d03c      	beq.n	1a81c <bt_id_set_adv_own_addr+0xb0>
   1a7a2:	06b9      	lsls	r1, r7, #26
   1a7a4:	d53a      	bpl.n	1a81c <bt_id_set_adv_own_addr+0xb0>
				*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
   1a7a6:	2303      	movs	r3, #3
				scan_enabled = true;
				bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
			}
#endif /* defined(CONFIG_BT_OBSERVER) */
			err = bt_id_set_adv_private_addr(adv);
			*own_addr_type = BT_ADDR_LE_RANDOM;
   1a7a8:	7033      	strb	r3, [r6, #0]
		} else {
			err = bt_id_set_adv_private_addr(adv);
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}

		if (err) {
   1a7aa:	e018      	b.n	1a7de <bt_id_set_adv_own_addr+0x72>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1a7ac:	4c1e      	ldr	r4, [pc, #120]	; (1a828 <bt_id_set_adv_own_addr+0xbc>)
   1a7ae:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   1a7b2:	ea4f 09c5 	mov.w	r9, r5, lsl #3
   1a7b6:	5ce3      	ldrb	r3, [r4, r3]
   1a7b8:	2b01      	cmp	r3, #1
   1a7ba:	d008      	beq.n	1a7ce <bt_id_set_adv_own_addr+0x62>
			*own_addr_type = id_addr->type;
   1a7bc:	eba9 0505 	sub.w	r5, r9, r5
   1a7c0:	5d63      	ldrb	r3, [r4, r5]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   1a7c2:	f1b8 0f00 	cmp.w	r8, #0
   1a7c6:	d10c      	bne.n	1a7e2 <bt_id_set_adv_own_addr+0x76>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   1a7c8:	7033      	strb	r3, [r6, #0]
			return err;
		}
	}

	return 0;
   1a7ca:	2000      	movs	r0, #0
   1a7cc:	e007      	b.n	1a7de <bt_id_set_adv_own_addr+0x72>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   1a7ce:	2007      	movs	r0, #7
   1a7d0:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   1a7d4:	4420      	add	r0, r4
   1a7d6:	f7ff fb87 	bl	19ee8 <set_random_address>
				if (err) {
   1a7da:	2800      	cmp	r0, #0
   1a7dc:	d0ee      	beq.n	1a7bc <bt_id_set_adv_own_addr+0x50>
}
   1a7de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   1a7e2:	06ba      	lsls	r2, r7, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   1a7e4:	bf48      	it	mi
   1a7e6:	f043 0302 	orrmi.w	r3, r3, #2
   1a7ea:	e7ed      	b.n	1a7c8 <bt_id_set_adv_own_addr+0x5c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   1a7ec:	074b      	lsls	r3, r1, #29
   1a7ee:	d513      	bpl.n	1a818 <bt_id_set_adv_own_addr+0xac>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1a7f0:	4f0d      	ldr	r7, [pc, #52]	; (1a828 <bt_id_set_adv_own_addr+0xbc>)
   1a7f2:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   1a7f6:	ea4f 08c5 	mov.w	r8, r5, lsl #3
   1a7fa:	5cfb      	ldrb	r3, [r7, r3]
   1a7fc:	2b01      	cmp	r3, #1
   1a7fe:	d109      	bne.n	1a814 <bt_id_set_adv_own_addr+0xa8>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   1a800:	2007      	movs	r0, #7
   1a802:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   1a806:	4438      	add	r0, r7
   1a808:	f7ff fb6e 	bl	19ee8 <set_random_address>
			*own_addr_type = id_addr->type;
   1a80c:	eba8 0505 	sub.w	r5, r8, r5
   1a810:	5d7b      	ldrb	r3, [r7, r5]
   1a812:	e7c9      	b.n	1a7a8 <bt_id_set_adv_own_addr+0x3c>
	int err = 0;
   1a814:	4620      	mov	r0, r4
   1a816:	e7f9      	b.n	1a80c <bt_id_set_adv_own_addr+0xa0>
			err = bt_id_set_adv_private_addr(adv);
   1a818:	f00b ff0e 	bl	26638 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   1a81c:	2301      	movs	r3, #1
   1a81e:	e7c3      	b.n	1a7a8 <bt_id_set_adv_own_addr+0x3c>
			return -ENOTSUP;
   1a820:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1a824:	e7db      	b.n	1a7de <bt_id_set_adv_own_addr+0x72>
   1a826:	bf00      	nop
   1a828:	200002b0 	.word	0x200002b0

0001a82c <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   1a82c:	b508      	push	{r3, lr}
			return err;
		}
	}

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
   1a82e:	4903      	ldr	r1, [pc, #12]	; (1a83c <bt_id_init+0x10>)
   1a830:	4803      	ldr	r0, [pc, #12]	; (1a840 <bt_id_init+0x14>)
   1a832:	f00e f82c 	bl	2888e <k_work_init_delayable>
#endif

	return 0;
}
   1a836:	2000      	movs	r0, #0
   1a838:	bd08      	pop	{r3, pc}
   1a83a:	bf00      	nop
   1a83c:	0001a0dd 	.word	0x0001a0dd
   1a840:	20000430 	.word	0x20000430

0001a844 <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   1a844:	b5f0      	push	{r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1a846:	4c1e      	ldr	r4, [pc, #120]	; (1a8c0 <bt_keys_get_addr+0x7c>)
   1a848:	7823      	ldrb	r3, [r4, #0]
   1a84a:	4283      	cmp	r3, r0
{
   1a84c:	b085      	sub	sp, #20
   1a84e:	4606      	mov	r6, r0
   1a850:	460f      	mov	r7, r1
   1a852:	4625      	mov	r5, r4
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1a854:	d02b      	beq.n	1a8ae <bt_keys_get_addr+0x6a>
			return keys;
		}
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   1a856:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
   1a858:	481a      	ldr	r0, [pc, #104]	; (1a8c4 <bt_keys_get_addr+0x80>)
   1a85a:	9402      	str	r4, [sp, #8]
   1a85c:	2207      	movs	r2, #7
   1a85e:	a902      	add	r1, sp, #8
   1a860:	f8cd 400b 	str.w	r4, [sp, #11]
   1a864:	f00a fafc 	bl	24e60 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   1a868:	b188      	cbz	r0, 1a88e <bt_keys_get_addr+0x4a>
	memcpy(dst, src, sizeof(*dst));
   1a86a:	2207      	movs	r2, #7
   1a86c:	4915      	ldr	r1, [pc, #84]	; (1a8c4 <bt_keys_get_addr+0x80>)
   1a86e:	4668      	mov	r0, sp
   1a870:	f00a fb06 	bl	24e80 <memcpy>
			return NULL;
		}

		/* Use a copy as bt_unpair will clear the oldest key. */
		bt_addr_le_copy(&oldest_addr, &oldest->addr);
		bt_unpair(oldest->id, &oldest_addr);
   1a874:	4669      	mov	r1, sp
   1a876:	7828      	ldrb	r0, [r5, #0]
   1a878:	f7fe fef8 	bl	1966c <bt_unpair>
	return memcmp(a, b, sizeof(*a));
   1a87c:	4811      	ldr	r0, [pc, #68]	; (1a8c4 <bt_keys_get_addr+0x80>)
		if (!bt_addr_le_cmp(&oldest->addr, BT_ADDR_LE_ANY)) {
   1a87e:	9402      	str	r4, [sp, #8]
   1a880:	2207      	movs	r2, #7
   1a882:	a902      	add	r1, sp, #8
   1a884:	f8cd 400b 	str.w	r4, [sp, #11]
   1a888:	f00a faea 	bl	24e60 <memcmp>
   1a88c:	b9a8      	cbnz	r0, 1a8ba <bt_keys_get_addr+0x76>
	memcpy(dst, src, sizeof(*dst));
   1a88e:	2207      	movs	r2, #7
   1a890:	480c      	ldr	r0, [pc, #48]	; (1a8c4 <bt_keys_get_addr+0x80>)
	}

#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
		keys = &key_pool[first_free_slot];
		keys->id = id;
   1a892:	702e      	strb	r6, [r5, #0]
   1a894:	4639      	mov	r1, r7
   1a896:	f00a faf3 	bl	24e80 <memcpy>
		bt_addr_le_copy(&keys->addr, addr);
#if IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST)
		keys->aging_counter = ++aging_counter_val;
   1a89a:	4a0b      	ldr	r2, [pc, #44]	; (1a8c8 <bt_keys_get_addr+0x84>)
		last_keys_updated = keys;
#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
		BT_DBG("created %p for %s", keys, bt_addr_le_str(addr));
		return keys;
   1a89c:	4808      	ldr	r0, [pc, #32]	; (1a8c0 <bt_keys_get_addr+0x7c>)
		keys->aging_counter = ++aging_counter_val;
   1a89e:	6813      	ldr	r3, [r2, #0]
   1a8a0:	3301      	adds	r3, #1
   1a8a2:	6013      	str	r3, [r2, #0]
   1a8a4:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
		last_keys_updated = keys;
   1a8a8:	4b08      	ldr	r3, [pc, #32]	; (1a8cc <bt_keys_get_addr+0x88>)
   1a8aa:	601d      	str	r5, [r3, #0]
		return keys;
   1a8ac:	e006      	b.n	1a8bc <bt_keys_get_addr+0x78>
	return memcmp(a, b, sizeof(*a));
   1a8ae:	2207      	movs	r2, #7
   1a8b0:	1c60      	adds	r0, r4, #1
   1a8b2:	f00a fad5 	bl	24e60 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1a8b6:	2800      	cmp	r0, #0
   1a8b8:	d1cd      	bne.n	1a856 <bt_keys_get_addr+0x12>
		keys = &key_pool[i];
   1a8ba:	4620      	mov	r0, r4
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
}
   1a8bc:	b005      	add	sp, #20
   1a8be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a8c0:	200024c0 	.word	0x200024c0
   1a8c4:	200024c1 	.word	0x200024c1
   1a8c8:	200024bc 	.word	0x200024bc
   1a8cc:	20002548 	.word	0x20002548

0001a8d0 <bt_foreach_bond>:

void bt_foreach_bond(uint8_t id, void (*func)(const struct bt_bond_info *info,
					   void *user_data),
		     void *user_data)
{
   1a8d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1a8d2:	460c      	mov	r4, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		struct bt_keys *keys = &key_pool[i];

		if (keys->keys && keys->id == id) {
   1a8d4:	4908      	ldr	r1, [pc, #32]	; (1a8f8 <bt_foreach_bond+0x28>)
   1a8d6:	89cb      	ldrh	r3, [r1, #14]
{
   1a8d8:	4615      	mov	r5, r2
		if (keys->keys && keys->id == id) {
   1a8da:	b153      	cbz	r3, 1a8f2 <bt_foreach_bond+0x22>
   1a8dc:	780b      	ldrb	r3, [r1, #0]
   1a8de:	4283      	cmp	r3, r0
   1a8e0:	d107      	bne.n	1a8f2 <bt_foreach_bond+0x22>
	memcpy(dst, src, sizeof(*dst));
   1a8e2:	3101      	adds	r1, #1
   1a8e4:	2207      	movs	r2, #7
   1a8e6:	4668      	mov	r0, sp
   1a8e8:	f00a faca 	bl	24e80 <memcpy>
			struct bt_bond_info info;

			bt_addr_le_copy(&info.addr, &keys->addr);
			func(&info, user_data);
   1a8ec:	4629      	mov	r1, r5
   1a8ee:	4668      	mov	r0, sp
   1a8f0:	47a0      	blx	r4
		}
	}
}
   1a8f2:	b003      	add	sp, #12
   1a8f4:	bd30      	pop	{r4, r5, pc}
   1a8f6:	bf00      	nop
   1a8f8:	200024c0 	.word	0x200024c0

0001a8fc <bt_keys_foreach>:

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   1a8fc:	460b      	mov	r3, r1
   1a8fe:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   1a900:	4a04      	ldr	r2, [pc, #16]	; (1a914 <bt_keys_foreach+0x18>)
{
   1a902:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
   1a904:	89d4      	ldrh	r4, [r2, #14]
   1a906:	4204      	tst	r4, r0
   1a908:	d002      	beq.n	1a910 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
   1a90a:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   1a90c:	4610      	mov	r0, r2
   1a90e:	4718      	bx	r3
}
   1a910:	bc10      	pop	{r4}
   1a912:	4770      	bx	lr
   1a914:	200024c0 	.word	0x200024c0

0001a918 <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
   1a918:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
   1a91a:	4903      	ldr	r1, [pc, #12]	; (1a928 <keys_commit+0x10>)
   1a91c:	2200      	movs	r2, #0
   1a91e:	2002      	movs	r0, #2
   1a920:	f7ff ffec 	bl	1a8fc <bt_keys_foreach>
	}

	return 0;
}
   1a924:	2000      	movs	r0, #0
   1a926:	bd08      	pop	{r3, pc}
   1a928:	00026663 	.word	0x00026663

0001a92c <bt_keys_find>:
{
   1a92c:	b510      	push	{r4, lr}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1a92e:	4c09      	ldr	r4, [pc, #36]	; (1a954 <bt_keys_find+0x28>)
{
   1a930:	460b      	mov	r3, r1
   1a932:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1a934:	89e2      	ldrh	r2, [r4, #14]
   1a936:	4202      	tst	r2, r0
   1a938:	d007      	beq.n	1a94a <bt_keys_find+0x1e>
   1a93a:	7822      	ldrb	r2, [r4, #0]
   1a93c:	429a      	cmp	r2, r3
   1a93e:	d104      	bne.n	1a94a <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
   1a940:	2207      	movs	r2, #7
   1a942:	1c60      	adds	r0, r4, #1
   1a944:	f00a fa8c 	bl	24e60 <memcmp>
   1a948:	b108      	cbz	r0, 1a94e <bt_keys_find+0x22>
	return NULL;
   1a94a:	2000      	movs	r0, #0
}
   1a94c:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1a94e:	4620      	mov	r0, r4
   1a950:	e7fc      	b.n	1a94c <bt_keys_find+0x20>
   1a952:	bf00      	nop
   1a954:	200024c0 	.word	0x200024c0

0001a958 <bt_keys_find_irk>:
{
   1a958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1a95a:	780b      	ldrb	r3, [r1, #0]
   1a95c:	2b01      	cmp	r3, #1
   1a95e:	4607      	mov	r7, r0
   1a960:	460c      	mov	r4, r1
   1a962:	d001      	beq.n	1a968 <bt_keys_find_irk+0x10>
		return NULL;
   1a964:	2000      	movs	r0, #0
}
   1a966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   1a968:	798b      	ldrb	r3, [r1, #6]
   1a96a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1a96e:	2b40      	cmp	r3, #64	; 0x40
   1a970:	d1f8      	bne.n	1a964 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1a972:	4d13      	ldr	r5, [pc, #76]	; (1a9c0 <bt_keys_find_irk+0x68>)
   1a974:	89eb      	ldrh	r3, [r5, #14]
   1a976:	f013 0f02 	tst.w	r3, #2
   1a97a:	462e      	mov	r6, r5
   1a97c:	d0f2      	beq.n	1a964 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
   1a97e:	7833      	ldrb	r3, [r6, #0]
   1a980:	42bb      	cmp	r3, r7
   1a982:	d10b      	bne.n	1a99c <bt_keys_find_irk+0x44>
	return memcmp(a, b, sizeof(*a));
   1a984:	2206      	movs	r2, #6
   1a986:	f106 013a 	add.w	r1, r6, #58	; 0x3a
   1a98a:	1c60      	adds	r0, r4, #1
   1a98c:	f00a fa68 	bl	24e60 <memcmp>
   1a990:	b908      	cbnz	r0, 1a996 <bt_keys_find_irk+0x3e>
			return &key_pool[i];
   1a992:	4628      	mov	r0, r5
   1a994:	e7e7      	b.n	1a966 <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1a996:	89f3      	ldrh	r3, [r6, #14]
   1a998:	079b      	lsls	r3, r3, #30
   1a99a:	d5e3      	bpl.n	1a964 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   1a99c:	7833      	ldrb	r3, [r6, #0]
   1a99e:	42bb      	cmp	r3, r7
   1a9a0:	d1e0      	bne.n	1a964 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   1a9a2:	3401      	adds	r4, #1
   1a9a4:	4807      	ldr	r0, [pc, #28]	; (1a9c4 <bt_keys_find_irk+0x6c>)
   1a9a6:	4621      	mov	r1, r4
   1a9a8:	f00a fb32 	bl	25010 <bt_rpa_irk_matches>
   1a9ac:	2800      	cmp	r0, #0
   1a9ae:	d0d9      	beq.n	1a964 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
   1a9b0:	4805      	ldr	r0, [pc, #20]	; (1a9c8 <bt_keys_find_irk+0x70>)
   1a9b2:	2206      	movs	r2, #6
   1a9b4:	4621      	mov	r1, r4
   1a9b6:	f00a fa63 	bl	24e80 <memcpy>
			return &key_pool[i];
   1a9ba:	4801      	ldr	r0, [pc, #4]	; (1a9c0 <bt_keys_find_irk+0x68>)
}
   1a9bc:	e7d3      	b.n	1a966 <bt_keys_find_irk+0xe>
   1a9be:	bf00      	nop
   1a9c0:	200024c0 	.word	0x200024c0
   1a9c4:	200024ea 	.word	0x200024ea
   1a9c8:	200024fa 	.word	0x200024fa

0001a9cc <bt_keys_find_addr>:
{
   1a9cc:	b510      	push	{r4, lr}
		if (key_pool[i].id == id &&
   1a9ce:	4c06      	ldr	r4, [pc, #24]	; (1a9e8 <bt_keys_find_addr+0x1c>)
   1a9d0:	7823      	ldrb	r3, [r4, #0]
   1a9d2:	4283      	cmp	r3, r0
   1a9d4:	d104      	bne.n	1a9e0 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   1a9d6:	2207      	movs	r2, #7
   1a9d8:	1c60      	adds	r0, r4, #1
   1a9da:	f00a fa41 	bl	24e60 <memcmp>
   1a9de:	b108      	cbz	r0, 1a9e4 <bt_keys_find_addr+0x18>
	return NULL;
   1a9e0:	2000      	movs	r0, #0
}
   1a9e2:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1a9e4:	4620      	mov	r0, r4
   1a9e6:	e7fc      	b.n	1a9e2 <bt_keys_find_addr+0x16>
   1a9e8:	200024c0 	.word	0x200024c0

0001a9ec <bt_keys_clear>:
{
   1a9ec:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   1a9ee:	7a03      	ldrb	r3, [r0, #8]
   1a9f0:	075b      	lsls	r3, r3, #29
{
   1a9f2:	b08c      	sub	sp, #48	; 0x30
   1a9f4:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   1a9f6:	d501      	bpl.n	1a9fc <bt_keys_clear+0x10>
		bt_id_del(keys);
   1a9f8:	f7ff fc7e 	bl	1a2f8 <bt_id_del>
		if (keys->id) {
   1a9fc:	4625      	mov	r5, r4
   1a9fe:	f815 2b01 	ldrb.w	r2, [r5], #1
   1aa02:	b1aa      	cbz	r2, 1aa30 <bt_keys_clear+0x44>
			u8_to_dec(id, sizeof(id), keys->id);
   1aa04:	ae02      	add	r6, sp, #8
   1aa06:	2104      	movs	r1, #4
   1aa08:	4630      	mov	r0, r6
   1aa0a:	f008 f844 	bl	22a96 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1aa0e:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   1aa10:	462b      	mov	r3, r5
   1aa12:	4a08      	ldr	r2, [pc, #32]	; (1aa34 <bt_keys_clear+0x48>)
   1aa14:	2124      	movs	r1, #36	; 0x24
   1aa16:	a803      	add	r0, sp, #12
   1aa18:	f000 fbaa 	bl	1b170 <bt_settings_encode_key>
		settings_delete(key);
   1aa1c:	a803      	add	r0, sp, #12
   1aa1e:	f00a f99d 	bl	24d5c <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
   1aa22:	2288      	movs	r2, #136	; 0x88
   1aa24:	2100      	movs	r1, #0
   1aa26:	4620      	mov	r0, r4
   1aa28:	f00a fa35 	bl	24e96 <memset>
}
   1aa2c:	b00c      	add	sp, #48	; 0x30
   1aa2e:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "keys",
   1aa30:	9200      	str	r2, [sp, #0]
   1aa32:	e7ed      	b.n	1aa10 <bt_keys_clear+0x24>
   1aa34:	0002baac 	.word	0x0002baac

0001aa38 <keys_set>:
{
   1aa38:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aa3a:	4614      	mov	r4, r2
   1aa3c:	b0a3      	sub	sp, #140	; 0x8c
	if (!name) {
   1aa3e:	4606      	mov	r6, r0
   1aa40:	b970      	cbnz	r0, 1aa60 <keys_set+0x28>
   1aa42:	4957      	ldr	r1, [pc, #348]	; (1aba0 <keys_set+0x168>)
   1aa44:	4b57      	ldr	r3, [pc, #348]	; (1aba4 <keys_set+0x16c>)
		BT_ERR("Insufficient number of arguments");
   1aa46:	4858      	ldr	r0, [pc, #352]	; (1aba8 <keys_set+0x170>)
   1aa48:	1ac9      	subs	r1, r1, r3
   1aa4a:	08c9      	lsrs	r1, r1, #3
   1aa4c:	0189      	lsls	r1, r1, #6
   1aa4e:	f041 0101 	orr.w	r1, r1, #1
   1aa52:	f009 fa06 	bl	23e62 <log_0>
		return -EINVAL;
   1aa56:	f06f 0515 	mvn.w	r5, #21
}
   1aa5a:	4628      	mov	r0, r5
   1aa5c:	b023      	add	sp, #140	; 0x8c
   1aa5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	len = read_cb(cb_arg, val, sizeof(val));
   1aa60:	227c      	movs	r2, #124	; 0x7c
   1aa62:	a903      	add	r1, sp, #12
   1aa64:	4618      	mov	r0, r3
   1aa66:	47a0      	blx	r4
	if (len < 0) {
   1aa68:	1e04      	subs	r4, r0, #0
   1aa6a:	da0b      	bge.n	1aa84 <keys_set+0x4c>
   1aa6c:	4a4c      	ldr	r2, [pc, #304]	; (1aba0 <keys_set+0x168>)
   1aa6e:	4b4d      	ldr	r3, [pc, #308]	; (1aba4 <keys_set+0x16c>)
		BT_ERR("Failed to read value (err %zd)", len);
   1aa70:	484e      	ldr	r0, [pc, #312]	; (1abac <keys_set+0x174>)
   1aa72:	1ad2      	subs	r2, r2, r3
   1aa74:	08d2      	lsrs	r2, r2, #3
   1aa76:	0192      	lsls	r2, r2, #6
   1aa78:	f042 0201 	orr.w	r2, r2, #1
   1aa7c:	4621      	mov	r1, r4
   1aa7e:	f009 f9fd 	bl	23e7c <log_1>
   1aa82:	e7e8      	b.n	1aa56 <keys_set+0x1e>
	err = bt_settings_decode_key(name, &addr);
   1aa84:	a901      	add	r1, sp, #4
   1aa86:	4630      	mov	r0, r6
   1aa88:	f00b fea9 	bl	267de <bt_settings_decode_key>
	if (err) {
   1aa8c:	4605      	mov	r5, r0
   1aa8e:	b148      	cbz	r0, 1aaa4 <keys_set+0x6c>
   1aa90:	4a43      	ldr	r2, [pc, #268]	; (1aba0 <keys_set+0x168>)
   1aa92:	4b44      	ldr	r3, [pc, #272]	; (1aba4 <keys_set+0x16c>)
		BT_ERR("Unable to decode address %s", name);
   1aa94:	4846      	ldr	r0, [pc, #280]	; (1abb0 <keys_set+0x178>)
   1aa96:	1ad2      	subs	r2, r2, r3
   1aa98:	08d2      	lsrs	r2, r2, #3
   1aa9a:	0192      	lsls	r2, r2, #6
   1aa9c:	f042 0201 	orr.w	r2, r2, #1
   1aaa0:	4631      	mov	r1, r6
   1aaa2:	e7ec      	b.n	1aa7e <keys_set+0x46>
	settings_name_next(name, &next);
   1aaa4:	4669      	mov	r1, sp
   1aaa6:	4630      	mov	r0, r6
   1aaa8:	f00a f88c 	bl	24bc4 <settings_name_next>
	if (!next) {
   1aaac:	9800      	ldr	r0, [sp, #0]
   1aaae:	b170      	cbz	r0, 1aace <keys_set+0x96>
		unsigned long next_id = strtoul(next, NULL, 10);
   1aab0:	4629      	mov	r1, r5
   1aab2:	220a      	movs	r2, #10
   1aab4:	f00a f9f8 	bl	24ea8 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1aab8:	4601      	mov	r1, r0
   1aaba:	b140      	cbz	r0, 1aace <keys_set+0x96>
   1aabc:	4a38      	ldr	r2, [pc, #224]	; (1aba0 <keys_set+0x168>)
   1aabe:	4b39      	ldr	r3, [pc, #228]	; (1aba4 <keys_set+0x16c>)
			BT_ERR("Invalid local identity %lu", next_id);
   1aac0:	483c      	ldr	r0, [pc, #240]	; (1abb4 <keys_set+0x17c>)
   1aac2:	1ad2      	subs	r2, r2, r3
   1aac4:	08d2      	lsrs	r2, r2, #3
   1aac6:	0192      	lsls	r2, r2, #6
   1aac8:	f042 0201 	orr.w	r2, r2, #1
   1aacc:	e7d7      	b.n	1aa7e <keys_set+0x46>
	if (!len) {
   1aace:	b9ec      	cbnz	r4, 1ab0c <keys_set+0xd4>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   1aad0:	aa01      	add	r2, sp, #4
   1aad2:	4621      	mov	r1, r4
   1aad4:	203f      	movs	r0, #63	; 0x3f
   1aad6:	f7ff ff29 	bl	1a92c <bt_keys_find>
		if (keys) {
   1aada:	b128      	cbz	r0, 1aae8 <keys_set+0xb0>
			(void)memset(keys, 0, sizeof(*keys));
   1aadc:	2288      	movs	r2, #136	; 0x88
   1aade:	4621      	mov	r1, r4
   1aae0:	f00a f9d9 	bl	24e96 <memset>
		return 0;
   1aae4:	4625      	mov	r5, r4
   1aae6:	e7b8      	b.n	1aa5a <keys_set+0x22>
   1aae8:	4a2e      	ldr	r2, [pc, #184]	; (1aba4 <keys_set+0x16c>)
   1aaea:	4d2d      	ldr	r5, [pc, #180]	; (1aba0 <keys_set+0x168>)
			BT_WARN("Unable to find deleted keys for %s",
   1aaec:	a801      	add	r0, sp, #4
   1aaee:	1aad      	subs	r5, r5, r2
   1aaf0:	f7f9 fcb4 	bl	1445c <bt_addr_le_str_real>
   1aaf4:	f7f7 fa28 	bl	11f48 <z_log_strdup>
   1aaf8:	08ed      	lsrs	r5, r5, #3
   1aafa:	01ad      	lsls	r5, r5, #6
   1aafc:	f045 0502 	orr.w	r5, r5, #2
   1ab00:	4601      	mov	r1, r0
   1ab02:	462a      	mov	r2, r5
   1ab04:	482c      	ldr	r0, [pc, #176]	; (1abb8 <keys_set+0x180>)
   1ab06:	f009 f9b9 	bl	23e7c <log_1>
   1ab0a:	e7eb      	b.n	1aae4 <keys_set+0xac>
	keys = bt_keys_get_addr(id, &addr);
   1ab0c:	a901      	add	r1, sp, #4
   1ab0e:	2000      	movs	r0, #0
   1ab10:	f7ff fe98 	bl	1a844 <bt_keys_get_addr>
	if (!keys) {
   1ab14:	4607      	mov	r7, r0
   1ab16:	b998      	cbnz	r0, 1ab40 <keys_set+0x108>
   1ab18:	4a22      	ldr	r2, [pc, #136]	; (1aba4 <keys_set+0x16c>)
   1ab1a:	4c21      	ldr	r4, [pc, #132]	; (1aba0 <keys_set+0x168>)
		BT_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
   1ab1c:	a801      	add	r0, sp, #4
   1ab1e:	1aa4      	subs	r4, r4, r2
   1ab20:	f7f9 fc9c 	bl	1445c <bt_addr_le_str_real>
   1ab24:	f7f7 fa10 	bl	11f48 <z_log_strdup>
   1ab28:	08e4      	lsrs	r4, r4, #3
   1ab2a:	01a4      	lsls	r4, r4, #6
   1ab2c:	f044 0401 	orr.w	r4, r4, #1
   1ab30:	4601      	mov	r1, r0
   1ab32:	4622      	mov	r2, r4
   1ab34:	4821      	ldr	r0, [pc, #132]	; (1abbc <keys_set+0x184>)
   1ab36:	f009 f9a1 	bl	23e7c <log_1>
		return -ENOMEM;
   1ab3a:	f06f 050b 	mvn.w	r5, #11
   1ab3e:	e78c      	b.n	1aa5a <keys_set+0x22>
	if (len != BT_KEYS_STORAGE_LEN) {
   1ab40:	2c7c      	cmp	r4, #124	; 0x7c
   1ab42:	d013      	beq.n	1ab6c <keys_set+0x134>
		if (IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST) &&
   1ab44:	4b16      	ldr	r3, [pc, #88]	; (1aba0 <keys_set+0x168>)
   1ab46:	4a17      	ldr	r2, [pc, #92]	; (1aba4 <keys_set+0x16c>)
   1ab48:	1a9b      	subs	r3, r3, r2
   1ab4a:	08db      	lsrs	r3, r3, #3
   1ab4c:	2c78      	cmp	r4, #120	; 0x78
   1ab4e:	ea4f 1383 	mov.w	r3, r3, lsl #6
   1ab52:	d119      	bne.n	1ab88 <keys_set+0x150>
			BT_WARN("Keys for %s have no aging counter",
   1ab54:	a801      	add	r0, sp, #4
   1ab56:	f043 0602 	orr.w	r6, r3, #2
   1ab5a:	f7f9 fc7f 	bl	1445c <bt_addr_le_str_real>
   1ab5e:	f7f7 f9f3 	bl	11f48 <z_log_strdup>
   1ab62:	4632      	mov	r2, r6
   1ab64:	4601      	mov	r1, r0
   1ab66:	4816      	ldr	r0, [pc, #88]	; (1abc0 <keys_set+0x188>)
   1ab68:	f009 f988 	bl	23e7c <log_1>
		memcpy(keys->storage_start, val, len);
   1ab6c:	4622      	mov	r2, r4
   1ab6e:	a903      	add	r1, sp, #12
   1ab70:	f107 000c 	add.w	r0, r7, #12
   1ab74:	f00a f984 	bl	24e80 <memcpy>
	if (aging_counter_val < keys->aging_counter) {
   1ab78:	4b12      	ldr	r3, [pc, #72]	; (1abc4 <keys_set+0x18c>)
   1ab7a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   1ab7e:	6819      	ldr	r1, [r3, #0]
   1ab80:	428a      	cmp	r2, r1
		aging_counter_val = keys->aging_counter;
   1ab82:	bf88      	it	hi
   1ab84:	601a      	strhi	r2, [r3, #0]
   1ab86:	e768      	b.n	1aa5a <keys_set+0x22>
			BT_ERR("Invalid key length %zd != %zu", len,
   1ab88:	480f      	ldr	r0, [pc, #60]	; (1abc8 <keys_set+0x190>)
   1ab8a:	f043 0301 	orr.w	r3, r3, #1
   1ab8e:	227c      	movs	r2, #124	; 0x7c
   1ab90:	4621      	mov	r1, r4
   1ab92:	f009 f987 	bl	23ea4 <log_2>
			bt_keys_clear(keys);
   1ab96:	4638      	mov	r0, r7
   1ab98:	f7ff ff28 	bl	1a9ec <bt_keys_clear>
			return -EINVAL;
   1ab9c:	e75b      	b.n	1aa56 <keys_set+0x1e>
   1ab9e:	bf00      	nop
   1aba0:	00028e3c 	.word	0x00028e3c
   1aba4:	00028dd4 	.word	0x00028dd4
   1aba8:	0002ad71 	.word	0x0002ad71
   1abac:	0002b9eb 	.word	0x0002b9eb
   1abb0:	0002ad92 	.word	0x0002ad92
   1abb4:	0002adae 	.word	0x0002adae
   1abb8:	0002ba0a 	.word	0x0002ba0a
   1abbc:	0002ba2d 	.word	0x0002ba2d
   1abc0:	0002ba4c 	.word	0x0002ba4c
   1abc4:	200024bc 	.word	0x200024bc
   1abc8:	0002ba6e 	.word	0x0002ba6e

0001abcc <bt_keys_store>:
{
   1abcc:	b570      	push	{r4, r5, r6, lr}
	if (keys->id) {
   1abce:	4605      	mov	r5, r0
{
   1abd0:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
   1abd2:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   1abd6:	4604      	mov	r4, r0
	if (keys->id) {
   1abd8:	b30a      	cbz	r2, 1ac1e <bt_keys_store+0x52>
		u8_to_dec(id, sizeof(id), keys->id);
   1abda:	ae02      	add	r6, sp, #8
   1abdc:	2104      	movs	r1, #4
   1abde:	4630      	mov	r0, r6
   1abe0:	f007 ff59 	bl	22a96 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1abe4:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1abe6:	4a0f      	ldr	r2, [pc, #60]	; (1ac24 <bt_keys_store+0x58>)
   1abe8:	462b      	mov	r3, r5
   1abea:	2124      	movs	r1, #36	; 0x24
   1abec:	a803      	add	r0, sp, #12
   1abee:	f000 fabf 	bl	1b170 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   1abf2:	f104 010c 	add.w	r1, r4, #12
   1abf6:	227c      	movs	r2, #124	; 0x7c
   1abf8:	a803      	add	r0, sp, #12
   1abfa:	f7f8 fdaf 	bl	1375c <settings_save_one>
	if (err) {
   1abfe:	4604      	mov	r4, r0
   1ac00:	b150      	cbz	r0, 1ac18 <bt_keys_store+0x4c>
   1ac02:	4a09      	ldr	r2, [pc, #36]	; (1ac28 <bt_keys_store+0x5c>)
   1ac04:	4b09      	ldr	r3, [pc, #36]	; (1ac2c <bt_keys_store+0x60>)
   1ac06:	1ad2      	subs	r2, r2, r3
   1ac08:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Failed to save keys (err %d)", err);
   1ac0a:	0192      	lsls	r2, r2, #6
   1ac0c:	4601      	mov	r1, r0
   1ac0e:	f042 0201 	orr.w	r2, r2, #1
   1ac12:	4807      	ldr	r0, [pc, #28]	; (1ac30 <bt_keys_store+0x64>)
   1ac14:	f009 f932 	bl	23e7c <log_1>
}
   1ac18:	4620      	mov	r0, r4
   1ac1a:	b00c      	add	sp, #48	; 0x30
   1ac1c:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1ac1e:	9200      	str	r2, [sp, #0]
   1ac20:	e7e1      	b.n	1abe6 <bt_keys_store+0x1a>
   1ac22:	bf00      	nop
   1ac24:	0002baac 	.word	0x0002baac
   1ac28:	00028e3c 	.word	0x00028e3c
   1ac2c:	00028dd4 	.word	0x00028dd4
   1ac30:	0002ba8c 	.word	0x0002ba8c

0001ac34 <bt_keys_update_usage>:

#endif /* CONFIG_BT_SETTINGS */

#if IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST)
void bt_keys_update_usage(uint8_t id, const bt_addr_le_t *addr)
{
   1ac34:	b508      	push	{r3, lr}
	struct bt_keys *keys = bt_keys_find_addr(id, addr);
   1ac36:	f7ff fec9 	bl	1a9cc <bt_keys_find_addr>

	if (!keys) {
   1ac3a:	b150      	cbz	r0, 1ac52 <bt_keys_update_usage+0x1e>
		return;
	}

	if (last_keys_updated == keys) {
   1ac3c:	4a05      	ldr	r2, [pc, #20]	; (1ac54 <bt_keys_update_usage+0x20>)
   1ac3e:	6813      	ldr	r3, [r2, #0]
   1ac40:	4283      	cmp	r3, r0
   1ac42:	d006      	beq.n	1ac52 <bt_keys_update_usage+0x1e>
		return;
	}

	keys->aging_counter = ++aging_counter_val;
   1ac44:	4904      	ldr	r1, [pc, #16]	; (1ac58 <bt_keys_update_usage+0x24>)
	last_keys_updated = keys;
   1ac46:	6010      	str	r0, [r2, #0]
	keys->aging_counter = ++aging_counter_val;
   1ac48:	680b      	ldr	r3, [r1, #0]
   1ac4a:	3301      	adds	r3, #1
   1ac4c:	600b      	str	r3, [r1, #0]
   1ac4e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	       keys->aging_counter);

	if (IS_ENABLED(CONFIG_BT_KEYS_SAVE_AGING_COUNTER_ON_PAIRING)) {
		bt_keys_store(keys);
	}
}
   1ac52:	bd08      	pop	{r3, pc}
   1ac54:	20002548 	.word	0x20002548
   1ac58:	200024bc 	.word	0x200024bc

0001ac5c <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   1ac5c:	4a0b      	ldr	r2, [pc, #44]	; (1ac8c <l2cap_accept+0x30>)
{
   1ac5e:	b508      	push	{r3, lr}
   1ac60:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
   1ac62:	6810      	ldr	r0, [r2, #0]
   1ac64:	b918      	cbnz	r0, 1ac6e <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   1ac66:	4b0a      	ldr	r3, [pc, #40]	; (1ac90 <l2cap_accept+0x34>)
   1ac68:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
   1ac6a:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   1ac6c:	bd08      	pop	{r3, pc}
   1ac6e:	4909      	ldr	r1, [pc, #36]	; (1ac94 <l2cap_accept+0x38>)
   1ac70:	4a09      	ldr	r2, [pc, #36]	; (1ac98 <l2cap_accept+0x3c>)
	BT_ERR("No available L2CAP context for conn %p", conn);
   1ac72:	480a      	ldr	r0, [pc, #40]	; (1ac9c <l2cap_accept+0x40>)
   1ac74:	1a52      	subs	r2, r2, r1
   1ac76:	08d2      	lsrs	r2, r2, #3
   1ac78:	0192      	lsls	r2, r2, #6
   1ac7a:	f042 0201 	orr.w	r2, r2, #1
   1ac7e:	4619      	mov	r1, r3
   1ac80:	f009 f8fc 	bl	23e7c <log_1>
	return -ENOMEM;
   1ac84:	f06f 000b 	mvn.w	r0, #11
   1ac88:	e7f0      	b.n	1ac6c <l2cap_accept+0x10>
   1ac8a:	bf00      	nop
   1ac8c:	20001b78 	.word	0x20001b78
   1ac90:	00029808 	.word	0x00029808
   1ac94:	00028dd4 	.word	0x00028dd4
   1ac98:	00028e44 	.word	0x00028e44
   1ac9c:	0002bab9 	.word	0x0002bab9

0001aca0 <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1aca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1aca2:	4605      	mov	r5, r0
   1aca4:	460f      	mov	r7, r1
   1aca6:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   1aca8:	2300      	movs	r3, #0
   1acaa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1acae:	2104      	movs	r1, #4
   1acb0:	2000      	movs	r0, #0
   1acb2:	f7fb fbc3 	bl	1643c <bt_conn_create_pdu_timeout>
	if (!buf) {
   1acb6:	4604      	mov	r4, r0
   1acb8:	b960      	cbnz	r0, 1acd4 <l2cap_create_le_sig_pdu.isra.0+0x34>
   1acba:	4a0a      	ldr	r2, [pc, #40]	; (1ace4 <l2cap_create_le_sig_pdu.isra.0+0x44>)
   1acbc:	4b0a      	ldr	r3, [pc, #40]	; (1ace8 <l2cap_create_le_sig_pdu.isra.0+0x48>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   1acbe:	480b      	ldr	r0, [pc, #44]	; (1acec <l2cap_create_le_sig_pdu.isra.0+0x4c>)
   1acc0:	1ad2      	subs	r2, r2, r3
   1acc2:	08d2      	lsrs	r2, r2, #3
   1acc4:	0192      	lsls	r2, r2, #6
   1acc6:	f042 0201 	orr.w	r2, r2, #1
   1acca:	4629      	mov	r1, r5
   1accc:	f009 f8d6 	bl	23e7c <log_1>
}
   1acd0:	4620      	mov	r0, r4
   1acd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1acd4:	2104      	movs	r1, #4
   1acd6:	3008      	adds	r0, #8
   1acd8:	f00c fa8e 	bl	271f8 <net_buf_simple_add>
	hdr->code = code;
   1acdc:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   1acde:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1ace0:	8046      	strh	r6, [r0, #2]
	return buf;
   1ace2:	e7f5      	b.n	1acd0 <l2cap_create_le_sig_pdu.isra.0+0x30>
   1ace4:	00028e44 	.word	0x00028e44
   1ace8:	00028dd4 	.word	0x00028dd4
   1acec:	0002a893 	.word	0x0002a893

0001acf0 <l2cap_rtx_timeout>:
{
   1acf0:	b538      	push	{r3, r4, r5, lr}
   1acf2:	4a0b      	ldr	r2, [pc, #44]	; (1ad20 <l2cap_rtx_timeout+0x30>)
   1acf4:	4b0b      	ldr	r3, [pc, #44]	; (1ad24 <l2cap_rtx_timeout+0x34>)
	struct bt_conn *conn = chan->chan.conn;
   1acf6:	4604      	mov	r4, r0
   1acf8:	1ad2      	subs	r2, r2, r3
   1acfa:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
   1acfe:	480a      	ldr	r0, [pc, #40]	; (1ad28 <l2cap_rtx_timeout+0x38>)
   1ad00:	08d2      	lsrs	r2, r2, #3
   1ad02:	0192      	lsls	r2, r2, #6
   1ad04:	4621      	mov	r1, r4
   1ad06:	f042 0201 	orr.w	r2, r2, #1
   1ad0a:	f009 f8b7 	bl	23e7c <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
   1ad0e:	4628      	mov	r0, r5
   1ad10:	4621      	mov	r1, r4
   1ad12:	f00b fcc0 	bl	26696 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   1ad16:	4620      	mov	r0, r4
}
   1ad18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
   1ad1c:	f00b bcdd 	b.w	266da <bt_l2cap_chan_del>
   1ad20:	00028e44 	.word	0x00028e44
   1ad24:	00028dd4 	.word	0x00028dd4
   1ad28:	0002bae0 	.word	0x0002bae0

0001ad2c <bt_l2cap_connected>:
{
   1ad2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1ad30:	4e29      	ldr	r6, [pc, #164]	; (1add8 <bt_l2cap_connected+0xac>)
   1ad32:	4f2a      	ldr	r7, [pc, #168]	; (1addc <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   1ad34:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 1ade0 <bt_l2cap_connected+0xb4>
{
   1ad38:	4604      	mov	r4, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1ad3a:	42be      	cmp	r6, r7
   1ad3c:	d302      	bcc.n	1ad44 <bt_l2cap_connected+0x18>
}
   1ad3e:	b003      	add	sp, #12
   1ad40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
   1ad44:	6873      	ldr	r3, [r6, #4]
   1ad46:	a901      	add	r1, sp, #4
   1ad48:	4620      	mov	r0, r4
   1ad4a:	4798      	blx	r3
   1ad4c:	2800      	cmp	r0, #0
   1ad4e:	db3d      	blt.n	1adcc <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
   1ad50:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
   1ad52:	8833      	ldrh	r3, [r6, #0]
   1ad54:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   1ad58:	f8a5 3080 	strh.w	r3, [r5, #128]	; 0x80
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   1ad5c:	4641      	mov	r1, r8
   1ad5e:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   1ad62:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   1ad66:	f00d fd92 	bl	2888e <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1ad6a:	f3bf 8f5b 	dmb	ish
   1ad6e:	f105 0368 	add.w	r3, r5, #104	; 0x68
   1ad72:	2200      	movs	r2, #0
   1ad74:	e853 1f00 	ldrex	r1, [r3]
   1ad78:	e843 2000 	strex	r0, r2, [r3]
   1ad7c:	2800      	cmp	r0, #0
   1ad7e:	d1f9      	bne.n	1ad74 <bt_l2cap_connected+0x48>
   1ad80:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   1ad84:	60aa      	str	r2, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
   1ad86:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   1ad88:	f105 0308 	add.w	r3, r5, #8
   1ad8c:	bb02      	cbnz	r2, 1add0 <bt_l2cap_connected+0xa4>
	list->head = node;
   1ad8e:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
   1ad92:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   1ad94:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
   1ad96:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   1ad98:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
   1ad9c:	681b      	ldr	r3, [r3, #0]
   1ad9e:	b103      	cbz	r3, 1ada2 <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
   1ada0:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ada2:	9b01      	ldr	r3, [sp, #4]
   1ada4:	f3bf 8f5b 	dmb	ish
   1ada8:	3368      	adds	r3, #104	; 0x68
   1adaa:	e853 2f00 	ldrex	r2, [r3]
   1adae:	f042 0201 	orr.w	r2, r2, #1
   1adb2:	e843 2100 	strex	r1, r2, [r3]
   1adb6:	2900      	cmp	r1, #0
   1adb8:	d1f7      	bne.n	1adaa <bt_l2cap_connected+0x7e>
   1adba:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   1adbe:	9801      	ldr	r0, [sp, #4]
   1adc0:	6843      	ldr	r3, [r0, #4]
   1adc2:	699b      	ldr	r3, [r3, #24]
   1adc4:	b113      	cbz	r3, 1adcc <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
   1adc6:	f100 0168 	add.w	r1, r0, #104	; 0x68
   1adca:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1adcc:	360c      	adds	r6, #12
   1adce:	e7b4      	b.n	1ad3a <bt_l2cap_connected+0xe>
	parent->next = child;
   1add0:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1add2:	6563      	str	r3, [r4, #84]	; 0x54
}
   1add4:	e7dd      	b.n	1ad92 <bt_l2cap_connected+0x66>
   1add6:	bf00      	nop
   1add8:	00028ce4 	.word	0x00028ce4
   1addc:	00028d08 	.word	0x00028d08
   1ade0:	0001acf1 	.word	0x0001acf1

0001ade4 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
   1ade4:	898b      	ldrh	r3, [r1, #12]
   1ade6:	2b03      	cmp	r3, #3
{
   1ade8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1adea:	4606      	mov	r6, r0
   1adec:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   1adee:	d80a      	bhi.n	1ae06 <l2cap_recv+0x22>
   1adf0:	4931      	ldr	r1, [pc, #196]	; (1aeb8 <l2cap_recv+0xd4>)
   1adf2:	4b32      	ldr	r3, [pc, #200]	; (1aebc <l2cap_recv+0xd8>)
		BT_ERR("Too small L2CAP signaling PDU");
   1adf4:	4832      	ldr	r0, [pc, #200]	; (1aec0 <l2cap_recv+0xdc>)
   1adf6:	1ac9      	subs	r1, r1, r3
   1adf8:	08c9      	lsrs	r1, r1, #3
   1adfa:	0189      	lsls	r1, r1, #6
   1adfc:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid ident value in L2CAP PDU");
   1ae00:	f009 f82f 	bl	23e62 <log_0>
		return 0;
   1ae04:	e013      	b.n	1ae2e <l2cap_recv+0x4a>
	return net_buf_simple_pull_mem(&buf->b, len);
   1ae06:	2104      	movs	r1, #4
   1ae08:	f105 0008 	add.w	r0, r5, #8
   1ae0c:	f00c fa1b 	bl	27246 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1ae10:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   1ae12:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
   1ae14:	428a      	cmp	r2, r1
   1ae16:	4604      	mov	r4, r0
   1ae18:	d00c      	beq.n	1ae34 <l2cap_recv+0x50>
   1ae1a:	4828      	ldr	r0, [pc, #160]	; (1aebc <l2cap_recv+0xd8>)
   1ae1c:	4b26      	ldr	r3, [pc, #152]	; (1aeb8 <l2cap_recv+0xd4>)
   1ae1e:	1a1b      	subs	r3, r3, r0
   1ae20:	08db      	lsrs	r3, r3, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1ae22:	019b      	lsls	r3, r3, #6
   1ae24:	4827      	ldr	r0, [pc, #156]	; (1aec4 <l2cap_recv+0xe0>)
   1ae26:	f043 0301 	orr.w	r3, r3, #1
   1ae2a:	f009 f83b 	bl	23ea4 <log_2>
}
   1ae2e:	2000      	movs	r0, #0
   1ae30:	b002      	add	sp, #8
   1ae32:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
   1ae34:	7843      	ldrb	r3, [r0, #1]
   1ae36:	b943      	cbnz	r3, 1ae4a <l2cap_recv+0x66>
   1ae38:	491f      	ldr	r1, [pc, #124]	; (1aeb8 <l2cap_recv+0xd4>)
   1ae3a:	4b20      	ldr	r3, [pc, #128]	; (1aebc <l2cap_recv+0xd8>)
		BT_ERR("Invalid ident value in L2CAP PDU");
   1ae3c:	4822      	ldr	r0, [pc, #136]	; (1aec8 <l2cap_recv+0xe4>)
   1ae3e:	1ac9      	subs	r1, r1, r3
   1ae40:	08c9      	lsrs	r1, r1, #3
   1ae42:	0189      	lsls	r1, r1, #6
   1ae44:	f041 0101 	orr.w	r1, r1, #1
   1ae48:	e7da      	b.n	1ae00 <l2cap_recv+0x1c>
	switch (hdr->code) {
   1ae4a:	7801      	ldrb	r1, [r0, #0]
   1ae4c:	2901      	cmp	r1, #1
   1ae4e:	d0ee      	beq.n	1ae2e <l2cap_recv+0x4a>
   1ae50:	2913      	cmp	r1, #19
   1ae52:	d10a      	bne.n	1ae6a <l2cap_recv+0x86>
	if (buf->len < sizeof(*rsp)) {
   1ae54:	2a01      	cmp	r2, #1
   1ae56:	d8ea      	bhi.n	1ae2e <l2cap_recv+0x4a>
   1ae58:	4917      	ldr	r1, [pc, #92]	; (1aeb8 <l2cap_recv+0xd4>)
   1ae5a:	4b18      	ldr	r3, [pc, #96]	; (1aebc <l2cap_recv+0xd8>)
		BT_ERR("Too small LE conn param rsp");
   1ae5c:	481b      	ldr	r0, [pc, #108]	; (1aecc <l2cap_recv+0xe8>)
   1ae5e:	1ac9      	subs	r1, r1, r3
   1ae60:	08c9      	lsrs	r1, r1, #3
   1ae62:	0189      	lsls	r1, r1, #6
   1ae64:	f041 0101 	orr.w	r1, r1, #1
   1ae68:	e7ca      	b.n	1ae00 <l2cap_recv+0x1c>
   1ae6a:	4b14      	ldr	r3, [pc, #80]	; (1aebc <l2cap_recv+0xd8>)
   1ae6c:	4a12      	ldr	r2, [pc, #72]	; (1aeb8 <l2cap_recv+0xd4>)
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   1ae6e:	4818      	ldr	r0, [pc, #96]	; (1aed0 <l2cap_recv+0xec>)
   1ae70:	1ad2      	subs	r2, r2, r3
   1ae72:	08d2      	lsrs	r2, r2, #3
   1ae74:	0192      	lsls	r2, r2, #6
   1ae76:	f042 0202 	orr.w	r2, r2, #2
   1ae7a:	f008 ffff 	bl	23e7c <log_1>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1ae7e:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
   1ae80:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1ae82:	2202      	movs	r2, #2
   1ae84:	2001      	movs	r0, #1
   1ae86:	f7ff ff0b 	bl	1aca0 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   1ae8a:	4604      	mov	r4, r0
   1ae8c:	2800      	cmp	r0, #0
   1ae8e:	d0ce      	beq.n	1ae2e <l2cap_recv+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1ae90:	2102      	movs	r1, #2
   1ae92:	3008      	adds	r0, #8
   1ae94:	f00c f9b0 	bl	271f8 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   1ae98:	2300      	movs	r3, #0
   1ae9a:	7003      	strb	r3, [r0, #0]
   1ae9c:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   1ae9e:	4622      	mov	r2, r4
   1aea0:	9300      	str	r3, [sp, #0]
   1aea2:	2105      	movs	r1, #5
   1aea4:	4628      	mov	r0, r5
   1aea6:	f00b fc60 	bl	2676a <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   1aeaa:	2800      	cmp	r0, #0
   1aeac:	d0bf      	beq.n	1ae2e <l2cap_recv+0x4a>
		net_buf_unref(buf);
   1aeae:	4620      	mov	r0, r4
   1aeb0:	f002 f916 	bl	1d0e0 <net_buf_unref>
   1aeb4:	e7bb      	b.n	1ae2e <l2cap_recv+0x4a>
   1aeb6:	bf00      	nop
   1aeb8:	00028e44 	.word	0x00028e44
   1aebc:	00028dd4 	.word	0x00028dd4
   1aec0:	0002baf0 	.word	0x0002baf0
   1aec4:	0002bb0e 	.word	0x0002bb0e
   1aec8:	0002bb2f 	.word	0x0002bb2f
   1aecc:	0002bb50 	.word	0x0002bb50
   1aed0:	0002bb6c 	.word	0x0002bb6c

0001aed4 <bt_l2cap_recv>:
{
   1aed4:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   1aed6:	898b      	ldrh	r3, [r1, #12]
   1aed8:	2b03      	cmp	r3, #3
{
   1aeda:	4605      	mov	r5, r0
   1aedc:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1aede:	d80e      	bhi.n	1aefe <bt_l2cap_recv+0x2a>
   1aee0:	4914      	ldr	r1, [pc, #80]	; (1af34 <bt_l2cap_recv+0x60>)
   1aee2:	4b15      	ldr	r3, [pc, #84]	; (1af38 <bt_l2cap_recv+0x64>)
		BT_ERR("Too small L2CAP PDU received");
   1aee4:	4815      	ldr	r0, [pc, #84]	; (1af3c <bt_l2cap_recv+0x68>)
   1aee6:	1ac9      	subs	r1, r1, r3
   1aee8:	08c9      	lsrs	r1, r1, #3
   1aeea:	0189      	lsls	r1, r1, #6
   1aeec:	f041 0101 	orr.w	r1, r1, #1
   1aef0:	f008 ffb7 	bl	23e62 <log_0>
	net_buf_unref(buf);
   1aef4:	4620      	mov	r0, r4
}
   1aef6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   1aefa:	f002 b8f1 	b.w	1d0e0 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   1aefe:	2104      	movs	r1, #4
   1af00:	f104 0008 	add.w	r0, r4, #8
   1af04:	f00c f99f 	bl	27246 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   1af08:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1af0a:	4628      	mov	r0, r5
   1af0c:	f00b fc56 	bl	267bc <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1af10:	b950      	cbnz	r0, 1af28 <bt_l2cap_recv+0x54>
   1af12:	4b09      	ldr	r3, [pc, #36]	; (1af38 <bt_l2cap_recv+0x64>)
   1af14:	4a07      	ldr	r2, [pc, #28]	; (1af34 <bt_l2cap_recv+0x60>)
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   1af16:	480a      	ldr	r0, [pc, #40]	; (1af40 <bt_l2cap_recv+0x6c>)
   1af18:	1ad2      	subs	r2, r2, r3
   1af1a:	08d2      	lsrs	r2, r2, #3
   1af1c:	0192      	lsls	r2, r2, #6
   1af1e:	f042 0202 	orr.w	r2, r2, #2
   1af22:	f008 ffab 	bl	23e7c <log_1>
		net_buf_unref(buf);
   1af26:	e7e5      	b.n	1aef4 <bt_l2cap_recv+0x20>
	chan->ops->recv(chan, buf);
   1af28:	6843      	ldr	r3, [r0, #4]
   1af2a:	4621      	mov	r1, r4
   1af2c:	691b      	ldr	r3, [r3, #16]
   1af2e:	4798      	blx	r3
   1af30:	e7e0      	b.n	1aef4 <bt_l2cap_recv+0x20>
   1af32:	bf00      	nop
   1af34:	00028e44 	.word	0x00028e44
   1af38:	00028dd4 	.word	0x00028dd4
   1af3c:	0002bb8a 	.word	0x0002bb8a
   1af40:	0002bba7 	.word	0x0002bba7

0001af44 <bt_l2cap_update_conn_param>:
{
   1af44:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   1af46:	4b17      	ldr	r3, [pc, #92]	; (1afa4 <bt_l2cap_update_conn_param+0x60>)
   1af48:	781a      	ldrb	r2, [r3, #0]
   1af4a:	3201      	adds	r2, #1
	if (!ident) {
   1af4c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
   1af50:	bf08      	it	eq
   1af52:	2201      	moveq	r2, #1
   1af54:	701a      	strb	r2, [r3, #0]
{
   1af56:	4606      	mov	r6, r0
   1af58:	460d      	mov	r5, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1af5a:	2208      	movs	r2, #8
   1af5c:	7819      	ldrb	r1, [r3, #0]
   1af5e:	2012      	movs	r0, #18
   1af60:	f7ff fe9e 	bl	1aca0 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   1af64:	4604      	mov	r4, r0
   1af66:	b1d0      	cbz	r0, 1af9e <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   1af68:	2108      	movs	r1, #8
   1af6a:	4408      	add	r0, r1
   1af6c:	f00c f944 	bl	271f8 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   1af70:	882b      	ldrh	r3, [r5, #0]
   1af72:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   1af74:	886b      	ldrh	r3, [r5, #2]
   1af76:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   1af78:	88ab      	ldrh	r3, [r5, #4]
   1af7a:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   1af7c:	88eb      	ldrh	r3, [r5, #6]
   1af7e:	80c3      	strh	r3, [r0, #6]
   1af80:	2300      	movs	r3, #0
   1af82:	9300      	str	r3, [sp, #0]
   1af84:	4622      	mov	r2, r4
   1af86:	2105      	movs	r1, #5
   1af88:	4630      	mov	r0, r6
   1af8a:	f00b fbee 	bl	2676a <bt_l2cap_send_cb>
	if (err) {
   1af8e:	4605      	mov	r5, r0
   1af90:	b110      	cbz	r0, 1af98 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   1af92:	4620      	mov	r0, r4
   1af94:	f002 f8a4 	bl	1d0e0 <net_buf_unref>
}
   1af98:	4628      	mov	r0, r5
   1af9a:	b002      	add	sp, #8
   1af9c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   1af9e:	f06f 050b 	mvn.w	r5, #11
   1afa2:	e7f9      	b.n	1af98 <bt_l2cap_update_conn_param+0x54>
   1afa4:	2000299f 	.word	0x2000299f

0001afa8 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
   1afa8:	b538      	push	{r3, r4, r5, lr}
   1afaa:	4b14      	ldr	r3, [pc, #80]	; (1affc <save_id+0x54>)
   1afac:	4c14      	ldr	r4, [pc, #80]	; (1b000 <save_id+0x58>)
	int err;
	BT_INFO("Saving ID");
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   1afae:	4d15      	ldr	r5, [pc, #84]	; (1b004 <save_id+0x5c>)
	BT_INFO("Saving ID");
   1afb0:	4815      	ldr	r0, [pc, #84]	; (1b008 <save_id+0x60>)
   1afb2:	1ae4      	subs	r4, r4, r3
   1afb4:	08e4      	lsrs	r4, r4, #3
   1afb6:	01a4      	lsls	r4, r4, #6
   1afb8:	f044 0103 	orr.w	r1, r4, #3
   1afbc:	f008 ff51 	bl	23e62 <log_0>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   1afc0:	79ea      	ldrb	r2, [r5, #7]
   1afc2:	4812      	ldr	r0, [pc, #72]	; (1b00c <save_id+0x64>)
   1afc4:	4629      	mov	r1, r5
   1afc6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   1afca:	f7f8 fbc7 	bl	1375c <settings_save_one>
	if (err) {
   1afce:	4601      	mov	r1, r0
   1afd0:	b120      	cbz	r0, 1afdc <save_id+0x34>
		BT_ERR("Failed to save ID (err %d)", err);
   1afd2:	480f      	ldr	r0, [pc, #60]	; (1b010 <save_id+0x68>)
   1afd4:	f044 0201 	orr.w	r2, r4, #1
   1afd8:	f008 ff50 	bl	23e7c <log_1>
	}

#if defined(CONFIG_BT_PRIVACY)
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
   1afdc:	79ea      	ldrb	r2, [r5, #7]
   1afde:	490d      	ldr	r1, [pc, #52]	; (1b014 <save_id+0x6c>)
   1afe0:	480d      	ldr	r0, [pc, #52]	; (1b018 <save_id+0x70>)
   1afe2:	0112      	lsls	r2, r2, #4
   1afe4:	f7f8 fbba 	bl	1375c <settings_save_one>
	if (err) {
   1afe8:	4601      	mov	r1, r0
   1afea:	b130      	cbz	r0, 1affa <save_id+0x52>
		BT_ERR("Failed to save IRK (err %d)", err);
   1afec:	f044 0201 	orr.w	r2, r4, #1
   1aff0:	480a      	ldr	r0, [pc, #40]	; (1b01c <save_id+0x74>)
	}
#endif
}
   1aff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Failed to save IRK (err %d)", err);
   1aff6:	f008 bf41 	b.w	23e7c <log_1>
}
   1affa:	bd38      	pop	{r3, r4, r5, pc}
   1affc:	00028dd4 	.word	0x00028dd4
   1b000:	00028e54 	.word	0x00028e54
   1b004:	200002b0 	.word	0x200002b0
   1b008:	0002bbe3 	.word	0x0002bbe3
   1b00c:	0002bbed 	.word	0x0002bbed
   1b010:	0002bbf3 	.word	0x0002bbf3
   1b014:	20000420 	.word	0x20000420
   1b018:	0002bc0e 	.word	0x0002bc0e
   1b01c:	0002bc15 	.word	0x0002bc15

0001b020 <set>:
{
   1b020:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1b024:	4605      	mov	r5, r0
   1b026:	4616      	mov	r6, r2
   1b028:	461f      	mov	r7, r3
	if (!name) {
   1b02a:	b960      	cbnz	r0, 1b046 <set+0x26>
   1b02c:	4942      	ldr	r1, [pc, #264]	; (1b138 <set+0x118>)
   1b02e:	4b43      	ldr	r3, [pc, #268]	; (1b13c <set+0x11c>)
		BT_ERR("Insufficient number of arguments");
   1b030:	4843      	ldr	r0, [pc, #268]	; (1b140 <set+0x120>)
   1b032:	1ac9      	subs	r1, r1, r3
   1b034:	08c9      	lsrs	r1, r1, #3
   1b036:	0189      	lsls	r1, r1, #6
   1b038:	f041 0101 	orr.w	r1, r1, #1
   1b03c:	f008 ff11 	bl	23e62 <log_0>
	return -ENOENT;
   1b040:	f06f 0401 	mvn.w	r4, #1
   1b044:	e01c      	b.n	1b080 <set+0x60>
	len = settings_name_next(name, &next);
   1b046:	a901      	add	r1, sp, #4
   1b048:	f009 fdbc 	bl	24bc4 <settings_name_next>
	if (!strncmp(name, "id", len)) {
   1b04c:	493d      	ldr	r1, [pc, #244]	; (1b144 <set+0x124>)
   1b04e:	4602      	mov	r2, r0
	len = settings_name_next(name, &next);
   1b050:	4680      	mov	r8, r0
	if (!strncmp(name, "id", len)) {
   1b052:	4628      	mov	r0, r5
   1b054:	f009 fef5 	bl	24e42 <strncmp>
   1b058:	4604      	mov	r4, r0
   1b05a:	bb90      	cbnz	r0, 1b0c2 <set+0xa2>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b05c:	f3bf 8f5b 	dmb	ish
   1b060:	4d39      	ldr	r5, [pc, #228]	; (1b148 <set+0x128>)
   1b062:	682b      	ldr	r3, [r5, #0]
   1b064:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   1b068:	075b      	lsls	r3, r3, #29
   1b06a:	d50d      	bpl.n	1b088 <set+0x68>
   1b06c:	4932      	ldr	r1, [pc, #200]	; (1b138 <set+0x118>)
   1b06e:	4b33      	ldr	r3, [pc, #204]	; (1b13c <set+0x11c>)
			BT_WARN("Ignoring identities stored in flash");
   1b070:	4836      	ldr	r0, [pc, #216]	; (1b14c <set+0x12c>)
   1b072:	1ac9      	subs	r1, r1, r3
   1b074:	08c9      	lsrs	r1, r1, #3
   1b076:	0189      	lsls	r1, r1, #6
   1b078:	f041 0102 	orr.w	r1, r1, #2
   1b07c:	f008 fef1 	bl	23e62 <log_0>
}
   1b080:	4620      	mov	r0, r4
   1b082:	b002      	add	sp, #8
   1b084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   1b088:	3dcc      	subs	r5, #204	; 0xcc
   1b08a:	2207      	movs	r2, #7
   1b08c:	4629      	mov	r1, r5
   1b08e:	4638      	mov	r0, r7
   1b090:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
   1b092:	2806      	cmp	r0, #6
   1b094:	d810      	bhi.n	1b0b8 <set+0x98>
   1b096:	4b29      	ldr	r3, [pc, #164]	; (1b13c <set+0x11c>)
   1b098:	4927      	ldr	r1, [pc, #156]	; (1b138 <set+0x118>)
				BT_ERR("Invalid length ID address in storage");
   1b09a:	482d      	ldr	r0, [pc, #180]	; (1b150 <set+0x130>)
   1b09c:	1ac9      	subs	r1, r1, r3
   1b09e:	08c9      	lsrs	r1, r1, #3
   1b0a0:	0189      	lsls	r1, r1, #6
   1b0a2:	f041 0101 	orr.w	r1, r1, #1
   1b0a6:	f008 fedc 	bl	23e62 <log_0>
			(void)memset(bt_dev.id_addr, 0,
   1b0aa:	2207      	movs	r2, #7
   1b0ac:	4621      	mov	r1, r4
   1b0ae:	4628      	mov	r0, r5
   1b0b0:	f009 fef1 	bl	24e96 <memset>
			bt_dev.id_count = 0U;
   1b0b4:	71ec      	strb	r4, [r5, #7]
   1b0b6:	e7e3      	b.n	1b080 <set+0x60>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   1b0b8:	2307      	movs	r3, #7
   1b0ba:	fbb0 f0f3 	udiv	r0, r0, r3
   1b0be:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   1b0c0:	e7de      	b.n	1b080 <set+0x60>
	if (!strncmp(name, "name", len)) {
   1b0c2:	4924      	ldr	r1, [pc, #144]	; (1b154 <set+0x134>)
   1b0c4:	4642      	mov	r2, r8
   1b0c6:	4628      	mov	r0, r5
   1b0c8:	f009 febb 	bl	24e42 <strncmp>
   1b0cc:	4604      	mov	r4, r0
   1b0ce:	b9a8      	cbnz	r0, 1b0fc <set+0xdc>
		len = read_cb(cb_arg, &bt_dev.name, sizeof(bt_dev.name) - 1);
   1b0d0:	4921      	ldr	r1, [pc, #132]	; (1b158 <set+0x138>)
   1b0d2:	2241      	movs	r2, #65	; 0x41
   1b0d4:	4638      	mov	r0, r7
   1b0d6:	47b0      	blx	r6
		if (len < 0) {
   1b0d8:	1e01      	subs	r1, r0, #0
   1b0da:	da0a      	bge.n	1b0f2 <set+0xd2>
   1b0dc:	4b17      	ldr	r3, [pc, #92]	; (1b13c <set+0x11c>)
   1b0de:	4a16      	ldr	r2, [pc, #88]	; (1b138 <set+0x118>)
			BT_ERR("Failed to read device name from storage"
   1b0e0:	481e      	ldr	r0, [pc, #120]	; (1b15c <set+0x13c>)
   1b0e2:	1ad2      	subs	r2, r2, r3
   1b0e4:	08d2      	lsrs	r2, r2, #3
   1b0e6:	0192      	lsls	r2, r2, #6
   1b0e8:	f042 0201 	orr.w	r2, r2, #1
   1b0ec:	f008 fec6 	bl	23e7c <log_1>
   1b0f0:	e7c6      	b.n	1b080 <set+0x60>
			bt_dev.name[len] = '\0';
   1b0f2:	481b      	ldr	r0, [pc, #108]	; (1b160 <set+0x140>)
   1b0f4:	4401      	add	r1, r0
   1b0f6:	f881 41b0 	strb.w	r4, [r1, #432]	; 0x1b0
			BT_DBG("Name set to %s", log_strdup(bt_dev.name));
   1b0fa:	e7c1      	b.n	1b080 <set+0x60>
	if (!strncmp(name, "irk", len)) {
   1b0fc:	4919      	ldr	r1, [pc, #100]	; (1b164 <set+0x144>)
   1b0fe:	4642      	mov	r2, r8
   1b100:	4628      	mov	r0, r5
   1b102:	f009 fe9e 	bl	24e42 <strncmp>
   1b106:	4604      	mov	r4, r0
   1b108:	2800      	cmp	r0, #0
   1b10a:	d199      	bne.n	1b040 <set+0x20>
		len = read_cb(cb_arg, bt_dev.irk, sizeof(bt_dev.irk));
   1b10c:	4916      	ldr	r1, [pc, #88]	; (1b168 <set+0x148>)
   1b10e:	2210      	movs	r2, #16
   1b110:	4638      	mov	r0, r7
   1b112:	47b0      	blx	r6
		if (len < sizeof(bt_dev.irk[0])) {
   1b114:	280f      	cmp	r0, #15
   1b116:	d8b3      	bhi.n	1b080 <set+0x60>
   1b118:	4b08      	ldr	r3, [pc, #32]	; (1b13c <set+0x11c>)
   1b11a:	4907      	ldr	r1, [pc, #28]	; (1b138 <set+0x118>)
				BT_ERR("Invalid length IRK in storage");
   1b11c:	4813      	ldr	r0, [pc, #76]	; (1b16c <set+0x14c>)
   1b11e:	1ac9      	subs	r1, r1, r3
   1b120:	08c9      	lsrs	r1, r1, #3
   1b122:	0189      	lsls	r1, r1, #6
   1b124:	f041 0101 	orr.w	r1, r1, #1
   1b128:	f008 fe9b 	bl	23e62 <log_0>
				(void)memset(bt_dev.irk, 0, sizeof(bt_dev.irk));
   1b12c:	2210      	movs	r2, #16
   1b12e:	4621      	mov	r1, r4
   1b130:	480d      	ldr	r0, [pc, #52]	; (1b168 <set+0x148>)
   1b132:	f009 feb0 	bl	24e96 <memset>
   1b136:	e7a3      	b.n	1b080 <set+0x60>
   1b138:	00028e54 	.word	0x00028e54
   1b13c:	00028dd4 	.word	0x00028dd4
   1b140:	0002ad71 	.word	0x0002ad71
   1b144:	00029cbb 	.word	0x00029cbb
   1b148:	2000037c 	.word	0x2000037c
   1b14c:	0002bc31 	.word	0x0002bc31
   1b150:	0002bc55 	.word	0x0002bc55
   1b154:	0002b70d 	.word	0x0002b70d
   1b158:	20000460 	.word	0x20000460
   1b15c:	0002bc7a 	.word	0x0002bc7a
   1b160:	200002b0 	.word	0x200002b0
   1b164:	0002bc11 	.word	0x0002bc11
   1b168:	20000420 	.word	0x20000420
   1b16c:	0002bcac 	.word	0x0002bcac

0001b170 <bt_settings_encode_key>:
{
   1b170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b174:	b088      	sub	sp, #32
   1b176:	799c      	ldrb	r4, [r3, #6]
   1b178:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
   1b17c:	795d      	ldrb	r5, [r3, #5]
   1b17e:	791e      	ldrb	r6, [r3, #4]
   1b180:	78df      	ldrb	r7, [r3, #3]
   1b182:	f893 c002 	ldrb.w	ip, [r3, #2]
   1b186:	f893 e001 	ldrb.w	lr, [r3, #1]
   1b18a:	781b      	ldrb	r3, [r3, #0]
	if (key) {
   1b18c:	f1b8 0f00 	cmp.w	r8, #0
   1b190:	d00e      	beq.n	1b1b0 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
   1b192:	e9cd 3806 	strd	r3, r8, [sp, #24]
   1b196:	e9cd ce04 	strd	ip, lr, [sp, #16]
   1b19a:	4613      	mov	r3, r2
   1b19c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   1b1a0:	e9cd 4500 	strd	r4, r5, [sp]
   1b1a4:	4a08      	ldr	r2, [pc, #32]	; (1b1c8 <bt_settings_encode_key+0x58>)
   1b1a6:	f009 fcd8 	bl	24b5a <snprintk>
}
   1b1aa:	b008      	add	sp, #32
   1b1ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
   1b1b0:	e9cd e305 	strd	lr, r3, [sp, #20]
   1b1b4:	e9cd 7c03 	strd	r7, ip, [sp, #12]
   1b1b8:	4613      	mov	r3, r2
   1b1ba:	e9cd 5601 	strd	r5, r6, [sp, #4]
   1b1be:	4a03      	ldr	r2, [pc, #12]	; (1b1cc <bt_settings_encode_key+0x5c>)
   1b1c0:	9400      	str	r4, [sp, #0]
   1b1c2:	f009 fcca 	bl	24b5a <snprintk>
}
   1b1c6:	e7f0      	b.n	1b1aa <bt_settings_encode_key+0x3a>
   1b1c8:	0002bcca 	.word	0x0002bcca
   1b1cc:	0002bcee 	.word	0x0002bcee

0001b1d0 <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
   1b1d0:	4801      	ldr	r0, [pc, #4]	; (1b1d8 <bt_settings_save_id+0x8>)
   1b1d2:	f007 b8f5 	b.w	223c0 <k_work_submit>
   1b1d6:	bf00      	nop
   1b1d8:	2000064c 	.word	0x2000064c

0001b1dc <commit>:
}

static int commit(void)
{
   1b1dc:	b538      	push	{r3, r4, r5, lr}
	int err;

	BT_DBG("");

#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
   1b1de:	4d1e      	ldr	r5, [pc, #120]	; (1b258 <commit+0x7c>)
   1b1e0:	f895 31b0 	ldrb.w	r3, [r5, #432]	; 0x1b0
   1b1e4:	b913      	cbnz	r3, 1b1ec <commit+0x10>
		bt_set_name(CONFIG_BT_DEVICE_NAME);
   1b1e6:	481d      	ldr	r0, [pc, #116]	; (1b25c <commit+0x80>)
   1b1e8:	f7fe fc14 	bl	19a14 <bt_set_name>
	}
#endif
	if (!bt_dev.id_count) {
   1b1ec:	79eb      	ldrb	r3, [r5, #7]
   1b1ee:	b9b3      	cbnz	r3, 1b21e <commit+0x42>
		err = bt_setup_public_id_addr();
   1b1f0:	f7ff f9cc 	bl	1a58c <bt_setup_public_id_addr>
		if (err) {
   1b1f4:	4604      	mov	r4, r0
   1b1f6:	b158      	cbz	r0, 1b210 <commit+0x34>
   1b1f8:	4919      	ldr	r1, [pc, #100]	; (1b260 <commit+0x84>)
   1b1fa:	4b1a      	ldr	r3, [pc, #104]	; (1b264 <commit+0x88>)
	}

	if (!bt_dev.id_count) {
		err = bt_setup_random_id_addr();
		if (err) {
			BT_ERR("Unable to setup an identity address");
   1b1fc:	481a      	ldr	r0, [pc, #104]	; (1b268 <commit+0x8c>)
   1b1fe:	1ac9      	subs	r1, r1, r3
   1b200:	08c9      	lsrs	r1, r1, #3
   1b202:	0189      	lsls	r1, r1, #6
   1b204:	f041 0101 	orr.w	r1, r1, #1
   1b208:	f008 fe2b 	bl	23e62 <log_0>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
   1b20c:	4620      	mov	r0, r4
   1b20e:	bd38      	pop	{r3, r4, r5, pc}
	if (!bt_dev.id_count) {
   1b210:	79eb      	ldrb	r3, [r5, #7]
   1b212:	b923      	cbnz	r3, 1b21e <commit+0x42>
		err = bt_setup_random_id_addr();
   1b214:	f7ff fa5e 	bl	1a6d4 <bt_setup_random_id_addr>
		if (err) {
   1b218:	4604      	mov	r4, r0
   1b21a:	2800      	cmp	r0, #0
   1b21c:	d1ec      	bne.n	1b1f8 <commit+0x1c>
   1b21e:	f3bf 8f5b 	dmb	ish
   1b222:	4d12      	ldr	r5, [pc, #72]	; (1b26c <commit+0x90>)
   1b224:	682b      	ldr	r3, [r5, #0]
   1b226:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1b22a:	079b      	lsls	r3, r3, #30
   1b22c:	d401      	bmi.n	1b232 <commit+0x56>
		bt_finalize_init();
   1b22e:	f7fe fae5 	bl	197fc <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b232:	f3bf 8f5b 	dmb	ish
   1b236:	e855 4f00 	ldrex	r4, [r5]
   1b23a:	f424 4380 	bic.w	r3, r4, #16384	; 0x4000
   1b23e:	e845 3200 	strex	r2, r3, [r5]
   1b242:	2a00      	cmp	r2, #0
   1b244:	d1f7      	bne.n	1b236 <commit+0x5a>
   1b246:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   1b24a:	f414 4480 	ands.w	r4, r4, #16384	; 0x4000
   1b24e:	d0dd      	beq.n	1b20c <commit+0x30>
		bt_settings_save_id();
   1b250:	f7ff ffbe 	bl	1b1d0 <bt_settings_save_id>
	return 0;
   1b254:	2400      	movs	r4, #0
   1b256:	e7d9      	b.n	1b20c <commit+0x30>
   1b258:	200002b0 	.word	0x200002b0
   1b25c:	0002bd0f 	.word	0x0002bd0f
   1b260:	00028e54 	.word	0x00028e54
   1b264:	00028dd4 	.word	0x00028dd4
   1b268:	0002bd21 	.word	0x0002bd21
   1b26c:	2000037c 	.word	0x2000037c

0001b270 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
   1b270:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
   1b272:	f7f8 f9bb 	bl	135ec <settings_subsys_init>
	if (err) {
   1b276:	4604      	mov	r4, r0
   1b278:	b150      	cbz	r0, 1b290 <bt_settings_init+0x20>
   1b27a:	4a06      	ldr	r2, [pc, #24]	; (1b294 <bt_settings_init+0x24>)
   1b27c:	4b06      	ldr	r3, [pc, #24]	; (1b298 <bt_settings_init+0x28>)
   1b27e:	1ad2      	subs	r2, r2, r3
   1b280:	08d2      	lsrs	r2, r2, #3
		BT_ERR("settings_subsys_init failed (err %d)", err);
   1b282:	0192      	lsls	r2, r2, #6
   1b284:	4601      	mov	r1, r0
   1b286:	f042 0201 	orr.w	r2, r2, #1
   1b28a:	4804      	ldr	r0, [pc, #16]	; (1b29c <bt_settings_init+0x2c>)
   1b28c:	f008 fdf6 	bl	23e7c <log_1>
		return err;
	}

	return 0;
}
   1b290:	4620      	mov	r0, r4
   1b292:	bd10      	pop	{r4, pc}
   1b294:	00028e54 	.word	0x00028e54
   1b298:	00028dd4 	.word	0x00028dd4
   1b29c:	0002bd45 	.word	0x0002bd45

0001b2a0 <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
   1b2a0:	4b10      	ldr	r3, [pc, #64]	; (1b2e4 <get_io_capa+0x44>)
   1b2a2:	681b      	ldr	r3, [r3, #0]
   1b2a4:	b1bb      	cbz	r3, 1b2d6 <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
   1b2a6:	681a      	ldr	r2, [r3, #0]
   1b2a8:	b142      	cbz	r2, 1b2bc <get_io_capa+0x1c>
   1b2aa:	6859      	ldr	r1, [r3, #4]
   1b2ac:	b131      	cbz	r1, 1b2bc <get_io_capa+0x1c>
   1b2ae:	6899      	ldr	r1, [r3, #8]
   1b2b0:	b911      	cbnz	r1, 1b2b8 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
   1b2b2:	490d      	ldr	r1, [pc, #52]	; (1b2e8 <get_io_capa+0x48>)
   1b2b4:	7809      	ldrb	r1, [r1, #0]
   1b2b6:	b939      	cbnz	r1, 1b2c8 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   1b2b8:	2004      	movs	r0, #4
   1b2ba:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
   1b2bc:	490a      	ldr	r1, [pc, #40]	; (1b2e8 <get_io_capa+0x48>)
   1b2be:	7809      	ldrb	r1, [r1, #0]
   1b2c0:	b111      	cbz	r1, 1b2c8 <get_io_capa+0x28>
   1b2c2:	b10a      	cbz	r2, 1b2c8 <get_io_capa+0x28>
   1b2c4:	6899      	ldr	r1, [r3, #8]
   1b2c6:	b941      	cbnz	r1, 1b2da <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
   1b2c8:	685b      	ldr	r3, [r3, #4]
   1b2ca:	b943      	cbnz	r3, 1b2de <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
   1b2cc:	2a00      	cmp	r2, #0
   1b2ce:	bf0c      	ite	eq
   1b2d0:	2003      	moveq	r0, #3
   1b2d2:	2000      	movne	r0, #0
   1b2d4:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   1b2d6:	2003      	movs	r0, #3
   1b2d8:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
   1b2da:	2001      	movs	r0, #1
   1b2dc:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
   1b2de:	2002      	movs	r0, #2
	}
}
   1b2e0:	4770      	bx	lr
   1b2e2:	bf00      	nop
   1b2e4:	20002410 	.word	0x20002410
   1b2e8:	200029a1 	.word	0x200029a1

0001b2ec <smp_sign_buf>:
 * msg buffer contains message itself, 32 bit count and signature,
 * so total buffer size is len + 4 + 8 octets.
 * API is Little Endian to make it suitable for Bluetooth.
 */
static int smp_sign_buf(const uint8_t *key, uint8_t *msg, uint16_t len)
{
   1b2ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	BT_DBG("Signing msg %s len %u key %s", bt_hex(msg, len), len,
	       bt_hex(key, 16));

	sys_mem_swap(m, len + sizeof(cnt));
   1b2ee:	1d14      	adds	r4, r2, #4
{
   1b2f0:	b08b      	sub	sp, #44	; 0x2c
   1b2f2:	460d      	mov	r5, r1
	uint32_t cnt = UNALIGNED_GET((uint32_t *)&msg[len]);
   1b2f4:	588b      	ldr	r3, [r1, r2]
   1b2f6:	9301      	str	r3, [sp, #4]
{
   1b2f8:	4606      	mov	r6, r0
	uint32_t cnt = UNALIGNED_GET((uint32_t *)&msg[len]);
   1b2fa:	188f      	adds	r7, r1, r2
	sys_mem_swap(m, len + sizeof(cnt));
   1b2fc:	4628      	mov	r0, r5
   1b2fe:	4621      	mov	r1, r4
   1b300:	f00b fa9b 	bl	2683a <sys_mem_swap>
	sys_memcpy_swap(key_s, key, 16);
   1b304:	4631      	mov	r1, r6
   1b306:	2210      	movs	r2, #16
   1b308:	a802      	add	r0, sp, #8
   1b30a:	f00b fa8c 	bl	26826 <sys_memcpy_swap>

	err = bt_smp_aes_cmac(key_s, m, len + sizeof(cnt), tmp);
   1b30e:	ab06      	add	r3, sp, #24
   1b310:	4622      	mov	r2, r4
   1b312:	4629      	mov	r1, r5
   1b314:	a802      	add	r0, sp, #8
   1b316:	f00b fab3 	bl	26880 <bt_smp_aes_cmac>
	if (err) {
   1b31a:	4606      	mov	r6, r0
   1b31c:	b160      	cbz	r0, 1b338 <smp_sign_buf+0x4c>
   1b31e:	4910      	ldr	r1, [pc, #64]	; (1b360 <smp_sign_buf+0x74>)
   1b320:	4b10      	ldr	r3, [pc, #64]	; (1b364 <smp_sign_buf+0x78>)
		BT_ERR("Data signing failed");
   1b322:	4811      	ldr	r0, [pc, #68]	; (1b368 <smp_sign_buf+0x7c>)
   1b324:	1ac9      	subs	r1, r1, r3
   1b326:	08c9      	lsrs	r1, r1, #3
   1b328:	0189      	lsls	r1, r1, #6
   1b32a:	f041 0101 	orr.w	r1, r1, #1
   1b32e:	f008 fd98 	bl	23e62 <log_0>
	memcpy(sig, tmp + 4, 12);

	BT_DBG("sig %s", bt_hex(sig, 12));

	return 0;
}
   1b332:	4630      	mov	r0, r6
   1b334:	b00b      	add	sp, #44	; 0x2c
   1b336:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sys_mem_swap(tmp, sizeof(tmp));
   1b338:	a806      	add	r0, sp, #24
   1b33a:	2110      	movs	r1, #16
   1b33c:	f00b fa7d 	bl	2683a <sys_mem_swap>
	memcpy(tmp + 4, &cnt, sizeof(cnt));
   1b340:	2204      	movs	r2, #4
   1b342:	eb0d 0102 	add.w	r1, sp, r2
   1b346:	a807      	add	r0, sp, #28
   1b348:	f009 fd9a 	bl	24e80 <memcpy>
	sys_mem_swap(m, len + sizeof(cnt));
   1b34c:	4621      	mov	r1, r4
   1b34e:	4628      	mov	r0, r5
   1b350:	f00b fa73 	bl	2683a <sys_mem_swap>
	memcpy(sig, tmp + 4, 12);
   1b354:	220c      	movs	r2, #12
   1b356:	a907      	add	r1, sp, #28
   1b358:	4638      	mov	r0, r7
   1b35a:	f009 fd91 	bl	24e80 <memcpy>
	return 0;
   1b35e:	e7e8      	b.n	1b332 <smp_sign_buf+0x46>
   1b360:	00028e5c 	.word	0x00028e5c
   1b364:	00028dd4 	.word	0x00028dd4
   1b368:	0002bd79 	.word	0x0002bd79

0001b36c <smp_dhkey_generate>:
{
   1b36c:	b538      	push	{r3, r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1b36e:	1d05      	adds	r5, r0, #4
{
   1b370:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1b372:	2108      	movs	r1, #8
   1b374:	4628      	mov	r0, r5
   1b376:	f00b fa6f 	bl	26858 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   1b37a:	490b      	ldr	r1, [pc, #44]	; (1b3a8 <smp_dhkey_generate+0x3c>)
   1b37c:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1b380:	f7fb fc14 	bl	16bac <bt_dh_key_gen>
	if (err) {
   1b384:	b170      	cbz	r0, 1b3a4 <smp_dhkey_generate+0x38>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1b386:	2108      	movs	r1, #8
   1b388:	4628      	mov	r0, r5
   1b38a:	f00b fb08 	bl	2699e <atomic_clear_bit>
   1b38e:	4b07      	ldr	r3, [pc, #28]	; (1b3ac <smp_dhkey_generate+0x40>)
   1b390:	4907      	ldr	r1, [pc, #28]	; (1b3b0 <smp_dhkey_generate+0x44>)
		BT_ERR("Failed to generate DHKey");
   1b392:	4808      	ldr	r0, [pc, #32]	; (1b3b4 <smp_dhkey_generate+0x48>)
   1b394:	1ac9      	subs	r1, r1, r3
   1b396:	08c9      	lsrs	r1, r1, #3
   1b398:	0189      	lsls	r1, r1, #6
   1b39a:	f041 0101 	orr.w	r1, r1, #1
   1b39e:	f008 fd60 	bl	23e62 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
   1b3a2:	2008      	movs	r0, #8
}
   1b3a4:	bd38      	pop	{r3, r4, r5, pc}
   1b3a6:	bf00      	nop
   1b3a8:	00026edf 	.word	0x00026edf
   1b3ac:	00028dd4 	.word	0x00028dd4
   1b3b0:	00028e5c 	.word	0x00028e5c
   1b3b4:	0002bd8d 	.word	0x0002bd8d

0001b3b8 <get_auth.isra.0>:
	if (sc_supported) {
   1b3b8:	4b0c      	ldr	r3, [pc, #48]	; (1b3ec <get_auth.isra.0+0x34>)
   1b3ba:	781b      	ldrb	r3, [r3, #0]
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
   1b3bc:	b510      	push	{r4, lr}
	if (sc_supported) {
   1b3be:	b17b      	cbz	r3, 1b3e0 <get_auth.isra.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   1b3c0:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1b3c4:	f7ff ff6c 	bl	1b2a0 <get_io_capa>
	if (bondable) {
   1b3c8:	4b09      	ldr	r3, [pc, #36]	; (1b3f0 <get_auth.isra.0+0x38>)
   1b3ca:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1b3cc:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
   1b3ce:	bf0c      	ite	eq
   1b3d0:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   1b3d4:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   1b3d8:	b12b      	cbz	r3, 1b3e6 <get_auth.isra.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   1b3da:	f044 0001 	orr.w	r0, r4, #1
}
   1b3de:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   1b3e0:	f000 0407 	and.w	r4, r0, #7
   1b3e4:	e7ee      	b.n	1b3c4 <get_auth.isra.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   1b3e6:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   1b3ea:	e7f8      	b.n	1b3de <get_auth.isra.0+0x26>
   1b3ec:	200029a1 	.word	0x200029a1
   1b3f0:	200008cd 	.word	0x200008cd

0001b3f4 <smp_chan_get>:
{
   1b3f4:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   1b3f6:	2106      	movs	r1, #6
   1b3f8:	f00b f9e0 	bl	267bc <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1b3fc:	4604      	mov	r4, r0
   1b3fe:	b958      	cbnz	r0, 1b418 <smp_chan_get+0x24>
   1b400:	4907      	ldr	r1, [pc, #28]	; (1b420 <smp_chan_get+0x2c>)
   1b402:	4b08      	ldr	r3, [pc, #32]	; (1b424 <smp_chan_get+0x30>)
		BT_ERR("Unable to find SMP channel");
   1b404:	4808      	ldr	r0, [pc, #32]	; (1b428 <smp_chan_get+0x34>)
   1b406:	1ac9      	subs	r1, r1, r3
   1b408:	08c9      	lsrs	r1, r1, #3
   1b40a:	0189      	lsls	r1, r1, #6
   1b40c:	f041 0101 	orr.w	r1, r1, #1
   1b410:	f008 fd27 	bl	23e62 <log_0>
}
   1b414:	4620      	mov	r0, r4
   1b416:	bd10      	pop	{r4, pc}
	return CONTAINER_OF(chan, struct bt_smp, chan);
   1b418:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
   1b41c:	e7fa      	b.n	1b414 <smp_chan_get+0x20>
   1b41e:	bf00      	nop
   1b420:	00028e5c 	.word	0x00028e5c
   1b424:	00028dd4 	.word	0x00028dd4
   1b428:	0002bda6 	.word	0x0002bda6

0001b42c <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   1b42c:	4b0c      	ldr	r3, [pc, #48]	; (1b460 <bt_smp_accept+0x34>)
{
   1b42e:	b510      	push	{r4, lr}
   1b430:	4604      	mov	r4, r0
		if (smp->chan.chan.conn) {
   1b432:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
   1b436:	b928      	cbnz	r0, 1b444 <bt_smp_accept+0x18>
			continue;
		}

		smp->chan.chan.ops = &ops;
   1b438:	4a0a      	ldr	r2, [pc, #40]	; (1b464 <bt_smp_accept+0x38>)
   1b43a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

		*chan = &smp->chan.chan;
   1b43e:	33f0      	adds	r3, #240	; 0xf0
   1b440:	600b      	str	r3, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   1b442:	bd10      	pop	{r4, pc}
   1b444:	4b08      	ldr	r3, [pc, #32]	; (1b468 <bt_smp_accept+0x3c>)
   1b446:	4a09      	ldr	r2, [pc, #36]	; (1b46c <bt_smp_accept+0x40>)
	BT_ERR("No available SMP context for conn %p", conn);
   1b448:	4809      	ldr	r0, [pc, #36]	; (1b470 <bt_smp_accept+0x44>)
   1b44a:	1ad2      	subs	r2, r2, r3
   1b44c:	08d2      	lsrs	r2, r2, #3
   1b44e:	0192      	lsls	r2, r2, #6
   1b450:	f042 0201 	orr.w	r2, r2, #1
   1b454:	4621      	mov	r1, r4
   1b456:	f008 fd11 	bl	23e7c <log_1>
	return -ENOMEM;
   1b45a:	f06f 000b 	mvn.w	r0, #11
   1b45e:	e7f0      	b.n	1b442 <bt_smp_accept+0x16>
   1b460:	20001c60 	.word	0x20001c60
   1b464:	000298a4 	.word	0x000298a4
   1b468:	00028dd4 	.word	0x00028dd4
   1b46c:	00028e5c 	.word	0x00028e5c
   1b470:	0002bdc1 	.word	0x0002bdc1

0001b474 <smp_init>:
{
   1b474:	b538      	push	{r3, r4, r5, lr}
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   1b476:	22f0      	movs	r2, #240	; 0xf0
{
   1b478:	4605      	mov	r5, r0
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   1b47a:	2100      	movs	r1, #0
   1b47c:	f009 fd0b 	bl	24e96 <memset>
	if (bt_rand(smp->prnd, 16)) {
   1b480:	2110      	movs	r1, #16
   1b482:	f105 0027 	add.w	r0, r5, #39	; 0x27
   1b486:	f003 fcb3 	bl	1edf0 <bt_rand>
   1b48a:	4604      	mov	r4, r0
   1b48c:	b948      	cbnz	r0, 1b4a2 <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   1b48e:	2105      	movs	r1, #5
   1b490:	4628      	mov	r0, r5
   1b492:	f00b f9e1 	bl	26858 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   1b496:	f7fb fb79 	bl	16b8c <bt_pub_key_get>
   1b49a:	4b03      	ldr	r3, [pc, #12]	; (1b4a8 <smp_init+0x34>)
   1b49c:	6018      	str	r0, [r3, #0]
}
   1b49e:	4620      	mov	r0, r4
   1b4a0:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1b4a2:	2408      	movs	r4, #8
   1b4a4:	e7fb      	b.n	1b49e <smp_init+0x2a>
   1b4a6:	bf00      	nop
   1b4a8:	2000254c 	.word	0x2000254c

0001b4ac <smp_find>:
{
   1b4ac:	4601      	mov	r1, r0
   1b4ae:	b508      	push	{r3, lr}
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1b4b0:	4803      	ldr	r0, [pc, #12]	; (1b4c0 <smp_find+0x14>)
   1b4b2:	f00b faa2 	bl	269fa <atomic_test_bit>
   1b4b6:	2800      	cmp	r0, #0
}
   1b4b8:	4802      	ldr	r0, [pc, #8]	; (1b4c4 <smp_find+0x18>)
   1b4ba:	bf08      	it	eq
   1b4bc:	2000      	moveq	r0, #0
   1b4be:	bd08      	pop	{r3, pc}
   1b4c0:	20001c64 	.word	0x20001c64
   1b4c4:	20001c60 	.word	0x20001c60

0001b4c8 <smp_send_pairing_confirm>:
{
   1b4c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
   1b4ca:	7a04      	ldrb	r4, [r0, #8]
   1b4cc:	2c02      	cmp	r4, #2
{
   1b4ce:	4605      	mov	r5, r0
	switch (smp->method) {
   1b4d0:	d824      	bhi.n	1b51c <smp_send_pairing_confirm+0x54>
   1b4d2:	b14c      	cbz	r4, 1b4e8 <smp_send_pairing_confirm+0x20>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1b4d4:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   1b4d8:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   1b4dc:	40dc      	lsrs	r4, r3
   1b4de:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   1b4e2:	f064 047f 	orn	r4, r4, #127	; 0x7f
   1b4e6:	b2e4      	uxtb	r4, r4
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1b4e8:	2103      	movs	r1, #3
   1b4ea:	4628      	mov	r0, r5
   1b4ec:	f00b faaf 	bl	26a4e <smp_create_pdu.isra.0>
	if (!buf) {
   1b4f0:	4606      	mov	r6, r0
   1b4f2:	b300      	cbz	r0, 1b536 <smp_send_pairing_confirm+0x6e>
   1b4f4:	2110      	movs	r1, #16
   1b4f6:	3008      	adds	r0, #8
   1b4f8:	f00b fe7e 	bl	271f8 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   1b4fc:	9000      	str	r0, [sp, #0]
   1b4fe:	4816      	ldr	r0, [pc, #88]	; (1b558 <smp_send_pairing_confirm+0x90>)
   1b500:	4623      	mov	r3, r4
   1b502:	6800      	ldr	r0, [r0, #0]
   1b504:	f105 0227 	add.w	r2, r5, #39	; 0x27
   1b508:	f105 0157 	add.w	r1, r5, #87	; 0x57
   1b50c:	f00b f9d4 	bl	268b8 <smp_f4>
   1b510:	4604      	mov	r4, r0
   1b512:	b1a0      	cbz	r0, 1b53e <smp_send_pairing_confirm+0x76>
		net_buf_unref(buf);
   1b514:	4630      	mov	r0, r6
   1b516:	f001 fde3 	bl	1d0e0 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1b51a:	e00c      	b.n	1b536 <smp_send_pairing_confirm+0x6e>
	switch (smp->method) {
   1b51c:	2c03      	cmp	r4, #3
   1b51e:	d00c      	beq.n	1b53a <smp_send_pairing_confirm+0x72>
   1b520:	4a0e      	ldr	r2, [pc, #56]	; (1b55c <smp_send_pairing_confirm+0x94>)
   1b522:	4b0f      	ldr	r3, [pc, #60]	; (1b560 <smp_send_pairing_confirm+0x98>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1b524:	480f      	ldr	r0, [pc, #60]	; (1b564 <smp_send_pairing_confirm+0x9c>)
   1b526:	1ad2      	subs	r2, r2, r3
   1b528:	08d2      	lsrs	r2, r2, #3
   1b52a:	0192      	lsls	r2, r2, #6
   1b52c:	f042 0201 	orr.w	r2, r2, #1
   1b530:	4621      	mov	r1, r4
   1b532:	f008 fca3 	bl	23e7c <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   1b536:	2008      	movs	r0, #8
   1b538:	e00b      	b.n	1b552 <smp_send_pairing_confirm+0x8a>
	switch (smp->method) {
   1b53a:	2400      	movs	r4, #0
   1b53c:	e7d4      	b.n	1b4e8 <smp_send_pairing_confirm+0x20>
	smp_send(smp, buf, NULL, NULL);
   1b53e:	4602      	mov	r2, r0
   1b540:	4631      	mov	r1, r6
   1b542:	4628      	mov	r0, r5
   1b544:	f00b fa3a 	bl	269bc <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1b548:	1d28      	adds	r0, r5, #4
   1b54a:	4621      	mov	r1, r4
   1b54c:	f00b fa27 	bl	2699e <atomic_clear_bit>
	return 0;
   1b550:	4620      	mov	r0, r4
}
   1b552:	b002      	add	sp, #8
   1b554:	bd70      	pop	{r4, r5, r6, pc}
   1b556:	bf00      	nop
   1b558:	2000254c 	.word	0x2000254c
   1b55c:	00028e5c 	.word	0x00028e5c
   1b560:	00028dd4 	.word	0x00028dd4
   1b564:	0002bde6 	.word	0x0002bde6

0001b568 <compute_and_check_and_send_periph_dhcheck>:
{
   1b568:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)memset(r, 0, sizeof(r));
   1b56c:	2210      	movs	r2, #16
{
   1b56e:	b0a3      	sub	sp, #140	; 0x8c
   1b570:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
   1b572:	2100      	movs	r1, #0
   1b574:	eb0d 0002 	add.w	r0, sp, r2
   1b578:	f009 fc8d 	bl	24e96 <memset>
	switch (smp->method) {
   1b57c:	7a21      	ldrb	r1, [r4, #8]
   1b57e:	2905      	cmp	r1, #5
   1b580:	f200 809b 	bhi.w	1b6ba <compute_and_check_and_send_periph_dhcheck+0x152>
   1b584:	e8df f001 	tbb	[pc, r1]
   1b588:	09030309 	.word	0x09030309
   1b58c:	9099      	.short	0x9099
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1b58e:	2204      	movs	r2, #4
   1b590:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
   1b594:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1b596:	f009 fc73 	bl	24e80 <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
   1b59a:	4b7a      	ldr	r3, [pc, #488]	; (1b784 <compute_and_check_and_send_periph_dhcheck+0x21c>)
		   &smp->chan.chan.conn->le.init_addr,
   1b59c:	f8d4 90f0 	ldr.w	r9, [r4, #240]	; 0xf0
	uint8_t m[53] = { 0x00, /* counter */
   1b5a0:	aa14      	add	r2, sp, #80	; 0x50
   1b5a2:	f103 0630 	add.w	r6, r3, #48	; 0x30
   1b5a6:	6818      	ldr	r0, [r3, #0]
   1b5a8:	6859      	ldr	r1, [r3, #4]
   1b5aa:	4615      	mov	r5, r2
   1b5ac:	c503      	stmia	r5!, {r0, r1}
   1b5ae:	3308      	adds	r3, #8
   1b5b0:	42b3      	cmp	r3, r6
   1b5b2:	462a      	mov	r2, r5
   1b5b4:	d1f7      	bne.n	1b5a6 <compute_and_check_and_send_periph_dhcheck+0x3e>
   1b5b6:	6818      	ldr	r0, [r3, #0]
   1b5b8:	791b      	ldrb	r3, [r3, #4]
   1b5ba:	6028      	str	r0, [r5, #0]
   1b5bc:	712b      	strb	r3, [r5, #4]
	sys_memcpy_swap(ws, w, 32);
   1b5be:	ad0c      	add	r5, sp, #48	; 0x30
   1b5c0:	2220      	movs	r2, #32
   1b5c2:	f104 0197 	add.w	r1, r4, #151	; 0x97
   1b5c6:	4628      	mov	r0, r5
   1b5c8:	f00b f92d 	bl	26826 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   1b5cc:	486e      	ldr	r0, [pc, #440]	; (1b788 <compute_and_check_and_send_periph_dhcheck+0x220>)
   1b5ce:	ab08      	add	r3, sp, #32
   1b5d0:	2220      	movs	r2, #32
   1b5d2:	4629      	mov	r1, r5
   1b5d4:	f00b f954 	bl	26880 <bt_smp_aes_cmac>
	if (err) {
   1b5d8:	2800      	cmp	r0, #0
   1b5da:	f040 80c9 	bne.w	1b770 <compute_and_check_and_send_periph_dhcheck+0x208>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   1b5de:	f104 0737 	add.w	r7, r4, #55	; 0x37
	sys_memcpy_swap(m + 5, n1, 16);
   1b5e2:	2210      	movs	r2, #16
   1b5e4:	4639      	mov	r1, r7
   1b5e6:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   1b5ea:	f104 0827 	add.w	r8, r4, #39	; 0x27
	sys_memcpy_swap(m + 5, n1, 16);
   1b5ee:	f00b f91a 	bl	26826 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   1b5f2:	2210      	movs	r2, #16
   1b5f4:	4641      	mov	r1, r8
   1b5f6:	f10d 0065 	add.w	r0, sp, #101	; 0x65
   1b5fa:	f00b f914 	bl	26826 <sys_memcpy_swap>
	m[37] = a1->type;
   1b5fe:	f899 308f 	ldrb.w	r3, [r9, #143]	; 0x8f
   1b602:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1b606:	2206      	movs	r2, #6
   1b608:	f109 0190 	add.w	r1, r9, #144	; 0x90
   1b60c:	f10d 0076 	add.w	r0, sp, #118	; 0x76
   1b610:	f00b f909 	bl	26826 <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   1b614:	f104 06c7 	add.w	r6, r4, #199	; 0xc7
	m[44] = a2->type;
   1b618:	f899 3096 	ldrb.w	r3, [r9, #150]	; 0x96
   1b61c:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1b620:	2206      	movs	r2, #6
   1b622:	f109 0197 	add.w	r1, r9, #151	; 0x97
   1b626:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
   1b62a:	f00b f8fc 	bl	26826 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   1b62e:	4633      	mov	r3, r6
   1b630:	2235      	movs	r2, #53	; 0x35
   1b632:	a914      	add	r1, sp, #80	; 0x50
   1b634:	a808      	add	r0, sp, #32
   1b636:	f00b f923 	bl	26880 <bt_smp_aes_cmac>
	if (err) {
   1b63a:	2800      	cmp	r0, #0
   1b63c:	f040 8098 	bne.w	1b770 <compute_and_check_and_send_periph_dhcheck+0x208>
	sys_mem_swap(mackey, 16);
   1b640:	2110      	movs	r1, #16
   1b642:	4630      	mov	r0, r6
   1b644:	f00b f8f9 	bl	2683a <sys_mem_swap>
		   smp->tk)) {
   1b648:	f104 0947 	add.w	r9, r4, #71	; 0x47
	m[0] = 0x01;
   1b64c:	2301      	movs	r3, #1
   1b64e:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   1b652:	2235      	movs	r2, #53	; 0x35
   1b654:	464b      	mov	r3, r9
   1b656:	a914      	add	r1, sp, #80	; 0x50
   1b658:	a808      	add	r0, sp, #32
   1b65a:	f00b f911 	bl	26880 <bt_smp_aes_cmac>
	if (err) {
   1b65e:	2800      	cmp	r0, #0
   1b660:	f040 8086 	bne.w	1b770 <compute_and_check_and_send_periph_dhcheck+0x208>
	sys_mem_swap(ltk, 16);
   1b664:	2110      	movs	r1, #16
   1b666:	4648      	mov	r0, r9
   1b668:	f00b f8e7 	bl	2683a <sys_mem_swap>
		   &smp->chan.chan.conn->le.resp_addr,
   1b66c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1b670:	aa14      	add	r2, sp, #80	; 0x50
   1b672:	9203      	str	r2, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
   1b674:	f103 028f 	add.w	r2, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
   1b678:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1b67a:	9301      	str	r3, [sp, #4]
   1b67c:	f104 0311 	add.w	r3, r4, #17
   1b680:	9202      	str	r2, [sp, #8]
   1b682:	9300      	str	r3, [sp, #0]
   1b684:	463a      	mov	r2, r7
   1b686:	ab04      	add	r3, sp, #16
   1b688:	4641      	mov	r1, r8
   1b68a:	4630      	mov	r0, r6
   1b68c:	f00b f93a 	bl	26904 <smp_f6>
   1b690:	b1f8      	cbz	r0, 1b6d2 <compute_and_check_and_send_periph_dhcheck+0x16a>
   1b692:	493e      	ldr	r1, [pc, #248]	; (1b78c <compute_and_check_and_send_periph_dhcheck+0x224>)
   1b694:	4b3e      	ldr	r3, [pc, #248]	; (1b790 <compute_and_check_and_send_periph_dhcheck+0x228>)
		BT_ERR("Calculate local DHKey check failed");
   1b696:	483f      	ldr	r0, [pc, #252]	; (1b794 <compute_and_check_and_send_periph_dhcheck+0x22c>)
   1b698:	1ac9      	subs	r1, r1, r3
   1b69a:	08c9      	lsrs	r1, r1, #3
   1b69c:	0189      	lsls	r1, r1, #6
   1b69e:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Calculate LTK failed");
   1b6a2:	f008 fbde 	bl	23e62 <log_0>
   1b6a6:	e012      	b.n	1b6ce <compute_and_check_and_send_periph_dhcheck+0x166>
		if (smp->oobd_remote) {
   1b6a8:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   1b6ac:	2900      	cmp	r1, #0
   1b6ae:	f43f af74 	beq.w	1b59a <compute_and_check_and_send_periph_dhcheck+0x32>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1b6b2:	2210      	movs	r2, #16
   1b6b4:	eb0d 0002 	add.w	r0, sp, r2
   1b6b8:	e76d      	b.n	1b596 <compute_and_check_and_send_periph_dhcheck+0x2e>
   1b6ba:	4a34      	ldr	r2, [pc, #208]	; (1b78c <compute_and_check_and_send_periph_dhcheck+0x224>)
   1b6bc:	4b34      	ldr	r3, [pc, #208]	; (1b790 <compute_and_check_and_send_periph_dhcheck+0x228>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1b6be:	4836      	ldr	r0, [pc, #216]	; (1b798 <compute_and_check_and_send_periph_dhcheck+0x230>)
   1b6c0:	1ad2      	subs	r2, r2, r3
   1b6c2:	08d2      	lsrs	r2, r2, #3
   1b6c4:	0192      	lsls	r2, r2, #6
   1b6c6:	f042 0201 	orr.w	r2, r2, #1
   1b6ca:	f008 fbd7 	bl	23e7c <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   1b6ce:	2008      	movs	r0, #8
   1b6d0:	e049      	b.n	1b766 <compute_and_check_and_send_periph_dhcheck+0x1fe>
	if (smp->method == LE_SC_OOB) {
   1b6d2:	7a23      	ldrb	r3, [r4, #8]
   1b6d4:	2b05      	cmp	r3, #5
   1b6d6:	d107      	bne.n	1b6e8 <compute_and_check_and_send_periph_dhcheck+0x180>
		if (smp->oobd_local) {
   1b6d8:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1b6dc:	2210      	movs	r2, #16
   1b6de:	eb0d 0002 	add.w	r0, sp, r2
		if (smp->oobd_local) {
   1b6e2:	b1e1      	cbz	r1, 1b71e <compute_and_check_and_send_periph_dhcheck+0x1b6>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1b6e4:	f009 fbcc 	bl	24e80 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
   1b6e8:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1b6ec:	9503      	str	r5, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
   1b6ee:	f103 0296 	add.w	r2, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   1b6f2:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1b6f4:	9301      	str	r3, [sp, #4]
   1b6f6:	f104 030a 	add.w	r3, r4, #10
   1b6fa:	9202      	str	r2, [sp, #8]
   1b6fc:	9300      	str	r3, [sp, #0]
   1b6fe:	4642      	mov	r2, r8
   1b700:	ab04      	add	r3, sp, #16
   1b702:	4639      	mov	r1, r7
   1b704:	4630      	mov	r0, r6
   1b706:	f00b f8fd 	bl	26904 <smp_f6>
   1b70a:	b158      	cbz	r0, 1b724 <compute_and_check_and_send_periph_dhcheck+0x1bc>
   1b70c:	491f      	ldr	r1, [pc, #124]	; (1b78c <compute_and_check_and_send_periph_dhcheck+0x224>)
   1b70e:	4b20      	ldr	r3, [pc, #128]	; (1b790 <compute_and_check_and_send_periph_dhcheck+0x228>)
		BT_ERR("Calculate remote DHKey check failed");
   1b710:	4822      	ldr	r0, [pc, #136]	; (1b79c <compute_and_check_and_send_periph_dhcheck+0x234>)
   1b712:	1ac9      	subs	r1, r1, r3
   1b714:	08c9      	lsrs	r1, r1, #3
   1b716:	0189      	lsls	r1, r1, #6
   1b718:	f041 0101 	orr.w	r1, r1, #1
   1b71c:	e7c1      	b.n	1b6a2 <compute_and_check_and_send_periph_dhcheck+0x13a>
			memset(r, 0, sizeof(r));
   1b71e:	f009 fbba 	bl	24e96 <memset>
   1b722:	e7e1      	b.n	1b6e8 <compute_and_check_and_send_periph_dhcheck+0x180>
	if (memcmp(smp->e, re, 16)) {
   1b724:	4629      	mov	r1, r5
   1b726:	2210      	movs	r2, #16
   1b728:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   1b72c:	f009 fb98 	bl	24e60 <memcmp>
   1b730:	4605      	mov	r5, r0
   1b732:	b9d8      	cbnz	r0, 1b76c <compute_and_check_and_send_periph_dhcheck+0x204>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   1b734:	210d      	movs	r1, #13
   1b736:	4620      	mov	r0, r4
   1b738:	f00b f989 	bl	26a4e <smp_create_pdu.isra.0>
	if (!buf) {
   1b73c:	4606      	mov	r6, r0
   1b73e:	2800      	cmp	r0, #0
   1b740:	d0c5      	beq.n	1b6ce <compute_and_check_and_send_periph_dhcheck+0x166>
   1b742:	2110      	movs	r1, #16
   1b744:	3008      	adds	r0, #8
   1b746:	f00b fd57 	bl	271f8 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   1b74a:	2210      	movs	r2, #16
   1b74c:	a914      	add	r1, sp, #80	; 0x50
   1b74e:	f009 fb97 	bl	24e80 <memcpy>
	smp_send(smp, buf, NULL, NULL);
   1b752:	462a      	mov	r2, r5
   1b754:	4631      	mov	r1, r6
   1b756:	4620      	mov	r0, r4
   1b758:	f00b f930 	bl	269bc <smp_send.isra.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1b75c:	1d20      	adds	r0, r4, #4
   1b75e:	2101      	movs	r1, #1
   1b760:	f00b f87a 	bl	26858 <atomic_set_bit>
	return 0;
   1b764:	4628      	mov	r0, r5
}
   1b766:	b023      	add	sp, #140	; 0x8c
   1b768:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1b76c:	200b      	movs	r0, #11
   1b76e:	e7fa      	b.n	1b766 <compute_and_check_and_send_periph_dhcheck+0x1fe>
   1b770:	4906      	ldr	r1, [pc, #24]	; (1b78c <compute_and_check_and_send_periph_dhcheck+0x224>)
   1b772:	4b07      	ldr	r3, [pc, #28]	; (1b790 <compute_and_check_and_send_periph_dhcheck+0x228>)
		BT_ERR("Calculate LTK failed");
   1b774:	480a      	ldr	r0, [pc, #40]	; (1b7a0 <compute_and_check_and_send_periph_dhcheck+0x238>)
   1b776:	1ac9      	subs	r1, r1, r3
   1b778:	08c9      	lsrs	r1, r1, #3
   1b77a:	0189      	lsls	r1, r1, #6
   1b77c:	f041 0101 	orr.w	r1, r1, #1
   1b780:	e78f      	b.n	1b6a2 <compute_and_check_and_send_periph_dhcheck+0x13a>
   1b782:	bf00      	nop
   1b784:	00029047 	.word	0x00029047
   1b788:	0002c1cc 	.word	0x0002c1cc
   1b78c:	00028e5c 	.word	0x00028e5c
   1b790:	00028dd4 	.word	0x00028dd4
   1b794:	0002be02 	.word	0x0002be02
   1b798:	0002bde6 	.word	0x0002bde6
   1b79c:	0002be25 	.word	0x0002be25
   1b7a0:	0002be49 	.word	0x0002be49

0001b7a4 <smp_public_key_periph>:
{
   1b7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1b7a8:	1d06      	adds	r6, r0, #4
{
   1b7aa:	4604      	mov	r4, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1b7ac:	210e      	movs	r1, #14
   1b7ae:	4630      	mov	r0, r6
   1b7b0:	f00b f923 	bl	269fa <atomic_test_bit>
   1b7b4:	b998      	cbnz	r0, 1b7de <smp_public_key_periph+0x3a>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   1b7b6:	4b4e      	ldr	r3, [pc, #312]	; (1b8f0 <smp_public_key_periph+0x14c>)
   1b7b8:	2220      	movs	r2, #32
   1b7ba:	6819      	ldr	r1, [r3, #0]
   1b7bc:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1b7c0:	f009 fb4e 	bl	24e60 <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1b7c4:	b958      	cbnz	r0, 1b7de <smp_public_key_periph+0x3a>
   1b7c6:	494b      	ldr	r1, [pc, #300]	; (1b8f4 <smp_public_key_periph+0x150>)
   1b7c8:	4b4b      	ldr	r3, [pc, #300]	; (1b8f8 <smp_public_key_periph+0x154>)
		BT_WARN("Remote public key rejected");
   1b7ca:	484c      	ldr	r0, [pc, #304]	; (1b8fc <smp_public_key_periph+0x158>)
   1b7cc:	1ac9      	subs	r1, r1, r3
   1b7ce:	08c9      	lsrs	r1, r1, #3
   1b7d0:	0189      	lsls	r1, r1, #6
   1b7d2:	f041 0102 	orr.w	r1, r1, #2
   1b7d6:	f008 fb44 	bl	23e62 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
   1b7da:	2008      	movs	r0, #8
   1b7dc:	e02e      	b.n	1b83c <smp_public_key_periph+0x98>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   1b7de:	210c      	movs	r1, #12
   1b7e0:	4620      	mov	r0, r4
   1b7e2:	f00b f934 	bl	26a4e <smp_create_pdu.isra.0>
	if (!req_buf) {
   1b7e6:	4605      	mov	r5, r0
   1b7e8:	2800      	cmp	r0, #0
   1b7ea:	d0f6      	beq.n	1b7da <smp_public_key_periph+0x36>
   1b7ec:	2140      	movs	r1, #64	; 0x40
   1b7ee:	3008      	adds	r0, #8
   1b7f0:	f00b fd02 	bl	271f8 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   1b7f4:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 1b8f0 <smp_public_key_periph+0x14c>
   1b7f8:	2220      	movs	r2, #32
   1b7fa:	f8d8 1000 	ldr.w	r1, [r8]
   1b7fe:	4607      	mov	r7, r0
   1b800:	f009 fb3e 	bl	24e80 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   1b804:	f8d8 1000 	ldr.w	r1, [r8]
   1b808:	2220      	movs	r2, #32
   1b80a:	4411      	add	r1, r2
   1b80c:	18b8      	adds	r0, r7, r2
   1b80e:	f009 fb37 	bl	24e80 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   1b812:	4629      	mov	r1, r5
   1b814:	2200      	movs	r2, #0
   1b816:	4620      	mov	r0, r4
   1b818:	f00b f8d0 	bl	269bc <smp_send.isra.0>
	switch (smp->method) {
   1b81c:	7a21      	ldrb	r1, [r4, #8]
   1b81e:	2905      	cmp	r1, #5
   1b820:	d859      	bhi.n	1b8d6 <smp_public_key_periph+0x132>
   1b822:	e8df f001 	tbb	[pc, r1]
   1b826:	3803      	.short	0x3803
   1b828:	5658030d 	.word	0x5658030d
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1b82c:	2104      	movs	r1, #4
   1b82e:	4620      	mov	r0, r4
   1b830:	f00b f812 	bl	26858 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   1b834:	f7ff fe48 	bl	1b4c8 <smp_send_pairing_confirm>
		if (err) {
   1b838:	2800      	cmp	r0, #0
   1b83a:	d03d      	beq.n	1b8b8 <smp_public_key_periph+0x114>
}
   1b83c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1b840:	2104      	movs	r1, #4
   1b842:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   1b846:	f003 fad3 	bl	1edf0 <bt_rand>
   1b84a:	2800      	cmp	r0, #0
   1b84c:	d1c5      	bne.n	1b7da <smp_public_key_periph+0x36>
		smp->passkey %= 1000000;
   1b84e:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   1b852:	4a2b      	ldr	r2, [pc, #172]	; (1b900 <smp_public_key_periph+0x15c>)
	if (bt_auth && bt_auth->passkey_display) {
   1b854:	4d2b      	ldr	r5, [pc, #172]	; (1b904 <smp_public_key_periph+0x160>)
		smp->passkey %= 1000000;
   1b856:	fbb1 f3f2 	udiv	r3, r1, r2
   1b85a:	fb02 1313 	mls	r3, r2, r3, r1
   1b85e:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (bt_auth && bt_auth->passkey_display) {
   1b862:	682b      	ldr	r3, [r5, #0]
	smp->passkey_round = 0U;
   1b864:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (bt_auth && bt_auth->passkey_display) {
   1b868:	b163      	cbz	r3, 1b884 <smp_public_key_periph+0xe0>
   1b86a:	681b      	ldr	r3, [r3, #0]
   1b86c:	b153      	cbz	r3, 1b884 <smp_public_key_periph+0xe0>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1b86e:	210b      	movs	r1, #11
   1b870:	4630      	mov	r0, r6
   1b872:	f00a fff1 	bl	26858 <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
   1b876:	682b      	ldr	r3, [r5, #0]
   1b878:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   1b87c:	681b      	ldr	r3, [r3, #0]
   1b87e:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1b882:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1b884:	2103      	movs	r1, #3
   1b886:	4620      	mov	r0, r4
   1b888:	f00a ffe6 	bl	26858 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1b88c:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1b88e:	4620      	mov	r0, r4
   1b890:	f00a ffe2 	bl	26858 <atomic_set_bit>
		break;
   1b894:	e010      	b.n	1b8b8 <smp_public_key_periph+0x114>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1b896:	4620      	mov	r0, r4
   1b898:	2103      	movs	r1, #3
   1b89a:	f00a ffdd 	bl	26858 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1b89e:	210e      	movs	r1, #14
   1b8a0:	f00a ffda 	bl	26858 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1b8a4:	4630      	mov	r0, r6
   1b8a6:	210a      	movs	r1, #10
   1b8a8:	f00a ffd6 	bl	26858 <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
   1b8ac:	4b15      	ldr	r3, [pc, #84]	; (1b904 <smp_public_key_periph+0x160>)
   1b8ae:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1b8b2:	681b      	ldr	r3, [r3, #0]
   1b8b4:	685b      	ldr	r3, [r3, #4]
   1b8b6:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1b8b8:	4630      	mov	r0, r6
   1b8ba:	2107      	movs	r1, #7
   1b8bc:	f00a ffcc 	bl	26858 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   1b8c0:	2008      	movs	r0, #8
   1b8c2:	f7ff fdf3 	bl	1b4ac <smp_find>
   1b8c6:	b988      	cbnz	r0, 1b8ec <smp_public_key_periph+0x148>
		return smp_dhkey_generate(smp);
   1b8c8:	4620      	mov	r0, r4
}
   1b8ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return smp_dhkey_generate(smp);
   1b8ce:	f7ff bd4d 	b.w	1b36c <smp_dhkey_generate>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1b8d2:	2104      	movs	r1, #4
   1b8d4:	e7db      	b.n	1b88e <smp_public_key_periph+0xea>
   1b8d6:	4b08      	ldr	r3, [pc, #32]	; (1b8f8 <smp_public_key_periph+0x154>)
   1b8d8:	4a06      	ldr	r2, [pc, #24]	; (1b8f4 <smp_public_key_periph+0x150>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1b8da:	480b      	ldr	r0, [pc, #44]	; (1b908 <smp_public_key_periph+0x164>)
   1b8dc:	1ad2      	subs	r2, r2, r3
   1b8de:	08d2      	lsrs	r2, r2, #3
   1b8e0:	0192      	lsls	r2, r2, #6
   1b8e2:	f042 0201 	orr.w	r2, r2, #1
   1b8e6:	f008 fac9 	bl	23e7c <log_1>
   1b8ea:	e776      	b.n	1b7da <smp_public_key_periph+0x36>
	return 0;
   1b8ec:	2000      	movs	r0, #0
   1b8ee:	e7a5      	b.n	1b83c <smp_public_key_periph+0x98>
   1b8f0:	2000254c 	.word	0x2000254c
   1b8f4:	00028e5c 	.word	0x00028e5c
   1b8f8:	00028dd4 	.word	0x00028dd4
   1b8fc:	0002be5e 	.word	0x0002be5e
   1b900:	000f4240 	.word	0x000f4240
   1b904:	20002410 	.word	0x20002410
   1b908:	0002bde6 	.word	0x0002bde6

0001b90c <smp_public_key>:
{
   1b90c:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
   1b90e:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   1b910:	f100 0557 	add.w	r5, r0, #87	; 0x57
{
   1b914:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   1b916:	2220      	movs	r2, #32
   1b918:	4631      	mov	r1, r6
   1b91a:	4628      	mov	r0, r5
   1b91c:	f009 fab0 	bl	24e80 <memcpy>
	memcpy(&smp->pkey[BT_PUB_KEY_COORD_LEN], req->y, BT_PUB_KEY_COORD_LEN);
   1b920:	2220      	movs	r2, #32
   1b922:	18b1      	adds	r1, r6, r2
   1b924:	f104 0077 	add.w	r0, r4, #119	; 0x77
   1b928:	f009 faaa 	bl	24e80 <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   1b92c:	4628      	mov	r0, r5
   1b92e:	f7fb f887 	bl	16a40 <bt_pub_key_is_debug>
   1b932:	b940      	cbnz	r0, 1b946 <smp_public_key+0x3a>
	if (!sc_public_key) {
   1b934:	4b1a      	ldr	r3, [pc, #104]	; (1b9a0 <smp_public_key+0x94>)
   1b936:	681d      	ldr	r5, [r3, #0]
   1b938:	bb6d      	cbnz	r5, 1b996 <smp_public_key+0x8a>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   1b93a:	1d20      	adds	r0, r4, #4
   1b93c:	2106      	movs	r1, #6
   1b93e:	f00a ff8b 	bl	26858 <atomic_set_bit>
		return 0;
   1b942:	4628      	mov	r0, r5
   1b944:	e026      	b.n	1b994 <smp_public_key+0x88>
   1b946:	4b17      	ldr	r3, [pc, #92]	; (1b9a4 <smp_public_key+0x98>)
   1b948:	4917      	ldr	r1, [pc, #92]	; (1b9a8 <smp_public_key+0x9c>)
		BT_INFO("Remote is using Debug Public key");
   1b94a:	4818      	ldr	r0, [pc, #96]	; (1b9ac <smp_public_key+0xa0>)
   1b94c:	1ac9      	subs	r1, r1, r3
   1b94e:	08c9      	lsrs	r1, r1, #3
   1b950:	0189      	lsls	r1, r1, #6
   1b952:	f041 0103 	orr.w	r1, r1, #3
   1b956:	f008 fa84 	bl	23e62 <log_0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   1b95a:	210e      	movs	r1, #14
   1b95c:	1d20      	adds	r0, r4, #4
   1b95e:	f00a ff7b 	bl	26858 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   1b962:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	if (!conn->le.keys) {
   1b966:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   1b96a:	b933      	cbnz	r3, 1b97a <smp_public_key+0x6e>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1b96c:	7a28      	ldrb	r0, [r5, #8]
   1b96e:	f105 0188 	add.w	r1, r5, #136	; 0x88
   1b972:	f7fe ff67 	bl	1a844 <bt_keys_get_addr>
   1b976:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   1b97a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   1b97e:	2b00      	cmp	r3, #0
   1b980:	d0d8      	beq.n	1b934 <smp_public_key+0x28>
   1b982:	89da      	ldrh	r2, [r3, #14]
   1b984:	f002 0224 	and.w	r2, r2, #36	; 0x24
   1b988:	2a00      	cmp	r2, #0
   1b98a:	d0d3      	beq.n	1b934 <smp_public_key+0x28>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   1b98c:	7b5b      	ldrb	r3, [r3, #13]
   1b98e:	079b      	lsls	r3, r3, #30
   1b990:	d4d0      	bmi.n	1b934 <smp_public_key+0x28>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1b992:	2003      	movs	r0, #3
}
   1b994:	bd70      	pop	{r4, r5, r6, pc}
	err = smp_public_key_periph(smp);
   1b996:	4620      	mov	r0, r4
}
   1b998:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = smp_public_key_periph(smp);
   1b99c:	f7ff bf02 	b.w	1b7a4 <smp_public_key_periph>
   1b9a0:	2000254c 	.word	0x2000254c
   1b9a4:	00028dd4 	.word	0x00028dd4
   1b9a8:	00028e5c 	.word	0x00028e5c
   1b9ac:	0002be79 	.word	0x0002be79

0001b9b0 <smp_ident_info>:
{
   1b9b0:	b570      	push	{r4, r5, r6, lr}
   1b9b2:	460b      	mov	r3, r1
   1b9b4:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1b9b6:	210d      	movs	r1, #13
   1b9b8:	3004      	adds	r0, #4
   1b9ba:	f00b f81e 	bl	269fa <atomic_test_bit>
   1b9be:	b310      	cbz	r0, 1ba06 <smp_ident_info+0x56>
		struct bt_smp_ident_info *req = (void *)buf->data;
   1b9c0:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1b9c2:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1b9c6:	f103 0588 	add.w	r5, r3, #136	; 0x88
   1b9ca:	7a19      	ldrb	r1, [r3, #8]
   1b9cc:	462a      	mov	r2, r5
   1b9ce:	2002      	movs	r0, #2
   1b9d0:	f00a fe49 	bl	26666 <bt_keys_get_type>
		if (!keys) {
   1b9d4:	b990      	cbnz	r0, 1b9fc <smp_ident_info+0x4c>
   1b9d6:	4a0f      	ldr	r2, [pc, #60]	; (1ba14 <smp_ident_info+0x64>)
   1b9d8:	4c0f      	ldr	r4, [pc, #60]	; (1ba18 <smp_ident_info+0x68>)
			BT_ERR("Unable to get keys for %s",
   1b9da:	4628      	mov	r0, r5
   1b9dc:	1aa4      	subs	r4, r4, r2
   1b9de:	f7f8 fd3d 	bl	1445c <bt_addr_le_str_real>
   1b9e2:	f7f6 fab1 	bl	11f48 <z_log_strdup>
   1b9e6:	08e4      	lsrs	r4, r4, #3
   1b9e8:	01a4      	lsls	r4, r4, #6
   1b9ea:	f044 0401 	orr.w	r4, r4, #1
   1b9ee:	4601      	mov	r1, r0
   1b9f0:	4622      	mov	r2, r4
   1b9f2:	480a      	ldr	r0, [pc, #40]	; (1ba1c <smp_ident_info+0x6c>)
   1b9f4:	f008 fa42 	bl	23e7c <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
   1b9f8:	2008      	movs	r0, #8
}
   1b9fa:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->irk.val, req->irk, 16);
   1b9fc:	2210      	movs	r2, #16
   1b9fe:	4631      	mov	r1, r6
   1ba00:	302a      	adds	r0, #42	; 0x2a
   1ba02:	f009 fa3d 	bl	24e80 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   1ba06:	4620      	mov	r0, r4
   1ba08:	2109      	movs	r1, #9
   1ba0a:	f00a ff25 	bl	26858 <atomic_set_bit>
	return 0;
   1ba0e:	2000      	movs	r0, #0
   1ba10:	e7f3      	b.n	1b9fa <smp_ident_info+0x4a>
   1ba12:	bf00      	nop
   1ba14:	00028dd4 	.word	0x00028dd4
   1ba18:	00028e5c 	.word	0x00028e5c
   1ba1c:	0002be9a 	.word	0x0002be9a

0001ba20 <smp_encrypt_info>:
{
   1ba20:	b570      	push	{r4, r5, r6, lr}
   1ba22:	460b      	mov	r3, r1
   1ba24:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1ba26:	210d      	movs	r1, #13
   1ba28:	3004      	adds	r0, #4
   1ba2a:	f00a ffe6 	bl	269fa <atomic_test_bit>
   1ba2e:	b310      	cbz	r0, 1ba76 <smp_encrypt_info+0x56>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   1ba30:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1ba32:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1ba36:	f103 0588 	add.w	r5, r3, #136	; 0x88
   1ba3a:	7a19      	ldrb	r1, [r3, #8]
   1ba3c:	462a      	mov	r2, r5
   1ba3e:	2004      	movs	r0, #4
   1ba40:	f00a fe11 	bl	26666 <bt_keys_get_type>
		if (!keys) {
   1ba44:	b990      	cbnz	r0, 1ba6c <smp_encrypt_info+0x4c>
   1ba46:	4a0f      	ldr	r2, [pc, #60]	; (1ba84 <smp_encrypt_info+0x64>)
   1ba48:	4c0f      	ldr	r4, [pc, #60]	; (1ba88 <smp_encrypt_info+0x68>)
			BT_ERR("Unable to get keys for %s",
   1ba4a:	4628      	mov	r0, r5
   1ba4c:	1aa4      	subs	r4, r4, r2
   1ba4e:	f7f8 fd05 	bl	1445c <bt_addr_le_str_real>
   1ba52:	f7f6 fa79 	bl	11f48 <z_log_strdup>
   1ba56:	08e4      	lsrs	r4, r4, #3
   1ba58:	01a4      	lsls	r4, r4, #6
   1ba5a:	f044 0401 	orr.w	r4, r4, #1
   1ba5e:	4601      	mov	r1, r0
   1ba60:	4622      	mov	r2, r4
   1ba62:	480a      	ldr	r0, [pc, #40]	; (1ba8c <smp_encrypt_info+0x6c>)
   1ba64:	f008 fa0a 	bl	23e7c <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
   1ba68:	2008      	movs	r0, #8
}
   1ba6a:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
   1ba6c:	2210      	movs	r2, #16
   1ba6e:	4631      	mov	r1, r6
   1ba70:	301a      	adds	r0, #26
   1ba72:	f009 fa05 	bl	24e80 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   1ba76:	4620      	mov	r0, r4
   1ba78:	2107      	movs	r1, #7
   1ba7a:	f00a feed 	bl	26858 <atomic_set_bit>
	return 0;
   1ba7e:	2000      	movs	r0, #0
   1ba80:	e7f3      	b.n	1ba6a <smp_encrypt_info+0x4a>
   1ba82:	bf00      	nop
   1ba84:	00028dd4 	.word	0x00028dd4
   1ba88:	00028e5c 	.word	0x00028e5c
   1ba8c:	0002be9a 	.word	0x0002be9a

0001ba90 <smp_pairing_req>:
{
   1ba90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
   1ba94:	688d      	ldr	r5, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1ba96:	78eb      	ldrb	r3, [r5, #3]
   1ba98:	3b07      	subs	r3, #7
   1ba9a:	2b09      	cmp	r3, #9
{
   1ba9c:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1ba9e:	d904      	bls.n	1baaa <smp_pairing_req+0x1a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   1baa0:	2506      	movs	r5, #6
}
   1baa2:	4628      	mov	r0, r5
   1baa4:	b002      	add	sp, #8
   1baa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_conn *conn = smp->chan.chan.conn;
   1baaa:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
	if (!conn->le.keys) {
   1baae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   1bab2:	b15b      	cbz	r3, 1bacc <smp_pairing_req+0x3c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1bab4:	1d26      	adds	r6, r4, #4
   1bab6:	210f      	movs	r1, #15
   1bab8:	4630      	mov	r0, r6
   1baba:	f00a ff9e 	bl	269fa <atomic_test_bit>
   1babe:	b980      	cbnz	r0, 1bae2 <smp_pairing_req+0x52>
		int ret = smp_init(smp);
   1bac0:	4620      	mov	r0, r4
   1bac2:	f7ff fcd7 	bl	1b474 <smp_init>
		if (ret) {
   1bac6:	b160      	cbz	r0, 1bae2 <smp_pairing_req+0x52>
			return ret;
   1bac8:	b2c5      	uxtb	r5, r0
   1baca:	e7ea      	b.n	1baa2 <smp_pairing_req+0x12>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1bacc:	7a38      	ldrb	r0, [r7, #8]
   1bace:	f107 0188 	add.w	r1, r7, #136	; 0x88
   1bad2:	f7fe feb7 	bl	1a844 <bt_keys_get_addr>
   1bad6:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
		if (!conn->le.keys) {
   1bada:	2800      	cmp	r0, #0
   1badc:	d1ea      	bne.n	1bab4 <smp_pairing_req+0x24>
	switch (sec) {
   1bade:	2508      	movs	r5, #8
   1bae0:	e7df      	b.n	1baa2 <smp_pairing_req+0x12>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1bae2:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
   1bae4:	2206      	movs	r2, #6
   1bae6:	4629      	mov	r1, r5
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1bae8:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
   1baea:	f104 000a 	add.w	r0, r4, #10
   1baee:	f009 f9c7 	bl	24e80 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   1baf2:	2302      	movs	r3, #2
   1baf4:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(conn, req->auth_req);
   1baf6:	78a8      	ldrb	r0, [r5, #2]
   1baf8:	f7ff fc5e 	bl	1b3b8 <get_auth.isra.0>
   1bafc:	74e0      	strb	r0, [r4, #19]
   1bafe:	4680      	mov	r8, r0
	rsp->io_capability = get_io_capa();
   1bb00:	f7ff fbce 	bl	1b2a0 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1bb04:	4ba5      	ldr	r3, [pc, #660]	; (1bd9c <smp_pairing_req+0x30c>)
	rsp->io_capability = get_io_capa();
   1bb06:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1bb08:	781b      	ldrb	r3, [r3, #0]
   1bb0a:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   1bb0c:	2310      	movs	r3, #16
   1bb0e:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   1bb10:	792b      	ldrb	r3, [r5, #4]
   1bb12:	f003 0307 	and.w	r3, r3, #7
   1bb16:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   1bb18:	796b      	ldrb	r3, [r5, #5]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1bb1a:	f018 0f08 	tst.w	r8, #8
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   1bb1e:	f003 0307 	and.w	r3, r3, #7
   1bb22:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1bb24:	d00e      	beq.n	1bb44 <smp_pairing_req+0xb4>
   1bb26:	78ab      	ldrb	r3, [r5, #2]
   1bb28:	0719      	lsls	r1, r3, #28
   1bb2a:	d50b      	bpl.n	1bb44 <smp_pairing_req+0xb4>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   1bb2c:	2105      	movs	r1, #5
   1bb2e:	4630      	mov	r0, r6
   1bb30:	f00a fe92 	bl	26858 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   1bb34:	7d63      	ldrb	r3, [r4, #21]
   1bb36:	f003 0306 	and.w	r3, r3, #6
   1bb3a:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   1bb3c:	7da3      	ldrb	r3, [r4, #22]
   1bb3e:	f003 0306 	and.w	r3, r3, #6
   1bb42:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   1bb44:	7ce3      	ldrb	r3, [r4, #19]
   1bb46:	069a      	lsls	r2, r3, #26
   1bb48:	d506      	bpl.n	1bb58 <smp_pairing_req+0xc8>
   1bb4a:	78ab      	ldrb	r3, [r5, #2]
   1bb4c:	069b      	lsls	r3, r3, #26
   1bb4e:	d503      	bpl.n	1bb58 <smp_pairing_req+0xc8>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   1bb50:	2114      	movs	r1, #20
   1bb52:	4630      	mov	r0, r6
   1bb54:	f00a fe80 	bl	26858 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   1bb58:	7da3      	ldrb	r3, [r4, #22]
   1bb5a:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   1bb5e:	7d63      	ldrb	r3, [r4, #21]
   1bb60:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   1bb64:	7ce3      	ldrb	r3, [r4, #19]
   1bb66:	07d8      	lsls	r0, r3, #31
   1bb68:	d506      	bpl.n	1bb78 <smp_pairing_req+0xe8>
   1bb6a:	78ab      	ldrb	r3, [r5, #2]
   1bb6c:	07d9      	lsls	r1, r3, #31
   1bb6e:	d503      	bpl.n	1bb78 <smp_pairing_req+0xe8>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   1bb70:	210d      	movs	r1, #13
   1bb72:	4630      	mov	r0, r6
   1bb74:	f00a fe70 	bl	26858 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   1bb78:	2103      	movs	r1, #3
   1bb7a:	4630      	mov	r0, r6
   1bb7c:	f00a fe6c 	bl	26858 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1bb80:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
   1bb82:	782d      	ldrb	r5, [r5, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1bb84:	f00a ff39 	bl	269fa <atomic_test_bit>
   1bb88:	bb28      	cbnz	r0, 1bbd6 <smp_pairing_req+0x146>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1bb8a:	2d04      	cmp	r5, #4
   1bb8c:	d81a      	bhi.n	1bbc4 <smp_pairing_req+0x134>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1bb8e:	7ca2      	ldrb	r2, [r4, #18]
   1bb90:	7ae3      	ldrb	r3, [r4, #11]
   1bb92:	4013      	ands	r3, r2
   1bb94:	07da      	lsls	r2, r3, #31
   1bb96:	d437      	bmi.n	1bc08 <smp_pairing_req+0x178>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1bb98:	7b20      	ldrb	r0, [r4, #12]
   1bb9a:	7ce3      	ldrb	r3, [r4, #19]
   1bb9c:	4318      	orrs	r0, r3
   1bb9e:	f010 0004 	ands.w	r0, r0, #4
   1bba2:	d00f      	beq.n	1bbc4 <smp_pairing_req+0x134>
	method = gen_method_legacy[remote_io][get_io_capa()];
   1bba4:	f7ff fb7c 	bl	1b2a0 <get_io_capa>
   1bba8:	4b7d      	ldr	r3, [pc, #500]	; (1bda0 <smp_pairing_req+0x310>)
   1bbaa:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1bbae:	441d      	add	r5, r3
   1bbb0:	5c28      	ldrb	r0, [r5, r0]
	if (method == PASSKEY_ROLE) {
   1bbb2:	2804      	cmp	r0, #4
   1bbb4:	d106      	bne.n	1bbc4 <smp_pairing_req+0x134>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1bbb6:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   1bbba:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_INPUT;
   1bbbc:	2b00      	cmp	r3, #0
   1bbbe:	bf0c      	ite	eq
   1bbc0:	2002      	moveq	r0, #2
   1bbc2:	2001      	movne	r0, #1
	smp->method = get_pair_method(smp, req->io_capability);
   1bbc4:	7220      	strb	r0, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   1bbc6:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
   1bbca:	4620      	mov	r0, r4
   1bbcc:	f00a ff1e 	bl	26a0c <update_keys_check>
   1bbd0:	bb00      	cbnz	r0, 1bc14 <smp_pairing_req+0x184>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1bbd2:	2503      	movs	r5, #3
   1bbd4:	e765      	b.n	1baa2 <smp_pairing_req+0x12>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   1bbd6:	7b20      	ldrb	r0, [r4, #12]
   1bbd8:	7ce2      	ldrb	r2, [r4, #19]
   1bbda:	ea00 0302 	and.w	r3, r0, r2
   1bbde:	071b      	lsls	r3, r3, #28
   1bbe0:	d504      	bpl.n	1bbec <smp_pairing_req+0x15c>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1bbe2:	7ca1      	ldrb	r1, [r4, #18]
   1bbe4:	7ae3      	ldrb	r3, [r4, #11]
   1bbe6:	430b      	orrs	r3, r1
   1bbe8:	07d9      	lsls	r1, r3, #31
   1bbea:	d40f      	bmi.n	1bc0c <smp_pairing_req+0x17c>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1bbec:	2d04      	cmp	r5, #4
   1bbee:	d80f      	bhi.n	1bc10 <smp_pairing_req+0x180>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1bbf0:	4310      	orrs	r0, r2
   1bbf2:	f010 0004 	ands.w	r0, r0, #4
   1bbf6:	d0e5      	beq.n	1bbc4 <smp_pairing_req+0x134>
	return gen_method_sc[remote_io][get_io_capa()];
   1bbf8:	f7ff fb52 	bl	1b2a0 <get_io_capa>
   1bbfc:	4b69      	ldr	r3, [pc, #420]	; (1bda4 <smp_pairing_req+0x314>)
   1bbfe:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1bc02:	441d      	add	r5, r3
   1bc04:	5c28      	ldrb	r0, [r5, r0]
   1bc06:	e7dd      	b.n	1bbc4 <smp_pairing_req+0x134>
		return LEGACY_OOB;
   1bc08:	2006      	movs	r0, #6
   1bc0a:	e7db      	b.n	1bbc4 <smp_pairing_req+0x134>
			return LE_SC_OOB;
   1bc0c:	2005      	movs	r0, #5
   1bc0e:	e7d9      	b.n	1bbc4 <smp_pairing_req+0x134>
		return JUST_WORKS;
   1bc10:	2000      	movs	r0, #0
   1bc12:	e7d7      	b.n	1bbc4 <smp_pairing_req+0x134>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   1bc14:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   1bc18:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   1bc1a:	2b03      	cmp	r3, #3
   1bc1c:	d034      	beq.n	1bc88 <smp_pairing_req+0x1f8>
   1bc1e:	d822      	bhi.n	1bc66 <smp_pairing_req+0x1d6>
   1bc20:	3b01      	subs	r3, #1
   1bc22:	2b01      	cmp	r3, #1
   1bc24:	f63f af5b 	bhi.w	1bade <smp_pairing_req+0x4e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1bc28:	2105      	movs	r1, #5
   1bc2a:	4630      	mov	r0, r6
   1bc2c:	f00a fee5 	bl	269fa <atomic_test_bit>
   1bc30:	2800      	cmp	r0, #0
   1bc32:	f040 80c5 	bne.w	1bdc0 <smp_pairing_req+0x330>
	struct bt_conn *conn = smp->chan.chan.conn;
   1bc36:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1bc3a:	f105 0188 	add.w	r1, r5, #136	; 0x88
   1bc3e:	7a28      	ldrb	r0, [r5, #8]
   1bc40:	f7fe fec4 	bl	1a9cc <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   1bc44:	7a21      	ldrb	r1, [r4, #8]
   1bc46:	b318      	cbz	r0, 1bc90 <smp_pairing_req+0x200>
   1bc48:	7b43      	ldrb	r3, [r0, #13]
   1bc4a:	07db      	lsls	r3, r3, #31
   1bc4c:	d520      	bpl.n	1bc90 <smp_pairing_req+0x200>
   1bc4e:	b9f9      	cbnz	r1, 1bc90 <smp_pairing_req+0x200>
   1bc50:	4b55      	ldr	r3, [pc, #340]	; (1bda8 <smp_pairing_req+0x318>)
   1bc52:	4956      	ldr	r1, [pc, #344]	; (1bdac <smp_pairing_req+0x31c>)
		BT_ERR("JustWorks failed, authenticated keys present");
   1bc54:	4856      	ldr	r0, [pc, #344]	; (1bdb0 <smp_pairing_req+0x320>)
   1bc56:	1ac9      	subs	r1, r1, r3
   1bc58:	08c9      	lsrs	r1, r1, #3
   1bc5a:	0189      	lsls	r1, r1, #6
   1bc5c:	f041 0101 	orr.w	r1, r1, #1
   1bc60:	f008 f8ff 	bl	23e62 <log_0>
	if (ret) {
   1bc64:	e73b      	b.n	1bade <smp_pairing_req+0x4e>
	switch (sec) {
   1bc66:	2b04      	cmp	r3, #4
   1bc68:	f47f af39 	bne.w	1bade <smp_pairing_req+0x4e>
	return MIN(req->max_key_size, rsp->max_key_size);
   1bc6c:	7d23      	ldrb	r3, [r4, #20]
   1bc6e:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   1bc70:	4293      	cmp	r3, r2
   1bc72:	bf28      	it	cs
   1bc74:	4613      	movcs	r3, r2
   1bc76:	2b10      	cmp	r3, #16
   1bc78:	f47f af12 	bne.w	1baa0 <smp_pairing_req+0x10>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1bc7c:	2105      	movs	r1, #5
   1bc7e:	4630      	mov	r0, r6
   1bc80:	f00a febb 	bl	269fa <atomic_test_bit>
   1bc84:	2800      	cmp	r0, #0
   1bc86:	d0a4      	beq.n	1bbd2 <smp_pairing_req+0x142>
		if (smp->method == JUST_WORKS) {
   1bc88:	7a23      	ldrb	r3, [r4, #8]
   1bc8a:	2b00      	cmp	r3, #0
   1bc8c:	d1cc      	bne.n	1bc28 <smp_pairing_req+0x198>
   1bc8e:	e7a0      	b.n	1bbd2 <smp_pairing_req+0x142>
	switch (smp->method) {
   1bc90:	2906      	cmp	r1, #6
   1bc92:	d869      	bhi.n	1bd68 <smp_pairing_req+0x2d8>
   1bc94:	e8df f001 	tbb	[pc, r1]
   1bc98:	68335e1b 	.word	0x68335e1b
   1bc9c:	6868      	.short	0x6868
   1bc9e:	04          	.byte	0x04
   1bc9f:	00          	.byte	0x00
		if (bt_auth && bt_auth->oob_data_request) {
   1bca0:	4d44      	ldr	r5, [pc, #272]	; (1bdb4 <smp_pairing_req+0x324>)
   1bca2:	682b      	ldr	r3, [r5, #0]
   1bca4:	2b00      	cmp	r3, #0
   1bca6:	d06a      	beq.n	1bd7e <smp_pairing_req+0x2ee>
   1bca8:	68db      	ldr	r3, [r3, #12]
   1bcaa:	2b00      	cmp	r3, #0
   1bcac:	d067      	beq.n	1bd7e <smp_pairing_req+0x2ee>
			struct bt_conn_oob_info info = {
   1bcae:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1bcb0:	210a      	movs	r1, #10
   1bcb2:	4630      	mov	r0, r6
			struct bt_conn_oob_info info = {
   1bcb4:	f8ad 3004 	strh.w	r3, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1bcb8:	f00a fdce 	bl	26858 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   1bcbc:	682b      	ldr	r3, [r5, #0]
   1bcbe:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1bcc2:	68db      	ldr	r3, [r3, #12]
   1bcc4:	a901      	add	r1, sp, #4
   1bcc6:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1bcc8:	7a23      	ldrb	r3, [r4, #8]
   1bcca:	2b00      	cmp	r3, #0
   1bccc:	d159      	bne.n	1bd82 <smp_pairing_req+0x2f2>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1bcce:	210f      	movs	r1, #15
   1bcd0:	4630      	mov	r0, r6
   1bcd2:	f00a fe92 	bl	269fa <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1bcd6:	4605      	mov	r5, r0
   1bcd8:	2800      	cmp	r0, #0
   1bcda:	d152      	bne.n	1bd82 <smp_pairing_req+0x2f2>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1bcdc:	4f35      	ldr	r7, [pc, #212]	; (1bdb4 <smp_pairing_req+0x324>)
   1bcde:	683b      	ldr	r3, [r7, #0]
   1bce0:	2b00      	cmp	r3, #0
   1bce2:	d04e      	beq.n	1bd82 <smp_pairing_req+0x2f2>
	    bt_auth && bt_auth->pairing_confirm) {
   1bce4:	695b      	ldr	r3, [r3, #20]
   1bce6:	2b00      	cmp	r3, #0
   1bce8:	d04b      	beq.n	1bd82 <smp_pairing_req+0x2f2>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1bcea:	4630      	mov	r0, r6
   1bcec:	210a      	movs	r1, #10
   1bcee:	f00a fdb3 	bl	26858 <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
   1bcf2:	683b      	ldr	r3, [r7, #0]
   1bcf4:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1bcf8:	695b      	ldr	r3, [r3, #20]
		bt_auth->pairing_confirm(conn);
   1bcfa:	4798      	blx	r3
		return 0;
   1bcfc:	e6d1      	b.n	1baa2 <smp_pairing_req+0x12>
			if (bt_rand(&passkey, sizeof(passkey))) {
   1bcfe:	2104      	movs	r1, #4
   1bd00:	eb0d 0001 	add.w	r0, sp, r1
   1bd04:	f003 f874 	bl	1edf0 <bt_rand>
   1bd08:	2800      	cmp	r0, #0
   1bd0a:	f47f aee8 	bne.w	1bade <smp_pairing_req+0x4e>
			passkey %= 1000000;
   1bd0e:	9901      	ldr	r1, [sp, #4]
   1bd10:	4a29      	ldr	r2, [pc, #164]	; (1bdb8 <smp_pairing_req+0x328>)
		if (bt_auth && bt_auth->passkey_display) {
   1bd12:	4f28      	ldr	r7, [pc, #160]	; (1bdb4 <smp_pairing_req+0x324>)
			passkey %= 1000000;
   1bd14:	fbb1 f3f2 	udiv	r3, r1, r2
   1bd18:	fb02 1313 	mls	r3, r2, r3, r1
   1bd1c:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
   1bd1e:	683b      	ldr	r3, [r7, #0]
   1bd20:	b153      	cbz	r3, 1bd38 <smp_pairing_req+0x2a8>
   1bd22:	681b      	ldr	r3, [r3, #0]
   1bd24:	b143      	cbz	r3, 1bd38 <smp_pairing_req+0x2a8>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1bd26:	210b      	movs	r1, #11
   1bd28:	4630      	mov	r0, r6
   1bd2a:	f00a fd95 	bl	26858 <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
   1bd2e:	683b      	ldr	r3, [r7, #0]
   1bd30:	9901      	ldr	r1, [sp, #4]
   1bd32:	681b      	ldr	r3, [r3, #0]
   1bd34:	4628      	mov	r0, r5
   1bd36:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   1bd38:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
   1bd3a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	dst[1] = val >> 8;
   1bd3e:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   1bd42:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   1bd44:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   1bd48:	0a1b      	lsrs	r3, r3, #8
   1bd4a:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   1bd4e:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   1bd52:	e7b9      	b.n	1bcc8 <smp_pairing_req+0x238>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1bd54:	4630      	mov	r0, r6
   1bd56:	210a      	movs	r1, #10
   1bd58:	f00a fd7e 	bl	26858 <atomic_set_bit>
		bt_auth->passkey_entry(conn);
   1bd5c:	4b15      	ldr	r3, [pc, #84]	; (1bdb4 <smp_pairing_req+0x324>)
   1bd5e:	681b      	ldr	r3, [r3, #0]
   1bd60:	4628      	mov	r0, r5
   1bd62:	685b      	ldr	r3, [r3, #4]
   1bd64:	4798      	blx	r3
	if (ret) {
   1bd66:	e7af      	b.n	1bcc8 <smp_pairing_req+0x238>
   1bd68:	4b0f      	ldr	r3, [pc, #60]	; (1bda8 <smp_pairing_req+0x318>)
   1bd6a:	4a10      	ldr	r2, [pc, #64]	; (1bdac <smp_pairing_req+0x31c>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1bd6c:	4813      	ldr	r0, [pc, #76]	; (1bdbc <smp_pairing_req+0x32c>)
   1bd6e:	1ad2      	subs	r2, r2, r3
   1bd70:	08d2      	lsrs	r2, r2, #3
   1bd72:	0192      	lsls	r2, r2, #6
   1bd74:	f042 0201 	orr.w	r2, r2, #1
   1bd78:	f008 f880 	bl	23e7c <log_1>
	if (ret) {
   1bd7c:	e6af      	b.n	1bade <smp_pairing_req+0x4e>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1bd7e:	2502      	movs	r5, #2
   1bd80:	e68f      	b.n	1baa2 <smp_pairing_req+0x12>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1bd82:	2103      	movs	r1, #3
   1bd84:	4620      	mov	r0, r4
   1bd86:	f00a fd67 	bl	26858 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1bd8a:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1bd8c:	4620      	mov	r0, r4
   1bd8e:	f00a fd63 	bl	26858 <atomic_set_bit>
	return send_pairing_rsp(smp);
   1bd92:	f00a fe94 	bl	26abe <send_pairing_rsp>
   1bd96:	4605      	mov	r5, r0
   1bd98:	e683      	b.n	1baa2 <smp_pairing_req+0x12>
   1bd9a:	bf00      	nop
   1bd9c:	200029a0 	.word	0x200029a0
   1bda0:	0002c19a 	.word	0x0002c19a
   1bda4:	0002c1b3 	.word	0x0002c1b3
   1bda8:	00028dd4 	.word	0x00028dd4
   1bdac:	00028e5c 	.word	0x00028e5c
   1bdb0:	0002beb4 	.word	0x0002beb4
   1bdb4:	20002410 	.word	0x20002410
   1bdb8:	000f4240 	.word	0x000f4240
   1bdbc:	0002bde6 	.word	0x0002bde6
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1bdc0:	7a25      	ldrb	r5, [r4, #8]
   1bdc2:	b9a5      	cbnz	r5, 1bdee <smp_pairing_req+0x35e>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1bdc4:	210f      	movs	r1, #15
   1bdc6:	4630      	mov	r0, r6
   1bdc8:	f00a fe17 	bl	269fa <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1bdcc:	b978      	cbnz	r0, 1bdee <smp_pairing_req+0x35e>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1bdce:	f8df 8024 	ldr.w	r8, [pc, #36]	; 1bdf4 <smp_pairing_req+0x364>
   1bdd2:	f8d8 3000 	ldr.w	r3, [r8]
   1bdd6:	b153      	cbz	r3, 1bdee <smp_pairing_req+0x35e>
	    bt_auth && bt_auth->pairing_confirm) {
   1bdd8:	695b      	ldr	r3, [r3, #20]
   1bdda:	b143      	cbz	r3, 1bdee <smp_pairing_req+0x35e>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1bddc:	4630      	mov	r0, r6
   1bdde:	210a      	movs	r1, #10
   1bde0:	f00a fd3a 	bl	26858 <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
   1bde4:	f8d8 3000 	ldr.w	r3, [r8]
   1bde8:	4638      	mov	r0, r7
   1bdea:	695b      	ldr	r3, [r3, #20]
   1bdec:	e785      	b.n	1bcfa <smp_pairing_req+0x26a>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1bdee:	210c      	movs	r1, #12
   1bdf0:	e7cc      	b.n	1bd8c <smp_pairing_req+0x2fc>
   1bdf2:	bf00      	nop
   1bdf4:	20002410 	.word	0x20002410

0001bdf8 <bt_smp_connected>:
{
   1bdf8:	b510      	push	{r4, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
   1bdfa:	4905      	ldr	r1, [pc, #20]	; (1be10 <bt_smp_connected+0x18>)
   1bdfc:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
   1be00:	30e8      	adds	r0, #232	; 0xe8
   1be02:	f00c fd44 	bl	2888e <k_work_init_delayable>
	smp_reset(smp);
   1be06:	4620      	mov	r0, r4
}
   1be08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
   1be0c:	f00a beb1 	b.w	26b72 <smp_reset>
   1be10:	0001ccb1 	.word	0x0001ccb1

0001be14 <smp_pairing_confirm>:
{
   1be14:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   1be16:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1be18:	1d05      	adds	r5, r0, #4
{
   1be1a:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1be1c:	210b      	movs	r1, #11
   1be1e:	4628      	mov	r0, r5
   1be20:	f00a fdbd 	bl	2699e <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   1be24:	4631      	mov	r1, r6
   1be26:	2210      	movs	r2, #16
   1be28:	f104 0017 	add.w	r0, r4, #23
   1be2c:	f009 f828 	bl	24e80 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1be30:	2105      	movs	r1, #5
   1be32:	4628      	mov	r0, r5
   1be34:	f00a fde1 	bl	269fa <atomic_test_bit>
   1be38:	b920      	cbnz	r0, 1be44 <smp_pairing_confirm+0x30>
		return legacy_pairing_confirm(smp);
   1be3a:	4620      	mov	r0, r4
}
   1be3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
   1be40:	f00a bf15 	b.w	26c6e <legacy_pairing_confirm>
	switch (smp->method) {
   1be44:	7a21      	ldrb	r1, [r4, #8]
   1be46:	2901      	cmp	r1, #1
   1be48:	d009      	beq.n	1be5e <smp_pairing_confirm+0x4a>
   1be4a:	2902      	cmp	r1, #2
   1be4c:	d113      	bne.n	1be76 <smp_pairing_confirm+0x62>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1be4e:	4620      	mov	r0, r4
   1be50:	2104      	movs	r1, #4
   1be52:	f00a fd01 	bl	26858 <atomic_set_bit>
}
   1be56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   1be5a:	f7ff bb35 	b.w	1b4c8 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1be5e:	210a      	movs	r1, #10
   1be60:	4628      	mov	r0, r5
   1be62:	f00a fdca 	bl	269fa <atomic_test_bit>
   1be66:	2800      	cmp	r0, #0
   1be68:	d0f1      	beq.n	1be4e <smp_pairing_confirm+0x3a>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1be6a:	4628      	mov	r0, r5
   1be6c:	2100      	movs	r1, #0
   1be6e:	f00a fcf3 	bl	26858 <atomic_set_bit>
			return 0;
   1be72:	2000      	movs	r0, #0
}
   1be74:	bd70      	pop	{r4, r5, r6, pc}
   1be76:	4b06      	ldr	r3, [pc, #24]	; (1be90 <smp_pairing_confirm+0x7c>)
   1be78:	4a06      	ldr	r2, [pc, #24]	; (1be94 <smp_pairing_confirm+0x80>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1be7a:	4807      	ldr	r0, [pc, #28]	; (1be98 <smp_pairing_confirm+0x84>)
   1be7c:	1ad2      	subs	r2, r2, r3
   1be7e:	08d2      	lsrs	r2, r2, #3
   1be80:	0192      	lsls	r2, r2, #6
   1be82:	f042 0201 	orr.w	r2, r2, #1
   1be86:	f007 fff9 	bl	23e7c <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   1be8a:	2008      	movs	r0, #8
   1be8c:	e7f2      	b.n	1be74 <smp_pairing_confirm+0x60>
   1be8e:	bf00      	nop
   1be90:	00028dd4 	.word	0x00028dd4
   1be94:	00028e5c 	.word	0x00028e5c
   1be98:	0002bde6 	.word	0x0002bde6

0001be9c <smp_pairing_random>:
{
   1be9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bea0:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1bea2:	f100 0737 	add.w	r7, r0, #55	; 0x37
   1bea6:	6889      	ldr	r1, [r1, #8]
{
   1bea8:	b09e      	sub	sp, #120	; 0x78
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1beaa:	2210      	movs	r2, #16
   1beac:	4638      	mov	r0, r7
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1beae:	1d26      	adds	r6, r4, #4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1beb0:	f008 ffe6 	bl	24e80 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1beb4:	2105      	movs	r1, #5
   1beb6:	4630      	mov	r0, r6
   1beb8:	f00a fd9f 	bl	269fa <atomic_test_bit>
   1bebc:	2800      	cmp	r0, #0
   1bebe:	d147      	bne.n	1bf50 <smp_pairing_random+0xb4>
	struct bt_conn *conn = smp->chan.chan.conn;
   1bec0:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1bec4:	f104 0847 	add.w	r8, r4, #71	; 0x47
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1bec8:	f103 0296 	add.w	r2, r3, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1becc:	ad0a      	add	r5, sp, #40	; 0x28
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1bece:	338f      	adds	r3, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1bed0:	9201      	str	r2, [sp, #4]
   1bed2:	9300      	str	r3, [sp, #0]
   1bed4:	9502      	str	r5, [sp, #8]
   1bed6:	f104 0310 	add.w	r3, r4, #16
   1beda:	f104 0209 	add.w	r2, r4, #9
   1bede:	4639      	mov	r1, r7
   1bee0:	4640      	mov	r0, r8
   1bee2:	f00a fe69 	bl	26bb8 <smp_c1>
	if (err) {
   1bee6:	bb18      	cbnz	r0, 1bf30 <smp_pairing_random+0x94>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   1bee8:	2210      	movs	r2, #16
   1beea:	4629      	mov	r1, r5
   1beec:	f104 0017 	add.w	r0, r4, #23
   1bef0:	f008 ffb6 	bl	24e60 <memcmp>
   1bef4:	2800      	cmp	r0, #0
   1bef6:	f040 8095 	bne.w	1c024 <smp_pairing_random+0x188>
	memcpy(out, r2, 8);
   1befa:	2208      	movs	r2, #8
   1befc:	4639      	mov	r1, r7
   1befe:	4628      	mov	r0, r5
   1bf00:	f008 ffbe 	bl	24e80 <memcpy>
	memcpy(out + 8, r1, 8);
   1bf04:	2208      	movs	r2, #8
   1bf06:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1bf0a:	a80c      	add	r0, sp, #48	; 0x30
   1bf0c:	f008 ffb8 	bl	24e80 <memcpy>
	return bt_encrypt_le(k, out, out);
   1bf10:	462a      	mov	r2, r5
   1bf12:	4629      	mov	r1, r5
   1bf14:	4640      	mov	r0, r8
   1bf16:	f00b fe60 	bl	27bda <bt_encrypt_le>
		if (err) {
   1bf1a:	b158      	cbz	r0, 1bf34 <smp_pairing_random+0x98>
   1bf1c:	4973      	ldr	r1, [pc, #460]	; (1c0ec <smp_pairing_random+0x250>)
   1bf1e:	4b74      	ldr	r3, [pc, #464]	; (1c0f0 <smp_pairing_random+0x254>)
			BT_ERR("Calculate STK failed");
   1bf20:	4874      	ldr	r0, [pc, #464]	; (1c0f4 <smp_pairing_random+0x258>)
   1bf22:	1ac9      	subs	r1, r1, r3
   1bf24:	08c9      	lsrs	r1, r1, #3
   1bf26:	0189      	lsls	r1, r1, #6
   1bf28:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Calculate confirm failed");
   1bf2c:	f007 ff99 	bl	23e62 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
   1bf30:	2508      	movs	r5, #8
   1bf32:	e078      	b.n	1c026 <smp_pairing_random+0x18a>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
   1bf34:	4629      	mov	r1, r5
   1bf36:	2210      	movs	r2, #16
   1bf38:	4640      	mov	r0, r8
   1bf3a:	f008 ffa1 	bl	24e80 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1bf3e:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1bf40:	4630      	mov	r0, r6
   1bf42:	f00a fc89 	bl	26858 <atomic_set_bit>
	return smp_send_pairing_random(smp);
   1bf46:	4620      	mov	r0, r4
   1bf48:	f00a fda0 	bl	26a8c <smp_send_pairing_random>
   1bf4c:	4605      	mov	r5, r0
   1bf4e:	e06a      	b.n	1c026 <smp_pairing_random+0x18a>
	switch (smp->method) {
   1bf50:	7a21      	ldrb	r1, [r4, #8]
   1bf52:	2905      	cmp	r1, #5
   1bf54:	f200 80a9 	bhi.w	1c0aa <smp_pairing_random+0x20e>
   1bf58:	e8df f001 	tbb	[pc, r1]
   1bf5c:	0341413b 	.word	0x0341413b
   1bf60:	8ba7      	.short	0x8ba7
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   1bf62:	4b65      	ldr	r3, [pc, #404]	; (1c0f8 <smp_pairing_random+0x25c>)
   1bf64:	681d      	ldr	r5, [r3, #0]
	sys_memcpy_swap(m, u, 32);
   1bf66:	2220      	movs	r2, #32
   1bf68:	f104 0157 	add.w	r1, r4, #87	; 0x57
   1bf6c:	a80a      	add	r0, sp, #40	; 0x28
   1bf6e:	f00a fc5a 	bl	26826 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1bf72:	2220      	movs	r2, #32
   1bf74:	4629      	mov	r1, r5
   1bf76:	a812      	add	r0, sp, #72	; 0x48
   1bf78:	f00a fc55 	bl	26826 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   1bf7c:	2210      	movs	r2, #16
   1bf7e:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1bf82:	a81a      	add	r0, sp, #104	; 0x68
   1bf84:	f00a fc4f 	bl	26826 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   1bf88:	2210      	movs	r2, #16
   1bf8a:	4639      	mov	r1, r7
   1bf8c:	a806      	add	r0, sp, #24
   1bf8e:	f00a fc4a 	bl	26826 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   1bf92:	ab06      	add	r3, sp, #24
   1bf94:	2250      	movs	r2, #80	; 0x50
   1bf96:	a90a      	add	r1, sp, #40	; 0x28
   1bf98:	4618      	mov	r0, r3
   1bf9a:	f00a fc71 	bl	26880 <bt_smp_aes_cmac>
	if (err) {
   1bf9e:	2800      	cmp	r0, #0
   1bfa0:	d1c6      	bne.n	1bf30 <smp_pairing_random+0x94>
	memcpy(passkey, xs + 12, 4);
   1bfa2:	2204      	movs	r2, #4
   1bfa4:	a909      	add	r1, sp, #36	; 0x24
   1bfa6:	a805      	add	r0, sp, #20
   1bfa8:	f008 ff6a 	bl	24e80 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1bfac:	9b05      	ldr	r3, [sp, #20]
   1bfae:	4953      	ldr	r1, [pc, #332]	; (1c0fc <smp_pairing_random+0x260>)
   1bfb0:	ba1b      	rev	r3, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1bfb2:	4630      	mov	r0, r6
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1bfb4:	fbb3 f2f1 	udiv	r2, r3, r1
   1bfb8:	fb01 3312 	mls	r3, r1, r2, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1bfbc:	210a      	movs	r1, #10
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1bfbe:	9305      	str	r3, [sp, #20]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1bfc0:	f00a fc4a 	bl	26858 <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   1bfc4:	4b4e      	ldr	r3, [pc, #312]	; (1c100 <smp_pairing_random+0x264>)
   1bfc6:	9905      	ldr	r1, [sp, #20]
   1bfc8:	681b      	ldr	r3, [r3, #0]
   1bfca:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1bfce:	689b      	ldr	r3, [r3, #8]
   1bfd0:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1bfd2:	210d      	movs	r1, #13
   1bfd4:	4620      	mov	r0, r4
   1bfd6:	f00a fc3f 	bl	26858 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1bfda:	2110      	movs	r1, #16
   1bfdc:	e7b0      	b.n	1bf40 <smp_pairing_random+0xa4>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1bfde:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   1bfe2:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1bfe6:	4944      	ldr	r1, [pc, #272]	; (1c0f8 <smp_pairing_random+0x25c>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1bfe8:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1bfea:	ad0a      	add	r5, sp, #40	; 0x28
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1bfec:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1bff0:	9500      	str	r5, [sp, #0]
   1bff2:	6809      	ldr	r1, [r1, #0]
   1bff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1bff8:	463a      	mov	r2, r7
   1bffa:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1bffe:	f00a fc5b 	bl	268b8 <smp_f4>
   1c002:	b140      	cbz	r0, 1c016 <smp_pairing_random+0x17a>
   1c004:	4939      	ldr	r1, [pc, #228]	; (1c0ec <smp_pairing_random+0x250>)
   1c006:	4b3a      	ldr	r3, [pc, #232]	; (1c0f0 <smp_pairing_random+0x254>)
		BT_ERR("Calculate confirm failed");
   1c008:	483e      	ldr	r0, [pc, #248]	; (1c104 <smp_pairing_random+0x268>)
   1c00a:	1ac9      	subs	r1, r1, r3
   1c00c:	08c9      	lsrs	r1, r1, #3
   1c00e:	0189      	lsls	r1, r1, #6
   1c010:	f041 0101 	orr.w	r1, r1, #1
   1c014:	e78a      	b.n	1bf2c <smp_pairing_random+0x90>
	if (memcmp(smp->pcnf, cfm, 16)) {
   1c016:	2210      	movs	r2, #16
   1c018:	4629      	mov	r1, r5
   1c01a:	f104 0017 	add.w	r0, r4, #23
   1c01e:	f008 ff1f 	bl	24e60 <memcmp>
   1c022:	b120      	cbz	r0, 1c02e <smp_pairing_random+0x192>
		return BT_SMP_ERR_CONFIRM_FAILED;
   1c024:	2504      	movs	r5, #4
}
   1c026:	4628      	mov	r0, r5
   1c028:	b01e      	add	sp, #120	; 0x78
   1c02a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		atomic_set_bit(smp->allowed_cmds,
   1c02e:	2103      	movs	r1, #3
   1c030:	4620      	mov	r0, r4
   1c032:	f00a fc11 	bl	26858 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   1c036:	f00a fd29 	bl	26a8c <smp_send_pairing_random>
		if (err) {
   1c03a:	4605      	mov	r5, r0
   1c03c:	2800      	cmp	r0, #0
   1c03e:	d1f2      	bne.n	1c026 <smp_pairing_random+0x18a>
		smp->passkey_round++;
   1c040:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1c044:	3301      	adds	r3, #1
   1c046:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   1c048:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   1c04a:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   1c04e:	d108      	bne.n	1c062 <smp_pairing_random+0x1c6>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1c050:	4620      	mov	r0, r4
   1c052:	210d      	movs	r1, #13
   1c054:	f00a fc00 	bl	26858 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1c058:	2110      	movs	r1, #16
   1c05a:	4630      	mov	r0, r6
   1c05c:	f00a fbfc 	bl	26858 <atomic_set_bit>
			return 0;
   1c060:	e7e1      	b.n	1c026 <smp_pairing_random+0x18a>
		if (bt_rand(smp->prnd, 16)) {
   1c062:	2110      	movs	r1, #16
   1c064:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1c068:	f002 fec2 	bl	1edf0 <bt_rand>
   1c06c:	2800      	cmp	r0, #0
   1c06e:	d0da      	beq.n	1c026 <smp_pairing_random+0x18a>
   1c070:	e75e      	b.n	1bf30 <smp_pairing_random+0x94>
		if (bt_rand(smp->prnd, 16)) {
   1c072:	2110      	movs	r1, #16
   1c074:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1c078:	f002 feba 	bl	1edf0 <bt_rand>
   1c07c:	2800      	cmp	r0, #0
   1c07e:	f47f af57 	bne.w	1bf30 <smp_pairing_random+0x94>
		if (bt_auth && bt_auth->oob_data_request) {
   1c082:	4f1f      	ldr	r7, [pc, #124]	; (1c100 <smp_pairing_random+0x264>)
   1c084:	683b      	ldr	r3, [r7, #0]
   1c086:	b1db      	cbz	r3, 1c0c0 <smp_pairing_random+0x224>
   1c088:	68db      	ldr	r3, [r3, #12]
   1c08a:	b1cb      	cbz	r3, 1c0c0 <smp_pairing_random+0x224>
			struct bt_conn_oob_info info = {
   1c08c:	4b1e      	ldr	r3, [pc, #120]	; (1c108 <smp_pairing_random+0x26c>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1c08e:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   1c090:	881b      	ldrh	r3, [r3, #0]
   1c092:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1c096:	7ca3      	ldrb	r3, [r4, #18]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1c098:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1c09a:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1c09e:	d411      	bmi.n	1c0c4 <smp_pairing_random+0x228>
				     BT_CONN_OOB_BOTH_PEERS :
   1c0a0:	2b00      	cmp	r3, #0
   1c0a2:	bf0c      	ite	eq
   1c0a4:	2003      	moveq	r0, #3
   1c0a6:	2001      	movne	r0, #1
   1c0a8:	e00f      	b.n	1c0ca <smp_pairing_random+0x22e>
   1c0aa:	4b11      	ldr	r3, [pc, #68]	; (1c0f0 <smp_pairing_random+0x254>)
   1c0ac:	4a0f      	ldr	r2, [pc, #60]	; (1c0ec <smp_pairing_random+0x250>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1c0ae:	4817      	ldr	r0, [pc, #92]	; (1c10c <smp_pairing_random+0x270>)
   1c0b0:	1ad2      	subs	r2, r2, r3
   1c0b2:	08d2      	lsrs	r2, r2, #3
   1c0b4:	0192      	lsls	r2, r2, #6
   1c0b6:	f042 0201 	orr.w	r2, r2, #1
   1c0ba:	f007 fedf 	bl	23e7c <log_1>
   1c0be:	e737      	b.n	1bf30 <smp_pairing_random+0x94>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1c0c0:	2502      	movs	r5, #2
   1c0c2:	e7b0      	b.n	1c026 <smp_pairing_random+0x18a>
				     BT_CONN_OOB_BOTH_PEERS :
   1c0c4:	2b00      	cmp	r3, #0
   1c0c6:	bf18      	it	ne
   1c0c8:	2002      	movne	r0, #2
			smp->oobd_local = NULL;
   1c0ca:	2500      	movs	r5, #0
	info->lesc.oob_config = oob_config;
   1c0cc:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
			smp->oobd_remote = NULL;
   1c0d0:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   1c0d4:	4630      	mov	r0, r6
   1c0d6:	210c      	movs	r1, #12
   1c0d8:	f00a fbbe 	bl	26858 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   1c0dc:	683b      	ldr	r3, [r7, #0]
   1c0de:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1c0e2:	68db      	ldr	r3, [r3, #12]
   1c0e4:	a90a      	add	r1, sp, #40	; 0x28
   1c0e6:	4798      	blx	r3
			return 0;
   1c0e8:	e79d      	b.n	1c026 <smp_pairing_random+0x18a>
   1c0ea:	bf00      	nop
   1c0ec:	00028e5c 	.word	0x00028e5c
   1c0f0:	00028dd4 	.word	0x00028dd4
   1c0f4:	0002bee1 	.word	0x0002bee1
   1c0f8:	2000254c 	.word	0x2000254c
   1c0fc:	000f4240 	.word	0x000f4240
   1c100:	20002410 	.word	0x20002410
   1c104:	0002bef6 	.word	0x0002bef6
   1c108:	0002907c 	.word	0x0002907c
   1c10c:	0002bde6 	.word	0x0002bde6

0001c110 <bt_smp_sign_verify>:
{
   1c110:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return buf->data + buf->len;
   1c112:	898b      	ldrh	r3, [r1, #12]
   1c114:	460c      	mov	r4, r1
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
   1c116:	6889      	ldr	r1, [r1, #8]
{
   1c118:	4606      	mov	r6, r0
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
   1c11a:	3b0c      	subs	r3, #12
   1c11c:	4419      	add	r1, r3
   1c11e:	220c      	movs	r2, #12
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
   1c120:	f106 0588 	add.w	r5, r6, #136	; 0x88
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
   1c124:	a801      	add	r0, sp, #4
   1c126:	f008 feab 	bl	24e80 <memcpy>
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
   1c12a:	7a31      	ldrb	r1, [r6, #8]
   1c12c:	462a      	mov	r2, r5
   1c12e:	2010      	movs	r0, #16
   1c130:	f7fe fbfc 	bl	1a92c <bt_keys_find>
	if (!keys) {
   1c134:	4606      	mov	r6, r0
   1c136:	b9a0      	cbnz	r0, 1c162 <bt_smp_sign_verify+0x52>
   1c138:	4a2e      	ldr	r2, [pc, #184]	; (1c1f4 <bt_smp_sign_verify+0xe4>)
   1c13a:	4c2f      	ldr	r4, [pc, #188]	; (1c1f8 <bt_smp_sign_verify+0xe8>)
		BT_ERR("Unable to find Remote CSRK for %s",
   1c13c:	4628      	mov	r0, r5
   1c13e:	1aa4      	subs	r4, r4, r2
   1c140:	f7f8 f98c 	bl	1445c <bt_addr_le_str_real>
   1c144:	f7f5 ff00 	bl	11f48 <z_log_strdup>
   1c148:	08e4      	lsrs	r4, r4, #3
   1c14a:	01a4      	lsls	r4, r4, #6
   1c14c:	f044 0401 	orr.w	r4, r4, #1
   1c150:	4601      	mov	r1, r0
   1c152:	4622      	mov	r2, r4
   1c154:	4829      	ldr	r0, [pc, #164]	; (1c1fc <bt_smp_sign_verify+0xec>)
   1c156:	f007 fe91 	bl	23e7c <log_1>
		return -ENOENT;
   1c15a:	f06f 0001 	mvn.w	r0, #1
}
   1c15e:	b004      	add	sp, #16
   1c160:	bd70      	pop	{r4, r5, r6, pc}
	cnt = sys_cpu_to_le32(keys->remote_csrk.cnt);
   1c162:	6e43      	ldr	r3, [r0, #100]	; 0x64
   1c164:	9300      	str	r3, [sp, #0]
   1c166:	89a3      	ldrh	r3, [r4, #12]
	memcpy(net_buf_tail(buf) - sizeof(sig), &cnt, sizeof(cnt));
   1c168:	68a0      	ldr	r0, [r4, #8]
   1c16a:	3b0c      	subs	r3, #12
   1c16c:	2204      	movs	r2, #4
   1c16e:	4669      	mov	r1, sp
   1c170:	4418      	add	r0, r3
   1c172:	f008 fe85 	bl	24e80 <memcpy>
	err = smp_sign_buf(keys->remote_csrk.val, buf->data,
   1c176:	89a2      	ldrh	r2, [r4, #12]
   1c178:	68a1      	ldr	r1, [r4, #8]
   1c17a:	3a0c      	subs	r2, #12
   1c17c:	b292      	uxth	r2, r2
   1c17e:	f106 0054 	add.w	r0, r6, #84	; 0x54
   1c182:	f7ff f8b3 	bl	1b2ec <smp_sign_buf>
	if (err) {
   1c186:	b198      	cbz	r0, 1c1b0 <bt_smp_sign_verify+0xa0>
   1c188:	4a1a      	ldr	r2, [pc, #104]	; (1c1f4 <bt_smp_sign_verify+0xe4>)
   1c18a:	4c1b      	ldr	r4, [pc, #108]	; (1c1f8 <bt_smp_sign_verify+0xe8>)
		BT_ERR("Unable to create signature for %s",
   1c18c:	4628      	mov	r0, r5
   1c18e:	1aa4      	subs	r4, r4, r2
   1c190:	f7f8 f964 	bl	1445c <bt_addr_le_str_real>
   1c194:	f7f5 fed8 	bl	11f48 <z_log_strdup>
   1c198:	08e4      	lsrs	r4, r4, #3
   1c19a:	01a4      	lsls	r4, r4, #6
   1c19c:	f044 0401 	orr.w	r4, r4, #1
   1c1a0:	4601      	mov	r1, r0
   1c1a2:	4622      	mov	r2, r4
   1c1a4:	4816      	ldr	r0, [pc, #88]	; (1c200 <bt_smp_sign_verify+0xf0>)
   1c1a6:	f007 fe69 	bl	23e7c <log_1>
		return -EIO;
   1c1aa:	f06f 0004 	mvn.w	r0, #4
   1c1ae:	e7d6      	b.n	1c15e <bt_smp_sign_verify+0x4e>
   1c1b0:	89a3      	ldrh	r3, [r4, #12]
	if (memcmp(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig))) {
   1c1b2:	68a1      	ldr	r1, [r4, #8]
   1c1b4:	3b0c      	subs	r3, #12
   1c1b6:	220c      	movs	r2, #12
   1c1b8:	4419      	add	r1, r3
   1c1ba:	a801      	add	r0, sp, #4
   1c1bc:	f008 fe50 	bl	24e60 <memcmp>
   1c1c0:	b198      	cbz	r0, 1c1ea <bt_smp_sign_verify+0xda>
   1c1c2:	4a0c      	ldr	r2, [pc, #48]	; (1c1f4 <bt_smp_sign_verify+0xe4>)
   1c1c4:	4c0c      	ldr	r4, [pc, #48]	; (1c1f8 <bt_smp_sign_verify+0xe8>)
		BT_ERR("Unable to verify signature for %s",
   1c1c6:	4628      	mov	r0, r5
   1c1c8:	1aa4      	subs	r4, r4, r2
   1c1ca:	f7f8 f947 	bl	1445c <bt_addr_le_str_real>
   1c1ce:	f7f5 febb 	bl	11f48 <z_log_strdup>
   1c1d2:	08e4      	lsrs	r4, r4, #3
   1c1d4:	01a4      	lsls	r4, r4, #6
   1c1d6:	f044 0401 	orr.w	r4, r4, #1
   1c1da:	4601      	mov	r1, r0
   1c1dc:	4622      	mov	r2, r4
   1c1de:	4809      	ldr	r0, [pc, #36]	; (1c204 <bt_smp_sign_verify+0xf4>)
   1c1e0:	f007 fe4c 	bl	23e7c <log_1>
		return -EBADMSG;
   1c1e4:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   1c1e8:	e7b9      	b.n	1c15e <bt_smp_sign_verify+0x4e>
	keys->remote_csrk.cnt++;
   1c1ea:	6e73      	ldr	r3, [r6, #100]	; 0x64
   1c1ec:	3301      	adds	r3, #1
   1c1ee:	6673      	str	r3, [r6, #100]	; 0x64
	return 0;
   1c1f0:	e7b5      	b.n	1c15e <bt_smp_sign_verify+0x4e>
   1c1f2:	bf00      	nop
   1c1f4:	00028dd4 	.word	0x00028dd4
   1c1f8:	00028e5c 	.word	0x00028e5c
   1c1fc:	0002bf0f 	.word	0x0002bf0f
   1c200:	0002bf31 	.word	0x0002bf31
   1c204:	0002bf53 	.word	0x0002bf53

0001c208 <bt_smp_sign>:
{
   1c208:	b573      	push	{r0, r1, r4, r5, r6, lr}
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, conn->id, &conn->le.dst);
   1c20a:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
   1c20e:	460e      	mov	r6, r1
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, conn->id, &conn->le.dst);
   1c210:	462a      	mov	r2, r5
   1c212:	7a01      	ldrb	r1, [r0, #8]
   1c214:	2008      	movs	r0, #8
   1c216:	f7fe fb89 	bl	1a92c <bt_keys_find>
	if (!keys) {
   1c21a:	4604      	mov	r4, r0
   1c21c:	b9a0      	cbnz	r0, 1c248 <bt_smp_sign+0x40>
   1c21e:	4a23      	ldr	r2, [pc, #140]	; (1c2ac <bt_smp_sign+0xa4>)
   1c220:	4c23      	ldr	r4, [pc, #140]	; (1c2b0 <bt_smp_sign+0xa8>)
		BT_ERR("Unable to find local CSRK for %s",
   1c222:	4628      	mov	r0, r5
   1c224:	1aa4      	subs	r4, r4, r2
   1c226:	f7f8 f919 	bl	1445c <bt_addr_le_str_real>
   1c22a:	f7f5 fe8d 	bl	11f48 <z_log_strdup>
   1c22e:	08e4      	lsrs	r4, r4, #3
   1c230:	01a4      	lsls	r4, r4, #6
   1c232:	f044 0401 	orr.w	r4, r4, #1
   1c236:	4601      	mov	r1, r0
   1c238:	4622      	mov	r2, r4
   1c23a:	481e      	ldr	r0, [pc, #120]	; (1c2b4 <bt_smp_sign+0xac>)
   1c23c:	f007 fe1e 	bl	23e7c <log_1>
		return -ENOENT;
   1c240:	f06f 0001 	mvn.w	r0, #1
}
   1c244:	b002      	add	sp, #8
   1c246:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_simple_add(&buf->b, len);
   1c248:	210c      	movs	r1, #12
   1c24a:	f106 0008 	add.w	r0, r6, #8
   1c24e:	f00a ffd3 	bl	271f8 <net_buf_simple_add>
	cnt = sys_cpu_to_le32(keys->local_csrk.cnt);
   1c252:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1c254:	9301      	str	r3, [sp, #4]
	return buf->data + buf->len;
   1c256:	89b3      	ldrh	r3, [r6, #12]
	memcpy(net_buf_tail(buf) - 12, &cnt, sizeof(cnt));
   1c258:	68b0      	ldr	r0, [r6, #8]
   1c25a:	2204      	movs	r2, #4
   1c25c:	3b0c      	subs	r3, #12
   1c25e:	eb0d 0102 	add.w	r1, sp, r2
   1c262:	4418      	add	r0, r3
   1c264:	f008 fe0c 	bl	24e80 <memcpy>
	err = smp_sign_buf(keys->local_csrk.val, buf->data, buf->len - 12);
   1c268:	89b2      	ldrh	r2, [r6, #12]
   1c26a:	68b1      	ldr	r1, [r6, #8]
   1c26c:	3a0c      	subs	r2, #12
   1c26e:	b292      	uxth	r2, r2
   1c270:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1c274:	f7ff f83a 	bl	1b2ec <smp_sign_buf>
	if (err) {
   1c278:	b198      	cbz	r0, 1c2a2 <bt_smp_sign+0x9a>
   1c27a:	4a0c      	ldr	r2, [pc, #48]	; (1c2ac <bt_smp_sign+0xa4>)
   1c27c:	4c0c      	ldr	r4, [pc, #48]	; (1c2b0 <bt_smp_sign+0xa8>)
		BT_ERR("Unable to create signature for %s",
   1c27e:	4628      	mov	r0, r5
   1c280:	1aa4      	subs	r4, r4, r2
   1c282:	f7f8 f8eb 	bl	1445c <bt_addr_le_str_real>
   1c286:	f7f5 fe5f 	bl	11f48 <z_log_strdup>
   1c28a:	08e4      	lsrs	r4, r4, #3
   1c28c:	01a4      	lsls	r4, r4, #6
   1c28e:	f044 0401 	orr.w	r4, r4, #1
   1c292:	4601      	mov	r1, r0
   1c294:	4622      	mov	r2, r4
   1c296:	4808      	ldr	r0, [pc, #32]	; (1c2b8 <bt_smp_sign+0xb0>)
   1c298:	f007 fdf0 	bl	23e7c <log_1>
		return -EIO;
   1c29c:	f06f 0004 	mvn.w	r0, #4
   1c2a0:	e7d0      	b.n	1c244 <bt_smp_sign+0x3c>
	keys->local_csrk.cnt++;
   1c2a2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1c2a4:	3301      	adds	r3, #1
   1c2a6:	6523      	str	r3, [r4, #80]	; 0x50
	return 0;
   1c2a8:	e7cc      	b.n	1c244 <bt_smp_sign+0x3c>
   1c2aa:	bf00      	nop
   1c2ac:	00028dd4 	.word	0x00028dd4
   1c2b0:	00028e5c 	.word	0x00028e5c
   1c2b4:	0002bf75 	.word	0x0002bf75
   1c2b8:	0002bf31 	.word	0x0002bf31

0001c2bc <bt_smp_start_security>:
{
   1c2bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   1c2c0:	78c4      	ldrb	r4, [r0, #3]
   1c2c2:	2c01      	cmp	r4, #1
{
   1c2c4:	4605      	mov	r5, r0
	switch (conn->role) {
   1c2c6:	d005      	beq.n	1c2d4 <bt_smp_start_security+0x18>
		return -EINVAL;
   1c2c8:	f06f 0415 	mvn.w	r4, #21
}
   1c2cc:	4620      	mov	r0, r4
   1c2ce:	b003      	add	sp, #12
   1c2d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   1c2d4:	f7ff f88e 	bl	1b3f4 <smp_chan_get>
	if (!smp) {
   1c2d8:	4606      	mov	r6, r0
   1c2da:	2800      	cmp	r0, #0
   1c2dc:	f000 80a5 	beq.w	1c42a <bt_smp_start_security+0x16e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1c2e0:	1d07      	adds	r7, r0, #4
   1c2e2:	2104      	movs	r1, #4
   1c2e4:	4638      	mov	r0, r7
   1c2e6:	f00a fb88 	bl	269fa <atomic_test_bit>
   1c2ea:	2800      	cmp	r0, #0
   1c2ec:	f040 80a0 	bne.w	1c430 <bt_smp_start_security+0x174>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1c2f0:	2103      	movs	r1, #3
   1c2f2:	4638      	mov	r0, r7
   1c2f4:	f00a fb81 	bl	269fa <atomic_test_bit>
   1c2f8:	b110      	cbz	r0, 1c300 <bt_smp_start_security+0x44>
		return -EBUSY;
   1c2fa:	f06f 040f 	mvn.w	r4, #15
   1c2fe:	e7e5      	b.n	1c2cc <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1c300:	4621      	mov	r1, r4
   1c302:	4638      	mov	r0, r7
   1c304:	f00a fb79 	bl	269fa <atomic_test_bit>
   1c308:	2800      	cmp	r0, #0
   1c30a:	d1f6      	bne.n	1c2fa <bt_smp_start_security+0x3e>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   1c30c:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
   1c30e:	2b03      	cmp	r3, #3
   1c310:	d03d      	beq.n	1c38e <bt_smp_start_security+0xd2>
   1c312:	d82c      	bhi.n	1c36e <bt_smp_start_security+0xb2>
   1c314:	3b01      	subs	r3, #1
   1c316:	2b01      	cmp	r3, #1
   1c318:	d947      	bls.n	1c3aa <bt_smp_start_security+0xee>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   1c31a:	210b      	movs	r1, #11
   1c31c:	1d28      	adds	r0, r5, #4
   1c31e:	f00a fb6c 	bl	269fa <atomic_test_bit>
   1c322:	2800      	cmp	r0, #0
   1c324:	d1d0      	bne.n	1c2c8 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
   1c326:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   1c32a:	b983      	cbnz	r3, 1c34e <bt_smp_start_security+0x92>
						     conn->id, &conn->le.dst);
   1c32c:	f105 0488 	add.w	r4, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   1c330:	7a29      	ldrb	r1, [r5, #8]
   1c332:	4622      	mov	r2, r4
   1c334:	2020      	movs	r0, #32
   1c336:	f7fe faf9 	bl	1a92c <bt_keys_find>
   1c33a:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   1c33e:	b930      	cbnz	r0, 1c34e <bt_smp_start_security+0x92>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   1c340:	7a29      	ldrb	r1, [r5, #8]
   1c342:	4622      	mov	r2, r4
   1c344:	2004      	movs	r0, #4
   1c346:	f7fe faf1 	bl	1a92c <bt_keys_find>
   1c34a:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   1c34e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   1c352:	2b00      	cmp	r3, #0
   1c354:	d0b8      	beq.n	1c2c8 <bt_smp_start_security+0xc>
   1c356:	89da      	ldrh	r2, [r3, #14]
   1c358:	f002 0224 	and.w	r2, r2, #36	; 0x24
   1c35c:	2a00      	cmp	r2, #0
   1c35e:	d0b3      	beq.n	1c2c8 <bt_smp_start_security+0xc>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   1c360:	7aaa      	ldrb	r2, [r5, #10]
   1c362:	2a02      	cmp	r2, #2
   1c364:	d921      	bls.n	1c3aa <bt_smp_start_security+0xee>
   1c366:	7b5b      	ldrb	r3, [r3, #13]
   1c368:	07db      	lsls	r3, r3, #31
   1c36a:	d5ad      	bpl.n	1c2c8 <bt_smp_start_security+0xc>
   1c36c:	e01d      	b.n	1c3aa <bt_smp_start_security+0xee>
	switch (conn->required_sec_level) {
   1c36e:	2b04      	cmp	r3, #4
   1c370:	d1d3      	bne.n	1c31a <bt_smp_start_security+0x5e>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1c372:	f7fe ff95 	bl	1b2a0 <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   1c376:	2803      	cmp	r0, #3
   1c378:	d104      	bne.n	1c384 <bt_smp_start_security+0xc8>
   1c37a:	4b2f      	ldr	r3, [pc, #188]	; (1c438 <bt_smp_start_security+0x17c>)
   1c37c:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1c37e:	b1fb      	cbz	r3, 1c3c0 <bt_smp_start_security+0x104>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   1c380:	68dc      	ldr	r4, [r3, #12]
   1c382:	b10c      	cbz	r4, 1c388 <bt_smp_start_security+0xcc>
   1c384:	4b2d      	ldr	r3, [pc, #180]	; (1c43c <bt_smp_start_security+0x180>)
   1c386:	781c      	ldrb	r4, [r3, #0]
   1c388:	f004 0401 	and.w	r4, r4, #1
   1c38c:	e00b      	b.n	1c3a6 <bt_smp_start_security+0xea>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1c38e:	f7fe ff87 	bl	1b2a0 <get_io_capa>
   1c392:	2803      	cmp	r0, #3
   1c394:	d107      	bne.n	1c3a6 <bt_smp_start_security+0xea>
		       (bt_auth && bt_auth->oob_data_request);
   1c396:	4b28      	ldr	r3, [pc, #160]	; (1c438 <bt_smp_start_security+0x17c>)
   1c398:	681c      	ldr	r4, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1c39a:	2c00      	cmp	r4, #0
   1c39c:	d0bd      	beq.n	1c31a <bt_smp_start_security+0x5e>
		       (bt_auth && bt_auth->oob_data_request);
   1c39e:	68e4      	ldr	r4, [r4, #12]
   1c3a0:	3c00      	subs	r4, #0
   1c3a2:	bf18      	it	ne
   1c3a4:	2401      	movne	r4, #1
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   1c3a6:	2c00      	cmp	r4, #0
   1c3a8:	d0b7      	beq.n	1c31a <bt_smp_start_security+0x5e>
	if (!conn->le.keys) {
   1c3aa:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   1c3ae:	b14b      	cbz	r3, 1c3c4 <bt_smp_start_security+0x108>
	if (smp_init(smp) != 0) {
   1c3b0:	4630      	mov	r0, r6
   1c3b2:	f7ff f85f 	bl	1b474 <smp_init>
   1c3b6:	4604      	mov	r4, r0
   1c3b8:	b180      	cbz	r0, 1c3dc <bt_smp_start_security+0x120>
		return -ENOBUFS;
   1c3ba:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1c3be:	e785      	b.n	1c2cc <bt_smp_start_security+0x10>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   1c3c0:	2400      	movs	r4, #0
   1c3c2:	e7e1      	b.n	1c388 <bt_smp_start_security+0xcc>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1c3c4:	7a28      	ldrb	r0, [r5, #8]
   1c3c6:	f105 0188 	add.w	r1, r5, #136	; 0x88
   1c3ca:	f7fe fa3b 	bl	1a844 <bt_keys_get_addr>
   1c3ce:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   1c3d2:	2800      	cmp	r0, #0
   1c3d4:	d1ec      	bne.n	1c3b0 <bt_smp_start_security+0xf4>
			return -ENOMEM;
   1c3d6:	f06f 040b 	mvn.w	r4, #11
   1c3da:	e777      	b.n	1c2cc <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   1c3dc:	210b      	movs	r1, #11
   1c3de:	4630      	mov	r0, r6
   1c3e0:	f00a fb35 	bl	26a4e <smp_create_pdu.isra.0>
	if (!req_buf) {
   1c3e4:	4680      	mov	r8, r0
   1c3e6:	2800      	cmp	r0, #0
   1c3e8:	d0e7      	beq.n	1c3ba <bt_smp_start_security+0xfe>
	return net_buf_simple_add(&buf->b, len);
   1c3ea:	2101      	movs	r1, #1
   1c3ec:	3008      	adds	r0, #8
   1c3ee:	f00a ff03 	bl	271f8 <net_buf_simple_add>
   1c3f2:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   1c3f4:	2009      	movs	r0, #9
   1c3f6:	f7fe ffdf 	bl	1b3b8 <get_auth.isra.0>
   1c3fa:	4623      	mov	r3, r4
   1c3fc:	f889 0000 	strb.w	r0, [r9]
   1c400:	4642      	mov	r2, r8
   1c402:	9400      	str	r4, [sp, #0]
   1c404:	2106      	movs	r1, #6
   1c406:	4628      	mov	r0, r5
   1c408:	f00a f9af 	bl	2676a <bt_l2cap_send_cb>
	if (err) {
   1c40c:	4604      	mov	r4, r0
   1c40e:	b118      	cbz	r0, 1c418 <bt_smp_start_security+0x15c>
		net_buf_unref(req_buf);
   1c410:	4640      	mov	r0, r8
   1c412:	f000 fe65 	bl	1d0e0 <net_buf_unref>
		return err;
   1c416:	e759      	b.n	1c2cc <bt_smp_start_security+0x10>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   1c418:	4638      	mov	r0, r7
   1c41a:	210f      	movs	r1, #15
   1c41c:	f00a fa1c 	bl	26858 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1c420:	2101      	movs	r1, #1
   1c422:	4630      	mov	r0, r6
   1c424:	f00a fa18 	bl	26858 <atomic_set_bit>
	return 0;
   1c428:	e750      	b.n	1c2cc <bt_smp_start_security+0x10>
		return -ENOTCONN;
   1c42a:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   1c42e:	e74d      	b.n	1c2cc <bt_smp_start_security+0x10>
		return -EIO;
   1c430:	f06f 0404 	mvn.w	r4, #4
   1c434:	e74a      	b.n	1c2cc <bt_smp_start_security+0x10>
   1c436:	bf00      	nop
   1c438:	20002410 	.word	0x20002410
   1c43c:	200029a1 	.word	0x200029a1

0001c440 <smp_pairing_complete>:
{
   1c440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   1c442:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
{
   1c446:	4605      	mov	r5, r0
   1c448:	1d07      	adds	r7, r0, #4
	if (!status) {
   1c44a:	b9e9      	cbnz	r1, 1c488 <smp_pairing_complete+0x48>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1c44c:	210d      	movs	r1, #13
   1c44e:	4638      	mov	r0, r7
   1c450:	f00a fad3 	bl	269fa <atomic_test_bit>
		if (bond_flag) {
   1c454:	4606      	mov	r6, r0
   1c456:	b118      	cbz	r0, 1c460 <smp_pairing_complete+0x20>
			bt_keys_store(conn->le.keys);
   1c458:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1c45c:	f7fe fbb6 	bl	1abcc <bt_keys_store>
		if (bt_auth && bt_auth->pairing_complete) {
   1c460:	4b24      	ldr	r3, [pc, #144]	; (1c4f4 <smp_pairing_complete+0xb4>)
   1c462:	681b      	ldr	r3, [r3, #0]
   1c464:	b123      	cbz	r3, 1c470 <smp_pairing_complete+0x30>
   1c466:	699b      	ldr	r3, [r3, #24]
		    bt_auth && bt_auth->pairing_failed) {
   1c468:	b113      	cbz	r3, 1c470 <smp_pairing_complete+0x30>
			bt_auth->pairing_failed(conn, security_err);
   1c46a:	4631      	mov	r1, r6
   1c46c:	4620      	mov	r0, r4
   1c46e:	4798      	blx	r3
	smp_reset(smp);
   1c470:	4628      	mov	r0, r5
   1c472:	f00a fb7e 	bl	26b72 <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   1c476:	7a62      	ldrb	r2, [r4, #9]
   1c478:	7aa3      	ldrb	r3, [r4, #10]
   1c47a:	429a      	cmp	r2, r3
   1c47c:	d039      	beq.n	1c4f2 <smp_pairing_complete+0xb2>
		bt_smp_start_security(conn);
   1c47e:	4620      	mov	r0, r4
}
   1c480:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   1c484:	f7ff bf1a 	b.w	1c2bc <bt_smp_start_security>
	switch (smp_err) {
   1c488:	3901      	subs	r1, #1
   1c48a:	b2c9      	uxtb	r1, r1
   1c48c:	290e      	cmp	r1, #14
   1c48e:	bf9c      	itt	ls
   1c490:	4b19      	ldrls	r3, [pc, #100]	; (1c4f8 <smp_pairing_complete+0xb8>)
   1c492:	5c5e      	ldrbls	r6, [r3, r1]
		if (conn->le.keys &&
   1c494:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
	if (!status) {
   1c498:	bf88      	it	hi
   1c49a:	2609      	movhi	r6, #9
		if (conn->le.keys &&
   1c49c:	b143      	cbz	r3, 1c4b0 <smp_pairing_complete+0x70>
   1c49e:	7b1b      	ldrb	r3, [r3, #12]
   1c4a0:	bb03      	cbnz	r3, 1c4e4 <smp_pairing_complete+0xa4>
			bt_keys_clear(conn->le.keys);
   1c4a2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1c4a6:	f7fe faa1 	bl	1a9ec <bt_keys_clear>
			conn->le.keys = NULL;
   1c4aa:	2300      	movs	r3, #0
   1c4ac:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1c4b0:	2102      	movs	r1, #2
   1c4b2:	4638      	mov	r0, r7
   1c4b4:	f00a faa1 	bl	269fa <atomic_test_bit>
   1c4b8:	b940      	cbnz	r0, 1c4cc <smp_pairing_complete+0x8c>
	switch (err) {
   1c4ba:	2e07      	cmp	r6, #7
   1c4bc:	bf96      	itet	ls
   1c4be:	4b0f      	ldrls	r3, [pc, #60]	; (1c4fc <smp_pairing_complete+0xbc>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1c4c0:	211f      	movhi	r1, #31
   1c4c2:	5d99      	ldrbls	r1, [r3, r6]
			bt_conn_security_changed(conn,
   1c4c4:	4632      	mov	r2, r6
   1c4c6:	4620      	mov	r0, r4
   1c4c8:	f7fa f890 	bl	165ec <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   1c4cc:	2103      	movs	r1, #3
   1c4ce:	4638      	mov	r0, r7
   1c4d0:	f00a fa93 	bl	269fa <atomic_test_bit>
   1c4d4:	2800      	cmp	r0, #0
   1c4d6:	d0cb      	beq.n	1c470 <smp_pairing_complete+0x30>
   1c4d8:	4b06      	ldr	r3, [pc, #24]	; (1c4f4 <smp_pairing_complete+0xb4>)
   1c4da:	681b      	ldr	r3, [r3, #0]
   1c4dc:	2b00      	cmp	r3, #0
   1c4de:	d0c7      	beq.n	1c470 <smp_pairing_complete+0x30>
		    bt_auth && bt_auth->pairing_failed) {
   1c4e0:	69db      	ldr	r3, [r3, #28]
   1c4e2:	e7c1      	b.n	1c468 <smp_pairing_complete+0x28>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   1c4e4:	2102      	movs	r1, #2
   1c4e6:	4638      	mov	r0, r7
   1c4e8:	f00a fa87 	bl	269fa <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   1c4ec:	2800      	cmp	r0, #0
   1c4ee:	d1d8      	bne.n	1c4a2 <smp_pairing_complete+0x62>
   1c4f0:	e7de      	b.n	1c4b0 <smp_pairing_complete+0x70>
}
   1c4f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c4f4:	20002410 	.word	0x20002410
   1c4f8:	0002c17a 	.word	0x0002c17a
   1c4fc:	0002c192 	.word	0x0002c192

0001c500 <bt_smp_recv>:
{
   1c500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   1c502:	898b      	ldrh	r3, [r1, #12]
{
   1c504:	4607      	mov	r7, r0
   1c506:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   1c508:	b95b      	cbnz	r3, 1c522 <bt_smp_recv+0x22>
   1c50a:	493a      	ldr	r1, [pc, #232]	; (1c5f4 <bt_smp_recv+0xf4>)
   1c50c:	4b3a      	ldr	r3, [pc, #232]	; (1c5f8 <bt_smp_recv+0xf8>)
		BT_ERR("Too small SMP PDU received");
   1c50e:	483b      	ldr	r0, [pc, #236]	; (1c5fc <bt_smp_recv+0xfc>)
   1c510:	1ac9      	subs	r1, r1, r3
   1c512:	08c9      	lsrs	r1, r1, #3
   1c514:	0189      	lsls	r1, r1, #6
   1c516:	f041 0101 	orr.w	r1, r1, #1
   1c51a:	f007 fca2 	bl	23e62 <log_0>
}
   1c51e:	2000      	movs	r0, #0
   1c520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1c522:	2101      	movs	r1, #1
   1c524:	f105 0008 	add.w	r0, r5, #8
   1c528:	f00a fe8d 	bl	27246 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1c52c:	2104      	movs	r1, #4
   1c52e:	4606      	mov	r6, r0
   1c530:	f1a7 00ec 	sub.w	r0, r7, #236	; 0xec
   1c534:	f00a fa61 	bl	269fa <atomic_test_bit>
   1c538:	f1a7 04f0 	sub.w	r4, r7, #240	; 0xf0
   1c53c:	7831      	ldrb	r1, [r6, #0]
   1c53e:	b150      	cbz	r0, 1c556 <bt_smp_recv+0x56>
   1c540:	4a2c      	ldr	r2, [pc, #176]	; (1c5f4 <bt_smp_recv+0xf4>)
   1c542:	4b2d      	ldr	r3, [pc, #180]	; (1c5f8 <bt_smp_recv+0xf8>)
		BT_WARN("SMP command (code 0x%02x) received after timeout",
   1c544:	482e      	ldr	r0, [pc, #184]	; (1c600 <bt_smp_recv+0x100>)
   1c546:	1ad2      	subs	r2, r2, r3
   1c548:	08d2      	lsrs	r2, r2, #3
   1c54a:	0192      	lsls	r2, r2, #6
   1c54c:	f042 0202 	orr.w	r2, r2, #2
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1c550:	f007 fc94 	bl	23e7c <log_1>
		return 0;
   1c554:	e7e3      	b.n	1c51e <bt_smp_recv+0x1e>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   1c556:	290e      	cmp	r1, #14
   1c558:	d908      	bls.n	1c56c <bt_smp_recv+0x6c>
   1c55a:	4a26      	ldr	r2, [pc, #152]	; (1c5f4 <bt_smp_recv+0xf4>)
   1c55c:	4b26      	ldr	r3, [pc, #152]	; (1c5f8 <bt_smp_recv+0xf8>)
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1c55e:	4829      	ldr	r0, [pc, #164]	; (1c604 <bt_smp_recv+0x104>)
   1c560:	1ad2      	subs	r2, r2, r3
   1c562:	08d2      	lsrs	r2, r2, #3
   1c564:	0192      	lsls	r2, r2, #6
   1c566:	f042 0202 	orr.w	r2, r2, #2
   1c56a:	e7f1      	b.n	1c550 <bt_smp_recv+0x50>
	if (!handlers[hdr->code].func) {
   1c56c:	4f26      	ldr	r7, [pc, #152]	; (1c608 <bt_smp_recv+0x108>)
   1c56e:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
   1c572:	b973      	cbnz	r3, 1c592 <bt_smp_recv+0x92>
   1c574:	4b20      	ldr	r3, [pc, #128]	; (1c5f8 <bt_smp_recv+0xf8>)
   1c576:	4a1f      	ldr	r2, [pc, #124]	; (1c5f4 <bt_smp_recv+0xf4>)
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
   1c578:	4824      	ldr	r0, [pc, #144]	; (1c60c <bt_smp_recv+0x10c>)
   1c57a:	1ad2      	subs	r2, r2, r3
   1c57c:	08d2      	lsrs	r2, r2, #3
   1c57e:	0192      	lsls	r2, r2, #6
   1c580:	f042 0202 	orr.w	r2, r2, #2
   1c584:	f007 fc7a 	bl	23e7c <log_1>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   1c588:	2107      	movs	r1, #7
		smp_error(smp, err);
   1c58a:	4620      	mov	r0, r4
   1c58c:	f00a fc6f 	bl	26e6e <smp_error>
   1c590:	e7c5      	b.n	1c51e <bt_smp_recv+0x1e>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   1c592:	4620      	mov	r0, r4
   1c594:	f00a fad5 	bl	26b42 <atomic_test_and_clear_bit>
   1c598:	7831      	ldrb	r1, [r6, #0]
   1c59a:	b970      	cbnz	r0, 1c5ba <bt_smp_recv+0xba>
   1c59c:	4b16      	ldr	r3, [pc, #88]	; (1c5f8 <bt_smp_recv+0xf8>)
   1c59e:	4a15      	ldr	r2, [pc, #84]	; (1c5f4 <bt_smp_recv+0xf4>)
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
   1c5a0:	481b      	ldr	r0, [pc, #108]	; (1c610 <bt_smp_recv+0x110>)
   1c5a2:	1ad2      	subs	r2, r2, r3
   1c5a4:	08d2      	lsrs	r2, r2, #3
   1c5a6:	0192      	lsls	r2, r2, #6
   1c5a8:	f042 0202 	orr.w	r2, r2, #2
   1c5ac:	f007 fc66 	bl	23e7c <log_1>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   1c5b0:	7833      	ldrb	r3, [r6, #0]
   1c5b2:	2b05      	cmp	r3, #5
   1c5b4:	d0b3      	beq.n	1c51e <bt_smp_recv+0x1e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1c5b6:	2108      	movs	r1, #8
   1c5b8:	e7e7      	b.n	1c58a <bt_smp_recv+0x8a>
	if (buf->len != handlers[hdr->code].expect_len) {
   1c5ba:	eb07 03c1 	add.w	r3, r7, r1, lsl #3
   1c5be:	89a8      	ldrh	r0, [r5, #12]
   1c5c0:	791b      	ldrb	r3, [r3, #4]
   1c5c2:	4283      	cmp	r3, r0
   1c5c4:	d00d      	beq.n	1c5e2 <bt_smp_recv+0xe2>
   1c5c6:	4a0c      	ldr	r2, [pc, #48]	; (1c5f8 <bt_smp_recv+0xf8>)
   1c5c8:	4b0a      	ldr	r3, [pc, #40]	; (1c5f4 <bt_smp_recv+0xf4>)
   1c5ca:	1a9b      	subs	r3, r3, r2
   1c5cc:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1c5ce:	019b      	lsls	r3, r3, #6
   1c5d0:	460a      	mov	r2, r1
   1c5d2:	f043 0301 	orr.w	r3, r3, #1
   1c5d6:	4601      	mov	r1, r0
   1c5d8:	480e      	ldr	r0, [pc, #56]	; (1c614 <bt_smp_recv+0x114>)
   1c5da:	f007 fc63 	bl	23ea4 <log_2>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   1c5de:	210a      	movs	r1, #10
   1c5e0:	e7d3      	b.n	1c58a <bt_smp_recv+0x8a>
	err = handlers[hdr->code].func(smp, buf);
   1c5e2:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
   1c5e6:	4620      	mov	r0, r4
   1c5e8:	4629      	mov	r1, r5
   1c5ea:	4798      	blx	r3
	if (err) {
   1c5ec:	4601      	mov	r1, r0
   1c5ee:	2800      	cmp	r0, #0
   1c5f0:	d095      	beq.n	1c51e <bt_smp_recv+0x1e>
   1c5f2:	e7ca      	b.n	1c58a <bt_smp_recv+0x8a>
   1c5f4:	00028e5c 	.word	0x00028e5c
   1c5f8:	00028dd4 	.word	0x00028dd4
   1c5fc:	0002bf96 	.word	0x0002bf96
   1c600:	0002bfb1 	.word	0x0002bfb1
   1c604:	0002bfe2 	.word	0x0002bfe2
   1c608:	0002982c 	.word	0x0002982c
   1c60c:	0002c004 	.word	0x0002c004
   1c610:	0002c01e 	.word	0x0002c01e
   1c614:	0002a911 	.word	0x0002a911

0001c618 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   1c618:	4b12      	ldr	r3, [pc, #72]	; (1c664 <bt_smp_pkey_ready+0x4c>)
{
   1c61a:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   1c61c:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   1c61e:	b958      	cbnz	r0, 1c638 <bt_smp_pkey_ready+0x20>
   1c620:	4911      	ldr	r1, [pc, #68]	; (1c668 <bt_smp_pkey_ready+0x50>)
   1c622:	4b12      	ldr	r3, [pc, #72]	; (1c66c <bt_smp_pkey_ready+0x54>)
		BT_WARN("Public key not available");
   1c624:	4812      	ldr	r0, [pc, #72]	; (1c670 <bt_smp_pkey_ready+0x58>)
   1c626:	1ac9      	subs	r1, r1, r3
   1c628:	08c9      	lsrs	r1, r1, #3
   1c62a:	0189      	lsls	r1, r1, #6
}
   1c62c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Public key not available");
   1c630:	f041 0102 	orr.w	r1, r1, #2
   1c634:	f007 bc15 	b.w	23e62 <log_0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c638:	4c0e      	ldr	r4, [pc, #56]	; (1c674 <bt_smp_pkey_ready+0x5c>)
	z_impl_k_sem_give(sem);
   1c63a:	480f      	ldr	r0, [pc, #60]	; (1c678 <bt_smp_pkey_ready+0x60>)
   1c63c:	f005 fa60 	bl	21b00 <z_impl_k_sem_give>
   1c640:	f3bf 8f5b 	dmb	ish
   1c644:	6863      	ldr	r3, [r4, #4]
   1c646:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   1c64a:	065b      	lsls	r3, r3, #25
   1c64c:	d509      	bpl.n	1c662 <bt_smp_pkey_ready+0x4a>
		err = smp_public_key_periph(smp);
   1c64e:	4620      	mov	r0, r4
   1c650:	f7ff f8a8 	bl	1b7a4 <smp_public_key_periph>
		if (err) {
   1c654:	4601      	mov	r1, r0
   1c656:	b120      	cbz	r0, 1c662 <bt_smp_pkey_ready+0x4a>
			smp_error(smp, err);
   1c658:	4620      	mov	r0, r4
}
   1c65a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
   1c65e:	f00a bc06 	b.w	26e6e <smp_error>
}
   1c662:	bd10      	pop	{r4, pc}
   1c664:	2000254c 	.word	0x2000254c
   1c668:	00028e5c 	.word	0x00028e5c
   1c66c:	00028dd4 	.word	0x00028dd4
   1c670:	0002c039 	.word	0x0002c039
   1c674:	20001c60 	.word	0x20001c60
   1c678:	200009d0 	.word	0x200009d0

0001c67c <smp_signing_info>:
{
   1c67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   1c67e:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
{
   1c682:	4604      	mov	r4, r0
   1c684:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1c686:	3004      	adds	r0, #4
   1c688:	210d      	movs	r1, #13
   1c68a:	f00a f9b6 	bl	269fa <atomic_test_bit>
   1c68e:	b300      	cbz	r0, 1c6d2 <smp_signing_info+0x56>
					&conn->le.dst);
   1c690:	f106 0588 	add.w	r5, r6, #136	; 0x88
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
   1c694:	7a31      	ldrb	r1, [r6, #8]
		struct bt_smp_signing_info *req = (void *)buf->data;
   1c696:	689f      	ldr	r7, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
   1c698:	462a      	mov	r2, r5
   1c69a:	2010      	movs	r0, #16
   1c69c:	f009 ffe3 	bl	26666 <bt_keys_get_type>
		if (!keys) {
   1c6a0:	b990      	cbnz	r0, 1c6c8 <smp_signing_info+0x4c>
   1c6a2:	4a13      	ldr	r2, [pc, #76]	; (1c6f0 <smp_signing_info+0x74>)
   1c6a4:	4c13      	ldr	r4, [pc, #76]	; (1c6f4 <smp_signing_info+0x78>)
			BT_ERR("Unable to get keys for %s",
   1c6a6:	4628      	mov	r0, r5
   1c6a8:	1aa4      	subs	r4, r4, r2
   1c6aa:	f7f7 fed7 	bl	1445c <bt_addr_le_str_real>
   1c6ae:	f7f5 fc4b 	bl	11f48 <z_log_strdup>
   1c6b2:	08e4      	lsrs	r4, r4, #3
   1c6b4:	01a4      	lsls	r4, r4, #6
   1c6b6:	f044 0401 	orr.w	r4, r4, #1
   1c6ba:	4601      	mov	r1, r0
   1c6bc:	4622      	mov	r2, r4
   1c6be:	480e      	ldr	r0, [pc, #56]	; (1c6f8 <smp_signing_info+0x7c>)
   1c6c0:	f007 fbdc 	bl	23e7c <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
   1c6c4:	2008      	movs	r0, #8
}
   1c6c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->remote_csrk.val, req->csrk,
   1c6c8:	2210      	movs	r2, #16
   1c6ca:	4639      	mov	r1, r7
   1c6cc:	3054      	adds	r0, #84	; 0x54
   1c6ce:	f008 fbd7 	bl	24e80 <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_SIGN;
   1c6d2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1c6d6:	f023 0304 	bic.w	r3, r3, #4
   1c6da:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if (!smp->local_dist && !smp->remote_dist) {
   1c6de:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   1c6e2:	b91d      	cbnz	r5, 1c6ec <smp_signing_info+0x70>
		smp_pairing_complete(smp, 0);
   1c6e4:	4629      	mov	r1, r5
   1c6e6:	4620      	mov	r0, r4
   1c6e8:	f7ff feaa 	bl	1c440 <smp_pairing_complete>
	return 0;
   1c6ec:	2000      	movs	r0, #0
   1c6ee:	e7ea      	b.n	1c6c6 <smp_signing_info+0x4a>
   1c6f0:	00028dd4 	.word	0x00028dd4
   1c6f4:	00028e5c 	.word	0x00028e5c
   1c6f8:	0002be9a 	.word	0x0002be9a

0001c6fc <smp_ident_addr_info>:
{
   1c6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   1c700:	688d      	ldr	r5, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   1c702:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1c706:	782b      	ldrb	r3, [r5, #0]
{
   1c708:	4604      	mov	r4, r0
   1c70a:	f107 0688 	add.w	r6, r7, #136	; 0x88
   1c70e:	b313      	cbz	r3, 1c756 <smp_ident_addr_info+0x5a>
	if (!bt_addr_le_is_identity(&req->addr)) {
   1c710:	79ab      	ldrb	r3, [r5, #6]
   1c712:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1c716:	2bc0      	cmp	r3, #192	; 0xc0
   1c718:	d01d      	beq.n	1c756 <smp_ident_addr_info+0x5a>
   1c71a:	4b4b      	ldr	r3, [pc, #300]	; (1c848 <smp_ident_addr_info+0x14c>)
   1c71c:	4c4b      	ldr	r4, [pc, #300]	; (1c84c <smp_ident_addr_info+0x150>)
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   1c71e:	4628      	mov	r0, r5
   1c720:	1ae4      	subs	r4, r4, r3
   1c722:	f7f7 fe9b 	bl	1445c <bt_addr_le_str_real>
   1c726:	f7f5 fc0f 	bl	11f48 <z_log_strdup>
   1c72a:	08e4      	lsrs	r4, r4, #3
   1c72c:	01a4      	lsls	r4, r4, #6
   1c72e:	f044 0401 	orr.w	r4, r4, #1
   1c732:	4601      	mov	r1, r0
   1c734:	4622      	mov	r2, r4
   1c736:	4846      	ldr	r0, [pc, #280]	; (1c850 <smp_ident_addr_info+0x154>)
   1c738:	f007 fba0 	bl	23e7c <log_1>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1c73c:	4630      	mov	r0, r6
   1c73e:	f7f7 fe8d 	bl	1445c <bt_addr_le_str_real>
   1c742:	f7f5 fc01 	bl	11f48 <z_log_strdup>
   1c746:	4622      	mov	r2, r4
   1c748:	4601      	mov	r1, r0
   1c74a:	4842      	ldr	r0, [pc, #264]	; (1c854 <smp_ident_addr_info+0x158>)
   1c74c:	f007 fb96 	bl	23e7c <log_1>
		return BT_SMP_ERR_INVALID_PARAMS;
   1c750:	200a      	movs	r0, #10
}
   1c752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return memcmp(a, b, sizeof(*a));
   1c756:	2207      	movs	r2, #7
   1c758:	4629      	mov	r1, r5
   1c75a:	4630      	mov	r0, r6
   1c75c:	f008 fb80 	bl	24e60 <memcmp>
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
   1c760:	b168      	cbz	r0, 1c77e <smp_ident_addr_info+0x82>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   1c762:	7a38      	ldrb	r0, [r7, #8]
   1c764:	4629      	mov	r1, r5
   1c766:	f7fe f931 	bl	1a9cc <bt_keys_find_addr>
		if (keys) {
   1c76a:	4680      	mov	r8, r0
   1c76c:	b138      	cbz	r0, 1c77e <smp_ident_addr_info+0x82>
			if (!update_keys_check(smp, keys)) {
   1c76e:	4601      	mov	r1, r0
   1c770:	4620      	mov	r0, r4
   1c772:	f00a f94b 	bl	26a0c <update_keys_check>
   1c776:	b300      	cbz	r0, 1c7ba <smp_ident_addr_info+0xbe>
			bt_keys_clear(keys);
   1c778:	4640      	mov	r0, r8
   1c77a:	f7fe f937 	bl	1a9ec <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1c77e:	210d      	movs	r1, #13
   1c780:	1d20      	adds	r0, r4, #4
   1c782:	f00a f93a 	bl	269fa <atomic_test_bit>
   1c786:	2800      	cmp	r0, #0
   1c788:	d046      	beq.n	1c818 <smp_ident_addr_info+0x11c>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1c78a:	7a39      	ldrb	r1, [r7, #8]
   1c78c:	4632      	mov	r2, r6
   1c78e:	2002      	movs	r0, #2
   1c790:	f009 ff69 	bl	26666 <bt_keys_get_type>
		if (!keys) {
   1c794:	4680      	mov	r8, r0
   1c796:	b990      	cbnz	r0, 1c7be <smp_ident_addr_info+0xc2>
   1c798:	4a2b      	ldr	r2, [pc, #172]	; (1c848 <smp_ident_addr_info+0x14c>)
   1c79a:	4c2c      	ldr	r4, [pc, #176]	; (1c84c <smp_ident_addr_info+0x150>)
			BT_ERR("Unable to get keys for %s",
   1c79c:	4630      	mov	r0, r6
   1c79e:	1aa4      	subs	r4, r4, r2
   1c7a0:	f7f7 fe5c 	bl	1445c <bt_addr_le_str_real>
   1c7a4:	f7f5 fbd0 	bl	11f48 <z_log_strdup>
   1c7a8:	08e4      	lsrs	r4, r4, #3
   1c7aa:	01a4      	lsls	r4, r4, #6
   1c7ac:	f044 0401 	orr.w	r4, r4, #1
   1c7b0:	4601      	mov	r1, r0
   1c7b2:	4622      	mov	r2, r4
   1c7b4:	4828      	ldr	r0, [pc, #160]	; (1c858 <smp_ident_addr_info+0x15c>)
   1c7b6:	f007 fb61 	bl	23e7c <log_1>
				return BT_SMP_ERR_UNSPECIFIED;
   1c7ba:	2008      	movs	r0, #8
   1c7bc:	e7c9      	b.n	1c752 <smp_ident_addr_info+0x56>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1c7be:	78fb      	ldrb	r3, [r7, #3]
   1c7c0:	2b00      	cmp	r3, #0
   1c7c2:	d13e      	bne.n	1c842 <smp_ident_addr_info+0x146>
			dst = &conn->le.resp_addr;
   1c7c4:	f107 0196 	add.w	r1, r7, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1c7c8:	780b      	ldrb	r3, [r1, #0]
   1c7ca:	2b01      	cmp	r3, #1
   1c7cc:	d121      	bne.n	1c812 <smp_ident_addr_info+0x116>
		if (bt_addr_le_is_rpa(dst)) {
   1c7ce:	798b      	ldrb	r3, [r1, #6]
   1c7d0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1c7d4:	2b40      	cmp	r3, #64	; 0x40
   1c7d6:	d11c      	bne.n	1c812 <smp_ident_addr_info+0x116>
	memcpy(dst, src, sizeof(*dst));
   1c7d8:	2206      	movs	r2, #6
   1c7da:	3101      	adds	r1, #1
   1c7dc:	f108 003a 	add.w	r0, r8, #58	; 0x3a
   1c7e0:	f008 fb4e 	bl	24e80 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1c7e4:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
   1c7e8:	b19b      	cbz	r3, 1c812 <smp_ident_addr_info+0x116>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1c7ea:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
   1c7ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1c7f2:	2bc0      	cmp	r3, #192	; 0xc0
   1c7f4:	d00d      	beq.n	1c812 <smp_ident_addr_info+0x116>
	memcpy(dst, src, sizeof(*dst));
   1c7f6:	2207      	movs	r2, #7
   1c7f8:	4629      	mov	r1, r5
   1c7fa:	f108 0001 	add.w	r0, r8, #1
   1c7fe:	f008 fb3f 	bl	24e80 <memcpy>
   1c802:	2207      	movs	r2, #7
   1c804:	4629      	mov	r1, r5
   1c806:	4630      	mov	r0, r6
   1c808:	f008 fb3a 	bl	24e80 <memcpy>
				bt_conn_identity_resolved(conn);
   1c80c:	4638      	mov	r0, r7
   1c80e:	f7f9 febf 	bl	16590 <bt_conn_identity_resolved>
		bt_id_add(keys);
   1c812:	4640      	mov	r0, r8
   1c814:	f7fd fca2 	bl	1a15c <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1c818:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1c81c:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1c820:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1c822:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1c826:	d503      	bpl.n	1c830 <smp_ident_addr_info+0x134>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1c828:	210a      	movs	r1, #10
   1c82a:	4620      	mov	r0, r4
   1c82c:	f00a f814 	bl	26858 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1c830:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   1c834:	b91d      	cbnz	r5, 1c83e <smp_ident_addr_info+0x142>
		smp_pairing_complete(smp, 0);
   1c836:	4629      	mov	r1, r5
   1c838:	4620      	mov	r0, r4
   1c83a:	f7ff fe01 	bl	1c440 <smp_pairing_complete>
	return 0;
   1c83e:	2000      	movs	r0, #0
   1c840:	e787      	b.n	1c752 <smp_ident_addr_info+0x56>
			dst = &conn->le.init_addr;
   1c842:	f107 018f 	add.w	r1, r7, #143	; 0x8f
   1c846:	e7bf      	b.n	1c7c8 <smp_ident_addr_info+0xcc>
   1c848:	00028dd4 	.word	0x00028dd4
   1c84c:	00028e5c 	.word	0x00028e5c
   1c850:	0002c052 	.word	0x0002c052
   1c854:	0002bf29 	.word	0x0002bf29
   1c858:	0002be9a 	.word	0x0002be9a

0001c85c <smp_central_ident>:
{
   1c85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   1c85e:	f8d0 50f0 	ldr.w	r5, [r0, #240]	; 0xf0
{
   1c862:	4604      	mov	r4, r0
   1c864:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1c866:	3004      	adds	r0, #4
   1c868:	210d      	movs	r1, #13
   1c86a:	f00a f8c6 	bl	269fa <atomic_test_bit>
   1c86e:	b338      	cbz	r0, 1c8c0 <smp_central_ident+0x64>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1c870:	f105 0788 	add.w	r7, r5, #136	; 0x88
   1c874:	7a29      	ldrb	r1, [r5, #8]
		struct bt_smp_central_ident *req = (void *)buf->data;
   1c876:	689e      	ldr	r6, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1c878:	463a      	mov	r2, r7
   1c87a:	2004      	movs	r0, #4
   1c87c:	f009 fef3 	bl	26666 <bt_keys_get_type>
		if (!keys) {
   1c880:	4605      	mov	r5, r0
   1c882:	b990      	cbnz	r0, 1c8aa <smp_central_ident+0x4e>
   1c884:	4a1b      	ldr	r2, [pc, #108]	; (1c8f4 <smp_central_ident+0x98>)
   1c886:	4c1c      	ldr	r4, [pc, #112]	; (1c8f8 <smp_central_ident+0x9c>)
			BT_ERR("Unable to get keys for %s",
   1c888:	4638      	mov	r0, r7
   1c88a:	1aa4      	subs	r4, r4, r2
   1c88c:	f7f7 fde6 	bl	1445c <bt_addr_le_str_real>
   1c890:	f7f5 fb5a 	bl	11f48 <z_log_strdup>
   1c894:	08e4      	lsrs	r4, r4, #3
   1c896:	01a4      	lsls	r4, r4, #6
   1c898:	f044 0401 	orr.w	r4, r4, #1
   1c89c:	4601      	mov	r1, r0
   1c89e:	4622      	mov	r2, r4
   1c8a0:	4816      	ldr	r0, [pc, #88]	; (1c8fc <smp_central_ident+0xa0>)
   1c8a2:	f007 faeb 	bl	23e7c <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
   1c8a6:	2008      	movs	r0, #8
}
   1c8a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   1c8aa:	2202      	movs	r2, #2
   1c8ac:	4631      	mov	r1, r6
   1c8ae:	3018      	adds	r0, #24
   1c8b0:	f008 fae6 	bl	24e80 <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   1c8b4:	2208      	movs	r2, #8
   1c8b6:	1cb1      	adds	r1, r6, #2
   1c8b8:	f105 0010 	add.w	r0, r5, #16
   1c8bc:	f008 fae0 	bl	24e80 <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1c8c0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1c8c4:	f023 0201 	bic.w	r2, r3, #1
   1c8c8:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1c8cc:	079a      	lsls	r2, r3, #30
   1c8ce:	d50c      	bpl.n	1c8ea <smp_central_ident+0x8e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1c8d0:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1c8d2:	4620      	mov	r0, r4
   1c8d4:	f009 ffc0 	bl	26858 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1c8d8:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   1c8dc:	b91d      	cbnz	r5, 1c8e6 <smp_central_ident+0x8a>
		smp_pairing_complete(smp, 0);
   1c8de:	4629      	mov	r1, r5
   1c8e0:	4620      	mov	r0, r4
   1c8e2:	f7ff fdad 	bl	1c440 <smp_pairing_complete>
	return 0;
   1c8e6:	2000      	movs	r0, #0
   1c8e8:	e7de      	b.n	1c8a8 <smp_central_ident+0x4c>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1c8ea:	075b      	lsls	r3, r3, #29
   1c8ec:	d5f4      	bpl.n	1c8d8 <smp_central_ident+0x7c>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1c8ee:	210a      	movs	r1, #10
   1c8f0:	e7ef      	b.n	1c8d2 <smp_central_ident+0x76>
   1c8f2:	bf00      	nop
   1c8f4:	00028dd4 	.word	0x00028dd4
   1c8f8:	00028e5c 	.word	0x00028e5c
   1c8fc:	0002be9a 	.word	0x0002be9a

0001c900 <smp_pairing_failed>:
{
   1c900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c902:	4a15      	ldr	r2, [pc, #84]	; (1c958 <smp_pairing_failed+0x58>)
   1c904:	4b15      	ldr	r3, [pc, #84]	; (1c95c <smp_pairing_failed+0x5c>)
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   1c906:	688d      	ldr	r5, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   1c908:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
	BT_ERR("reason 0x%x", req->reason);
   1c90c:	7829      	ldrb	r1, [r5, #0]
   1c90e:	1ad2      	subs	r2, r2, r3
   1c910:	08d2      	lsrs	r2, r2, #3
{
   1c912:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
   1c914:	0192      	lsls	r2, r2, #6
   1c916:	4812      	ldr	r0, [pc, #72]	; (1c960 <smp_pairing_failed+0x60>)
   1c918:	f042 0201 	orr.w	r2, r2, #1
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1c91c:	1d27      	adds	r7, r4, #4
	BT_ERR("reason 0x%x", req->reason);
   1c91e:	f007 faad 	bl	23e7c <log_1>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1c922:	210a      	movs	r1, #10
   1c924:	4638      	mov	r0, r7
   1c926:	f00a f90c 	bl	26b42 <atomic_test_and_clear_bit>
   1c92a:	b140      	cbz	r0, 1c93e <smp_pairing_failed+0x3e>
		if (bt_auth && bt_auth->cancel) {
   1c92c:	4b0d      	ldr	r3, [pc, #52]	; (1c964 <smp_pairing_failed+0x64>)
   1c92e:	681b      	ldr	r3, [r3, #0]
   1c930:	b963      	cbnz	r3, 1c94c <smp_pairing_failed+0x4c>
	smp_pairing_complete(smp, req->reason);
   1c932:	4620      	mov	r0, r4
   1c934:	7829      	ldrb	r1, [r5, #0]
   1c936:	f7ff fd83 	bl	1c440 <smp_pairing_complete>
}
   1c93a:	2000      	movs	r0, #0
   1c93c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   1c93e:	210b      	movs	r1, #11
   1c940:	4638      	mov	r0, r7
   1c942:	f00a f8fe 	bl	26b42 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1c946:	2800      	cmp	r0, #0
   1c948:	d1f0      	bne.n	1c92c <smp_pairing_failed+0x2c>
   1c94a:	e7f2      	b.n	1c932 <smp_pairing_failed+0x32>
		if (bt_auth && bt_auth->cancel) {
   1c94c:	691b      	ldr	r3, [r3, #16]
   1c94e:	2b00      	cmp	r3, #0
   1c950:	d0ef      	beq.n	1c932 <smp_pairing_failed+0x32>
			bt_auth->cancel(conn);
   1c952:	4630      	mov	r0, r6
   1c954:	4798      	blx	r3
   1c956:	e7ec      	b.n	1c932 <smp_pairing_failed+0x32>
   1c958:	00028e5c 	.word	0x00028e5c
   1c95c:	00028dd4 	.word	0x00028dd4
   1c960:	0002c066 	.word	0x0002c066
   1c964:	20002410 	.word	0x20002410

0001c968 <bt_smp_encrypt_change>:
{
   1c968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = chan->conn;
   1c96c:	4604      	mov	r4, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1c96e:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
{
   1c972:	b08b      	sub	sp, #44	; 0x2c
   1c974:	4605      	mov	r5, r0
   1c976:	460f      	mov	r7, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1c978:	4630      	mov	r0, r6
   1c97a:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   1c97c:	f854 89f0 	ldr.w	r8, [r4], #-240
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1c980:	f00a f8df 	bl	26b42 <atomic_test_and_clear_bit>
   1c984:	b318      	cbz	r0, 1c9ce <bt_smp_encrypt_change+0x66>
	if (hci_status) {
   1c986:	b1bf      	cbz	r7, 1c9b8 <bt_smp_encrypt_change+0x50>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1c988:	2103      	movs	r1, #3
   1c98a:	4630      	mov	r0, r6
   1c98c:	f00a f835 	bl	269fa <atomic_test_bit>
   1c990:	b1e8      	cbz	r0, 1c9ce <bt_smp_encrypt_change+0x66>
			uint8_t smp_err = smp_err_get(
   1c992:	4638      	mov	r0, r7
   1c994:	f7fc fe90 	bl	196b8 <bt_security_err_get>
	switch (auth_err) {
   1c998:	3801      	subs	r0, #1
   1c99a:	b2c0      	uxtb	r0, r0
   1c99c:	2808      	cmp	r0, #8
   1c99e:	bf9a      	itte	ls
   1c9a0:	4bb5      	ldrls	r3, [pc, #724]	; (1cc78 <bt_smp_encrypt_change+0x310>)
   1c9a2:	5c1d      	ldrbls	r5, [r3, r0]
			uint8_t smp_err = smp_err_get(
   1c9a4:	2500      	movhi	r5, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1c9a6:	2102      	movs	r1, #2
   1c9a8:	4630      	mov	r0, r6
   1c9aa:	f009 ff55 	bl	26858 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   1c9ae:	4629      	mov	r1, r5
		smp_pairing_complete(smp, 0);
   1c9b0:	4620      	mov	r0, r4
   1c9b2:	f7ff fd45 	bl	1c440 <smp_pairing_complete>
   1c9b6:	e00a      	b.n	1c9ce <bt_smp_encrypt_change+0x66>
	if (!conn->encrypt) {
   1c9b8:	f898 300b 	ldrb.w	r3, [r8, #11]
   1c9bc:	b13b      	cbz	r3, 1c9ce <bt_smp_encrypt_change+0x66>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1c9be:	2103      	movs	r1, #3
   1c9c0:	4630      	mov	r0, r6
   1c9c2:	f00a f81a 	bl	269fa <atomic_test_bit>
   1c9c6:	b928      	cbnz	r0, 1c9d4 <bt_smp_encrypt_change+0x6c>
		smp_reset(smp);
   1c9c8:	4620      	mov	r0, r4
   1c9ca:	f00a f8d2 	bl	26b72 <smp_reset>
}
   1c9ce:	b00b      	add	sp, #44	; 0x2c
   1c9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1c9d4:	2105      	movs	r1, #5
   1c9d6:	4630      	mov	r0, r6
   1c9d8:	f00a f80f 	bl	269fa <atomic_test_bit>
   1c9dc:	b1b8      	cbz	r0, 1ca0e <bt_smp_encrypt_change+0xa6>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   1c9de:	f815 3c08 	ldrb.w	r3, [r5, #-8]
   1c9e2:	0718      	lsls	r0, r3, #28
   1c9e4:	d507      	bpl.n	1c9f6 <bt_smp_encrypt_change+0x8e>
   1c9e6:	f815 3c07 	ldrb.w	r3, [r5, #-7]
   1c9ea:	0719      	lsls	r1, r3, #28
   1c9ec:	d503      	bpl.n	1c9f6 <bt_smp_encrypt_change+0x8e>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   1c9ee:	2111      	movs	r1, #17
   1c9f0:	4630      	mov	r0, r6
   1c9f2:	f009 ff31 	bl	26858 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   1c9f6:	f815 3c08 	ldrb.w	r3, [r5, #-8]
   1c9fa:	f023 0308 	bic.w	r3, r3, #8
   1c9fe:	f805 3c08 	strb.w	r3, [r5, #-8]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   1ca02:	f815 3c07 	ldrb.w	r3, [r5, #-7]
   1ca06:	f023 0308 	bic.w	r3, r3, #8
   1ca0a:	f805 3c07 	strb.w	r3, [r5, #-7]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   1ca0e:	f815 3c07 	ldrb.w	r3, [r5, #-7]
   1ca12:	07da      	lsls	r2, r3, #31
   1ca14:	d520      	bpl.n	1ca58 <bt_smp_encrypt_change+0xf0>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   1ca16:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1ca18:	4620      	mov	r0, r4
   1ca1a:	f009 ff1d 	bl	26858 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1ca1e:	2102      	movs	r1, #2
   1ca20:	4630      	mov	r0, r6
   1ca22:	f009 ff19 	bl	26858 <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
   1ca26:	682f      	ldr	r7, [r5, #0]
	struct bt_keys *keys = conn->le.keys;
   1ca28:	f8d7 80b4 	ldr.w	r8, [r7, #180]	; 0xb4
	if (!keys) {
   1ca2c:	f1b8 0f00 	cmp.w	r8, #0
   1ca30:	d11a      	bne.n	1ca68 <bt_smp_encrypt_change+0x100>
   1ca32:	4a92      	ldr	r2, [pc, #584]	; (1cc7c <bt_smp_encrypt_change+0x314>)
   1ca34:	4c92      	ldr	r4, [pc, #584]	; (1cc80 <bt_smp_encrypt_change+0x318>)
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   1ca36:	f107 0088 	add.w	r0, r7, #136	; 0x88
   1ca3a:	1aa4      	subs	r4, r4, r2
   1ca3c:	f7f7 fd0e 	bl	1445c <bt_addr_le_str_real>
   1ca40:	f7f5 fa82 	bl	11f48 <z_log_strdup>
   1ca44:	08e4      	lsrs	r4, r4, #3
   1ca46:	01a4      	lsls	r4, r4, #6
   1ca48:	f044 0401 	orr.w	r4, r4, #1
   1ca4c:	4601      	mov	r1, r0
   1ca4e:	4622      	mov	r2, r4
   1ca50:	488c      	ldr	r0, [pc, #560]	; (1cc84 <bt_smp_encrypt_change+0x31c>)
   1ca52:	f007 fa13 	bl	23e7c <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   1ca56:	e7ba      	b.n	1c9ce <bt_smp_encrypt_change+0x66>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1ca58:	079f      	lsls	r7, r3, #30
   1ca5a:	d501      	bpl.n	1ca60 <bt_smp_encrypt_change+0xf8>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1ca5c:	2108      	movs	r1, #8
   1ca5e:	e7db      	b.n	1ca18 <bt_smp_encrypt_change+0xb0>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1ca60:	0758      	lsls	r0, r3, #29
   1ca62:	d5dc      	bpl.n	1ca1e <bt_smp_encrypt_change+0xb6>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1ca64:	210a      	movs	r1, #10
   1ca66:	e7d7      	b.n	1ca18 <bt_smp_encrypt_change+0xb0>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1ca68:	2105      	movs	r1, #5
   1ca6a:	f009 ffc6 	bl	269fa <atomic_test_bit>
   1ca6e:	b9b0      	cbnz	r0, 1ca9e <bt_smp_encrypt_change+0x136>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   1ca70:	f815 3c08 	ldrb.w	r3, [r5, #-8]
   1ca74:	07d9      	lsls	r1, r3, #31
   1ca76:	d512      	bpl.n	1ca9e <bt_smp_encrypt_change+0x136>
	struct bt_keys *keys = conn->le.keys;
   1ca78:	682b      	ldr	r3, [r5, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1ca7a:	211a      	movs	r1, #26
   1ca7c:	a803      	add	r0, sp, #12
	struct bt_keys *keys = conn->le.keys;
   1ca7e:	f8d3 90b4 	ldr.w	r9, [r3, #180]	; 0xb4
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1ca82:	f002 f9b5 	bl	1edf0 <bt_rand>
   1ca86:	4683      	mov	fp, r0
   1ca88:	b300      	cbz	r0, 1cacc <bt_smp_encrypt_change+0x164>
   1ca8a:	497d      	ldr	r1, [pc, #500]	; (1cc80 <bt_smp_encrypt_change+0x318>)
   1ca8c:	4b7b      	ldr	r3, [pc, #492]	; (1cc7c <bt_smp_encrypt_change+0x314>)
			BT_ERR("Unable to get random bytes");
   1ca8e:	487e      	ldr	r0, [pc, #504]	; (1cc88 <bt_smp_encrypt_change+0x320>)
   1ca90:	1ac9      	subs	r1, r1, r3
   1ca92:	08c9      	lsrs	r1, r1, #3
   1ca94:	0189      	lsls	r1, r1, #6
   1ca96:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to allocate Encrypt Info buffer");
   1ca9a:	f007 f9e2 	bl	23e62 <log_0>
	if (smp->local_dist & BT_SMP_DIST_ID_KEY) {
   1ca9e:	f815 3c08 	ldrb.w	r3, [r5, #-8]
   1caa2:	079a      	lsls	r2, r3, #30
   1caa4:	f140 80ac 	bpl.w	1cc00 <bt_smp_encrypt_change+0x298>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_INFO,
   1caa8:	2108      	movs	r1, #8
   1caaa:	4620      	mov	r0, r4
   1caac:	f009 ffcf 	bl	26a4e <smp_create_pdu.isra.0>
		if (!buf) {
   1cab0:	4681      	mov	r9, r0
   1cab2:	2800      	cmp	r0, #0
   1cab4:	d173      	bne.n	1cb9e <bt_smp_encrypt_change+0x236>
   1cab6:	4972      	ldr	r1, [pc, #456]	; (1cc80 <bt_smp_encrypt_change+0x318>)
   1cab8:	4b70      	ldr	r3, [pc, #448]	; (1cc7c <bt_smp_encrypt_change+0x314>)
			BT_ERR("Unable to allocate Ident Info buffer");
   1caba:	4874      	ldr	r0, [pc, #464]	; (1cc8c <bt_smp_encrypt_change+0x324>)
   1cabc:	1ac9      	subs	r1, r1, r3
   1cabe:	08c9      	lsrs	r1, r1, #3
   1cac0:	0189      	lsls	r1, r1, #6
   1cac2:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to allocate Signing Info buffer");
   1cac6:	f007 f9cc 	bl	23e62 <log_0>
			return BT_SMP_ERR_UNSPECIFIED;
   1caca:	e780      	b.n	1c9ce <bt_smp_encrypt_change+0x66>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   1cacc:	2106      	movs	r1, #6
   1cace:	4620      	mov	r0, r4
   1cad0:	f009 ffbd 	bl	26a4e <smp_create_pdu.isra.0>
		if (!buf) {
   1cad4:	4682      	mov	sl, r0
   1cad6:	b940      	cbnz	r0, 1caea <bt_smp_encrypt_change+0x182>
   1cad8:	4969      	ldr	r1, [pc, #420]	; (1cc80 <bt_smp_encrypt_change+0x318>)
   1cada:	4b68      	ldr	r3, [pc, #416]	; (1cc7c <bt_smp_encrypt_change+0x314>)
			BT_ERR("Unable to allocate Encrypt Info buffer");
   1cadc:	486c      	ldr	r0, [pc, #432]	; (1cc90 <bt_smp_encrypt_change+0x328>)
   1cade:	1ac9      	subs	r1, r1, r3
   1cae0:	08c9      	lsrs	r1, r1, #3
   1cae2:	0189      	lsls	r1, r1, #6
   1cae4:	f041 0101 	orr.w	r1, r1, #1
   1cae8:	e7d7      	b.n	1ca9a <bt_smp_encrypt_change+0x132>
	return net_buf_simple_add(&buf->b, len);
   1caea:	2110      	movs	r1, #16
   1caec:	3008      	adds	r0, #8
   1caee:	f00a fb83 	bl	271f8 <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
   1caf2:	f899 200c 	ldrb.w	r2, [r9, #12]
   1caf6:	9001      	str	r0, [sp, #4]
   1caf8:	a903      	add	r1, sp, #12
   1cafa:	f008 f9c1 	bl	24e80 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   1cafe:	f899 000c 	ldrb.w	r0, [r9, #12]
   1cb02:	9b01      	ldr	r3, [sp, #4]
   1cb04:	280f      	cmp	r0, #15
   1cb06:	d805      	bhi.n	1cb14 <bt_smp_encrypt_change+0x1ac>
			(void)memset(info->ltk + keys->enc_size, 0,
   1cb08:	f1c0 0210 	rsb	r2, r0, #16
   1cb0c:	4659      	mov	r1, fp
   1cb0e:	4418      	add	r0, r3
   1cb10:	f008 f9c1 	bl	24e96 <memset>
		smp_send(smp, buf, NULL, NULL);
   1cb14:	4651      	mov	r1, sl
   1cb16:	2200      	movs	r2, #0
   1cb18:	4620      	mov	r0, r4
   1cb1a:	f009 ff4f 	bl	269bc <smp_send.isra.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   1cb1e:	2107      	movs	r1, #7
   1cb20:	4620      	mov	r0, r4
   1cb22:	f009 ff94 	bl	26a4e <smp_create_pdu.isra.0>
		if (!buf) {
   1cb26:	4682      	mov	sl, r0
   1cb28:	b940      	cbnz	r0, 1cb3c <bt_smp_encrypt_change+0x1d4>
   1cb2a:	4955      	ldr	r1, [pc, #340]	; (1cc80 <bt_smp_encrypt_change+0x318>)
   1cb2c:	4b53      	ldr	r3, [pc, #332]	; (1cc7c <bt_smp_encrypt_change+0x314>)
			BT_ERR("Unable to allocate Central Ident buffer");
   1cb2e:	4859      	ldr	r0, [pc, #356]	; (1cc94 <bt_smp_encrypt_change+0x32c>)
   1cb30:	1ac9      	subs	r1, r1, r3
   1cb32:	08c9      	lsrs	r1, r1, #3
   1cb34:	0189      	lsls	r1, r1, #6
   1cb36:	f041 0101 	orr.w	r1, r1, #1
   1cb3a:	e7ae      	b.n	1ca9a <bt_smp_encrypt_change+0x132>
   1cb3c:	210a      	movs	r1, #10
   1cb3e:	3008      	adds	r0, #8
   1cb40:	f00a fb5a 	bl	271f8 <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   1cb44:	2208      	movs	r2, #8
   1cb46:	4683      	mov	fp, r0
   1cb48:	a907      	add	r1, sp, #28
   1cb4a:	3002      	adds	r0, #2
   1cb4c:	f008 f998 	bl	24e80 <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
   1cb50:	2202      	movs	r2, #2
   1cb52:	a909      	add	r1, sp, #36	; 0x24
   1cb54:	4658      	mov	r0, fp
   1cb56:	f008 f993 	bl	24e80 <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
   1cb5a:	4651      	mov	r1, sl
   1cb5c:	4620      	mov	r0, r4
   1cb5e:	4a4e      	ldr	r2, [pc, #312]	; (1cc98 <bt_smp_encrypt_change+0x330>)
   1cb60:	f009 ff2c 	bl	269bc <smp_send.isra.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1cb64:	210d      	movs	r1, #13
   1cb66:	4630      	mov	r0, r6
   1cb68:	f009 ff47 	bl	269fa <atomic_test_bit>
   1cb6c:	2800      	cmp	r0, #0
   1cb6e:	d096      	beq.n	1ca9e <bt_smp_encrypt_change+0x136>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   1cb70:	4648      	mov	r0, r9
   1cb72:	2101      	movs	r1, #1
   1cb74:	f009 fd87 	bl	26686 <bt_keys_add_type>
			memcpy(keys->periph_ltk.val, rand.key,
   1cb78:	a903      	add	r1, sp, #12
   1cb7a:	2210      	movs	r2, #16
   1cb7c:	f109 0072 	add.w	r0, r9, #114	; 0x72
   1cb80:	f008 f97e 	bl	24e80 <memcpy>
			memcpy(keys->periph_ltk.rand, rand.rand,
   1cb84:	a907      	add	r1, sp, #28
   1cb86:	2208      	movs	r2, #8
   1cb88:	f109 0068 	add.w	r0, r9, #104	; 0x68
   1cb8c:	f008 f978 	bl	24e80 <memcpy>
			memcpy(keys->periph_ltk.ediv, rand.ediv,
   1cb90:	2202      	movs	r2, #2
   1cb92:	a909      	add	r1, sp, #36	; 0x24
   1cb94:	f109 0070 	add.w	r0, r9, #112	; 0x70
   1cb98:	f008 f972 	bl	24e80 <memcpy>
   1cb9c:	e77f      	b.n	1ca9e <bt_smp_encrypt_change+0x136>
   1cb9e:	2110      	movs	r1, #16
   1cba0:	3008      	adds	r0, #8
   1cba2:	f00a fb29 	bl	271f8 <net_buf_simple_add>
		memcpy(id_info->irk, bt_dev.irk[conn->id], 16);
   1cba6:	7a39      	ldrb	r1, [r7, #8]
   1cba8:	f8df a100 	ldr.w	sl, [pc, #256]	; 1ccac <bt_smp_encrypt_change+0x344>
   1cbac:	3117      	adds	r1, #23
   1cbae:	2210      	movs	r2, #16
   1cbb0:	eb0a 1101 	add.w	r1, sl, r1, lsl #4
   1cbb4:	f008 f964 	bl	24e80 <memcpy>
		smp_send(smp, buf, NULL, NULL);
   1cbb8:	4649      	mov	r1, r9
   1cbba:	2200      	movs	r2, #0
   1cbbc:	4620      	mov	r0, r4
   1cbbe:	f009 fefd 	bl	269bc <smp_send.isra.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_ADDR_INFO,
   1cbc2:	2109      	movs	r1, #9
   1cbc4:	4620      	mov	r0, r4
   1cbc6:	f009 ff42 	bl	26a4e <smp_create_pdu.isra.0>
		if (!buf) {
   1cbca:	4681      	mov	r9, r0
   1cbcc:	b940      	cbnz	r0, 1cbe0 <bt_smp_encrypt_change+0x278>
   1cbce:	492c      	ldr	r1, [pc, #176]	; (1cc80 <bt_smp_encrypt_change+0x318>)
   1cbd0:	4b2a      	ldr	r3, [pc, #168]	; (1cc7c <bt_smp_encrypt_change+0x314>)
			BT_ERR("Unable to allocate Ident Addr Info buffer");
   1cbd2:	4832      	ldr	r0, [pc, #200]	; (1cc9c <bt_smp_encrypt_change+0x334>)
   1cbd4:	1ac9      	subs	r1, r1, r3
   1cbd6:	08c9      	lsrs	r1, r1, #3
   1cbd8:	0189      	lsls	r1, r1, #6
   1cbda:	f041 0101 	orr.w	r1, r1, #1
   1cbde:	e772      	b.n	1cac6 <bt_smp_encrypt_change+0x15e>
   1cbe0:	2107      	movs	r1, #7
   1cbe2:	3008      	adds	r0, #8
   1cbe4:	f00a fb08 	bl	271f8 <net_buf_simple_add>
		bt_addr_le_copy(&id_addr_info->addr, &bt_dev.id_addr[conn->id]);
   1cbe8:	7a39      	ldrb	r1, [r7, #8]
   1cbea:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   1cbee:	2207      	movs	r2, #7
   1cbf0:	4451      	add	r1, sl
   1cbf2:	f008 f945 	bl	24e80 <memcpy>
		smp_send(smp, buf, smp_id_sent, NULL);
   1cbf6:	4a2a      	ldr	r2, [pc, #168]	; (1cca0 <bt_smp_encrypt_change+0x338>)
   1cbf8:	4649      	mov	r1, r9
   1cbfa:	4620      	mov	r0, r4
   1cbfc:	f009 fede 	bl	269bc <smp_send.isra.0>
	if (smp->local_dist & BT_SMP_DIST_SIGN) {
   1cc00:	f815 3c08 	ldrb.w	r3, [r5, #-8]
   1cc04:	075b      	lsls	r3, r3, #29
   1cc06:	d530      	bpl.n	1cc6a <bt_smp_encrypt_change+0x302>
		buf = smp_create_pdu(smp, BT_SMP_CMD_SIGNING_INFO,
   1cc08:	210a      	movs	r1, #10
   1cc0a:	4620      	mov	r0, r4
   1cc0c:	f009 ff1f 	bl	26a4e <smp_create_pdu.isra.0>
		if (!buf) {
   1cc10:	4607      	mov	r7, r0
   1cc12:	b940      	cbnz	r0, 1cc26 <bt_smp_encrypt_change+0x2be>
   1cc14:	491a      	ldr	r1, [pc, #104]	; (1cc80 <bt_smp_encrypt_change+0x318>)
   1cc16:	4b19      	ldr	r3, [pc, #100]	; (1cc7c <bt_smp_encrypt_change+0x314>)
			BT_ERR("Unable to allocate Signing Info buffer");
   1cc18:	4822      	ldr	r0, [pc, #136]	; (1cca4 <bt_smp_encrypt_change+0x33c>)
   1cc1a:	1ac9      	subs	r1, r1, r3
   1cc1c:	08c9      	lsrs	r1, r1, #3
   1cc1e:	0189      	lsls	r1, r1, #6
   1cc20:	f041 0101 	orr.w	r1, r1, #1
   1cc24:	e74f      	b.n	1cac6 <bt_smp_encrypt_change+0x15e>
   1cc26:	2110      	movs	r1, #16
   1cc28:	3008      	adds	r0, #8
   1cc2a:	f00a fae5 	bl	271f8 <net_buf_simple_add>
		if (bt_rand(info->csrk, sizeof(info->csrk))) {
   1cc2e:	2110      	movs	r1, #16
   1cc30:	4682      	mov	sl, r0
   1cc32:	f002 f8dd 	bl	1edf0 <bt_rand>
   1cc36:	4681      	mov	r9, r0
   1cc38:	2800      	cmp	r0, #0
   1cc3a:	f47f aec8 	bne.w	1c9ce <bt_smp_encrypt_change+0x66>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1cc3e:	210d      	movs	r1, #13
   1cc40:	4630      	mov	r0, r6
   1cc42:	f009 feda 	bl	269fa <atomic_test_bit>
   1cc46:	b158      	cbz	r0, 1cc60 <bt_smp_encrypt_change+0x2f8>
			bt_keys_add_type(keys, BT_KEYS_LOCAL_CSRK);
   1cc48:	2108      	movs	r1, #8
   1cc4a:	4640      	mov	r0, r8
   1cc4c:	f009 fd1b 	bl	26686 <bt_keys_add_type>
			memcpy(keys->local_csrk.val, info->csrk, 16);
   1cc50:	2210      	movs	r2, #16
   1cc52:	4651      	mov	r1, sl
   1cc54:	f108 0040 	add.w	r0, r8, #64	; 0x40
   1cc58:	f008 f912 	bl	24e80 <memcpy>
			keys->local_csrk.cnt = 0U;
   1cc5c:	f8c8 9050 	str.w	r9, [r8, #80]	; 0x50
		smp_send(smp, buf, smp_sign_info_sent, NULL);
   1cc60:	4a11      	ldr	r2, [pc, #68]	; (1cca8 <bt_smp_encrypt_change+0x340>)
   1cc62:	4639      	mov	r1, r7
   1cc64:	4620      	mov	r0, r4
   1cc66:	f009 fea9 	bl	269bc <smp_send.isra.0>
	if (!smp->local_dist && !smp->remote_dist) {
   1cc6a:	f835 1c08 	ldrh.w	r1, [r5, #-8]
   1cc6e:	2900      	cmp	r1, #0
   1cc70:	f47f aead 	bne.w	1c9ce <bt_smp_encrypt_change+0x66>
   1cc74:	e69c      	b.n	1c9b0 <bt_smp_encrypt_change+0x48>
   1cc76:	bf00      	nop
   1cc78:	0002c189 	.word	0x0002c189
   1cc7c:	00028dd4 	.word	0x00028dd4
   1cc80:	00028e5c 	.word	0x00028e5c
   1cc84:	0002c072 	.word	0x0002c072
   1cc88:	0002c087 	.word	0x0002c087
   1cc8c:	0002c0f1 	.word	0x0002c0f1
   1cc90:	0002c0a2 	.word	0x0002c0a2
   1cc94:	0002c0c9 	.word	0x0002c0c9
   1cc98:	00026f89 	.word	0x00026f89
   1cc9c:	0002c116 	.word	0x0002c116
   1cca0:	00026f95 	.word	0x00026f95
   1cca4:	0002c140 	.word	0x0002c140
   1cca8:	00026fa3 	.word	0x00026fa3
   1ccac:	200002b0 	.word	0x200002b0

0001ccb0 <smp_timeout>:
   1ccb0:	4b0b      	ldr	r3, [pc, #44]	; (1cce0 <smp_timeout+0x30>)
   1ccb2:	490c      	ldr	r1, [pc, #48]	; (1cce4 <smp_timeout+0x34>)
{
   1ccb4:	b510      	push	{r4, lr}
   1ccb6:	1ac9      	subs	r1, r1, r3
   1ccb8:	08c9      	lsrs	r1, r1, #3
	BT_ERR("SMP Timeout");
   1ccba:	0189      	lsls	r1, r1, #6
{
   1ccbc:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
   1ccbe:	f041 0101 	orr.w	r1, r1, #1
   1ccc2:	4809      	ldr	r0, [pc, #36]	; (1cce8 <smp_timeout+0x38>)
   1ccc4:	f007 f8cd 	bl	23e62 <log_0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1ccc8:	f5a4 70ec 	sub.w	r0, r4, #472	; 0x1d8
   1cccc:	2108      	movs	r1, #8
   1ccce:	f7ff fbb7 	bl	1c440 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1ccd2:	f5a4 70ea 	sub.w	r0, r4, #468	; 0x1d4
   1ccd6:	2104      	movs	r1, #4
}
   1ccd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1ccdc:	f009 bdbc 	b.w	26858 <atomic_set_bit>
   1cce0:	00028dd4 	.word	0x00028dd4
   1cce4:	00028e5c 	.word	0x00028e5c
   1cce8:	0002c167 	.word	0x0002c167

0001ccec <bt_smp_update_keys>:
{
   1ccec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ccee:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1ccf0:	f7fe fb80 	bl	1b3f4 <smp_chan_get>
	if (!smp) {
   1ccf4:	4605      	mov	r5, r0
   1ccf6:	2800      	cmp	r0, #0
   1ccf8:	d07c      	beq.n	1cdf4 <bt_smp_update_keys+0x108>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1ccfa:	1d06      	adds	r6, r0, #4
   1ccfc:	2103      	movs	r1, #3
   1ccfe:	4630      	mov	r0, r6
   1cd00:	f009 fe7b 	bl	269fa <atomic_test_bit>
   1cd04:	2800      	cmp	r0, #0
   1cd06:	d075      	beq.n	1cdf4 <bt_smp_update_keys+0x108>
	if (conn->le.keys) {
   1cd08:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1cd0c:	b108      	cbz	r0, 1cd12 <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   1cd0e:	f7fd fe6d 	bl	1a9ec <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1cd12:	f104 0788 	add.w	r7, r4, #136	; 0x88
   1cd16:	7a20      	ldrb	r0, [r4, #8]
   1cd18:	4639      	mov	r1, r7
   1cd1a:	f7fd fd93 	bl	1a844 <bt_keys_get_addr>
   1cd1e:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   1cd22:	b9b0      	cbnz	r0, 1cd52 <bt_smp_update_keys+0x66>
   1cd24:	4a34      	ldr	r2, [pc, #208]	; (1cdf8 <bt_smp_update_keys+0x10c>)
   1cd26:	4c35      	ldr	r4, [pc, #212]	; (1cdfc <bt_smp_update_keys+0x110>)
		BT_ERR("Unable to get keys for %s",
   1cd28:	4638      	mov	r0, r7
   1cd2a:	1aa4      	subs	r4, r4, r2
   1cd2c:	f7f7 fb96 	bl	1445c <bt_addr_le_str_real>
   1cd30:	f7f5 f90a 	bl	11f48 <z_log_strdup>
   1cd34:	08e4      	lsrs	r4, r4, #3
   1cd36:	01a4      	lsls	r4, r4, #6
   1cd38:	f044 0401 	orr.w	r4, r4, #1
   1cd3c:	4601      	mov	r1, r0
   1cd3e:	4622      	mov	r2, r4
   1cd40:	482f      	ldr	r0, [pc, #188]	; (1ce00 <bt_smp_update_keys+0x114>)
   1cd42:	f007 f89b 	bl	23e7c <log_1>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1cd46:	4628      	mov	r0, r5
   1cd48:	2108      	movs	r1, #8
}
   1cd4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1cd4e:	f00a b88e 	b.w	26e6e <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   1cd52:	210e      	movs	r1, #14
   1cd54:	4630      	mov	r0, r6
   1cd56:	f009 fe50 	bl	269fa <atomic_test_bit>
   1cd5a:	b128      	cbz	r0, 1cd68 <bt_smp_update_keys+0x7c>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1cd5c:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   1cd60:	7b53      	ldrb	r3, [r2, #13]
   1cd62:	f043 0302 	orr.w	r3, r3, #2
   1cd66:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   1cd68:	7a2a      	ldrb	r2, [r5, #8]
   1cd6a:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   1cd6e:	2a03      	cmp	r2, #3
   1cd70:	7b4b      	ldrb	r3, [r1, #13]
   1cd72:	d836      	bhi.n	1cde2 <bt_smp_update_keys+0xf6>
   1cd74:	b3c2      	cbz	r2, 1cde8 <bt_smp_update_keys+0xfc>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1cd76:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1cd7a:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   1cd7c:	7d2b      	ldrb	r3, [r5, #20]
   1cd7e:	7b6a      	ldrb	r2, [r5, #13]
   1cd80:	4293      	cmp	r3, r2
   1cd82:	bf28      	it	cs
   1cd84:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1cd86:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1cd88:	4630      	mov	r0, r6
   1cd8a:	2105      	movs	r1, #5
   1cd8c:	f009 fe35 	bl	269fa <atomic_test_bit>
   1cd90:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
   1cd94:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1cd96:	b350      	cbz	r0, 1cdee <bt_smp_update_keys+0x102>
		conn->le.keys->flags |= BT_KEYS_SC;
   1cd98:	f042 0210 	orr.w	r2, r2, #16
   1cd9c:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1cd9e:	210d      	movs	r1, #13
   1cda0:	4630      	mov	r0, r6
   1cda2:	f009 fe2a 	bl	269fa <atomic_test_bit>
   1cda6:	b328      	cbz	r0, 1cdf4 <bt_smp_update_keys+0x108>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   1cda8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1cdac:	2120      	movs	r1, #32
   1cdae:	f009 fc6a 	bl	26686 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   1cdb2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1cdb6:	f105 0147 	add.w	r1, r5, #71	; 0x47
   1cdba:	2210      	movs	r2, #16
   1cdbc:	301a      	adds	r0, #26
   1cdbe:	f008 f85f 	bl	24e80 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   1cdc2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1cdc6:	2208      	movs	r2, #8
   1cdc8:	2100      	movs	r1, #0
   1cdca:	3010      	adds	r0, #16
   1cdcc:	f008 f863 	bl	24e96 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1cdd0:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1cdd4:	2202      	movs	r2, #2
}
   1cdd6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1cdda:	2100      	movs	r1, #0
   1cddc:	3018      	adds	r0, #24
   1cdde:	f008 b85a 	b.w	24e96 <memset>
	switch (smp->method) {
   1cde2:	3a05      	subs	r2, #5
   1cde4:	2a01      	cmp	r2, #1
   1cde6:	d9c6      	bls.n	1cd76 <bt_smp_update_keys+0x8a>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1cde8:	f023 0301 	bic.w	r3, r3, #1
   1cdec:	e7c5      	b.n	1cd7a <bt_smp_update_keys+0x8e>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   1cdee:	f022 0210 	bic.w	r2, r2, #16
   1cdf2:	735a      	strb	r2, [r3, #13]
}
   1cdf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1cdf6:	bf00      	nop
   1cdf8:	00028dd4 	.word	0x00028dd4
   1cdfc:	00028e5c 	.word	0x00028e5c
   1ce00:	0002be9a 	.word	0x0002be9a

0001ce04 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   1ce04:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1ce06:	4b07      	ldr	r3, [pc, #28]	; (1ce24 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   1ce08:	4807      	ldr	r0, [pc, #28]	; (1ce28 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1ce0a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   1ce0e:	f003 0306 	and.w	r3, r3, #6
   1ce12:	1f9a      	subs	r2, r3, #6
   1ce14:	4253      	negs	r3, r2
   1ce16:	4153      	adcs	r3, r2
   1ce18:	4a04      	ldr	r2, [pc, #16]	; (1ce2c <bt_smp_init+0x28>)
   1ce1a:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   1ce1c:	f7f9 fe1c 	bl	16a58 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   1ce20:	2000      	movs	r0, #0
   1ce22:	bd08      	pop	{r3, pc}
   1ce24:	200002b0 	.word	0x200002b0
   1ce28:	2000065c 	.word	0x2000065c
   1ce2c:	200029a1 	.word	0x200029a1

0001ce30 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   1ce30:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
   1ce32:	7802      	ldrb	r2, [r0, #0]
   1ce34:	2a01      	cmp	r2, #1
{
   1ce36:	4604      	mov	r4, r0
   1ce38:	460b      	mov	r3, r1
	switch (src->type) {
   1ce3a:	d016      	beq.n	1ce6a <uuid_to_uuid128+0x3a>
   1ce3c:	2a02      	cmp	r2, #2
   1ce3e:	d02c      	beq.n	1ce9a <uuid_to_uuid128+0x6a>
   1ce40:	b98a      	cbnz	r2, 1ce66 <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   1ce42:	4a19      	ldr	r2, [pc, #100]	; (1cea8 <uuid_to_uuid128+0x78>)
   1ce44:	460d      	mov	r5, r1
   1ce46:	f102 0710 	add.w	r7, r2, #16
   1ce4a:	6810      	ldr	r0, [r2, #0]
   1ce4c:	6851      	ldr	r1, [r2, #4]
   1ce4e:	462e      	mov	r6, r5
   1ce50:	c603      	stmia	r6!, {r0, r1}
   1ce52:	3208      	adds	r2, #8
   1ce54:	42ba      	cmp	r2, r7
   1ce56:	4635      	mov	r5, r6
   1ce58:	d1f7      	bne.n	1ce4a <uuid_to_uuid128+0x1a>
   1ce5a:	7812      	ldrb	r2, [r2, #0]
   1ce5c:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   1ce5e:	8862      	ldrh	r2, [r4, #2]
	dst[0] = val;
   1ce60:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   1ce62:	0a12      	lsrs	r2, r2, #8
   1ce64:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   1ce66:	bcf0      	pop	{r4, r5, r6, r7}
   1ce68:	4770      	bx	lr
		*dst = uuid128_base;
   1ce6a:	4a0f      	ldr	r2, [pc, #60]	; (1cea8 <uuid_to_uuid128+0x78>)
   1ce6c:	460d      	mov	r5, r1
   1ce6e:	f102 0710 	add.w	r7, r2, #16
   1ce72:	6810      	ldr	r0, [r2, #0]
   1ce74:	6851      	ldr	r1, [r2, #4]
   1ce76:	462e      	mov	r6, r5
   1ce78:	c603      	stmia	r6!, {r0, r1}
   1ce7a:	3208      	adds	r2, #8
   1ce7c:	42ba      	cmp	r2, r7
   1ce7e:	4635      	mov	r5, r6
   1ce80:	d1f7      	bne.n	1ce72 <uuid_to_uuid128+0x42>
   1ce82:	7812      	ldrb	r2, [r2, #0]
   1ce84:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   1ce86:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
   1ce88:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   1ce8a:	f3c2 2107 	ubfx	r1, r2, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   1ce8e:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
   1ce90:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
   1ce92:	0a12      	lsrs	r2, r2, #8
   1ce94:	7399      	strb	r1, [r3, #14]
   1ce96:	741a      	strb	r2, [r3, #16]
}
   1ce98:	e7e5      	b.n	1ce66 <uuid_to_uuid128+0x36>
		memcpy(dst, src, sizeof(*dst));
   1ce9a:	4601      	mov	r1, r0
}
   1ce9c:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
   1ce9e:	2211      	movs	r2, #17
   1cea0:	4618      	mov	r0, r3
   1cea2:	f007 bfed 	b.w	24e80 <memcpy>
   1cea6:	bf00      	nop
   1cea8:	0002c1f9 	.word	0x0002c1f9

0001ceac <bt_uuid_to_str>:
	}
	return true;
}

void bt_uuid_to_str(const struct bt_uuid *uuid, char *str, size_t len)
{
   1ceac:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t tmp1, tmp5;
	uint16_t tmp0, tmp2, tmp3, tmp4;

	switch (uuid->type) {
   1ceae:	7805      	ldrb	r5, [r0, #0]
   1ceb0:	2d01      	cmp	r5, #1
{
   1ceb2:	b08b      	sub	sp, #44	; 0x2c
   1ceb4:	4604      	mov	r4, r0
   1ceb6:	460e      	mov	r6, r1
   1ceb8:	4617      	mov	r7, r2
	switch (uuid->type) {
   1ceba:	d00b      	beq.n	1ced4 <bt_uuid_to_str+0x28>
   1cebc:	2d02      	cmp	r5, #2
   1cebe:	d00c      	beq.n	1ceda <bt_uuid_to_str+0x2e>
   1cec0:	2d00      	cmp	r5, #0
   1cec2:	d142      	bne.n	1cf4a <bt_uuid_to_str+0x9e>
	case BT_UUID_TYPE_16:
		snprintk(str, len, "%04x", BT_UUID_16(uuid)->val);
   1cec4:	8843      	ldrh	r3, [r0, #2]
   1cec6:	4a23      	ldr	r2, [pc, #140]	; (1cf54 <bt_uuid_to_str+0xa8>)
		break;
	case BT_UUID_TYPE_32:
		snprintk(str, len, "%08x", BT_UUID_32(uuid)->val);
   1cec8:	4639      	mov	r1, r7
   1ceca:	4630      	mov	r0, r6
   1cecc:	f007 fe45 	bl	24b5a <snprintk>
		break;
	default:
		(void)memset(str, 0, len);
		return;
	}
}
   1ced0:	b00b      	add	sp, #44	; 0x2c
   1ced2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snprintk(str, len, "%08x", BT_UUID_32(uuid)->val);
   1ced4:	6843      	ldr	r3, [r0, #4]
   1ced6:	4a20      	ldr	r2, [pc, #128]	; (1cf58 <bt_uuid_to_str+0xac>)
   1ced8:	e7f6      	b.n	1cec8 <bt_uuid_to_str+0x1c>
		memcpy(&tmp0, &BT_UUID_128(uuid)->val[0], sizeof(tmp0));
   1ceda:	462a      	mov	r2, r5
   1cedc:	1c41      	adds	r1, r0, #1
   1cede:	a806      	add	r0, sp, #24
   1cee0:	f007 ffce 	bl	24e80 <memcpy>
		memcpy(&tmp1, &BT_UUID_128(uuid)->val[2], sizeof(tmp1));
   1cee4:	1ce1      	adds	r1, r4, #3
   1cee6:	2204      	movs	r2, #4
   1cee8:	a808      	add	r0, sp, #32
   1ceea:	f007 ffc9 	bl	24e80 <memcpy>
		memcpy(&tmp2, &BT_UUID_128(uuid)->val[6], sizeof(tmp2));
   1ceee:	462a      	mov	r2, r5
   1cef0:	1de1      	adds	r1, r4, #7
   1cef2:	f10d 001a 	add.w	r0, sp, #26
   1cef6:	f007 ffc3 	bl	24e80 <memcpy>
		memcpy(&tmp3, &BT_UUID_128(uuid)->val[8], sizeof(tmp3));
   1cefa:	462a      	mov	r2, r5
   1cefc:	f104 0109 	add.w	r1, r4, #9
   1cf00:	a807      	add	r0, sp, #28
   1cf02:	f007 ffbd 	bl	24e80 <memcpy>
		memcpy(&tmp4, &BT_UUID_128(uuid)->val[10], sizeof(tmp4));
   1cf06:	462a      	mov	r2, r5
   1cf08:	f104 010b 	add.w	r1, r4, #11
   1cf0c:	f10d 001e 	add.w	r0, sp, #30
   1cf10:	f007 ffb6 	bl	24e80 <memcpy>
		memcpy(&tmp5, &BT_UUID_128(uuid)->val[12], sizeof(tmp5));
   1cf14:	f104 010d 	add.w	r1, r4, #13
   1cf18:	2204      	movs	r2, #4
   1cf1a:	a809      	add	r0, sp, #36	; 0x24
   1cf1c:	f007 ffb0 	bl	24e80 <memcpy>
		snprintk(str, len, "%08x-%04x-%04x-%04x-%08x%04x",
   1cf20:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   1cf24:	9304      	str	r3, [sp, #16]
   1cf26:	9b08      	ldr	r3, [sp, #32]
   1cf28:	9303      	str	r3, [sp, #12]
   1cf2a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   1cf2e:	9302      	str	r3, [sp, #8]
   1cf30:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   1cf34:	9301      	str	r3, [sp, #4]
   1cf36:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   1cf3a:	9300      	str	r3, [sp, #0]
   1cf3c:	4a07      	ldr	r2, [pc, #28]	; (1cf5c <bt_uuid_to_str+0xb0>)
   1cf3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1cf40:	4639      	mov	r1, r7
   1cf42:	4630      	mov	r0, r6
   1cf44:	f007 fe09 	bl	24b5a <snprintk>
		break;
   1cf48:	e7c2      	b.n	1ced0 <bt_uuid_to_str+0x24>
		(void)memset(str, 0, len);
   1cf4a:	2100      	movs	r1, #0
   1cf4c:	4630      	mov	r0, r6
   1cf4e:	f007 ffa2 	bl	24e96 <memset>
		return;
   1cf52:	e7bd      	b.n	1ced0 <bt_uuid_to_str+0x24>
   1cf54:	0002bbce 	.word	0x0002bbce
   1cf58:	0002a2e2 	.word	0x0002a2e2
   1cf5c:	0002c1dc 	.word	0x0002c1dc

0001cf60 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1cf60:	4b02      	ldr	r3, [pc, #8]	; (1cf6c <net_buf_pool_get+0xc>)
   1cf62:	222c      	movs	r2, #44	; 0x2c
   1cf64:	fb02 3000 	mla	r0, r2, r0, r3
   1cf68:	4770      	bx	lr
   1cf6a:	bf00      	nop
   1cf6c:	20000a30 	.word	0x20000a30

0001cf70 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1cf70:	7983      	ldrb	r3, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1cf72:	4a06      	ldr	r2, [pc, #24]	; (1cf8c <net_buf_id+0x1c>)
   1cf74:	212c      	movs	r1, #44	; 0x2c
   1cf76:	fb01 2303 	mla	r3, r1, r3, r2
   1cf7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1cf7c:	7f1b      	ldrb	r3, [r3, #28]
   1cf7e:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1cf80:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1cf82:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1cf86:	fbb0 f0f3 	udiv	r0, r0, r3
   1cf8a:	4770      	bx	lr
   1cf8c:	20000a30 	.word	0x20000a30

0001cf90 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1cf90:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1cf92:	4a0a      	ldr	r2, [pc, #40]	; (1cfbc <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1cf94:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1cf96:	242c      	movs	r4, #44	; 0x2c
   1cf98:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   1cf9c:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1cf9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1cfa0:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1cfa2:	6823      	ldr	r3, [r4, #0]
   1cfa4:	429a      	cmp	r2, r3
   1cfa6:	bf94      	ite	ls
   1cfa8:	600a      	strls	r2, [r1, #0]
   1cfaa:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1cfac:	f7ff ffe0 	bl	1cf70 <net_buf_id>
   1cfb0:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1cfb4:	fb02 3000 	mla	r0, r2, r0, r3
   1cfb8:	bd10      	pop	{r4, pc}
   1cfba:	bf00      	nop
   1cfbc:	20000a30 	.word	0x20000a30

0001cfc0 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1cfc0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1cfc4:	4605      	mov	r5, r0
   1cfc6:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1cfc8:	4610      	mov	r0, r2
   1cfca:	4619      	mov	r1, r3
{
   1cfcc:	4616      	mov	r6, r2
   1cfce:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1cfd0:	f00b fb7e 	bl	286d0 <sys_clock_timeout_end_calc>
   1cfd4:	4680      	mov	r8, r0
   1cfd6:	4689      	mov	r9, r1
	__asm__ volatile(
   1cfd8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cfdc:	f3ef 8a11 	mrs	sl, BASEPRI
   1cfe0:	f383 8812 	msr	BASEPRI_MAX, r3
   1cfe4:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1cfe8:	8b6b      	ldrh	r3, [r5, #26]
   1cfea:	2b00      	cmp	r3, #0
   1cfec:	d059      	beq.n	1d0a2 <net_buf_alloc_len+0xe2>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1cfee:	8b2a      	ldrh	r2, [r5, #24]
   1cff0:	429a      	cmp	r2, r3
   1cff2:	d93d      	bls.n	1d070 <net_buf_alloc_len+0xb0>
	return z_impl_k_queue_get(queue, timeout);
   1cff4:	2200      	movs	r2, #0
   1cff6:	2300      	movs	r3, #0
   1cff8:	4628      	mov	r0, r5
   1cffa:	f004 f9cf 	bl	2139c <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1cffe:	4604      	mov	r4, r0
   1d000:	2800      	cmp	r0, #0
   1d002:	d035      	beq.n	1d070 <net_buf_alloc_len+0xb0>
	__asm__ volatile(
   1d004:	f38a 8811 	msr	BASEPRI, sl
   1d008:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1d00c:	9b01      	ldr	r3, [sp, #4]
   1d00e:	2b00      	cmp	r3, #0
   1d010:	d057      	beq.n	1d0c2 <net_buf_alloc_len+0x102>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1d012:	ea56 0307 	orrs.w	r3, r6, r7
   1d016:	d010      	beq.n	1d03a <net_buf_alloc_len+0x7a>
   1d018:	1c7b      	adds	r3, r7, #1
   1d01a:	bf08      	it	eq
   1d01c:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1d020:	d00b      	beq.n	1d03a <net_buf_alloc_len+0x7a>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   1d022:	f005 f803 	bl	2202c <sys_clock_tick_get>
   1d026:	ebb8 0600 	subs.w	r6, r8, r0
   1d02a:	eb69 0701 	sbc.w	r7, r9, r1
   1d02e:	2e00      	cmp	r6, #0
   1d030:	f177 0300 	sbcs.w	r3, r7, #0
   1d034:	bfbc      	itt	lt
   1d036:	2600      	movlt	r6, #0
   1d038:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1d03a:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1d03c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 1d0d8 <net_buf_alloc_len+0x118>
   1d040:	f04f 092c 	mov.w	r9, #44	; 0x2c
   1d044:	fb09 8303 	mla	r3, r9, r3, r8
   1d048:	4632      	mov	r2, r6
   1d04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d04c:	681b      	ldr	r3, [r3, #0]
   1d04e:	a901      	add	r1, sp, #4
   1d050:	681d      	ldr	r5, [r3, #0]
   1d052:	4620      	mov	r0, r4
   1d054:	463b      	mov	r3, r7
   1d056:	47a8      	blx	r5
   1d058:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1d05a:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1d05c:	2800      	cmp	r0, #0
   1d05e:	d131      	bne.n	1d0c4 <net_buf_alloc_len+0x104>
	k_lifo_put(&pool->free, buf);
   1d060:	79a0      	ldrb	r0, [r4, #6]
   1d062:	4621      	mov	r1, r4
   1d064:	fb00 8009 	mla	r0, r0, r9, r8
   1d068:	f00b f96f 	bl	2834a <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1d06c:	462c      	mov	r4, r5
}
   1d06e:	e024      	b.n	1d0ba <net_buf_alloc_len+0xfa>
		uninit_count = pool->uninit_count--;
   1d070:	8b6b      	ldrh	r3, [r5, #26]
   1d072:	1e5a      	subs	r2, r3, #1
   1d074:	836a      	strh	r2, [r5, #26]
   1d076:	f38a 8811 	msr	BASEPRI, sl
   1d07a:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1d07e:	7f2a      	ldrb	r2, [r5, #28]
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1d080:	8b2c      	ldrh	r4, [r5, #24]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1d082:	f102 0017 	add.w	r0, r2, #23
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1d086:	1ae4      	subs	r4, r4, r3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1d088:	6aab      	ldr	r3, [r5, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1d08a:	f020 0003 	bic.w	r0, r0, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1d08e:	fb04 3400 	mla	r4, r4, r0, r3
	return pool - _net_buf_pool_list;
   1d092:	4811      	ldr	r0, [pc, #68]	; (1d0d8 <net_buf_alloc_len+0x118>)
   1d094:	4b11      	ldr	r3, [pc, #68]	; (1d0dc <net_buf_alloc_len+0x11c>)
	buf->user_data_size = pool->user_data_size;
   1d096:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   1d098:	1a2d      	subs	r5, r5, r0
   1d09a:	10ad      	asrs	r5, r5, #2
   1d09c:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1d09e:	71a5      	strb	r5, [r4, #6]
		goto success;
   1d0a0:	e7b4      	b.n	1d00c <net_buf_alloc_len+0x4c>
   1d0a2:	f38a 8811 	msr	BASEPRI, sl
   1d0a6:	f3bf 8f6f 	isb	sy
   1d0aa:	4632      	mov	r2, r6
   1d0ac:	463b      	mov	r3, r7
   1d0ae:	4628      	mov	r0, r5
   1d0b0:	f004 f974 	bl	2139c <z_impl_k_queue_get>
	if (!buf) {
   1d0b4:	4604      	mov	r4, r0
   1d0b6:	2800      	cmp	r0, #0
   1d0b8:	d1a8      	bne.n	1d00c <net_buf_alloc_len+0x4c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1d0ba:	4620      	mov	r0, r4
   1d0bc:	b002      	add	sp, #8
   1d0be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf->__buf = NULL;
   1d0c2:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1d0c4:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1d0c6:	2201      	movs	r2, #1
	buf->frags = NULL;
   1d0c8:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1d0ca:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   1d0cc:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   1d0ce:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1d0d0:	6923      	ldr	r3, [r4, #16]
   1d0d2:	81e2      	strh	r2, [r4, #14]
   1d0d4:	60a3      	str	r3, [r4, #8]
	return buf;
   1d0d6:	e7f0      	b.n	1d0ba <net_buf_alloc_len+0xfa>
   1d0d8:	20000a30 	.word	0x20000a30
   1d0dc:	ba2e8ba3 	.word	0xba2e8ba3

0001d0e0 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1d0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d0e4:	4d16      	ldr	r5, [pc, #88]	; (1d140 <net_buf_unref+0x60>)
   1d0e6:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1d0e8:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1d0ea:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   1d0ec:	b90c      	cbnz	r4, 1d0f2 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1d0ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1d0f2:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1d0f4:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   1d0f8:	3b01      	subs	r3, #1
   1d0fa:	b2db      	uxtb	r3, r3
   1d0fc:	7123      	strb	r3, [r4, #4]
   1d0fe:	2b00      	cmp	r3, #0
   1d100:	d1f5      	bne.n	1d0ee <net_buf_unref+0xe>
		if (buf->__buf) {
   1d102:	6921      	ldr	r1, [r4, #16]
   1d104:	b159      	cbz	r1, 1d11e <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1d106:	7963      	ldrb	r3, [r4, #5]
   1d108:	079b      	lsls	r3, r3, #30
   1d10a:	d407      	bmi.n	1d11c <net_buf_unref+0x3c>
	pool->alloc->cb->unref(buf, data);
   1d10c:	79a3      	ldrb	r3, [r4, #6]
   1d10e:	fb07 5303 	mla	r3, r7, r3, r5
   1d112:	4620      	mov	r0, r4
   1d114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d116:	681b      	ldr	r3, [r3, #0]
   1d118:	689b      	ldr	r3, [r3, #8]
   1d11a:	4798      	blx	r3
			buf->__buf = NULL;
   1d11c:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1d11e:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1d120:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   1d122:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1d126:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1d128:	6a1b      	ldr	r3, [r3, #32]
   1d12a:	b11b      	cbz	r3, 1d134 <net_buf_unref+0x54>
			pool->destroy(buf);
   1d12c:	4620      	mov	r0, r4
   1d12e:	4798      	blx	r3
{
   1d130:	4644      	mov	r4, r8
   1d132:	e7db      	b.n	1d0ec <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   1d134:	4621      	mov	r1, r4
   1d136:	fb00 5007 	mla	r0, r0, r7, r5
   1d13a:	f00b f906 	bl	2834a <k_queue_prepend>
}
   1d13e:	e7f7      	b.n	1d130 <net_buf_unref+0x50>
   1d140:	20000a30 	.word	0x20000a30

0001d144 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1d144:	b570      	push	{r4, r5, r6, lr}
   1d146:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   1d148:	480d      	ldr	r0, [pc, #52]	; (1d180 <onoff_stop+0x3c>)
   1d14a:	1a23      	subs	r3, r4, r0
   1d14c:	109a      	asrs	r2, r3, #2
   1d14e:	4b0d      	ldr	r3, [pc, #52]	; (1d184 <onoff_stop+0x40>)
   1d150:	4353      	muls	r3, r2
   1d152:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
   1d154:	250c      	movs	r5, #12
   1d156:	435d      	muls	r5, r3
   1d158:	f105 0340 	add.w	r3, r5, #64	; 0x40
{
   1d15c:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
   1d15e:	4418      	add	r0, r3
   1d160:	2140      	movs	r1, #64	; 0x40
   1d162:	f00a f895 	bl	27290 <set_off_state>
	if (err < 0) {
   1d166:	1e01      	subs	r1, r0, #0
   1d168:	db04      	blt.n	1d174 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
   1d16a:	4b07      	ldr	r3, [pc, #28]	; (1d188 <onoff_stop+0x44>)
   1d16c:	442b      	add	r3, r5
   1d16e:	685b      	ldr	r3, [r3, #4]
   1d170:	4798      	blx	r3
	return 0;
   1d172:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
   1d174:	4620      	mov	r0, r4
   1d176:	4633      	mov	r3, r6
}
   1d178:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1d17c:	4718      	bx	r3
   1d17e:	bf00      	nop
   1d180:	20002560 	.word	0x20002560
   1d184:	b6db6db7 	.word	0xb6db6db7
   1d188:	000298ec 	.word	0x000298ec

0001d18c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1d18c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1d190:	4c0f      	ldr	r4, [pc, #60]	; (1d1d0 <onoff_start+0x44>)
   1d192:	4d10      	ldr	r5, [pc, #64]	; (1d1d4 <onoff_start+0x48>)
   1d194:	1b03      	subs	r3, r0, r4
   1d196:	109b      	asrs	r3, r3, #2
   1d198:	435d      	muls	r5, r3
   1d19a:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
   1d19c:	250c      	movs	r5, #12
   1d19e:	435d      	muls	r5, r3
{
   1d1a0:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
   1d1a2:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
   1d1a6:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
   1d1a8:	4420      	add	r0, r4
   1d1aa:	2140      	movs	r1, #64	; 0x40
   1d1ac:	f00a f889 	bl	272c2 <set_starting_state>
	if (err < 0) {
   1d1b0:	1e01      	subs	r1, r0, #0
   1d1b2:	db08      	blt.n	1d1c6 <onoff_start+0x3a>
	subdata->cb = cb;
   1d1b4:	4b08      	ldr	r3, [pc, #32]	; (1d1d8 <onoff_start+0x4c>)
   1d1b6:	442c      	add	r4, r5
	subdata->user_data = user_data;
   1d1b8:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   1d1bc:	4b07      	ldr	r3, [pc, #28]	; (1d1dc <onoff_start+0x50>)
   1d1be:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   1d1c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   1d1c4:	4718      	bx	r3
		notify(mgr, err);
   1d1c6:	4638      	mov	r0, r7
   1d1c8:	4633      	mov	r3, r6
}
   1d1ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   1d1ce:	4718      	bx	r3
   1d1d0:	20002560 	.word	0x20002560
   1d1d4:	b6db6db7 	.word	0xb6db6db7
   1d1d8:	00027325 	.word	0x00027325
   1d1dc:	000298ec 	.word	0x000298ec

0001d1e0 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1d1e0:	2200      	movs	r2, #0
{
   1d1e2:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1d1e4:	2101      	movs	r1, #1
{
   1d1e6:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1d1e8:	4610      	mov	r0, r2
   1d1ea:	f7f6 fc2d 	bl	13a48 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   1d1ee:	2000      	movs	r0, #0
   1d1f0:	f7f6 fbf8 	bl	139e4 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1d1f4:	480f      	ldr	r0, [pc, #60]	; (1d234 <clk_init+0x54>)
   1d1f6:	f002 fbdd 	bl	1f9b4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1d1fa:	4b0f      	ldr	r3, [pc, #60]	; (1d238 <clk_init+0x58>)
   1d1fc:	4298      	cmp	r0, r3
   1d1fe:	d115      	bne.n	1d22c <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1d200:	f00a fd52 	bl	27ca8 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   1d204:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1d206:	490d      	ldr	r1, [pc, #52]	; (1d23c <clk_init+0x5c>)
   1d208:	4630      	mov	r0, r6
   1d20a:	f007 fbd7 	bl	249bc <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1d20e:	2800      	cmp	r0, #0
   1d210:	db0b      	blt.n	1d22a <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1d212:	2501      	movs	r5, #1
   1d214:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
   1d216:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1d218:	4908      	ldr	r1, [pc, #32]	; (1d23c <clk_init+0x5c>)
   1d21a:	f104 001c 	add.w	r0, r4, #28
   1d21e:	f007 fbcd 	bl	249bc <onoff_manager_init>
		if (err < 0) {
   1d222:	2800      	cmp	r0, #0
   1d224:	db01      	blt.n	1d22a <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1d226:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   1d228:	2000      	movs	r0, #0
}
   1d22a:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1d22c:	f06f 0004 	mvn.w	r0, #4
   1d230:	e7fb      	b.n	1d22a <clk_init+0x4a>
   1d232:	bf00      	nop
   1d234:	0001d275 	.word	0x0001d275
   1d238:	0bad0000 	.word	0x0bad0000
   1d23c:	00029904 	.word	0x00029904

0001d240 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1d240:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1d242:	230c      	movs	r3, #12
   1d244:	4809      	ldr	r0, [pc, #36]	; (1d26c <clkstarted_handle.constprop.0+0x2c>)
   1d246:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   1d248:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1d24a:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   1d24c:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   1d250:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   1d252:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   1d254:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   1d256:	4418      	add	r0, r3
   1d258:	f00a f851 	bl	272fe <set_on_state>
	if (callback) {
   1d25c:	b12d      	cbz	r5, 1d26a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1d25e:	4632      	mov	r2, r6
   1d260:	462b      	mov	r3, r5
   1d262:	4803      	ldr	r0, [pc, #12]	; (1d270 <clkstarted_handle.constprop.0+0x30>)
}
   1d264:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1d268:	4718      	bx	r3
}
   1d26a:	bd70      	pop	{r4, r5, r6, pc}
   1d26c:	20002560 	.word	0x20002560
   1d270:	00028a2c 	.word	0x00028a2c

0001d274 <clock_event_handler>:
	switch (event) {
   1d274:	b110      	cbz	r0, 1d27c <clock_event_handler+0x8>
   1d276:	2801      	cmp	r0, #1
   1d278:	d004      	beq.n	1d284 <clock_event_handler+0x10>
   1d27a:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1d27c:	4b03      	ldr	r3, [pc, #12]	; (1d28c <clock_event_handler+0x18>)
   1d27e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d280:	075b      	lsls	r3, r3, #29
   1d282:	d101      	bne.n	1d288 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1d284:	f7ff bfdc 	b.w	1d240 <clkstarted_handle.constprop.0>
}
   1d288:	4770      	bx	lr
   1d28a:	bf00      	nop
   1d28c:	20002560 	.word	0x20002560

0001d290 <generic_hfclk_start>:
{
   1d290:	b508      	push	{r3, lr}
	__asm__ volatile(
   1d292:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d296:	f3ef 8111 	mrs	r1, BASEPRI
   1d29a:	f383 8812 	msr	BASEPRI_MAX, r3
   1d29e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1d2a2:	4a12      	ldr	r2, [pc, #72]	; (1d2ec <generic_hfclk_start+0x5c>)
   1d2a4:	6813      	ldr	r3, [r2, #0]
   1d2a6:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   1d2aa:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   1d2ae:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1d2b0:	d00c      	beq.n	1d2cc <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1d2b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1d2b6:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1d2ba:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1d2be:	f013 0301 	ands.w	r3, r3, #1
   1d2c2:	d003      	beq.n	1d2cc <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   1d2c4:	480a      	ldr	r0, [pc, #40]	; (1d2f0 <generic_hfclk_start+0x60>)
   1d2c6:	f00a f81a 	bl	272fe <set_on_state>
			already_started = true;
   1d2ca:	2301      	movs	r3, #1
	__asm__ volatile(
   1d2cc:	f381 8811 	msr	BASEPRI, r1
   1d2d0:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1d2d4:	b123      	cbz	r3, 1d2e0 <generic_hfclk_start+0x50>
}
   1d2d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1d2da:	2000      	movs	r0, #0
   1d2dc:	f7ff bfb0 	b.w	1d240 <clkstarted_handle.constprop.0>
}
   1d2e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1d2e4:	2001      	movs	r0, #1
   1d2e6:	f002 bb55 	b.w	1f994 <nrfx_clock_start>
   1d2ea:	bf00      	nop
   1d2ec:	200025b0 	.word	0x200025b0
   1d2f0:	200025a0 	.word	0x200025a0

0001d2f4 <lfclk_start>:
{
   1d2f4:	b510      	push	{r4, lr}
	if (!once) {
   1d2f6:	4c07      	ldr	r4, [pc, #28]	; (1d314 <lfclk_start+0x20>)
   1d2f8:	7823      	ldrb	r3, [r4, #0]
   1d2fa:	b92b      	cbnz	r3, 1d308 <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
   1d2fc:	f44f 70a5 	mov.w	r0, #330	; 0x14a
   1d300:	f00b f9e2 	bl	286c8 <z_impl_k_busy_wait>
		once = true;
   1d304:	2301      	movs	r3, #1
   1d306:	7023      	strb	r3, [r4, #0]
}
   1d308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1d30c:	2000      	movs	r0, #0
   1d30e:	f002 bb41 	b.w	1f994 <nrfx_clock_start>
   1d312:	bf00      	nop
   1d314:	200029a2 	.word	0x200029a2

0001d318 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d318:	4b09      	ldr	r3, [pc, #36]	; (1d340 <generic_hfclk_stop+0x28>)
   1d31a:	f3bf 8f5b 	dmb	ish
   1d31e:	e853 2f00 	ldrex	r2, [r3]
   1d322:	f022 0102 	bic.w	r1, r2, #2
   1d326:	e843 1000 	strex	r0, r1, [r3]
   1d32a:	2800      	cmp	r0, #0
   1d32c:	d1f7      	bne.n	1d31e <generic_hfclk_stop+0x6>
   1d32e:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   1d332:	07d3      	lsls	r3, r2, #31
   1d334:	d402      	bmi.n	1d33c <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1d336:	2001      	movs	r0, #1
   1d338:	f00a bcb1 	b.w	27c9e <nrfx_clock_stop>
}
   1d33c:	4770      	bx	lr
   1d33e:	bf00      	nop
   1d340:	200025b0 	.word	0x200025b0

0001d344 <api_blocking_start>:
{
   1d344:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1d346:	2200      	movs	r2, #0
   1d348:	2301      	movs	r3, #1
   1d34a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1d34e:	ab04      	add	r3, sp, #16
   1d350:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1d354:	4a09      	ldr	r2, [pc, #36]	; (1d37c <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1d356:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1d35a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1d35c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1d360:	f00a f803 	bl	2736a <api_start>
	if (err < 0) {
   1d364:	2800      	cmp	r0, #0
   1d366:	db05      	blt.n	1d374 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1d368:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1d36c:	2300      	movs	r3, #0
   1d36e:	4668      	mov	r0, sp
   1d370:	f004 fbec 	bl	21b4c <z_impl_k_sem_take>
}
   1d374:	b007      	add	sp, #28
   1d376:	f85d fb04 	ldr.w	pc, [sp], #4
   1d37a:	bf00      	nop
   1d37c:	0002733d 	.word	0x0002733d

0001d380 <z_nrf_clock_control_lf_on>:
{
   1d380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1d384:	493a      	ldr	r1, [pc, #232]	; (1d470 <z_nrf_clock_control_lf_on+0xf0>)
   1d386:	f3bf 8f5b 	dmb	ish
   1d38a:	4606      	mov	r6, r0
   1d38c:	2201      	movs	r2, #1
   1d38e:	e851 3f00 	ldrex	r3, [r1]
   1d392:	e841 2000 	strex	r0, r2, [r1]
   1d396:	2800      	cmp	r0, #0
   1d398:	d1f9      	bne.n	1d38e <z_nrf_clock_control_lf_on+0xe>
   1d39a:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1d39e:	b933      	cbnz	r3, 1d3ae <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1d3a0:	4934      	ldr	r1, [pc, #208]	; (1d474 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
   1d3a2:	4835      	ldr	r0, [pc, #212]	; (1d478 <z_nrf_clock_control_lf_on+0xf8>)
   1d3a4:	604b      	str	r3, [r1, #4]
   1d3a6:	60cb      	str	r3, [r1, #12]
   1d3a8:	608a      	str	r2, [r1, #8]
   1d3aa:	f007 fb1a 	bl	249e2 <onoff_request>
	switch (start_mode) {
   1d3ae:	1e73      	subs	r3, r6, #1
   1d3b0:	2b01      	cmp	r3, #1
   1d3b2:	d832      	bhi.n	1d41a <z_nrf_clock_control_lf_on+0x9a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1d3b4:	2e01      	cmp	r6, #1
   1d3b6:	d107      	bne.n	1d3c8 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1d3b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d3bc:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1d3c0:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1d3c4:	2b01      	cmp	r3, #1
   1d3c6:	d028      	beq.n	1d41a <z_nrf_clock_control_lf_on+0x9a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1d3c8:	f00b f92d 	bl	28626 <k_is_in_isr>
   1d3cc:	4604      	mov	r4, r0
   1d3ce:	b918      	cbnz	r0, 1d3d8 <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   1d3d0:	4b2a      	ldr	r3, [pc, #168]	; (1d47c <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
   1d3d2:	781b      	ldrb	r3, [r3, #0]
   1d3d4:	2b00      	cmp	r3, #0
   1d3d6:	d144      	bne.n	1d462 <z_nrf_clock_control_lf_on+0xe2>
	__asm__ volatile(
   1d3d8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d3dc:	f3ef 8511 	mrs	r5, BASEPRI
   1d3e0:	f383 8812 	msr	BASEPRI_MAX, r3
   1d3e4:	f3bf 8f6f 	isb	sy
   1d3e8:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1d3ea:	4f25      	ldr	r7, [pc, #148]	; (1d480 <z_nrf_clock_control_lf_on+0x100>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d3ec:	f8df 8094 	ldr.w	r8, [pc, #148]	; 1d484 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d3f0:	f8df 9094 	ldr.w	r9, [pc, #148]	; 1d488 <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1d3f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1d3f8:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1d3fc:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   1d400:	03d2      	lsls	r2, r2, #15
   1d402:	d50c      	bpl.n	1d41e <z_nrf_clock_control_lf_on+0x9e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1d404:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1d408:	2b01      	cmp	r3, #1
   1d40a:	d001      	beq.n	1d410 <z_nrf_clock_control_lf_on+0x90>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1d40c:	2e01      	cmp	r6, #1
   1d40e:	d106      	bne.n	1d41e <z_nrf_clock_control_lf_on+0x9e>
	if (isr_mode) {
   1d410:	b30c      	cbz	r4, 1d456 <z_nrf_clock_control_lf_on+0xd6>
	__asm__ volatile(
   1d412:	f385 8811 	msr	BASEPRI, r5
   1d416:	f3bf 8f6f 	isb	sy
}
   1d41a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1d41e:	b1ac      	cbz	r4, 1d44c <z_nrf_clock_control_lf_on+0xcc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1d420:	4628      	mov	r0, r5
   1d422:	f7f6 fa3f 	bl	138a4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1d426:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1d42a:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1d42e:	2b00      	cmp	r3, #0
   1d430:	d1e0      	bne.n	1d3f4 <z_nrf_clock_control_lf_on+0x74>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1d432:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   1d434:	2900      	cmp	r1, #0
   1d436:	d0dd      	beq.n	1d3f4 <z_nrf_clock_control_lf_on+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d438:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1d43a:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   1d43c:	2301      	movs	r3, #1
   1d43e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   1d442:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d446:	f8c9 3000 	str.w	r3, [r9]
}
   1d44a:	e7d3      	b.n	1d3f4 <z_nrf_clock_control_lf_on+0x74>
	return z_impl_k_sleep(timeout);
   1d44c:	2100      	movs	r1, #0
   1d44e:	2021      	movs	r0, #33	; 0x21
   1d450:	f004 fac2 	bl	219d8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1d454:	e7e7      	b.n	1d426 <z_nrf_clock_control_lf_on+0xa6>
    p_reg->INTENSET = mask;
   1d456:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d45a:	2202      	movs	r2, #2
   1d45c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1d460:	e7db      	b.n	1d41a <z_nrf_clock_control_lf_on+0x9a>
    p_reg->INTENCLR = mask;
   1d462:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d466:	2202      	movs	r2, #2
   1d468:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   1d46c:	4605      	mov	r5, r0
}
   1d46e:	e7bc      	b.n	1d3ea <z_nrf_clock_control_lf_on+0x6a>
   1d470:	200025b4 	.word	0x200025b4
   1d474:	20002550 	.word	0x20002550
   1d478:	2000257c 	.word	0x2000257c
   1d47c:	200033dc 	.word	0x200033dc
   1d480:	40000104 	.word	0x40000104
   1d484:	e000e100 	.word	0xe000e100
   1d488:	40000008 	.word	0x40000008

0001d48c <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
   1d48c:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
   1d48e:	4c04      	ldr	r4, [pc, #16]	; (1d4a0 <rtt_console_init+0x14>)
   1d490:	4620      	mov	r0, r4
   1d492:	f7f5 ffb5 	bl	13400 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
   1d496:	4620      	mov	r0, r4
   1d498:	f7f6 ff54 	bl	14344 <__stdout_hook_install>

	return 0;
}
   1d49c:	2000      	movs	r0, #0
   1d49e:	bd10      	pop	{r4, pc}
   1d4a0:	0001d4a5 	.word	0x0001d4a5

0001d4a4 <rtt_console_out>:
{
   1d4a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   1d4a8:	f8df 8060 	ldr.w	r8, [pc, #96]	; 1d50c <rtt_console_out+0x68>
   1d4ac:	4e16      	ldr	r6, [pc, #88]	; (1d508 <rtt_console_out+0x64>)
	char c = (char)character;
   1d4ae:	f88d 0007 	strb.w	r0, [sp, #7]
{
   1d4b2:	4604      	mov	r4, r0
	char c = (char)character;
   1d4b4:	2503      	movs	r5, #3
   1d4b6:	f04f 33ff 	mov.w	r3, #4294967295
   1d4ba:	f04f 32ff 	mov.w	r2, #4294967295
   1d4be:	4640      	mov	r0, r8
   1d4c0:	f003 fe24 	bl	2110c <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
   1d4c4:	2201      	movs	r2, #1
   1d4c6:	f10d 0107 	add.w	r1, sp, #7
   1d4ca:	2000      	movs	r0, #0
   1d4cc:	f003 fbf0 	bl	20cb0 <SEGGER_RTT_WriteNoLock>
   1d4d0:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
   1d4d2:	4640      	mov	r0, r8
   1d4d4:	f003 fe98 	bl	21208 <z_impl_k_mutex_unlock>
		if (cnt) {
   1d4d8:	b12f      	cbz	r7, 1d4e6 <rtt_console_out+0x42>
			host_present = true;
   1d4da:	2301      	movs	r3, #1
   1d4dc:	7033      	strb	r3, [r6, #0]
}
   1d4de:	4620      	mov	r0, r4
   1d4e0:	b002      	add	sp, #8
   1d4e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
   1d4e6:	7833      	ldrb	r3, [r6, #0]
   1d4e8:	2b00      	cmp	r3, #0
   1d4ea:	d0f8      	beq.n	1d4de <rtt_console_out+0x3a>
			if (max_cnt) {
   1d4ec:	3d01      	subs	r5, #1
   1d4ee:	d008      	beq.n	1d502 <rtt_console_out+0x5e>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
   1d4f0:	f00b f899 	bl	28626 <k_is_in_isr>
   1d4f4:	2800      	cmp	r0, #0
   1d4f6:	d1de      	bne.n	1d4b6 <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
   1d4f8:	2100      	movs	r1, #0
   1d4fa:	2042      	movs	r0, #66	; 0x42
   1d4fc:	f004 fa6c 	bl	219d8 <z_impl_k_sleep>
   1d500:	e7d9      	b.n	1d4b6 <rtt_console_out+0x12>
				host_present = false;
   1d502:	7035      	strb	r5, [r6, #0]
   1d504:	e7eb      	b.n	1d4de <rtt_console_out+0x3a>
   1d506:	bf00      	nop
   1d508:	200029a3 	.word	0x200029a3
   1d50c:	20000978 	.word	0x20000978

0001d510 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   1d510:	b530      	push	{r4, r5, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1d512:	6840      	ldr	r0, [r0, #4]
   1d514:	7b04      	ldrb	r4, [r0, #12]
   1d516:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
   1d51a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1d51e:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
   1d522:	b085      	sub	sp, #20
   1d524:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
   1d528:	d104      	bne.n	1d534 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
   1d52a:	4628      	mov	r0, r5
   1d52c:	f002 fda6 	bl	2007c <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
   1d530:	2000      	movs	r0, #0
   1d532:	e02e      	b.n	1d592 <gpio_nrfx_pin_interrupt_configure+0x82>
	if (mode == GPIO_INT_MODE_LEVEL) {
   1d534:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1d538:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1d53c:	d12b      	bne.n	1d596 <gpio_nrfx_pin_interrupt_configure+0x86>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1d53e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   1d542:	bf0c      	ite	eq
   1d544:	2304      	moveq	r3, #4
   1d546:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   1d548:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1d54c:	6883      	ldr	r3, [r0, #8]
   1d54e:	fa23 f101 	lsr.w	r1, r3, r1
   1d552:	07c9      	lsls	r1, r1, #31
   1d554:	d42b      	bmi.n	1d5ae <gpio_nrfx_pin_interrupt_configure+0x9e>
   1d556:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1d55a:	d128      	bne.n	1d5ae <gpio_nrfx_pin_interrupt_configure+0x9e>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1d55c:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1d560:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1d564:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1d568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1d56c:	07db      	lsls	r3, r3, #31
   1d56e:	d41e      	bmi.n	1d5ae <gpio_nrfx_pin_interrupt_configure+0x9e>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1d570:	f10d 0407 	add.w	r4, sp, #7
   1d574:	4621      	mov	r1, r4
   1d576:	4628      	mov	r0, r5
   1d578:	f002 fcee 	bl	1ff58 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1d57c:	4b14      	ldr	r3, [pc, #80]	; (1d5d0 <gpio_nrfx_pin_interrupt_configure+0xc0>)
   1d57e:	4298      	cmp	r0, r3
   1d580:	d114      	bne.n	1d5ac <gpio_nrfx_pin_interrupt_configure+0x9c>
			err = nrfx_gpiote_channel_alloc(&ch);
   1d582:	4620      	mov	r0, r4
   1d584:	f002 fd32 	bl	1ffec <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1d588:	4b12      	ldr	r3, [pc, #72]	; (1d5d4 <gpio_nrfx_pin_interrupt_configure+0xc4>)
   1d58a:	4298      	cmp	r0, r3
   1d58c:	d00e      	beq.n	1d5ac <gpio_nrfx_pin_interrupt_configure+0x9c>
				return -ENOMEM;
   1d58e:	f06f 000b 	mvn.w	r0, #11
}
   1d592:	b005      	add	sp, #20
   1d594:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1d596:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   1d59a:	d005      	beq.n	1d5a8 <gpio_nrfx_pin_interrupt_configure+0x98>
   1d59c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   1d5a0:	bf0c      	ite	eq
   1d5a2:	2302      	moveq	r3, #2
   1d5a4:	2301      	movne	r3, #1
   1d5a6:	e7cf      	b.n	1d548 <gpio_nrfx_pin_interrupt_configure+0x38>
   1d5a8:	2303      	movs	r3, #3
   1d5aa:	e7cd      	b.n	1d548 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
   1d5ac:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1d5ae:	2300      	movs	r3, #0
   1d5b0:	4619      	mov	r1, r3
   1d5b2:	aa02      	add	r2, sp, #8
   1d5b4:	4628      	mov	r0, r5
   1d5b6:	f002 fb93 	bl	1fce0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1d5ba:	4b06      	ldr	r3, [pc, #24]	; (1d5d4 <gpio_nrfx_pin_interrupt_configure+0xc4>)
   1d5bc:	4298      	cmp	r0, r3
   1d5be:	d104      	bne.n	1d5ca <gpio_nrfx_pin_interrupt_configure+0xba>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1d5c0:	2101      	movs	r1, #1
   1d5c2:	4628      	mov	r0, r5
   1d5c4:	f002 fd18 	bl	1fff8 <nrfx_gpiote_trigger_enable>
   1d5c8:	e7b2      	b.n	1d530 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
   1d5ca:	f06f 0004 	mvn.w	r0, #4
   1d5ce:	e7e0      	b.n	1d592 <gpio_nrfx_pin_interrupt_configure+0x82>
   1d5d0:	0bad0004 	.word	0x0bad0004
   1d5d4:	0bad0000 	.word	0x0bad0000

0001d5d8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1d5d8:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1d5da:	f002 fcf7 	bl	1ffcc <nrfx_gpiote_is_init>
   1d5de:	4604      	mov	r4, r0
   1d5e0:	b968      	cbnz	r0, 1d5fe <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1d5e2:	f002 fccb 	bl	1ff7c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1d5e6:	4b08      	ldr	r3, [pc, #32]	; (1d608 <gpio_nrfx_init+0x30>)
   1d5e8:	4298      	cmp	r0, r3
   1d5ea:	d10a      	bne.n	1d602 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1d5ec:	4807      	ldr	r0, [pc, #28]	; (1d60c <gpio_nrfx_init+0x34>)
   1d5ee:	4621      	mov	r1, r4
   1d5f0:	f002 fcac 	bl	1ff4c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1d5f4:	4622      	mov	r2, r4
   1d5f6:	2105      	movs	r1, #5
   1d5f8:	2006      	movs	r0, #6
   1d5fa:	f7f6 fa25 	bl	13a48 <z_arm_irq_priority_set>
		return 0;
   1d5fe:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1d600:	bd10      	pop	{r4, pc}
		return -EIO;
   1d602:	f06f 0004 	mvn.w	r0, #4
   1d606:	e7fb      	b.n	1d600 <gpio_nrfx_init+0x28>
   1d608:	0bad0000 	.word	0x0bad0000
   1d60c:	0001d611 	.word	0x0001d611

0001d610 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1d610:	0943      	lsrs	r3, r0, #5
{
   1d612:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1d614:	d118      	bne.n	1d648 <nrfx_gpio_handler+0x38>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1d616:	4b0d      	ldr	r3, [pc, #52]	; (1d64c <nrfx_gpio_handler+0x3c>)
   1d618:	6859      	ldr	r1, [r3, #4]
   1d61a:	b1a9      	cbz	r1, 1d648 <nrfx_gpio_handler+0x38>
   1d61c:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1d61e:	4e0c      	ldr	r6, [pc, #48]	; (1d650 <nrfx_gpio_handler+0x40>)
	gpio_fire_callbacks(list, port, BIT(pin));
   1d620:	2501      	movs	r5, #1
   1d622:	2c00      	cmp	r4, #0
   1d624:	fa05 f500 	lsl.w	r5, r5, r0
	return node->next;
   1d628:	bf38      	it	cc
   1d62a:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
   1d62c:	688a      	ldr	r2, [r1, #8]
   1d62e:	402a      	ands	r2, r5
   1d630:	d002      	beq.n	1d638 <nrfx_gpio_handler+0x28>
			cb->handler(port, cb, cb->pin_mask & pins);
   1d632:	684b      	ldr	r3, [r1, #4]
   1d634:	4630      	mov	r0, r6
   1d636:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1d638:	b134      	cbz	r4, 1d648 <nrfx_gpio_handler+0x38>
   1d63a:	6823      	ldr	r3, [r4, #0]
   1d63c:	2b00      	cmp	r3, #0
   1d63e:	bf38      	it	cc
   1d640:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1d642:	4621      	mov	r1, r4
   1d644:	461c      	mov	r4, r3
   1d646:	e7f1      	b.n	1d62c <nrfx_gpio_handler+0x1c>
}
   1d648:	bd70      	pop	{r4, r5, r6, pc}
   1d64a:	bf00      	nop
   1d64c:	200025b8 	.word	0x200025b8
   1d650:	00028a44 	.word	0x00028a44

0001d654 <gpio_nrfx_pin_configure>:
{
   1d654:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   1d658:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d65a:	7b3b      	ldrb	r3, [r7, #12]
   1d65c:	f001 051f 	and.w	r5, r1, #31
{
   1d660:	b085      	sub	sp, #20
   1d662:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d664:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   1d668:	4614      	mov	r4, r2
   1d66a:	b9ca      	cbnz	r2, 1d6a0 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   1d66c:	a902      	add	r1, sp, #8
   1d66e:	4628      	mov	r0, r5
   1d670:	f002 fc72 	bl	1ff58 <nrfx_gpiote_channel_get>
   1d674:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   1d676:	4628      	mov	r0, r5
   1d678:	f002 fd22 	bl	200c0 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   1d67c:	4b48      	ldr	r3, [pc, #288]	; (1d7a0 <gpio_nrfx_pin_configure+0x14c>)
   1d67e:	4298      	cmp	r0, r3
   1d680:	d004      	beq.n	1d68c <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   1d682:	f06f 0004 	mvn.w	r0, #4
}
   1d686:	b005      	add	sp, #20
   1d688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   1d68c:	4284      	cmp	r4, r0
   1d68e:	d105      	bne.n	1d69c <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   1d690:	f89d 0008 	ldrb.w	r0, [sp, #8]
   1d694:	f002 fca4 	bl	1ffe0 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   1d698:	42a0      	cmp	r0, r4
   1d69a:	d1f2      	bne.n	1d682 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1d69c:	2000      	movs	r0, #0
   1d69e:	e7f2      	b.n	1d686 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1d6a0:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   1d6a4:	f10d 0103 	add.w	r1, sp, #3
   1d6a8:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   1d6aa:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   1d6ae:	f002 fc53 	bl	1ff58 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1d6b2:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   1d6b4:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1d6b6:	aa02      	add	r2, sp, #8
   1d6b8:	4649      	mov	r1, r9
   1d6ba:	4628      	mov	r0, r5
   1d6bc:	f002 fb10 	bl	1fce0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1d6c0:	4b37      	ldr	r3, [pc, #220]	; (1d7a0 <gpio_nrfx_pin_configure+0x14c>)
   1d6c2:	4298      	cmp	r0, r3
   1d6c4:	d002      	beq.n	1d6cc <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1d6c6:	f06f 0015 	mvn.w	r0, #21
   1d6ca:	e7dc      	b.n	1d686 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   1d6cc:	4580      	cmp	r8, r0
   1d6ce:	d103      	bne.n	1d6d8 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   1d6d0:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1d6d4:	f002 fc84 	bl	1ffe0 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   1d6d8:	05a3      	lsls	r3, r4, #22
   1d6da:	d54e      	bpl.n	1d77a <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1d6dc:	4b31      	ldr	r3, [pc, #196]	; (1d7a4 <gpio_nrfx_pin_configure+0x150>)
   1d6de:	4a32      	ldr	r2, [pc, #200]	; (1d7a8 <gpio_nrfx_pin_configure+0x154>)
   1d6e0:	4023      	ands	r3, r4
   1d6e2:	4293      	cmp	r3, r2
   1d6e4:	d03a      	beq.n	1d75c <gpio_nrfx_pin_configure+0x108>
   1d6e6:	d80c      	bhi.n	1d702 <gpio_nrfx_pin_configure+0xae>
   1d6e8:	2b06      	cmp	r3, #6
   1d6ea:	d014      	beq.n	1d716 <gpio_nrfx_pin_configure+0xc2>
   1d6ec:	d804      	bhi.n	1d6f8 <gpio_nrfx_pin_configure+0xa4>
   1d6ee:	b193      	cbz	r3, 1d716 <gpio_nrfx_pin_configure+0xc2>
   1d6f0:	2b02      	cmp	r3, #2
   1d6f2:	d1e8      	bne.n	1d6c6 <gpio_nrfx_pin_configure+0x72>
   1d6f4:	2304      	movs	r3, #4
   1d6f6:	e00e      	b.n	1d716 <gpio_nrfx_pin_configure+0xc2>
   1d6f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1d6fc:	d1e3      	bne.n	1d6c6 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   1d6fe:	2301      	movs	r3, #1
   1d700:	e009      	b.n	1d716 <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1d702:	4a2a      	ldr	r2, [pc, #168]	; (1d7ac <gpio_nrfx_pin_configure+0x158>)
   1d704:	4293      	cmp	r3, r2
   1d706:	d02b      	beq.n	1d760 <gpio_nrfx_pin_configure+0x10c>
   1d708:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1d70c:	d02a      	beq.n	1d764 <gpio_nrfx_pin_configure+0x110>
   1d70e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1d712:	d1d8      	bne.n	1d6c6 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   1d714:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   1d716:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1d71a:	f484 7380 	eor.w	r3, r4, #256	; 0x100
   1d71e:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
   1d722:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1d724:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
   1d728:	bf54      	ite	pl
   1d72a:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1d72e:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1d730:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
   1d732:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1d736:	d517      	bpl.n	1d768 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1d738:	687b      	ldr	r3, [r7, #4]
   1d73a:	2101      	movs	r1, #1
   1d73c:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   1d740:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1d744:	2200      	movs	r2, #0
   1d746:	a901      	add	r1, sp, #4
   1d748:	4628      	mov	r0, r5
   1d74a:	f002 fb6f 	bl	1fe2c <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1d74e:	4b14      	ldr	r3, [pc, #80]	; (1d7a0 <gpio_nrfx_pin_configure+0x14c>)
   1d750:	4298      	cmp	r0, r3
   1d752:	bf14      	ite	ne
   1d754:	f06f 0015 	mvnne.w	r0, #21
   1d758:	2000      	moveq	r0, #0
   1d75a:	e794      	b.n	1d686 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   1d75c:	2307      	movs	r3, #7
   1d75e:	e7da      	b.n	1d716 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
   1d760:	2305      	movs	r3, #5
   1d762:	e7d8      	b.n	1d716 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
   1d764:	2303      	movs	r3, #3
   1d766:	e7d6      	b.n	1d716 <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1d768:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1d76a:	bf41      	itttt	mi
   1d76c:	687b      	ldrmi	r3, [r7, #4]
   1d76e:	2101      	movmi	r1, #1
   1d770:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
   1d774:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
   1d778:	e7e4      	b.n	1d744 <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
   1d77a:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1d77c:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   1d780:	bf54      	ite	pl
   1d782:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   1d786:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1d788:	461a      	mov	r2, r3
   1d78a:	a901      	add	r1, sp, #4
   1d78c:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   1d78e:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1d792:	f002 faa5 	bl	1fce0 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1d796:	4b02      	ldr	r3, [pc, #8]	; (1d7a0 <gpio_nrfx_pin_configure+0x14c>)
   1d798:	4298      	cmp	r0, r3
   1d79a:	f43f af7f 	beq.w	1d69c <gpio_nrfx_pin_configure+0x48>
   1d79e:	e792      	b.n	1d6c6 <gpio_nrfx_pin_configure+0x72>
   1d7a0:	0bad0000 	.word	0x0bad0000
   1d7a4:	00f00006 	.word	0x00f00006
   1d7a8:	00100006 	.word	0x00100006
   1d7ac:	00400002 	.word	0x00400002

0001d7b0 <sx1509b_init>:
 *
 * @param dev Device struct
 * @return 0 if successful, failed otherwise.
 */
static int sx1509b_init(const struct device *dev)
{
   1d7b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct sx1509b_config *cfg = dev->config;
   1d7b4:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
   1d7b8:	6905      	ldr	r5, [r0, #16]
{
   1d7ba:	4607      	mov	r7, r0
	int rc;

	drv_data->i2c_master = device_get_binding(cfg->i2c_master_dev_name);
   1d7bc:	f8d8 0004 	ldr.w	r0, [r8, #4]
   1d7c0:	f003 fad4 	bl	20d6c <z_impl_device_get_binding>
   1d7c4:	4e45      	ldr	r6, [pc, #276]	; (1d8dc <sx1509b_init+0x12c>)
   1d7c6:	4a46      	ldr	r2, [pc, #280]	; (1d8e0 <sx1509b_init+0x130>)
   1d7c8:	6068      	str	r0, [r5, #4]
	if (!drv_data->i2c_master) {
   1d7ca:	1ab6      	subs	r6, r6, r2
   1d7cc:	08f6      	lsrs	r6, r6, #3
   1d7ce:	01b6      	lsls	r6, r6, #6
   1d7d0:	b9c0      	cbnz	r0, 1d804 <sx1509b_init+0x54>
		LOG_ERR("%s: no bus %s", dev->name,
   1d7d2:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1d7d6:	6839      	ldr	r1, [r7, #0]
   1d7d8:	4842      	ldr	r0, [pc, #264]	; (1d8e4 <sx1509b_init+0x134>)
   1d7da:	f046 0301 	orr.w	r3, r6, #1
   1d7de:	f006 fb61 	bl	23ea4 <log_2>
			cfg->i2c_master_dev_name);
		rc = -EINVAL;
   1d7e2:	f06f 0415 	mvn.w	r4, #21
				SX1509B_REG_MISC_FREQ);
	}

out:
	if (rc != 0) {
		LOG_ERR("%s init failed: %d", dev->name, rc);
   1d7e6:	6839      	ldr	r1, [r7, #0]
   1d7e8:	483f      	ldr	r0, [pc, #252]	; (1d8e8 <sx1509b_init+0x138>)
   1d7ea:	f046 0301 	orr.w	r3, r6, #1
   1d7ee:	4622      	mov	r2, r4
   1d7f0:	f006 fb58 	bl	23ea4 <log_2>
	z_impl_k_sem_give(sem);
   1d7f4:	f105 0020 	add.w	r0, r5, #32
   1d7f8:	f004 f982 	bl	21b00 <z_impl_k_sem_give>
	} else {
		LOG_INF("%s init ok", dev->name);
	}
	k_sem_give(&drv_data->lock);
	return rc;
}
   1d7fc:	4620      	mov	r0, r4
   1d7fe:	b003      	add	sp, #12
   1d800:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 */
static inline int i2c_reg_write_byte(const struct device *dev,
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
   1d804:	f241 227d 	movw	r2, #4733	; 0x127d
	rc = i2c_reg_write_byte(drv_data->i2c_master, cfg->i2c_slave_addr,
   1d808:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1d80c:	f8ad 2004 	strh.w	r2, [sp, #4]

	return i2c_write(dev, tx_buf, 2, dev_addr);
   1d810:	a901      	add	r1, sp, #4
   1d812:	2202      	movs	r2, #2
   1d814:	f009 fe5e 	bl	274d4 <i2c_write>
	if (rc != 0) {
   1d818:	4604      	mov	r4, r0
   1d81a:	b138      	cbz	r0, 1d82c <sx1509b_init+0x7c>
		LOG_ERR("%s: reset m0 failed: %d\n", dev->name, rc);
   1d81c:	4602      	mov	r2, r0
   1d81e:	6839      	ldr	r1, [r7, #0]
   1d820:	4832      	ldr	r0, [pc, #200]	; (1d8ec <sx1509b_init+0x13c>)
   1d822:	f046 0301 	orr.w	r3, r6, #1
   1d826:	f006 fb3d 	bl	23ea4 <log_2>
		goto out;
   1d82a:	e7dc      	b.n	1d7e6 <sx1509b_init+0x36>
	uint8_t tx_buf[2] = {reg_addr, value};
   1d82c:	f243 427d 	movw	r2, #13437	; 0x347d
	rc = i2c_reg_write_byte(drv_data->i2c_master, cfg->i2c_slave_addr,
   1d830:	6868      	ldr	r0, [r5, #4]
   1d832:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1d836:	f8ad 2004 	strh.w	r2, [sp, #4]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   1d83a:	a901      	add	r1, sp, #4
   1d83c:	2202      	movs	r2, #2
   1d83e:	f009 fe49 	bl	274d4 <i2c_write>
	if (rc != 0) {
   1d842:	4604      	mov	r4, r0
   1d844:	2800      	cmp	r0, #0
   1d846:	d1ce      	bne.n	1d7e6 <sx1509b_init+0x36>
	return z_impl_k_sleep(timeout);
   1d848:	2100      	movs	r1, #0
   1d84a:	2063      	movs	r0, #99	; 0x63
   1d84c:	f004 f8c4 	bl	219d8 <z_impl_k_sleep>
	drv_data->pin_state = (struct sx1509b_pin_state) {
   1d850:	4621      	mov	r1, r4
   1d852:	2212      	movs	r2, #18
   1d854:	f105 0008 	add.w	r0, r5, #8
   1d858:	f007 fb1d 	bl	24e96 <memset>
   1d85c:	f24e 03e0 	movw	r3, #57568	; 0xe0e0
	uint8_t tx_buf[2] = {reg_addr, value};
   1d860:	f244 021e 	movw	r2, #16414	; 0x401e
   1d864:	832b      	strh	r3, [r5, #24]
	drv_data->debounce_state = (struct sx1509b_debounce_state) {
   1d866:	83ac      	strh	r4, [r5, #28]
   1d868:	77ac      	strb	r4, [r5, #30]
	rc = i2c_reg_write_byte(drv_data->i2c_master, cfg->i2c_slave_addr,
   1d86a:	6868      	ldr	r0, [r5, #4]
   1d86c:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1d870:	f8ad 2004 	strh.w	r2, [sp, #4]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   1d874:	a901      	add	r1, sp, #4
   1d876:	2202      	movs	r2, #2
   1d878:	f009 fe2c 	bl	274d4 <i2c_write>
	drv_data->debounce_state = (struct sx1509b_debounce_state) {
   1d87c:	46a1      	mov	r9, r4
	if (rc == 0) {
   1d87e:	4604      	mov	r4, r0
   1d880:	2800      	cmp	r0, #0
   1d882:	d1b0      	bne.n	1d7e6 <sx1509b_init+0x36>
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
   1d884:	8b2b      	ldrh	r3, [r5, #24]
   1d886:	f8b8 1008 	ldrh.w	r1, [r8, #8]
   1d88a:	6868      	ldr	r0, [r5, #4]
   1d88c:	2210      	movs	r2, #16
   1d88e:	f009 fe2e 	bl	274ee <i2c_reg_write_word_be>
	if (rc == 0) {
   1d892:	4604      	mov	r4, r0
   1d894:	2800      	cmp	r0, #0
   1d896:	d1a6      	bne.n	1d7e6 <sx1509b_init+0x36>
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
   1d898:	8aeb      	ldrh	r3, [r5, #22]
   1d89a:	f8b8 1008 	ldrh.w	r1, [r8, #8]
   1d89e:	6868      	ldr	r0, [r5, #4]
   1d8a0:	220e      	movs	r2, #14
   1d8a2:	f009 fe24 	bl	274ee <i2c_reg_write_word_be>
	if (rc == 0) {
   1d8a6:	4604      	mov	r4, r0
   1d8a8:	2800      	cmp	r0, #0
   1d8aa:	d19c      	bne.n	1d7e6 <sx1509b_init+0x36>
	uint8_t tx_buf[3] = { reg_addr, value };
   1d8ac:	f649 021f 	movw	r2, #38943	; 0x981f
		rc = i2c_reg_write_byte_be(
   1d8b0:	6868      	ldr	r0, [r5, #4]
   1d8b2:	f8b8 3008 	ldrh.w	r3, [r8, #8]
	uint8_t tx_buf[3] = { reg_addr, value };
   1d8b6:	f8ad 2004 	strh.w	r2, [sp, #4]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   1d8ba:	a901      	add	r1, sp, #4
   1d8bc:	2202      	movs	r2, #2
	uint8_t tx_buf[3] = { reg_addr, value };
   1d8be:	f88d 9006 	strb.w	r9, [sp, #6]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   1d8c2:	f009 fe07 	bl	274d4 <i2c_write>
	if (rc != 0) {
   1d8c6:	4604      	mov	r4, r0
   1d8c8:	2800      	cmp	r0, #0
   1d8ca:	d18c      	bne.n	1d7e6 <sx1509b_init+0x36>
		LOG_INF("%s init ok", dev->name);
   1d8cc:	6839      	ldr	r1, [r7, #0]
   1d8ce:	4808      	ldr	r0, [pc, #32]	; (1d8f0 <sx1509b_init+0x140>)
   1d8d0:	f046 0203 	orr.w	r2, r6, #3
   1d8d4:	f006 fad2 	bl	23e7c <log_1>
   1d8d8:	e78c      	b.n	1d7f4 <sx1509b_init+0x44>
   1d8da:	bf00      	nop
   1d8dc:	00028f04 	.word	0x00028f04
   1d8e0:	00028dd4 	.word	0x00028dd4
   1d8e4:	0002c232 	.word	0x0002c232
   1d8e8:	0002c259 	.word	0x0002c259
   1d8ec:	0002c240 	.word	0x0002c240
   1d8f0:	0002c26c 	.word	0x0002c26c

0001d8f4 <i2c_nrfx_twim_recover_bus>:

	return 0;
}

static int i2c_nrfx_twim_recover_bus(const struct device *dev)
{
   1d8f4:	b508      	push	{r3, lr}
	nrfx_err_t err = nrfx_twim_bus_recover(get_dev_config(dev)->config.scl,
   1d8f6:	6843      	ldr	r3, [r0, #4]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   1d8f8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   1d8fc:	f002 fce4 	bl	202c8 <nrfx_twi_twim_bus_recover>
					       get_dev_config(dev)->config.sda);

	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
   1d900:	4b03      	ldr	r3, [pc, #12]	; (1d910 <i2c_nrfx_twim_recover_bus+0x1c>)
   1d902:	4298      	cmp	r0, r3
}
   1d904:	bf14      	ite	ne
   1d906:	f06f 000f 	mvnne.w	r0, #15
   1d90a:	2000      	moveq	r0, #0
   1d90c:	bd08      	pop	{r3, pc}
   1d90e:	bf00      	nop
   1d910:	0bad0000 	.word	0x0bad0000

0001d914 <i2c_nrfx_twim_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
   1d914:	07ca      	lsls	r2, r1, #31
{
   1d916:	b508      	push	{r3, lr}
	nrfx_twim_t const *inst = &(get_dev_config(dev)->twim);
   1d918:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & dev_config) {
   1d91a:	d40f      	bmi.n	1d93c <i2c_nrfx_twim_configure+0x28>
	switch (I2C_SPEED_GET(dev_config)) {
   1d91c:	f3c1 0242 	ubfx	r2, r1, #1, #3
   1d920:	2a01      	cmp	r2, #1
   1d922:	d00e      	beq.n	1d942 <i2c_nrfx_twim_configure+0x2e>
   1d924:	2a02      	cmp	r2, #2
   1d926:	d015      	beq.n	1d954 <i2c_nrfx_twim_configure+0x40>
   1d928:	490c      	ldr	r1, [pc, #48]	; (1d95c <i2c_nrfx_twim_configure+0x48>)
   1d92a:	4b0d      	ldr	r3, [pc, #52]	; (1d960 <i2c_nrfx_twim_configure+0x4c>)
		LOG_ERR("unsupported speed");
   1d92c:	480d      	ldr	r0, [pc, #52]	; (1d964 <i2c_nrfx_twim_configure+0x50>)
   1d92e:	1ac9      	subs	r1, r1, r3
   1d930:	08c9      	lsrs	r1, r1, #3
   1d932:	0189      	lsls	r1, r1, #6
   1d934:	f041 0101 	orr.w	r1, r1, #1
   1d938:	f006 fa93 	bl	23e62 <log_0>
		return -EINVAL;
   1d93c:	f06f 0015 	mvn.w	r0, #21
   1d940:	e007      	b.n	1d952 <i2c_nrfx_twim_configure+0x3e>
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_100K);
   1d942:	681b      	ldr	r3, [r3, #0]
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   1d944:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
   1d948:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
   1d94c:	6903      	ldr	r3, [r0, #16]
	return 0;
   1d94e:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
   1d950:	6359      	str	r1, [r3, #52]	; 0x34
}
   1d952:	bd08      	pop	{r3, pc}
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_400K);
   1d954:	681b      	ldr	r3, [r3, #0]
   1d956:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
   1d95a:	e7f5      	b.n	1d948 <i2c_nrfx_twim_configure+0x34>
   1d95c:	00028e9c 	.word	0x00028e9c
   1d960:	00028dd4 	.word	0x00028dd4
   1d964:	0002c289 	.word	0x0002c289

0001d968 <init_twim>:
	.transfer    = i2c_nrfx_twim_transfer,
	.recover_bus = i2c_nrfx_twim_recover_bus,
};

static int init_twim(const struct device *dev)
{
   1d968:	b510      	push	{r4, lr}
   1d96a:	4604      	mov	r4, r0
	struct i2c_nrfx_twim_data *dev_data = get_dev_data(dev);
	nrfx_err_t result = nrfx_twim_init(&get_dev_config(dev)->twim,
   1d96c:	6840      	ldr	r0, [r0, #4]
   1d96e:	6923      	ldr	r3, [r4, #16]
   1d970:	4a0b      	ldr	r2, [pc, #44]	; (1d9a0 <init_twim+0x38>)
   1d972:	f100 0108 	add.w	r1, r0, #8
   1d976:	f002 fdaf 	bl	204d8 <nrfx_twim_init>
					   &get_dev_config(dev)->config,
					   event_handler,
					   dev_data);
	if (result != NRFX_SUCCESS) {
   1d97a:	4b0a      	ldr	r3, [pc, #40]	; (1d9a4 <init_twim+0x3c>)
   1d97c:	4298      	cmp	r0, r3
   1d97e:	d00d      	beq.n	1d99c <init_twim+0x34>
   1d980:	4b09      	ldr	r3, [pc, #36]	; (1d9a8 <init_twim+0x40>)
   1d982:	4a0a      	ldr	r2, [pc, #40]	; (1d9ac <init_twim+0x44>)
		LOG_ERR("Failed to initialize device: %s",
   1d984:	480a      	ldr	r0, [pc, #40]	; (1d9b0 <init_twim+0x48>)
   1d986:	6821      	ldr	r1, [r4, #0]
   1d988:	1ad2      	subs	r2, r2, r3
   1d98a:	08d2      	lsrs	r2, r2, #3
   1d98c:	0192      	lsls	r2, r2, #6
   1d98e:	f042 0201 	orr.w	r2, r2, #1
   1d992:	f006 fa73 	bl	23e7c <log_1>
			dev->name);
		return -EBUSY;
   1d996:	f06f 000f 	mvn.w	r0, #15
	}

	return 0;
}
   1d99a:	bd10      	pop	{r4, pc}
	return 0;
   1d99c:	2000      	movs	r0, #0
   1d99e:	e7fc      	b.n	1d99a <init_twim+0x32>
   1d9a0:	0001d9b5 	.word	0x0001d9b5
   1d9a4:	0bad0000 	.word	0x0bad0000
   1d9a8:	00028dd4 	.word	0x00028dd4
   1d9ac:	00028e9c 	.word	0x00028e9c
   1d9b0:	0002c29b 	.word	0x0002c29b

0001d9b4 <event_handler>:
	switch (p_event->type) {
   1d9b4:	7803      	ldrb	r3, [r0, #0]
   1d9b6:	2b01      	cmp	r3, #1
   1d9b8:	d008      	beq.n	1d9cc <event_handler+0x18>
   1d9ba:	2b02      	cmp	r3, #2
   1d9bc:	d008      	beq.n	1d9d0 <event_handler+0x1c>
   1d9be:	b94b      	cbnz	r3, 1d9d4 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   1d9c0:	4b05      	ldr	r3, [pc, #20]	; (1d9d8 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   1d9c2:	630b      	str	r3, [r1, #48]	; 0x30
	z_impl_k_sem_give(sem);
   1d9c4:	f101 0018 	add.w	r0, r1, #24
   1d9c8:	f004 b89a 	b.w	21b00 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1d9cc:	4b03      	ldr	r3, [pc, #12]	; (1d9dc <event_handler+0x28>)
   1d9ce:	e7f8      	b.n	1d9c2 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1d9d0:	4b03      	ldr	r3, [pc, #12]	; (1d9e0 <event_handler+0x2c>)
   1d9d2:	e7f6      	b.n	1d9c2 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   1d9d4:	4b03      	ldr	r3, [pc, #12]	; (1d9e4 <event_handler+0x30>)
   1d9d6:	e7f4      	b.n	1d9c2 <event_handler+0xe>
   1d9d8:	0bad0000 	.word	0x0bad0000
   1d9dc:	0bae0001 	.word	0x0bae0001
   1d9e0:	0bae0002 	.word	0x0bae0002
   1d9e4:	0bad0001 	.word	0x0bad0001

0001d9e8 <i2c_nrfx_twim_transfer>:
{
   1d9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct i2c_nrfx_twim_config *dev_config = get_dev_config(dev);
   1d9ec:	6846      	ldr	r6, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = get_dev_data(dev);
   1d9ee:	f8d0 9010 	ldr.w	r9, [r0, #16]
{
   1d9f2:	b091      	sub	sp, #68	; 0x44
	nrfx_twim_xfer_desc_t cur_xfer = {
   1d9f4:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
{
   1d9f8:	9203      	str	r2, [sp, #12]
   1d9fa:	461d      	mov	r5, r3
   1d9fc:	4680      	mov	r8, r0
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   1d9fe:	8b33      	ldrh	r3, [r6, #24]
	uint8_t *msg_buf = dev_data->msg_buf;
   1da00:	f8d9 a038 	ldr.w	sl, [r9, #56]	; 0x38
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   1da04:	9302      	str	r3, [sp, #8]
{
   1da06:	460c      	mov	r4, r1
	nrfx_twim_xfer_desc_t cur_xfer = {
   1da08:	2214      	movs	r2, #20
   1da0a:	2100      	movs	r1, #0
   1da0c:	4658      	mov	r0, fp
   1da0e:	f007 fa42 	bl	24e96 <memset>
   1da12:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
	return z_impl_k_sem_take(sem, timeout);
   1da16:	f04f 32ff 	mov.w	r2, #4294967295
   1da1a:	f04f 33ff 	mov.w	r3, #4294967295
   1da1e:	4648      	mov	r0, r9
   1da20:	f004 f894 	bl	21b4c <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
   1da24:	f109 0318 	add.w	r3, r9, #24
   1da28:	9301      	str	r3, [sp, #4]
   1da2a:	2200      	movs	r2, #0
   1da2c:	2300      	movs	r3, #0
   1da2e:	9801      	ldr	r0, [sp, #4]
   1da30:	f004 f88c 	bl	21b4c <z_impl_k_sem_take>
	for (size_t i = 0; i < num_msgs; i++) {
   1da34:	2700      	movs	r7, #0
	nrfx_twim_enable(&dev_config->twim);
   1da36:	4630      	mov	r0, r6
   1da38:	f002 fd9e 	bl	20578 <nrfx_twim_enable>
	uint16_t msg_buf_used = 0;
   1da3c:	463d      	mov	r5, r7
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   1da3e:	f8cd b010 	str.w	fp, [sp, #16]
	for (size_t i = 0; i < num_msgs; i++) {
   1da42:	9b03      	ldr	r3, [sp, #12]
   1da44:	429f      	cmp	r7, r3
   1da46:	d301      	bcc.n	1da4c <i2c_nrfx_twim_transfer+0x64>
   1da48:	2400      	movs	r4, #0
   1da4a:	e030      	b.n	1daae <i2c_nrfx_twim_transfer+0xc6>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   1da4c:	7a21      	ldrb	r1, [r4, #8]
   1da4e:	070b      	lsls	r3, r1, #28
   1da50:	f100 80d3 	bmi.w	1dbfa <i2c_nrfx_twim_transfer+0x212>
				&& ((msgs[i].flags & I2C_MSG_READ)
   1da54:	9b03      	ldr	r3, [sp, #12]
		bool concat_next = ((i + 1) < num_msgs)
   1da56:	f107 0b01 	add.w	fp, r7, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
   1da5a:	459b      	cmp	fp, r3
   1da5c:	d20a      	bcs.n	1da74 <i2c_nrfx_twim_transfer+0x8c>
				&& !(msgs[i].flags & I2C_MSG_STOP)
   1da5e:	0788      	lsls	r0, r1, #30
   1da60:	d408      	bmi.n	1da74 <i2c_nrfx_twim_transfer+0x8c>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
   1da62:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
   1da64:	ea81 0203 	eor.w	r2, r1, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
   1da68:	f002 0201 	and.w	r2, r2, #1
   1da6c:	f003 0304 	and.w	r3, r3, #4
   1da70:	4313      	orrs	r3, r2
   1da72:	d026      	beq.n	1dac2 <i2c_nrfx_twim_transfer+0xda>
		if (concat_next || (msg_buf_used != 0)) {
   1da74:	2d00      	cmp	r5, #0
   1da76:	d037      	beq.n	1dae8 <i2c_nrfx_twim_transfer+0x100>
				&& ((msgs[i].flags & I2C_MSG_READ)
   1da78:	2300      	movs	r3, #0
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
   1da7a:	6862      	ldr	r2, [r4, #4]
   1da7c:	9802      	ldr	r0, [sp, #8]
   1da7e:	eb05 0c02 	add.w	ip, r5, r2
   1da82:	4584      	cmp	ip, r0
   1da84:	d91f      	bls.n	1dac6 <i2c_nrfx_twim_transfer+0xde>
   1da86:	495e      	ldr	r1, [pc, #376]	; (1dc00 <i2c_nrfx_twim_transfer+0x218>)
   1da88:	4b5e      	ldr	r3, [pc, #376]	; (1dc04 <i2c_nrfx_twim_transfer+0x21c>)
				LOG_ERR("Need to use concatenation buffer and "
   1da8a:	9009      	str	r0, [sp, #36]	; 0x24
   1da8c:	1a5b      	subs	r3, r3, r1
   1da8e:	08db      	lsrs	r3, r3, #3
   1da90:	e9cd 5207 	strd	r5, r2, [sp, #28]
   1da94:	019b      	lsls	r3, r3, #6
   1da96:	f8d8 2000 	ldr.w	r2, [r8]
   1da9a:	920a      	str	r2, [sp, #40]	; 0x28
   1da9c:	485a      	ldr	r0, [pc, #360]	; (1dc08 <i2c_nrfx_twim_transfer+0x220>)
   1da9e:	f043 0301 	orr.w	r3, r3, #1
   1daa2:	2204      	movs	r2, #4
   1daa4:	a907      	add	r1, sp, #28
   1daa6:	f006 fa32 	bl	23f0e <log_n>
				ret = -ENOSPC;
   1daaa:	f06f 041b 	mvn.w	r4, #27
	nrfx_twim_disable(&dev_config->twim);
   1daae:	4630      	mov	r0, r6
   1dab0:	f002 fd72 	bl	20598 <nrfx_twim_disable>
	z_impl_k_sem_give(sem);
   1dab4:	4648      	mov	r0, r9
   1dab6:	f004 f823 	bl	21b00 <z_impl_k_sem_give>
}
   1daba:	4620      	mov	r0, r4
   1dabc:	b011      	add	sp, #68	; 0x44
   1dabe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				&& ((msgs[i].flags & I2C_MSG_READ)
   1dac2:	2301      	movs	r3, #1
   1dac4:	e7d9      	b.n	1da7a <i2c_nrfx_twim_transfer+0x92>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
   1dac6:	07c9      	lsls	r1, r1, #31
   1dac8:	d406      	bmi.n	1dad8 <i2c_nrfx_twim_transfer+0xf0>
				memcpy(msg_buf + msg_buf_used,
   1daca:	6821      	ldr	r1, [r4, #0]
   1dacc:	9305      	str	r3, [sp, #20]
   1dace:	eb0a 0005 	add.w	r0, sl, r5
   1dad2:	f007 f9d5 	bl	24e80 <memcpy>
   1dad6:	9b05      	ldr	r3, [sp, #20]
			msg_buf_used += msgs[i].len;
   1dad8:	6862      	ldr	r2, [r4, #4]
   1dada:	4415      	add	r5, r2
   1dadc:	b2ad      	uxth	r5, r5
		if (concat_next) {
   1dade:	2b00      	cmp	r3, #0
   1dae0:	d041      	beq.n	1db66 <i2c_nrfx_twim_transfer+0x17e>
   1dae2:	340c      	adds	r4, #12
		bool concat_next = ((i + 1) < num_msgs)
   1dae4:	465f      	mov	r7, fp
   1dae6:	e7ac      	b.n	1da42 <i2c_nrfx_twim_transfer+0x5a>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   1dae8:	07ca      	lsls	r2, r1, #31
   1daea:	d51d      	bpl.n	1db28 <i2c_nrfx_twim_transfer+0x140>
			cur_xfer.p_primary_buf = msgs[i].buf;
   1daec:	6823      	ldr	r3, [r4, #0]
   1daee:	930e      	str	r3, [sp, #56]	; 0x38
			cur_xfer.primary_length = msgs[i].len;
   1daf0:	6863      	ldr	r3, [r4, #4]
   1daf2:	930c      	str	r3, [sp, #48]	; 0x30
   1daf4:	2500      	movs	r5, #0
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   1daf6:	7a23      	ldrb	r3, [r4, #8]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   1daf8:	9904      	ldr	r1, [sp, #16]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
   1dafa:	f003 0201 	and.w	r2, r3, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   1dafe:	f013 0f02 	tst.w	r3, #2
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   1db02:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   1db06:	4630      	mov	r0, r6
   1db08:	bf0c      	ite	eq
   1db0a:	2220      	moveq	r2, #32
   1db0c:	2200      	movne	r2, #0
   1db0e:	f002 fd61 	bl	205d4 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
   1db12:	4b3e      	ldr	r3, [pc, #248]	; (1dc0c <i2c_nrfx_twim_transfer+0x224>)
   1db14:	4298      	cmp	r0, r3
   1db16:	d02c      	beq.n	1db72 <i2c_nrfx_twim_transfer+0x18a>
			if (res == NRFX_ERROR_BUSY) {
   1db18:	330b      	adds	r3, #11
				ret = -EIO;
   1db1a:	4298      	cmp	r0, r3
   1db1c:	bf0c      	ite	eq
   1db1e:	f06f 040f 	mvneq.w	r4, #15
   1db22:	f06f 0404 	mvnne.w	r4, #4
   1db26:	e7c2      	b.n	1daae <i2c_nrfx_twim_transfer+0xc6>
   1db28:	6823      	ldr	r3, [r4, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1db2a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   1db2e:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   1db32:	d0db      	beq.n	1daec <i2c_nrfx_twim_transfer+0x104>
   1db34:	6861      	ldr	r1, [r4, #4]
			if (msgs[i].len > dev_config->flash_buf_max_size) {
   1db36:	8b72      	ldrh	r2, [r6, #26]
   1db38:	428a      	cmp	r2, r1
   1db3a:	d20e      	bcs.n	1db5a <i2c_nrfx_twim_transfer+0x172>
   1db3c:	4a30      	ldr	r2, [pc, #192]	; (1dc00 <i2c_nrfx_twim_transfer+0x218>)
   1db3e:	4b31      	ldr	r3, [pc, #196]	; (1dc04 <i2c_nrfx_twim_transfer+0x21c>)
				LOG_ERR("Cannot copy flash buffer of size: %u. "
   1db40:	4833      	ldr	r0, [pc, #204]	; (1dc10 <i2c_nrfx_twim_transfer+0x228>)
   1db42:	1a9b      	subs	r3, r3, r2
   1db44:	08db      	lsrs	r3, r3, #3
   1db46:	019b      	lsls	r3, r3, #6
   1db48:	f8d8 2000 	ldr.w	r2, [r8]
   1db4c:	f043 0301 	orr.w	r3, r3, #1
   1db50:	f006 f9a8 	bl	23ea4 <log_2>
				ret = -EINVAL;
   1db54:	f06f 0415 	mvn.w	r4, #21
				break;
   1db58:	e7a9      	b.n	1daae <i2c_nrfx_twim_transfer+0xc6>
			memcpy(msg_buf, msgs[i].buf, msgs[i].len);
   1db5a:	460a      	mov	r2, r1
   1db5c:	4650      	mov	r0, sl
   1db5e:	4619      	mov	r1, r3
   1db60:	f007 f98e 	bl	24e80 <memcpy>
			msg_buf_used = msgs[i].len;
   1db64:	88a5      	ldrh	r5, [r4, #4]
		if (msg_buf_used == 0) {
   1db66:	2d00      	cmp	r5, #0
   1db68:	d0c0      	beq.n	1daec <i2c_nrfx_twim_transfer+0x104>
			cur_xfer.p_primary_buf = msg_buf;
   1db6a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
			cur_xfer.primary_length = msg_buf_used;
   1db6e:	950c      	str	r5, [sp, #48]	; 0x30
   1db70:	e7c1      	b.n	1daf6 <i2c_nrfx_twim_transfer+0x10e>
	return z_impl_k_sem_take(sem, timeout);
   1db72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1db76:	9801      	ldr	r0, [sp, #4]
   1db78:	2300      	movs	r3, #0
   1db7a:	f003 ffe7 	bl	21b4c <z_impl_k_sem_take>
		if (ret != 0) {
   1db7e:	b1a0      	cbz	r0, 1dbaa <i2c_nrfx_twim_transfer+0x1c2>
   1db80:	4b1f      	ldr	r3, [pc, #124]	; (1dc00 <i2c_nrfx_twim_transfer+0x218>)
   1db82:	4a20      	ldr	r2, [pc, #128]	; (1dc04 <i2c_nrfx_twim_transfer+0x21c>)
			LOG_ERR("Error on I2C line occurred for message %d", i);
   1db84:	4823      	ldr	r0, [pc, #140]	; (1dc14 <i2c_nrfx_twim_transfer+0x22c>)
   1db86:	1ad2      	subs	r2, r2, r3
   1db88:	08d2      	lsrs	r2, r2, #3
   1db8a:	0192      	lsls	r2, r2, #6
   1db8c:	4639      	mov	r1, r7
   1db8e:	f042 0201 	orr.w	r2, r2, #1
   1db92:	f006 f973 	bl	23e7c <log_1>
			nrfx_twim_disable(&dev_config->twim);
   1db96:	4630      	mov	r0, r6
   1db98:	f002 fcfe 	bl	20598 <nrfx_twim_disable>
   1db9c:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
   1dba0:	f002 fb92 	bl	202c8 <nrfx_twi_twim_bus_recover>
			ret = -EIO;
   1dba4:	f06f 0404 	mvn.w	r4, #4
			break;
   1dba8:	e781      	b.n	1daae <i2c_nrfx_twim_transfer+0xc6>
		res = dev_data->res;
   1dbaa:	f8d9 1030 	ldr.w	r1, [r9, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   1dbae:	4b17      	ldr	r3, [pc, #92]	; (1dc0c <i2c_nrfx_twim_transfer+0x224>)
   1dbb0:	4299      	cmp	r1, r3
   1dbb2:	d00b      	beq.n	1dbcc <i2c_nrfx_twim_transfer+0x1e4>
   1dbb4:	4a12      	ldr	r2, [pc, #72]	; (1dc00 <i2c_nrfx_twim_transfer+0x218>)
   1dbb6:	4b13      	ldr	r3, [pc, #76]	; (1dc04 <i2c_nrfx_twim_transfer+0x21c>)
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
   1dbb8:	4817      	ldr	r0, [pc, #92]	; (1dc18 <i2c_nrfx_twim_transfer+0x230>)
   1dbba:	1a9b      	subs	r3, r3, r2
   1dbbc:	08db      	lsrs	r3, r3, #3
   1dbbe:	019b      	lsls	r3, r3, #6
   1dbc0:	f043 0301 	orr.w	r3, r3, #1
   1dbc4:	463a      	mov	r2, r7
   1dbc6:	f006 f96d 	bl	23ea4 <log_2>
   1dbca:	e7eb      	b.n	1dba4 <i2c_nrfx_twim_transfer+0x1bc>
		if ((msgs[i].flags & I2C_MSG_READ)
   1dbcc:	7a23      	ldrb	r3, [r4, #8]
   1dbce:	07db      	lsls	r3, r3, #31
   1dbd0:	d401      	bmi.n	1dbd6 <i2c_nrfx_twim_transfer+0x1ee>
		msg_buf_used = 0;
   1dbd2:	2500      	movs	r5, #0
   1dbd4:	e785      	b.n	1dae2 <i2c_nrfx_twim_transfer+0xfa>
		    && cur_xfer.p_primary_buf == msg_buf) {
   1dbd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1dbd8:	459a      	cmp	sl, r3
   1dbda:	d1fa      	bne.n	1dbd2 <i2c_nrfx_twim_transfer+0x1ea>
   1dbdc:	4627      	mov	r7, r4
   1dbde:	e006      	b.n	1dbee <i2c_nrfx_twim_transfer+0x206>
				msg_buf_used -= msgs[j].len;
   1dbe0:	1aa9      	subs	r1, r5, r2
   1dbe2:	b28d      	uxth	r5, r1
				memcpy(msgs[j].buf,
   1dbe4:	68f8      	ldr	r0, [r7, #12]
   1dbe6:	fa1a f181 	uxtah	r1, sl, r1
   1dbea:	f007 f949 	bl	24e80 <memcpy>
			while (msg_buf_used >= msgs[j].len) {
   1dbee:	687a      	ldr	r2, [r7, #4]
   1dbf0:	4295      	cmp	r5, r2
   1dbf2:	f1a7 070c 	sub.w	r7, r7, #12
   1dbf6:	d2f3      	bcs.n	1dbe0 <i2c_nrfx_twim_transfer+0x1f8>
   1dbf8:	e7eb      	b.n	1dbd2 <i2c_nrfx_twim_transfer+0x1ea>
			ret = -ENOTSUP;
   1dbfa:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1dbfe:	e756      	b.n	1daae <i2c_nrfx_twim_transfer+0xc6>
   1dc00:	00028dd4 	.word	0x00028dd4
   1dc04:	00028e9c 	.word	0x00028e9c
   1dc08:	0002c2bb 	.word	0x0002c2bb
   1dc0c:	0bad0000 	.word	0x0bad0000
   1dc10:	0002c34b 	.word	0x0002c34b
   1dc14:	0002c3b1 	.word	0x0002c3b1
   1dc18:	0002c3db 	.word	0x0002c3db

0001dc1c <hts221_channel_get>:

	/*
	 * see "Interpreting humidity and temperature readings" document
	 * for more details
	 */
	if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
   1dc1c:	290d      	cmp	r1, #13
{
   1dc1e:	b570      	push	{r4, r5, r6, lr}
	struct hts221_data *data = dev->data;
   1dc20:	6900      	ldr	r0, [r0, #16]
	if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
   1dc22:	d120      	bne.n	1dc66 <hts221_channel_get+0x4a>
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
   1dc24:	88c5      	ldrh	r5, [r0, #6]
   1dc26:	8903      	ldrh	r3, [r0, #8]
			   (data->t_sample - data->t0_out) /
   1dc28:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
			   (data->t1_out - data->t0_out) +
   1dc2c:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
   1dc30:	1b5c      	subs	r4, r3, r5
			   (data->t_sample - data->t0_out) /
   1dc32:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
   1dc36:	1b9b      	subs	r3, r3, r6
			   (data->t1_out - data->t0_out) +
   1dc38:	1b89      	subs	r1, r1, r6
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
   1dc3a:	4363      	muls	r3, r4
			   (data->t_sample - data->t0_out) /
   1dc3c:	fb93 f3f1 	sdiv	r3, r3, r1
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
   1dc40:	442b      	add	r3, r5
			   data->t0_degc_x8;

		/* convert temperature x8 to degrees Celsius */
		val->val1 = conv_val / 8;
   1dc42:	2b00      	cmp	r3, #0
   1dc44:	4619      	mov	r1, r3
   1dc46:	bfb8      	it	lt
   1dc48:	1dd9      	addlt	r1, r3, #7
   1dc4a:	10c9      	asrs	r1, r1, #3
   1dc4c:	6011      	str	r1, [r2, #0]
		val->val2 = (conv_val % 8) * (1000000 / 8);
   1dc4e:	4259      	negs	r1, r3
   1dc50:	f001 0107 	and.w	r1, r1, #7
   1dc54:	f003 0307 	and.w	r3, r3, #7
   1dc58:	bf58      	it	pl
   1dc5a:	424b      	negpl	r3, r1
   1dc5c:	4911      	ldr	r1, [pc, #68]	; (1dca4 <hts221_channel_get+0x88>)
			   (data->h1_t0_out - data->h0_t0_out) +
			   data->h0_rh_x2;

		/* convert humidity x2 to percent */
		val->val1 = conv_val / 2;
		val->val2 = (conv_val % 2) * 500000;
   1dc5e:	434b      	muls	r3, r1
   1dc60:	6053      	str	r3, [r2, #4]
	} else {
		return -ENOTSUP;
	}

	return 0;
   1dc62:	2000      	movs	r0, #0
}
   1dc64:	bd70      	pop	{r4, r5, r6, pc}
	} else if (chan == SENSOR_CHAN_HUMIDITY) {
   1dc66:	2910      	cmp	r1, #16
   1dc68:	d119      	bne.n	1dc9e <hts221_channel_get+0x82>
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
   1dc6a:	7905      	ldrb	r5, [r0, #4]
   1dc6c:	7943      	ldrb	r3, [r0, #5]
			   (data->rh_sample - data->h0_t0_out) /
   1dc6e:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
			   (data->h1_t0_out - data->h0_t0_out) +
   1dc72:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
   1dc76:	1b5c      	subs	r4, r3, r5
			   (data->rh_sample - data->h0_t0_out) /
   1dc78:	f9b0 3000 	ldrsh.w	r3, [r0]
   1dc7c:	1b9b      	subs	r3, r3, r6
			   (data->h1_t0_out - data->h0_t0_out) +
   1dc7e:	1b89      	subs	r1, r1, r6
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
   1dc80:	4363      	muls	r3, r4
			   (data->rh_sample - data->h0_t0_out) /
   1dc82:	fb93 f3f1 	sdiv	r3, r3, r1
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
   1dc86:	442b      	add	r3, r5
		val->val1 = conv_val / 2;
   1dc88:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
   1dc8c:	1049      	asrs	r1, r1, #1
		val->val2 = (conv_val % 2) * 500000;
   1dc8e:	2b00      	cmp	r3, #0
   1dc90:	f003 0301 	and.w	r3, r3, #1
		val->val1 = conv_val / 2;
   1dc94:	6011      	str	r1, [r2, #0]
		val->val2 = (conv_val % 2) * 500000;
   1dc96:	bfb8      	it	lt
   1dc98:	425b      	neglt	r3, r3
   1dc9a:	4903      	ldr	r1, [pc, #12]	; (1dca8 <hts221_channel_get+0x8c>)
   1dc9c:	e7df      	b.n	1dc5e <hts221_channel_get+0x42>
		return -ENOTSUP;
   1dc9e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1dca2:	e7df      	b.n	1dc64 <hts221_channel_get+0x48>
   1dca4:	0001e848 	.word	0x0001e848
   1dca8:	0007a120 	.word	0x0007a120

0001dcac <hts221_sample_fetch>:

static int hts221_sample_fetch(const struct device *dev,
			       enum sensor_channel chan)
{
   1dcac:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t buf[4];
	int status;

	__ASSERT_NO_MSG(chan == SENSOR_CHAN_ALL);

	status = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L |
   1dcae:	2304      	movs	r3, #4
	struct hts221_data *data = dev->data;
   1dcb0:	6905      	ldr	r5, [r0, #16]
	status = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L |
   1dcb2:	6840      	ldr	r0, [r0, #4]
   1dcb4:	eb0d 0203 	add.w	r2, sp, r3
   1dcb8:	21a8      	movs	r1, #168	; 0xa8
   1dcba:	f006 f84f 	bl	23d5c <hts221_read_reg>
				 HTS221_AUTOINCREMENT_ADDR, buf, 4);
	if (status < 0) {
   1dcbe:	1e04      	subs	r4, r0, #0
   1dcc0:	da0c      	bge.n	1dcdc <hts221_sample_fetch+0x30>
   1dcc2:	490e      	ldr	r1, [pc, #56]	; (1dcfc <hts221_sample_fetch+0x50>)
   1dcc4:	4b0e      	ldr	r3, [pc, #56]	; (1dd00 <hts221_sample_fetch+0x54>)
		LOG_ERR("Failed to fetch data sample.");
   1dcc6:	480f      	ldr	r0, [pc, #60]	; (1dd04 <hts221_sample_fetch+0x58>)
   1dcc8:	1ac9      	subs	r1, r1, r3
   1dcca:	08c9      	lsrs	r1, r1, #3
   1dccc:	0189      	lsls	r1, r1, #6
   1dcce:	f041 0101 	orr.w	r1, r1, #1
   1dcd2:	f006 f8c6 	bl	23e62 <log_0>

	data->rh_sample = sys_le16_to_cpu(buf[0] | (buf[1] << 8));
	data->t_sample = sys_le16_to_cpu(buf[2] | (buf[3] << 8));

	return 0;
}
   1dcd6:	4620      	mov	r0, r4
   1dcd8:	b003      	add	sp, #12
   1dcda:	bd30      	pop	{r4, r5, pc}
	data->rh_sample = sys_le16_to_cpu(buf[0] | (buf[1] << 8));
   1dcdc:	f89d 2005 	ldrb.w	r2, [sp, #5]
   1dce0:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1dce4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1dce8:	802b      	strh	r3, [r5, #0]
	data->t_sample = sys_le16_to_cpu(buf[2] | (buf[3] << 8));
   1dcea:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1dcee:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1dcf2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1dcf6:	806b      	strh	r3, [r5, #2]
	return 0;
   1dcf8:	2400      	movs	r4, #0
   1dcfa:	e7ec      	b.n	1dcd6 <hts221_sample_fetch+0x2a>
   1dcfc:	00028dd4 	.word	0x00028dd4
   1dd00:	00028dd4 	.word	0x00028dd4
   1dd04:	0002c414 	.word	0x0002c414

0001dd08 <hts221_init>:
	.sample_fetch = hts221_sample_fetch,
	.channel_get = hts221_channel_get,
};

int hts221_init(const struct device *dev)
{
   1dd08:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct hts221_config *cfg = dev->config;
	stmdev_ctx_t *ctx = (stmdev_ctx_t *)&cfg->ctx;
   1dd0a:	6846      	ldr	r6, [r0, #4]
	uint8_t id, idx;
	int status;

	/* check chip ID */

	status = hts221_device_id_get(ctx, &id);
   1dd0c:	4d55      	ldr	r5, [pc, #340]	; (1de64 <hts221_init+0x15c>)
{
   1dd0e:	b087      	sub	sp, #28
   1dd10:	4607      	mov	r7, r0
	status = hts221_device_id_get(ctx, &id);
   1dd12:	f10d 0107 	add.w	r1, sp, #7
   1dd16:	4630      	mov	r0, r6
   1dd18:	f006 f85a 	bl	23dd0 <hts221_device_id_get>
	if (status < 0) {
   1dd1c:	4b52      	ldr	r3, [pc, #328]	; (1de68 <hts221_init+0x160>)
   1dd1e:	1aed      	subs	r5, r5, r3
   1dd20:	08ed      	lsrs	r5, r5, #3
   1dd22:	1e04      	subs	r4, r0, #0
   1dd24:	ea4f 1585 	mov.w	r5, r5, lsl #6
   1dd28:	da05      	bge.n	1dd36 <hts221_init+0x2e>
		LOG_ERR("Failed to read chip ID.");
   1dd2a:	4850      	ldr	r0, [pc, #320]	; (1de6c <hts221_init+0x164>)
   1dd2c:	f045 0101 	orr.w	r1, r5, #1
	 */
	k_sleep(K_MSEC(3));

	status = hts221_read_conversion_data(dev);
	if (status < 0) {
		LOG_ERR("Failed to read conversion data.");
   1dd30:	f006 f897 	bl	23e62 <log_0>
		return status;
   1dd34:	e00a      	b.n	1dd4c <hts221_init+0x44>
	if (id != HTS221_ID) {
   1dd36:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1dd3a:	2bbc      	cmp	r3, #188	; 0xbc
   1dd3c:	d009      	beq.n	1dd52 <hts221_init+0x4a>
		LOG_ERR("Invalid chip ID.");
   1dd3e:	484c      	ldr	r0, [pc, #304]	; (1de70 <hts221_init+0x168>)
   1dd40:	f045 0101 	orr.w	r1, r5, #1
   1dd44:	f006 f88d 	bl	23e62 <log_0>
		return -EINVAL;
   1dd48:	f06f 0415 	mvn.w	r4, #21
#else
	LOG_INF("Cannot enable trigger without drdy-gpios");
#endif

	return 0;
}
   1dd4c:	4620      	mov	r0, r4
   1dd4e:	b007      	add	sp, #28
   1dd50:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!strcmp(hts221_odrs[idx].str, CONFIG_HTS221_ODR)) {
   1dd52:	4948      	ldr	r1, [pc, #288]	; (1de74 <hts221_init+0x16c>)
   1dd54:	4608      	mov	r0, r1
   1dd56:	f007 f868 	bl	24e2a <strcmp>
   1dd5a:	2800      	cmp	r0, #0
   1dd5c:	d073      	beq.n	1de46 <hts221_init+0x13e>
   1dd5e:	4945      	ldr	r1, [pc, #276]	; (1de74 <hts221_init+0x16c>)
   1dd60:	4845      	ldr	r0, [pc, #276]	; (1de78 <hts221_init+0x170>)
   1dd62:	f007 f862 	bl	24e2a <strcmp>
   1dd66:	2800      	cmp	r0, #0
   1dd68:	d06c      	beq.n	1de44 <hts221_init+0x13c>
   1dd6a:	4942      	ldr	r1, [pc, #264]	; (1de74 <hts221_init+0x16c>)
   1dd6c:	4843      	ldr	r0, [pc, #268]	; (1de7c <hts221_init+0x174>)
   1dd6e:	f007 f85c 	bl	24e2a <strcmp>
   1dd72:	2800      	cmp	r0, #0
   1dd74:	d074      	beq.n	1de60 <hts221_init+0x158>
		LOG_ERR("Invalid ODR value %s.", CONFIG_HTS221_ODR);
   1dd76:	493f      	ldr	r1, [pc, #252]	; (1de74 <hts221_init+0x16c>)
   1dd78:	4841      	ldr	r0, [pc, #260]	; (1de80 <hts221_init+0x178>)
   1dd7a:	f045 0201 	orr.w	r2, r5, #1
   1dd7e:	f006 f87d 	bl	23e7c <log_1>
   1dd82:	e7e1      	b.n	1dd48 <hts221_init+0x40>
	status = hts221_block_data_update_set(ctx, 1);
   1dd84:	2101      	movs	r1, #1
   1dd86:	4630      	mov	r0, r6
   1dd88:	f006 f80b 	bl	23da2 <hts221_block_data_update_set>
	if (status < 0) {
   1dd8c:	1e04      	subs	r4, r0, #0
   1dd8e:	da03      	bge.n	1dd98 <hts221_init+0x90>
		LOG_ERR("Could not set BDU bit");
   1dd90:	483c      	ldr	r0, [pc, #240]	; (1de84 <hts221_init+0x17c>)
   1dd92:	f045 0101 	orr.w	r1, r5, #1
   1dd96:	e7cb      	b.n	1dd30 <hts221_init+0x28>
	status = hts221_power_on_set(ctx, 1);
   1dd98:	2101      	movs	r1, #1
   1dd9a:	4630      	mov	r0, r6
   1dd9c:	f006 f81d 	bl	23dda <hts221_power_on_set>
	if (status < 0) {
   1dda0:	1e04      	subs	r4, r0, #0
   1dda2:	da03      	bge.n	1ddac <hts221_init+0xa4>
		LOG_ERR("Could not set PD bit");
   1dda4:	4838      	ldr	r0, [pc, #224]	; (1de88 <hts221_init+0x180>)
   1dda6:	f045 0101 	orr.w	r1, r5, #1
   1ddaa:	e7c1      	b.n	1dd30 <hts221_init+0x28>
	return z_impl_k_sleep(timeout);
   1ddac:	2100      	movs	r1, #0
   1ddae:	2063      	movs	r0, #99	; 0x63
   1ddb0:	f003 fe12 	bl	219d8 <z_impl_k_sleep>
	status = hts221_read_reg(ctx, HTS221_H0_RH_X2 |
   1ddb4:	6878      	ldr	r0, [r7, #4]
	struct hts221_data *data = dev->data;
   1ddb6:	693e      	ldr	r6, [r7, #16]
	status = hts221_read_reg(ctx, HTS221_H0_RH_X2 |
   1ddb8:	2310      	movs	r3, #16
   1ddba:	aa02      	add	r2, sp, #8
   1ddbc:	21b0      	movs	r1, #176	; 0xb0
   1ddbe:	f005 ffcd 	bl	23d5c <hts221_read_reg>
	if (status < 0) {
   1ddc2:	1e04      	subs	r4, r0, #0
   1ddc4:	da08      	bge.n	1ddd8 <hts221_init+0xd0>
		LOG_ERR("Failed to read conversion data.");
   1ddc6:	f045 0501 	orr.w	r5, r5, #1
   1ddca:	4830      	ldr	r0, [pc, #192]	; (1de8c <hts221_init+0x184>)
   1ddcc:	4629      	mov	r1, r5
   1ddce:	f006 f848 	bl	23e62 <log_0>
		LOG_ERR("Failed to read conversion data.");
   1ddd2:	482e      	ldr	r0, [pc, #184]	; (1de8c <hts221_init+0x184>)
   1ddd4:	4629      	mov	r1, r5
   1ddd6:	e7ab      	b.n	1dd30 <hts221_init+0x28>
	data->h0_rh_x2 = buf[0];
   1ddd8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1dddc:	80b3      	strh	r3, [r6, #4]
	data->t0_degc_x8 = sys_le16_to_cpu(buf[2] | ((buf[5] & 0x3) << 8));
   1ddde:	f89d 300d 	ldrb.w	r3, [sp, #13]
	LOG_INF("Cannot enable trigger without drdy-gpios");
   1dde2:	482b      	ldr	r0, [pc, #172]	; (1de90 <hts221_init+0x188>)
	data->t0_degc_x8 = sys_le16_to_cpu(buf[2] | ((buf[5] & 0x3) << 8));
   1dde4:	021a      	lsls	r2, r3, #8
   1dde6:	f402 7140 	and.w	r1, r2, #768	; 0x300
   1ddea:	f89d 200a 	ldrb.w	r2, [sp, #10]
   1ddee:	430a      	orrs	r2, r1
   1ddf0:	80f2      	strh	r2, [r6, #6]
	data->t1_degc_x8 = sys_le16_to_cpu(buf[3] | ((buf[5] & 0xC) << 6));
   1ddf2:	f89d 200b 	ldrb.w	r2, [sp, #11]
   1ddf6:	019b      	lsls	r3, r3, #6
   1ddf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
   1ddfc:	4313      	orrs	r3, r2
   1ddfe:	8133      	strh	r3, [r6, #8]
	data->h0_t0_out = sys_le16_to_cpu(buf[6] | (buf[7] << 8));
   1de00:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1de04:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1de08:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1de0c:	8173      	strh	r3, [r6, #10]
	data->h1_t0_out = sys_le16_to_cpu(buf[10] | (buf[11] << 8));
   1de0e:	f89d 2013 	ldrb.w	r2, [sp, #19]
   1de12:	f89d 3012 	ldrb.w	r3, [sp, #18]
   1de16:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1de1a:	81b3      	strh	r3, [r6, #12]
	data->t0_out = sys_le16_to_cpu(buf[12] | (buf[13] << 8));
   1de1c:	f89d 2015 	ldrb.w	r2, [sp, #21]
   1de20:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1de24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1de28:	81f3      	strh	r3, [r6, #14]
	data->t1_out = sys_le16_to_cpu(buf[14] | (buf[15] << 8));
   1de2a:	f89d 2017 	ldrb.w	r2, [sp, #23]
   1de2e:	f89d 3016 	ldrb.w	r3, [sp, #22]
   1de32:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1de36:	8233      	strh	r3, [r6, #16]
	LOG_INF("Cannot enable trigger without drdy-gpios");
   1de38:	f045 0103 	orr.w	r1, r5, #3
   1de3c:	f006 f811 	bl	23e62 <log_0>
	return 0;
   1de40:	2400      	movs	r4, #0
   1de42:	e783      	b.n	1dd4c <hts221_init+0x44>
		if (!strcmp(hts221_odrs[idx].str, CONFIG_HTS221_ODR)) {
   1de44:	2001      	movs	r0, #1
	status = hts221_data_rate_set(ctx, hts221_odrs[idx].odr);
   1de46:	4b13      	ldr	r3, [pc, #76]	; (1de94 <hts221_init+0x18c>)
   1de48:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1de4c:	7901      	ldrb	r1, [r0, #4]
   1de4e:	4630      	mov	r0, r6
   1de50:	f005 ff90 	bl	23d74 <hts221_data_rate_set>
	if (status < 0) {
   1de54:	1e04      	subs	r4, r0, #0
   1de56:	da95      	bge.n	1dd84 <hts221_init+0x7c>
		LOG_ERR("Could not set output data rate");
   1de58:	480f      	ldr	r0, [pc, #60]	; (1de98 <hts221_init+0x190>)
   1de5a:	f045 0101 	orr.w	r1, r5, #1
   1de5e:	e767      	b.n	1dd30 <hts221_init+0x28>
		if (!strcmp(hts221_odrs[idx].str, CONFIG_HTS221_ODR)) {
   1de60:	2002      	movs	r0, #2
   1de62:	e7f0      	b.n	1de46 <hts221_init+0x13e>
   1de64:	00028dd4 	.word	0x00028dd4
   1de68:	00028dd4 	.word	0x00028dd4
   1de6c:	0002c431 	.word	0x0002c431
   1de70:	0002c449 	.word	0x0002c449
   1de74:	0002c8d5 	.word	0x0002c8d5
   1de78:	0002c45a 	.word	0x0002c45a
   1de7c:	0002c45c 	.word	0x0002c45c
   1de80:	0002c461 	.word	0x0002c461
   1de84:	0002c496 	.word	0x0002c496
   1de88:	0002c4ac 	.word	0x0002c4ac
   1de8c:	0002c4c1 	.word	0x0002c4c1
   1de90:	0002c4e1 	.word	0x0002c4e1
   1de94:	000299ec 	.word	0x000299ec
   1de98:	0002c477 	.word	0x0002c477

0001de9c <common_init.isra.0>:
 *
 * @param gpiop where to store the GPIO device pointer
 *
 * @return negative on error, otherwise zero.
 */
static int common_init(const struct device *dev)
   1de9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1de9e:	4604      	mov	r4, r0
{
	const struct driver_config *cfg = dev->config;
	gpio_flags_t flags;

	if (!device_is_ready(cfg->enable.port)) {
   1dea0:	68c0      	ldr	r0, [r0, #12]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
   1dea2:	f009 ffb1 	bl	27e08 <z_device_ready>
   1dea6:	b320      	cbz	r0, 1def2 <common_init.isra.0+0x56>
	}

	bool on = cfg->options & (OPTION_ALWAYS_ON | OPTION_BOOT_ON);
	uint32_t delay_us = 0;

	if (on) {
   1dea8:	7d25      	ldrb	r5, [r4, #20]
   1deaa:	f015 0503 	ands.w	r5, r5, #3
   1deae:	d130      	bne.n	1df12 <common_init.isra.0+0x76>
		flags = GPIO_OUTPUT_ACTIVE;
		delay_us = cfg->startup_delay_us;
	} else {
		flags = GPIO_OUTPUT_INACTIVE;
   1deb0:	f44f 52b0 	mov.w	r2, #5632	; 0x1600
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
				  spec->pin,
				  spec->dt_flags | extra_flags);
   1deb4:	7c63      	ldrb	r3, [r4, #17]
	return gpio_pin_configure(spec->port,
   1deb6:	68e0      	ldr	r0, [r4, #12]
   1deb8:	7c21      	ldrb	r1, [r4, #16]
   1deba:	4313      	orrs	r3, r2
	struct gpio_driver_data *data =
   1debc:	6907      	ldr	r7, [r0, #16]
	const struct gpio_driver_api *api =
   1debe:	f8d0 c008 	ldr.w	ip, [r0, #8]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   1dec2:	683c      	ldr	r4, [r7, #0]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1dec4:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1dec6:	bf48      	it	mi
   1dec8:	f483 6340 	eormi.w	r3, r3, #3072	; 0xc00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1decc:	2601      	movs	r6, #1
   1dece:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1ded2:	408e      	lsls	r6, r1
   1ded4:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1ded6:	bf4c      	ite	mi
   1ded8:	4334      	orrmi	r4, r6
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1deda:	43b4      	bicpl	r4, r6
   1dedc:	603c      	str	r4, [r7, #0]
	return api->pin_configure(port, pin, flags);
   1dede:	f8dc 3000 	ldr.w	r3, [ip]
   1dee2:	4798      	blx	r3
	}

	int rc = gpio_pin_configure_dt(&cfg->enable, flags);

	if ((rc == 0) && (delay_us > 0)) {
   1dee4:	4604      	mov	r4, r0
   1dee6:	b990      	cbnz	r0, 1df0e <common_init.isra.0+0x72>
   1dee8:	b18d      	cbz	r5, 1df0e <common_init.isra.0+0x72>
	z_impl_k_busy_wait(usec_to_wait);
   1deea:	4628      	mov	r0, r5
   1deec:	f00a fbec 	bl	286c8 <z_impl_k_busy_wait>
}
   1def0:	e00d      	b.n	1df0e <common_init.isra.0+0x72>
   1def2:	4b0a      	ldr	r3, [pc, #40]	; (1df1c <common_init.isra.0+0x80>)
   1def4:	4a0a      	ldr	r2, [pc, #40]	; (1df20 <common_init.isra.0+0x84>)
		LOG_ERR("GPIO port: %s not ready", cfg->enable.port->name);
   1def6:	480b      	ldr	r0, [pc, #44]	; (1df24 <common_init.isra.0+0x88>)
   1def8:	1ad2      	subs	r2, r2, r3
   1defa:	08d2      	lsrs	r2, r2, #3
   1defc:	68e3      	ldr	r3, [r4, #12]
   1defe:	0192      	lsls	r2, r2, #6
   1df00:	6819      	ldr	r1, [r3, #0]
   1df02:	f042 0201 	orr.w	r2, r2, #1
   1df06:	f005 ffb9 	bl	23e7c <log_1>
		return -ENODEV;
   1df0a:	f06f 0412 	mvn.w	r4, #18
		 */
		k_busy_wait(delay_us);
	}

	return rc;
}
   1df0e:	4620      	mov	r0, r4
   1df10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		delay_us = cfg->startup_delay_us;
   1df12:	6865      	ldr	r5, [r4, #4]
		flags = GPIO_OUTPUT_ACTIVE;
   1df14:	f44f 52d0 	mov.w	r2, #6656	; 0x1a00
   1df18:	e7cc      	b.n	1deb4 <common_init.isra.0+0x18>
   1df1a:	bf00      	nop
   1df1c:	00028dd4 	.word	0x00028dd4
   1df20:	00028ed4 	.word	0x00028ed4
   1df24:	0002c511 	.word	0x0002c511

0001df28 <regulator_fixed_init_sync>:
	.enable = enable_sync,
	.disable = disable_sync,
};

static int regulator_fixed_init_sync(const struct device *dev)
{
   1df28:	b538      	push	{r3, r4, r5, lr}
   1df2a:	4605      	mov	r5, r0
	const struct driver_config *cfg = dev->config;
	int rc = common_init(dev);
   1df2c:	6840      	ldr	r0, [r0, #4]
   1df2e:	f7ff ffb5 	bl	1de9c <common_init.isra.0>
   1df32:	4a07      	ldr	r2, [pc, #28]	; (1df50 <regulator_fixed_init_sync+0x28>)
   1df34:	4b07      	ldr	r3, [pc, #28]	; (1df54 <regulator_fixed_init_sync+0x2c>)
	__ASSERT(cfg->startup_delay_us == 0,
		 "sync not valid with startup delay");
	__ASSERT(cfg->off_on_delay_us == 0,
		 "sync not valid with shutdown delay");

	LOG_INF("%s sync: %d", dev->name, rc);
   1df36:	6829      	ldr	r1, [r5, #0]
   1df38:	1a9b      	subs	r3, r3, r2
   1df3a:	08db      	lsrs	r3, r3, #3
   1df3c:	019b      	lsls	r3, r3, #6
	int rc = common_init(dev);
   1df3e:	4604      	mov	r4, r0
	LOG_INF("%s sync: %d", dev->name, rc);
   1df40:	4602      	mov	r2, r0
   1df42:	f043 0303 	orr.w	r3, r3, #3
   1df46:	4804      	ldr	r0, [pc, #16]	; (1df58 <regulator_fixed_init_sync+0x30>)
   1df48:	f005 ffac 	bl	23ea4 <log_2>

	return rc;
}
   1df4c:	4620      	mov	r0, r4
   1df4e:	bd38      	pop	{r3, r4, r5, pc}
   1df50:	00028dd4 	.word	0x00028dd4
   1df54:	00028ed4 	.word	0x00028ed4
   1df58:	0002c529 	.word	0x0002c529

0001df5c <regulator_fixed_init_onoff>:
{
   1df5c:	b538      	push	{r3, r4, r5, lr}
	struct driver_data_onoff *data = dev->data;
   1df5e:	6905      	ldr	r5, [r0, #16]
	rc = onoff_manager_init(&data->mgr, &transitions);
   1df60:	490f      	ldr	r1, [pc, #60]	; (1dfa0 <regulator_fixed_init_onoff+0x44>)
{
   1df62:	4604      	mov	r4, r0
	data->dev = dev;
   1df64:	4628      	mov	r0, r5
   1df66:	f840 4b04 	str.w	r4, [r0], #4
	rc = onoff_manager_init(&data->mgr, &transitions);
   1df6a:	f006 fd27 	bl	249bc <onoff_manager_init>
	k_work_init_delayable(&data->dwork, onoff_worker);
   1df6e:	490d      	ldr	r1, [pc, #52]	; (1dfa4 <regulator_fixed_init_onoff+0x48>)
   1df70:	f105 0020 	add.w	r0, r5, #32
   1df74:	f00a fc8b 	bl	2888e <k_work_init_delayable>
	rc = common_init(dev);
   1df78:	6860      	ldr	r0, [r4, #4]
   1df7a:	f7ff ff8f 	bl	1de9c <common_init.isra.0>
   1df7e:	4a0a      	ldr	r2, [pc, #40]	; (1dfa8 <regulator_fixed_init_onoff+0x4c>)
   1df80:	4b0a      	ldr	r3, [pc, #40]	; (1dfac <regulator_fixed_init_onoff+0x50>)
	LOG_INF("%s onoff: %d", dev->name, rc);
   1df82:	6821      	ldr	r1, [r4, #0]
   1df84:	1a9b      	subs	r3, r3, r2
   1df86:	08db      	lsrs	r3, r3, #3
   1df88:	ea00 75e0 	and.w	r5, r0, r0, asr #31
   1df8c:	019b      	lsls	r3, r3, #6
   1df8e:	4808      	ldr	r0, [pc, #32]	; (1dfb0 <regulator_fixed_init_onoff+0x54>)
   1df90:	f043 0303 	orr.w	r3, r3, #3
   1df94:	462a      	mov	r2, r5
   1df96:	f005 ff85 	bl	23ea4 <log_2>
}
   1df9a:	4628      	mov	r0, r5
   1df9c:	bd38      	pop	{r3, r4, r5, pc}
   1df9e:	bf00      	nop
   1dfa0:	00029a8c 	.word	0x00029a8c
   1dfa4:	000278c7 	.word	0x000278c7
   1dfa8:	00028dd4 	.word	0x00028dd4
   1dfac:	00028ed4 	.word	0x00028ed4
   1dfb0:	0002c535 	.word	0x0002c535

0001dfb4 <finalize_transition>:
{
   1dfb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((rc >= 0) && (delay_us > 0)) {
   1dfb8:	1e1c      	subs	r4, r3, #0
{
   1dfba:	4605      	mov	r5, r0
   1dfbc:	4688      	mov	r8, r1
   1dfbe:	4616      	mov	r6, r2
	if ((rc >= 0) && (delay_us > 0)) {
   1dfc0:	db10      	blt.n	1dfe4 <finalize_transition+0x30>
   1dfc2:	b17a      	cbz	r2, 1dfe4 <finalize_transition+0x30>
   1dfc4:	ea4f 4952 	mov.w	r9, r2, lsr #17
   1dfc8:	03d7      	lsls	r7, r2, #15
   1dfca:	2300      	movs	r3, #0
   1dfcc:	4a15      	ldr	r2, [pc, #84]	; (1e024 <finalize_transition+0x70>)
   1dfce:	4638      	mov	r0, r7
   1dfd0:	4649      	mov	r1, r9
   1dfd2:	f7e2 f885 	bl	e0 <__aeabi_uldivmod>
		    || k_is_pre_kernel()
   1dfd6:	b110      	cbz	r0, 1dfde <finalize_transition+0x2a>
	return !z_sys_post_kernel;
   1dfd8:	4b13      	ldr	r3, [pc, #76]	; (1e028 <finalize_transition+0x74>)
   1dfda:	781b      	ldrb	r3, [r3, #0]
   1dfdc:	b943      	cbnz	r3, 1dff0 <finalize_transition+0x3c>
	z_impl_k_busy_wait(usec_to_wait);
   1dfde:	4630      	mov	r0, r6
   1dfe0:	f00a fb72 	bl	286c8 <z_impl_k_busy_wait>
	notify(&data->mgr, rc);
   1dfe4:	4621      	mov	r1, r4
   1dfe6:	1d28      	adds	r0, r5, #4
   1dfe8:	4643      	mov	r3, r8
}
   1dfea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	notify(&data->mgr, rc);
   1dfee:	4718      	bx	r3
		} else {
			return (t * to_hz + off) / from_hz;
   1dff0:	480e      	ldr	r0, [pc, #56]	; (1e02c <finalize_transition+0x78>)
   1dff2:	4a0c      	ldr	r2, [pc, #48]	; (1e024 <finalize_transition+0x70>)
			data->notify = notify;
   1dff4:	f8c5 8050 	str.w	r8, [r5, #80]	; 0x50
   1dff8:	1838      	adds	r0, r7, r0
			data->task = WORK_TASK_DELAY;
   1dffa:	f04f 0303 	mov.w	r3, #3
   1dffe:	f04f 0100 	mov.w	r1, #0
   1e002:	eb49 0101 	adc.w	r1, r9, r1
   1e006:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
   1e00a:	2300      	movs	r3, #0
   1e00c:	f7e2 f868 	bl	e0 <__aeabi_uldivmod>
   1e010:	4602      	mov	r2, r0
   1e012:	460b      	mov	r3, r1
			rc = k_work_schedule(&data->dwork, K_USEC(delay_us));
   1e014:	f105 0020 	add.w	r0, r5, #32
   1e018:	f004 fa3c 	bl	22494 <k_work_schedule>
			if (rc >= 0) {
   1e01c:	1e04      	subs	r4, r0, #0
   1e01e:	dbe1      	blt.n	1dfe4 <finalize_transition+0x30>
}
   1e020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e024:	000f4240 	.word	0x000f4240
   1e028:	200033dc 	.word	0x200033dc
   1e02c:	000f423f 	.word	0x000f423f

0001e030 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   1e030:	4b02      	ldr	r3, [pc, #8]	; (1e03c <flash_nrf_pages_layout+0xc>)
   1e032:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1e034:	2301      	movs	r3, #1
   1e036:	6013      	str	r3, [r2, #0]
}
   1e038:	4770      	bx	lr
   1e03a:	bf00      	nop
   1e03c:	200025cc 	.word	0x200025cc

0001e040 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   1e040:	4800      	ldr	r0, [pc, #0]	; (1e044 <flash_nrf_get_parameters+0x4>)
   1e042:	4770      	bx	lr
   1e044:	00029ab0 	.word	0x00029ab0

0001e048 <flash_nrf_read>:
{
   1e048:	b570      	push	{r4, r5, r6, lr}
   1e04a:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   1e04c:	4628      	mov	r0, r5
   1e04e:	4619      	mov	r1, r3
{
   1e050:	4616      	mov	r6, r2
   1e052:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1e054:	f009 fd19 	bl	27a8a <is_regular_addr_valid>
   1e058:	b970      	cbnz	r0, 1e078 <flash_nrf_read+0x30>
   1e05a:	4a0c      	ldr	r2, [pc, #48]	; (1e08c <flash_nrf_read+0x44>)
   1e05c:	4b0c      	ldr	r3, [pc, #48]	; (1e090 <flash_nrf_read+0x48>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1e05e:	480d      	ldr	r0, [pc, #52]	; (1e094 <flash_nrf_read+0x4c>)
   1e060:	1a9b      	subs	r3, r3, r2
   1e062:	08db      	lsrs	r3, r3, #3
   1e064:	019b      	lsls	r3, r3, #6
   1e066:	f043 0301 	orr.w	r3, r3, #1
   1e06a:	4622      	mov	r2, r4
   1e06c:	4629      	mov	r1, r5
   1e06e:	f005 ff19 	bl	23ea4 <log_2>
		return -EINVAL;
   1e072:	f06f 0015 	mvn.w	r0, #21
}
   1e076:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
   1e078:	b134      	cbz	r4, 1e088 <flash_nrf_read+0x40>
	memcpy(data, (void *)addr, len);
   1e07a:	4622      	mov	r2, r4
   1e07c:	4629      	mov	r1, r5
   1e07e:	4630      	mov	r0, r6
   1e080:	f006 fefe 	bl	24e80 <memcpy>
	return 0;
   1e084:	2000      	movs	r0, #0
   1e086:	e7f6      	b.n	1e076 <flash_nrf_read+0x2e>
		return 0;
   1e088:	4620      	mov	r0, r4
   1e08a:	e7f4      	b.n	1e076 <flash_nrf_read+0x2e>
   1e08c:	00028dd4 	.word	0x00028dd4
   1e090:	00028e74 	.word	0x00028e74
   1e094:	0002c593 	.word	0x0002c593

0001e098 <flash_nrf_erase>:
{
   1e098:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e09a:	b087      	sub	sp, #28
   1e09c:	460e      	mov	r6, r1
   1e09e:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1e0a0:	f009 fe1f 	bl	27ce2 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   1e0a4:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1e0a6:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   1e0a8:	4630      	mov	r0, r6
   1e0aa:	f009 fcee 	bl	27a8a <is_regular_addr_valid>
   1e0ae:	b388      	cbz	r0, 1e114 <flash_nrf_erase+0x7c>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1e0b0:	fbb6 f3f7 	udiv	r3, r6, r7
   1e0b4:	fb07 6313 	mls	r3, r7, r3, r6
   1e0b8:	b923      	cbnz	r3, 1e0c4 <flash_nrf_erase+0x2c>
   1e0ba:	fbb5 f4f7 	udiv	r4, r5, r7
   1e0be:	fb07 5414 	mls	r4, r7, r4, r5
   1e0c2:	b184      	cbz	r4, 1e0e6 <flash_nrf_erase+0x4e>
   1e0c4:	4a25      	ldr	r2, [pc, #148]	; (1e15c <flash_nrf_erase+0xc4>)
   1e0c6:	4b26      	ldr	r3, [pc, #152]	; (1e160 <flash_nrf_erase+0xc8>)
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   1e0c8:	4826      	ldr	r0, [pc, #152]	; (1e164 <flash_nrf_erase+0xcc>)
   1e0ca:	1a9b      	subs	r3, r3, r2
   1e0cc:	08db      	lsrs	r3, r3, #3
   1e0ce:	019b      	lsls	r3, r3, #6
   1e0d0:	f043 0301 	orr.w	r3, r3, #1
   1e0d4:	462a      	mov	r2, r5
   1e0d6:	4631      	mov	r1, r6
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1e0d8:	f005 fee4 	bl	23ea4 <log_2>
		return -EINVAL;
   1e0dc:	f06f 0415 	mvn.w	r4, #21
}
   1e0e0:	4620      	mov	r0, r4
   1e0e2:	b007      	add	sp, #28
   1e0e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!n_pages) {
   1e0e6:	42bd      	cmp	r5, r7
   1e0e8:	d3fa      	bcc.n	1e0e0 <flash_nrf_erase+0x48>
	return z_impl_k_sem_take(sem, timeout);
   1e0ea:	f04f 33ff 	mov.w	r3, #4294967295
   1e0ee:	f04f 32ff 	mov.w	r2, #4294967295
   1e0f2:	481d      	ldr	r0, [pc, #116]	; (1e168 <flash_nrf_erase+0xd0>)
   1e0f4:	f003 fd2a 	bl	21b4c <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1e0f8:	f009 fdd9 	bl	27cae <nrf_flash_sync_is_required>
   1e0fc:	ab02      	add	r3, sp, #8
   1e0fe:	4601      	mov	r1, r0
   1e100:	b998      	cbnz	r0, 1e12a <flash_nrf_erase+0x92>
	return FLASH_OP_DONE;
}

static int erase(uint32_t addr, uint32_t size)
{
	struct flash_context context = {
   1e102:	2210      	movs	r2, #16
   1e104:	4618      	mov	r0, r3
   1e106:	f006 fec6 	bl	24e96 <memset>
   1e10a:	e9cd 6503 	strd	r6, r5, [sp, #12]
#if defined(CONFIG_SOC_FLASH_NRF_PARTIAL_ERASE)
		.flash_addr_next = addr
#endif
	};

	return	erase_op(&context);
   1e10e:	f009 fccf 	bl	27ab0 <erase_op>
   1e112:	e01d      	b.n	1e150 <flash_nrf_erase+0xb8>
   1e114:	4a11      	ldr	r2, [pc, #68]	; (1e15c <flash_nrf_erase+0xc4>)
   1e116:	4b12      	ldr	r3, [pc, #72]	; (1e160 <flash_nrf_erase+0xc8>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1e118:	4814      	ldr	r0, [pc, #80]	; (1e16c <flash_nrf_erase+0xd4>)
   1e11a:	1a9b      	subs	r3, r3, r2
   1e11c:	08db      	lsrs	r3, r3, #3
   1e11e:	019b      	lsls	r3, r3, #6
   1e120:	f043 0301 	orr.w	r3, r3, #1
   1e124:	462a      	mov	r2, r5
   1e126:	4631      	mov	r1, r6
   1e128:	e7d6      	b.n	1e0d8 <flash_nrf_erase+0x40>
	struct flash_context context = {
   1e12a:	2210      	movs	r2, #16
   1e12c:	4621      	mov	r1, r4
   1e12e:	4618      	mov	r0, r3
   1e130:	f006 feb1 	bl	24e96 <memset>
   1e134:	2201      	movs	r2, #1
   1e136:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1e13a:	4a0d      	ldr	r2, [pc, #52]	; (1e170 <flash_nrf_erase+0xd8>)
   1e13c:	e9cd 2000 	strd	r2, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1e140:	480c      	ldr	r0, [pc, #48]	; (1e174 <flash_nrf_erase+0xdc>)
	struct flash_context context = {
   1e142:	e9cd 6503 	strd	r6, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1e146:	f001 fc7d 	bl	1fa44 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1e14a:	4668      	mov	r0, sp
   1e14c:	f001 fc80 	bl	1fa50 <nrf_flash_sync_exe>
	return	erase_op(&context);
   1e150:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1e152:	4805      	ldr	r0, [pc, #20]	; (1e168 <flash_nrf_erase+0xd0>)
   1e154:	f003 fcd4 	bl	21b00 <z_impl_k_sem_give>
}
   1e158:	e7c2      	b.n	1e0e0 <flash_nrf_erase+0x48>
   1e15a:	bf00      	nop
   1e15c:	00028dd4 	.word	0x00028dd4
   1e160:	00028e74 	.word	0x00028e74
   1e164:	0002c5b0 	.word	0x0002c5b0
   1e168:	200025d4 	.word	0x200025d4
   1e16c:	0002c593 	.word	0x0002c593
   1e170:	00027ab1 	.word	0x00027ab1
   1e174:	00015e64 	.word	0x00015e64

0001e178 <nrf_flash_init>:
{
   1e178:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1e17a:	2201      	movs	r2, #1
   1e17c:	4611      	mov	r1, r2
   1e17e:	4807      	ldr	r0, [pc, #28]	; (1e19c <nrf_flash_init+0x24>)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1e180:	4c07      	ldr	r4, [pc, #28]	; (1e1a0 <nrf_flash_init+0x28>)
   1e182:	f00a fa40 	bl	28606 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   1e186:	f001 fc55 	bl	1fa34 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1e18a:	f009 fdae 	bl	27cea <nrfx_nvmc_flash_page_count_get>
   1e18e:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1e190:	f009 fda7 	bl	27ce2 <nrfx_nvmc_flash_page_size_get>
   1e194:	6060      	str	r0, [r4, #4]
}
   1e196:	2000      	movs	r0, #0
   1e198:	bd10      	pop	{r4, pc}
   1e19a:	bf00      	nop
   1e19c:	200025d4 	.word	0x200025d4
   1e1a0:	200025cc 	.word	0x200025cc

0001e1a4 <write_op>:
{
   1e1a4:	b538      	push	{r3, r4, r5, lr}
	if (w_ctx->enable_time_limit) {
   1e1a6:	7b03      	ldrb	r3, [r0, #12]
{
   1e1a8:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   1e1aa:	b10b      	cbz	r3, 1e1b0 <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   1e1ac:	f009 fd81 	bl	27cb2 <nrf_flash_sync_get_timestamp_begin>
{
   1e1b0:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   1e1b2:	68a3      	ldr	r3, [r4, #8]
   1e1b4:	2b03      	cmp	r3, #3
   1e1b6:	d806      	bhi.n	1e1c6 <write_op+0x22>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1e1b8:	4a12      	ldr	r2, [pc, #72]	; (1e204 <write_op+0x60>)
   1e1ba:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1e1be:	07db      	lsls	r3, r3, #31
   1e1c0:	d5fb      	bpl.n	1e1ba <write_op+0x16>
	return FLASH_OP_DONE;
   1e1c2:	2000      	movs	r0, #0
}
   1e1c4:	bd38      	pop	{r3, r4, r5, pc}
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   1e1c6:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   1e1c8:	6860      	ldr	r0, [r4, #4]
   1e1ca:	6819      	ldr	r1, [r3, #0]
   1e1cc:	f002 f864 	bl	20298 <nrfx_nvmc_word_write>
	w_ctx->flash_addr += shift;
   1e1d0:	6863      	ldr	r3, [r4, #4]
   1e1d2:	3304      	adds	r3, #4
   1e1d4:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   1e1d6:	6823      	ldr	r3, [r4, #0]
   1e1d8:	3304      	adds	r3, #4
   1e1da:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   1e1dc:	68a3      	ldr	r3, [r4, #8]
   1e1de:	3b04      	subs	r3, #4
   1e1e0:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   1e1e2:	7b23      	ldrb	r3, [r4, #12]
		i++;
   1e1e4:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   1e1e6:	2b00      	cmp	r3, #0
   1e1e8:	d0e3      	beq.n	1e1b2 <write_op+0xe>
			if (nrf_flash_sync_check_time_limit(i)) {
   1e1ea:	4628      	mov	r0, r5
   1e1ec:	f001 fcbc 	bl	1fb68 <nrf_flash_sync_check_time_limit>
   1e1f0:	2800      	cmp	r0, #0
   1e1f2:	d0de      	beq.n	1e1b2 <write_op+0xe>
   1e1f4:	4a03      	ldr	r2, [pc, #12]	; (1e204 <write_op+0x60>)
   1e1f6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1e1fa:	07d9      	lsls	r1, r3, #31
   1e1fc:	d5fb      	bpl.n	1e1f6 <write_op+0x52>
				return FLASH_OP_ONGOING;
   1e1fe:	2001      	movs	r0, #1
   1e200:	e7e0      	b.n	1e1c4 <write_op+0x20>
   1e202:	bf00      	nop
   1e204:	4001e000 	.word	0x4001e000

0001e208 <flash_nrf_write>:
{
   1e208:	b570      	push	{r4, r5, r6, lr}
   1e20a:	460d      	mov	r5, r1
   1e20c:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   1e20e:	4619      	mov	r1, r3
   1e210:	4628      	mov	r0, r5
{
   1e212:	4616      	mov	r6, r2
   1e214:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1e216:	f009 fc38 	bl	27a8a <is_regular_addr_valid>
   1e21a:	b980      	cbnz	r0, 1e23e <flash_nrf_write+0x36>
   1e21c:	4a23      	ldr	r2, [pc, #140]	; (1e2ac <flash_nrf_write+0xa4>)
   1e21e:	4b24      	ldr	r3, [pc, #144]	; (1e2b0 <flash_nrf_write+0xa8>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1e220:	4824      	ldr	r0, [pc, #144]	; (1e2b4 <flash_nrf_write+0xac>)
   1e222:	1a9b      	subs	r3, r3, r2
   1e224:	08db      	lsrs	r3, r3, #3
   1e226:	019b      	lsls	r3, r3, #6
   1e228:	f043 0301 	orr.w	r3, r3, #1
   1e22c:	4622      	mov	r2, r4
   1e22e:	4629      	mov	r1, r5
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1e230:	f005 fe38 	bl	23ea4 <log_2>
		return -EINVAL;
   1e234:	f06f 0415 	mvn.w	r4, #21
}
   1e238:	4620      	mov	r0, r4
   1e23a:	b006      	add	sp, #24
   1e23c:	bd70      	pop	{r4, r5, r6, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   1e23e:	ea45 0304 	orr.w	r3, r5, r4
   1e242:	079b      	lsls	r3, r3, #30
   1e244:	d00a      	beq.n	1e25c <flash_nrf_write+0x54>
   1e246:	4a19      	ldr	r2, [pc, #100]	; (1e2ac <flash_nrf_write+0xa4>)
   1e248:	4b19      	ldr	r3, [pc, #100]	; (1e2b0 <flash_nrf_write+0xa8>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1e24a:	481b      	ldr	r0, [pc, #108]	; (1e2b8 <flash_nrf_write+0xb0>)
   1e24c:	1a9b      	subs	r3, r3, r2
   1e24e:	08db      	lsrs	r3, r3, #3
   1e250:	019b      	lsls	r3, r3, #6
   1e252:	f043 0301 	orr.w	r3, r3, #1
   1e256:	4622      	mov	r2, r4
   1e258:	4629      	mov	r1, r5
   1e25a:	e7e9      	b.n	1e230 <flash_nrf_write+0x28>
	if (!len) {
   1e25c:	2c00      	cmp	r4, #0
   1e25e:	d0eb      	beq.n	1e238 <flash_nrf_write+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1e260:	f04f 33ff 	mov.w	r3, #4294967295
   1e264:	f04f 32ff 	mov.w	r2, #4294967295
   1e268:	4814      	ldr	r0, [pc, #80]	; (1e2bc <flash_nrf_write+0xb4>)
   1e26a:	f003 fc6f 	bl	21b4c <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1e26e:	f009 fd1e 	bl	27cae <nrf_flash_sync_is_required>
   1e272:	4603      	mov	r3, r0
	struct flash_context context = {
   1e274:	e9cd 6502 	strd	r6, r5, [sp, #8]
   1e278:	a802      	add	r0, sp, #8
   1e27a:	9404      	str	r4, [sp, #16]
	if (nrf_flash_sync_is_required()) {
   1e27c:	b18b      	cbz	r3, 1e2a2 <flash_nrf_write+0x9a>
	struct flash_context context = {
   1e27e:	2301      	movs	r3, #1
   1e280:	f88d 3014 	strb.w	r3, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1e284:	4b0e      	ldr	r3, [pc, #56]	; (1e2c0 <flash_nrf_write+0xb8>)
   1e286:	e9cd 3000 	strd	r3, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   1e28a:	f641 504c 	movw	r0, #7500	; 0x1d4c
   1e28e:	f001 fbd9 	bl	1fa44 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1e292:	4668      	mov	r0, sp
   1e294:	f001 fbdc 	bl	1fa50 <nrf_flash_sync_exe>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
		.enable_time_limit = 0 /* disable time limit */
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	};

	return write_op(&context);
   1e298:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1e29a:	4808      	ldr	r0, [pc, #32]	; (1e2bc <flash_nrf_write+0xb4>)
   1e29c:	f003 fc30 	bl	21b00 <z_impl_k_sem_give>
}
   1e2a0:	e7ca      	b.n	1e238 <flash_nrf_write+0x30>
	struct flash_context context = {
   1e2a2:	f88d 3014 	strb.w	r3, [sp, #20]
	return write_op(&context);
   1e2a6:	f7ff ff7d 	bl	1e1a4 <write_op>
   1e2aa:	e7f5      	b.n	1e298 <flash_nrf_write+0x90>
   1e2ac:	00028dd4 	.word	0x00028dd4
   1e2b0:	00028e74 	.word	0x00028e74
   1e2b4:	0002c593 	.word	0x0002c593
   1e2b8:	0002c5cf 	.word	0x0002c5cf
   1e2bc:	200025d4 	.word	0x200025d4
   1e2c0:	0001e1a5 	.word	0x0001e1a5

0001e2c4 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   1e2c4:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   1e2c6:	794b      	ldrb	r3, [r1, #5]
   1e2c8:	2b01      	cmp	r3, #1
   1e2ca:	d120      	bne.n	1e30e <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1e2cc:	798b      	ldrb	r3, [r1, #6]
   1e2ce:	2b03      	cmp	r3, #3
   1e2d0:	d11d      	bne.n	1e30e <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1e2d2:	79cc      	ldrb	r4, [r1, #7]
   1e2d4:	b10c      	cbz	r4, 1e2da <uarte_nrfx_configure+0x16>
   1e2d6:	2c01      	cmp	r4, #1
   1e2d8:	d119      	bne.n	1e30e <uarte_nrfx_configure+0x4a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1e2da:	790a      	ldrb	r2, [r1, #4]
   1e2dc:	b112      	cbz	r2, 1e2e4 <uarte_nrfx_configure+0x20>
   1e2de:	2a02      	cmp	r2, #2
   1e2e0:	d115      	bne.n	1e30e <uarte_nrfx_configure+0x4a>
   1e2e2:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1e2e4:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1e2e6:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1e2e8:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1e2ec:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   1e2ee:	d062      	beq.n	1e3b6 <uarte_nrfx_configure+0xf2>
   1e2f0:	d82b      	bhi.n	1e34a <uarte_nrfx_configure+0x86>
   1e2f2:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1e2f6:	d061      	beq.n	1e3bc <uarte_nrfx_configure+0xf8>
   1e2f8:	d814      	bhi.n	1e324 <uarte_nrfx_configure+0x60>
   1e2fa:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1e2fe:	d05f      	beq.n	1e3c0 <uarte_nrfx_configure+0xfc>
   1e300:	d808      	bhi.n	1e314 <uarte_nrfx_configure+0x50>
   1e302:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1e306:	d05e      	beq.n	1e3c6 <uarte_nrfx_configure+0x102>
   1e308:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1e30c:	d05e      	beq.n	1e3cc <uarte_nrfx_configure+0x108>
   1e30e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1e312:	e04f      	b.n	1e3b4 <uarte_nrfx_configure+0xf0>
   1e314:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1e318:	d05b      	beq.n	1e3d2 <uarte_nrfx_configure+0x10e>
   1e31a:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1e31e:	d1f6      	bne.n	1e30e <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1e320:	4b36      	ldr	r3, [pc, #216]	; (1e3fc <uarte_nrfx_configure+0x138>)
   1e322:	e03c      	b.n	1e39e <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1e324:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1e328:	d056      	beq.n	1e3d8 <uarte_nrfx_configure+0x114>
   1e32a:	d807      	bhi.n	1e33c <uarte_nrfx_configure+0x78>
   1e32c:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1e330:	d054      	beq.n	1e3dc <uarte_nrfx_configure+0x118>
   1e332:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1e336:	d1ea      	bne.n	1e30e <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1e338:	4b31      	ldr	r3, [pc, #196]	; (1e400 <uarte_nrfx_configure+0x13c>)
   1e33a:	e030      	b.n	1e39e <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1e33c:	f647 2612 	movw	r6, #31250	; 0x7a12
   1e340:	42b3      	cmp	r3, r6
   1e342:	d1e4      	bne.n	1e30e <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1e344:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1e348:	e029      	b.n	1e39e <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1e34a:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1e34e:	d047      	beq.n	1e3e0 <uarte_nrfx_configure+0x11c>
   1e350:	d813      	bhi.n	1e37a <uarte_nrfx_configure+0xb6>
   1e352:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1e356:	d046      	beq.n	1e3e6 <uarte_nrfx_configure+0x122>
   1e358:	d809      	bhi.n	1e36e <uarte_nrfx_configure+0xaa>
   1e35a:	f64d 26c0 	movw	r6, #56000	; 0xdac0
   1e35e:	42b3      	cmp	r3, r6
   1e360:	d043      	beq.n	1e3ea <uarte_nrfx_configure+0x126>
   1e362:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1e366:	d1d2      	bne.n	1e30e <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1e368:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1e36c:	e017      	b.n	1e39e <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1e36e:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1e372:	d1cc      	bne.n	1e30e <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1e374:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1e378:	e011      	b.n	1e39e <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1e37a:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1e37e:	d037      	beq.n	1e3f0 <uarte_nrfx_configure+0x12c>
   1e380:	d808      	bhi.n	1e394 <uarte_nrfx_configure+0xd0>
   1e382:	4e20      	ldr	r6, [pc, #128]	; (1e404 <uarte_nrfx_configure+0x140>)
   1e384:	42b3      	cmp	r3, r6
   1e386:	d036      	beq.n	1e3f6 <uarte_nrfx_configure+0x132>
   1e388:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1e38c:	d1bf      	bne.n	1e30e <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1e38e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1e392:	e004      	b.n	1e39e <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1e394:	4e1c      	ldr	r6, [pc, #112]	; (1e408 <uarte_nrfx_configure+0x144>)
   1e396:	42b3      	cmp	r3, r6
   1e398:	d1b9      	bne.n	1e30e <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1e39a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1e39e:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   1e3a2:	6903      	ldr	r3, [r0, #16]
   1e3a4:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   1e3a6:	4322      	orrs	r2, r4
   1e3a8:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1e3aa:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   1e3ae:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1e3b2:	2000      	movs	r0, #0
}
   1e3b4:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1e3b6:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1e3ba:	e7f0      	b.n	1e39e <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1e3bc:	4b13      	ldr	r3, [pc, #76]	; (1e40c <uarte_nrfx_configure+0x148>)
   1e3be:	e7ee      	b.n	1e39e <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1e3c0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1e3c4:	e7eb      	b.n	1e39e <uarte_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
   1e3c6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1e3ca:	e7e8      	b.n	1e39e <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1e3cc:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1e3d0:	e7e5      	b.n	1e39e <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1e3d2:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1e3d6:	e7e2      	b.n	1e39e <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1e3d8:	4b0d      	ldr	r3, [pc, #52]	; (1e410 <uarte_nrfx_configure+0x14c>)
   1e3da:	e7e0      	b.n	1e39e <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1e3dc:	4b0d      	ldr	r3, [pc, #52]	; (1e414 <uarte_nrfx_configure+0x150>)
   1e3de:	e7de      	b.n	1e39e <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1e3e0:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1e3e4:	e7db      	b.n	1e39e <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1e3e6:	4b0c      	ldr	r3, [pc, #48]	; (1e418 <uarte_nrfx_configure+0x154>)
   1e3e8:	e7d9      	b.n	1e39e <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1e3ea:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1e3ee:	e7d6      	b.n	1e39e <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1e3f0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1e3f4:	e7d3      	b.n	1e39e <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1e3f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1e3fa:	e7d0      	b.n	1e39e <uarte_nrfx_configure+0xda>
   1e3fc:	0013b000 	.word	0x0013b000
   1e400:	004ea000 	.word	0x004ea000
   1e404:	0003d090 	.word	0x0003d090
   1e408:	000f4240 	.word	0x000f4240
   1e40c:	00275000 	.word	0x00275000
   1e410:	0075c000 	.word	0x0075c000
   1e414:	003af000 	.word	0x003af000
   1e418:	013a9000 	.word	0x013a9000

0001e41c <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   1e41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1e41e:	6906      	ldr	r6, [r0, #16]
{
   1e420:	4605      	mov	r5, r0
   1e422:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1e424:	f00a f8ff 	bl	28626 <k_is_in_isr>
   1e428:	b910      	cbnz	r0, 1e430 <uarte_nrfx_poll_out+0x14>
   1e42a:	4b2c      	ldr	r3, [pc, #176]	; (1e4dc <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
   1e42c:	781b      	ldrb	r3, [r3, #0]
   1e42e:	b983      	cbnz	r3, 1e452 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   1e430:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e434:	f3ef 8411 	mrs	r4, BASEPRI
   1e438:	f383 8812 	msr	BASEPRI_MAX, r3
   1e43c:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   1e440:	4628      	mov	r0, r5
   1e442:	f009 fba2 	bl	27b8a <is_tx_ready>
   1e446:	bb28      	cbnz	r0, 1e494 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   1e448:	f384 8811 	msr	BASEPRI, r4
   1e44c:	f3bf 8f6f 	isb	sy
}
   1e450:	e7ee      	b.n	1e430 <uarte_nrfx_poll_out+0x14>
{
   1e452:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1e454:	4628      	mov	r0, r5
   1e456:	f009 fb98 	bl	27b8a <is_tx_ready>
   1e45a:	b970      	cbnz	r0, 1e47a <uarte_nrfx_poll_out+0x5e>
   1e45c:	2001      	movs	r0, #1
   1e45e:	f009 fc2a 	bl	27cb6 <nrfx_busy_wait>
   1e462:	3c01      	subs	r4, #1
   1e464:	d1f6      	bne.n	1e454 <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
   1e466:	2100      	movs	r1, #0
   1e468:	2021      	movs	r0, #33	; 0x21
   1e46a:	f003 fab5 	bl	219d8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1e46e:	e7f0      	b.n	1e452 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   1e470:	f384 8811 	msr	BASEPRI, r4
   1e474:	f3bf 8f6f 	isb	sy
}
   1e478:	e7f5      	b.n	1e466 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   1e47a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e47e:	f3ef 8411 	mrs	r4, BASEPRI
   1e482:	f383 8812 	msr	BASEPRI_MAX, r3
   1e486:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1e48a:	4628      	mov	r0, r5
   1e48c:	f009 fb7d 	bl	27b8a <is_tx_ready>
   1e490:	2800      	cmp	r0, #0
   1e492:	d0ed      	beq.n	1e470 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
   1e494:	f806 7f10 	strb.w	r7, [r6, #16]!
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   1e498:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
   1e49a:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   1e49c:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1e49e:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1e4a2:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e4a6:	2200      	movs	r2, #0
   1e4a8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1e4ac:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   1e4b0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   1e4b4:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1e4b8:	684a      	ldr	r2, [r1, #4]
   1e4ba:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1e4bc:	bf41      	itttt	mi
   1e4be:	2208      	movmi	r2, #8
   1e4c0:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   1e4c4:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   1e4c8:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e4cc:	2201      	movs	r2, #1
   1e4ce:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   1e4d0:	f384 8811 	msr	BASEPRI, r4
   1e4d4:	f3bf 8f6f 	isb	sy
	tx_start(dev, &data->char_out, 1);

	irq_unlock(key);
}
   1e4d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e4da:	bf00      	nop
   1e4dc:	200033dc 	.word	0x200033dc

0001e4e0 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1e4e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e4e4:	2101      	movs	r1, #1
   1e4e6:	4605      	mov	r5, r0
   1e4e8:	2200      	movs	r2, #0
   1e4ea:	2002      	movs	r0, #2
   1e4ec:	f7f5 faac 	bl	13a48 <z_arm_irq_priority_set>
   1e4f0:	2002      	movs	r0, #2
   1e4f2:	f7f5 fa77 	bl	139e4 <arch_irq_enable>
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   1e4f6:	686f      	ldr	r7, [r5, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1e4f8:	692e      	ldr	r6, [r5, #16]
	return config->uarte_regs;
   1e4fa:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1e4fc:	2300      	movs	r3, #0
   1e4fe:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	data->dev = dev;
   1e502:	6035      	str	r5, [r6, #0]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
   1e504:	686b      	ldr	r3, [r5, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1e506:	68d8      	ldr	r0, [r3, #12]
   1e508:	1c41      	adds	r1, r0, #1
   1e50a:	d00c      	beq.n	1e526 <uarte_0_init+0x46>
    *p_pin = pin_number & 0x1F;
   1e50c:	f000 021f 	and.w	r2, r0, #31
    p_reg->OUTSET = set_mask;
   1e510:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1e514:	2101      	movs	r1, #1
   1e516:	4091      	lsls	r1, r2
    reg->PIN_CNF[pin_number] = cnf;
   1e518:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    p_reg->OUTSET = set_mask;
   1e51c:	f8cc 1508 	str.w	r1, [ip, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   1e520:	2103      	movs	r1, #3
   1e522:	f84c 1022 	str.w	r1, [ip, r2, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1e526:	6919      	ldr	r1, [r3, #16]
   1e528:	1c4a      	adds	r2, r1, #1
   1e52a:	d00e      	beq.n	1e54a <uarte_0_init+0x6a>
			nrf_gpio_cfg_input(cfg->rx_pin,
   1e52c:	7f1a      	ldrb	r2, [r3, #28]
   1e52e:	2a00      	cmp	r2, #0
    *p_pin = pin_number & 0x1F;
   1e530:	f001 021f 	and.w	r2, r1, #31
    reg->PIN_CNF[pin_number] = cnf;
   1e534:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   1e538:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1e53c:	bf14      	ite	ne
   1e53e:	f04f 0e0c 	movne.w	lr, #12
   1e542:	f04f 0e00 	moveq.w	lr, #0
    reg->PIN_CNF[pin_number] = cnf;
   1e546:	f84c e022 	str.w	lr, [ip, r2, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1e54a:	f8d3 c014 	ldr.w	ip, [r3, #20]
   1e54e:	f1bc 3fff 	cmp.w	ip, #4294967295
   1e552:	d00f      	beq.n	1e574 <uarte_0_init+0x94>
    *p_pin = pin_number & 0x1F;
   1e554:	f00c 021f 	and.w	r2, ip, #31
    p_reg->OUTSET = set_mask;
   1e558:	f04f 48a0 	mov.w	r8, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1e55c:	f04f 0e01 	mov.w	lr, #1
   1e560:	fa0e fe02 	lsl.w	lr, lr, r2
    reg->PIN_CNF[pin_number] = cnf;
   1e564:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    p_reg->OUTSET = set_mask;
   1e568:	f8c8 e508 	str.w	lr, [r8, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   1e56c:	f04f 0e03 	mov.w	lr, #3
   1e570:	f848 e022 	str.w	lr, [r8, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1e574:	f8d3 e018 	ldr.w	lr, [r3, #24]
   1e578:	f1be 3fff 	cmp.w	lr, #4294967295
   1e57c:	d00e      	beq.n	1e59c <uarte_0_init+0xbc>
			nrf_gpio_cfg_input(cfg->cts_pin,
   1e57e:	7f5a      	ldrb	r2, [r3, #29]
   1e580:	2a00      	cmp	r2, #0
    *p_pin = pin_number & 0x1F;
   1e582:	f00e 021f 	and.w	r2, lr, #31
    reg->PIN_CNF[pin_number] = cnf;
   1e586:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   1e58a:	f04f 48a0 	mov.w	r8, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1e58e:	bf14      	ite	ne
   1e590:	f04f 090c 	movne.w	r9, #12
   1e594:	f04f 0900 	moveq.w	r9, #0
    reg->PIN_CNF[pin_number] = cnf;
   1e598:	f848 9022 	str.w	r9, [r8, r2, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
   1e59c:	681b      	ldr	r3, [r3, #0]
    p_reg->PSEL.TXD = pseltxd;
   1e59e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1e5a2:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1e5a6:	6929      	ldr	r1, [r5, #16]
    p_reg->PSEL.RTS = pselrts;
   1e5a8:	f8c3 c508 	str.w	ip, [r3, #1288]	; 0x508
   1e5ac:	4628      	mov	r0, r5
    p_reg->PSEL.CTS = pselcts;
   1e5ae:	f8c3 e510 	str.w	lr, [r3, #1296]	; 0x510
   1e5b2:	3104      	adds	r1, #4
   1e5b4:	f7ff fe86 	bl	1e2c4 <uarte_nrfx_configure>
	if (err) {
   1e5b8:	4605      	mov	r5, r0
   1e5ba:	b9a8      	cbnz	r0, 1e5e8 <uarte_0_init+0x108>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1e5bc:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1e5be:	0799      	lsls	r1, r3, #30
   1e5c0:	d528      	bpl.n	1e614 <uarte_0_init+0x134>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1e5c2:	f106 0012 	add.w	r0, r6, #18
   1e5c6:	f001 fe79 	bl	202bc <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1e5ca:	4b26      	ldr	r3, [pc, #152]	; (1e664 <uarte_0_init+0x184>)
   1e5cc:	4298      	cmp	r0, r3
   1e5ce:	d00e      	beq.n	1e5ee <uarte_0_init+0x10e>
   1e5d0:	4b25      	ldr	r3, [pc, #148]	; (1e668 <uarte_0_init+0x188>)
   1e5d2:	4926      	ldr	r1, [pc, #152]	; (1e66c <uarte_0_init+0x18c>)
		LOG_ERR("Failed to allocate PPI Channel");
   1e5d4:	4826      	ldr	r0, [pc, #152]	; (1e670 <uarte_0_init+0x190>)
   1e5d6:	1ac9      	subs	r1, r1, r3
   1e5d8:	08c9      	lsrs	r1, r1, #3
   1e5da:	0189      	lsls	r1, r1, #6
   1e5dc:	f041 0101 	orr.w	r1, r1, #1
   1e5e0:	f005 fc3f 	bl	23e62 <log_0>
		return -EIO;
   1e5e4:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
   1e5e8:	4628      	mov	r0, r5
   1e5ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1e5ee:	7cb0      	ldrb	r0, [r6, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1e5f0:	00c3      	lsls	r3, r0, #3
   1e5f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e5f6:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   1e5fa:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1e5fe:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1e602:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1e606:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   1e60a:	4a1a      	ldr	r2, [pc, #104]	; (1e674 <uarte_0_init+0x194>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1e60c:	2301      	movs	r3, #1
   1e60e:	4083      	lsls	r3, r0
   1e610:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1e614:	2308      	movs	r3, #8
   1e616:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   1e61a:	7a3b      	ldrb	r3, [r7, #8]
   1e61c:	b95b      	cbnz	r3, 1e636 <uarte_0_init+0x156>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e61e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1e622:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1e626:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1e62a:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1e62e:	2301      	movs	r3, #1
   1e630:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e634:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1e636:	687b      	ldr	r3, [r7, #4]
   1e638:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1e63a:	bf5c      	itt	pl
   1e63c:	f44f 7280 	movpl.w	r2, #256	; 0x100
   1e640:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1e644:	06db      	lsls	r3, r3, #27
   1e646:	bf44      	itt	mi
   1e648:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1e64c:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   1e650:	3610      	adds	r6, #16
    p_reg->TXD.MAXCNT = length;
   1e652:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1e654:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1e658:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e65c:	2301      	movs	r3, #1
   1e65e:	60a3      	str	r3, [r4, #8]
   1e660:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   1e662:	e7c1      	b.n	1e5e8 <uarte_0_init+0x108>
   1e664:	0bad0000 	.word	0x0bad0000
   1e668:	00028dd4 	.word	0x00028dd4
   1e66c:	00028f0c 	.word	0x00028f0c
   1e670:	0002c5f7 	.word	0x0002c5f7
   1e674:	4001f000 	.word	0x4001f000

0001e678 <random_byte_get>:
	__asm__ volatile(
   1e678:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e67c:	f3ef 8211 	mrs	r2, BASEPRI
   1e680:	f383 8812 	msr	BASEPRI_MAX, r3
   1e684:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1e688:	4b08      	ldr	r3, [pc, #32]	; (1e6ac <random_byte_get+0x34>)
   1e68a:	6819      	ldr	r1, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1e68c:	b159      	cbz	r1, 1e6a6 <random_byte_get+0x2e>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1e68e:	4908      	ldr	r1, [pc, #32]	; (1e6b0 <random_byte_get+0x38>)
   1e690:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e694:	2100      	movs	r1, #0
   1e696:	6019      	str	r1, [r3, #0]
   1e698:	681b      	ldr	r3, [r3, #0]
		retval = nrf_rng_random_value_get(NRF_RNG);
   1e69a:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1e69c:	f382 8811 	msr	BASEPRI, r2
   1e6a0:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1e6a4:	4770      	bx	lr
	int retval = -EAGAIN;
   1e6a6:	f06f 000a 	mvn.w	r0, #10
   1e6aa:	e7f7      	b.n	1e69c <random_byte_get+0x24>
   1e6ac:	4000d100 	.word	0x4000d100
   1e6b0:	4000d000 	.word	0x4000d000

0001e6b4 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1e6b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e6b6:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   1e6b8:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   1e6ba:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1e6bc:	f04f 0540 	mov.w	r5, #64	; 0x40
   1e6c0:	f3ef 8011 	mrs	r0, BASEPRI
   1e6c4:	f385 8812 	msr	BASEPRI_MAX, r5
   1e6c8:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1e6cc:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1e6ce:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   1e6d2:	1ba4      	subs	r4, r4, r6
   1e6d4:	403c      	ands	r4, r7
	if (available < len) {
   1e6d6:	42a2      	cmp	r2, r4
		len = available;
   1e6d8:	bf88      	it	hi
   1e6da:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1e6dc:	eb06 0c02 	add.w	ip, r6, r2
   1e6e0:	ea07 0c0c 	and.w	ip, r7, ip
	first = rngp->first_alloc;
   1e6e4:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1e6e6:	f883 c000 	strb.w	ip, [r3]
	__asm__ volatile(
   1e6ea:	f380 8811 	msr	BASEPRI, r0
   1e6ee:	f3bf 8f6f 	isb	sy
   1e6f2:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   1e6f4:	4608      	mov	r0, r1
	irq_unlock(key);

	while (likely(len--)) {
   1e6f6:	4282      	cmp	r2, r0
   1e6f8:	d119      	bne.n	1e72e <rng_pool_get+0x7a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1e6fa:	4576      	cmp	r6, lr
   1e6fc:	d10d      	bne.n	1e71a <rng_pool_get+0x66>
	__asm__ volatile(
   1e6fe:	f04f 0540 	mov.w	r5, #64	; 0x40
   1e702:	f3ef 8211 	mrs	r2, BASEPRI
   1e706:	f385 8812 	msr	BASEPRI_MAX, r5
   1e70a:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1e70e:	781d      	ldrb	r5, [r3, #0]
   1e710:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   1e712:	f382 8811 	msr	BASEPRI, r2
   1e716:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1e71a:	1a41      	subs	r1, r0, r1
	available = available - len;
	if (available <= rngp->threshold) {
   1e71c:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   1e71e:	b288      	uxth	r0, r1
	available = available - len;
   1e720:	1a21      	subs	r1, r4, r0
	if (available <= rngp->threshold) {
   1e722:	428b      	cmp	r3, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1e724:	bf22      	ittt	cs
   1e726:	4b06      	ldrcs	r3, [pc, #24]	; (1e740 <rng_pool_get+0x8c>)
   1e728:	2201      	movcs	r2, #1
   1e72a:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1e72c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1e72e:	eb03 0c05 	add.w	ip, r3, r5
		first = (first + 1) & mask;
   1e732:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1e734:	f89c c005 	ldrb.w	ip, [ip, #5]
   1e738:	f800 cb01 	strb.w	ip, [r0], #1
		first = (first + 1) & mask;
   1e73c:	403d      	ands	r5, r7
   1e73e:	e7da      	b.n	1e6f6 <rng_pool_get+0x42>
   1e740:	4000d000 	.word	0x4000d000

0001e744 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1e744:	43db      	mvns	r3, r3
{
   1e746:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1e74a:	f013 0501 	ands.w	r5, r3, #1
{
   1e74e:	460e      	mov	r6, r1
   1e750:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1e752:	d004      	beq.n	1e75e <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1e754:	4821      	ldr	r0, [pc, #132]	; (1e7dc <entropy_nrf5_get_entropy_isr+0x98>)
   1e756:	f7ff ffad 	bl	1e6b4 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1e75a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1e75e:	2a00      	cmp	r2, #0
   1e760:	d033      	beq.n	1e7ca <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   1e762:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e766:	f3ef 8811 	mrs	r8, BASEPRI
   1e76a:	f383 8812 	msr	BASEPRI_MAX, r3
   1e76e:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1e772:	200d      	movs	r0, #13
   1e774:	f7f5 f95a 	bl	13a2c <arch_irq_is_enabled>
   1e778:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1e77a:	200d      	movs	r0, #13
   1e77c:	f7f5 f942 	bl	13a04 <arch_irq_disable>
	__asm__ volatile(
   1e780:	f388 8811 	msr	BASEPRI, r8
   1e784:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e788:	4a15      	ldr	r2, [pc, #84]	; (1e7e0 <entropy_nrf5_get_entropy_isr+0x9c>)
   1e78a:	6015      	str	r5, [r2, #0]
   1e78c:	6813      	ldr	r3, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1e78e:	4b15      	ldr	r3, [pc, #84]	; (1e7e4 <entropy_nrf5_get_entropy_isr+0xa0>)
   1e790:	2101      	movs	r1, #1
   1e792:	6019      	str	r1, [r3, #0]
   1e794:	4914      	ldr	r1, [pc, #80]	; (1e7e8 <entropy_nrf5_get_entropy_isr+0xa4>)
   1e796:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   1e79a:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
   1e79e:	4625      	mov	r5, r4
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1e7a0:	4691      	mov	r9, r2
   1e7a2:	468a      	mov	sl, r1
   1e7a4:	4698      	mov	r8, r3
   1e7a6:	f8d9 3000 	ldr.w	r3, [r9]
			while (!nrf_rng_event_check(NRF_RNG,
   1e7aa:	b183      	cbz	r3, 1e7ce <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   1e7ac:	f7ff ff64 	bl	1e678 <random_byte_get>
			if (byte < 0) {
   1e7b0:	1e03      	subs	r3, r0, #0
   1e7b2:	f8ca 8180 	str.w	r8, [sl, #384]	; 0x180
   1e7b6:	dbf6      	blt.n	1e7a6 <entropy_nrf5_get_entropy_isr+0x62>
   1e7b8:	3d01      	subs	r5, #1
   1e7ba:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   1e7bc:	5573      	strb	r3, [r6, r5]
		} while (len);
   1e7be:	2d00      	cmp	r5, #0
   1e7c0:	d1f1      	bne.n	1e7a6 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   1e7c2:	b117      	cbz	r7, 1e7ca <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   1e7c4:	200d      	movs	r0, #13
   1e7c6:	f7f5 f90d 	bl	139e4 <arch_irq_enable>
	return cnt;
   1e7ca:	4620      	mov	r0, r4
   1e7cc:	e7c5      	b.n	1e75a <entropy_nrf5_get_entropy_isr+0x16>
   1e7ce:	f3bf 8f4f 	dsb	sy
				__WFE();
   1e7d2:	bf20      	wfe
				__SEV();
   1e7d4:	bf40      	sev
				__WFE();
   1e7d6:	bf20      	wfe
   1e7d8:	e7e5      	b.n	1e7a6 <entropy_nrf5_get_entropy_isr+0x62>
   1e7da:	bf00      	nop
   1e7dc:	2000261c 	.word	0x2000261c
   1e7e0:	4000d100 	.word	0x4000d100
   1e7e4:	4000d000 	.word	0x4000d000
   1e7e8:	e000e100 	.word	0xe000e100

0001e7ec <entropy_nrf5_get_entropy>:
{
   1e7ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   1e7f0:	4f13      	ldr	r7, [pc, #76]	; (1e840 <entropy_nrf5_get_entropy+0x54>)
   1e7f2:	460d      	mov	r5, r1
   1e7f4:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1e7f6:	f107 0845 	add.w	r8, r7, #69	; 0x45
   1e7fa:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   1e7fe:	b914      	cbnz	r4, 1e806 <entropy_nrf5_get_entropy+0x1a>
}
   1e800:	4620      	mov	r0, r4
   1e802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e806:	f04f 33ff 	mov.w	r3, #4294967295
   1e80a:	f04f 32ff 	mov.w	r2, #4294967295
   1e80e:	4638      	mov	r0, r7
   1e810:	f003 f99c 	bl	21b4c <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1e814:	4622      	mov	r2, r4
   1e816:	4629      	mov	r1, r5
   1e818:	4640      	mov	r0, r8
   1e81a:	f7ff ff4b 	bl	1e6b4 <rng_pool_get>
   1e81e:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1e820:	4638      	mov	r0, r7
   1e822:	f003 f96d 	bl	21b00 <z_impl_k_sem_give>
		if (bytes == 0U) {
   1e826:	b93e      	cbnz	r6, 1e838 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   1e828:	f04f 32ff 	mov.w	r2, #4294967295
   1e82c:	f04f 33ff 	mov.w	r3, #4294967295
   1e830:	4648      	mov	r0, r9
   1e832:	f003 f98b 	bl	21b4c <z_impl_k_sem_take>
			continue;
   1e836:	e7e2      	b.n	1e7fe <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   1e838:	1ba4      	subs	r4, r4, r6
   1e83a:	b2a4      	uxth	r4, r4
		buf += bytes;
   1e83c:	4435      	add	r5, r6
   1e83e:	e7de      	b.n	1e7fe <entropy_nrf5_get_entropy+0x12>
   1e840:	200025ec 	.word	0x200025ec

0001e844 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1e844:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1e846:	4c19      	ldr	r4, [pc, #100]	; (1e8ac <entropy_nrf5_init+0x68>)
   1e848:	2201      	movs	r2, #1
   1e84a:	4611      	mov	r1, r2
   1e84c:	4620      	mov	r0, r4
   1e84e:	f009 feda 	bl	28606 <z_impl_k_sem_init>
   1e852:	2201      	movs	r2, #1
   1e854:	2100      	movs	r1, #0
   1e856:	f104 0018 	add.w	r0, r4, #24
   1e85a:	f009 fed4 	bl	28606 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1e85e:	f240 4307 	movw	r3, #1031	; 0x407
   1e862:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1e866:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1e86a:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1e86c:	230c      	movs	r3, #12
   1e86e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1e872:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1e874:	4b0e      	ldr	r3, [pc, #56]	; (1e8b0 <entropy_nrf5_init+0x6c>)
   1e876:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1e87a:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1e87e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1e882:	f022 0201 	bic.w	r2, r2, #1
   1e886:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e88a:	4a0a      	ldr	r2, [pc, #40]	; (1e8b4 <entropy_nrf5_init+0x70>)
    p_reg->INTENSET = mask;
   1e88c:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e88e:	6015      	str	r5, [r2, #0]
   1e890:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   1e892:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1e896:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1e898:	6019      	str	r1, [r3, #0]
   1e89a:	200d      	movs	r0, #13
   1e89c:	f7f5 f8d4 	bl	13a48 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1e8a0:	200d      	movs	r0, #13
   1e8a2:	f7f5 f89f 	bl	139e4 <arch_irq_enable>

	return 0;
}
   1e8a6:	4628      	mov	r0, r5
   1e8a8:	bd38      	pop	{r3, r4, r5, pc}
   1e8aa:	bf00      	nop
   1e8ac:	200025ec 	.word	0x200025ec
   1e8b0:	4000d000 	.word	0x4000d000
   1e8b4:	4000d100 	.word	0x4000d100

0001e8b8 <isr>:
{
   1e8b8:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1e8ba:	f7ff fedd 	bl	1e678 <random_byte_get>
	if (byte < 0) {
   1e8be:	2800      	cmp	r0, #0
   1e8c0:	db20      	blt.n	1e904 <isr+0x4c>
	uint8_t last  = rngp->last;
   1e8c2:	4b17      	ldr	r3, [pc, #92]	; (1e920 <isr+0x68>)
   1e8c4:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1e8c8:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1e8cc:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1e8d0:	1a51      	subs	r1, r2, r1
   1e8d2:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1e8d6:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1e8d8:	d10d      	bne.n	1e8f6 <isr+0x3e>
	uint8_t last  = rngp->last;
   1e8da:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1e8de:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1e8e2:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1e8e6:	1a51      	subs	r1, r2, r1
   1e8e8:	ea34 0101 	bics.w	r1, r4, r1
   1e8ec:	d10b      	bne.n	1e906 <isr+0x4e>
   1e8ee:	4b0d      	ldr	r3, [pc, #52]	; (1e924 <isr+0x6c>)
   1e8f0:	2201      	movs	r2, #1
   1e8f2:	601a      	str	r2, [r3, #0]
}
   1e8f4:	e00e      	b.n	1e914 <isr+0x5c>
	rngp->buffer[last] = byte;
   1e8f6:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1e8f8:	3201      	adds	r2, #1
   1e8fa:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1e8fc:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1e900:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1e904:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1e906:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1e908:	3201      	adds	r2, #1
   1e90a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1e90c:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1e910:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1e914:	4804      	ldr	r0, [pc, #16]	; (1e928 <isr+0x70>)
}
   1e916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e91a:	f003 b8f1 	b.w	21b00 <z_impl_k_sem_give>
   1e91e:	bf00      	nop
   1e920:	200025ec 	.word	0x200025ec
   1e924:	4000d004 	.word	0x4000d004
   1e928:	20002604 	.word	0x20002604

0001e92c <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1e92c:	4919      	ldr	r1, [pc, #100]	; (1e994 <sys_clock_timeout_handler+0x68>)
{
   1e92e:	b570      	push	{r4, r5, r6, lr}
   1e930:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   1e932:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1e936:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   1e938:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1e93c:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1e940:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   1e942:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1e946:	f04f 0500 	mov.w	r5, #0
   1e94a:	d20a      	bcs.n	1e962 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1e94c:	4b12      	ldr	r3, [pc, #72]	; (1e998 <sys_clock_timeout_handler+0x6c>)
   1e94e:	6819      	ldr	r1, [r3, #0]
   1e950:	060a      	lsls	r2, r1, #24
   1e952:	0a0b      	lsrs	r3, r1, #8
   1e954:	1992      	adds	r2, r2, r6
   1e956:	4911      	ldr	r1, [pc, #68]	; (1e99c <sys_clock_timeout_handler+0x70>)
   1e958:	f143 0300 	adc.w	r3, r3, #0
   1e95c:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
   1e960:	2501      	movs	r5, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1e962:	f003 faf7 	bl	21f54 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   1e966:	00a3      	lsls	r3, r4, #2
   1e968:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e96c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   1e970:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   1e974:	42b2      	cmp	r2, r6
   1e976:	d10b      	bne.n	1e990 <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   1e978:	b91d      	cbnz	r5, 1e982 <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
   1e97a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1e97e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1e982:	4b07      	ldr	r3, [pc, #28]	; (1e9a0 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e984:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   1e988:	fa00 f404 	lsl.w	r4, r0, r4
   1e98c:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   1e990:	bd70      	pop	{r4, r5, r6, pc}
   1e992:	bf00      	nop
   1e994:	20001f88 	.word	0x20001f88
   1e998:	20002648 	.word	0x20002648
   1e99c:	20001f70 	.word	0x20001f70
   1e9a0:	40011000 	.word	0x40011000

0001e9a4 <compare_int_lock>:
{
   1e9a4:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1e9a6:	2301      	movs	r3, #1
   1e9a8:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e9aa:	4a11      	ldr	r2, [pc, #68]	; (1e9f0 <compare_int_lock+0x4c>)
   1e9ac:	f3bf 8f5b 	dmb	ish
   1e9b0:	43dc      	mvns	r4, r3
   1e9b2:	e852 1f00 	ldrex	r1, [r2]
   1e9b6:	ea01 0c04 	and.w	ip, r1, r4
   1e9ba:	e842 ce00 	strex	lr, ip, [r2]
   1e9be:	f1be 0f00 	cmp.w	lr, #0
   1e9c2:	d1f6      	bne.n	1e9b2 <compare_int_lock+0xe>
   1e9c4:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e9c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1e9cc:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   1e9d0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1e9d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   1e9d8:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   1e9dc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1e9e0:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
   1e9e4:	420b      	tst	r3, r1
}
   1e9e6:	bf14      	ite	ne
   1e9e8:	2001      	movne	r0, #1
   1e9ea:	2000      	moveq	r0, #0
   1e9ec:	bd10      	pop	{r4, pc}
   1e9ee:	bf00      	nop
   1e9f0:	20002644 	.word	0x20002644

0001e9f4 <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
   1e9f4:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e9f6:	4a12      	ldr	r2, [pc, #72]	; (1ea40 <compare_int_unlock.part.0+0x4c>)
   1e9f8:	f3bf 8f5b 	dmb	ish
   1e9fc:	4083      	lsls	r3, r0
   1e9fe:	e852 1f00 	ldrex	r1, [r2]
   1ea02:	4319      	orrs	r1, r3
   1ea04:	e842 1c00 	strex	ip, r1, [r2]
   1ea08:	f1bc 0f00 	cmp.w	ip, #0
   1ea0c:	d1f7      	bne.n	1e9fe <compare_int_unlock.part.0+0xa>
   1ea0e:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   1ea12:	4a0c      	ldr	r2, [pc, #48]	; (1ea44 <compare_int_unlock.part.0+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1ea14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1ea18:	4083      	lsls	r3, r0
   1ea1a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ea1e:	4b0a      	ldr	r3, [pc, #40]	; (1ea48 <compare_int_unlock.part.0+0x54>)
   1ea20:	f3bf 8f5b 	dmb	ish
   1ea24:	681b      	ldr	r3, [r3, #0]
   1ea26:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1ea2a:	fa23 f000 	lsr.w	r0, r3, r0
   1ea2e:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ea30:	bf42      	ittt	mi
   1ea32:	4b06      	ldrmi	r3, [pc, #24]	; (1ea4c <compare_int_unlock.part.0+0x58>)
   1ea34:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   1ea38:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1ea3c:	4770      	bx	lr
   1ea3e:	bf00      	nop
   1ea40:	20002644 	.word	0x20002644
   1ea44:	40011000 	.word	0x40011000
   1ea48:	20002640 	.word	0x20002640
   1ea4c:	e000e100 	.word	0xe000e100

0001ea50 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1ea50:	4b0d      	ldr	r3, [pc, #52]	; (1ea88 <z_nrf_rtc_timer_read+0x38>)
   1ea52:	681b      	ldr	r3, [r3, #0]
   1ea54:	0a19      	lsrs	r1, r3, #8
   1ea56:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1ea58:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   1ea5c:	4b0b      	ldr	r3, [pc, #44]	; (1ea8c <z_nrf_rtc_timer_read+0x3c>)
   1ea5e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1ea62:	18c0      	adds	r0, r0, r3
   1ea64:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1ea68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1ea6c:	d20a      	bcs.n	1ea84 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1ea6e:	4b08      	ldr	r3, [pc, #32]	; (1ea90 <z_nrf_rtc_timer_read+0x40>)
   1ea70:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ea74:	4299      	cmp	r1, r3
   1ea76:	bf08      	it	eq
   1ea78:	4290      	cmpeq	r0, r2
   1ea7a:	d203      	bcs.n	1ea84 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1ea7c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1ea80:	f141 0100 	adc.w	r1, r1, #0
}
   1ea84:	4770      	bx	lr
   1ea86:	bf00      	nop
   1ea88:	20002648 	.word	0x20002648
   1ea8c:	40011000 	.word	0x40011000
   1ea90:	20001f70 	.word	0x20001f70

0001ea94 <compare_set>:
{
   1ea94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ea98:	b085      	sub	sp, #20
   1ea9a:	4616      	mov	r6, r2
   1ea9c:	461f      	mov	r7, r3
   1ea9e:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   1eaa0:	f7ff ff80 	bl	1e9a4 <compare_int_lock>
   1eaa4:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1eaa6:	f7ff ffd3 	bl	1ea50 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1eaaa:	42b9      	cmp	r1, r7
   1eaac:	bf08      	it	eq
   1eaae:	42b0      	cmpeq	r0, r6
   1eab0:	d27f      	bcs.n	1ebb2 <compare_set+0x11e>
		if (target_time - curr_time > COUNTER_SPAN) {
   1eab2:	ebb6 0800 	subs.w	r8, r6, r0
   1eab6:	eb67 0901 	sbc.w	r9, r7, r1
   1eaba:	2300      	movs	r3, #0
   1eabc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1eac0:	454b      	cmp	r3, r9
   1eac2:	bf08      	it	eq
   1eac4:	4542      	cmpeq	r2, r8
   1eac6:	f0c0 8085 	bcc.w	1ebd4 <compare_set+0x140>
		if (target_time != cc_data[chan].target_time) {
   1eaca:	4b44      	ldr	r3, [pc, #272]	; (1ebdc <compare_set+0x148>)
   1eacc:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   1ead0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1ead4:	429f      	cmp	r7, r3
   1ead6:	bf08      	it	eq
   1ead8:	4296      	cmpeq	r6, r2
   1eada:	d054      	beq.n	1eb86 <compare_set+0xf2>
   1eadc:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1eae0:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
   1eae4:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1eae8:	f105 0850 	add.w	r8, r5, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1eaec:	fa0b f205 	lsl.w	r2, fp, r5
   1eaf0:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1eaf4:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1eaf8:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1eafc:	9202      	str	r2, [sp, #8]
     return p_reg->COUNTER;
   1eafe:	4a38      	ldr	r2, [pc, #224]	; (1ebe0 <compare_set+0x14c>)
    return p_reg->CC[ch];
   1eb00:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
   1eb04:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1eb08:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
   1eb0c:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1eb10:	461c      	mov	r4, r3
   1eb12:	4693      	mov	fp, r2
     return p_reg->COUNTER;
   1eb14:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1eb18:	eba0 000a 	sub.w	r0, r0, sl
   1eb1c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1eb20:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   1eb24:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   1eb26:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
   1eb2a:	d105      	bne.n	1eb38 <compare_set+0xa4>
   1eb2c:	9303      	str	r3, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
   1eb2e:	2013      	movs	r0, #19
   1eb30:	f009 fdca 	bl	286c8 <z_impl_k_busy_wait>
   1eb34:	4a2a      	ldr	r2, [pc, #168]	; (1ebe0 <compare_set+0x14c>)
   1eb36:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
   1eb38:	9902      	ldr	r1, [sp, #8]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1eb3a:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
   1eb3e:	eba4 000c 	sub.w	r0, r4, ip
   1eb42:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   1eb46:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1eb4a:	bf88      	it	hi
   1eb4c:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1eb4e:	2000      	movs	r0, #0
   1eb50:	f8c8 0000 	str.w	r0, [r8]
   1eb54:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
   1eb58:	f8cb 1344 	str.w	r1, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1eb5c:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1eb60:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1eb64:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   1eb68:	4582      	cmp	sl, r0
   1eb6a:	d006      	beq.n	1eb7a <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
   1eb6c:	1a20      	subs	r0, r4, r0
   1eb6e:	3802      	subs	r0, #2
   1eb70:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   1eb74:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1eb78:	d819      	bhi.n	1ebae <compare_set+0x11a>
	return (a - b) & COUNTER_MAX;
   1eb7a:	1ae4      	subs	r4, r4, r3
   1eb7c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   1eb80:	1932      	adds	r2, r6, r4
   1eb82:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
   1eb86:	4c15      	ldr	r4, [pc, #84]	; (1ebdc <compare_set+0x148>)
   1eb88:	0129      	lsls	r1, r5, #4
   1eb8a:	eb04 1005 	add.w	r0, r4, r5, lsl #4
   1eb8e:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
   1eb92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	cc_data[chan].user_context = user_data;
   1eb94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	cc_data[chan].callback = handler;
   1eb96:	5062      	str	r2, [r4, r1]
	cc_data[chan].user_context = user_data;
   1eb98:	6043      	str	r3, [r0, #4]
	return ret;
   1eb9a:	2400      	movs	r4, #0
	if (key) {
   1eb9c:	9b01      	ldr	r3, [sp, #4]
   1eb9e:	b113      	cbz	r3, 1eba6 <compare_set+0x112>
   1eba0:	4628      	mov	r0, r5
   1eba2:	f7ff ff27 	bl	1e9f4 <compare_int_unlock.part.0>
}
   1eba6:	4620      	mov	r0, r4
   1eba8:	b005      	add	sp, #20
   1ebaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ebae:	4620      	mov	r0, r4
   1ebb0:	e7b0      	b.n	1eb14 <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
   1ebb2:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ebb4:	4a0b      	ldr	r2, [pc, #44]	; (1ebe4 <compare_set+0x150>)
   1ebb6:	f3bf 8f5b 	dmb	ish
   1ebba:	40ab      	lsls	r3, r5
   1ebbc:	e852 1f00 	ldrex	r1, [r2]
   1ebc0:	4319      	orrs	r1, r3
   1ebc2:	e842 1000 	strex	r0, r1, [r2]
   1ebc6:	2800      	cmp	r0, #0
   1ebc8:	d1f8      	bne.n	1ebbc <compare_set+0x128>
   1ebca:	f3bf 8f5b 	dmb	ish
   1ebce:	4632      	mov	r2, r6
   1ebd0:	463b      	mov	r3, r7
   1ebd2:	e7d8      	b.n	1eb86 <compare_set+0xf2>
			return -EINVAL;
   1ebd4:	f06f 0415 	mvn.w	r4, #21
   1ebd8:	e7e0      	b.n	1eb9c <compare_set+0x108>
   1ebda:	bf00      	nop
   1ebdc:	20001f78 	.word	0x20001f78
   1ebe0:	40011000 	.word	0x40011000
   1ebe4:	20002640 	.word	0x20002640

0001ebe8 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1ebe8:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1ebea:	4b19      	ldr	r3, [pc, #100]	; (1ec50 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   1ebec:	4d19      	ldr	r5, [pc, #100]	; (1ec54 <sys_clock_driver_init+0x6c>)
   1ebee:	2400      	movs	r4, #0
   1ebf0:	f04f 30ff 	mov.w	r0, #4294967295
   1ebf4:	f04f 31ff 	mov.w	r1, #4294967295
   1ebf8:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   1ebfc:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1ec00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1ec04:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ec08:	4b13      	ldr	r3, [pc, #76]	; (1ec58 <sys_clock_driver_init+0x70>)
   1ec0a:	2602      	movs	r6, #2
   1ec0c:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1ec10:	2101      	movs	r1, #1
   1ec12:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   1ec16:	2011      	movs	r0, #17
   1ec18:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1ec1c:	4622      	mov	r2, r4
   1ec1e:	f7f4 ff13 	bl	13a48 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1ec22:	2011      	movs	r0, #17
   1ec24:	f7f4 fede 	bl	139e4 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1ec28:	4a0c      	ldr	r2, [pc, #48]	; (1ec5c <sys_clock_driver_init+0x74>)
   1ec2a:	2301      	movs	r3, #1
   1ec2c:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1ec2e:	4a0c      	ldr	r2, [pc, #48]	; (1ec60 <sys_clock_driver_init+0x78>)
   1ec30:	602b      	str	r3, [r5, #0]
   1ec32:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1ec34:	4b0b      	ldr	r3, [pc, #44]	; (1ec64 <sys_clock_driver_init+0x7c>)
   1ec36:	4a0c      	ldr	r2, [pc, #48]	; (1ec68 <sys_clock_driver_init+0x80>)
   1ec38:	9300      	str	r3, [sp, #0]
   1ec3a:	9401      	str	r4, [sp, #4]
   1ec3c:	2300      	movs	r3, #0
   1ec3e:	4620      	mov	r0, r4
   1ec40:	f7ff ff28 	bl	1ea94 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1ec44:	4630      	mov	r0, r6
   1ec46:	f7fe fb9b 	bl	1d380 <z_nrf_clock_control_lf_on>

	return 0;
}
   1ec4a:	4620      	mov	r0, r4
   1ec4c:	b002      	add	sp, #8
   1ec4e:	bd70      	pop	{r4, r5, r6, pc}
   1ec50:	20001f78 	.word	0x20001f78
   1ec54:	40011000 	.word	0x40011000
   1ec58:	e000e100 	.word	0xe000e100
   1ec5c:	40011008 	.word	0x40011008
   1ec60:	20002644 	.word	0x20002644
   1ec64:	0001e92d 	.word	0x0001e92d
   1ec68:	007fffff 	.word	0x007fffff

0001ec6c <rtc_nrf_isr>:
{
   1ec6c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    return p_reg->INTENSET & mask;
   1ec70:	4c2a      	ldr	r4, [pc, #168]	; (1ed1c <rtc_nrf_isr+0xb0>)
   1ec72:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1ec76:	0799      	lsls	r1, r3, #30
   1ec78:	d509      	bpl.n	1ec8e <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ec7a:	4b29      	ldr	r3, [pc, #164]	; (1ed20 <rtc_nrf_isr+0xb4>)
   1ec7c:	681a      	ldr	r2, [r3, #0]
   1ec7e:	b132      	cbz	r2, 1ec8e <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1ec80:	2200      	movs	r2, #0
   1ec82:	601a      	str	r2, [r3, #0]
		overflow_cnt++;
   1ec84:	4a27      	ldr	r2, [pc, #156]	; (1ed24 <rtc_nrf_isr+0xb8>)
   1ec86:	681b      	ldr	r3, [r3, #0]
   1ec88:	6813      	ldr	r3, [r2, #0]
   1ec8a:	3301      	adds	r3, #1
   1ec8c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1ec8e:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1ec92:	b672      	cpsid	i
    return p_reg->INTENSET & mask;
   1ec94:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1ec98:	03d2      	lsls	r2, r2, #15
   1ec9a:	d52c      	bpl.n	1ecf6 <rtc_nrf_isr+0x8a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ec9c:	f3bf 8f5b 	dmb	ish
   1eca0:	4a21      	ldr	r2, [pc, #132]	; (1ed28 <rtc_nrf_isr+0xbc>)
   1eca2:	e852 1f00 	ldrex	r1, [r2]
   1eca6:	f021 0001 	bic.w	r0, r1, #1
   1ecaa:	e842 0500 	strex	r5, r0, [r2]
   1ecae:	2d00      	cmp	r5, #0
   1ecb0:	d1f7      	bne.n	1eca2 <rtc_nrf_isr+0x36>
   1ecb2:	f3bf 8f5b 	dmb	ish
   1ecb6:	4a1d      	ldr	r2, [pc, #116]	; (1ed2c <rtc_nrf_isr+0xc0>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1ecb8:	b909      	cbnz	r1, 1ecbe <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ecba:	6811      	ldr	r1, [r2, #0]
		if (result) {
   1ecbc:	b1d9      	cbz	r1, 1ecf6 <rtc_nrf_isr+0x8a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1ecbe:	2500      	movs	r5, #0
   1ecc0:	6015      	str	r5, [r2, #0]
   1ecc2:	6812      	ldr	r2, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1ecc4:	f383 8810 	msr	PRIMASK, r3
		curr_time = z_nrf_rtc_timer_read();
   1ecc8:	f7ff fec2 	bl	1ea50 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1eccc:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1ecd0:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   1ecd2:	4b17      	ldr	r3, [pc, #92]	; (1ed30 <rtc_nrf_isr+0xc4>)
   1ecd4:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   1ecd8:	4549      	cmp	r1, r9
   1ecda:	bf08      	it	eq
   1ecdc:	4540      	cmpeq	r0, r8
   1ecde:	d20f      	bcs.n	1ed00 <rtc_nrf_isr+0x94>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   1ece0:	4629      	mov	r1, r5
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1ece2:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   1ece6:	b141      	cbz	r1, 1ecfa <rtc_nrf_isr+0x8e>
			handler(chan, expire_time, user_context);
   1ece8:	f8cd a000 	str.w	sl, [sp]
   1ecec:	4642      	mov	r2, r8
   1ecee:	464b      	mov	r3, r9
   1ecf0:	2000      	movs	r0, #0
   1ecf2:	4788      	blx	r1
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1ecf4:	e001      	b.n	1ecfa <rtc_nrf_isr+0x8e>
   1ecf6:	f383 8810 	msr	PRIMASK, r3
}
   1ecfa:	b002      	add	sp, #8
   1ecfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1ed00:	f04f 36ff 	mov.w	r6, #4294967295
   1ed04:	f04f 37ff 	mov.w	r7, #4294967295
			user_context = cc_data[chan].user_context;
   1ed08:	e9d3 1a00 	ldrd	r1, sl, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1ed0c:	e9c3 6702 	strd	r6, r7, [r3, #8]
			cc_data[chan].callback = NULL;
   1ed10:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1ed12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1ed16:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
}
   1ed1a:	e7e2      	b.n	1ece2 <rtc_nrf_isr+0x76>
   1ed1c:	40011000 	.word	0x40011000
   1ed20:	40011104 	.word	0x40011104
   1ed24:	20002648 	.word	0x20002648
   1ed28:	20002640 	.word	0x20002640
   1ed2c:	40011140 	.word	0x40011140
   1ed30:	20001f78 	.word	0x20001f78

0001ed34 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1ed34:	4b14      	ldr	r3, [pc, #80]	; (1ed88 <sys_clock_set_timeout+0x54>)
{
   1ed36:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1ed38:	f1b0 3fff 	cmp.w	r0, #4294967295
   1ed3c:	bf08      	it	eq
   1ed3e:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1ed40:	1e44      	subs	r4, r0, #1
   1ed42:	2c00      	cmp	r4, #0
   1ed44:	dd1e      	ble.n	1ed84 <sys_clock_set_timeout+0x50>
   1ed46:	429c      	cmp	r4, r3
   1ed48:	bfa8      	it	ge
   1ed4a:	461c      	movge	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1ed4c:	f7ff fe80 	bl	1ea50 <z_nrf_rtc_timer_read>
   1ed50:	4b0e      	ldr	r3, [pc, #56]	; (1ed8c <sys_clock_set_timeout+0x58>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1ed52:	490f      	ldr	r1, [pc, #60]	; (1ed90 <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1ed54:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ed58:	1a80      	subs	r0, r0, r2
		ticks = 0;
   1ed5a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1ed5e:	bf28      	it	cs
   1ed60:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1ed62:	3001      	adds	r0, #1
   1ed64:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
   1ed66:	4808      	ldr	r0, [pc, #32]	; (1ed88 <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1ed68:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
   1ed6a:	4284      	cmp	r4, r0
   1ed6c:	bf28      	it	cs
   1ed6e:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1ed70:	1912      	adds	r2, r2, r4
   1ed72:	f04f 0000 	mov.w	r0, #0
   1ed76:	9001      	str	r0, [sp, #4]
   1ed78:	f143 0300 	adc.w	r3, r3, #0
   1ed7c:	f7ff fe8a 	bl	1ea94 <compare_set>
}
   1ed80:	b002      	add	sp, #8
   1ed82:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1ed84:	2400      	movs	r4, #0
   1ed86:	e7e1      	b.n	1ed4c <sys_clock_set_timeout+0x18>
   1ed88:	007fffff 	.word	0x007fffff
   1ed8c:	20001f88 	.word	0x20001f88
   1ed90:	0001e92d 	.word	0x0001e92d

0001ed94 <sys_clock_elapsed>:
{
   1ed94:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1ed96:	f7ff fe5b 	bl	1ea50 <z_nrf_rtc_timer_read>
   1ed9a:	4b02      	ldr	r3, [pc, #8]	; (1eda4 <sys_clock_elapsed+0x10>)
   1ed9c:	681b      	ldr	r3, [r3, #0]
}
   1ed9e:	1ac0      	subs	r0, r0, r3
   1eda0:	bd08      	pop	{r3, pc}
   1eda2:	bf00      	nop
   1eda4:	20001f88 	.word	0x20001f88

0001eda8 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   1eda8:	4602      	mov	r2, r0
   1edaa:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1edac:	4801      	ldr	r0, [pc, #4]	; (1edb4 <multithreading_lock_acquire+0xc>)
   1edae:	f002 b9ad 	b.w	2110c <z_impl_k_mutex_lock>
   1edb2:	bf00      	nop
   1edb4:	20000964 	.word	0x20000964

0001edb8 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   1edb8:	4801      	ldr	r0, [pc, #4]	; (1edc0 <multithreading_lock_release+0x8>)
   1edba:	f002 ba25 	b.w	21208 <z_impl_k_mutex_unlock>
   1edbe:	bf00      	nop
   1edc0:	20000964 	.word	0x20000964

0001edc4 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1edc4:	b508      	push	{r3, lr}
	z_impl_log_panic();
   1edc6:	f7f3 fa2b 	bl	12220 <z_impl_log_panic>
   1edca:	4b06      	ldr	r3, [pc, #24]	; (1ede4 <k_sys_fatal_error_handler+0x20>)
   1edcc:	4906      	ldr	r1, [pc, #24]	; (1ede8 <k_sys_fatal_error_handler+0x24>)
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1edce:	4807      	ldr	r0, [pc, #28]	; (1edec <k_sys_fatal_error_handler+0x28>)
   1edd0:	1ac9      	subs	r1, r1, r3
   1edd2:	08c9      	lsrs	r1, r1, #3
   1edd4:	0189      	lsls	r1, r1, #6
   1edd6:	f041 0101 	orr.w	r1, r1, #1
   1edda:	f005 f842 	bl	23e62 <log_0>
		sys_arch_reboot(0);
   1edde:	2000      	movs	r0, #0
   1ede0:	f7f5 fad6 	bl	14390 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1ede4:	00028dd4 	.word	0x00028dd4
   1ede8:	00028e6c 	.word	0x00028e6c
   1edec:	0002c631 	.word	0x0002c631

0001edf0 <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   1edf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static const struct device *dev;

	if (unlikely(!dev)) {
   1edf4:	4c0b      	ldr	r4, [pc, #44]	; (1ee24 <bt_rand+0x34>)
   1edf6:	6823      	ldr	r3, [r4, #0]
{
   1edf8:	4605      	mov	r5, r0
   1edfa:	460e      	mov	r6, r1
   1edfc:	4627      	mov	r7, r4
	if (unlikely(!dev)) {
   1edfe:	b13b      	cbz	r3, 1ee10 <bt_rand+0x20>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   1ee00:	6838      	ldr	r0, [r7, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1ee02:	6883      	ldr	r3, [r0, #8]
   1ee04:	b2b2      	uxth	r2, r6
   1ee06:	4629      	mov	r1, r5
   1ee08:	681b      	ldr	r3, [r3, #0]
}
   1ee0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ee0e:	4718      	bx	r3
   1ee10:	4805      	ldr	r0, [pc, #20]	; (1ee28 <bt_rand+0x38>)
   1ee12:	f001 ffab 	bl	20d6c <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1ee16:	6020      	str	r0, [r4, #0]
		if (!dev) {
   1ee18:	2800      	cmp	r0, #0
   1ee1a:	d1f1      	bne.n	1ee00 <bt_rand+0x10>
}
   1ee1c:	f06f 0012 	mvn.w	r0, #18
   1ee20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ee24:	2000264c 	.word	0x2000264c
   1ee28:	0002c62d 	.word	0x0002c62d

0001ee2c <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   1ee2c:	460a      	mov	r2, r1
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   1ee2e:	4905      	ldr	r1, [pc, #20]	; (1ee44 <rand_prio_low_vector_get_blocking+0x18>)
{
   1ee30:	b410      	push	{r4}
   1ee32:	4603      	mov	r3, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   1ee34:	6808      	ldr	r0, [r1, #0]
   1ee36:	6881      	ldr	r1, [r0, #8]
   1ee38:	680c      	ldr	r4, [r1, #0]
   1ee3a:	4619      	mov	r1, r3
   1ee3c:	4623      	mov	r3, r4

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   1ee3e:	bc10      	pop	{r4}
   1ee40:	4718      	bx	r3
   1ee42:	bf00      	nop
   1ee44:	20002650 	.word	0x20002650

0001ee48 <sdc_assertion_handler>:
{
   1ee48:	b538      	push	{r3, r4, r5, lr}
   1ee4a:	4b0b      	ldr	r3, [pc, #44]	; (1ee78 <sdc_assertion_handler+0x30>)
   1ee4c:	4c0b      	ldr	r4, [pc, #44]	; (1ee7c <sdc_assertion_handler+0x34>)
   1ee4e:	1ae4      	subs	r4, r4, r3
   1ee50:	460d      	mov	r5, r1
   1ee52:	08e4      	lsrs	r4, r4, #3
{
	if (IS_ENABLED(CONFIG_LOG_MODE_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
   1ee54:	f7f3 f878 	bl	11f48 <z_log_strdup>
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", log_strdup(file), line);
   1ee58:	01a4      	lsls	r4, r4, #6
   1ee5a:	f044 0401 	orr.w	r4, r4, #1
   1ee5e:	4601      	mov	r1, r0
   1ee60:	4623      	mov	r3, r4
   1ee62:	4807      	ldr	r0, [pc, #28]	; (1ee80 <sdc_assertion_handler+0x38>)
   1ee64:	462a      	mov	r2, r5
   1ee66:	f005 f81d 	bl	23ea4 <log_2>
	k_oops();
   1ee6a:	4040      	eors	r0, r0
   1ee6c:	f380 8811 	msr	BASEPRI, r0
   1ee70:	f04f 0003 	mov.w	r0, #3
   1ee74:	df02      	svc	2
}
   1ee76:	bd38      	pop	{r3, r4, r5, pc}
   1ee78:	00028dd4 	.word	0x00028dd4
   1ee7c:	00028ee4 	.word	0x00028ee4
   1ee80:	0002c659 	.word	0x0002c659

0001ee84 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   1ee84:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   1ee86:	4804      	ldr	r0, [pc, #16]	; (1ee98 <hci_driver_init+0x14>)
   1ee88:	f7fa fca4 	bl	197d4 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
	return err;
}
   1ee8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = sdc_init(sdc_assertion_handler);
   1ee90:	4802      	ldr	r0, [pc, #8]	; (1ee9c <hci_driver_init+0x18>)
   1ee92:	f7e4 bf7f 	b.w	3d94 <sdc_init>
   1ee96:	bf00      	nop
   1ee98:	00029af4 	.word	0x00029af4
   1ee9c:	0001ee49 	.word	0x0001ee49

0001eea0 <rand_prio_low_vector_get>:
{
   1eea0:	b538      	push	{r3, r4, r5, lr}
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1eea2:	4b08      	ldr	r3, [pc, #32]	; (1eec4 <rand_prio_low_vector_get+0x24>)
{
   1eea4:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1eea6:	6818      	ldr	r0, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1eea8:	6883      	ldr	r3, [r0, #8]
   1eeaa:	685d      	ldr	r5, [r3, #4]
   1eeac:	460a      	mov	r2, r1
   1eeae:	b135      	cbz	r5, 1eebe <rand_prio_low_vector_get+0x1e>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1eeb0:	2300      	movs	r3, #0
   1eeb2:	4621      	mov	r1, r4
   1eeb4:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   1eeb6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1eeba:	b2c0      	uxtb	r0, r0
   1eebc:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1eebe:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1eec2:	e7f8      	b.n	1eeb6 <rand_prio_low_vector_get+0x16>
   1eec4:	20002650 	.word	0x20002650

0001eec8 <hci_driver_open>:
{
   1eec8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1eeca:	b091      	sub	sp, #68	; 0x44
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1eecc:	2200      	movs	r2, #0
   1eece:	2300      	movs	r3, #0
   1eed0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1eed4:	2300      	movs	r3, #0
   1eed6:	f06f 0209 	mvn.w	r2, #9
   1eeda:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1eede:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1eee2:	9300      	str	r3, [sp, #0]
   1eee4:	4956      	ldr	r1, [pc, #344]	; (1f040 <hci_driver_open+0x178>)
   1eee6:	4b57      	ldr	r3, [pc, #348]	; (1f044 <hci_driver_open+0x17c>)
   1eee8:	4857      	ldr	r0, [pc, #348]	; (1f048 <hci_driver_open+0x180>)
   1eeea:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1eeee:	f002 fecf 	bl	21c90 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1eef2:	4956      	ldr	r1, [pc, #344]	; (1f04c <hci_driver_open+0x184>)
   1eef4:	4854      	ldr	r0, [pc, #336]	; (1f048 <hci_driver_open+0x180>)
   1eef6:	4c56      	ldr	r4, [pc, #344]	; (1f050 <hci_driver_open+0x188>)
   1eef8:	f009 fb9b 	bl	28632 <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   1eefc:	a80b      	add	r0, sp, #44	; 0x2c
   1eefe:	f7e4 feb7 	bl	3c70 <sdc_build_revision_get>
   1ef02:	4b54      	ldr	r3, [pc, #336]	; (1f054 <hci_driver_open+0x18c>)
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   1ef04:	4854      	ldr	r0, [pc, #336]	; (1f058 <hci_driver_open+0x190>)
   1ef06:	1ae4      	subs	r4, r4, r3
   1ef08:	08e4      	lsrs	r4, r4, #3
   1ef0a:	01a4      	lsls	r4, r4, #6
   1ef0c:	f044 0303 	orr.w	r3, r4, #3
   1ef10:	2214      	movs	r2, #20
   1ef12:	a90b      	add	r1, sp, #44	; 0x2c
   1ef14:	f005 f806 	bl	23f24 <log_hexdump>
			err = sdc_support_adv();
   1ef18:	f7e4 ffbc 	bl	3e94 <sdc_support_adv>
			if (err) {
   1ef1c:	b118      	cbz	r0, 1ef26 <hci_driver_open+0x5e>
				return -ENOTSUP;
   1ef1e:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   1ef22:	b011      	add	sp, #68	; 0x44
   1ef24:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = sdc_support_slave();
   1ef26:	f7e4 ffe5 	bl	3ef4 <sdc_support_slave>
		if (err) {
   1ef2a:	2800      	cmp	r0, #0
   1ef2c:	d1f7      	bne.n	1ef1e <hci_driver_open+0x56>
		err = sdc_support_dle();
   1ef2e:	f7e4 ffc1 	bl	3eb4 <sdc_support_dle>
		if (err) {
   1ef32:	2800      	cmp	r0, #0
   1ef34:	d1f3      	bne.n	1ef1e <hci_driver_open+0x56>
		err = sdc_support_le_2m_phy();
   1ef36:	f7e4 ffcd 	bl	3ed4 <sdc_support_le_2m_phy>
		if (err) {
   1ef3a:	4606      	mov	r6, r0
   1ef3c:	2800      	cmp	r0, #0
   1ef3e:	d1ee      	bne.n	1ef1e <hci_driver_open+0x56>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ef40:	ad08      	add	r5, sp, #32
   1ef42:	462a      	mov	r2, r5
   1ef44:	2101      	movs	r1, #1
	cfg.master_count.count = SDC_MASTER_COUNT;
   1ef46:	f88d 0020 	strb.w	r0, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ef4a:	f7e4 fe9f 	bl	3c8c <sdc_cfg_set>
	if (required_memory < 0) {
   1ef4e:	2800      	cmp	r0, #0
   1ef50:	dbe7      	blt.n	1ef22 <hci_driver_open+0x5a>
	cfg.slave_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1ef52:	2701      	movs	r7, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ef54:	462a      	mov	r2, r5
   1ef56:	2102      	movs	r1, #2
   1ef58:	4630      	mov	r0, r6
	cfg.slave_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1ef5a:	f88d 7020 	strb.w	r7, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ef5e:	f7e4 fe95 	bl	3c8c <sdc_cfg_set>
	if (required_memory < 0) {
   1ef62:	2800      	cmp	r0, #0
   1ef64:	dbdd      	blt.n	1ef22 <hci_driver_open+0x5a>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1ef66:	4b3d      	ldr	r3, [pc, #244]	; (1f05c <hci_driver_open+0x194>)
   1ef68:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ef6a:	462a      	mov	r2, r5
   1ef6c:	2103      	movs	r1, #3
   1ef6e:	4630      	mov	r0, r6
   1ef70:	f7e4 fe8c 	bl	3c8c <sdc_cfg_set>
	if (required_memory < 0) {
   1ef74:	2800      	cmp	r0, #0
   1ef76:	dbd4      	blt.n	1ef22 <hci_driver_open+0x5a>
	cfg.event_length.event_length_us =
   1ef78:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ef7c:	462a      	mov	r2, r5
   1ef7e:	2104      	movs	r1, #4
   1ef80:	4630      	mov	r0, r6
	cfg.event_length.event_length_us =
   1ef82:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ef84:	f7e4 fe82 	bl	3c8c <sdc_cfg_set>
	if (required_memory < 0) {
   1ef88:	2800      	cmp	r0, #0
   1ef8a:	dbca      	blt.n	1ef22 <hci_driver_open+0x5a>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ef8c:	462a      	mov	r2, r5
   1ef8e:	2105      	movs	r1, #5
   1ef90:	4630      	mov	r0, r6
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   1ef92:	f88d 7020 	strb.w	r7, [sp, #32]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ef96:	f7e4 fe79 	bl	3c8c <sdc_cfg_set>
	if (required_memory < 0) {
   1ef9a:	2800      	cmp	r0, #0
   1ef9c:	dbc1      	blt.n	1ef22 <hci_driver_open+0x5a>
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1ef9e:	231f      	movs	r3, #31
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1efa0:	462a      	mov	r2, r5
   1efa2:	2107      	movs	r1, #7
   1efa4:	4630      	mov	r0, r6
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1efa6:	f8ad 3020 	strh.w	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1efaa:	f7e4 fe6f 	bl	3c8c <sdc_cfg_set>
		if (required_memory < 0) {
   1efae:	2800      	cmp	r0, #0
   1efb0:	dbb7      	blt.n	1ef22 <hci_driver_open+0x5a>
	if (required_memory > sizeof(sdc_mempool)) {
   1efb2:	f5b0 6faf 	cmp.w	r0, #1400	; 0x578
   1efb6:	dd10      	ble.n	1efda <hci_driver_open+0x112>
		BT_ERR("Allocated memory too low: %u < %u",
   1efb8:	4602      	mov	r2, r0
   1efba:	ea44 0307 	orr.w	r3, r4, r7
   1efbe:	4828      	ldr	r0, [pc, #160]	; (1f060 <hci_driver_open+0x198>)
   1efc0:	f44f 61af 	mov.w	r1, #1400	; 0x578
   1efc4:	f004 ff6e 	bl	23ea4 <log_2>
		k_panic();
   1efc8:	4040      	eors	r0, r0
   1efca:	f380 8811 	msr	BASEPRI, r0
   1efce:	f04f 0004 	mov.w	r0, #4
   1efd2:	df02      	svc	2
		return -ENOMEM;
   1efd4:	f06f 000b 	mvn.w	r0, #11
   1efd8:	e7a3      	b.n	1ef22 <hci_driver_open+0x5a>
   1efda:	4822      	ldr	r0, [pc, #136]	; (1f064 <hci_driver_open+0x19c>)
   1efdc:	f001 fec6 	bl	20d6c <z_impl_device_get_binding>
	entropy_source = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1efe0:	4b21      	ldr	r3, [pc, #132]	; (1f068 <hci_driver_open+0x1a0>)
   1efe2:	6018      	str	r0, [r3, #0]
	if (!entropy_source) {
   1efe4:	b938      	cbnz	r0, 1eff6 <hci_driver_open+0x12e>
		BT_ERR("An entropy source is required");
   1efe6:	4821      	ldr	r0, [pc, #132]	; (1f06c <hci_driver_open+0x1a4>)
   1efe8:	f044 0101 	orr.w	r1, r4, #1
   1efec:	f004 ff39 	bl	23e62 <log_0>
		return -ENODEV;
   1eff0:	f06f 0012 	mvn.w	r0, #18
   1eff4:	e795      	b.n	1ef22 <hci_driver_open+0x5a>
	sdc_rand_source_t rand_functions = {
   1eff6:	4b1e      	ldr	r3, [pc, #120]	; (1f070 <hci_driver_open+0x1a8>)
   1eff8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1effc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   1f000:	4628      	mov	r0, r5
   1f002:	f7e4 ffc9 	bl	3f98 <sdc_rand_source_register>
	if (err) {
   1f006:	4601      	mov	r1, r0
   1f008:	b138      	cbz	r0, 1f01a <hci_driver_open+0x152>
		BT_ERR("Failed to register rand source (%d)", err);
   1f00a:	481a      	ldr	r0, [pc, #104]	; (1f074 <hci_driver_open+0x1ac>)
   1f00c:	f044 0201 	orr.w	r2, r4, #1
   1f010:	f004 ff34 	bl	23e7c <log_1>
		return -EINVAL;
   1f014:	f06f 0015 	mvn.w	r0, #21
   1f018:	e783      	b.n	1ef22 <hci_driver_open+0x5a>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1f01a:	f04f 30ff 	mov.w	r0, #4294967295
   1f01e:	f04f 31ff 	mov.w	r1, #4294967295
   1f022:	f7ff fec1 	bl	1eda8 <multithreading_lock_acquire>
	if (!err) {
   1f026:	4604      	mov	r4, r0
   1f028:	b930      	cbnz	r0, 1f038 <hci_driver_open+0x170>
		err = sdc_enable(host_signal, sdc_mempool);
   1f02a:	4913      	ldr	r1, [pc, #76]	; (1f078 <hci_driver_open+0x1b0>)
   1f02c:	4813      	ldr	r0, [pc, #76]	; (1f07c <hci_driver_open+0x1b4>)
   1f02e:	f7e4 fe89 	bl	3d44 <sdc_enable>
   1f032:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1f034:	f7ff fec0 	bl	1edb8 <multithreading_lock_release>
	if (err < 0) {
   1f038:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   1f03c:	e771      	b.n	1ef22 <hci_driver_open+0x5a>
   1f03e:	bf00      	nop
   1f040:	200051e0 	.word	0x200051e0
   1f044:	0001f081 	.word	0x0001f081
   1f048:	20001f90 	.word	0x20001f90
   1f04c:	0002c67e 	.word	0x0002c67e
   1f050:	00028ee4 	.word	0x00028ee4
   1f054:	00028dd4 	.word	0x00028dd4
   1f058:	0002c685 	.word	0x0002c685
   1f05c:	02031b1b 	.word	0x02031b1b
   1f060:	0002c6ac 	.word	0x0002c6ac
   1f064:	0002c62d 	.word	0x0002c62d
   1f068:	20002650 	.word	0x20002650
   1f06c:	0002c6ce 	.word	0x0002c6ce
   1f070:	0002902c 	.word	0x0002902c
   1f074:	0002c6ec 	.word	0x0002c6ec
   1f078:	20002a0d 	.word	0x20002a0d
   1f07c:	0001f199 	.word	0x0001f199

0001f080 <recv_thread>:
{
   1f080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f084:	4b3e      	ldr	r3, [pc, #248]	; (1f180 <recv_thread+0x100>)
   1f086:	4e3f      	ldr	r6, [pc, #252]	; (1f184 <recv_thread+0x104>)
	return z_impl_k_sem_take(sem, timeout);
   1f088:	f8df 8108 	ldr.w	r8, [pc, #264]	; 1f194 <recv_thread+0x114>
		errcode = hci_internal_evt_get(p_hci_buffer);
   1f08c:	4d3e      	ldr	r5, [pc, #248]	; (1f188 <recv_thread+0x108>)
   1f08e:	1af6      	subs	r6, r6, r3
	bool received_data = false;
   1f090:	2700      	movs	r7, #0
   1f092:	08f6      	lsrs	r6, r6, #3
	bool received_evt = false;
   1f094:	463c      	mov	r4, r7
		if (!received_evt && !received_data) {
   1f096:	b93c      	cbnz	r4, 1f0a8 <recv_thread+0x28>
   1f098:	b937      	cbnz	r7, 1f0a8 <recv_thread+0x28>
   1f09a:	f04f 32ff 	mov.w	r2, #4294967295
   1f09e:	f04f 33ff 	mov.w	r3, #4294967295
   1f0a2:	4640      	mov	r0, r8
   1f0a4:	f002 fd52 	bl	21b4c <z_impl_k_sem_take>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1f0a8:	f04f 30ff 	mov.w	r0, #4294967295
   1f0ac:	f04f 31ff 	mov.w	r1, #4294967295
   1f0b0:	f7ff fe7a 	bl	1eda8 <multithreading_lock_acquire>
	if (!errcode) {
   1f0b4:	b160      	cbz	r0, 1f0d0 <recv_thread+0x50>
		return false;
   1f0b6:	2400      	movs	r4, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1f0b8:	f04f 30ff 	mov.w	r0, #4294967295
   1f0bc:	f04f 31ff 	mov.w	r1, #4294967295
   1f0c0:	f7ff fe72 	bl	1eda8 <multithreading_lock_acquire>
	if (!errcode) {
   1f0c4:	2800      	cmp	r0, #0
   1f0c6:	d038      	beq.n	1f13a <recv_thread+0xba>
		return false;
   1f0c8:	2700      	movs	r7, #0
	z_impl_k_yield();
   1f0ca:	f002 fbf7 	bl	218bc <z_impl_k_yield>
}
   1f0ce:	e7e2      	b.n	1f096 <recv_thread+0x16>
		errcode = hci_internal_evt_get(p_hci_buffer);
   1f0d0:	482d      	ldr	r0, [pc, #180]	; (1f188 <recv_thread+0x108>)
   1f0d2:	f000 fbb3 	bl	1f83c <hci_internal_evt_get>
   1f0d6:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1f0d8:	f7ff fe6e 	bl	1edb8 <multithreading_lock_release>
	if (errcode) {
   1f0dc:	2c00      	cmp	r4, #0
   1f0de:	d1ea      	bne.n	1f0b6 <recv_thread+0x36>
	switch (hdr->evt) {
   1f0e0:	7828      	ldrb	r0, [r5, #0]
   1f0e2:	283e      	cmp	r0, #62	; 0x3e
   1f0e4:	d007      	beq.n	1f0f6 <recv_thread+0x76>
   1f0e6:	28ff      	cmp	r0, #255	; 0xff
   1f0e8:	d01a      	beq.n	1f120 <recv_thread+0xa0>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1f0ea:	f04f 32ff 	mov.w	r2, #4294967295
   1f0ee:	f04f 33ff 	mov.w	r3, #4294967295
   1f0f2:	2400      	movs	r4, #0
   1f0f4:	e005      	b.n	1f102 <recv_thread+0x82>
		switch (me->subevent) {
   1f0f6:	78ab      	ldrb	r3, [r5, #2]
   1f0f8:	2b02      	cmp	r3, #2
		switch (subevent) {
   1f0fa:	d1f6      	bne.n	1f0ea <recv_thread+0x6a>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1f0fc:	2200      	movs	r2, #0
   1f0fe:	2300      	movs	r3, #0
   1f100:	2401      	movs	r4, #1
   1f102:	4621      	mov	r1, r4
   1f104:	f7f6 fe3a 	bl	15d7c <bt_buf_get_evt>
	if (!evt_buf) {
   1f108:	4607      	mov	r7, r0
   1f10a:	b960      	cbnz	r0, 1f126 <recv_thread+0xa6>
		if (discardable) {
   1f10c:	2c00      	cmp	r4, #0
   1f10e:	d1d3      	bne.n	1f0b8 <recv_thread+0x38>
		BT_ERR("No event buffer available");
   1f110:	01b1      	lsls	r1, r6, #6
   1f112:	481e      	ldr	r0, [pc, #120]	; (1f18c <recv_thread+0x10c>)
   1f114:	f041 0101 	orr.w	r1, r1, #1
   1f118:	f004 fea3 	bl	23e62 <log_0>
	return true;
   1f11c:	2401      	movs	r4, #1
   1f11e:	e7cb      	b.n	1f0b8 <recv_thread+0x38>
		switch (subevent) {
   1f120:	78ab      	ldrb	r3, [r5, #2]
   1f122:	2b80      	cmp	r3, #128	; 0x80
   1f124:	e7e9      	b.n	1f0fa <recv_thread+0x7a>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1f126:	786a      	ldrb	r2, [r5, #1]
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add_mem(struct net_buf *buf, const void *mem,
				    size_t len)
{
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1f128:	4629      	mov	r1, r5
   1f12a:	3202      	adds	r2, #2
   1f12c:	3008      	adds	r0, #8
   1f12e:	f008 f869 	bl	27204 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1f132:	4638      	mov	r0, r7
   1f134:	f7fa fb1a 	bl	1976c <bt_recv>
   1f138:	e7f0      	b.n	1f11c <recv_thread+0x9c>
		errcode = sdc_hci_data_get(p_hci_buffer);
   1f13a:	4813      	ldr	r0, [pc, #76]	; (1f188 <recv_thread+0x108>)
   1f13c:	f7ed fab5 	bl	c6aa <sdc_hci_data_get>
   1f140:	4607      	mov	r7, r0
		MULTITHREADING_LOCK_RELEASE();
   1f142:	f7ff fe39 	bl	1edb8 <multithreading_lock_release>
	if (errcode) {
   1f146:	2f00      	cmp	r7, #0
   1f148:	d1be      	bne.n	1f0c8 <recv_thread+0x48>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1f14a:	f04f 32ff 	mov.w	r2, #4294967295
   1f14e:	f04f 33ff 	mov.w	r3, #4294967295
   1f152:	2003      	movs	r0, #3
   1f154:	f7f6 fde8 	bl	15d28 <bt_buf_get_rx>
	if (!data_buf) {
   1f158:	4607      	mov	r7, r0
   1f15a:	b938      	cbnz	r0, 1f16c <recv_thread+0xec>
		BT_ERR("No data buffer available");
   1f15c:	01b1      	lsls	r1, r6, #6
   1f15e:	480c      	ldr	r0, [pc, #48]	; (1f190 <recv_thread+0x110>)
   1f160:	f041 0101 	orr.w	r1, r1, #1
   1f164:	f004 fe7d 	bl	23e62 <log_0>
	return true;
   1f168:	2701      	movs	r7, #1
   1f16a:	e7ae      	b.n	1f0ca <recv_thread+0x4a>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   1f16c:	886a      	ldrh	r2, [r5, #2]
   1f16e:	4629      	mov	r1, r5
   1f170:	3204      	adds	r2, #4
   1f172:	3008      	adds	r0, #8
   1f174:	f008 f846 	bl	27204 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1f178:	4638      	mov	r0, r7
   1f17a:	f7fa faf7 	bl	1976c <bt_recv>
   1f17e:	e7f3      	b.n	1f168 <recv_thread+0xe8>
   1f180:	00028dd4 	.word	0x00028dd4
   1f184:	00028ee4 	.word	0x00028ee4
   1f188:	200029c4 	.word	0x200029c4
   1f18c:	0002c710 	.word	0x0002c710
   1f190:	0002c72a 	.word	0x0002c72a
   1f194:	200009e8 	.word	0x200009e8

0001f198 <host_signal>:
	z_impl_k_sem_give(sem);
   1f198:	4801      	ldr	r0, [pc, #4]	; (1f1a0 <host_signal+0x8>)
   1f19a:	f002 bcb1 	b.w	21b00 <z_impl_k_sem_give>
   1f19e:	bf00      	nop
   1f1a0:	200009e8 	.word	0x200009e8

0001f1a4 <hci_driver_send>:
{
   1f1a4:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   1f1a6:	8983      	ldrh	r3, [r0, #12]
{
   1f1a8:	4605      	mov	r5, r0
	if (!buf->len) {
   1f1aa:	b383      	cbz	r3, 1f20e <hci_driver_send+0x6a>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1f1ac:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   1f1ae:	b1ab      	cbz	r3, 1f1dc <hci_driver_send+0x38>
   1f1b0:	2b02      	cmp	r3, #2
   1f1b2:	d12c      	bne.n	1f20e <hci_driver_send+0x6a>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1f1b4:	f04f 30ff 	mov.w	r0, #4294967295
   1f1b8:	f04f 31ff 	mov.w	r1, #4294967295
   1f1bc:	f7ff fdf4 	bl	1eda8 <multithreading_lock_acquire>
	if (!errcode) {
   1f1c0:	4604      	mov	r4, r0
   1f1c2:	b948      	cbnz	r0, 1f1d8 <hci_driver_send+0x34>
		errcode = sdc_hci_data_put(acl->data);
   1f1c4:	68a8      	ldr	r0, [r5, #8]
   1f1c6:	f7ed fa7d 	bl	c6c4 <sdc_hci_data_put>
   1f1ca:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1f1cc:	f7ff fdf4 	bl	1edb8 <multithreading_lock_release>
		if (errcode) {
   1f1d0:	b1c4      	cbz	r4, 1f204 <hci_driver_send+0x60>
   1f1d2:	4810      	ldr	r0, [pc, #64]	; (1f214 <hci_driver_send+0x70>)
   1f1d4:	f002 fc94 	bl	21b00 <z_impl_k_sem_give>
}
   1f1d8:	4620      	mov	r0, r4
   1f1da:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1f1dc:	f04f 30ff 	mov.w	r0, #4294967295
   1f1e0:	f04f 31ff 	mov.w	r1, #4294967295
   1f1e4:	f7ff fde0 	bl	1eda8 <multithreading_lock_acquire>
	if (!errcode) {
   1f1e8:	4604      	mov	r4, r0
   1f1ea:	2800      	cmp	r0, #0
   1f1ec:	d1f4      	bne.n	1f1d8 <hci_driver_send+0x34>
		errcode = hci_internal_cmd_put(cmd->data);
   1f1ee:	68a8      	ldr	r0, [r5, #8]
   1f1f0:	f000 f812 	bl	1f218 <hci_internal_cmd_put>
   1f1f4:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1f1f6:	f7ff fddf 	bl	1edb8 <multithreading_lock_release>
	if (errcode) {
   1f1fa:	2c00      	cmp	r4, #0
   1f1fc:	d1ec      	bne.n	1f1d8 <hci_driver_send+0x34>
   1f1fe:	4805      	ldr	r0, [pc, #20]	; (1f214 <hci_driver_send+0x70>)
   1f200:	f002 fc7e 	bl	21b00 <z_impl_k_sem_give>
		net_buf_unref(buf);
   1f204:	4628      	mov	r0, r5
   1f206:	f7fd ff6b 	bl	1d0e0 <net_buf_unref>
   1f20a:	2400      	movs	r4, #0
   1f20c:	e7e4      	b.n	1f1d8 <hci_driver_send+0x34>
	switch (type) {
   1f20e:	f06f 0415 	mvn.w	r4, #21
   1f212:	e7e1      	b.n	1f1d8 <hci_driver_send+0x34>
   1f214:	200009e8 	.word	0x200009e8

0001f218 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   1f218:	b570      	push	{r4, r5, r6, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1f21a:	4c8e      	ldr	r4, [pc, #568]	; (1f454 <hci_internal_cmd_put+0x23c>)
   1f21c:	7823      	ldrb	r3, [r4, #0]
   1f21e:	2b00      	cmp	r3, #0
   1f220:	f040 82f7 	bne.w	1f812 <hci_internal_cmd_put+0x5fa>
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
   1f224:	7843      	ldrb	r3, [r0, #1]
   1f226:	7805      	ldrb	r5, [r0, #0]
   1f228:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	switch (BT_OGF(opcode)) {
   1f22c:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   1f230:	b22e      	sxth	r6, r5
   1f232:	ea4f 2395 	mov.w	r3, r5, lsr #10
   1f236:	d20d      	bcs.n	1f254 <hci_internal_cmd_put+0x3c>
   1f238:	b17b      	cbz	r3, 1f25a <hci_internal_cmd_put+0x42>
   1f23a:	3b01      	subs	r3, #1
   1f23c:	2b07      	cmp	r3, #7
   1f23e:	d80c      	bhi.n	1f25a <hci_internal_cmd_put+0x42>
   1f240:	e8df f013 	tbh	[pc, r3, lsl #1]
   1f244:	000b000e 	.word	0x000b000e
   1f248:	0060002c 	.word	0x0060002c
   1f24c:	000b000b 	.word	0x000b000b
   1f250:	010c000b 	.word	0x010c000b
   1f254:	2b3f      	cmp	r3, #63	; 0x3f
   1f256:	f000 8233 	beq.w	1f6c0 <hci_internal_cmd_put+0x4a8>
   1f25a:	2304      	movs	r3, #4
   1f25c:	2001      	movs	r0, #1
   1f25e:	e26b      	b.n	1f738 <hci_internal_cmd_put+0x520>
	switch (opcode)	{
   1f260:	f240 4306 	movw	r3, #1030	; 0x406
   1f264:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1f266:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1f26a:	d005      	beq.n	1f278 <hci_internal_cmd_put+0x60>
   1f26c:	f240 431d 	movw	r3, #1053	; 0x41d
   1f270:	429e      	cmp	r6, r3
   1f272:	d010      	beq.n	1f296 <hci_internal_cmd_put+0x7e>
	switch (opcode)	{
   1f274:	2001      	movs	r0, #1
   1f276:	e001      	b.n	1f27c <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   1f278:	f7ed fb4a 	bl	c910 <sdc_hci_cmd_lc_disconnect>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1f27c:	230f      	movs	r3, #15
   1f27e:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1f280:	2304      	movs	r3, #4
   1f282:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1f284:	2301      	movs	r3, #1
	evt_data->status = status_code;
   1f286:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   1f288:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1f28a:	f8a4 5005 	strh.w	r5, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   1f28e:	2301      	movs	r3, #1
   1f290:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   1f292:	2000      	movs	r0, #0
}
   1f294:	bd70      	pop	{r4, r5, r6, pc}
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   1f296:	f7ed fb3d 	bl	c914 <sdc_hci_cmd_lc_read_remote_version_information>
   1f29a:	e7ef      	b.n	1f27c <hci_internal_cmd_put+0x64>
	switch (opcode)	{
   1f29c:	f640 4363 	movw	r3, #3171	; 0xc63
   1f2a0:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1f2a2:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1f2a6:	d025      	beq.n	1f2f4 <hci_internal_cmd_put+0xdc>
   1f2a8:	dc0f      	bgt.n	1f2ca <hci_internal_cmd_put+0xb2>
   1f2aa:	f640 4303 	movw	r3, #3075	; 0xc03
   1f2ae:	429e      	cmp	r6, r3
   1f2b0:	d018      	beq.n	1f2e4 <hci_internal_cmd_put+0xcc>
   1f2b2:	f640 432d 	movw	r3, #3117	; 0xc2d
   1f2b6:	429e      	cmp	r6, r3
   1f2b8:	d017      	beq.n	1f2ea <hci_internal_cmd_put+0xd2>
   1f2ba:	f640 4301 	movw	r3, #3073	; 0xc01
   1f2be:	429e      	cmp	r6, r3
   1f2c0:	d1d8      	bne.n	1f274 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   1f2c2:	f7ed fa1b 	bl	c6fc <sdc_hci_cmd_cb_set_event_mask>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1f2c6:	2304      	movs	r3, #4
   1f2c8:	e0b8      	b.n	1f43c <hci_internal_cmd_put+0x224>
	switch (opcode)	{
   1f2ca:	f640 437b 	movw	r3, #3195	; 0xc7b
   1f2ce:	429e      	cmp	r6, r3
   1f2d0:	d013      	beq.n	1f2fa <hci_internal_cmd_put+0xe2>
   1f2d2:	f640 437c 	movw	r3, #3196	; 0xc7c
   1f2d6:	429e      	cmp	r6, r3
   1f2d8:	d1cc      	bne.n	1f274 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1f2da:	495f      	ldr	r1, [pc, #380]	; (1f458 <hci_internal_cmd_put+0x240>)
   1f2dc:	f7ed fa18 	bl	c710 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1f2e0:	2306      	movs	r3, #6
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1f2e2:	e0ab      	b.n	1f43c <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_cb_reset();
   1f2e4:	f7e4 ff4c 	bl	4180 <sdc_hci_cmd_cb_reset>
   1f2e8:	e7ed      	b.n	1f2c6 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1f2ea:	495b      	ldr	r1, [pc, #364]	; (1f458 <hci_internal_cmd_put+0x240>)
   1f2ec:	f7ed fa04 	bl	c6f8 <sdc_hci_cmd_cb_read_transmit_power_level>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1f2f0:	2307      	movs	r3, #7
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1f2f2:	e0a3      	b.n	1f43c <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   1f2f4:	f7ed fa07 	bl	c706 <sdc_hci_cmd_cb_set_event_mask_page_2>
   1f2f8:	e7e5      	b.n	1f2c6 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1f2fa:	4957      	ldr	r1, [pc, #348]	; (1f458 <hci_internal_cmd_put+0x240>)
   1f2fc:	f7ed f9fa 	bl	c6f4 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1f300:	2308      	movs	r3, #8
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1f302:	e09b      	b.n	1f43c <hci_internal_cmd_put+0x224>
	switch (opcode)	{
   1f304:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   1f308:	3e01      	subs	r6, #1
   1f30a:	2e08      	cmp	r6, #8
   1f30c:	d8b2      	bhi.n	1f274 <hci_internal_cmd_put+0x5c>
   1f30e:	a301      	add	r3, pc, #4	; (adr r3, 1f314 <hci_internal_cmd_put+0xfc>)
   1f310:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1f314:	0001f339 	.word	0x0001f339
   1f318:	0001f343 	.word	0x0001f343
   1f31c:	0001f41d 	.word	0x0001f41d
   1f320:	0001f275 	.word	0x0001f275
   1f324:	0001f275 	.word	0x0001f275
   1f328:	0001f275 	.word	0x0001f275
   1f32c:	0001f275 	.word	0x0001f275
   1f330:	0001f275 	.word	0x0001f275
   1f334:	0001f435 	.word	0x0001f435
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1f338:	4847      	ldr	r0, [pc, #284]	; (1f458 <hci_internal_cmd_put+0x240>)
   1f33a:	f7ed fa9e 	bl	c87a <sdc_hci_cmd_ip_read_local_version_information>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1f33e:	230c      	movs	r3, #12
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1f340:	e07c      	b.n	1f43c <hci_internal_cmd_put+0x224>
	memset(cmds, 0, sizeof(*cmds));
   1f342:	4845      	ldr	r0, [pc, #276]	; (1f458 <hci_internal_cmd_put+0x240>)
   1f344:	222e      	movs	r2, #46	; 0x2e
   1f346:	2100      	movs	r1, #0
   1f348:	f005 fda5 	bl	24e96 <memset>
	cmds->hci_disconnect = 1;
   1f34c:	79e3      	ldrb	r3, [r4, #7]
   1f34e:	f043 0320 	orr.w	r3, r3, #32
   1f352:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   1f354:	7a63      	ldrb	r3, [r4, #9]
   1f356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1f35a:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   1f35c:	7b23      	ldrb	r3, [r4, #12]
   1f35e:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1f362:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   1f364:	7c63      	ldrb	r3, [r4, #17]
   1f366:	f043 0304 	orr.w	r3, r3, #4
   1f36a:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   1f36c:	7d63      	ldrb	r3, [r4, #21]
   1f36e:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   1f372:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   1f376:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   1f378:	7da3      	ldrb	r3, [r4, #22]
   1f37a:	f043 0302 	orr.w	r3, r3, #2
   1f37e:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   1f380:	7f63      	ldrb	r3, [r4, #29]
   1f382:	f043 0304 	orr.w	r3, r3, #4
   1f386:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   1f388:	f894 3020 	ldrb.w	r3, [r4, #32]
   1f38c:	f063 0308 	orn	r3, r3, #8
   1f390:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   1f394:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   1f398:	f063 033c 	orn	r3, r3, #60	; 0x3c
   1f39c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_white_list = 1;
   1f3a0:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   1f3a4:	f063 030c 	orn	r3, r3, #12
   1f3a8:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_long_term_key_request_reply = 1;
   1f3ac:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1f3b0:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
   1f3b4:	f043 037e 	orr.w	r3, r3, #126	; 0x7e
   1f3b8:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   1f3bc:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   1f3c0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1f3c4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   1f3c8:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   1f3cc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1f3d0:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1f3d4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   1f3d8:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1f3dc:	f023 0379 	bic.w	r3, r3, #121	; 0x79
   1f3e0:	f043 0379 	orr.w	r3, r3, #121	; 0x79
   1f3e4:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   1f3e8:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   1f3ec:	f063 0301 	orn	r3, r3, #1
   1f3f0:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   1f3f4:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   1f3f8:	f043 0301 	orr.w	r3, r3, #1
   1f3fc:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   1f400:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1f404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1f408:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   1f40c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   1f410:	f043 0304 	orr.w	r3, r3, #4
   1f414:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	switch (hci_opcode) {
   1f418:	2344      	movs	r3, #68	; 0x44
   1f41a:	e0de      	b.n	1f5da <hci_internal_cmd_put+0x3c2>
	memset(features, 0, sizeof(*features));
   1f41c:	480e      	ldr	r0, [pc, #56]	; (1f458 <hci_internal_cmd_put+0x240>)
   1f41e:	2208      	movs	r2, #8
   1f420:	2100      	movs	r1, #0
   1f422:	f005 fd38 	bl	24e96 <memset>
	features->bdedr_not_supported = 1;
   1f426:	7ae3      	ldrb	r3, [r4, #11]
   1f428:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   1f42c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
	*(buf + 4) = states2;
   1f430:	72e3      	strb	r3, [r4, #11]
   1f432:	e0d1      	b.n	1f5d8 <hci_internal_cmd_put+0x3c0>
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1f434:	4808      	ldr	r0, [pc, #32]	; (1f458 <hci_internal_cmd_put+0x240>)
   1f436:	f7ed fa1e 	bl	c876 <sdc_hci_cmd_ip_read_bd_addr>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1f43a:	230a      	movs	r3, #10
	if (!command_generates_command_complete_event(opcode) ||
   1f43c:	2801      	cmp	r0, #1
   1f43e:	f43f af1d 	beq.w	1f27c <hci_internal_cmd_put+0x64>
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1f442:	220e      	movs	r2, #14
	evt_hdr->len = param_length;
   1f444:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1f446:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1f448:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   1f44a:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   1f44c:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1f44e:	71a0      	strb	r0, [r4, #6]
}
   1f450:	e71d      	b.n	1f28e <hci_internal_cmd_put+0x76>
   1f452:	bf00      	nop
   1f454:	20002f85 	.word	0x20002f85
   1f458:	20002f8c 	.word	0x20002f8c
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1f45c:	f5a6 5600 	sub.w	r6, r6, #8192	; 0x2000
   1f460:	3e01      	subs	r6, #1
   1f462:	3003      	adds	r0, #3
	switch (opcode)	{
   1f464:	2e4d      	cmp	r6, #77	; 0x4d
   1f466:	f63f af05 	bhi.w	1f274 <hci_internal_cmd_put+0x5c>
   1f46a:	a301      	add	r3, pc, #4	; (adr r3, 1f470 <hci_internal_cmd_put+0x258>)
   1f46c:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1f470:	0001f5a9 	.word	0x0001f5a9
   1f474:	0001f5af 	.word	0x0001f5af
   1f478:	0001f5b7 	.word	0x0001f5b7
   1f47c:	0001f275 	.word	0x0001f275
   1f480:	0001f5df 	.word	0x0001f5df
   1f484:	0001f5e5 	.word	0x0001f5e5
   1f488:	0001f5eb 	.word	0x0001f5eb
   1f48c:	0001f5f5 	.word	0x0001f5f5
   1f490:	0001f5fb 	.word	0x0001f5fb
   1f494:	0001f601 	.word	0x0001f601
   1f498:	0001f275 	.word	0x0001f275
   1f49c:	0001f275 	.word	0x0001f275
   1f4a0:	0001f275 	.word	0x0001f275
   1f4a4:	0001f275 	.word	0x0001f275
   1f4a8:	0001f607 	.word	0x0001f607
   1f4ac:	0001f60f 	.word	0x0001f60f
   1f4b0:	0001f615 	.word	0x0001f615
   1f4b4:	0001f61b 	.word	0x0001f61b
   1f4b8:	0001f275 	.word	0x0001f275
   1f4bc:	0001f275 	.word	0x0001f275
   1f4c0:	0001f621 	.word	0x0001f621
   1f4c4:	0001f62b 	.word	0x0001f62b
   1f4c8:	0001f631 	.word	0x0001f631
   1f4cc:	0001f63b 	.word	0x0001f63b
   1f4d0:	0001f275 	.word	0x0001f275
   1f4d4:	0001f643 	.word	0x0001f643
   1f4d8:	0001f64b 	.word	0x0001f64b
   1f4dc:	0001f653 	.word	0x0001f653
   1f4e0:	0001f275 	.word	0x0001f275
   1f4e4:	0001f275 	.word	0x0001f275
   1f4e8:	0001f275 	.word	0x0001f275
   1f4ec:	0001f275 	.word	0x0001f275
   1f4f0:	0001f275 	.word	0x0001f275
   1f4f4:	0001f65b 	.word	0x0001f65b
   1f4f8:	0001f663 	.word	0x0001f663
   1f4fc:	0001f66b 	.word	0x0001f66b
   1f500:	0001f275 	.word	0x0001f275
   1f504:	0001f275 	.word	0x0001f275
   1f508:	0001f671 	.word	0x0001f671
   1f50c:	0001f677 	.word	0x0001f677
   1f510:	0001f67d 	.word	0x0001f67d
   1f514:	0001f683 	.word	0x0001f683
   1f518:	0001f275 	.word	0x0001f275
   1f51c:	0001f275 	.word	0x0001f275
   1f520:	0001f68b 	.word	0x0001f68b
   1f524:	0001f691 	.word	0x0001f691
   1f528:	0001f697 	.word	0x0001f697
   1f52c:	0001f69f 	.word	0x0001f69f
   1f530:	0001f6a7 	.word	0x0001f6a7
   1f534:	0001f6ad 	.word	0x0001f6ad
   1f538:	0001f275 	.word	0x0001f275
   1f53c:	0001f275 	.word	0x0001f275
   1f540:	0001f275 	.word	0x0001f275
   1f544:	0001f275 	.word	0x0001f275
   1f548:	0001f275 	.word	0x0001f275
   1f54c:	0001f275 	.word	0x0001f275
   1f550:	0001f275 	.word	0x0001f275
   1f554:	0001f275 	.word	0x0001f275
   1f558:	0001f275 	.word	0x0001f275
   1f55c:	0001f275 	.word	0x0001f275
   1f560:	0001f275 	.word	0x0001f275
   1f564:	0001f275 	.word	0x0001f275
   1f568:	0001f275 	.word	0x0001f275
   1f56c:	0001f275 	.word	0x0001f275
   1f570:	0001f275 	.word	0x0001f275
   1f574:	0001f275 	.word	0x0001f275
   1f578:	0001f275 	.word	0x0001f275
   1f57c:	0001f275 	.word	0x0001f275
   1f580:	0001f275 	.word	0x0001f275
   1f584:	0001f275 	.word	0x0001f275
   1f588:	0001f275 	.word	0x0001f275
   1f58c:	0001f275 	.word	0x0001f275
   1f590:	0001f275 	.word	0x0001f275
   1f594:	0001f275 	.word	0x0001f275
   1f598:	0001f6b3 	.word	0x0001f6b3
   1f59c:	0001f275 	.word	0x0001f275
   1f5a0:	0001f275 	.word	0x0001f275
   1f5a4:	0001f6bb 	.word	0x0001f6bb
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   1f5a8:	f7ed f9a1 	bl	c8ee <sdc_hci_cmd_le_set_event_mask>
   1f5ac:	e68b      	b.n	1f2c6 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1f5ae:	48a2      	ldr	r0, [pc, #648]	; (1f838 <hci_internal_cmd_put+0x620>)
   1f5b0:	f7ed f97b 	bl	c8aa <sdc_hci_cmd_le_read_buffer_size>
   1f5b4:	e69c      	b.n	1f2f0 <hci_internal_cmd_put+0xd8>
	memset(features, 0, sizeof(*features));
   1f5b6:	48a0      	ldr	r0, [pc, #640]	; (1f838 <hci_internal_cmd_put+0x620>)
   1f5b8:	2205      	movs	r2, #5
   1f5ba:	2100      	movs	r1, #0
   1f5bc:	f005 fc6b 	bl	24e96 <memset>
	features->le_encryption = 1;
   1f5c0:	79e3      	ldrb	r3, [r4, #7]
   1f5c2:	f023 0375 	bic.w	r3, r3, #117	; 0x75
   1f5c6:	f043 0375 	orr.w	r3, r3, #117	; 0x75
   1f5ca:	71e3      	strb	r3, [r4, #7]
	features->le_2m_phy = 1;
   1f5cc:	7a23      	ldrb	r3, [r4, #8]
   1f5ce:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   1f5d2:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   1f5d6:	7223      	strb	r3, [r4, #8]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   1f5d8:	230c      	movs	r3, #12
	switch (hci_opcode) {
   1f5da:	2000      	movs	r0, #0
   1f5dc:	e731      	b.n	1f442 <hci_internal_cmd_put+0x22a>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   1f5de:	f7ed f98f 	bl	c900 <sdc_hci_cmd_le_set_random_address>
   1f5e2:	e670      	b.n	1f2c6 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   1f5e4:	f7ed f97d 	bl	c8e2 <sdc_hci_cmd_le_set_adv_params>
   1f5e8:	e66d      	b.n	1f2c6 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   1f5ea:	4893      	ldr	r0, [pc, #588]	; (1f838 <hci_internal_cmd_put+0x620>)
   1f5ec:	f7ed f95b 	bl	c8a6 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   1f5f0:	2305      	movs	r3, #5
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   1f5f2:	e723      	b.n	1f43c <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   1f5f4:	f7ed f971 	bl	c8da <sdc_hci_cmd_le_set_adv_data>
   1f5f8:	e665      	b.n	1f2c6 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   1f5fa:	f7ed f985 	bl	c908 <sdc_hci_cmd_le_set_scan_response_data>
   1f5fe:	e662      	b.n	1f2c6 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   1f600:	f7ed f96d 	bl	c8de <sdc_hci_cmd_le_set_adv_enable>
   1f604:	e65f      	b.n	1f2c6 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   1f606:	488c      	ldr	r0, [pc, #560]	; (1f838 <hci_internal_cmd_put+0x620>)
   1f608:	f7ed f95f 	bl	c8ca <sdc_hci_cmd_le_read_white_list_size>
   1f60c:	e7f0      	b.n	1f5f0 <hci_internal_cmd_put+0x3d8>
		return sdc_hci_cmd_le_clear_white_list();
   1f60e:	f7ed f93c 	bl	c88a <sdc_hci_cmd_le_clear_white_list>
   1f612:	e658      	b.n	1f2c6 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   1f614:	f7ed f935 	bl	c882 <sdc_hci_cmd_le_add_device_to_white_list>
   1f618:	e655      	b.n	1f2c6 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   1f61a:	f7ed f95a 	bl	c8d2 <sdc_hci_cmd_le_remove_device_from_white_list>
   1f61e:	e652      	b.n	1f2c6 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1f620:	4985      	ldr	r1, [pc, #532]	; (1f838 <hci_internal_cmd_put+0x620>)
   1f622:	f7ed f944 	bl	c8ae <sdc_hci_cmd_le_read_channel_map>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1f626:	230b      	movs	r3, #11
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1f628:	e708      	b.n	1f43c <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   1f62a:	f7ed f946 	bl	c8ba <sdc_hci_cmd_le_read_remote_features>
   1f62e:	e625      	b.n	1f27c <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1f630:	4981      	ldr	r1, [pc, #516]	; (1f838 <hci_internal_cmd_put+0x620>)
   1f632:	f7ed f92c 	bl	c88e <sdc_hci_cmd_le_encrypt>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1f636:	2314      	movs	r3, #20
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1f638:	e700      	b.n	1f43c <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1f63a:	487f      	ldr	r0, [pc, #508]	; (1f838 <hci_internal_cmd_put+0x620>)
   1f63c:	f7ed f931 	bl	c8a2 <sdc_hci_cmd_le_rand>
   1f640:	e67d      	b.n	1f33e <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   1f642:	497d      	ldr	r1, [pc, #500]	; (1f838 <hci_internal_cmd_put+0x620>)
   1f644:	f7ed f929 	bl	c89a <sdc_hci_cmd_le_long_term_key_request_reply>
   1f648:	e64a      	b.n	1f2e0 <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   1f64a:	497b      	ldr	r1, [pc, #492]	; (1f838 <hci_internal_cmd_put+0x620>)
   1f64c:	f7ed f921 	bl	c892 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   1f650:	e646      	b.n	1f2e0 <hci_internal_cmd_put+0xc8>
	*buf = states1;
   1f652:	238f      	movs	r3, #143	; 0x8f
   1f654:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   1f656:	23c0      	movs	r3, #192	; 0xc0
   1f658:	e6ea      	b.n	1f430 <hci_internal_cmd_put+0x218>
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1f65a:	4977      	ldr	r1, [pc, #476]	; (1f838 <hci_internal_cmd_put+0x620>)
   1f65c:	f7ed f943 	bl	c8e6 <sdc_hci_cmd_le_set_data_length>
   1f660:	e63e      	b.n	1f2e0 <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1f662:	4875      	ldr	r0, [pc, #468]	; (1f838 <hci_internal_cmd_put+0x620>)
   1f664:	f7ed f92d 	bl	c8c2 <sdc_hci_cmd_le_read_suggested_default_data_length>
   1f668:	e64a      	b.n	1f300 <hci_internal_cmd_put+0xe8>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   1f66a:	f7ed f94f 	bl	c90c <sdc_hci_cmd_le_write_suggested_default_data_length>
   1f66e:	e62a      	b.n	1f2c6 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   1f670:	f7ed f905 	bl	c87e <sdc_hci_cmd_le_add_device_to_resolving_list>
   1f674:	e627      	b.n	1f2c6 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   1f676:	f7ed f92a 	bl	c8ce <sdc_hci_cmd_le_remove_device_from_resolving_list>
   1f67a:	e624      	b.n	1f2c6 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_clear_resolving_list();
   1f67c:	f7ed f903 	bl	c886 <sdc_hci_cmd_le_clear_resolving_list>
   1f680:	e621      	b.n	1f2c6 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   1f682:	486d      	ldr	r0, [pc, #436]	; (1f838 <hci_internal_cmd_put+0x620>)
   1f684:	f7ed f91b 	bl	c8be <sdc_hci_cmd_le_read_resolving_list_size>
   1f688:	e7b2      	b.n	1f5f0 <hci_internal_cmd_put+0x3d8>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   1f68a:	f7ed f924 	bl	c8d6 <sdc_hci_cmd_le_set_address_resolution_enable>
   1f68e:	e61a      	b.n	1f2c6 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   1f690:	f7ed f938 	bl	c904 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   1f694:	e617      	b.n	1f2c6 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1f696:	4868      	ldr	r0, [pc, #416]	; (1f838 <hci_internal_cmd_put+0x620>)
   1f698:	f7ed f90b 	bl	c8b2 <sdc_hci_cmd_le_read_max_data_length>
   1f69c:	e64f      	b.n	1f33e <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1f69e:	4966      	ldr	r1, [pc, #408]	; (1f838 <hci_internal_cmd_put+0x620>)
   1f6a0:	f7ed f909 	bl	c8b6 <sdc_hci_cmd_le_read_phy>
   1f6a4:	e62c      	b.n	1f300 <hci_internal_cmd_put+0xe8>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   1f6a6:	f7ed f920 	bl	c8ea <sdc_hci_cmd_le_set_default_phy>
   1f6aa:	e60c      	b.n	1f2c6 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   1f6ac:	f7ed f924 	bl	c8f8 <sdc_hci_cmd_le_set_phy>
   1f6b0:	e5e4      	b.n	1f27c <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1f6b2:	4861      	ldr	r0, [pc, #388]	; (1f838 <hci_internal_cmd_put+0x620>)
   1f6b4:	f7ed f907 	bl	c8c6 <sdc_hci_cmd_le_read_transmit_power>
   1f6b8:	e612      	b.n	1f2e0 <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   1f6ba:	f7ed f91f 	bl	c8fc <sdc_hci_cmd_le_set_privacy_mode>
   1f6be:	e602      	b.n	1f2c6 <hci_internal_cmd_put+0xae>
	switch (opcode)	{
   1f6c0:	f64f 430a 	movw	r3, #64522	; 0xfc0a
   1f6c4:	429d      	cmp	r5, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1f6c6:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1f6ca:	d821      	bhi.n	1f710 <hci_internal_cmd_put+0x4f8>
   1f6cc:	f5b5 4f7c 	cmp.w	r5, #64512	; 0xfc00
   1f6d0:	f43f add0 	beq.w	1f274 <hci_internal_cmd_put+0x5c>
   1f6d4:	f5a5 437c 	sub.w	r3, r5, #64512	; 0xfc00
   1f6d8:	3b01      	subs	r3, #1
   1f6da:	2b09      	cmp	r3, #9
   1f6dc:	f63f adca 	bhi.w	1f274 <hci_internal_cmd_put+0x5c>
   1f6e0:	a201      	add	r2, pc, #4	; (adr r2, 1f6e8 <hci_internal_cmd_put+0x4d0>)
   1f6e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1f6e6:	bf00      	nop
   1f6e8:	0001f731 	.word	0x0001f731
   1f6ec:	0001f75f 	.word	0x0001f75f
   1f6f0:	0001f275 	.word	0x0001f275
   1f6f4:	0001f275 	.word	0x0001f275
   1f6f8:	0001f275 	.word	0x0001f275
   1f6fc:	0001f7a3 	.word	0x0001f7a3
   1f700:	0001f275 	.word	0x0001f275
   1f704:	0001f275 	.word	0x0001f275
   1f708:	0001f78f 	.word	0x0001f78f
   1f70c:	0001f799 	.word	0x0001f799
   1f710:	f505 7340 	add.w	r3, r5, #768	; 0x300
   1f714:	b29b      	uxth	r3, r3
   1f716:	2b05      	cmp	r3, #5
   1f718:	f63f adac 	bhi.w	1f274 <hci_internal_cmd_put+0x5c>
   1f71c:	f5a5 437d 	sub.w	r3, r5, #64768	; 0xfd00
   1f720:	2b05      	cmp	r3, #5
   1f722:	f63f ada7 	bhi.w	1f274 <hci_internal_cmd_put+0x5c>
   1f726:	e8df f003 	tbb	[pc, r3]
   1f72a:	4c40      	.short	0x4c40
   1f72c:	5855524f 	.word	0x5855524f
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1f730:	4841      	ldr	r0, [pc, #260]	; (1f838 <hci_internal_cmd_put+0x620>)
   1f732:	f7e4 fd39 	bl	41a8 <sdc_hci_cmd_vs_zephyr_read_version_info>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1f736:	2310      	movs	r3, #16
	switch (hci_opcode) {
   1f738:	f242 0219 	movw	r2, #8217	; 0x2019
   1f73c:	4296      	cmp	r6, r2
   1f73e:	dc5c      	bgt.n	1f7fa <hci_internal_cmd_put+0x5e2>
   1f740:	f242 020c 	movw	r2, #8204	; 0x200c
   1f744:	4296      	cmp	r6, r2
   1f746:	dc4b      	bgt.n	1f7e0 <hci_internal_cmd_put+0x5c8>
   1f748:	f240 4206 	movw	r2, #1030	; 0x406
   1f74c:	4296      	cmp	r6, r2
   1f74e:	f43f ad95 	beq.w	1f27c <hci_internal_cmd_put+0x64>
   1f752:	f240 421d 	movw	r2, #1053	; 0x41d
   1f756:	4296      	cmp	r6, r2
   1f758:	f43f ad90 	beq.w	1f27c <hci_internal_cmd_put+0x64>
   1f75c:	e66e      	b.n	1f43c <hci_internal_cmd_put+0x224>
	memset(cmds, 0, sizeof(*cmds));
   1f75e:	4836      	ldr	r0, [pc, #216]	; (1f838 <hci_internal_cmd_put+0x620>)
   1f760:	2202      	movs	r2, #2
   1f762:	2100      	movs	r1, #0
   1f764:	f005 fb97 	bl	24e96 <memset>
	cmds->read_version_info = 1;
   1f768:	79e3      	ldrb	r3, [r4, #7]
   1f76a:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   1f76e:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   1f772:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   1f774:	7a23      	ldrb	r3, [r4, #8]
   1f776:	f023 0307 	bic.w	r3, r3, #7
   1f77a:	f043 0307 	orr.w	r3, r3, #7
   1f77e:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
   1f780:	f242 0319 	movw	r3, #8217	; 0x2019
   1f784:	429e      	cmp	r6, r3
   1f786:	dd47      	ble.n	1f818 <hci_internal_cmd_put+0x600>
   1f788:	f242 0332 	movw	r3, #8242	; 0x2032
   1f78c:	e04f      	b.n	1f82e <hci_internal_cmd_put+0x616>
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1f78e:	482a      	ldr	r0, [pc, #168]	; (1f838 <hci_internal_cmd_put+0x620>)
   1f790:	f7ed f820 	bl	c7d4 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1f794:	231b      	movs	r3, #27
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1f796:	e7cf      	b.n	1f738 <hci_internal_cmd_put+0x520>
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1f798:	4827      	ldr	r0, [pc, #156]	; (1f838 <hci_internal_cmd_put+0x620>)
   1f79a:	f7ec ffce 	bl	c73a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
		*param_length_out +=
   1f79e:	2324      	movs	r3, #36	; 0x24
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1f7a0:	e7ca      	b.n	1f738 <hci_internal_cmd_put+0x520>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1f7a2:	f7ed f866 	bl	c872 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   1f7a6:	2304      	movs	r3, #4
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1f7a8:	e7c6      	b.n	1f738 <hci_internal_cmd_put+0x520>
	memset(cmds, 0, sizeof(*cmds));
   1f7aa:	4823      	ldr	r0, [pc, #140]	; (1f838 <hci_internal_cmd_put+0x620>)
   1f7ac:	2201      	movs	r2, #1
   1f7ae:	2100      	movs	r1, #0
   1f7b0:	f005 fb71 	bl	24e96 <memset>
	cmds->read_supported_vs_commands = 1;
   1f7b4:	79e3      	ldrb	r3, [r4, #7]
   1f7b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   1f7ba:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   1f7be:	71e3      	strb	r3, [r4, #7]
	switch (hci_opcode) {
   1f7c0:	e62a      	b.n	1f418 <hci_internal_cmd_put+0x200>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   1f7c2:	f7ec ffb3 	bl	c72c <sdc_hci_cmd_vs_llpm_mode_set>
   1f7c6:	e57e      	b.n	1f2c6 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   1f7c8:	f7ec ffac 	bl	c724 <sdc_hci_cmd_vs_conn_update>
   1f7cc:	e57b      	b.n	1f2c6 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   1f7ce:	f7ec ffa1 	bl	c714 <sdc_hci_cmd_vs_conn_event_extend>
   1f7d2:	e578      	b.n	1f2c6 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   1f7d4:	f7ec ffac 	bl	c730 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   1f7d8:	e575      	b.n	1f2c6 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   1f7da:	f7ec ffa5 	bl	c728 <sdc_hci_cmd_vs_event_length_set>
   1f7de:	e572      	b.n	1f2c6 <hci_internal_cmd_put+0xae>
   1f7e0:	f5a5 5200 	sub.w	r2, r5, #8192	; 0x2000
   1f7e4:	3a0d      	subs	r2, #13
   1f7e6:	2101      	movs	r1, #1
   1f7e8:	b292      	uxth	r2, r2
   1f7ea:	fa01 f202 	lsl.w	r2, r1, r2
   1f7ee:	f241 2141 	movw	r1, #4673	; 0x1241
   1f7f2:	420a      	tst	r2, r1
   1f7f4:	f43f ae22 	beq.w	1f43c <hci_internal_cmd_put+0x224>
   1f7f8:	e540      	b.n	1f27c <hci_internal_cmd_put+0x64>
	switch (hci_opcode) {
   1f7fa:	f242 0232 	movw	r2, #8242	; 0x2032
   1f7fe:	4296      	cmp	r6, r2
   1f800:	f43f ad3c 	beq.w	1f27c <hci_internal_cmd_put+0x64>
   1f804:	f5a5 5201 	sub.w	r2, r5, #8256	; 0x2040
   1f808:	3a03      	subs	r2, #3
   1f80a:	2a01      	cmp	r2, #1
   1f80c:	f67f ad36 	bls.w	1f27c <hci_internal_cmd_put+0x64>
   1f810:	e614      	b.n	1f43c <hci_internal_cmd_put+0x224>
		return -NRF_EPERM;
   1f812:	f04f 30ff 	mov.w	r0, #4294967295
   1f816:	e53d      	b.n	1f294 <hci_internal_cmd_put+0x7c>
	switch (hci_opcode) {
   1f818:	f242 030c 	movw	r3, #8204	; 0x200c
   1f81c:	429e      	cmp	r6, r3
   1f81e:	f73f adfb 	bgt.w	1f418 <hci_internal_cmd_put+0x200>
   1f822:	f240 4306 	movw	r3, #1030	; 0x406
   1f826:	429e      	cmp	r6, r3
   1f828:	d004      	beq.n	1f834 <hci_internal_cmd_put+0x61c>
   1f82a:	f240 431d 	movw	r3, #1053	; 0x41d
   1f82e:	429e      	cmp	r6, r3
   1f830:	f47f adf2 	bne.w	1f418 <hci_internal_cmd_put+0x200>
   1f834:	2000      	movs	r0, #0
   1f836:	e521      	b.n	1f27c <hci_internal_cmd_put+0x64>
   1f838:	20002f8c 	.word	0x20002f8c

0001f83c <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   1f83c:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   1f83e:	4c07      	ldr	r4, [pc, #28]	; (1f85c <hci_internal_evt_get+0x20>)
   1f840:	7823      	ldrb	r3, [r4, #0]
   1f842:	b13b      	cbz	r3, 1f854 <hci_internal_evt_get+0x18>
		struct bt_hci_evt_hdr *evt_hdr = (void *)&cmd_complete_or_status.raw_event[0];

		memcpy(evt_out,
		       &cmd_complete_or_status.raw_event[0],
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   1f844:	78a2      	ldrb	r2, [r4, #2]
		memcpy(evt_out,
   1f846:	1c61      	adds	r1, r4, #1
   1f848:	3202      	adds	r2, #2
   1f84a:	f005 fb19 	bl	24e80 <memcpy>
		cmd_complete_or_status.occurred = false;
   1f84e:	2000      	movs	r0, #0
   1f850:	7020      	strb	r0, [r4, #0]

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   1f852:	bd10      	pop	{r4, pc}
   1f854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return sdc_hci_evt_get(evt_out);
   1f858:	f7ec bf3f 	b.w	c6da <sdc_hci_evt_get>
   1f85c:	20002f85 	.word	0x20002f85

0001f860 <m_assert_handler>:
	mpsl_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_MPSL_ASSERT_HANDLER) */
static void m_assert_handler(const char *const file, const uint32_t line)
{
   1f860:	b538      	push	{r3, r4, r5, lr}
   1f862:	4b0b      	ldr	r3, [pc, #44]	; (1f890 <m_assert_handler+0x30>)
   1f864:	4c0b      	ldr	r4, [pc, #44]	; (1f894 <m_assert_handler+0x34>)
   1f866:	1ae4      	subs	r4, r4, r3
   1f868:	460d      	mov	r5, r1
   1f86a:	08e4      	lsrs	r4, r4, #3
   1f86c:	f7f2 fb6c 	bl	11f48 <z_log_strdup>
	LOG_ERR("MPSL ASSERT: %s, %d", log_strdup(file), line);
   1f870:	01a4      	lsls	r4, r4, #6
   1f872:	f044 0401 	orr.w	r4, r4, #1
   1f876:	4601      	mov	r1, r0
   1f878:	4623      	mov	r3, r4
   1f87a:	4807      	ldr	r0, [pc, #28]	; (1f898 <m_assert_handler+0x38>)
   1f87c:	462a      	mov	r2, r5
   1f87e:	f004 fb11 	bl	23ea4 <log_2>
	k_oops();
   1f882:	4040      	eors	r0, r0
   1f884:	f380 8811 	msr	BASEPRI, r0
   1f888:	f04f 0003 	mov.w	r0, #3
   1f88c:	df02      	svc	2
}
   1f88e:	bd38      	pop	{r3, r4, r5, pc}
   1f890:	00028dd4 	.word	0x00028dd4
   1f894:	00028eac 	.word	0x00028eac
   1f898:	0002c779 	.word	0x0002c779

0001f89c <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   1f89c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   1f89e:	2332      	movs	r3, #50	; 0x32
   1f8a0:	f8ad 3004 	strh.w	r3, [sp, #4]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1f8a4:	4a13      	ldr	r2, [pc, #76]	; (1f8f4 <mpsl_lib_init+0x58>)
	clock_cfg.skip_wait_lfclk_started =
   1f8a6:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   1f8a8:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1f8aa:	2119      	movs	r1, #25
   1f8ac:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   1f8ae:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   1f8b2:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   1f8b6:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1f8ba:	f7e4 f82f 	bl	391c <mpsl_init>
	if (err) {
   1f8be:	4604      	mov	r4, r0
   1f8c0:	b9a0      	cbnz	r0, 1f8ec <mpsl_lib_init+0x50>
		return err;
	}

#if MPSL_TIMESLOT_SESSION_COUNT > 0
	err = mpsl_timeslot_session_count_set((void *) timeslot_context,
   1f8c2:	480d      	ldr	r0, [pc, #52]	; (1f8f8 <mpsl_lib_init+0x5c>)
   1f8c4:	4629      	mov	r1, r5
   1f8c6:	f7ec f980 	bl	bbca <mpsl_timeslot_session_count_set>
			MPSL_TIMESLOT_SESSION_COUNT);
	if (err) {
   1f8ca:	4604      	mov	r4, r0
   1f8cc:	b970      	cbnz	r0, 1f8ec <mpsl_lib_init+0x50>
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1f8ce:	4601      	mov	r1, r0
   1f8d0:	462a      	mov	r2, r5
   1f8d2:	2008      	movs	r0, #8
   1f8d4:	f7f4 f8b8 	bl	13a48 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1f8d8:	462a      	mov	r2, r5
   1f8da:	4621      	mov	r1, r4
   1f8dc:	200b      	movs	r0, #11
   1f8de:	f7f4 f8b3 	bl	13a48 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1f8e2:	462a      	mov	r2, r5
   1f8e4:	4621      	mov	r1, r4
   1f8e6:	4628      	mov	r0, r5
   1f8e8:	f7f4 f8ae 	bl	13a48 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
   1f8ec:	4620      	mov	r0, r4
   1f8ee:	b003      	add	sp, #12
   1f8f0:	bd30      	pop	{r4, r5, pc}
   1f8f2:	bf00      	nop
   1f8f4:	0001f861 	.word	0x0001f861
   1f8f8:	20002654 	.word	0x20002654

0001f8fc <mpsl_low_prio_irq_handler>:
   1f8fc:	4801      	ldr	r0, [pc, #4]	; (1f904 <mpsl_low_prio_irq_handler+0x8>)
   1f8fe:	f002 b8ff 	b.w	21b00 <z_impl_k_sem_give>
   1f902:	bf00      	nop
   1f904:	20000a00 	.word	0x20000a00

0001f908 <signal_thread>:
{
   1f908:	b510      	push	{r4, lr}
	return z_impl_k_sem_take(sem, timeout);
   1f90a:	4c09      	ldr	r4, [pc, #36]	; (1f930 <signal_thread+0x28>)
   1f90c:	f04f 32ff 	mov.w	r2, #4294967295
   1f910:	f04f 33ff 	mov.w	r3, #4294967295
   1f914:	4620      	mov	r0, r4
   1f916:	f002 f919 	bl	21b4c <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   1f91a:	f04f 31ff 	mov.w	r1, #4294967295
   1f91e:	f04f 30ff 	mov.w	r0, #4294967295
   1f922:	f7ff fa41 	bl	1eda8 <multithreading_lock_acquire>
		mpsl_low_priority_process();
   1f926:	f7ec fa67 	bl	bdf8 <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   1f92a:	f7ff fa45 	bl	1edb8 <multithreading_lock_release>
	while (true) {
   1f92e:	e7ed      	b.n	1f90c <signal_thread+0x4>
   1f930:	20000a00 	.word	0x20000a00

0001f934 <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   1f934:	b530      	push	{r4, r5, lr}
   1f936:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1f938:	4d0f      	ldr	r5, [pc, #60]	; (1f978 <mpsl_signal_thread_init+0x44>)
   1f93a:	4910      	ldr	r1, [pc, #64]	; (1f97c <mpsl_signal_thread_init+0x48>)
   1f93c:	2200      	movs	r2, #0
   1f93e:	2300      	movs	r3, #0
   1f940:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1f944:	2400      	movs	r4, #0
   1f946:	f06f 0309 	mvn.w	r3, #9
   1f94a:	e9cd 3403 	strd	r3, r4, [sp, #12]
   1f94e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1f952:	4b0b      	ldr	r3, [pc, #44]	; (1f980 <mpsl_signal_thread_init+0x4c>)
   1f954:	9400      	str	r4, [sp, #0]
   1f956:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1f95a:	4628      	mov	r0, r5
   1f95c:	f002 f998 	bl	21c90 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1f960:	4908      	ldr	r1, [pc, #32]	; (1f984 <mpsl_signal_thread_init+0x50>)
   1f962:	4628      	mov	r0, r5
   1f964:	f008 fe65 	bl	28632 <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   1f968:	4622      	mov	r2, r4
   1f96a:	2104      	movs	r1, #4
   1f96c:	2019      	movs	r0, #25
   1f96e:	f7f4 f86b 	bl	13a48 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   1f972:	4620      	mov	r0, r4
   1f974:	b009      	add	sp, #36	; 0x24
   1f976:	bd30      	pop	{r4, r5, pc}
   1f978:	20002010 	.word	0x20002010
   1f97c:	20005600 	.word	0x20005600
   1f980:	0001f909 	.word	0x0001f909
   1f984:	0002c78d 	.word	0x0002c78d

0001f988 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1f988:	4b01      	ldr	r3, [pc, #4]	; (1f990 <mpsl_hfclk_callback+0x8>)
   1f98a:	2000      	movs	r0, #0
   1f98c:	681b      	ldr	r3, [r3, #0]
   1f98e:	4718      	bx	r3
   1f990:	20002678 	.word	0x20002678

0001f994 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
   1f994:	b120      	cbz	r0, 1f9a0 <nrfx_clock_start+0xc>
   1f996:	2801      	cmp	r0, #1
   1f998:	d106      	bne.n	1f9a8 <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   1f99a:	4804      	ldr	r0, [pc, #16]	; (1f9ac <nrfx_clock_start+0x18>)
   1f99c:	f7e3 be0a 	b.w	35b4 <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1f9a0:	4b03      	ldr	r3, [pc, #12]	; (1f9b0 <nrfx_clock_start+0x1c>)
   1f9a2:	2001      	movs	r0, #1
   1f9a4:	681b      	ldr	r3, [r3, #0]
   1f9a6:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1f9a8:	4770      	bx	lr
   1f9aa:	bf00      	nop
   1f9ac:	0001f989 	.word	0x0001f989
   1f9b0:	20002678 	.word	0x20002678

0001f9b4 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   1f9b4:	4b01      	ldr	r3, [pc, #4]	; (1f9bc <nrfx_clock_init+0x8>)
   1f9b6:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   1f9b8:	4801      	ldr	r0, [pc, #4]	; (1f9c0 <nrfx_clock_init+0xc>)
   1f9ba:	4770      	bx	lr
   1f9bc:	20002678 	.word	0x20002678
   1f9c0:	0bad0000 	.word	0x0bad0000

0001f9c4 <timeslot_callback>:
		      "mpsl_timeslot_request failed: %d", ret);
}

static mpsl_timeslot_signal_return_param_t *
timeslot_callback(mpsl_timeslot_session_id_t session_id, uint32_t signal)
{
   1f9c4:	b538      	push	{r3, r4, r5, lr}
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f9c6:	4d1a      	ldr	r5, [pc, #104]	; (1fa30 <timeslot_callback+0x6c>)
   1f9c8:	f3bf 8f5b 	dmb	ish
   1f9cc:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   1f9ce:	f3bf 8f5b 	dmb	ish
	int rc;
	__ASSERT_NO_MSG(session_id == _context.session_id);

	if (atomic_get(&_context.timeout_occured)) {
   1f9d2:	bb5c      	cbnz	r4, 1fa2c <timeslot_callback+0x68>
		return NULL;
	}

	switch (signal) {
   1f9d4:	2906      	cmp	r1, #6
   1f9d6:	d804      	bhi.n	1f9e2 <timeslot_callback+0x1e>
   1f9d8:	2904      	cmp	r1, #4
   1f9da:	d81f      	bhi.n	1fa1c <timeslot_callback+0x58>
   1f9dc:	b139      	cbz	r1, 1f9ee <timeslot_callback+0x2a>
		__ASSERT(false, "unexpected signal: %u", signal);
		return NULL;
	}

	return &_context.return_param;
}
   1f9de:	4620      	mov	r0, r4
   1f9e0:	bd38      	pop	{r3, r4, r5, pc}
	switch (signal) {
   1f9e2:	2907      	cmp	r1, #7
   1f9e4:	d1fb      	bne.n	1f9de <timeslot_callback+0x1a>
	z_impl_k_sem_give(sem);
   1f9e6:	4628      	mov	r0, r5
   1f9e8:	f002 f88a 	bl	21b00 <z_impl_k_sem_give>
}
   1f9ec:	e7f7      	b.n	1f9de <timeslot_callback+0x1a>
		rc = _context.op_desc->handler(_context.op_desc->context);
   1f9ee:	6a2b      	ldr	r3, [r5, #32]
   1f9f0:	e9d3 2000 	ldrd	r2, r0, [r3]
   1f9f4:	4790      	blx	r2
		if (rc != FLASH_OP_ONGOING) {
   1f9f6:	2801      	cmp	r0, #1
   1f9f8:	d005      	beq.n	1fa06 <timeslot_callback+0x42>
			_context.return_param.callback_action =
   1f9fa:	462c      	mov	r4, r5
   1f9fc:	2302      	movs	r3, #2
   1f9fe:	f804 3f34 	strb.w	r3, [r4, #52]!
			_context.status = (rc == FLASH_OP_DONE) ? 0 : rc;
   1fa02:	63e8      	str	r0, [r5, #60]	; 0x3c
			_context.return_param.callback_action =
   1fa04:	e7eb      	b.n	1f9de <timeslot_callback+0x1a>
			_context.return_param.callback_action =
   1fa06:	2303      	movs	r3, #3
   1fa08:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
			_context.return_param.params.request.p_next =
   1fa0c:	f105 0324 	add.w	r3, r5, #36	; 0x24
			_context.timeslot_request.params.earliest.priority =
   1fa10:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
			_context.return_param.params.request.p_next =
   1fa14:	63ab      	str	r3, [r5, #56]	; 0x38
   1fa16:	f105 0434 	add.w	r4, r5, #52	; 0x34
   1fa1a:	e7e0      	b.n	1f9de <timeslot_callback+0x1a>
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   1fa1c:	7e28      	ldrb	r0, [r5, #24]
	_context.timeslot_request.params.earliest.priority =
   1fa1e:	f885 4029 	strb.w	r4, [r5, #41]	; 0x29
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   1fa22:	f105 0124 	add.w	r1, r5, #36	; 0x24
   1fa26:	f7ec f879 	bl	bb1c <mpsl_timeslot_request>
}
   1fa2a:	e7d8      	b.n	1f9de <timeslot_callback+0x1a>
		return NULL;
   1fa2c:	2400      	movs	r4, #0
   1fa2e:	e7d6      	b.n	1f9de <timeslot_callback+0x1a>
   1fa30:	2000267c 	.word	0x2000267c

0001fa34 <nrf_flash_sync_init>:
	return z_impl_k_sem_init(sem, initial_count, limit);
   1fa34:	4802      	ldr	r0, [pc, #8]	; (1fa40 <nrf_flash_sync_init+0xc>)
   1fa36:	2201      	movs	r2, #1
   1fa38:	2100      	movs	r1, #0
   1fa3a:	f008 bde4 	b.w	28606 <z_impl_k_sem_init>
   1fa3e:	bf00      	nop
   1fa40:	2000267c 	.word	0x2000267c

0001fa44 <nrf_flash_sync_set_context>:
}

void nrf_flash_sync_set_context(uint32_t duration)
{
	LOG_DBG("duration: %u", duration);
	_context.request_length_us = duration;
   1fa44:	4b01      	ldr	r3, [pc, #4]	; (1fa4c <nrf_flash_sync_set_context+0x8>)
   1fa46:	61d8      	str	r0, [r3, #28]
}
   1fa48:	4770      	bx	lr
   1fa4a:	bf00      	nop
   1fa4c:	2000267c 	.word	0x2000267c

0001fa50 <nrf_flash_sync_exe>:
{
	return mpsl_is_initialized();
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   1fa50:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("");

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
	__ASSERT_NO_MSG(errcode == 0);
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   1fa52:	4c3d      	ldr	r4, [pc, #244]	; (1fb48 <nrf_flash_sync_exe+0xf8>)
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1fa54:	f04f 31ff 	mov.w	r1, #4294967295
{
   1fa58:	4606      	mov	r6, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1fa5a:	f04f 30ff 	mov.w	r0, #4294967295
   1fa5e:	f7ff f9a3 	bl	1eda8 <multithreading_lock_acquire>
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   1fa62:	f104 0118 	add.w	r1, r4, #24
   1fa66:	4839      	ldr	r0, [pc, #228]	; (1fb4c <nrf_flash_sync_exe+0xfc>)
   1fa68:	f7e0 fd0a 	bl	480 <mpsl_timeslot_session_open>
   1fa6c:	4605      	mov	r5, r0
						 &_context.session_id);
	MULTITHREADING_LOCK_RELEASE();
   1fa6e:	f7ff f9a3 	bl	1edb8 <multithreading_lock_release>

	if (ret < 0) {
   1fa72:	2d00      	cmp	r5, #0
   1fa74:	da0d      	bge.n	1fa92 <nrf_flash_sync_exe+0x42>
   1fa76:	4b36      	ldr	r3, [pc, #216]	; (1fb50 <nrf_flash_sync_exe+0x100>)
   1fa78:	4a36      	ldr	r2, [pc, #216]	; (1fb54 <nrf_flash_sync_exe+0x104>)
		LOG_ERR("mpsl_timeslot_session_open failed: %d", ret);
   1fa7a:	4837      	ldr	r0, [pc, #220]	; (1fb58 <nrf_flash_sync_exe+0x108>)
   1fa7c:	1ad2      	subs	r2, r2, r3
   1fa7e:	08d2      	lsrs	r2, r2, #3
   1fa80:	0192      	lsls	r2, r2, #6
   1fa82:	f042 0201 	orr.w	r2, r2, #1
   1fa86:	4629      	mov	r1, r5
   1fa88:	f004 f9f8 	bl	23e7c <log_1>
		return -ENOMEM;
   1fa8c:	f06f 000b 	mvn.w	r0, #11
	if (atomic_get(&_context.timeout_occured)) {
		k_sem_reset(&_context.timeout_sem);
	}

	return _context.status;
}
   1fa90:	bd70      	pop	{r4, r5, r6, pc}
	req->params.earliest.hfclk = MPSL_TIMESLOT_HFCLK_CFG_NO_GUARANTEE;
   1fa92:	f240 1301 	movw	r3, #257	; 0x101
   1fa96:	8523      	strh	r3, [r4, #40]	; 0x28
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   1fa98:	69e3      	ldr	r3, [r4, #28]
	_context.op_desc = op_desc;
   1fa9a:	6226      	str	r6, [r4, #32]
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   1fa9c:	3364      	adds	r3, #100	; 0x64
	req->params.earliest.length_us =
   1fa9e:	62e3      	str	r3, [r4, #44]	; 0x2c
	req->params.earliest.timeout_us = MPSL_TIMESLOT_EARLIEST_TIMEOUT_MAX_US;
   1faa0:	4b2e      	ldr	r3, [pc, #184]	; (1fb5c <nrf_flash_sync_exe+0x10c>)
   1faa2:	6323      	str	r3, [r4, #48]	; 0x30
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   1faa4:	2200      	movs	r2, #0
	_context.status = -ETIMEDOUT;
   1faa6:	f06f 0373 	mvn.w	r3, #115	; 0x73
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   1faaa:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	_context.status = -ETIMEDOUT;
   1faae:	63e3      	str	r3, [r4, #60]	; 0x3c
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1fab0:	f104 0540 	add.w	r5, r4, #64	; 0x40
   1fab4:	f3bf 8f5b 	dmb	ish
   1fab8:	e855 3f00 	ldrex	r3, [r5]
   1fabc:	e845 2100 	strex	r1, r2, [r5]
   1fac0:	2900      	cmp	r1, #0
   1fac2:	d1f9      	bne.n	1fab8 <nrf_flash_sync_exe+0x68>
   1fac4:	f3bf 8f5b 	dmb	ish
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1fac8:	f04f 31ff 	mov.w	r1, #4294967295
   1facc:	f04f 30ff 	mov.w	r0, #4294967295
   1fad0:	f7ff f96a 	bl	1eda8 <multithreading_lock_acquire>
	ret = mpsl_timeslot_request(_context.session_id, req);
   1fad4:	f104 0124 	add.w	r1, r4, #36	; 0x24
   1fad8:	7e20      	ldrb	r0, [r4, #24]
   1fada:	f7ec f81f 	bl	bb1c <mpsl_timeslot_request>
	MULTITHREADING_LOCK_RELEASE();
   1fade:	f7ff f96b 	bl	1edb8 <multithreading_lock_release>
	return z_impl_k_sem_take(sem, timeout);
   1fae2:	4a1f      	ldr	r2, [pc, #124]	; (1fb60 <nrf_flash_sync_exe+0x110>)
   1fae4:	2300      	movs	r3, #0
   1fae6:	4620      	mov	r0, r4
   1fae8:	f002 f830 	bl	21b4c <z_impl_k_sem_take>
	if (k_sem_take(&_context.timeout_sem, K_MSEC(FLASH_TIMEOUT_MS)) < 0) {
   1faec:	2800      	cmp	r0, #0
   1faee:	da14      	bge.n	1fb1a <nrf_flash_sync_exe+0xca>
   1faf0:	4b17      	ldr	r3, [pc, #92]	; (1fb50 <nrf_flash_sync_exe+0x100>)
   1faf2:	4918      	ldr	r1, [pc, #96]	; (1fb54 <nrf_flash_sync_exe+0x104>)
		LOG_ERR("timeout");
   1faf4:	481b      	ldr	r0, [pc, #108]	; (1fb64 <nrf_flash_sync_exe+0x114>)
   1faf6:	1ac9      	subs	r1, r1, r3
   1faf8:	08c9      	lsrs	r1, r1, #3
   1fafa:	0189      	lsls	r1, r1, #6
   1fafc:	f041 0101 	orr.w	r1, r1, #1
   1fb00:	f004 f9af 	bl	23e62 <log_0>
   1fb04:	f3bf 8f5b 	dmb	ish
   1fb08:	2301      	movs	r3, #1
   1fb0a:	e855 2f00 	ldrex	r2, [r5]
   1fb0e:	e845 3100 	strex	r1, r3, [r5]
   1fb12:	2900      	cmp	r1, #0
   1fb14:	d1f9      	bne.n	1fb0a <nrf_flash_sync_exe+0xba>
   1fb16:	f3bf 8f5b 	dmb	ish
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1fb1a:	f04f 31ff 	mov.w	r1, #4294967295
   1fb1e:	f04f 30ff 	mov.w	r0, #4294967295
   1fb22:	f7ff f941 	bl	1eda8 <multithreading_lock_acquire>
	mpsl_timeslot_session_close(_context.session_id);
   1fb26:	7e20      	ldrb	r0, [r4, #24]
   1fb28:	f7ec f831 	bl	bb8e <mpsl_timeslot_session_close>
	MULTITHREADING_LOCK_RELEASE();
   1fb2c:	f7ff f944 	bl	1edb8 <multithreading_lock_release>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1fb30:	f3bf 8f5b 	dmb	ish
   1fb34:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1fb36:	f3bf 8f5b 	dmb	ish
	if (atomic_get(&_context.timeout_occured)) {
   1fb3a:	b113      	cbz	r3, 1fb42 <nrf_flash_sync_exe+0xf2>
	z_impl_k_sem_reset(sem);
   1fb3c:	4802      	ldr	r0, [pc, #8]	; (1fb48 <nrf_flash_sync_exe+0xf8>)
   1fb3e:	f002 f82f 	bl	21ba0 <z_impl_k_sem_reset>
	return _context.status;
   1fb42:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1fb44:	e7a4      	b.n	1fa90 <nrf_flash_sync_exe+0x40>
   1fb46:	bf00      	nop
   1fb48:	2000267c 	.word	0x2000267c
   1fb4c:	0001f9c5 	.word	0x0001f9c5
   1fb50:	00028dd4 	.word	0x00028dd4
   1fb54:	00028e7c 	.word	0x00028e7c
   1fb58:	0002c7a3 	.word	0x0002c7a3
   1fb5c:	07a11fff 	.word	0x07a11fff
   1fb60:	000b7b44 	.word	0x000b7b44
   1fb64:	0002ab2a 	.word	0x0002ab2a

0001fb68 <nrf_flash_sync_check_time_limit>:
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_timer_task_trigger(NRF_TIMER_Type * p_reg,
                                              nrf_timer_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fb68:	4b07      	ldr	r3, [pc, #28]	; (1fb88 <nrf_flash_sync_check_time_limit+0x20>)
   1fb6a:	2201      	movs	r2, #1
   1fb6c:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE uint32_t nrf_timer_cc_get(NRF_TIMER_Type const * p_reg,
                                            nrf_timer_cc_channel_t cc_channel)
{
    return (uint32_t)p_reg->CC[cc_channel];
   1fb6e:	3b40      	subs	r3, #64	; 0x40
   1fb70:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
	uint32_t now_us = get_timeslot_time_us();
	uint32_t time_per_iteration_us = now_us / iteration;
   1fb74:	fbb3 f0f0 	udiv	r0, r3, r0
	return now_us + time_per_iteration_us >= _context.request_length_us;
   1fb78:	4418      	add	r0, r3
   1fb7a:	4b04      	ldr	r3, [pc, #16]	; (1fb8c <nrf_flash_sync_check_time_limit+0x24>)
   1fb7c:	69db      	ldr	r3, [r3, #28]
}
   1fb7e:	4298      	cmp	r0, r3
   1fb80:	bf34      	ite	cc
   1fb82:	2000      	movcc	r0, #0
   1fb84:	2001      	movcs	r0, #1
   1fb86:	4770      	bx	lr
   1fb88:	40008040 	.word	0x40008040
   1fb8c:	2000267c 	.word	0x2000267c

0001fb90 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1fb90:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1fb92:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   1fb94:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   1fb96:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
   1fb9a:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
   1fb9c:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
   1fba0:	d014      	beq.n	1fbcc <nrfx_flag32_alloc+0x3c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1fba2:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
   1fba6:	fa05 f204 	lsl.w	r2, r5, r4
   1fbaa:	ea23 0202 	bic.w	r2, r3, r2
   1fbae:	e850 6f00 	ldrex	r6, [r0]
   1fbb2:	429e      	cmp	r6, r3
   1fbb4:	d104      	bne.n	1fbc0 <nrfx_flag32_alloc+0x30>
   1fbb6:	e840 2c00 	strex	ip, r2, [r0]
   1fbba:	f1bc 0f00 	cmp.w	ip, #0
   1fbbe:	d1f6      	bne.n	1fbae <nrfx_flag32_alloc+0x1e>
   1fbc0:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1fbc4:	d1e6      	bne.n	1fb94 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   1fbc6:	4802      	ldr	r0, [pc, #8]	; (1fbd0 <nrfx_flag32_alloc+0x40>)
    *p_flag = idx;
   1fbc8:	700c      	strb	r4, [r1, #0]
}
   1fbca:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   1fbcc:	4801      	ldr	r0, [pc, #4]	; (1fbd4 <nrfx_flag32_alloc+0x44>)
   1fbce:	e7fc      	b.n	1fbca <nrfx_flag32_alloc+0x3a>
   1fbd0:	0bad0000 	.word	0x0bad0000
   1fbd4:	0bad0002 	.word	0x0bad0002

0001fbd8 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1fbd8:	6803      	ldr	r3, [r0, #0]
   1fbda:	40cb      	lsrs	r3, r1
   1fbdc:	07db      	lsls	r3, r3, #31
{
   1fbde:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   1fbe0:	d415      	bmi.n	1fc0e <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1fbe2:	2301      	movs	r3, #1
   1fbe4:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   1fbe8:	6803      	ldr	r3, [r0, #0]
   1fbea:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   1fbee:	ea41 0203 	orr.w	r2, r1, r3
   1fbf2:	e850 4f00 	ldrex	r4, [r0]
   1fbf6:	429c      	cmp	r4, r3
   1fbf8:	d104      	bne.n	1fc04 <nrfx_flag32_free+0x2c>
   1fbfa:	e840 2c00 	strex	ip, r2, [r0]
   1fbfe:	f1bc 0f00 	cmp.w	ip, #0
   1fc02:	d1f6      	bne.n	1fbf2 <nrfx_flag32_free+0x1a>
   1fc04:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1fc08:	d1ee      	bne.n	1fbe8 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   1fc0a:	4802      	ldr	r0, [pc, #8]	; (1fc14 <nrfx_flag32_free+0x3c>)
}
   1fc0c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1fc0e:	4802      	ldr	r0, [pc, #8]	; (1fc18 <nrfx_flag32_free+0x40>)
   1fc10:	e7fc      	b.n	1fc0c <nrfx_flag32_free+0x34>
   1fc12:	bf00      	nop
   1fc14:	0bad0000 	.word	0x0bad0000
   1fc18:	0bad0004 	.word	0x0bad0004

0001fc1c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1fc1c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1fc1e:	f100 0308 	add.w	r3, r0, #8
   1fc22:	4c0c      	ldr	r4, [pc, #48]	; (1fc54 <call_handler+0x38>)
   1fc24:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   1fc28:	05da      	lsls	r2, r3, #23
{
   1fc2a:	4605      	mov	r5, r0
   1fc2c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1fc2e:	d507      	bpl.n	1fc40 <call_handler+0x24>
   1fc30:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   1fc34:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1fc38:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   1fc3c:	6852      	ldr	r2, [r2, #4]
   1fc3e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   1fc40:	68a3      	ldr	r3, [r4, #8]
   1fc42:	b12b      	cbz	r3, 1fc50 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1fc44:	68e2      	ldr	r2, [r4, #12]
   1fc46:	4631      	mov	r1, r6
   1fc48:	4628      	mov	r0, r5
    }
}
   1fc4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1fc4e:	4718      	bx	r3
}
   1fc50:	bd70      	pop	{r4, r5, r6, pc}
   1fc52:	bf00      	nop
   1fc54:	20000728 	.word	0x20000728

0001fc58 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1fc58:	4b12      	ldr	r3, [pc, #72]	; (1fca4 <release_handler+0x4c>)
   1fc5a:	3008      	adds	r0, #8
{
   1fc5c:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1fc5e:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   1fc62:	05d1      	lsls	r1, r2, #23
   1fc64:	d51b      	bpl.n	1fc9e <release_handler+0x46>
   1fc66:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1fc6a:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
   1fc6e:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1fc72:	f103 0410 	add.w	r4, r3, #16
   1fc76:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1fc78:	f834 2b02 	ldrh.w	r2, [r4], #2
   1fc7c:	f412 7f80 	tst.w	r2, #256	; 0x100
   1fc80:	d003      	beq.n	1fc8a <release_handler+0x32>
   1fc82:	f3c2 2243 	ubfx	r2, r2, #9, #4
   1fc86:	4291      	cmp	r1, r2
   1fc88:	d009      	beq.n	1fc9e <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1fc8a:	3001      	adds	r0, #1
   1fc8c:	2820      	cmp	r0, #32
   1fc8e:	d1f3      	bne.n	1fc78 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   1fc90:	2200      	movs	r2, #0
   1fc92:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1fc96:	4804      	ldr	r0, [pc, #16]	; (1fca8 <release_handler+0x50>)
}
   1fc98:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1fc9a:	f7ff bf9d 	b.w	1fbd8 <nrfx_flag32_free>
}
   1fc9e:	bc10      	pop	{r4}
   1fca0:	4770      	bx	lr
   1fca2:	bf00      	nop
   1fca4:	20000728 	.word	0x20000728
   1fca8:	2000077c 	.word	0x2000077c

0001fcac <pin_handler_trigger_uninit>:
{
   1fcac:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1fcae:	4c0a      	ldr	r4, [pc, #40]	; (1fcd8 <pin_handler_trigger_uninit+0x2c>)
   1fcb0:	f100 0508 	add.w	r5, r0, #8
   1fcb4:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
   1fcb8:	069a      	lsls	r2, r3, #26
   1fcba:	d506      	bpl.n	1fcca <pin_handler_trigger_uninit+0x1e>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1fcbc:	0b5b      	lsrs	r3, r3, #13
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1fcbe:	4a07      	ldr	r2, [pc, #28]	; (1fcdc <pin_handler_trigger_uninit+0x30>)
   1fcc0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   1fcc4:	2100      	movs	r1, #0
   1fcc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    release_handler(pin);
   1fcca:	f7ff ffc5 	bl	1fc58 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1fcce:	2300      	movs	r3, #0
   1fcd0:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   1fcd4:	bd38      	pop	{r3, r4, r5, pc}
   1fcd6:	bf00      	nop
   1fcd8:	20000728 	.word	0x20000728
   1fcdc:	40006000 	.word	0x40006000

0001fce0 <nrfx_gpiote_input_configure>:
{
   1fce0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1fce2:	4604      	mov	r4, r0
    if (p_input_config)
   1fce4:	b1f9      	cbz	r1, 1fd26 <nrfx_gpiote_input_configure+0x46>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1fce6:	4f4c      	ldr	r7, [pc, #304]	; (1fe18 <nrfx_gpiote_input_configure+0x138>)
   1fce8:	f100 0c08 	add.w	ip, r0, #8
   1fcec:	f837 001c 	ldrh.w	r0, [r7, ip, lsl #1]
        if (pin_is_task_output(pin))
   1fcf0:	f000 0522 	and.w	r5, r0, #34	; 0x22
   1fcf4:	2d22      	cmp	r5, #34	; 0x22
   1fcf6:	d102      	bne.n	1fcfe <nrfx_gpiote_input_configure+0x1e>
            return NRFX_ERROR_INVALID_PARAM;
   1fcf8:	4848      	ldr	r0, [pc, #288]	; (1fe1c <nrfx_gpiote_input_configure+0x13c>)
}
   1fcfa:	b003      	add	sp, #12
   1fcfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *p_pin = pin_number & 0x1F;
   1fcfe:	f004 051f 	and.w	r5, r4, #31
   1fd02:	00ad      	lsls	r5, r5, #2
   1fd04:	f105 45a0 	add.w	r5, r5, #1342177280	; 0x50000000
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1fd08:	7809      	ldrb	r1, [r1, #0]
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1fd0a:	f8d5 6700 	ldr.w	r6, [r5, #1792]	; 0x700
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1fd0e:	f020 0002 	bic.w	r0, r0, #2
    cnf &= ~to_update;
   1fd12:	f026 060f 	bic.w	r6, r6, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1fd16:	f040 0001 	orr.w	r0, r0, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1fd1a:	ea46 0181 	orr.w	r1, r6, r1, lsl #2
   1fd1e:	f827 001c 	strh.w	r0, [r7, ip, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
   1fd22:	f8c5 1700 	str.w	r1, [r5, #1792]	; 0x700
    if (p_trigger_config)
   1fd26:	b192      	cbz	r2, 1fd4e <nrfx_gpiote_input_configure+0x6e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1fd28:	483b      	ldr	r0, [pc, #236]	; (1fe18 <nrfx_gpiote_input_configure+0x138>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1fd2a:	7816      	ldrb	r6, [r2, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1fd2c:	6852      	ldr	r2, [r2, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1fd2e:	f104 0508 	add.w	r5, r4, #8
   1fd32:	f830 1015 	ldrh.w	r1, [r0, r5, lsl #1]
        if (pin_is_output(pin))
   1fd36:	078f      	lsls	r7, r1, #30
   1fd38:	d50c      	bpl.n	1fd54 <nrfx_gpiote_input_configure+0x74>
            if (use_evt)
   1fd3a:	2a00      	cmp	r2, #0
   1fd3c:	d1dc      	bne.n	1fcf8 <nrfx_gpiote_input_configure+0x18>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1fd3e:	f830 2015 	ldrh.w	r2, [r0, r5, lsl #1]
   1fd42:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1fd46:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
   1fd4a:	f820 2015 	strh.w	r2, [r0, r5, lsl #1]
    if (p_handler_config)
   1fd4e:	bbcb      	cbnz	r3, 1fdc4 <nrfx_gpiote_input_configure+0xe4>
    return NRFX_SUCCESS;
   1fd50:	4833      	ldr	r0, [pc, #204]	; (1fe20 <nrfx_gpiote_input_configure+0x140>)
   1fd52:	e7d2      	b.n	1fcfa <nrfx_gpiote_input_configure+0x1a>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1fd54:	f021 0120 	bic.w	r1, r1, #32
   1fd58:	04c9      	lsls	r1, r1, #19
   1fd5a:	0cc9      	lsrs	r1, r1, #19
   1fd5c:	f820 1015 	strh.w	r1, [r0, r5, lsl #1]
            if (use_evt)
   1fd60:	2a00      	cmp	r2, #0
   1fd62:	d0ec      	beq.n	1fd3e <nrfx_gpiote_input_configure+0x5e>
                if (!edge)
   1fd64:	2e03      	cmp	r6, #3
   1fd66:	d8c7      	bhi.n	1fcf8 <nrfx_gpiote_input_configure+0x18>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1fd68:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1fd6a:	b92e      	cbnz	r6, 1fd78 <nrfx_gpiote_input_configure+0x98>
   1fd6c:	4a2d      	ldr	r2, [pc, #180]	; (1fe24 <nrfx_gpiote_input_configure+0x144>)
   1fd6e:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   1fd72:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   1fd76:	e7e2      	b.n	1fd3e <nrfx_gpiote_input_configure+0x5e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1fd78:	00ba      	lsls	r2, r7, #2
   1fd7a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1fd7e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1fd82:	ea4f 2e04 	mov.w	lr, r4, lsl #8
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1fd86:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   1fd8a:	f02c 0c03 	bic.w	ip, ip, #3
   1fd8e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1fd92:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   1fd96:	f42c 3c47 	bic.w	ip, ip, #203776	; 0x31c00
   1fd9a:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
   1fd9e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1fda2:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   1fda6:	f40e 5ef8 	and.w	lr, lr, #7936	; 0x1f00
   1fdaa:	ea4c 4c06 	orr.w	ip, ip, r6, lsl #16
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1fdae:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   1fdb2:	ea4c 0c0e 	orr.w	ip, ip, lr
   1fdb6:	f041 0120 	orr.w	r1, r1, #32
   1fdba:	f820 1015 	strh.w	r1, [r0, r5, lsl #1]
   1fdbe:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
   1fdc2:	e7bc      	b.n	1fd3e <nrfx_gpiote_input_configure+0x5e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1fdc4:	e9d3 6700 	ldrd	r6, r7, [r3]
    release_handler(pin);
   1fdc8:	4620      	mov	r0, r4
   1fdca:	f7ff ff45 	bl	1fc58 <release_handler>
    if (!handler)
   1fdce:	2e00      	cmp	r6, #0
   1fdd0:	d0be      	beq.n	1fd50 <nrfx_gpiote_input_configure+0x70>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1fdd2:	4d11      	ldr	r5, [pc, #68]	; (1fe18 <nrfx_gpiote_input_configure+0x138>)
   1fdd4:	682b      	ldr	r3, [r5, #0]
   1fdd6:	429e      	cmp	r6, r3
   1fdd8:	d104      	bne.n	1fde4 <nrfx_gpiote_input_configure+0x104>
   1fdda:	686b      	ldr	r3, [r5, #4]
   1fddc:	429f      	cmp	r7, r3
   1fdde:	d101      	bne.n	1fde4 <nrfx_gpiote_input_configure+0x104>
   1fde0:	2200      	movs	r2, #0
   1fde2:	e009      	b.n	1fdf8 <nrfx_gpiote_input_configure+0x118>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1fde4:	4810      	ldr	r0, [pc, #64]	; (1fe28 <nrfx_gpiote_input_configure+0x148>)
   1fde6:	f10d 0107 	add.w	r1, sp, #7
   1fdea:	f7ff fed1 	bl	1fb90 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1fdee:	4b0c      	ldr	r3, [pc, #48]	; (1fe20 <nrfx_gpiote_input_configure+0x140>)
   1fdf0:	4298      	cmp	r0, r3
   1fdf2:	d182      	bne.n	1fcfa <nrfx_gpiote_input_configure+0x1a>
        handler_id = (int32_t)id;
   1fdf4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].handler = handler;
   1fdf8:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   1fdfc:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1fe00:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1fe02:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1fe04:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   1fe08:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   1fe0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1fe10:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   1fe14:	e79c      	b.n	1fd50 <nrfx_gpiote_input_configure+0x70>
   1fe16:	bf00      	nop
   1fe18:	20000728 	.word	0x20000728
   1fe1c:	0bad0004 	.word	0x0bad0004
   1fe20:	0bad0000 	.word	0x0bad0000
   1fe24:	40006000 	.word	0x40006000
   1fe28:	2000077c 	.word	0x2000077c

0001fe2c <nrfx_gpiote_output_configure>:
{
   1fe2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (p_config)
   1fe30:	2900      	cmp	r1, #0
   1fe32:	d044      	beq.n	1febe <nrfx_gpiote_output_configure+0x92>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1fe34:	4f42      	ldr	r7, [pc, #264]	; (1ff40 <nrfx_gpiote_output_configure+0x114>)
   1fe36:	f100 0c08 	add.w	ip, r0, #8
   1fe3a:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1fe3e:	07ab      	lsls	r3, r5, #30
   1fe40:	d404      	bmi.n	1fe4c <nrfx_gpiote_output_configure+0x20>
   1fe42:	06ae      	lsls	r6, r5, #26
   1fe44:	d502      	bpl.n	1fe4c <nrfx_gpiote_output_configure+0x20>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1fe46:	483f      	ldr	r0, [pc, #252]	; (1ff44 <nrfx_gpiote_output_configure+0x118>)
}
   1fe48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1fe4c:	f015 0f1c 	tst.w	r5, #28
   1fe50:	d002      	beq.n	1fe58 <nrfx_gpiote_output_configure+0x2c>
   1fe52:	784b      	ldrb	r3, [r1, #1]
   1fe54:	2b01      	cmp	r3, #1
   1fe56:	d0f6      	beq.n	1fe46 <nrfx_gpiote_output_configure+0x1a>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1fe58:	f111 0e01 	adds.w	lr, r1, #1
    *p_pin = pin_number & 0x1F;
   1fe5c:	f000 061f 	and.w	r6, r0, #31
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1fe60:	bf14      	ite	ne
   1fe62:	2402      	movne	r4, #2
   1fe64:	2400      	moveq	r4, #0
   1fe66:	00b6      	lsls	r6, r6, #2
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1fe68:	1c8b      	adds	r3, r1, #2
   1fe6a:	f106 46a0 	add.w	r6, r6, #1342177280	; 0x50000000
   1fe6e:	bf14      	ite	ne
   1fe70:	f04f 090c 	movne.w	r9, #12
   1fe74:	f04f 0900 	moveq.w	r9, #0
   1fe78:	ea44 0409 	orr.w	r4, r4, r9
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1fe7c:	f8d6 8700 	ldr.w	r8, [r6, #1792]	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1fe80:	f444 64e0 	orr.w	r4, r4, #1792	; 0x700
   1fe84:	f044 0401 	orr.w	r4, r4, #1
    cnf &= ~to_update;
   1fe88:	ea28 0804 	bic.w	r8, r8, r4
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   1fe8c:	f1be 0f00 	cmp.w	lr, #0
   1fe90:	d003      	beq.n	1fe9a <nrfx_gpiote_output_configure+0x6e>
   1fe92:	f891 e001 	ldrb.w	lr, [r1, #1]
   1fe96:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1fe9a:	b10b      	cbz	r3, 1fea0 <nrfx_gpiote_output_configure+0x74>
   1fe9c:	788c      	ldrb	r4, [r1, #2]
   1fe9e:	00a3      	lsls	r3, r4, #2
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   1fea0:	7809      	ldrb	r1, [r1, #0]
   1fea2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1fea6:	ea43 0308 	orr.w	r3, r3, r8
   1feaa:	ea43 030e 	orr.w	r3, r3, lr
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1feae:	f045 0503 	orr.w	r5, r5, #3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1feb2:	f043 0301 	orr.w	r3, r3, #1
   1feb6:	f827 501c 	strh.w	r5, [r7, ip, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
   1feba:	f8c6 3700 	str.w	r3, [r6, #1792]	; 0x700
    if (p_task_config)
   1febe:	b90a      	cbnz	r2, 1fec4 <nrfx_gpiote_output_configure+0x98>
    return NRFX_SUCCESS;
   1fec0:	4821      	ldr	r0, [pc, #132]	; (1ff48 <nrfx_gpiote_output_configure+0x11c>)
   1fec2:	e7c1      	b.n	1fe48 <nrfx_gpiote_output_configure+0x1c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1fec4:	4d1e      	ldr	r5, [pc, #120]	; (1ff40 <nrfx_gpiote_output_configure+0x114>)
   1fec6:	f100 0608 	add.w	r6, r0, #8
   1feca:	f835 4016 	ldrh.w	r4, [r5, r6, lsl #1]
        if (pin_is_input(pin))
   1fece:	07a3      	lsls	r3, r4, #30
   1fed0:	d5b9      	bpl.n	1fe46 <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
   1fed2:	7817      	ldrb	r7, [r2, #0]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1fed4:	f024 0420 	bic.w	r4, r4, #32
   1fed8:	00b9      	lsls	r1, r7, #2
   1feda:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1fede:	04e4      	lsls	r4, r4, #19
   1fee0:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   1fee4:	0ce4      	lsrs	r4, r4, #19
   1fee6:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
    p_reg->CONFIG[idx] = 0;
   1feea:	2300      	movs	r3, #0
   1feec:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1fef0:	f892 c001 	ldrb.w	ip, [r2, #1]
   1fef4:	f1bc 0f00 	cmp.w	ip, #0
   1fef8:	d0e2      	beq.n	1fec0 <nrfx_gpiote_output_configure+0x94>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1fefa:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   1fefe:	7892      	ldrb	r2, [r2, #2]
   1ff00:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
   1ff04:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1ff08:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1ff0c:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   1ff10:	0203      	lsls	r3, r0, #8
   1ff12:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1ff16:	ea4f 400c 	mov.w	r0, ip, lsl #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1ff1a:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1ff1e:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1ff22:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1ff24:	4303      	orrs	r3, r0
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1ff26:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1ff2a:	ea44 3447 	orr.w	r4, r4, r7, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1ff2e:	4313      	orrs	r3, r2
   1ff30:	f044 0420 	orr.w	r4, r4, #32
   1ff34:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
   1ff38:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1ff3c:	e7c0      	b.n	1fec0 <nrfx_gpiote_output_configure+0x94>
   1ff3e:	bf00      	nop
   1ff40:	20000728 	.word	0x20000728
   1ff44:	0bad0004 	.word	0x0bad0004
   1ff48:	0bad0000 	.word	0x0bad0000

0001ff4c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1ff4c:	4b01      	ldr	r3, [pc, #4]	; (1ff54 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   1ff4e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1ff52:	4770      	bx	lr
   1ff54:	20000728 	.word	0x20000728

0001ff58 <nrfx_gpiote_channel_get>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1ff58:	3008      	adds	r0, #8
   1ff5a:	4b05      	ldr	r3, [pc, #20]	; (1ff70 <nrfx_gpiote_channel_get+0x18>)
   1ff5c:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    if (pin_in_use_by_te(pin))
   1ff60:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1ff62:	bf43      	ittte	mi
   1ff64:	0b5b      	lsrmi	r3, r3, #13
        return NRFX_SUCCESS;
   1ff66:	4803      	ldrmi	r0, [pc, #12]	; (1ff74 <nrfx_gpiote_channel_get+0x1c>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1ff68:	700b      	strbmi	r3, [r1, #0]
        return NRFX_ERROR_INVALID_PARAM;
   1ff6a:	4803      	ldrpl	r0, [pc, #12]	; (1ff78 <nrfx_gpiote_channel_get+0x20>)
}
   1ff6c:	4770      	bx	lr
   1ff6e:	bf00      	nop
   1ff70:	20000728 	.word	0x20000728
   1ff74:	0bad0000 	.word	0x0bad0000
   1ff78:	0bad0004 	.word	0x0bad0004

0001ff7c <nrfx_gpiote_init>:
{
   1ff7c:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1ff7e:	4c0e      	ldr	r4, [pc, #56]	; (1ffb8 <nrfx_gpiote_init+0x3c>)
   1ff80:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
   1ff84:	b9b5      	cbnz	r5, 1ffb4 <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1ff86:	2240      	movs	r2, #64	; 0x40
   1ff88:	4629      	mov	r1, r5
   1ff8a:	f104 0010 	add.w	r0, r4, #16
   1ff8e:	f004 ff82 	bl	24e96 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1ff92:	2006      	movs	r0, #6
   1ff94:	f7f3 fd26 	bl	139e4 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1ff98:	4b08      	ldr	r3, [pc, #32]	; (1ffbc <nrfx_gpiote_init+0x40>)
    return err_code;
   1ff9a:	4809      	ldr	r0, [pc, #36]	; (1ffc0 <nrfx_gpiote_init+0x44>)
   1ff9c:	601d      	str	r5, [r3, #0]
   1ff9e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1ffa0:	4b08      	ldr	r3, [pc, #32]	; (1ffc4 <nrfx_gpiote_init+0x48>)
   1ffa2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1ffa6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1ffaa:	2301      	movs	r3, #1
   1ffac:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1ffb0:	6563      	str	r3, [r4, #84]	; 0x54
}
   1ffb2:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   1ffb4:	4804      	ldr	r0, [pc, #16]	; (1ffc8 <nrfx_gpiote_init+0x4c>)
   1ffb6:	e7fc      	b.n	1ffb2 <nrfx_gpiote_init+0x36>
   1ffb8:	20000728 	.word	0x20000728
   1ffbc:	4000617c 	.word	0x4000617c
   1ffc0:	0bad0000 	.word	0x0bad0000
   1ffc4:	40006000 	.word	0x40006000
   1ffc8:	0bad0005 	.word	0x0bad0005

0001ffcc <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1ffcc:	4b03      	ldr	r3, [pc, #12]	; (1ffdc <nrfx_gpiote_is_init+0x10>)
   1ffce:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   1ffd2:	3800      	subs	r0, #0
   1ffd4:	bf18      	it	ne
   1ffd6:	2001      	movne	r0, #1
   1ffd8:	4770      	bx	lr
   1ffda:	bf00      	nop
   1ffdc:	20000728 	.word	0x20000728

0001ffe0 <nrfx_gpiote_channel_free>:
{
   1ffe0:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1ffe2:	4801      	ldr	r0, [pc, #4]	; (1ffe8 <nrfx_gpiote_channel_free+0x8>)
   1ffe4:	f7ff bdf8 	b.w	1fbd8 <nrfx_flag32_free>
   1ffe8:	20000778 	.word	0x20000778

0001ffec <nrfx_gpiote_channel_alloc>:
{
   1ffec:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1ffee:	4801      	ldr	r0, [pc, #4]	; (1fff4 <nrfx_gpiote_channel_alloc+0x8>)
   1fff0:	f7ff bdce 	b.w	1fb90 <nrfx_flag32_alloc>
   1fff4:	20000778 	.word	0x20000778

0001fff8 <nrfx_gpiote_trigger_enable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1fff8:	f100 0208 	add.w	r2, r0, #8
   1fffc:	4b1d      	ldr	r3, [pc, #116]	; (20074 <nrfx_gpiote_trigger_enable+0x7c>)
   1fffe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   20002:	069a      	lsls	r2, r3, #26
{
   20004:	b410      	push	{r4}
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   20006:	d51d      	bpl.n	20044 <nrfx_gpiote_trigger_enable+0x4c>
   20008:	f013 0402 	ands.w	r4, r3, #2
   2000c:	d11a      	bne.n	20044 <nrfx_gpiote_trigger_enable+0x4c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2000e:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   20010:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   20012:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   20016:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   2001a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   2001e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   20022:	6004      	str	r4, [r0, #0]
   20024:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   20026:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   2002a:	f040 0001 	orr.w	r0, r0, #1
   2002e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   20032:	b129      	cbz	r1, 20040 <nrfx_gpiote_trigger_enable+0x48>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   20034:	2201      	movs	r2, #1
   20036:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   2003a:	4a0f      	ldr	r2, [pc, #60]	; (20078 <nrfx_gpiote_trigger_enable+0x80>)
   2003c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   20040:	bc10      	pop	{r4}
   20042:	4770      	bx	lr
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   20044:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   20048:	2b04      	cmp	r3, #4
   2004a:	d00e      	beq.n	2006a <nrfx_gpiote_trigger_enable+0x72>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   2004c:	2b05      	cmp	r3, #5
   2004e:	d00e      	beq.n	2006e <nrfx_gpiote_trigger_enable+0x76>
    return p_reg->IN;
   20050:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   20054:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    *p_pin = pin_number & 0x1F;
   20058:	f000 031f 	and.w	r3, r0, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   2005c:	40d9      	lsrs	r1, r3
   2005e:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   20062:	3102      	adds	r1, #2
}
   20064:	bc10      	pop	{r4}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   20066:	f007 be28 	b.w	27cba <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   2006a:	2103      	movs	r1, #3
   2006c:	e7fa      	b.n	20064 <nrfx_gpiote_trigger_enable+0x6c>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   2006e:	2102      	movs	r1, #2
   20070:	e7f8      	b.n	20064 <nrfx_gpiote_trigger_enable+0x6c>
   20072:	bf00      	nop
   20074:	20000728 	.word	0x20000728
   20078:	40006000 	.word	0x40006000

0002007c <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   2007c:	4b0e      	ldr	r3, [pc, #56]	; (200b8 <nrfx_gpiote_trigger_disable+0x3c>)
   2007e:	f100 0208 	add.w	r2, r0, #8
   20082:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   20086:	0699      	lsls	r1, r3, #26
   20088:	d513      	bpl.n	200b2 <nrfx_gpiote_trigger_disable+0x36>
   2008a:	079a      	lsls	r2, r3, #30
   2008c:	d411      	bmi.n	200b2 <nrfx_gpiote_trigger_disable+0x36>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2008e:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   20090:	2201      	movs	r2, #1
   20092:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   20094:	009b      	lsls	r3, r3, #2
   20096:	4909      	ldr	r1, [pc, #36]	; (200bc <nrfx_gpiote_trigger_disable+0x40>)
   20098:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2009c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   200a0:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   200a4:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   200a8:	f022 0203 	bic.w	r2, r2, #3
   200ac:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   200b0:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   200b2:	2100      	movs	r1, #0
   200b4:	f007 be01 	b.w	27cba <nrf_gpio_cfg_sense_set>
   200b8:	20000728 	.word	0x20000728
   200bc:	40006000 	.word	0x40006000

000200c0 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   200c0:	4b0d      	ldr	r3, [pc, #52]	; (200f8 <nrfx_gpiote_pin_uninit+0x38>)
   200c2:	f100 0208 	add.w	r2, r0, #8
{
   200c6:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   200c8:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   200cc:	07db      	lsls	r3, r3, #31
{
   200ce:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   200d0:	d50f      	bpl.n	200f2 <nrfx_gpiote_pin_uninit+0x32>
    nrfx_gpiote_trigger_disable(pin);
   200d2:	f7ff ffd3 	bl	2007c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   200d6:	4620      	mov	r0, r4
    *p_pin = pin_number & 0x1F;
   200d8:	f004 041f 	and.w	r4, r4, #31
   200dc:	f7ff fde6 	bl	1fcac <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
   200e0:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   200e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   200e8:	2202      	movs	r2, #2
   200ea:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   200ee:	4803      	ldr	r0, [pc, #12]	; (200fc <nrfx_gpiote_pin_uninit+0x3c>)
}
   200f0:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   200f2:	4803      	ldr	r0, [pc, #12]	; (20100 <nrfx_gpiote_pin_uninit+0x40>)
   200f4:	e7fc      	b.n	200f0 <nrfx_gpiote_pin_uninit+0x30>
   200f6:	bf00      	nop
   200f8:	20000728 	.word	0x20000728
   200fc:	0bad0000 	.word	0x0bad0000
   20100:	0bad0004 	.word	0x0bad0004

00020104 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   20104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20108:	4b4e      	ldr	r3, [pc, #312]	; (20244 <nrfx_gpiote_irq_handler+0x140>)
    return p_reg->INTENSET & mask;
   2010a:	484f      	ldr	r0, [pc, #316]	; (20248 <nrfx_gpiote_irq_handler+0x144>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   2010c:	494f      	ldr	r1, [pc, #316]	; (2024c <nrfx_gpiote_irq_handler+0x148>)
    uint32_t status = 0;
   2010e:	2600      	movs	r6, #0
{
   20110:	b085      	sub	sp, #20
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   20112:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   20114:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20116:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   20118:	b135      	cbz	r5, 20128 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   2011a:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   2011e:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   20120:	bf1e      	ittt	ne
   20122:	601c      	strne	r4, [r3, #0]
   20124:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   20126:	4316      	orrne	r6, r2
        }
        mask <<= 1;
   20128:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   2012a:	428b      	cmp	r3, r1
        mask <<= 1;
   2012c:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   20130:	d1f1      	bne.n	20116 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20132:	4f47      	ldr	r7, [pc, #284]	; (20250 <nrfx_gpiote_irq_handler+0x14c>)
   20134:	683b      	ldr	r3, [r7, #0]
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   20136:	b1ab      	cbz	r3, 20164 <nrfx_gpiote_irq_handler+0x60>
        *p_masks = gpio_regs[i]->LATCH;
   20138:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
   2013c:	f8d5 3520 	ldr.w	r3, [r5, #1312]	; 0x520
   20140:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
   20142:	f8c5 3520 	str.w	r3, [r5, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   20146:	f10d 080c 	add.w	r8, sp, #12
   2014a:	f04f 0901 	mov.w	r9, #1
            while (latch[i])
   2014e:	9803      	ldr	r0, [sp, #12]
   20150:	b950      	cbnz	r0, 20168 <nrfx_gpiote_irq_handler+0x64>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   20152:	6038      	str	r0, [r7, #0]
   20154:	683b      	ldr	r3, [r7, #0]
        *p_masks = gpio_regs[i]->LATCH;
   20156:	f8d5 3520 	ldr.w	r3, [r5, #1312]	; 0x520
   2015a:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
   2015c:	f8c5 3520 	str.w	r3, [r5, #1312]	; 0x520
        if (latch[port_idx])
   20160:	2b00      	cmp	r3, #0
   20162:	d1f0      	bne.n	20146 <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
   20164:	2401      	movs	r4, #1
   20166:	e068      	b.n	2023a <nrfx_gpiote_irq_handler+0x136>
                uint32_t pin = NRF_CTZ(latch[i]);
   20168:	fa90 faa0 	rbit	sl, r0
   2016c:	faba fa8a 	clz	sl, sl
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   20170:	4a38      	ldr	r2, [pc, #224]	; (20254 <nrfx_gpiote_irq_handler+0x150>)
   20172:	f10a 0308 	add.w	r3, sl, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   20176:	ea4f 0cda 	mov.w	ip, sl, lsr #3
   2017a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    bit = BITMASK_RELBIT_GET(bit);
   2017e:	f00a 0307 	and.w	r3, sl, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   20182:	fa09 f203 	lsl.w	r2, r9, r3
   20186:	f818 300c 	ldrb.w	r3, [r8, ip]
   2018a:	ea23 0302 	bic.w	r3, r3, r2
   2018e:	f808 300c 	strb.w	r3, [r8, ip]
   20192:	ea4f 038a 	mov.w	r3, sl, lsl #2
   20196:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
   2019a:	f3c1 0482 	ubfx	r4, r1, #2, #3
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   2019e:	f8d3 2700 	ldr.w	r2, [r3, #1792]	; 0x700
    if (is_level(trigger))
   201a2:	06c8      	lsls	r0, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   201a4:	46a3      	mov	fp, r4
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   201a6:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
   201aa:	d519      	bpl.n	201e0 <nrfx_gpiote_irq_handler+0xdc>
        call_handler(pin, trigger);
   201ac:	4659      	mov	r1, fp
   201ae:	4650      	mov	r0, sl
   201b0:	9301      	str	r3, [sp, #4]
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   201b2:	b2d4      	uxtb	r4, r2
   201b4:	f7ff fd32 	bl	1fc1c <call_handler>
   201b8:	9b01      	ldr	r3, [sp, #4]
   201ba:	f8d3 3700 	ldr.w	r3, [r3, #1792]	; 0x700
        if (nrf_gpio_pin_sense_get(pin) == sense)
   201be:	f3c3 4301 	ubfx	r3, r3, #16, #2
   201c2:	429c      	cmp	r4, r3
   201c4:	d107      	bne.n	201d6 <nrfx_gpiote_irq_handler+0xd2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   201c6:	2100      	movs	r1, #0
   201c8:	4650      	mov	r0, sl
   201ca:	f007 fd76 	bl	27cba <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   201ce:	4621      	mov	r1, r4
   201d0:	4650      	mov	r0, sl
   201d2:	f007 fd72 	bl	27cba <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
   201d6:	fa09 f00a 	lsl.w	r0, r9, sl
   201da:	f8c5 0520 	str.w	r0, [r5, #1312]	; 0x520
}
   201de:	e7b6      	b.n	2014e <nrfx_gpiote_irq_handler+0x4a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   201e0:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   201e2:	bf0c      	ite	eq
   201e4:	2103      	moveq	r1, #3
   201e6:	2102      	movne	r1, #2
   201e8:	4650      	mov	r0, sl
   201ea:	f007 fd66 	bl	27cba <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   201ee:	2c03      	cmp	r4, #3
   201f0:	d003      	beq.n	201fa <nrfx_gpiote_irq_handler+0xf6>
   201f2:	2a02      	cmp	r2, #2
   201f4:	d106      	bne.n	20204 <nrfx_gpiote_irq_handler+0x100>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   201f6:	2c01      	cmp	r4, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   201f8:	d1ed      	bne.n	201d6 <nrfx_gpiote_irq_handler+0xd2>
            call_handler(pin, trigger);
   201fa:	4659      	mov	r1, fp
   201fc:	4650      	mov	r0, sl
   201fe:	f7ff fd0d 	bl	1fc1c <call_handler>
   20202:	e7e8      	b.n	201d6 <nrfx_gpiote_irq_handler+0xd2>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   20204:	2a03      	cmp	r2, #3
   20206:	d1e6      	bne.n	201d6 <nrfx_gpiote_irq_handler+0xd2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   20208:	2c02      	cmp	r4, #2
   2020a:	e7f5      	b.n	201f8 <nrfx_gpiote_irq_handler+0xf4>
        uint32_t ch = NRF_CTZ(mask);
   2020c:	fa96 f3a6 	rbit	r3, r6
   20210:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   20214:	fa04 f203 	lsl.w	r2, r4, r3
   20218:	009b      	lsls	r3, r3, #2
   2021a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2021e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   20222:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   20226:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   2022a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   2022e:	f3c0 2004 	ubfx	r0, r0, #8, #5
   20232:	f3c1 4101 	ubfx	r1, r1, #16, #2
   20236:	f7ff fcf1 	bl	1fc1c <call_handler>
    while (mask)
   2023a:	2e00      	cmp	r6, #0
   2023c:	d1e6      	bne.n	2020c <nrfx_gpiote_irq_handler+0x108>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   2023e:	b005      	add	sp, #20
   20240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20244:	40006100 	.word	0x40006100
   20248:	40006000 	.word	0x40006000
   2024c:	40006120 	.word	0x40006120
   20250:	4000617c 	.word	0x4000617c
   20254:	20000728 	.word	0x20000728

00020258 <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   20258:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2025c:	691a      	ldr	r2, [r3, #16]
}

static bool is_page_aligned_check(uint32_t addr)
{
    /* If the modulo operation returns '0', then the address is aligned. */
    return !(addr % flash_page_size_get());
   2025e:	fbb0 f3f2 	udiv	r3, r0, r2
   20262:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   20266:	b973      	cbnz	r3, 20286 <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   20268:	4b08      	ldr	r3, [pc, #32]	; (2028c <nrfx_nvmc_page_erase+0x34>)
   2026a:	2202      	movs	r2, #2
   2026c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   20270:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   20274:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   20278:	07d2      	lsls	r2, r2, #31
   2027a:	d5fb      	bpl.n	20274 <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
   2027c:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   2027e:	4804      	ldr	r0, [pc, #16]	; (20290 <nrfx_nvmc_page_erase+0x38>)
   20280:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   20284:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   20286:	4803      	ldr	r0, [pc, #12]	; (20294 <nrfx_nvmc_page_erase+0x3c>)
}
   20288:	4770      	bx	lr
   2028a:	bf00      	nop
   2028c:	4001e000 	.word	0x4001e000
   20290:	0bad0000 	.word	0x0bad0000
   20294:	0bad000a 	.word	0x0bad000a

00020298 <nrfx_nvmc_word_write>:
   20298:	4b07      	ldr	r3, [pc, #28]	; (202b8 <nrfx_nvmc_word_write+0x20>)
   2029a:	2201      	movs	r2, #1
   2029c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   202a0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   202a4:	07d2      	lsls	r2, r2, #31
   202a6:	d5fb      	bpl.n	202a0 <nrfx_nvmc_word_write+0x8>
    *(volatile uint32_t *)addr = value;
   202a8:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   202aa:	f3bf 8f5f 	dmb	sy
    p_reg->CONFIG = (uint32_t)mode;
   202ae:	2200      	movs	r2, #0
   202b0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nvmc_write_mode_set();

    nvmc_word_write(addr, value);

    nvmc_readonly_mode_set();
}
   202b4:	4770      	bx	lr
   202b6:	bf00      	nop
   202b8:	4001e000 	.word	0x4001e000

000202bc <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   202bc:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   202be:	4801      	ldr	r0, [pc, #4]	; (202c4 <nrfx_ppi_channel_alloc+0x8>)
   202c0:	f7ff bc66 	b.w	1fb90 <nrfx_flag32_alloc>
   202c4:	20000784 	.word	0x20000784

000202c8 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   202c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    *p_pin = pin_number & 0x1F;
   202cc:	f000 001f 	and.w	r0, r0, #31
   202d0:	f001 061f 	and.w	r6, r1, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   202d4:	2501      	movs	r5, #1
    p_reg->OUTSET = set_mask;
   202d6:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   202da:	fa05 f800 	lsl.w	r8, r5, r0
    reg->PIN_CNF[pin_number] = cnf;
   202de:	f506 72e0 	add.w	r2, r6, #448	; 0x1c0
   202e2:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   202e6:	f240 630d 	movw	r3, #1549	; 0x60d
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   202ea:	40b5      	lsls	r5, r6
    p_reg->OUTSET = set_mask;
   202ec:	f8c4 8508 	str.w	r8, [r4, #1288]	; 0x508
   202f0:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   202f4:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
   202f8:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
    nrf_gpio_pin_set(scl_pin);
    nrf_gpio_pin_set(sda_pin);

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   202fc:	2004      	movs	r0, #4
   202fe:	f007 fcda 	bl	27cb6 <nrfx_busy_wait>
   20302:	2709      	movs	r7, #9
    return p_reg->IN;
   20304:	f8d4 3510 	ldr.w	r3, [r4, #1296]	; 0x510

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
   20308:	421d      	tst	r5, r3
   2030a:	d015      	beq.n	20338 <nrfx_twi_twim_bus_recover+0x70>
    p_reg->OUTCLR = clr_mask;
   2030c:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   20310:	2004      	movs	r0, #4
   20312:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
   20316:	f007 fcce 	bl	27cb6 <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
   2031a:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    nrf_gpio_pin_set(sda_pin);
    NRFX_DELAY_US(4);
   2031e:	2004      	movs	r0, #4
   20320:	f007 fcc9 	bl	27cb6 <nrfx_busy_wait>
    return p_reg->IN;
   20324:	f8d4 1510 	ldr.w	r1, [r4, #1296]	; 0x510

    if (nrf_gpio_pin_read(sda_pin))
   20328:	480b      	ldr	r0, [pc, #44]	; (20358 <nrfx_twi_twim_bus_recover+0x90>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   2032a:	fa21 f606 	lsr.w	r6, r1, r6
   2032e:	f006 0601 	and.w	r6, r6, #1
   20332:	1b80      	subs	r0, r0, r6
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   20334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            NRFX_DELAY_US(4);
   20338:	2004      	movs	r0, #4
    p_reg->OUTCLR = clr_mask;
   2033a:	f8c4 850c 	str.w	r8, [r4, #1292]	; 0x50c
   2033e:	f007 fcba 	bl	27cb6 <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
   20342:	3f01      	subs	r7, #1
   20344:	f8c4 8508 	str.w	r8, [r4, #1288]	; 0x508
            NRFX_DELAY_US(4);
   20348:	2004      	movs	r0, #4
   2034a:	f007 fcb4 	bl	27cb6 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   2034e:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
   20352:	d1d7      	bne.n	20304 <nrfx_twi_twim_bus_recover+0x3c>
   20354:	e7da      	b.n	2030c <nrfx_twi_twim_bus_recover+0x44>
   20356:	bf00      	nop
   20358:	0bad0001 	.word	0x0bad0001

0002035c <twim_irq_handler>:
{
    return nrf_twim_event_address_get(p_instance->p_twim, NRF_TWIM_EVENT_STOPPED);
}

static void twim_irq_handler(NRF_TWIM_Type * p_twim, twim_control_block_t * p_cb)
{
   2035c:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2035e:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
   20362:	b087      	sub	sp, #28
   20364:	4604      	mov	r4, r0
   20366:	460d      	mov	r5, r1
    }
#endif

    NRFX_ASSERT(p_cb->handler);

    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   20368:	b1f3      	cbz	r3, 203a8 <twim_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2036a:	2300      	movs	r3, #0
   2036c:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   20370:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20374:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    {
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_ERROR);
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_ERROR));
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   20378:	b9b3      	cbnz	r3, 203a8 <twim_irq_handler+0x4c>
        {
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
   2037a:	688b      	ldr	r3, [r1, #8]
    p_reg->INTENCLR = mask;
   2037c:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   20380:	2302      	movs	r3, #2
   20382:	608b      	str	r3, [r1, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   20384:	688b      	ldr	r3, [r1, #8]
    p_reg->INTENSET = mask;
   20386:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2038a:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160

            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
   2038e:	b11b      	cbz	r3, 20398 <twim_irq_handler+0x3c>
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE uint32_t nrf_twim_shorts_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->SHORTS;
   20390:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   20394:	059f      	lsls	r7, r3, #22
   20396:	d402      	bmi.n	2039e <twim_irq_handler+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20398:	2301      	movs	r3, #1
   2039a:	6223      	str	r3, [r4, #32]
   2039c:	6163      	str	r3, [r4, #20]
            {
                nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_RESUME);
                nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_STOP);
            }

            p_cb->error = true;
   2039e:	2301      	movs	r3, #1
   203a0:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e

    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    {
        p_cb->handler(&event, p_cb->p_context);
    }
}
   203a4:	b007      	add	sp, #28
   203a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   203a8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   203ac:	2b00      	cmp	r3, #0
   203ae:	d044      	beq.n	2043a <twim_irq_handler+0xde>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   203b0:	2300      	movs	r3, #0
   203b2:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   203b6:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
   203ba:	6a2b      	ldr	r3, [r5, #32]
   203bc:	065e      	lsls	r6, r3, #25
   203be:	d40a      	bmi.n	203d6 <twim_irq_handler+0x7a>
   203c0:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   203c4:	b93b      	cbnz	r3, 203d6 <twim_irq_handler+0x7a>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
   203c6:	4629      	mov	r1, r5
   203c8:	4620      	mov	r0, r4
   203ca:	f007 fc92 	bl	27cf2 <xfer_completeness_check>
   203ce:	f080 0001 	eor.w	r0, r0, #1
   203d2:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   203d6:	6a2b      	ldr	r3, [r5, #32]
   203d8:	f013 0c04 	ands.w	ip, r3, #4
   203dc:	d13e      	bne.n	2045c <twim_irq_handler+0x100>
            event.xfer_desc = p_cb->xfer_desc;
   203de:	f105 070c 	add.w	r7, r5, #12
   203e2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   203e4:	ae01      	add	r6, sp, #4
   203e6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   203e8:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
   203ec:	683b      	ldr	r3, [r7, #0]
   203ee:	f8c4 c160 	str.w	ip, [r4, #352]	; 0x160
   203f2:	6033      	str	r3, [r6, #0]
   203f4:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   203f8:	f8c4 c15c 	str.w	ip, [r4, #348]	; 0x15c
   203fc:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
   20400:	f1be 0f00 	cmp.w	lr, #0
   20404:	d002      	beq.n	2040c <twim_irq_handler+0xb0>
   20406:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   2040a:	b33b      	cbz	r3, 2045c <twim_irq_handler+0x100>
    p_reg->SHORTS = mask;
   2040c:	2300      	movs	r3, #0
   2040e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
                p_cb->int_mask = 0;
   20412:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
   20414:	4b2e      	ldr	r3, [pc, #184]	; (204d0 <twim_irq_handler+0x174>)
   20416:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   2041a:	f344 3307 	sbfx	r3, r4, #12, #8
  if ((int32_t)(IRQn) >= 0)
   2041e:	2b00      	cmp	r3, #0
   20420:	ea4f 3214 	mov.w	r2, r4, lsr #12
   20424:	db1a      	blt.n	2045c <twim_irq_handler+0x100>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   20426:	f002 011f 	and.w	r1, r2, #31
   2042a:	095b      	lsrs	r3, r3, #5
   2042c:	2201      	movs	r2, #1
   2042e:	408a      	lsls	r2, r1
   20430:	3360      	adds	r3, #96	; 0x60
   20432:	4928      	ldr	r1, [pc, #160]	; (204d4 <twim_irq_handler+0x178>)
   20434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   20438:	e010      	b.n	2045c <twim_irq_handler+0x100>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2043a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   2043e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
   20442:	7b2b      	ldrb	r3, [r5, #12]
   20444:	bb23      	cbnz	r3, 20490 <twim_irq_handler+0x134>
            event.xfer_desc = p_cb->xfer_desc;
   20446:	f105 070c 	add.w	r7, r5, #12
   2044a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   2044c:	ae01      	add	r6, sp, #4
   2044e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   20450:	683b      	ldr	r3, [r7, #0]
   20452:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
   20454:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   20458:	2b00      	cmp	r3, #0
   2045a:	d0d8      	beq.n	2040e <twim_irq_handler+0xb2>
    uint32_t error_source = p_reg->ERRORSRC;
   2045c:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   20460:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   20464:	0798      	lsls	r0, r3, #30
   20466:	d525      	bpl.n	204b4 <twim_irq_handler+0x158>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
   20468:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
   2046a:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
   2046e:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   20472:	b90b      	cbnz	r3, 20478 <twim_irq_handler+0x11c>
        p_cb->busy = false;
   20474:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
   20478:	6a2b      	ldr	r3, [r5, #32]
   2047a:	075b      	lsls	r3, r3, #29
   2047c:	d503      	bpl.n	20486 <twim_irq_handler+0x12a>
   2047e:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   20482:	2b00      	cmp	r3, #0
   20484:	d08e      	beq.n	203a4 <twim_irq_handler+0x48>
        p_cb->handler(&event, p_cb->p_context);
   20486:	e9d5 3100 	ldrd	r3, r1, [r5]
   2048a:	4668      	mov	r0, sp
   2048c:	4798      	blx	r3
   2048e:	e789      	b.n	203a4 <twim_irq_handler+0x48>
    p_reg->SHORTS = mask;
   20490:	f44f 7300 	mov.w	r3, #512	; 0x200
   20494:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   20498:	f240 2302 	movw	r3, #514	; 0x202
   2049c:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
   2049e:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   204a2:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   204a6:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
   204a8:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   204ac:	2301      	movs	r3, #1
   204ae:	60a3      	str	r3, [r4, #8]
   204b0:	6223      	str	r3, [r4, #32]
            return;
   204b2:	e777      	b.n	203a4 <twim_irq_handler+0x48>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   204b4:	0759      	lsls	r1, r3, #29
   204b6:	d501      	bpl.n	204bc <twim_irq_handler+0x160>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
   204b8:	2302      	movs	r3, #2
   204ba:	e7d6      	b.n	2046a <twim_irq_handler+0x10e>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   204bc:	07da      	lsls	r2, r3, #31
   204be:	d501      	bpl.n	204c4 <twim_irq_handler+0x168>
        event.type = NRFX_TWIM_EVT_OVERRUN;
   204c0:	2303      	movs	r3, #3
   204c2:	e7d2      	b.n	2046a <twim_irq_handler+0x10e>
    else if (p_cb->error)
   204c4:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   204c8:	2b00      	cmp	r3, #0
   204ca:	d0ce      	beq.n	2046a <twim_irq_handler+0x10e>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
   204cc:	2304      	movs	r3, #4
   204ce:	e7cc      	b.n	2046a <twim_irq_handler+0x10e>
   204d0:	019c0202 	.word	0x019c0202
   204d4:	e000e100 	.word	0xe000e100

000204d8 <nrfx_twim_init>:
{
   204d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   204da:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   204dc:	4d23      	ldr	r5, [pc, #140]	; (2056c <nrfx_twim_init+0x94>)
   204de:	f04f 0c34 	mov.w	ip, #52	; 0x34
   204e2:	fb0c fc06 	mul.w	ip, ip, r6
   204e6:	eb05 040c 	add.w	r4, r5, ip
   204ea:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
   204ee:	2f00      	cmp	r7, #0
   204f0:	d13a      	bne.n	20568 <nrfx_twim_init+0x90>
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   204f2:	6800      	ldr	r0, [r0, #0]
    p_cb->p_context       = p_context;
   204f4:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   204f6:	7b4b      	ldrb	r3, [r1, #13]
   204f8:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   204fc:	7b8b      	ldrb	r3, [r1, #14]
    p_cb->int_mask        = 0;
   204fe:	60a7      	str	r7, [r4, #8]
    p_cb->repeated        = false;
   20500:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    p_cb->busy            = false;
   20504:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   20508:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    p_cb->handler         = event_handler;
   2050c:	f845 200c 	str.w	r2, [r5, ip]
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   20510:	7bcc      	ldrb	r4, [r1, #15]
   20512:	b1b3      	cbz	r3, 20542 <nrfx_twim_init+0x6a>
   20514:	b92c      	cbnz	r4, 20522 <nrfx_twim_init+0x4a>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
   20516:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSEL.SCL = scl_pin;
   2051a:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   2051e:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
   20522:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
   20524:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    if (p_cb->handler)
   20528:	b11a      	cbz	r2, 20532 <nrfx_twim_init+0x5a>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
   2052a:	f340 3007 	sbfx	r0, r0, #12, #8
   2052e:	f7f3 fa59 	bl	139e4 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   20532:	2334      	movs	r3, #52	; 0x34
   20534:	fb03 5506 	mla	r5, r3, r6, r5
    return err_code;
   20538:	480d      	ldr	r0, [pc, #52]	; (20570 <nrfx_twim_init+0x98>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2053a:	2301      	movs	r3, #1
   2053c:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   20540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *p_pin = pin_number & 0x1F;
   20542:	680b      	ldr	r3, [r1, #0]
   20544:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   20548:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
   2054c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   20550:	f240 6c0c 	movw	ip, #1548	; 0x60c
   20554:	f847 c023 	str.w	ip, [r7, r3, lsl #2]
    *p_pin = pin_number & 0x1F;
   20558:	684b      	ldr	r3, [r1, #4]
   2055a:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   2055e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   20562:	f847 c023 	str.w	ip, [r7, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   20566:	e7d5      	b.n	20514 <nrfx_twim_init+0x3c>
        return err_code;
   20568:	4802      	ldr	r0, [pc, #8]	; (20574 <nrfx_twim_init+0x9c>)
   2056a:	e7e9      	b.n	20540 <nrfx_twim_init+0x68>
   2056c:	200026c0 	.word	0x200026c0
   20570:	0bad0000 	.word	0x0bad0000
   20574:	0bad0005 	.word	0x0bad0005

00020578 <nrfx_twim_enable>:
    nrf_twim_enable(p_instance->p_twim);
   20578:	6802      	ldr	r2, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2057a:	7903      	ldrb	r3, [r0, #4]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   2057c:	2106      	movs	r1, #6
   2057e:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   20582:	4a04      	ldr	r2, [pc, #16]	; (20594 <nrfx_twim_enable+0x1c>)
   20584:	2134      	movs	r1, #52	; 0x34
   20586:	fb01 2303 	mla	r3, r1, r3, r2
   2058a:	2202      	movs	r2, #2
   2058c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
   20590:	4770      	bx	lr
   20592:	bf00      	nop
   20594:	200026c0 	.word	0x200026c0

00020598 <nrfx_twim_disable>:
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   20598:	7903      	ldrb	r3, [r0, #4]
    p_cb->int_mask = 0;
   2059a:	490c      	ldr	r1, [pc, #48]	; (205cc <nrfx_twim_disable+0x34>)
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   2059c:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
   2059e:	2034      	movs	r0, #52	; 0x34
   205a0:	fb00 1303 	mla	r3, r0, r3, r1
   205a4:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
   205a6:	480a      	ldr	r0, [pc, #40]	; (205d0 <nrfx_twim_disable+0x38>)
   205a8:	6099      	str	r1, [r3, #8]
   205aa:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   205ae:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
   205b2:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
   205b6:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   205ba:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   205be:	2201      	movs	r2, #1
   205c0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    p_cb->busy = false;
   205c4:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
}
   205c8:	4770      	bx	lr
   205ca:	bf00      	nop
   205cc:	200026c0 	.word	0x200026c0
   205d0:	019c0202 	.word	0x019c0202

000205d4 <nrfx_twim_xfer>:
{
   205d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p_cb->error = false;
   205d8:	4fb4      	ldr	r7, [pc, #720]	; (208ac <nrfx_twim_xfer+0x2d8>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   205da:	f890 e004 	ldrb.w	lr, [r0, #4]
    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
   205de:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
   205e0:	2334      	movs	r3, #52	; 0x34
   205e2:	fb03 730e 	mla	r3, r3, lr, r7
{
   205e6:	4694      	mov	ip, r2
    p_cb->error = false;
   205e8:	2200      	movs	r2, #0
   205ea:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   205ee:	684b      	ldr	r3, [r1, #4]
{
   205f0:	460d      	mov	r5, r1
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   205f2:	b14b      	cbz	r3, 20608 <nrfx_twim_xfer+0x34>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   205f4:	68cb      	ldr	r3, [r1, #12]
   205f6:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   205fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   205fe:	d003      	beq.n	20608 <nrfx_twim_xfer+0x34>
        return err_code;
   20600:	4eab      	ldr	r6, [pc, #684]	; (208b0 <nrfx_twim_xfer+0x2dc>)
}
   20602:	4630      	mov	r0, r6
   20604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
   20608:	2634      	movs	r6, #52	; 0x34
    p_reg->INTENCLR = mask;
   2060a:	4baa      	ldr	r3, [pc, #680]	; (208b4 <nrfx_twim_xfer+0x2e0>)
   2060c:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
   20610:	fb06 760e 	mla	r6, r6, lr, r7
   20614:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
   20618:	f003 0aff 	and.w	sl, r3, #255	; 0xff
   2061c:	b123      	cbz	r3, 20628 <nrfx_twim_xfer+0x54>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   2061e:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
   20620:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        return err_code;
   20624:	4ea4      	ldr	r6, [pc, #656]	; (208b8 <nrfx_twim_xfer+0x2e4>)
   20626:	e7ec      	b.n	20602 <nrfx_twim_xfer+0x2e>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
   20628:	f01c 0f14 	tst.w	ip, #20
   2062c:	bf0c      	ite	eq
   2062e:	2301      	moveq	r3, #1
   20630:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
   20632:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
   20636:	46a9      	mov	r9, r5
   20638:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   2063c:	f106 080c 	add.w	r8, r6, #12
   20640:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
   20644:	f8d9 3000 	ldr.w	r3, [r9]
   20648:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
   2064c:	f3cc 1300 	ubfx	r3, ip, #4, #1
   20650:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags = flags;
   20654:	f8c6 c020 	str.w	ip, [r6, #32]
    p_reg->ADDRESS = address;
   20658:	786b      	ldrb	r3, [r5, #1]
   2065a:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2065e:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
   20662:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   20666:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
   2066a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   2066e:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
   20672:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   20676:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
   2067a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
   2067e:	f01c 0301 	ands.w	r3, ip, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
   20682:	bf18      	it	ne
   20684:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
   20686:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
   2068a:	f01c 0302 	ands.w	r3, ip, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
   2068e:	bf18      	it	ne
   20690:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
   20692:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
   20696:	782b      	ldrb	r3, [r5, #0]
   20698:	2b03      	cmp	r3, #3
   2069a:	f200 80b5 	bhi.w	20808 <nrfx_twim_xfer+0x234>
   2069e:	e8df f003 	tbb	[pc, r3]
   206a2:	a084      	.short	0xa084
   206a4:	0269      	.short	0x0269
   206a6:	692a      	ldr	r2, [r5, #16]
   206a8:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   206ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   206b0:	d1a6      	bne.n	20600 <nrfx_twim_xfer+0x2c>
    p_reg->SHORTS = mask;
   206b2:	f44f 7380 	mov.w	r3, #256	; 0x100
   206b6:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   206ba:	68e9      	ldr	r1, [r5, #12]
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   206bc:	686b      	ldr	r3, [r5, #4]
   206be:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   206c2:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   206c6:	2300      	movs	r3, #0
   206c8:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   206cc:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   206d0:	2101      	movs	r1, #1
   206d2:	6221      	str	r1, [r4, #32]
   206d4:	60a1      	str	r1, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   206d6:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
   206da:	2900      	cmp	r1, #0
   206dc:	d0fb      	beq.n	206d6 <nrfx_twim_xfer+0x102>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   206de:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   206e2:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   206e6:	68ab      	ldr	r3, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   206e8:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   206ec:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   206f0:	2334      	movs	r3, #52	; 0x34
   206f2:	fb03 730e 	mla	r3, r3, lr, r7
   206f6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   206fa:	609a      	str	r2, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   206fc:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   206fe:	4e6f      	ldr	r6, [pc, #444]	; (208bc <nrfx_twim_xfer+0x2e8>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   20700:	f01c 0f08 	tst.w	ip, #8
   20704:	d107      	bne.n	20716 <nrfx_twim_xfer+0x142>
   20706:	782a      	ldrb	r2, [r5, #0]
   20708:	2a03      	cmp	r2, #3
   2070a:	d004      	beq.n	20716 <nrfx_twim_xfer+0x142>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2070c:	2201      	movs	r2, #1
   2070e:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
   20710:	686b      	ldr	r3, [r5, #4]
   20712:	b903      	cbnz	r3, 20716 <nrfx_twim_xfer+0x142>
   20714:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
   20716:	2334      	movs	r3, #52	; 0x34
   20718:	fb03 f30e 	mul.w	r3, r3, lr
   2071c:	18fa      	adds	r2, r7, r3
   2071e:	58fb      	ldr	r3, [r7, r3]
   20720:	2b00      	cmp	r3, #0
   20722:	d174      	bne.n	2080e <nrfx_twim_xfer+0x23a>
                transmission_finished = true;
   20724:	2501      	movs	r5, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20726:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   2072a:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   2072e:	2900      	cmp	r1, #0
   20730:	f040 8087 	bne.w	20842 <nrfx_twim_xfer+0x26e>
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
   20734:	3a00      	subs	r2, #0
   20736:	bf18      	it	ne
   20738:	2201      	movne	r2, #1
   2073a:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   2073e:	2900      	cmp	r1, #0
   20740:	f000 8085 	beq.w	2084e <nrfx_twim_xfer+0x27a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20744:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   20748:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2074c:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    return p_reg->SHORTS;
   20750:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
   20754:	b110      	cbz	r0, 2075c <nrfx_twim_xfer+0x188>
   20756:	f411 7f00 	tst.w	r1, #512	; 0x200
   2075a:	d104      	bne.n	20766 <nrfx_twim_xfer+0x192>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2075c:	6225      	str	r5, [r4, #32]
   2075e:	6165      	str	r5, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   20760:	2800      	cmp	r0, #0
   20762:	d0e0      	beq.n	20726 <nrfx_twim_xfer+0x152>
                    transmission_finished = false;
   20764:	2200      	movs	r2, #0
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   20766:	05c9      	lsls	r1, r1, #23
   20768:	d571      	bpl.n	2084e <nrfx_twim_xfer+0x27a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2076a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   2076e:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
        } while (!transmission_finished);
   20772:	e7d8      	b.n	20726 <nrfx_twim_xfer+0x152>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   20774:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   20776:	68ea      	ldr	r2, [r5, #12]
   20778:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2077c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   20780:	692b      	ldr	r3, [r5, #16]
   20782:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   20786:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   2078a:	f47f af39 	bne.w	20600 <nrfx_twim_xfer+0x2c>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   2078e:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   20790:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
   20794:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
   20798:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   2079c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   207a0:	2334      	movs	r3, #52	; 0x34
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   207a2:	fb03 730e 	mla	r3, r3, lr, r7
   207a6:	2202      	movs	r2, #2
   207a8:	e012      	b.n	207d0 <nrfx_twim_xfer+0x1fc>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   207aa:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   207ac:	68ea      	ldr	r2, [r5, #12]
   207ae:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
   207b2:	f01c 0f20 	tst.w	ip, #32
    p_reg->TXD.MAXCNT = length;
   207b6:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   207ba:	f04f 0334 	mov.w	r3, #52	; 0x34
   207be:	d00b      	beq.n	207d8 <nrfx_twim_xfer+0x204>
    p_reg->SHORTS = mask;
   207c0:	f44f 7280 	mov.w	r2, #256	; 0x100
   207c4:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   207c8:	fb03 730e 	mla	r3, r3, lr, r7
   207cc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   207d0:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   207d2:	2301      	movs	r3, #1
   207d4:	6223      	str	r3, [r4, #32]
   207d6:	e791      	b.n	206fc <nrfx_twim_xfer+0x128>
    p_reg->SHORTS = mask;
   207d8:	f44f 7200 	mov.w	r2, #512	; 0x200
   207dc:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
   207e0:	e7df      	b.n	207a2 <nrfx_twim_xfer+0x1ce>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   207e2:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   207e4:	68ea      	ldr	r2, [r5, #12]
   207e6:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   207ea:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   207ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   207f2:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   207f6:	2334      	movs	r3, #52	; 0x34
   207f8:	fb03 730e 	mla	r3, r3, lr, r7
   207fc:	2202      	movs	r2, #2
   207fe:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20800:	2301      	movs	r3, #1
   20802:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
   20804:	2300      	movs	r3, #0
   20806:	e77a      	b.n	206fe <nrfx_twim_xfer+0x12a>
    switch (p_xfer_desc->type)
   20808:	4e2d      	ldr	r6, [pc, #180]	; (208c0 <nrfx_twim_xfer+0x2ec>)
   2080a:	2308      	movs	r3, #8
   2080c:	e778      	b.n	20700 <nrfx_twim_xfer+0x12c>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
   2080e:	f01c 0f04 	tst.w	ip, #4
            p_cb->int_mask = 0;
   20812:	bf1c      	itt	ne
   20814:	2300      	movne	r3, #0
   20816:	6093      	strne	r3, [r2, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
   20818:	f01c 0f40 	tst.w	ip, #64	; 0x40
   2081c:	d106      	bne.n	2082c <nrfx_twim_xfer+0x258>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
   2081e:	2334      	movs	r3, #52	; 0x34
   20820:	fb03 730e 	mla	r3, r3, lr, r7
   20824:	689a      	ldr	r2, [r3, #8]
   20826:	f042 0202 	orr.w	r2, r2, #2
   2082a:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
   2082c:	2334      	movs	r3, #52	; 0x34
   2082e:	fb03 770e 	mla	r7, r3, lr, r7
   20832:	68bb      	ldr	r3, [r7, #8]
   20834:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   20838:	60bb      	str	r3, [r7, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   2083a:	68bb      	ldr	r3, [r7, #8]
    p_reg->INTENSET = mask;
   2083c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   20840:	e6df      	b.n	20602 <nrfx_twim_xfer+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20842:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   20846:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
                transmission_finished = true;
   2084a:	2201      	movs	r2, #1
   2084c:	e775      	b.n	2073a <nrfx_twim_xfer+0x166>
        } while (!transmission_finished);
   2084e:	2a00      	cmp	r2, #0
   20850:	f43f af69 	beq.w	20726 <nrfx_twim_xfer+0x152>
        p_cb->busy = false;
   20854:	2134      	movs	r1, #52	; 0x34
    uint32_t error_source = p_reg->ERRORSRC;
   20856:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   2085a:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
   2085e:	fb01 720e 	mla	r2, r1, lr, r7
   20862:	2000      	movs	r0, #0
   20864:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
   20868:	b18b      	cbz	r3, 2088e <nrfx_twim_xfer+0x2ba>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   2086a:	4a16      	ldr	r2, [pc, #88]	; (208c4 <nrfx_twim_xfer+0x2f0>)
   2086c:	4e16      	ldr	r6, [pc, #88]	; (208c8 <nrfx_twim_xfer+0x2f4>)
   2086e:	f013 0f01 	tst.w	r3, #1
   20872:	bf18      	it	ne
   20874:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   20876:	f013 0f02 	tst.w	r3, #2
   2087a:	f102 0201 	add.w	r2, r2, #1
   2087e:	bf18      	it	ne
   20880:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   20882:	f013 0f04 	tst.w	r3, #4
   20886:	4b11      	ldr	r3, [pc, #68]	; (208cc <nrfx_twim_xfer+0x2f8>)
   20888:	bf18      	it	ne
   2088a:	461e      	movne	r6, r3
   2088c:	e6b9      	b.n	20602 <nrfx_twim_xfer+0x2e>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
   2088e:	f01c 0f40 	tst.w	ip, #64	; 0x40
   20892:	f47f aeb6 	bne.w	20602 <nrfx_twim_xfer+0x2e>
                !xfer_completeness_check(p_twim, p_cb))
   20896:	fb0e 7101 	mla	r1, lr, r1, r7
   2089a:	4620      	mov	r0, r4
   2089c:	f007 fa29 	bl	27cf2 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
   208a0:	4b09      	ldr	r3, [pc, #36]	; (208c8 <nrfx_twim_xfer+0x2f4>)
   208a2:	2800      	cmp	r0, #0
   208a4:	bf08      	it	eq
   208a6:	461e      	moveq	r6, r3
   208a8:	e6ab      	b.n	20602 <nrfx_twim_xfer+0x2e>
   208aa:	bf00      	nop
   208ac:	200026c0 	.word	0x200026c0
   208b0:	0bad000a 	.word	0x0bad000a
   208b4:	019c0202 	.word	0x019c0202
   208b8:	0bad000b 	.word	0x0bad000b
   208bc:	0bad0000 	.word	0x0bad0000
   208c0:	0bad0004 	.word	0x0bad0004
   208c4:	0bae0000 	.word	0x0bae0000
   208c8:	0bad0001 	.word	0x0bad0001
   208cc:	0bae0002 	.word	0x0bae0002

000208d0 <nrfx_twim_0_irq_handler>:

#if NRFX_CHECK(NRFX_TWIM0_ENABLED)
void nrfx_twim_0_irq_handler(void)
{
    twim_irq_handler(NRF_TWIM0, &m_cb[NRFX_TWIM0_INST_IDX]);
   208d0:	4901      	ldr	r1, [pc, #4]	; (208d8 <nrfx_twim_0_irq_handler+0x8>)
   208d2:	4802      	ldr	r0, [pc, #8]	; (208dc <nrfx_twim_0_irq_handler+0xc>)
   208d4:	f7ff bd42 	b.w	2035c <twim_irq_handler>
   208d8:	200026c0 	.word	0x200026c0
   208dc:	40003000 	.word	0x40003000

000208e0 <nrfx_twim_1_irq_handler>:
#endif

#if NRFX_CHECK(NRFX_TWIM1_ENABLED)
void nrfx_twim_1_irq_handler(void)
{
    twim_irq_handler(NRF_TWIM1, &m_cb[NRFX_TWIM1_INST_IDX]);
   208e0:	4902      	ldr	r1, [pc, #8]	; (208ec <nrfx_twim_1_irq_handler+0xc>)
   208e2:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
   208e6:	f7ff bd39 	b.w	2035c <twim_irq_handler>
   208ea:	bf00      	nop
   208ec:	200026f4 	.word	0x200026f4

000208f0 <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   208f0:	4b04      	ldr	r3, [pc, #16]	; (20904 <nrf52_errata_108+0x14>)
   208f2:	6818      	ldr	r0, [r3, #0]
   208f4:	1c42      	adds	r2, r0, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   208f6:	bf04      	itt	eq
   208f8:	4b03      	ldreq	r3, [pc, #12]	; (20908 <nrf52_errata_108+0x18>)
   208fa:	7818      	ldrbeq	r0, [r3, #0]
                }
            }
        #endif
        return false;
    #endif
}
   208fc:	1f83      	subs	r3, r0, #6
   208fe:	4258      	negs	r0, r3
   20900:	4158      	adcs	r0, r3
   20902:	4770      	bx	lr
   20904:	10000130 	.word	0x10000130
   20908:	f0000fe0 	.word	0xf0000fe0

0002090c <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   2090c:	4b07      	ldr	r3, [pc, #28]	; (2092c <nrf52_errata_16+0x20>)
   2090e:	781b      	ldrb	r3, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   20910:	2b06      	cmp	r3, #6
   20912:	d109      	bne.n	20928 <nrf52_errata_16+0x1c>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   20914:	4b06      	ldr	r3, [pc, #24]	; (20930 <nrf52_errata_16+0x24>)
   20916:	681b      	ldr	r3, [r3, #0]
   20918:	f3c3 1303 	ubfx	r3, r3, #4, #4
   2091c:	3b03      	subs	r3, #3
   2091e:	2b04      	cmp	r3, #4
   20920:	d802      	bhi.n	20928 <nrf52_errata_16+0x1c>
   20922:	4a04      	ldr	r2, [pc, #16]	; (20934 <nrf52_errata_16+0x28>)
   20924:	5cd0      	ldrb	r0, [r2, r3]
   20926:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   20928:	2000      	movs	r0, #0
    #endif
}
   2092a:	4770      	bx	lr
   2092c:	f0000fe0 	.word	0xf0000fe0
   20930:	f0000fe8 	.word	0xf0000fe8
   20934:	0002c7e8 	.word	0x0002c7e8

00020938 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   20938:	4a02      	ldr	r2, [pc, #8]	; (20944 <nvmc_wait+0xc>)
   2093a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   2093e:	2b00      	cmp	r3, #0
   20940:	d0fb      	beq.n	2093a <nvmc_wait+0x2>
}
   20942:	4770      	bx	lr
   20944:	4001e000 	.word	0x4001e000

00020948 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   20948:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
   2094a:	f7ff ffd1 	bl	208f0 <nrf52_errata_108>
   2094e:	b128      	cbz	r0, 2095c <SystemInit+0x14>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   20950:	4b81      	ldr	r3, [pc, #516]	; (20b58 <SystemInit+0x210>)
   20952:	4a82      	ldr	r2, [pc, #520]	; (20b5c <SystemInit+0x214>)
   20954:	681b      	ldr	r3, [r3, #0]
   20956:	f3c3 2304 	ubfx	r3, r3, #8, #5
   2095a:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
   2095c:	f7ff ffd6 	bl	2090c <nrf52_errata_16>
   20960:	b110      	cbz	r0, 20968 <SystemInit+0x20>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   20962:	4b7f      	ldr	r3, [pc, #508]	; (20b60 <SystemInit+0x218>)
   20964:	4a7f      	ldr	r2, [pc, #508]	; (20b64 <SystemInit+0x21c>)
   20966:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
   20968:	f7ff ffc2 	bl	208f0 <nrf52_errata_108>
   2096c:	b128      	cbz	r0, 2097a <SystemInit+0x32>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   2096e:	4b7e      	ldr	r3, [pc, #504]	; (20b68 <SystemInit+0x220>)
   20970:	4a7e      	ldr	r2, [pc, #504]	; (20b6c <SystemInit+0x224>)
   20972:	681b      	ldr	r3, [r3, #0]
   20974:	f3c3 3342 	ubfx	r3, r3, #13, #3
   20978:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
   2097a:	f7ff ffc7 	bl	2090c <nrf52_errata_16>
   2097e:	b120      	cbz	r0, 2098a <SystemInit+0x42>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   20980:	4a7b      	ldr	r2, [pc, #492]	; (20b70 <SystemInit+0x228>)
   20982:	68d3      	ldr	r3, [r2, #12]
   20984:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   20988:	60d3      	str	r3, [r2, #12]
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   2098a:	f7ff ffb1 	bl	208f0 <nrf52_errata_108>
   2098e:	b140      	cbz	r0, 209a2 <SystemInit+0x5a>
            NRF_CLOCK->EVENTS_DONE = 0;
   20990:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20994:	2200      	movs	r2, #0
   20996:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   2099a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   2099e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
   209a2:	f7ff ffb3 	bl	2090c <nrf52_errata_16>
   209a6:	b110      	cbz	r0, 209ae <SystemInit+0x66>
            *(volatile uint32_t *)0x400005A0 = 0x3;
   209a8:	4b72      	ldr	r3, [pc, #456]	; (20b74 <SystemInit+0x22c>)
   209aa:	2203      	movs	r2, #3
   209ac:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
   209ae:	f7ff ffad 	bl	2090c <nrf52_errata_16>
   209b2:	b140      	cbz	r0, 209c6 <SystemInit+0x7e>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
   209b4:	4b70      	ldr	r3, [pc, #448]	; (20b78 <SystemInit+0x230>)
   209b6:	2205      	movs	r2, #5
   209b8:	601a      	str	r2, [r3, #0]
            *(volatile uint32_t *)0x40005688 = 0x00000001;
   209ba:	2201      	movs	r2, #1
   209bc:	679a      	str	r2, [r3, #120]	; 0x78
            *(volatile uint32_t *)0x40005618 = 0x00000000;
   209be:	2200      	movs	r2, #0
   209c0:	609a      	str	r2, [r3, #8]
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
   209c2:	223f      	movs	r2, #63	; 0x3f
   209c4:	605a      	str	r2, [r3, #4]
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   209c6:	4b6d      	ldr	r3, [pc, #436]	; (20b7c <SystemInit+0x234>)
   209c8:	681a      	ldr	r2, [r3, #0]
   209ca:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   209cc:	bf0b      	itete	eq
   209ce:	4b6c      	ldreq	r3, [pc, #432]	; (20b80 <SystemInit+0x238>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   209d0:	4b6c      	ldrne	r3, [pc, #432]	; (20b84 <SystemInit+0x23c>)
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   209d2:	781a      	ldrbeq	r2, [r3, #0]
                var2 = *(uint32_t *)0x10000134ul;
   209d4:	681b      	ldrne	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   209d6:	bf02      	ittt	eq
   209d8:	3308      	addeq	r3, #8
   209da:	681b      	ldreq	r3, [r3, #0]
   209dc:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   209e0:	2a06      	cmp	r2, #6
   209e2:	d14d      	bne.n	20a80 <SystemInit+0x138>
            {
                switch(var2)
   209e4:	3b03      	subs	r3, #3
   209e6:	2b04      	cmp	r3, #4
   209e8:	d803      	bhi.n	209f2 <SystemInit+0xaa>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   209ea:	4a67      	ldr	r2, [pc, #412]	; (20b88 <SystemInit+0x240>)
   209ec:	5cd3      	ldrb	r3, [r2, r3]
   209ee:	2b00      	cmp	r3, #0
   209f0:	d046      	beq.n	20a80 <SystemInit+0x138>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   209f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   209f6:	4b65      	ldr	r3, [pc, #404]	; (20b8c <SystemInit+0x244>)
   209f8:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   209fc:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   20a00:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   20a04:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   20a08:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   20a0c:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   20a10:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   20a14:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   20a18:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   20a1c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   20a20:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   20a24:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   20a28:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   20a2c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   20a30:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   20a34:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   20a38:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   20a3c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   20a40:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   20a44:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   20a48:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   20a4c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   20a50:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   20a54:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   20a58:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   20a5c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   20a60:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   20a64:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   20a68:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   20a6c:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   20a70:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   20a74:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   20a78:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   20a7c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
   20a80:	f7ff ff36 	bl	208f0 <nrf52_errata_108>
   20a84:	b128      	cbz	r0, 20a92 <SystemInit+0x14a>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   20a86:	4b42      	ldr	r3, [pc, #264]	; (20b90 <SystemInit+0x248>)
   20a88:	4a42      	ldr	r2, [pc, #264]	; (20b94 <SystemInit+0x24c>)
   20a8a:	681b      	ldr	r3, [r3, #0]
   20a8c:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   20a90:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   20a92:	f7ff ff2d 	bl	208f0 <nrf52_errata_108>
   20a96:	b148      	cbz	r0, 20aac <SystemInit+0x164>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   20a98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20a9c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   20aa0:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   20aa2:	bf44      	itt	mi
   20aa4:	f06f 0201 	mvnmi.w	r2, #1
   20aa8:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   20aac:	4b33      	ldr	r3, [pc, #204]	; (20b7c <SystemInit+0x234>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   20aae:	681b      	ldr	r3, [r3, #0]
   20ab0:	2b06      	cmp	r3, #6
   20ab2:	d120      	bne.n	20af6 <SystemInit+0x1ae>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   20ab4:	4b33      	ldr	r3, [pc, #204]	; (20b84 <SystemInit+0x23c>)
   20ab6:	681b      	ldr	r3, [r3, #0]
   20ab8:	3b03      	subs	r3, #3
   20aba:	2b04      	cmp	r3, #4
   20abc:	d802      	bhi.n	20ac4 <SystemInit+0x17c>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
   20abe:	4a36      	ldr	r2, [pc, #216]	; (20b98 <SystemInit+0x250>)
   20ac0:	5cd3      	ldrb	r3, [r2, r3]
   20ac2:	b143      	cbz	r3, 20ad6 <SystemInit+0x18e>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   20ac4:	4a35      	ldr	r2, [pc, #212]	; (20b9c <SystemInit+0x254>)
   20ac6:	6813      	ldr	r3, [r2, #0]
   20ac8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   20acc:	6013      	str	r3, [r2, #0]
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   20ace:	4b2b      	ldr	r3, [pc, #172]	; (20b7c <SystemInit+0x234>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   20ad0:	681b      	ldr	r3, [r3, #0]
   20ad2:	2b06      	cmp	r3, #6
   20ad4:	d10f      	bne.n	20af6 <SystemInit+0x1ae>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   20ad6:	4b2b      	ldr	r3, [pc, #172]	; (20b84 <SystemInit+0x23c>)
   20ad8:	681b      	ldr	r3, [r3, #0]
   20ada:	3b03      	subs	r3, #3
   20adc:	2b04      	cmp	r3, #4
   20ade:	d802      	bhi.n	20ae6 <SystemInit+0x19e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   20ae0:	4a2f      	ldr	r2, [pc, #188]	; (20ba0 <SystemInit+0x258>)
   20ae2:	5cd3      	ldrb	r3, [r2, r3]
   20ae4:	b13b      	cbz	r3, 20af6 <SystemInit+0x1ae>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   20ae6:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   20aea:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   20aee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20af2:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   20af6:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   20afa:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   20afe:	2a00      	cmp	r2, #0
   20b00:	db03      	blt.n	20b0a <SystemInit+0x1c2>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   20b02:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   20b06:	2b00      	cmp	r3, #0
   20b08:	da22      	bge.n	20b50 <SystemInit+0x208>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   20b0a:	4926      	ldr	r1, [pc, #152]	; (20ba4 <SystemInit+0x25c>)
   20b0c:	2301      	movs	r3, #1
   20b0e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   20b12:	f7ff ff11 	bl	20938 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   20b16:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   20b1a:	2415      	movs	r4, #21
   20b1c:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   20b20:	f7ff ff0a 	bl	20938 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   20b24:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   20b28:	f7ff ff06 	bl	20938 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   20b2c:	2300      	movs	r3, #0
   20b2e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   20b32:	f7ff ff01 	bl	20938 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   20b36:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   20b3a:	491b      	ldr	r1, [pc, #108]	; (20ba8 <SystemInit+0x260>)
   20b3c:	4b1b      	ldr	r3, [pc, #108]	; (20bac <SystemInit+0x264>)
   20b3e:	68ca      	ldr	r2, [r1, #12]
   20b40:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   20b44:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   20b46:	60cb      	str	r3, [r1, #12]
   20b48:	f3bf 8f4f 	dsb	sy
    __NOP();
   20b4c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   20b4e:	e7fd      	b.n	20b4c <SystemInit+0x204>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   20b50:	4b17      	ldr	r3, [pc, #92]	; (20bb0 <SystemInit+0x268>)
   20b52:	4a18      	ldr	r2, [pc, #96]	; (20bb4 <SystemInit+0x26c>)
   20b54:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   20b56:	bd10      	pop	{r4, pc}
   20b58:	10000324 	.word	0x10000324
   20b5c:	40013540 	.word	0x40013540
   20b60:	4007c074 	.word	0x4007c074
   20b64:	baadf00d 	.word	0xbaadf00d
   20b68:	10000244 	.word	0x10000244
   20b6c:	4000053c 	.word	0x4000053c
   20b70:	e000edf0 	.word	0xe000edf0
   20b74:	400005a0 	.word	0x400005a0
   20b78:	40005610 	.word	0x40005610
   20b7c:	10000130 	.word	0x10000130
   20b80:	f0000fe0 	.word	0xf0000fe0
   20b84:	10000134 	.word	0x10000134
   20b88:	0002c7d9 	.word	0x0002c7d9
   20b8c:	4000c000 	.word	0x4000c000
   20b90:	10000258 	.word	0x10000258
   20b94:	40000ee4 	.word	0x40000ee4
   20b98:	0002c7de 	.word	0x0002c7de
   20b9c:	4000173c 	.word	0x4000173c
   20ba0:	0002c7e3 	.word	0x0002c7e3
   20ba4:	4001e000 	.word	0x4001e000
   20ba8:	e000ed00 	.word	0xe000ed00
   20bac:	05fa0004 	.word	0x05fa0004
   20bb0:	20000788 	.word	0x20000788
   20bb4:	03d09000 	.word	0x03d09000

00020bb8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   20bb8:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   20bba:	4c11      	ldr	r4, [pc, #68]	; (20c00 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   20bbc:	4a11      	ldr	r2, [pc, #68]	; (20c04 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   20bbe:	4912      	ldr	r1, [pc, #72]	; (20c08 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   20bc0:	2303      	movs	r3, #3
   20bc2:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   20bc4:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   20bc6:	4b11      	ldr	r3, [pc, #68]	; (20c0c <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
   20bc8:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   20bca:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   20bcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
   20bd0:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   20bd2:	2300      	movs	r3, #0
   20bd4:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   20bd6:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   20bd8:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   20bda:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   20bdc:	4a0c      	ldr	r2, [pc, #48]	; (20c10 <_DoInit+0x58>)
   20bde:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   20be0:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   20be2:	2210      	movs	r2, #16
   20be4:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   20be6:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   20be8:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   20bea:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   20bec:	f004 f8f0 	bl	24dd0 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   20bf0:	4908      	ldr	r1, [pc, #32]	; (20c14 <_DoInit+0x5c>)
   20bf2:	4620      	mov	r0, r4
   20bf4:	f004 f8ec 	bl	24dd0 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   20bf8:	2320      	movs	r3, #32
   20bfa:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   20bfc:	bd10      	pop	{r4, pc}
   20bfe:	bf00      	nop
   20c00:	20002728 	.word	0x20002728
   20c04:	0002c7ed 	.word	0x0002c7ed
   20c08:	0002c7f6 	.word	0x0002c7f6
   20c0c:	20002fdc 	.word	0x20002fdc
   20c10:	20002fcc 	.word	0x20002fcc
   20c14:	0002c7fa 	.word	0x0002c7fa

00020c18 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   20c18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   20c1c:	4f23      	ldr	r7, [pc, #140]	; (20cac <SEGGER_RTT_WriteSkipNoLock+0x94>)
   20c1e:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   20c22:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   20c24:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   20c28:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
   20c2a:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   20c2c:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   20c2e:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   20c30:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   20c32:	d834      	bhi.n	20c9e <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   20c34:	f8d2 a020 	ldr.w	sl, [r2, #32]
   20c38:	ebaa 0905 	sub.w	r9, sl, r5
   20c3c:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   20c40:	4294      	cmp	r4, r2
   20c42:	d811      	bhi.n	20c68 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   20c44:	f04f 0918 	mov.w	r9, #24
   20c48:	fb06 9309 	mla	r3, r6, r9, r9
   20c4c:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
   20c4e:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   20c50:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   20c52:	4641      	mov	r1, r8
   20c54:	4428      	add	r0, r5
   20c56:	f004 f913 	bl	24e80 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   20c5a:	fb09 7606 	mla	r6, r9, r6, r7
   20c5e:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   20c60:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
   20c62:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   20c64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   20c68:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   20c6a:	429c      	cmp	r4, r3
   20c6c:	d81b      	bhi.n	20ca6 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   20c6e:	fb00 bb0b 	mla	fp, r0, fp, fp
   20c72:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   20c74:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   20c76:	f8db 0004 	ldr.w	r0, [fp, #4]
   20c7a:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   20c7c:	4428      	add	r0, r5
   20c7e:	f004 f8ff 	bl	24e80 <memcpy>
      if (NumBytes) {
   20c82:	ebb4 040a 	subs.w	r4, r4, sl
   20c86:	d006      	beq.n	20c96 <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy((void*)pDst, pData + Rem, NumBytes);
   20c88:	f8db 0004 	ldr.w	r0, [fp, #4]
   20c8c:	4622      	mov	r2, r4
   20c8e:	eb08 0109 	add.w	r1, r8, r9
   20c92:	f004 f8f5 	bl	24e80 <memcpy>
      pRing->WrOff = NumBytes;
   20c96:	2018      	movs	r0, #24
   20c98:	fb00 7606 	mla	r6, r0, r6, r7
   20c9c:	e7e0      	b.n	20c60 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
   20c9e:	3b01      	subs	r3, #1
   20ca0:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   20ca2:	42a3      	cmp	r3, r4
   20ca4:	d2ce      	bcs.n	20c44 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   20ca6:	2000      	movs	r0, #0
   20ca8:	e7dc      	b.n	20c64 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   20caa:	bf00      	nop
   20cac:	20002728 	.word	0x20002728

00020cb0 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   20cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   20cb2:	4c18      	ldr	r4, [pc, #96]	; (20d14 <SEGGER_RTT_WriteNoLock+0x64>)
   20cb4:	2318      	movs	r3, #24
   20cb6:	fb00 3503 	mla	r5, r0, r3, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   20cba:	fb03 4000 	mla	r0, r3, r0, r4
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   20cbe:	4425      	add	r5, r4
  switch (pRing->Flags) {
   20cc0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
   20cc2:	2c01      	cmp	r4, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   20cc4:	460f      	mov	r7, r1
   20cc6:	4616      	mov	r6, r2
  switch (pRing->Flags) {
   20cc8:	d00f      	beq.n	20cea <SEGGER_RTT_WriteNoLock+0x3a>
   20cca:	2c02      	cmp	r4, #2
   20ccc:	d01a      	beq.n	20d04 <SEGGER_RTT_WriteNoLock+0x54>
   20cce:	b9f4      	cbnz	r4, 20d0e <SEGGER_RTT_WriteNoLock+0x5e>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
   20cd0:	4628      	mov	r0, r5
   20cd2:	f007 f83e 	bl	27d52 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   20cd6:	4286      	cmp	r6, r0
   20cd8:	d805      	bhi.n	20ce6 <SEGGER_RTT_WriteNoLock+0x36>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
   20cda:	4632      	mov	r2, r6
   20cdc:	4639      	mov	r1, r7
   20cde:	4628      	mov	r0, r5
   20ce0:	f007 f845 	bl	27d6e <_WriteNoCheck>
   20ce4:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
   20ce6:	4620      	mov	r0, r4
   20ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
   20cea:	4628      	mov	r0, r5
   20cec:	f007 f831 	bl	27d52 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   20cf0:	4286      	cmp	r6, r0
   20cf2:	4634      	mov	r4, r6
   20cf4:	bf28      	it	cs
   20cf6:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   20cf8:	4622      	mov	r2, r4
   20cfa:	4639      	mov	r1, r7
   20cfc:	4628      	mov	r0, r5
   20cfe:	f007 f836 	bl	27d6e <_WriteNoCheck>
    break;
   20d02:	e7f0      	b.n	20ce6 <SEGGER_RTT_WriteNoLock+0x36>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   20d04:	4628      	mov	r0, r5
}
   20d06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
   20d0a:	f007 b84c 	b.w	27da6 <_WriteBlocking>
  switch (pRing->Flags) {
   20d0e:	2400      	movs	r4, #0
  return Status;
   20d10:	e7e9      	b.n	20ce6 <SEGGER_RTT_WriteNoLock+0x36>
   20d12:	bf00      	nop
   20d14:	20002728 	.word	0x20002728

00020d18 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   20d18:	4b03      	ldr	r3, [pc, #12]	; (20d28 <SEGGER_RTT_HasDataUp+0x10>)
   20d1a:	2218      	movs	r2, #24
   20d1c:	fb02 3300 	mla	r3, r2, r0, r3
   20d20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   20d22:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   20d24:	1a80      	subs	r0, r0, r2
   20d26:	4770      	bx	lr
   20d28:	20002728 	.word	0x20002728

00020d2c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   20d2c:	4b0e      	ldr	r3, [pc, #56]	; (20d68 <z_sys_init_run_level+0x3c>)
{
   20d2e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   20d30:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   20d34:	3001      	adds	r0, #1
   20d36:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   20d3a:	42a6      	cmp	r6, r4
   20d3c:	d800      	bhi.n	20d40 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   20d3e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   20d40:	e9d4 3500 	ldrd	r3, r5, [r4]
   20d44:	4628      	mov	r0, r5
   20d46:	4798      	blx	r3
		if (dev != NULL) {
   20d48:	b165      	cbz	r5, 20d64 <z_sys_init_run_level+0x38>
			if (rc != 0) {
   20d4a:	68eb      	ldr	r3, [r5, #12]
   20d4c:	b130      	cbz	r0, 20d5c <z_sys_init_run_level+0x30>
				if (rc < 0) {
   20d4e:	2800      	cmp	r0, #0
   20d50:	bfb8      	it	lt
   20d52:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   20d54:	28ff      	cmp	r0, #255	; 0xff
   20d56:	bfa8      	it	ge
   20d58:	20ff      	movge	r0, #255	; 0xff
   20d5a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   20d5c:	785a      	ldrb	r2, [r3, #1]
   20d5e:	f042 0201 	orr.w	r2, r2, #1
   20d62:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   20d64:	3408      	adds	r4, #8
   20d66:	e7e8      	b.n	20d3a <z_sys_init_run_level+0xe>
   20d68:	00029b08 	.word	0x00029b08

00020d6c <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   20d6c:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   20d6e:	4605      	mov	r5, r0
   20d70:	b910      	cbnz	r0, 20d78 <z_impl_device_get_binding+0xc>
		return NULL;
   20d72:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   20d74:	4620      	mov	r0, r4
   20d76:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   20d78:	7803      	ldrb	r3, [r0, #0]
   20d7a:	2b00      	cmp	r3, #0
   20d7c:	d0f9      	beq.n	20d72 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   20d7e:	4a0f      	ldr	r2, [pc, #60]	; (20dbc <z_impl_device_get_binding+0x50>)
   20d80:	4c0f      	ldr	r4, [pc, #60]	; (20dc0 <z_impl_device_get_binding+0x54>)
   20d82:	4616      	mov	r6, r2
   20d84:	4294      	cmp	r4, r2
   20d86:	d108      	bne.n	20d9a <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   20d88:	4c0d      	ldr	r4, [pc, #52]	; (20dc0 <z_impl_device_get_binding+0x54>)
   20d8a:	42b4      	cmp	r4, r6
   20d8c:	d0f1      	beq.n	20d72 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   20d8e:	4620      	mov	r0, r4
   20d90:	f007 f83a 	bl	27e08 <z_device_ready>
   20d94:	b950      	cbnz	r0, 20dac <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   20d96:	3418      	adds	r4, #24
   20d98:	e7f7      	b.n	20d8a <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
   20d9a:	4620      	mov	r0, r4
   20d9c:	f007 f834 	bl	27e08 <z_device_ready>
   20da0:	b110      	cbz	r0, 20da8 <z_impl_device_get_binding+0x3c>
   20da2:	6823      	ldr	r3, [r4, #0]
   20da4:	42ab      	cmp	r3, r5
   20da6:	d0e5      	beq.n	20d74 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   20da8:	3418      	adds	r4, #24
   20daa:	e7eb      	b.n	20d84 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   20dac:	6821      	ldr	r1, [r4, #0]
   20dae:	4628      	mov	r0, r5
   20db0:	f004 f83b 	bl	24e2a <strcmp>
   20db4:	2800      	cmp	r0, #0
   20db6:	d1ee      	bne.n	20d96 <z_impl_device_get_binding+0x2a>
   20db8:	e7dc      	b.n	20d74 <z_impl_device_get_binding+0x8>
   20dba:	bf00      	nop
   20dbc:	00028bac 	.word	0x00028bac
   20dc0:	00028a2c 	.word	0x00028a2c

00020dc4 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   20dc4:	4b01      	ldr	r3, [pc, #4]	; (20dcc <z_impl_z_errno+0x8>)
   20dc6:	6898      	ldr	r0, [r3, #8]
}
   20dc8:	3064      	adds	r0, #100	; 0x64
   20dca:	4770      	bx	lr
   20dcc:	200027d0 	.word	0x200027d0

00020dd0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   20dd0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   20dd4:	4606      	mov	r6, r0
   20dd6:	460f      	mov	r7, r1
	__asm__ volatile(
   20dd8:	f04f 0340 	mov.w	r3, #64	; 0x40
   20ddc:	f3ef 8811 	mrs	r8, BASEPRI
   20de0:	f383 8812 	msr	BASEPRI_MAX, r3
   20de4:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   20de8:	f000 fe10 	bl	21a0c <z_impl_z_current_get>
   20dec:	4c1f      	ldr	r4, [pc, #124]	; (20e6c <z_fatal_error+0x9c>)
   20dee:	4b20      	ldr	r3, [pc, #128]	; (20e70 <z_fatal_error+0xa0>)
   20df0:	1ae4      	subs	r4, r4, r3
   20df2:	2e04      	cmp	r6, #4
   20df4:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   20df8:	bf96      	itet	ls
   20dfa:	4a1e      	ldrls	r2, [pc, #120]	; (20e74 <z_fatal_error+0xa4>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   20dfc:	4a1e      	ldrhi	r2, [pc, #120]	; (20e78 <z_fatal_error+0xa8>)
   20dfe:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
   20e02:	01a4      	lsls	r4, r4, #6
   20e04:	f044 0301 	orr.w	r3, r4, #1
   20e08:	4605      	mov	r5, r0
   20e0a:	f8ad 3000 	strh.w	r3, [sp]
   20e0e:	481b      	ldr	r0, [pc, #108]	; (20e7c <z_fatal_error+0xac>)
   20e10:	2300      	movs	r3, #0
   20e12:	4631      	mov	r1, r6
   20e14:	f003 f85f 	bl	23ed6 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   20e18:	b147      	cbz	r7, 20e2c <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   20e1a:	69fb      	ldr	r3, [r7, #28]
   20e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
   20e20:	b123      	cbz	r3, 20e2c <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
   20e22:	4817      	ldr	r0, [pc, #92]	; (20e80 <z_fatal_error+0xb0>)
   20e24:	f044 0101 	orr.w	r1, r4, #1
   20e28:	f003 f81b 	bl	23e62 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   20e2c:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   20e30:	b12d      	cbz	r5, 20e3e <z_fatal_error+0x6e>
   20e32:	4628      	mov	r0, r5
   20e34:	f007 fc00 	bl	28638 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   20e38:	b108      	cbz	r0, 20e3e <z_fatal_error+0x6e>
   20e3a:	7803      	ldrb	r3, [r0, #0]
   20e3c:	b903      	cbnz	r3, 20e40 <z_fatal_error+0x70>
		thread_name = "unknown";
   20e3e:	4811      	ldr	r0, [pc, #68]	; (20e84 <z_fatal_error+0xb4>)
   20e40:	f7f1 f882 	bl	11f48 <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
   20e44:	4623      	mov	r3, r4
   20e46:	4602      	mov	r2, r0
   20e48:	4629      	mov	r1, r5
   20e4a:	480f      	ldr	r0, [pc, #60]	; (20e88 <z_fatal_error+0xb8>)
   20e4c:	f003 f82a 	bl	23ea4 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   20e50:	4639      	mov	r1, r7
   20e52:	4630      	mov	r0, r6
   20e54:	f7fd ffb6 	bl	1edc4 <k_sys_fatal_error_handler>
	__asm__ volatile(
   20e58:	f388 8811 	msr	BASEPRI, r8
   20e5c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   20e60:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   20e62:	b002      	add	sp, #8
   20e64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   20e68:	f7f3 b970 	b.w	1414c <z_impl_k_thread_abort>
   20e6c:	00028ec4 	.word	0x00028ec4
   20e70:	00028dd4 	.word	0x00028dd4
   20e74:	00029b20 	.word	0x00029b20
   20e78:	0002c801 	.word	0x0002c801
   20e7c:	0002c80f 	.word	0x0002c80f
   20e80:	0002c837 	.word	0x0002c837
   20e84:	0002b0be 	.word	0x0002b0be
   20e88:	0002c858 	.word	0x0002c858

00020e8c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   20e8c:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   20e8e:	4c09      	ldr	r4, [pc, #36]	; (20eb4 <idle+0x28>)
	__asm__ volatile(
   20e90:	f04f 0240 	mov.w	r2, #64	; 0x40
   20e94:	f3ef 8311 	mrs	r3, BASEPRI
   20e98:	f382 8812 	msr	BASEPRI_MAX, r2
   20e9c:	f3bf 8f6f 	isb	sy
   20ea0:	f007 fbe4 	bl	2866c <z_get_next_timeout_expiry>
   20ea4:	61a0      	str	r0, [r4, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
   20ea6:	f7f2 fa2b 	bl	13300 <pm_system_suspend>
   20eaa:	2800      	cmp	r0, #0
   20eac:	d1f0      	bne.n	20e90 <idle+0x4>
	arch_cpu_idle();
   20eae:	f7f2 fceb 	bl	13888 <arch_cpu_idle>
}
   20eb2:	e7ed      	b.n	20e90 <idle+0x4>
   20eb4:	200027d0 	.word	0x200027d0

00020eb8 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   20eb8:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   20eba:	2300      	movs	r3, #0
{
   20ebc:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
   20ebe:	2201      	movs	r2, #1
   20ec0:	e9cd 2304 	strd	r2, r3, [sp, #16]
   20ec4:	220f      	movs	r2, #15
   20ec6:	e9cd 3202 	strd	r3, r2, [sp, #8]
	struct k_thread *thread = &z_idle_threads[i];
   20eca:	4c0d      	ldr	r4, [pc, #52]	; (20f00 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   20ecc:	4a0d      	ldr	r2, [pc, #52]	; (20f04 <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
   20ece:	9301      	str	r3, [sp, #4]
   20ed0:	490d      	ldr	r1, [pc, #52]	; (20f08 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   20ed2:	2318      	movs	r3, #24
	struct k_thread *thread = &z_idle_threads[i];
   20ed4:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   20ed8:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
   20edc:	f44f 75b0 	mov.w	r5, #352	; 0x160
   20ee0:	9300      	str	r3, [sp, #0]
   20ee2:	fb05 1100 	mla	r1, r5, r0, r1
   20ee6:	4b09      	ldr	r3, [pc, #36]	; (20f0c <init_idle_thread+0x54>)
   20ee8:	f44f 72a0 	mov.w	r2, #320	; 0x140
   20eec:	4620      	mov	r0, r4
   20eee:	f000 fe93 	bl	21c18 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   20ef2:	7b63      	ldrb	r3, [r4, #13]
   20ef4:	f023 0304 	bic.w	r3, r3, #4
   20ef8:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   20efa:	b007      	add	sp, #28
   20efc:	bd30      	pop	{r4, r5, pc}
   20efe:	bf00      	nop
   20f00:	20002090 	.word	0x20002090
   20f04:	200027d0 	.word	0x200027d0
   20f08:	20006240 	.word	0x20006240
   20f0c:	00020e8d 	.word	0x00020e8d

00020f10 <bg_thread_main>:
{
   20f10:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   20f12:	4b0a      	ldr	r3, [pc, #40]	; (20f3c <bg_thread_main+0x2c>)
   20f14:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   20f16:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   20f18:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   20f1a:	f7ff ff07 	bl	20d2c <z_sys_init_run_level>
	boot_banner();
   20f1e:	f001 fb0d 	bl	2253c <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   20f22:	2003      	movs	r0, #3
   20f24:	f7ff ff02 	bl	20d2c <z_sys_init_run_level>
	z_init_static_threads();
   20f28:	f000 fede 	bl	21ce8 <z_init_static_threads>
	main();
   20f2c:	f7ef fcae 	bl	1088c <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   20f30:	4a03      	ldr	r2, [pc, #12]	; (20f40 <bg_thread_main+0x30>)
   20f32:	7b13      	ldrb	r3, [r2, #12]
   20f34:	f023 0301 	bic.w	r3, r3, #1
   20f38:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   20f3a:	bd08      	pop	{r3, pc}
   20f3c:	200033dc 	.word	0x200033dc
   20f40:	20002110 	.word	0x20002110

00020f44 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   20f44:	4802      	ldr	r0, [pc, #8]	; (20f50 <z_bss_zero+0xc>)
   20f46:	4a03      	ldr	r2, [pc, #12]	; (20f54 <z_bss_zero+0x10>)
   20f48:	2100      	movs	r1, #0
   20f4a:	1a12      	subs	r2, r2, r0
   20f4c:	f003 bfa3 	b.w	24e96 <memset>
   20f50:	20000b68 	.word	0x20000b68
   20f54:	200033e0 	.word	0x200033e0

00020f58 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   20f58:	b580      	push	{r7, lr}
   20f5a:	b0a6      	sub	sp, #152	; 0x98
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   20f5c:	f7f0 ff34 	bl	11dc8 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   20f60:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 2103c <z_cstart+0xe4>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   20f64:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   20f68:	4d2e      	ldr	r5, [pc, #184]	; (21024 <z_cstart+0xcc>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   20f6a:	4e2f      	ldr	r6, [pc, #188]	; (21028 <z_cstart+0xd0>)
   20f6c:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   20f6e:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 21040 <z_cstart+0xe8>
   20f72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   20f76:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   20f78:	23e0      	movs	r3, #224	; 0xe0
   20f7a:	2400      	movs	r4, #0
   20f7c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   20f80:	2320      	movs	r3, #32
   20f82:	77eb      	strb	r3, [r5, #31]
   20f84:	762c      	strb	r4, [r5, #24]
   20f86:	766c      	strb	r4, [r5, #25]
   20f88:	76ac      	strb	r4, [r5, #26]
   20f8a:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   20f8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   20f90:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   20f94:	626b      	str	r3, [r5, #36]	; 0x24
   20f96:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   20f9a:	f7f3 f881 	bl	140a0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   20f9e:	f7f2 fc6d 	bl	1387c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   20fa2:	f04f 33ff 	mov.w	r3, #4294967295
   20fa6:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   20fa8:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   20faa:	f7f3 f98b 	bl	142c4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   20fae:	f7f3 f8df 	bl	14170 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   20fb2:	f240 1301 	movw	r3, #257	; 0x101
   20fb6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   20fba:	ab06      	add	r3, sp, #24
   20fbc:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   20fbe:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   20fc2:	f006 ff20 	bl	27e06 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   20fc6:	4620      	mov	r0, r4
   20fc8:	f7ff feb0 	bl	20d2c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   20fcc:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   20fce:	4d17      	ldr	r5, [pc, #92]	; (2102c <z_cstart+0xd4>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   20fd0:	f7ff feac 	bl	20d2c <z_sys_init_run_level>
	z_sched_init();
   20fd4:	f000 fc66 	bl	218a4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   20fd8:	4b15      	ldr	r3, [pc, #84]	; (21030 <z_cstart+0xd8>)
   20fda:	9305      	str	r3, [sp, #20]
   20fdc:	2301      	movs	r3, #1
   20fde:	4915      	ldr	r1, [pc, #84]	; (21034 <z_cstart+0xdc>)
   20fe0:	9400      	str	r4, [sp, #0]
   20fe2:	e9cd 4303 	strd	r4, r3, [sp, #12]
   20fe6:	f44f 6200 	mov.w	r2, #2048	; 0x800
   20fea:	464b      	mov	r3, r9
   20fec:	e9cd 4401 	strd	r4, r4, [sp, #4]
   20ff0:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   20ff2:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   20ff4:	f000 fe10 	bl	21c18 <z_setup_new_thread>
   20ff8:	7b6a      	ldrb	r2, [r5, #13]
   20ffa:	f022 0204 	bic.w	r2, r2, #4
   20ffe:	736a      	strb	r2, [r5, #13]
   21000:	4607      	mov	r7, r0
	z_ready_thread(&z_main_thread);
   21002:	4628      	mov	r0, r5
   21004:	f007 fa46 	bl	28494 <z_ready_thread>
		init_idle_thread(i);
   21008:	4620      	mov	r0, r4
   2100a:	f7ff ff55 	bl	20eb8 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   2100e:	4b0a      	ldr	r3, [pc, #40]	; (21038 <z_cstart+0xe0>)
   21010:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   21012:	464a      	mov	r2, r9
   21014:	4639      	mov	r1, r7
   21016:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
   21018:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   2101a:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   2101e:	f7f2 fda7 	bl	13b70 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   21022:	bf00      	nop
   21024:	e000ed00 	.word	0xe000ed00
   21028:	200027d0 	.word	0x200027d0
   2102c:	20002110 	.word	0x20002110
   21030:	0002c8ba 	.word	0x0002c8ba
   21034:	20005a20 	.word	0x20005a20
   21038:	20002090 	.word	0x20002090
   2103c:	20006bc0 	.word	0x20006bc0
   21040:	00020f11 	.word	0x00020f11

00021044 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   21044:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   21046:	4c06      	ldr	r4, [pc, #24]	; (21060 <statics_init+0x1c>)
   21048:	4d06      	ldr	r5, [pc, #24]	; (21064 <statics_init+0x20>)
   2104a:	42ac      	cmp	r4, r5
   2104c:	d301      	bcc.n	21052 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   2104e:	2000      	movs	r0, #0
   21050:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   21052:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   21056:	4620      	mov	r0, r4
   21058:	f006 fee7 	bl	27e2a <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   2105c:	3414      	adds	r4, #20
   2105e:	e7f4      	b.n	2104a <statics_init+0x6>
   21060:	20000964 	.word	0x20000964
   21064:	20000964 	.word	0x20000964

00021068 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   21068:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2106a:	4b0e      	ldr	r3, [pc, #56]	; (210a4 <init_mem_slab_module+0x3c>)
   2106c:	4c0e      	ldr	r4, [pc, #56]	; (210a8 <init_mem_slab_module+0x40>)
   2106e:	42a3      	cmp	r3, r4
   21070:	d301      	bcc.n	21076 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   21072:	2000      	movs	r0, #0
	return rc;
}
   21074:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   21076:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   2107a:	ea41 0200 	orr.w	r2, r1, r0
   2107e:	f012 0203 	ands.w	r2, r2, #3
   21082:	d10b      	bne.n	2109c <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   21084:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   21086:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   21088:	42aa      	cmp	r2, r5
   2108a:	d101      	bne.n	21090 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2108c:	331c      	adds	r3, #28
   2108e:	e7ee      	b.n	2106e <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   21090:	695e      	ldr	r6, [r3, #20]
   21092:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   21094:	3201      	adds	r2, #1
		slab->free_list = p;
   21096:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   21098:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   2109a:	e7f5      	b.n	21088 <init_mem_slab_module+0x20>
		return -EINVAL;
   2109c:	f06f 0015 	mvn.w	r0, #21
	return rc;
   210a0:	e7e8      	b.n	21074 <init_mem_slab_module+0xc>
   210a2:	bf00      	nop
   210a4:	20000910 	.word	0x20000910
   210a8:	20000964 	.word	0x20000964

000210ac <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   210ac:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   210ae:	460c      	mov	r4, r1
   210b0:	4616      	mov	r6, r2
   210b2:	461f      	mov	r7, r3
   210b4:	f04f 0340 	mov.w	r3, #64	; 0x40
   210b8:	f3ef 8111 	mrs	r1, BASEPRI
   210bc:	f383 8812 	msr	BASEPRI_MAX, r3
   210c0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   210c4:	6943      	ldr	r3, [r0, #20]
   210c6:	b15b      	cbz	r3, 210e0 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   210c8:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   210ca:	681b      	ldr	r3, [r3, #0]
   210cc:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   210ce:	6983      	ldr	r3, [r0, #24]
   210d0:	3301      	adds	r3, #1
   210d2:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   210d4:	2000      	movs	r0, #0
	__asm__ volatile(
   210d6:	f381 8811 	msr	BASEPRI, r1
   210da:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   210de:	e011      	b.n	21104 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   210e0:	ea56 0207 	orrs.w	r2, r6, r7
   210e4:	d103      	bne.n	210ee <k_mem_slab_alloc+0x42>
		*mem = NULL;
   210e6:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   210e8:	f06f 000b 	mvn.w	r0, #11
   210ec:	e7f3      	b.n	210d6 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   210ee:	4602      	mov	r2, r0
   210f0:	e9cd 6700 	strd	r6, r7, [sp]
   210f4:	3008      	adds	r0, #8
   210f6:	f000 fb27 	bl	21748 <z_pend_curr>
		if (result == 0) {
   210fa:	b918      	cbnz	r0, 21104 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   210fc:	4b02      	ldr	r3, [pc, #8]	; (21108 <k_mem_slab_alloc+0x5c>)
   210fe:	689b      	ldr	r3, [r3, #8]
   21100:	695b      	ldr	r3, [r3, #20]
   21102:	6023      	str	r3, [r4, #0]
}
   21104:	b002      	add	sp, #8
   21106:	bdd0      	pop	{r4, r6, r7, pc}
   21108:	200027d0 	.word	0x200027d0

0002110c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   2110c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   21110:	4604      	mov	r4, r0
   21112:	4616      	mov	r6, r2
   21114:	461f      	mov	r7, r3
	__asm__ volatile(
   21116:	f04f 0340 	mov.w	r3, #64	; 0x40
   2111a:	f3ef 8811 	mrs	r8, BASEPRI
   2111e:	f383 8812 	msr	BASEPRI_MAX, r3
   21122:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   21126:	68c3      	ldr	r3, [r0, #12]
   21128:	4a35      	ldr	r2, [pc, #212]	; (21200 <z_impl_k_mutex_lock+0xf4>)
   2112a:	b16b      	cbz	r3, 21148 <z_impl_k_mutex_lock+0x3c>
   2112c:	6880      	ldr	r0, [r0, #8]
   2112e:	6891      	ldr	r1, [r2, #8]
   21130:	4288      	cmp	r0, r1
   21132:	d019      	beq.n	21168 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   21134:	ea56 0307 	orrs.w	r3, r6, r7
   21138:	d118      	bne.n	2116c <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   2113a:	f388 8811 	msr	BASEPRI, r8
   2113e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   21142:	f06f 000f 	mvn.w	r0, #15
   21146:	e00c      	b.n	21162 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   21148:	6891      	ldr	r1, [r2, #8]
   2114a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   2114e:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   21150:	3301      	adds	r3, #1
   21152:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   21154:	6893      	ldr	r3, [r2, #8]
   21156:	60a3      	str	r3, [r4, #8]
   21158:	f388 8811 	msr	BASEPRI, r8
   2115c:	f3bf 8f6f 	isb	sy
		return 0;
   21160:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   21162:	b002      	add	sp, #8
   21164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   21168:	6921      	ldr	r1, [r4, #16]
   2116a:	e7f0      	b.n	2114e <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   2116c:	f991 100e 	ldrsb.w	r1, [r1, #14]
   21170:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   21174:	4299      	cmp	r1, r3
   21176:	bfa8      	it	ge
   21178:	4619      	movge	r1, r3
   2117a:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   2117e:	4291      	cmp	r1, r2
   21180:	bfb8      	it	lt
   21182:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   21184:	428b      	cmp	r3, r1
   21186:	dd2f      	ble.n	211e8 <z_impl_k_mutex_lock+0xdc>
		return z_set_prio(mutex->owner, new_prio);
   21188:	f000 faf2 	bl	21770 <z_set_prio>
   2118c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   2118e:	e9cd 6700 	strd	r6, r7, [sp]
   21192:	481c      	ldr	r0, [pc, #112]	; (21204 <z_impl_k_mutex_lock+0xf8>)
   21194:	4622      	mov	r2, r4
   21196:	4641      	mov	r1, r8
   21198:	f000 fad6 	bl	21748 <z_pend_curr>
	if (got_mutex == 0) {
   2119c:	2800      	cmp	r0, #0
   2119e:	d0e0      	beq.n	21162 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   211a0:	f04f 0340 	mov.w	r3, #64	; 0x40
   211a4:	f3ef 8611 	mrs	r6, BASEPRI
   211a8:	f383 8812 	msr	BASEPRI_MAX, r3
   211ac:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   211b0:	6823      	ldr	r3, [r4, #0]
   211b2:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   211b4:	429c      	cmp	r4, r3
   211b6:	d00a      	beq.n	211ce <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   211b8:	b14b      	cbz	r3, 211ce <z_impl_k_mutex_lock+0xc2>
   211ba:	f993 300e 	ldrsb.w	r3, [r3, #14]
   211be:	4299      	cmp	r1, r3
   211c0:	bfa8      	it	ge
   211c2:	4619      	movge	r1, r3
   211c4:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   211c8:	4299      	cmp	r1, r3
   211ca:	bfb8      	it	lt
   211cc:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   211ce:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   211d0:	f990 300e 	ldrsb.w	r3, [r0, #14]
   211d4:	4299      	cmp	r1, r3
   211d6:	d109      	bne.n	211ec <z_impl_k_mutex_lock+0xe0>
	if (resched) {
   211d8:	b16d      	cbz	r5, 211f6 <z_impl_k_mutex_lock+0xea>
		z_reschedule(&lock, key);
   211da:	480a      	ldr	r0, [pc, #40]	; (21204 <z_impl_k_mutex_lock+0xf8>)
   211dc:	4631      	mov	r1, r6
   211de:	f000 f959 	bl	21494 <z_reschedule>
	return -EAGAIN;
   211e2:	f06f 000a 	mvn.w	r0, #10
   211e6:	e7bc      	b.n	21162 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   211e8:	2500      	movs	r5, #0
   211ea:	e7d0      	b.n	2118e <z_impl_k_mutex_lock+0x82>
		return z_set_prio(mutex->owner, new_prio);
   211ec:	f000 fac0 	bl	21770 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   211f0:	2800      	cmp	r0, #0
   211f2:	d1f2      	bne.n	211da <z_impl_k_mutex_lock+0xce>
   211f4:	e7f0      	b.n	211d8 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   211f6:	f386 8811 	msr	BASEPRI, r6
   211fa:	f3bf 8f6f 	isb	sy
   211fe:	e7f0      	b.n	211e2 <z_impl_k_mutex_lock+0xd6>
   21200:	200027d0 	.word	0x200027d0
   21204:	200033dd 	.word	0x200033dd

00021208 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   21208:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   2120a:	6883      	ldr	r3, [r0, #8]
{
   2120c:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   2120e:	2b00      	cmp	r3, #0
   21210:	d036      	beq.n	21280 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   21212:	4a1e      	ldr	r2, [pc, #120]	; (2128c <z_impl_k_mutex_unlock+0x84>)
   21214:	6892      	ldr	r2, [r2, #8]
   21216:	4293      	cmp	r3, r2
   21218:	d135      	bne.n	21286 <z_impl_k_mutex_unlock+0x7e>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   2121a:	7bda      	ldrb	r2, [r3, #15]
   2121c:	3a01      	subs	r2, #1
   2121e:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   21220:	68c3      	ldr	r3, [r0, #12]
   21222:	2b01      	cmp	r3, #1
   21224:	d905      	bls.n	21232 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   21226:	3b01      	subs	r3, #1
   21228:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   2122a:	f000 fb1f 	bl	2186c <k_sched_unlock>

	return 0;
   2122e:	2000      	movs	r0, #0
}
   21230:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   21232:	f04f 0340 	mov.w	r3, #64	; 0x40
   21236:	f3ef 8511 	mrs	r5, BASEPRI
   2123a:	f383 8812 	msr	BASEPRI_MAX, r3
   2123e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   21242:	6901      	ldr	r1, [r0, #16]
   21244:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   21246:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2124a:	4299      	cmp	r1, r3
   2124c:	d001      	beq.n	21252 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   2124e:	f000 fa8f 	bl	21770 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   21252:	4620      	mov	r0, r4
   21254:	f007 f992 	bl	2857c <z_unpend_first_thread>
	mutex->owner = new_owner;
   21258:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   2125a:	b158      	cbz	r0, 21274 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
   2125c:	f990 200e 	ldrsb.w	r2, [r0, #14]
   21260:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   21262:	2200      	movs	r2, #0
   21264:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   21266:	f007 f915 	bl	28494 <z_ready_thread>
		z_reschedule(&lock, key);
   2126a:	4809      	ldr	r0, [pc, #36]	; (21290 <z_impl_k_mutex_unlock+0x88>)
   2126c:	4629      	mov	r1, r5
   2126e:	f000 f911 	bl	21494 <z_reschedule>
   21272:	e7da      	b.n	2122a <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   21274:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   21276:	f385 8811 	msr	BASEPRI, r5
   2127a:	f3bf 8f6f 	isb	sy
   2127e:	e7d4      	b.n	2122a <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   21280:	f06f 0015 	mvn.w	r0, #21
   21284:	e7d4      	b.n	21230 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   21286:	f04f 30ff 	mov.w	r0, #4294967295
   2128a:	e7d1      	b.n	21230 <z_impl_k_mutex_unlock+0x28>
   2128c:	200027d0 	.word	0x200027d0
   21290:	200033dd 	.word	0x200033dd

00021294 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   21294:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   21298:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   2129a:	4b29      	ldr	r3, [pc, #164]	; (21340 <z_impl_k_poll+0xac>)
   2129c:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
   2129e:	2301      	movs	r3, #1
   212a0:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	poller->mode = MODE_POLL;
   212a4:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   212a8:	ea52 0307 	orrs.w	r3, r2, r7
{
   212ac:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   212ae:	bf0c      	ite	eq
   212b0:	2301      	moveq	r3, #1
   212b2:	2300      	movne	r3, #0
   212b4:	f105 0260 	add.w	r2, r5, #96	; 0x60
{
   212b8:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   212ba:	f006 fecf 	bl	2805c <register_events>
   212be:	4681      	mov	r9, r0
	__asm__ volatile(
   212c0:	f04f 0340 	mov.w	r3, #64	; 0x40
   212c4:	f3ef 8a11 	mrs	sl, BASEPRI
   212c8:	f383 8812 	msr	BASEPRI_MAX, r3
   212cc:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   212d0:	f895 4060 	ldrb.w	r4, [r5, #96]	; 0x60
   212d4:	b964      	cbnz	r4, 212f0 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   212d6:	4601      	mov	r1, r0
   212d8:	4652      	mov	r2, sl
   212da:	4640      	mov	r0, r8
   212dc:	f006 fe5c 	bl	27f98 <clear_event_registrations>
	__asm__ volatile(
   212e0:	f38a 8811 	msr	BASEPRI, sl
   212e4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   212e8:	4620      	mov	r0, r4
   212ea:	b002      	add	sp, #8
   212ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   212f0:	2300      	movs	r3, #0
   212f2:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   212f6:	ea56 0307 	orrs.w	r3, r6, r7
   212fa:	d106      	bne.n	2130a <z_impl_k_poll+0x76>
   212fc:	f38a 8811 	msr	BASEPRI, sl
   21300:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   21304:	f06f 040a 	mvn.w	r4, #10
   21308:	e7ee      	b.n	212e8 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   2130a:	e9cd 6700 	strd	r6, r7, [sp]
   2130e:	4a0d      	ldr	r2, [pc, #52]	; (21344 <z_impl_k_poll+0xb0>)
   21310:	480d      	ldr	r0, [pc, #52]	; (21348 <z_impl_k_poll+0xb4>)
   21312:	4651      	mov	r1, sl
   21314:	f000 fa18 	bl	21748 <z_pend_curr>
   21318:	4604      	mov	r4, r0
	__asm__ volatile(
   2131a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2131e:	f3ef 8511 	mrs	r5, BASEPRI
   21322:	f383 8812 	msr	BASEPRI_MAX, r3
   21326:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   2132a:	462a      	mov	r2, r5
   2132c:	4649      	mov	r1, r9
   2132e:	4640      	mov	r0, r8
   21330:	f006 fe32 	bl	27f98 <clear_event_registrations>
	__asm__ volatile(
   21334:	f385 8811 	msr	BASEPRI, r5
   21338:	f3bf 8f6f 	isb	sy
	return swap_rc;
   2133c:	e7d4      	b.n	212e8 <z_impl_k_poll+0x54>
   2133e:	bf00      	nop
   21340:	200027d0 	.word	0x200027d0
   21344:	2000078c 	.word	0x2000078c
   21348:	200033dd 	.word	0x200033dd

0002134c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   2134c:	b538      	push	{r3, r4, r5, lr}
   2134e:	4603      	mov	r3, r0
	__asm__ volatile(
   21350:	f04f 0240 	mov.w	r2, #64	; 0x40
   21354:	f3ef 8511 	mrs	r5, BASEPRI
   21358:	f382 8812 	msr	BASEPRI_MAX, r2
   2135c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   21360:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   21362:	2101      	movs	r1, #1
   21364:	6081      	str	r1, [r0, #8]
	return list->head == list;
   21366:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   21368:	4283      	cmp	r3, r0
   2136a:	d106      	bne.n	2137a <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   2136c:	f385 8811 	msr	BASEPRI, r5
   21370:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   21374:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   21376:	4620      	mov	r0, r4
   21378:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   2137a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2137e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   21380:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   21382:	2300      	movs	r3, #0
	node->prev = NULL;
   21384:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   21388:	f006 fedf 	bl	2814a <signal_poll_event>
	z_reschedule(&lock, key);
   2138c:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   2138e:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   21390:	4801      	ldr	r0, [pc, #4]	; (21398 <z_impl_k_poll_signal_raise+0x4c>)
   21392:	f000 f87f 	bl	21494 <z_reschedule>
	return rc;
   21396:	e7ee      	b.n	21376 <z_impl_k_poll_signal_raise+0x2a>
   21398:	200033dd 	.word	0x200033dd

0002139c <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   2139c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2139e:	4616      	mov	r6, r2
   213a0:	461f      	mov	r7, r3
	__asm__ volatile(
   213a2:	f04f 0340 	mov.w	r3, #64	; 0x40
   213a6:	f3ef 8511 	mrs	r5, BASEPRI
   213aa:	f383 8812 	msr	BASEPRI_MAX, r3
   213ae:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   213b2:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   213b4:	b19c      	cbz	r4, 213de <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   213b6:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   213b8:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   213ba:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   213be:	4294      	cmp	r4, r2
	list->head = node;
   213c0:	6003      	str	r3, [r0, #0]
	list->tail = node;
   213c2:	bf08      	it	eq
   213c4:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   213c6:	2101      	movs	r1, #1
   213c8:	4620      	mov	r0, r4
   213ca:	f006 ff9b 	bl	28304 <z_queue_node_peek>
   213ce:	4604      	mov	r4, r0
	__asm__ volatile(
   213d0:	f385 8811 	msr	BASEPRI, r5
   213d4:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   213d8:	4620      	mov	r0, r4
   213da:	b003      	add	sp, #12
   213dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   213de:	ea56 0307 	orrs.w	r3, r6, r7
   213e2:	d0f5      	beq.n	213d0 <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   213e4:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   213e8:	e9cd 6700 	strd	r6, r7, [sp]
   213ec:	4629      	mov	r1, r5
   213ee:	4610      	mov	r0, r2
   213f0:	f000 f9aa 	bl	21748 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   213f4:	2800      	cmp	r0, #0
   213f6:	d1ef      	bne.n	213d8 <z_impl_k_queue_get+0x3c>
   213f8:	4b01      	ldr	r3, [pc, #4]	; (21400 <z_impl_k_queue_get+0x64>)
   213fa:	689b      	ldr	r3, [r3, #8]
   213fc:	695c      	ldr	r4, [r3, #20]
   213fe:	e7eb      	b.n	213d8 <z_impl_k_queue_get+0x3c>
   21400:	200027d0 	.word	0x200027d0

00021404 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   21404:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   21406:	4c08      	ldr	r4, [pc, #32]	; (21428 <z_reset_time_slice+0x24>)
   21408:	6823      	ldr	r3, [r4, #0]
   2140a:	b15b      	cbz	r3, 21424 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   2140c:	f7fd fcc2 	bl	1ed94 <sys_clock_elapsed>
   21410:	4603      	mov	r3, r0
   21412:	6820      	ldr	r0, [r4, #0]
   21414:	4a05      	ldr	r2, [pc, #20]	; (2142c <z_reset_time_slice+0x28>)
   21416:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   21418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   2141c:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   2141e:	2100      	movs	r1, #0
   21420:	f007 b934 	b.w	2868c <z_set_timeout_expiry>
}
   21424:	bd10      	pop	{r4, pc}
   21426:	bf00      	nop
   21428:	20002800 	.word	0x20002800
   2142c:	200027d0 	.word	0x200027d0

00021430 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   21430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21432:	4604      	mov	r4, r0
   21434:	460d      	mov	r5, r1
	__asm__ volatile(
   21436:	f04f 0340 	mov.w	r3, #64	; 0x40
   2143a:	f3ef 8611 	mrs	r6, BASEPRI
   2143e:	f383 8812 	msr	BASEPRI_MAX, r3
   21442:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   21446:	4b10      	ldr	r3, [pc, #64]	; (21488 <k_sched_time_slice_set+0x58>)
   21448:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   2144a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   2144e:	f240 30e7 	movw	r0, #999	; 0x3e7
   21452:	2100      	movs	r1, #0
   21454:	611a      	str	r2, [r3, #16]
   21456:	fbe7 0104 	umlal	r0, r1, r7, r4
   2145a:	2300      	movs	r3, #0
   2145c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   21460:	f7de fe3e 	bl	e0 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   21464:	2c00      	cmp	r4, #0
   21466:	4b09      	ldr	r3, [pc, #36]	; (2148c <k_sched_time_slice_set+0x5c>)
   21468:	dc09      	bgt.n	2147e <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   2146a:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   2146c:	4b08      	ldr	r3, [pc, #32]	; (21490 <k_sched_time_slice_set+0x60>)
   2146e:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   21470:	f7ff ffc8 	bl	21404 <z_reset_time_slice>
	__asm__ volatile(
   21474:	f386 8811 	msr	BASEPRI, r6
   21478:	f3bf 8f6f 	isb	sy
	}
}
   2147c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   2147e:	2802      	cmp	r0, #2
   21480:	bfb8      	it	lt
   21482:	2002      	movlt	r0, #2
   21484:	e7f1      	b.n	2146a <k_sched_time_slice_set+0x3a>
   21486:	bf00      	nop
   21488:	200027d0 	.word	0x200027d0
   2148c:	20002800 	.word	0x20002800
   21490:	200027fc 	.word	0x200027fc

00021494 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   21494:	b949      	cbnz	r1, 214aa <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   21496:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   2149a:	b930      	cbnz	r0, 214aa <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   2149c:	4b05      	ldr	r3, [pc, #20]	; (214b4 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   2149e:	69da      	ldr	r2, [r3, #28]
   214a0:	689b      	ldr	r3, [r3, #8]
   214a2:	429a      	cmp	r2, r3
   214a4:	d001      	beq.n	214aa <z_reschedule+0x16>
	ret = arch_swap(key);
   214a6:	f7f2 bb13 	b.w	13ad0 <arch_swap>
   214aa:	f381 8811 	msr	BASEPRI, r1
   214ae:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   214b2:	4770      	bx	lr
   214b4:	200027d0 	.word	0x200027d0

000214b8 <k_sched_lock>:
	__asm__ volatile(
   214b8:	f04f 0340 	mov.w	r3, #64	; 0x40
   214bc:	f3ef 8111 	mrs	r1, BASEPRI
   214c0:	f383 8812 	msr	BASEPRI_MAX, r3
   214c4:	f3bf 8f6f 	isb	sy
   214c8:	4b04      	ldr	r3, [pc, #16]	; (214dc <k_sched_lock+0x24>)
   214ca:	689a      	ldr	r2, [r3, #8]
   214cc:	7bd3      	ldrb	r3, [r2, #15]
   214ce:	3b01      	subs	r3, #1
   214d0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   214d2:	f381 8811 	msr	BASEPRI, r1
   214d6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   214da:	4770      	bx	lr
   214dc:	200027d0 	.word	0x200027d0

000214e0 <update_cache>:
{
   214e0:	b538      	push	{r3, r4, r5, lr}
   214e2:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   214e4:	480c      	ldr	r0, [pc, #48]	; (21518 <update_cache+0x38>)
   214e6:	4d0d      	ldr	r5, [pc, #52]	; (2151c <update_cache+0x3c>)
   214e8:	f006 ffca 	bl	28480 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   214ec:	4604      	mov	r4, r0
   214ee:	b900      	cbnz	r0, 214f2 <update_cache+0x12>
   214f0:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   214f2:	68ab      	ldr	r3, [r5, #8]
   214f4:	b94a      	cbnz	r2, 2150a <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   214f6:	7b5a      	ldrb	r2, [r3, #13]
   214f8:	06d2      	lsls	r2, r2, #27
   214fa:	d106      	bne.n	2150a <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   214fc:	69a2      	ldr	r2, [r4, #24]
   214fe:	b922      	cbnz	r2, 2150a <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   21500:	89da      	ldrh	r2, [r3, #14]
   21502:	2a7f      	cmp	r2, #127	; 0x7f
   21504:	d901      	bls.n	2150a <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   21506:	61eb      	str	r3, [r5, #28]
}
   21508:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   2150a:	429c      	cmp	r4, r3
   2150c:	d001      	beq.n	21512 <update_cache+0x32>
			z_reset_time_slice();
   2150e:	f7ff ff79 	bl	21404 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   21512:	61ec      	str	r4, [r5, #28]
}
   21514:	e7f8      	b.n	21508 <update_cache+0x28>
   21516:	bf00      	nop
   21518:	200027f0 	.word	0x200027f0
   2151c:	200027d0 	.word	0x200027d0

00021520 <move_thread_to_end_of_prio_q>:
{
   21520:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   21522:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   21526:	7b43      	ldrb	r3, [r0, #13]
   21528:	2a00      	cmp	r2, #0
{
   2152a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   2152c:	da04      	bge.n	21538 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2152e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21532:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   21534:	f006 ff4f 	bl	283d6 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   21538:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   2153a:	4a17      	ldr	r2, [pc, #92]	; (21598 <move_thread_to_end_of_prio_q+0x78>)
   2153c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   21540:	4610      	mov	r0, r2
   21542:	734b      	strb	r3, [r1, #13]
   21544:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   21548:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2154a:	4283      	cmp	r3, r0
   2154c:	bf08      	it	eq
   2154e:	2300      	moveq	r3, #0
   21550:	2b00      	cmp	r3, #0
   21552:	bf38      	it	cc
   21554:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21556:	b1cb      	cbz	r3, 2158c <move_thread_to_end_of_prio_q+0x6c>
	int32_t b1 = thread_1->base.prio;
   21558:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   2155c:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   21560:	42a6      	cmp	r6, r4
   21562:	d00f      	beq.n	21584 <move_thread_to_end_of_prio_q+0x64>
		return b2 - b1;
   21564:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   21566:	2c00      	cmp	r4, #0
   21568:	dd0c      	ble.n	21584 <move_thread_to_end_of_prio_q+0x64>
	sys_dnode_t *const prev = successor->prev;
   2156a:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   2156c:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   21570:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   21572:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   21574:	6890      	ldr	r0, [r2, #8]
   21576:	1a43      	subs	r3, r0, r1
   21578:	4258      	negs	r0, r3
}
   2157a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   2157e:	4158      	adcs	r0, r3
   21580:	f7ff bfae 	b.w	214e0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   21584:	42ab      	cmp	r3, r5
   21586:	d001      	beq.n	2158c <move_thread_to_end_of_prio_q+0x6c>
   21588:	681b      	ldr	r3, [r3, #0]
   2158a:	e7e4      	b.n	21556 <move_thread_to_end_of_prio_q+0x36>
	node->prev = tail;
   2158c:	e9c1 0500 	strd	r0, r5, [r1]
	tail->next = node;
   21590:	6029      	str	r1, [r5, #0]
	list->tail = node;
   21592:	6251      	str	r1, [r2, #36]	; 0x24
}
   21594:	e7ee      	b.n	21574 <move_thread_to_end_of_prio_q+0x54>
   21596:	bf00      	nop
   21598:	200027d0 	.word	0x200027d0

0002159c <z_time_slice>:
{
   2159c:	b570      	push	{r4, r5, r6, lr}
   2159e:	4601      	mov	r1, r0
	__asm__ volatile(
   215a0:	f04f 0340 	mov.w	r3, #64	; 0x40
   215a4:	f3ef 8411 	mrs	r4, BASEPRI
   215a8:	f383 8812 	msr	BASEPRI_MAX, r3
   215ac:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   215b0:	4b16      	ldr	r3, [pc, #88]	; (2160c <z_time_slice+0x70>)
   215b2:	4a17      	ldr	r2, [pc, #92]	; (21610 <z_time_slice+0x74>)
   215b4:	6898      	ldr	r0, [r3, #8]
   215b6:	6815      	ldr	r5, [r2, #0]
   215b8:	42a8      	cmp	r0, r5
   215ba:	461d      	mov	r5, r3
   215bc:	d106      	bne.n	215cc <z_time_slice+0x30>
			z_reset_time_slice();
   215be:	f7ff ff21 	bl	21404 <z_reset_time_slice>
	__asm__ volatile(
   215c2:	f384 8811 	msr	BASEPRI, r4
   215c6:	f3bf 8f6f 	isb	sy
}
   215ca:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   215cc:	2600      	movs	r6, #0
   215ce:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   215d0:	4a10      	ldr	r2, [pc, #64]	; (21614 <z_time_slice+0x78>)
   215d2:	6812      	ldr	r2, [r2, #0]
   215d4:	b1ba      	cbz	r2, 21606 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   215d6:	89c2      	ldrh	r2, [r0, #14]
   215d8:	2a7f      	cmp	r2, #127	; 0x7f
   215da:	d814      	bhi.n	21606 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   215dc:	7b42      	ldrb	r2, [r0, #13]
   215de:	06d2      	lsls	r2, r2, #27
   215e0:	d111      	bne.n	21606 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   215e2:	4a0d      	ldr	r2, [pc, #52]	; (21618 <z_time_slice+0x7c>)
   215e4:	f990 600e 	ldrsb.w	r6, [r0, #14]
   215e8:	6812      	ldr	r2, [r2, #0]
   215ea:	4296      	cmp	r6, r2
   215ec:	db0b      	blt.n	21606 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   215ee:	4a0b      	ldr	r2, [pc, #44]	; (2161c <z_time_slice+0x80>)
   215f0:	4290      	cmp	r0, r2
   215f2:	d008      	beq.n	21606 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   215f4:	691a      	ldr	r2, [r3, #16]
   215f6:	428a      	cmp	r2, r1
   215f8:	dc02      	bgt.n	21600 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   215fa:	f7ff ff91 	bl	21520 <move_thread_to_end_of_prio_q>
   215fe:	e7de      	b.n	215be <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   21600:	1a52      	subs	r2, r2, r1
   21602:	611a      	str	r2, [r3, #16]
   21604:	e7dd      	b.n	215c2 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   21606:	2300      	movs	r3, #0
   21608:	612b      	str	r3, [r5, #16]
   2160a:	e7da      	b.n	215c2 <z_time_slice+0x26>
   2160c:	200027d0 	.word	0x200027d0
   21610:	200027f8 	.word	0x200027f8
   21614:	20002800 	.word	0x20002800
   21618:	200027fc 	.word	0x200027fc
   2161c:	20002090 	.word	0x20002090

00021620 <ready_thread>:
{
   21620:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   21622:	f990 300d 	ldrsb.w	r3, [r0, #13]
   21626:	7b42      	ldrb	r2, [r0, #13]
   21628:	2b00      	cmp	r3, #0
   2162a:	db2d      	blt.n	21688 <ready_thread+0x68>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2162c:	06d3      	lsls	r3, r2, #27
   2162e:	d12b      	bne.n	21688 <ready_thread+0x68>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *to)
{
	return !sys_dnode_is_linked(&to->node);
   21630:	6983      	ldr	r3, [r0, #24]
   21632:	bb4b      	cbnz	r3, 21688 <ready_thread+0x68>
	return list->head == list;
   21634:	4915      	ldr	r1, [pc, #84]	; (2168c <ready_thread+0x6c>)
	thread->base.thread_state |= _THREAD_QUEUED;
   21636:	f062 027f 	orn	r2, r2, #127	; 0x7f
   2163a:	7342      	strb	r2, [r0, #13]
   2163c:	460a      	mov	r2, r1
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2163e:	6a4d      	ldr	r5, [r1, #36]	; 0x24
	return list->head == list;
   21640:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21644:	4294      	cmp	r4, r2
   21646:	bf18      	it	ne
   21648:	4623      	movne	r3, r4
   2164a:	2b00      	cmp	r3, #0
   2164c:	bf38      	it	cc
   2164e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21650:	b1ab      	cbz	r3, 2167e <ready_thread+0x5e>
	int32_t b1 = thread_1->base.prio;
   21652:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   21656:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   2165a:	42a6      	cmp	r6, r4
   2165c:	d00b      	beq.n	21676 <ready_thread+0x56>
		return b2 - b1;
   2165e:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   21660:	2c00      	cmp	r4, #0
   21662:	dd08      	ble.n	21676 <ready_thread+0x56>
	sys_dnode_t *const prev = successor->prev;
   21664:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   21666:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   2166a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   2166c:	6058      	str	r0, [r3, #4]
}
   2166e:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   21670:	2000      	movs	r0, #0
   21672:	f7ff bf35 	b.w	214e0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   21676:	42ab      	cmp	r3, r5
   21678:	d001      	beq.n	2167e <ready_thread+0x5e>
   2167a:	681b      	ldr	r3, [r3, #0]
   2167c:	e7e8      	b.n	21650 <ready_thread+0x30>
	node->prev = tail;
   2167e:	e9c0 2500 	strd	r2, r5, [r0]
	tail->next = node;
   21682:	6028      	str	r0, [r5, #0]
	list->tail = node;
   21684:	6248      	str	r0, [r1, #36]	; 0x24
}
   21686:	e7f2      	b.n	2166e <ready_thread+0x4e>
}
   21688:	bc70      	pop	{r4, r5, r6}
   2168a:	4770      	bx	lr
   2168c:	200027d0 	.word	0x200027d0

00021690 <z_sched_start>:
{
   21690:	b510      	push	{r4, lr}
	__asm__ volatile(
   21692:	f04f 0240 	mov.w	r2, #64	; 0x40
   21696:	f3ef 8411 	mrs	r4, BASEPRI
   2169a:	f382 8812 	msr	BASEPRI_MAX, r2
   2169e:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   216a2:	7b42      	ldrb	r2, [r0, #13]
   216a4:	0751      	lsls	r1, r2, #29
   216a6:	d404      	bmi.n	216b2 <z_sched_start+0x22>
	__asm__ volatile(
   216a8:	f384 8811 	msr	BASEPRI, r4
   216ac:	f3bf 8f6f 	isb	sy
}
   216b0:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   216b2:	f022 0204 	bic.w	r2, r2, #4
   216b6:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   216b8:	f7ff ffb2 	bl	21620 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   216bc:	4621      	mov	r1, r4
   216be:	4802      	ldr	r0, [pc, #8]	; (216c8 <z_sched_start+0x38>)
}
   216c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   216c4:	f7ff bee6 	b.w	21494 <z_reschedule>
   216c8:	200033dd 	.word	0x200033dd

000216cc <unready_thread>:
{
   216cc:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   216ce:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   216d2:	7b43      	ldrb	r3, [r0, #13]
   216d4:	2a00      	cmp	r2, #0
{
   216d6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   216d8:	da04      	bge.n	216e4 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   216da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   216de:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   216e0:	f006 fe79 	bl	283d6 <sys_dlist_remove>
	update_cache(thread == _current);
   216e4:	4b04      	ldr	r3, [pc, #16]	; (216f8 <unready_thread+0x2c>)
   216e6:	6898      	ldr	r0, [r3, #8]
   216e8:	1a43      	subs	r3, r0, r1
   216ea:	4258      	negs	r0, r3
   216ec:	4158      	adcs	r0, r3
}
   216ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   216f2:	f7ff bef5 	b.w	214e0 <update_cache>
   216f6:	bf00      	nop
   216f8:	200027d0 	.word	0x200027d0

000216fc <pend>:
{
   216fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21700:	4606      	mov	r6, r0
   21702:	4614      	mov	r4, r2
   21704:	461d      	mov	r5, r3
	__asm__ volatile(
   21706:	f04f 0340 	mov.w	r3, #64	; 0x40
   2170a:	f3ef 8711 	mrs	r7, BASEPRI
   2170e:	f383 8812 	msr	BASEPRI_MAX, r3
   21712:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   21716:	f006 feef 	bl	284f8 <add_to_waitq_locked>
	__asm__ volatile(
   2171a:	f387 8811 	msr	BASEPRI, r7
   2171e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21722:	1c6b      	adds	r3, r5, #1
   21724:	bf08      	it	eq
   21726:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   2172a:	d008      	beq.n	2173e <pend+0x42>

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   2172c:	4622      	mov	r2, r4
   2172e:	462b      	mov	r3, r5
   21730:	f106 0018 	add.w	r0, r6, #24
   21734:	4903      	ldr	r1, [pc, #12]	; (21744 <pend+0x48>)
}
   21736:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2173a:	f000 bb83 	b.w	21e44 <z_add_timeout>
   2173e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21742:	bf00      	nop
   21744:	000284b5 	.word	0x000284b5

00021748 <z_pend_curr>:
{
   21748:	b510      	push	{r4, lr}
	pending_current = _current;
   2174a:	4b07      	ldr	r3, [pc, #28]	; (21768 <z_pend_curr+0x20>)
   2174c:	6898      	ldr	r0, [r3, #8]
   2174e:	4b07      	ldr	r3, [pc, #28]	; (2176c <z_pend_curr+0x24>)
{
   21750:	460c      	mov	r4, r1
	pending_current = _current;
   21752:	6018      	str	r0, [r3, #0]
{
   21754:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   21756:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2175a:	f7ff ffcf 	bl	216fc <pend>
   2175e:	4620      	mov	r0, r4
}
   21760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21764:	f7f2 b9b4 	b.w	13ad0 <arch_swap>
   21768:	200027d0 	.word	0x200027d0
   2176c:	200027f8 	.word	0x200027f8

00021770 <z_set_prio>:
{
   21770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21772:	4604      	mov	r4, r0
	__asm__ volatile(
   21774:	f04f 0340 	mov.w	r3, #64	; 0x40
   21778:	f3ef 8611 	mrs	r6, BASEPRI
   2177c:	f383 8812 	msr	BASEPRI_MAX, r3
   21780:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   21784:	7b43      	ldrb	r3, [r0, #13]
   21786:	06da      	lsls	r2, r3, #27
   21788:	b249      	sxtb	r1, r1
   2178a:	d138      	bne.n	217fe <z_set_prio+0x8e>
	return !sys_dnode_is_linked(&to->node);
   2178c:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   2178e:	2d00      	cmp	r5, #0
   21790:	d135      	bne.n	217fe <z_set_prio+0x8e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21796:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   21798:	f006 fe1d 	bl	283d6 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   2179c:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
   2179e:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   217a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   217a4:	7343      	strb	r3, [r0, #13]
	return list->head == list;
   217a6:	4817      	ldr	r0, [pc, #92]	; (21804 <z_set_prio+0x94>)
   217a8:	4603      	mov	r3, r0
   217aa:	f853 7f20 	ldr.w	r7, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   217ae:	429f      	cmp	r7, r3
   217b0:	bf18      	it	ne
   217b2:	463d      	movne	r5, r7
   217b4:	2d00      	cmp	r5, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   217b6:	6a47      	ldr	r7, [r0, #36]	; 0x24
   217b8:	461a      	mov	r2, r3
   217ba:	462b      	mov	r3, r5
   217bc:	bf38      	it	cc
   217be:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   217c0:	b1c3      	cbz	r3, 217f4 <z_set_prio+0x84>
	int32_t b2 = thread_2->base.prio;
   217c2:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   217c6:	42a9      	cmp	r1, r5
   217c8:	d010      	beq.n	217ec <z_set_prio+0x7c>
		return b2 - b1;
   217ca:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   217cc:	2d00      	cmp	r5, #0
   217ce:	dd0d      	ble.n	217ec <z_set_prio+0x7c>
	sys_dnode_t *const prev = successor->prev;
   217d0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   217d2:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   217d6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   217d8:	605c      	str	r4, [r3, #4]
			update_cache(1);
   217da:	2001      	movs	r0, #1
   217dc:	f7ff fe80 	bl	214e0 <update_cache>
   217e0:	2001      	movs	r0, #1
	__asm__ volatile(
   217e2:	f386 8811 	msr	BASEPRI, r6
   217e6:	f3bf 8f6f 	isb	sy
}
   217ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   217ec:	42bb      	cmp	r3, r7
   217ee:	d001      	beq.n	217f4 <z_set_prio+0x84>
   217f0:	681b      	ldr	r3, [r3, #0]
   217f2:	e7e5      	b.n	217c0 <z_set_prio+0x50>
	node->prev = tail;
   217f4:	e9c4 2700 	strd	r2, r7, [r4]
	tail->next = node;
   217f8:	603c      	str	r4, [r7, #0]
	list->tail = node;
   217fa:	6244      	str	r4, [r0, #36]	; 0x24
}
   217fc:	e7ed      	b.n	217da <z_set_prio+0x6a>
			thread->base.prio = prio;
   217fe:	73a1      	strb	r1, [r4, #14]
   21800:	2000      	movs	r0, #0
   21802:	e7ee      	b.n	217e2 <z_set_prio+0x72>
   21804:	200027d0 	.word	0x200027d0

00021808 <z_impl_k_thread_suspend>:
{
   21808:	b570      	push	{r4, r5, r6, lr}
   2180a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   2180c:	3018      	adds	r0, #24
   2180e:	f006 ff17 	bl	28640 <z_abort_timeout>
	__asm__ volatile(
   21812:	f04f 0340 	mov.w	r3, #64	; 0x40
   21816:	f3ef 8611 	mrs	r6, BASEPRI
   2181a:	f383 8812 	msr	BASEPRI_MAX, r3
   2181e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   21822:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   21826:	7b63      	ldrb	r3, [r4, #13]
   21828:	2a00      	cmp	r2, #0
   2182a:	da05      	bge.n	21838 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2182c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21830:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   21832:	4620      	mov	r0, r4
   21834:	f006 fdcf 	bl	283d6 <sys_dlist_remove>
		update_cache(thread == _current);
   21838:	4d0b      	ldr	r5, [pc, #44]	; (21868 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2183a:	7b63      	ldrb	r3, [r4, #13]
   2183c:	68a8      	ldr	r0, [r5, #8]
   2183e:	f043 0310 	orr.w	r3, r3, #16
   21842:	7363      	strb	r3, [r4, #13]
   21844:	1b03      	subs	r3, r0, r4
   21846:	4258      	negs	r0, r3
   21848:	4158      	adcs	r0, r3
   2184a:	f7ff fe49 	bl	214e0 <update_cache>
	__asm__ volatile(
   2184e:	f386 8811 	msr	BASEPRI, r6
   21852:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   21856:	68ab      	ldr	r3, [r5, #8]
   21858:	42a3      	cmp	r3, r4
   2185a:	d103      	bne.n	21864 <z_impl_k_thread_suspend+0x5c>
}
   2185c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   21860:	f006 be04 	b.w	2846c <z_reschedule_unlocked>
}
   21864:	bd70      	pop	{r4, r5, r6, pc}
   21866:	bf00      	nop
   21868:	200027d0 	.word	0x200027d0

0002186c <k_sched_unlock>:
{
   2186c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2186e:	f04f 0340 	mov.w	r3, #64	; 0x40
   21872:	f3ef 8411 	mrs	r4, BASEPRI
   21876:	f383 8812 	msr	BASEPRI_MAX, r3
   2187a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   2187e:	4b08      	ldr	r3, [pc, #32]	; (218a0 <k_sched_unlock+0x34>)
   21880:	689a      	ldr	r2, [r3, #8]
   21882:	7bd3      	ldrb	r3, [r2, #15]
   21884:	3301      	adds	r3, #1
   21886:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   21888:	2000      	movs	r0, #0
   2188a:	f7ff fe29 	bl	214e0 <update_cache>
	__asm__ volatile(
   2188e:	f384 8811 	msr	BASEPRI, r4
   21892:	f3bf 8f6f 	isb	sy
}
   21896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   2189a:	f006 bde7 	b.w	2846c <z_reschedule_unlocked>
   2189e:	bf00      	nop
   218a0:	200027d0 	.word	0x200027d0

000218a4 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   218a4:	4b04      	ldr	r3, [pc, #16]	; (218b8 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   218a6:	2100      	movs	r1, #0
   218a8:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   218ac:	e9c3 2208 	strd	r2, r2, [r3, #32]
   218b0:	4608      	mov	r0, r1
   218b2:	f7ff bdbd 	b.w	21430 <k_sched_time_slice_set>
   218b6:	bf00      	nop
   218b8:	200027d0 	.word	0x200027d0

000218bc <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   218bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   218be:	f04f 0340 	mov.w	r3, #64	; 0x40
   218c2:	f3ef 8411 	mrs	r4, BASEPRI
   218c6:	f383 8812 	msr	BASEPRI_MAX, r3
   218ca:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   218ce:	491b      	ldr	r1, [pc, #108]	; (2193c <z_impl_k_yield+0x80>)
   218d0:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   218d2:	7b43      	ldrb	r3, [r0, #13]
   218d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   218d8:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   218da:	f006 fd7c 	bl	283d6 <sys_dlist_remove>
	}
	queue_thread(_current);
   218de:	688a      	ldr	r2, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   218e0:	7b53      	ldrb	r3, [r2, #13]
	return list->head == list;
   218e2:	4608      	mov	r0, r1
   218e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   218e8:	7353      	strb	r3, [r2, #13]
   218ea:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   218ee:	6a4e      	ldr	r6, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   218f0:	4283      	cmp	r3, r0
   218f2:	bf08      	it	eq
   218f4:	2300      	moveq	r3, #0
   218f6:	2b00      	cmp	r3, #0
   218f8:	bf38      	it	cc
   218fa:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   218fc:	b1cb      	cbz	r3, 21932 <z_impl_k_yield+0x76>
	int32_t b1 = thread_1->base.prio;
   218fe:	f992 700e 	ldrsb.w	r7, [r2, #14]
	int32_t b2 = thread_2->base.prio;
   21902:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   21906:	42af      	cmp	r7, r5
   21908:	d00f      	beq.n	2192a <z_impl_k_yield+0x6e>
		return b2 - b1;
   2190a:	1bed      	subs	r5, r5, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   2190c:	2d00      	cmp	r5, #0
   2190e:	dd0c      	ble.n	2192a <z_impl_k_yield+0x6e>
	sys_dnode_t *const prev = successor->prev;
   21910:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   21912:	e9c2 3100 	strd	r3, r1, [r2]
	prev->next = node;
   21916:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   21918:	605a      	str	r2, [r3, #4]
	update_cache(1);
   2191a:	2001      	movs	r0, #1
   2191c:	f7ff fde0 	bl	214e0 <update_cache>
   21920:	4620      	mov	r0, r4
	z_swap(&sched_spinlock, key);
}
   21922:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   21926:	f7f2 b8d3 	b.w	13ad0 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   2192a:	42b3      	cmp	r3, r6
   2192c:	d001      	beq.n	21932 <z_impl_k_yield+0x76>
   2192e:	681b      	ldr	r3, [r3, #0]
   21930:	e7e4      	b.n	218fc <z_impl_k_yield+0x40>
	node->prev = tail;
   21932:	e9c2 0600 	strd	r0, r6, [r2]
	tail->next = node;
   21936:	6032      	str	r2, [r6, #0]
	list->tail = node;
   21938:	624a      	str	r2, [r1, #36]	; 0x24
}
   2193a:	e7ee      	b.n	2191a <z_impl_k_yield+0x5e>
   2193c:	200027d0 	.word	0x200027d0

00021940 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   21940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21944:	4604      	mov	r4, r0
   21946:	460d      	mov	r5, r1
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   21948:	ea54 0105 	orrs.w	r1, r4, r5
   2194c:	d104      	bne.n	21958 <z_tick_sleep+0x18>
	z_impl_k_yield();
   2194e:	f7ff ffb5 	bl	218bc <z_impl_k_yield>
		k_yield();
		return 0;
   21952:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   21954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
   21958:	f06f 0101 	mvn.w	r1, #1
   2195c:	1a0a      	subs	r2, r1, r0
   2195e:	f04f 31ff 	mov.w	r1, #4294967295
   21962:	eb61 0305 	sbc.w	r3, r1, r5
   21966:	2a01      	cmp	r2, #1
   21968:	f173 0300 	sbcs.w	r3, r3, #0
   2196c:	da2a      	bge.n	219c4 <z_tick_sleep+0x84>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   2196e:	f006 fea7 	bl	286c0 <sys_clock_tick_get_32>
   21972:	1906      	adds	r6, r0, r4
   21974:	f04f 0340 	mov.w	r3, #64	; 0x40
   21978:	f3ef 8811 	mrs	r8, BASEPRI
   2197c:	f383 8812 	msr	BASEPRI_MAX, r3
   21980:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   21984:	4f11      	ldr	r7, [pc, #68]	; (219cc <z_tick_sleep+0x8c>)
   21986:	4b12      	ldr	r3, [pc, #72]	; (219d0 <z_tick_sleep+0x90>)
   21988:	68b8      	ldr	r0, [r7, #8]
   2198a:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   2198c:	f7ff fe9e 	bl	216cc <unready_thread>
	z_add_thread_timeout(_current, timeout);
   21990:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   21992:	4910      	ldr	r1, [pc, #64]	; (219d4 <z_tick_sleep+0x94>)
   21994:	4622      	mov	r2, r4
   21996:	462b      	mov	r3, r5
   21998:	3018      	adds	r0, #24
   2199a:	f000 fa53 	bl	21e44 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   2199e:	68ba      	ldr	r2, [r7, #8]
   219a0:	7b53      	ldrb	r3, [r2, #13]
   219a2:	f043 0310 	orr.w	r3, r3, #16
   219a6:	7353      	strb	r3, [r2, #13]
   219a8:	4640      	mov	r0, r8
   219aa:	f7f2 f891 	bl	13ad0 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   219ae:	f006 fe87 	bl	286c0 <sys_clock_tick_get_32>
   219b2:	1a30      	subs	r0, r6, r0
   219b4:	eb66 0106 	sbc.w	r1, r6, r6
	if (ticks > 0) {
   219b8:	2801      	cmp	r0, #1
   219ba:	f171 0300 	sbcs.w	r3, r1, #0
		return ticks;
   219be:	bfb8      	it	lt
   219c0:	2000      	movlt	r0, #0
   219c2:	e7c7      	b.n	21954 <z_tick_sleep+0x14>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   219c4:	f06f 0601 	mvn.w	r6, #1
   219c8:	1a36      	subs	r6, r6, r0
   219ca:	e7d3      	b.n	21974 <z_tick_sleep+0x34>
   219cc:	200027d0 	.word	0x200027d0
   219d0:	200027f8 	.word	0x200027f8
   219d4:	000284b5 	.word	0x000284b5

000219d8 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   219d8:	b508      	push	{r3, lr}
   219da:	460b      	mov	r3, r1
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   219dc:	3301      	adds	r3, #1
   219de:	bf08      	it	eq
   219e0:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   219e4:	d106      	bne.n	219f4 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   219e6:	4b08      	ldr	r3, [pc, #32]	; (21a08 <z_impl_k_sleep+0x30>)
   219e8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   219ea:	f7ff ff0d 	bl	21808 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   219ee:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   219f2:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   219f4:	f7ff ffa4 	bl	21940 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   219f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   219fc:	fb80 2303 	smull	r2, r3, r0, r3
   21a00:	0bd0      	lsrs	r0, r2, #15
   21a02:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   21a06:	e7f4      	b.n	219f2 <z_impl_k_sleep+0x1a>
   21a08:	200027d0 	.word	0x200027d0

00021a0c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   21a0c:	4b01      	ldr	r3, [pc, #4]	; (21a14 <z_impl_z_current_get+0x8>)
   21a0e:	6898      	ldr	r0, [r3, #8]
   21a10:	4770      	bx	lr
   21a12:	bf00      	nop
   21a14:	200027d0 	.word	0x200027d0

00021a18 <z_impl_k_is_preempt_thread>:
   21a18:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   21a1c:	b93b      	cbnz	r3, 21a2e <z_impl_k_is_preempt_thread+0x16>
   21a1e:	4b05      	ldr	r3, [pc, #20]	; (21a34 <z_impl_k_is_preempt_thread+0x1c>)
   21a20:	689b      	ldr	r3, [r3, #8]
   21a22:	89d8      	ldrh	r0, [r3, #14]
   21a24:	287f      	cmp	r0, #127	; 0x7f
   21a26:	bf8c      	ite	hi
   21a28:	2000      	movhi	r0, #0
   21a2a:	2001      	movls	r0, #1
   21a2c:	4770      	bx	lr
   21a2e:	2000      	movs	r0, #0
}
   21a30:	4770      	bx	lr
   21a32:	bf00      	nop
   21a34:	200027d0 	.word	0x200027d0

00021a38 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   21a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21a3c:	4604      	mov	r4, r0
   21a3e:	f04f 0340 	mov.w	r3, #64	; 0x40
   21a42:	f3ef 8611 	mrs	r6, BASEPRI
   21a46:	f383 8812 	msr	BASEPRI_MAX, r3
   21a4a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   21a4e:	7b43      	ldrb	r3, [r0, #13]
   21a50:	071a      	lsls	r2, r3, #28
   21a52:	d505      	bpl.n	21a60 <z_thread_abort+0x28>
	__asm__ volatile(
   21a54:	f386 8811 	msr	BASEPRI, r6
   21a58:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   21a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   21a60:	f023 0220 	bic.w	r2, r3, #32
   21a64:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   21a68:	09d2      	lsrs	r2, r2, #7
   21a6a:	d120      	bne.n	21aae <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   21a6c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   21a6e:	68a3      	ldr	r3, [r4, #8]
   21a70:	b113      	cbz	r3, 21a78 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   21a72:	4620      	mov	r0, r4
   21a74:	f006 fcb7 	bl	283e6 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   21a78:	f104 0018 	add.w	r0, r4, #24
   21a7c:	f006 fde0 	bl	28640 <z_abort_timeout>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   21a80:	f104 0758 	add.w	r7, r4, #88	; 0x58
   21a84:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   21a88:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21a8a:	42bd      	cmp	r5, r7
   21a8c:	d000      	beq.n	21a90 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   21a8e:	b9b5      	cbnz	r5, 21abe <z_thread_abort+0x86>
		update_cache(1);
   21a90:	2001      	movs	r0, #1
   21a92:	f7ff fd25 	bl	214e0 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   21a96:	4b10      	ldr	r3, [pc, #64]	; (21ad8 <z_thread_abort+0xa0>)
   21a98:	689b      	ldr	r3, [r3, #8]
   21a9a:	42a3      	cmp	r3, r4
   21a9c:	d1da      	bne.n	21a54 <z_thread_abort+0x1c>
   21a9e:	f3ef 8305 	mrs	r3, IPSR
   21aa2:	2b00      	cmp	r3, #0
   21aa4:	d1d6      	bne.n	21a54 <z_thread_abort+0x1c>
   21aa6:	4630      	mov	r0, r6
   21aa8:	f7f2 f812 	bl	13ad0 <arch_swap>
	return ret;
   21aac:	e7d2      	b.n	21a54 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21aae:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   21ab2:	f043 0308 	orr.w	r3, r3, #8
   21ab6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   21ab8:	f006 fc8d 	bl	283d6 <sys_dlist_remove>
}
   21abc:	e7d7      	b.n	21a6e <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   21abe:	4628      	mov	r0, r5
   21ac0:	f006 fc91 	bl	283e6 <unpend_thread_no_timeout>
   21ac4:	f105 0018 	add.w	r0, r5, #24
   21ac8:	f006 fdba 	bl	28640 <z_abort_timeout>
   21acc:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   21ad0:	4628      	mov	r0, r5
   21ad2:	f7ff fda5 	bl	21620 <ready_thread>
   21ad6:	e7d7      	b.n	21a88 <z_thread_abort+0x50>
   21ad8:	200027d0 	.word	0x200027d0

00021adc <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   21adc:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   21ade:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   21ae2:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   21ae4:	e9cd 6700 	strd	r6, r7, [sp]
   21ae8:	f7ff fe2e 	bl	21748 <z_pend_curr>

	if (data != NULL) {
   21aec:	b11c      	cbz	r4, 21af6 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   21aee:	4b03      	ldr	r3, [pc, #12]	; (21afc <z_sched_wait+0x20>)
   21af0:	689b      	ldr	r3, [r3, #8]
   21af2:	695b      	ldr	r3, [r3, #20]
   21af4:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   21af6:	b002      	add	sp, #8
   21af8:	bdd0      	pop	{r4, r6, r7, pc}
   21afa:	bf00      	nop
   21afc:	200027d0 	.word	0x200027d0

00021b00 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   21b00:	b538      	push	{r3, r4, r5, lr}
   21b02:	4604      	mov	r4, r0
	__asm__ volatile(
   21b04:	f04f 0340 	mov.w	r3, #64	; 0x40
   21b08:	f3ef 8511 	mrs	r5, BASEPRI
   21b0c:	f383 8812 	msr	BASEPRI_MAX, r3
   21b10:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   21b14:	f006 fd32 	bl	2857c <z_unpend_first_thread>

	if (thread != NULL) {
   21b18:	b148      	cbz	r0, 21b2e <z_impl_k_sem_give+0x2e>
   21b1a:	2200      	movs	r2, #0
   21b1c:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   21b1e:	f006 fcb9 	bl	28494 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   21b22:	4629      	mov	r1, r5
   21b24:	4808      	ldr	r0, [pc, #32]	; (21b48 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   21b26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   21b2a:	f7ff bcb3 	b.w	21494 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   21b2e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   21b32:	429a      	cmp	r2, r3
   21b34:	bf18      	it	ne
   21b36:	3301      	addne	r3, #1
   21b38:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   21b3a:	2102      	movs	r1, #2
   21b3c:	f104 0010 	add.w	r0, r4, #16
   21b40:	f006 fb6e 	bl	28220 <z_handle_obj_poll_events>
}
   21b44:	e7ed      	b.n	21b22 <z_impl_k_sem_give+0x22>
   21b46:	bf00      	nop
   21b48:	200033dd 	.word	0x200033dd

00021b4c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   21b4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21b4e:	4614      	mov	r4, r2
   21b50:	461d      	mov	r5, r3
   21b52:	f04f 0340 	mov.w	r3, #64	; 0x40
   21b56:	f3ef 8111 	mrs	r1, BASEPRI
   21b5a:	f383 8812 	msr	BASEPRI_MAX, r3
   21b5e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   21b62:	6883      	ldr	r3, [r0, #8]
   21b64:	b143      	cbz	r3, 21b78 <z_impl_k_sem_take+0x2c>
		sem->count--;
   21b66:	3b01      	subs	r3, #1
   21b68:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   21b6a:	f381 8811 	msr	BASEPRI, r1
   21b6e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   21b72:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   21b74:	b003      	add	sp, #12
   21b76:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   21b78:	ea54 0305 	orrs.w	r3, r4, r5
   21b7c:	d106      	bne.n	21b8c <z_impl_k_sem_take+0x40>
   21b7e:	f381 8811 	msr	BASEPRI, r1
   21b82:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   21b86:	f06f 000f 	mvn.w	r0, #15
   21b8a:	e7f3      	b.n	21b74 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   21b8c:	4602      	mov	r2, r0
   21b8e:	e9cd 4500 	strd	r4, r5, [sp]
   21b92:	4802      	ldr	r0, [pc, #8]	; (21b9c <z_impl_k_sem_take+0x50>)
   21b94:	f7ff fdd8 	bl	21748 <z_pend_curr>
	return ret;
   21b98:	e7ec      	b.n	21b74 <z_impl_k_sem_take+0x28>
   21b9a:	bf00      	nop
   21b9c:	200033dd 	.word	0x200033dd

00021ba0 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   21ba0:	b570      	push	{r4, r5, r6, lr}
   21ba2:	4604      	mov	r4, r0
	__asm__ volatile(
   21ba4:	f04f 0340 	mov.w	r3, #64	; 0x40
   21ba8:	f3ef 8511 	mrs	r5, BASEPRI
   21bac:	f383 8812 	msr	BASEPRI_MAX, r3
   21bb0:	f3bf 8f6f 	isb	sy
   21bb4:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   21bb8:	4620      	mov	r0, r4
   21bba:	f006 fcdf 	bl	2857c <z_unpend_first_thread>
		if (thread == NULL) {
   21bbe:	b118      	cbz	r0, 21bc8 <z_impl_k_sem_reset+0x28>
   21bc0:	67c6      	str	r6, [r0, #124]	; 0x7c
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   21bc2:	f006 fc67 	bl	28494 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   21bc6:	e7f7      	b.n	21bb8 <z_impl_k_sem_reset+0x18>
	}
	sem->count = 0;
   21bc8:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   21bca:	2102      	movs	r1, #2
   21bcc:	f104 0010 	add.w	r0, r4, #16
   21bd0:	f006 fb26 	bl	28220 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   21bd4:	4629      	mov	r1, r5
   21bd6:	4802      	ldr	r0, [pc, #8]	; (21be0 <z_impl_k_sem_reset+0x40>)
}
   21bd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   21bdc:	f7ff bc5a 	b.w	21494 <z_reschedule>
   21be0:	200033dd 	.word	0x200033dd

00021be4 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   21be4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   21be6:	4b09      	ldr	r3, [pc, #36]	; (21c0c <k_sys_work_q_init+0x28>)
   21be8:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   21bea:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   21bec:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   21bee:	9300      	str	r3, [sp, #0]
   21bf0:	4907      	ldr	r1, [pc, #28]	; (21c10 <k_sys_work_q_init+0x2c>)
   21bf2:	4808      	ldr	r0, [pc, #32]	; (21c14 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   21bf4:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   21bf8:	f04f 33ff 	mov.w	r3, #4294967295
   21bfc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   21c00:	f000 fbe4 	bl	223cc <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   21c04:	4620      	mov	r0, r4
   21c06:	b004      	add	sp, #16
   21c08:	bd10      	pop	{r4, pc}
   21c0a:	bf00      	nop
   21c0c:	0002c8bf 	.word	0x0002c8bf
   21c10:	20006bc0 	.word	0x20006bc0
   21c14:	20002190 	.word	0x20002190

00021c18 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   21c18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   21c1c:	4699      	mov	r9, r3
	sys_dlist_init(&w->waitq);
   21c1e:	f100 0358 	add.w	r3, r0, #88	; 0x58
	list->tail = (sys_dnode_t *)list;
   21c22:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   21c26:	3207      	adds	r2, #7
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   21c28:	9b10      	ldr	r3, [sp, #64]	; 0x40
   21c2a:	7303      	strb	r3, [r0, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   21c2c:	f022 0507 	bic.w	r5, r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
   21c30:	2304      	movs	r3, #4
	thread_base->pended_on = NULL;
   21c32:	2600      	movs	r6, #0
	thread_base->thread_state = (uint8_t)initial_state;
   21c34:	7343      	strb	r3, [r0, #13]

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   21c36:	f101 0a20 	add.w	sl, r1, #32

	thread_base->prio = priority;
   21c3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   21c3c:	7383      	strb	r3, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   21c3e:	f105 0820 	add.w	r8, r5, #32
{
   21c42:	4604      	mov	r4, r0
	node->prev = NULL;
   21c44:	e9c0 6606 	strd	r6, r6, [r0, #24]
   21c48:	460f      	mov	r7, r1
	thread_base->pended_on = NULL;
   21c4a:	6086      	str	r6, [r0, #8]

	thread_base->sched_locked = 0U;
   21c4c:	73c6      	strb	r6, [r0, #15]
	stack_ptr = (char *)stack + stack_obj_size;
   21c4e:	4488      	add	r8, r1
	memset(stack_buf_start, 0xaa, stack_buf_size);
   21c50:	462a      	mov	r2, r5
   21c52:	21aa      	movs	r1, #170	; 0xaa
   21c54:	4650      	mov	r0, sl
   21c56:	f003 f91e 	bl	24e96 <memset>
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   21c5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21c5c:	9302      	str	r3, [sp, #8]
   21c5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   21c60:	9301      	str	r3, [sp, #4]
   21c62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   21c64:	9300      	str	r3, [sp, #0]
	new_thread->stack_info.size = stack_buf_size;
   21c66:	e9c4 a51a 	strd	sl, r5, [r4, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   21c6a:	464b      	mov	r3, r9
	new_thread->stack_info.delta = delta;
   21c6c:	6726      	str	r6, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   21c6e:	4642      	mov	r2, r8
   21c70:	4639      	mov	r1, r7
   21c72:	4620      	mov	r0, r4
   21c74:	f7f1 ff46 	bl	13b04 <arch_new_thread>
	if (!_current) {
   21c78:	4b04      	ldr	r3, [pc, #16]	; (21c8c <z_setup_new_thread+0x74>)
	new_thread->init_data = NULL;
   21c7a:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
   21c7c:	689b      	ldr	r3, [r3, #8]
   21c7e:	b103      	cbz	r3, 21c82 <z_setup_new_thread+0x6a>
	new_thread->resource_pool = _current->resource_pool;
   21c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   21c82:	6763      	str	r3, [r4, #116]	; 0x74
}
   21c84:	4640      	mov	r0, r8
   21c86:	b004      	add	sp, #16
   21c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21c8c:	200027d0 	.word	0x200027d0

00021c90 <z_impl_k_thread_create>:
{
   21c90:	b5f0      	push	{r4, r5, r6, r7, lr}
   21c92:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   21c94:	2500      	movs	r5, #0
   21c96:	9505      	str	r5, [sp, #20]
   21c98:	9d10      	ldr	r5, [sp, #64]	; 0x40
   21c9a:	9504      	str	r5, [sp, #16]
   21c9c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   21c9e:	9503      	str	r5, [sp, #12]
   21ca0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   21ca2:	9502      	str	r5, [sp, #8]
{
   21ca4:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   21ca8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   21caa:	9501      	str	r5, [sp, #4]
   21cac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   21cae:	9500      	str	r5, [sp, #0]
{
   21cb0:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   21cb2:	f7ff ffb1 	bl	21c18 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   21cb6:	1c7b      	adds	r3, r7, #1
   21cb8:	bf08      	it	eq
   21cba:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   21cbe:	d005      	beq.n	21ccc <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   21cc0:	ea56 0307 	orrs.w	r3, r6, r7
   21cc4:	d105      	bne.n	21cd2 <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   21cc6:	4620      	mov	r0, r4
   21cc8:	f7ff fce2 	bl	21690 <z_sched_start>
}
   21ccc:	4620      	mov	r0, r4
   21cce:	b007      	add	sp, #28
   21cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   21cd2:	4904      	ldr	r1, [pc, #16]	; (21ce4 <z_impl_k_thread_create+0x54>)
   21cd4:	4632      	mov	r2, r6
   21cd6:	463b      	mov	r3, r7
   21cd8:	f104 0018 	add.w	r0, r4, #24
   21cdc:	f000 f8b2 	bl	21e44 <z_add_timeout>
   21ce0:	e7f4      	b.n	21ccc <z_impl_k_thread_create+0x3c>
   21ce2:	bf00      	nop
   21ce4:	000284b5 	.word	0x000284b5

00021ce8 <z_init_static_threads>:
{
   21ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   21cec:	4e2a      	ldr	r6, [pc, #168]	; (21d98 <z_init_static_threads+0xb0>)
   21cee:	4d2b      	ldr	r5, [pc, #172]	; (21d9c <z_init_static_threads+0xb4>)
{
   21cf0:	b086      	sub	sp, #24
   21cf2:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
   21cf4:	42b5      	cmp	r5, r6
   21cf6:	f105 0430 	add.w	r4, r5, #48	; 0x30
   21cfa:	d310      	bcc.n	21d1e <z_init_static_threads+0x36>
	k_sched_lock();
   21cfc:	f7ff fbdc 	bl	214b8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   21d00:	4c26      	ldr	r4, [pc, #152]	; (21d9c <z_init_static_threads+0xb4>)
   21d02:	f8df a09c 	ldr.w	sl, [pc, #156]	; 21da0 <z_init_static_threads+0xb8>
   21d06:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   21d0a:	f240 36e7 	movw	r6, #999	; 0x3e7
   21d0e:	2700      	movs	r7, #0
   21d10:	4544      	cmp	r4, r8
   21d12:	d321      	bcc.n	21d58 <z_init_static_threads+0x70>
}
   21d14:	b006      	add	sp, #24
   21d16:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   21d1a:	f7ff bda7 	b.w	2186c <k_sched_unlock>
		z_setup_new_thread(
   21d1e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   21d22:	9305      	str	r3, [sp, #20]
   21d24:	f854 3c10 	ldr.w	r3, [r4, #-16]
   21d28:	9304      	str	r3, [sp, #16]
   21d2a:	f854 3c14 	ldr.w	r3, [r4, #-20]
   21d2e:	9303      	str	r3, [sp, #12]
   21d30:	f854 3c18 	ldr.w	r3, [r4, #-24]
   21d34:	9302      	str	r3, [sp, #8]
   21d36:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   21d3a:	9301      	str	r3, [sp, #4]
   21d3c:	f854 3c20 	ldr.w	r3, [r4, #-32]
   21d40:	9300      	str	r3, [sp, #0]
   21d42:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   21d46:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   21d4a:	f7ff ff65 	bl	21c18 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   21d4e:	f854 3c30 	ldr.w	r3, [r4, #-48]
   21d52:	655d      	str	r5, [r3, #84]	; 0x54
   21d54:	4625      	mov	r5, r4
   21d56:	e7cd      	b.n	21cf4 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   21d58:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21d5a:	1c5a      	adds	r2, r3, #1
   21d5c:	d00d      	beq.n	21d7a <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
   21d5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   21d62:	4630      	mov	r0, r6
   21d64:	4639      	mov	r1, r7
   21d66:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   21d6a:	42b9      	cmp	r1, r7
   21d6c:	bf08      	it	eq
   21d6e:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   21d70:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   21d72:	d104      	bne.n	21d7e <z_init_static_threads+0x96>
	z_sched_start(thread);
   21d74:	4628      	mov	r0, r5
   21d76:	f7ff fc8b 	bl	21690 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   21d7a:	3430      	adds	r4, #48	; 0x30
   21d7c:	e7c8      	b.n	21d10 <z_init_static_threads+0x28>
   21d7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   21d82:	2300      	movs	r3, #0
   21d84:	f7de f9ac 	bl	e0 <__aeabi_uldivmod>
   21d88:	4602      	mov	r2, r0
   21d8a:	460b      	mov	r3, r1
   21d8c:	f105 0018 	add.w	r0, r5, #24
   21d90:	4651      	mov	r1, sl
   21d92:	f000 f857 	bl	21e44 <z_add_timeout>
   21d96:	e7f0      	b.n	21d7a <z_init_static_threads+0x92>
   21d98:	20000910 	.word	0x20000910
   21d9c:	20000910 	.word	0x20000910
   21da0:	000284b5 	.word	0x000284b5

00021da4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   21da4:	4b03      	ldr	r3, [pc, #12]	; (21db4 <elapsed+0x10>)
   21da6:	681b      	ldr	r3, [r3, #0]
   21da8:	b90b      	cbnz	r3, 21dae <elapsed+0xa>
   21daa:	f7fc bff3 	b.w	1ed94 <sys_clock_elapsed>
}
   21dae:	2000      	movs	r0, #0
   21db0:	4770      	bx	lr
   21db2:	bf00      	nop
   21db4:	20002804 	.word	0x20002804

00021db8 <remove_timeout>:
{
   21db8:	b530      	push	{r4, r5, lr}
   21dba:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   21dbc:	b168      	cbz	r0, 21dda <remove_timeout+0x22>
   21dbe:	4a0a      	ldr	r2, [pc, #40]	; (21de8 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   21dc0:	6852      	ldr	r2, [r2, #4]
   21dc2:	4290      	cmp	r0, r2
   21dc4:	d009      	beq.n	21dda <remove_timeout+0x22>
	if (next(t) != NULL) {
   21dc6:	b143      	cbz	r3, 21dda <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   21dc8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   21dcc:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   21dd0:	1912      	adds	r2, r2, r4
   21dd2:	eb45 0101 	adc.w	r1, r5, r1
   21dd6:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
   21dda:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   21ddc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   21dde:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   21de0:	2300      	movs	r3, #0
	node->prev = NULL;
   21de2:	e9c0 3300 	strd	r3, r3, [r0]
}
   21de6:	bd30      	pop	{r4, r5, pc}
   21de8:	20000794 	.word	0x20000794

00021dec <next_timeout>:

static int32_t next_timeout(void)
{
   21dec:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   21dee:	4b13      	ldr	r3, [pc, #76]	; (21e3c <next_timeout+0x50>)
   21df0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21df2:	429c      	cmp	r4, r3
   21df4:	bf08      	it	eq
   21df6:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   21df8:	f7ff ffd4 	bl	21da4 <elapsed>
   21dfc:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   21dfe:	b1bc      	cbz	r4, 21e30 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   21e00:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   21e04:	1b40      	subs	r0, r0, r5
   21e06:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   21e0a:	2801      	cmp	r0, #1
   21e0c:	f171 0300 	sbcs.w	r3, r1, #0
   21e10:	db11      	blt.n	21e36 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   21e12:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   21e16:	2300      	movs	r3, #0
   21e18:	4282      	cmp	r2, r0
   21e1a:	eb73 0401 	sbcs.w	r4, r3, r1
   21e1e:	da00      	bge.n	21e22 <next_timeout+0x36>
   21e20:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   21e22:	4b07      	ldr	r3, [pc, #28]	; (21e40 <next_timeout+0x54>)
   21e24:	691b      	ldr	r3, [r3, #16]
   21e26:	b113      	cbz	r3, 21e2e <next_timeout+0x42>
   21e28:	4298      	cmp	r0, r3
   21e2a:	bfa8      	it	ge
   21e2c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   21e2e:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   21e30:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   21e34:	e7f5      	b.n	21e22 <next_timeout+0x36>
   21e36:	2000      	movs	r0, #0
   21e38:	e7f3      	b.n	21e22 <next_timeout+0x36>
   21e3a:	bf00      	nop
   21e3c:	20000794 	.word	0x20000794
   21e40:	200027d0 	.word	0x200027d0

00021e44 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21e44:	f1b3 3fff 	cmp.w	r3, #4294967295
   21e48:	bf08      	it	eq
   21e4a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   21e4e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21e52:	4604      	mov	r4, r0
   21e54:	4692      	mov	sl, r2
   21e56:	469b      	mov	fp, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21e58:	d073      	beq.n	21f42 <z_add_timeout+0xfe>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   21e5a:	6081      	str	r1, [r0, #8]
   21e5c:	f04f 0340 	mov.w	r3, #64	; 0x40
   21e60:	f3ef 8511 	mrs	r5, BASEPRI
   21e64:	f383 8812 	msr	BASEPRI_MAX, r3
   21e68:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   21e6c:	f06f 0301 	mvn.w	r3, #1
   21e70:	ebb3 080a 	subs.w	r8, r3, sl
   21e74:	f04f 32ff 	mov.w	r2, #4294967295
   21e78:	eb62 090b 	sbc.w	r9, r2, fp
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   21e7c:	f1b8 0f00 	cmp.w	r8, #0
   21e80:	f179 0100 	sbcs.w	r1, r9, #0
   21e84:	db1c      	blt.n	21ec0 <z_add_timeout+0x7c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   21e86:	4830      	ldr	r0, [pc, #192]	; (21f48 <z_add_timeout+0x104>)
   21e88:	e9d0 1000 	ldrd	r1, r0, [r0]
   21e8c:	1a5b      	subs	r3, r3, r1
   21e8e:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
   21e92:	ebb3 060a 	subs.w	r6, r3, sl
   21e96:	eb62 070b 	sbc.w	r7, r2, fp
   21e9a:	2e01      	cmp	r6, #1
   21e9c:	f177 0300 	sbcs.w	r3, r7, #0
   21ea0:	bfbc      	itt	lt
   21ea2:	2601      	movlt	r6, #1
   21ea4:	2700      	movlt	r7, #0
   21ea6:	e9c4 6704 	strd	r6, r7, [r4, #16]
	return list->head == list;
   21eaa:	4a28      	ldr	r2, [pc, #160]	; (21f4c <z_add_timeout+0x108>)
   21eac:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21eb0:	4293      	cmp	r3, r2
   21eb2:	d11e      	bne.n	21ef2 <z_add_timeout+0xae>
	node->prev = tail;
   21eb4:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
   21eb8:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   21ebc:	6054      	str	r4, [r2, #4]
}
   21ebe:	e02d      	b.n	21f1c <z_add_timeout+0xd8>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   21ec0:	f7ff ff70 	bl	21da4 <elapsed>
   21ec4:	f11a 0301 	adds.w	r3, sl, #1
   21ec8:	9300      	str	r3, [sp, #0]
   21eca:	f14b 0300 	adc.w	r3, fp, #0
   21ece:	9301      	str	r3, [sp, #4]
   21ed0:	e9dd 2300 	ldrd	r2, r3, [sp]
   21ed4:	1812      	adds	r2, r2, r0
   21ed6:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
   21eda:	e9c4 2304 	strd	r2, r3, [r4, #16]
   21ede:	e7e4      	b.n	21eaa <z_add_timeout+0x66>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   21ee0:	ebb6 0008 	subs.w	r0, r6, r8
   21ee4:	eb67 0109 	sbc.w	r1, r7, r9
	return (node == list->tail) ? NULL : node->next;
   21ee8:	4563      	cmp	r3, ip
   21eea:	e9c4 0104 	strd	r0, r1, [r4, #16]
   21eee:	d0e1      	beq.n	21eb4 <z_add_timeout+0x70>
   21ef0:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   21ef2:	2b00      	cmp	r3, #0
   21ef4:	d0de      	beq.n	21eb4 <z_add_timeout+0x70>
			if (t->dticks > to->dticks) {
   21ef6:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
   21efa:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
   21efe:	4546      	cmp	r6, r8
   21f00:	eb77 0109 	sbcs.w	r1, r7, r9
   21f04:	daec      	bge.n	21ee0 <z_add_timeout+0x9c>
				t->dticks -= to->dticks;
   21f06:	ebb8 0006 	subs.w	r0, r8, r6
   21f0a:	eb69 0107 	sbc.w	r1, r9, r7
   21f0e:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   21f12:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   21f14:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   21f18:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   21f1a:	605c      	str	r4, [r3, #4]
	return list->head == list;
   21f1c:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21f1e:	4293      	cmp	r3, r2
   21f20:	d00b      	beq.n	21f3a <z_add_timeout+0xf6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   21f22:	429c      	cmp	r4, r3
   21f24:	d109      	bne.n	21f3a <z_add_timeout+0xf6>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   21f26:	f7ff ff61 	bl	21dec <next_timeout>

			if (next_time == 0 ||
   21f2a:	b118      	cbz	r0, 21f34 <z_add_timeout+0xf0>
			    _current_cpu->slice_ticks != next_time) {
   21f2c:	4b08      	ldr	r3, [pc, #32]	; (21f50 <z_add_timeout+0x10c>)
			if (next_time == 0 ||
   21f2e:	691b      	ldr	r3, [r3, #16]
   21f30:	4283      	cmp	r3, r0
   21f32:	d002      	beq.n	21f3a <z_add_timeout+0xf6>
				sys_clock_set_timeout(next_time, false);
   21f34:	2100      	movs	r1, #0
   21f36:	f7fc fefd 	bl	1ed34 <sys_clock_set_timeout>
	__asm__ volatile(
   21f3a:	f385 8811 	msr	BASEPRI, r5
   21f3e:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   21f42:	b003      	add	sp, #12
   21f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21f48:	20002230 	.word	0x20002230
   21f4c:	20000794 	.word	0x20000794
   21f50:	200027d0 	.word	0x200027d0

00021f54 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   21f54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21f58:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   21f5a:	f7ff fb1f 	bl	2159c <z_time_slice>
	__asm__ volatile(
   21f5e:	f04f 0340 	mov.w	r3, #64	; 0x40
   21f62:	f3ef 8411 	mrs	r4, BASEPRI
   21f66:	f383 8812 	msr	BASEPRI_MAX, r3
   21f6a:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   21f6e:	4d2c      	ldr	r5, [pc, #176]	; (22020 <sys_clock_announce+0xcc>)
   21f70:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 22024 <sys_clock_announce+0xd0>
	return list->head == list;
   21f74:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 22028 <sys_clock_announce+0xd4>
   21f78:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   21f7a:	4651      	mov	r1, sl
   21f7c:	f8d5 c000 	ldr.w	ip, [r5]
   21f80:	f8db 0000 	ldr.w	r0, [fp]
   21f84:	4662      	mov	r2, ip
   21f86:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21f88:	4558      	cmp	r0, fp
   21f8a:	e9da 8900 	ldrd	r8, r9, [sl]
   21f8e:	e9cd 2300 	strd	r2, r3, [sp]
   21f92:	d00d      	beq.n	21fb0 <sys_clock_announce+0x5c>
   21f94:	b160      	cbz	r0, 21fb0 <sys_clock_announce+0x5c>
   21f96:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   21f9a:	45b4      	cmp	ip, r6
   21f9c:	41bb      	sbcs	r3, r7
   21f9e:	da1e      	bge.n	21fde <sys_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   21fa0:	9b00      	ldr	r3, [sp, #0]
   21fa2:	ebb6 0c03 	subs.w	ip, r6, r3
   21fa6:	9b01      	ldr	r3, [sp, #4]
   21fa8:	eb67 0603 	sbc.w	r6, r7, r3
   21fac:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
   21fb0:	9b00      	ldr	r3, [sp, #0]
   21fb2:	eb13 0208 	adds.w	r2, r3, r8
   21fb6:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   21fb8:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
   21fbc:	eb43 0309 	adc.w	r3, r3, r9
   21fc0:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
   21fc4:	602e      	str	r6, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   21fc6:	f7ff ff11 	bl	21dec <next_timeout>
   21fca:	4631      	mov	r1, r6
   21fcc:	f7fc feb2 	bl	1ed34 <sys_clock_set_timeout>
	__asm__ volatile(
   21fd0:	f384 8811 	msr	BASEPRI, r4
   21fd4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   21fd8:	b003      	add	sp, #12
   21fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   21fde:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
   21fe2:	f04f 0200 	mov.w	r2, #0
   21fe6:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   21fea:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   21fee:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   21ff2:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   21ff6:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   21ffa:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   21ffc:	f7ff fedc 	bl	21db8 <remove_timeout>
   22000:	f384 8811 	msr	BASEPRI, r4
   22004:	f3bf 8f6f 	isb	sy
		t->fn(t);
   22008:	6883      	ldr	r3, [r0, #8]
   2200a:	4798      	blx	r3
	__asm__ volatile(
   2200c:	f04f 0340 	mov.w	r3, #64	; 0x40
   22010:	f3ef 8411 	mrs	r4, BASEPRI
   22014:	f383 8812 	msr	BASEPRI_MAX, r3
   22018:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   2201c:	4901      	ldr	r1, [pc, #4]	; (22024 <sys_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   2201e:	e7ad      	b.n	21f7c <sys_clock_announce+0x28>
   22020:	20002804 	.word	0x20002804
   22024:	20002230 	.word	0x20002230
   22028:	20000794 	.word	0x20000794

0002202c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   2202c:	b510      	push	{r4, lr}
   2202e:	f04f 0340 	mov.w	r3, #64	; 0x40
   22032:	f3ef 8411 	mrs	r4, BASEPRI
   22036:	f383 8812 	msr	BASEPRI_MAX, r3
   2203a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   2203e:	f7fc fea9 	bl	1ed94 <sys_clock_elapsed>
   22042:	4b06      	ldr	r3, [pc, #24]	; (2205c <sys_clock_tick_get+0x30>)
   22044:	e9d3 2300 	ldrd	r2, r3, [r3]
   22048:	1812      	adds	r2, r2, r0
   2204a:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   2204e:	f384 8811 	msr	BASEPRI, r4
   22052:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   22056:	4610      	mov	r0, r2
   22058:	4619      	mov	r1, r3
   2205a:	bd10      	pop	{r4, pc}
   2205c:	20002230 	.word	0x20002230

00022060 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   22060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22062:	4604      	mov	r4, r0
	__asm__ volatile(
   22064:	f04f 0340 	mov.w	r3, #64	; 0x40
   22068:	f3ef 8511 	mrs	r5, BASEPRI
   2206c:	f383 8812 	msr	BASEPRI_MAX, r3
   22070:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   22074:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   22078:	1c56      	adds	r6, r2, #1
   2207a:	f143 0700 	adc.w	r7, r3, #0
   2207e:	2f00      	cmp	r7, #0
   22080:	bf08      	it	eq
   22082:	2e02      	cmpeq	r6, #2
   22084:	d302      	bcc.n	2208c <z_timer_expiration_handler+0x2c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   22086:	4917      	ldr	r1, [pc, #92]	; (220e4 <z_timer_expiration_handler+0x84>)
   22088:	f7ff fedc 	bl	21e44 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   2208c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2208e:	3301      	adds	r3, #1
   22090:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   22092:	6a23      	ldr	r3, [r4, #32]
   22094:	b173      	cbz	r3, 220b4 <z_timer_expiration_handler+0x54>
	__asm__ volatile(
   22096:	f385 8811 	msr	BASEPRI, r5
   2209a:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   2209e:	6a23      	ldr	r3, [r4, #32]
   220a0:	4620      	mov	r0, r4
   220a2:	4798      	blx	r3
	__asm__ volatile(
   220a4:	f04f 0340 	mov.w	r3, #64	; 0x40
   220a8:	f3ef 8511 	mrs	r5, BASEPRI
   220ac:	f383 8812 	msr	BASEPRI_MAX, r3
   220b0:	f3bf 8f6f 	isb	sy
	return list->head == list;
   220b4:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   220b8:	42a6      	cmp	r6, r4
   220ba:	d000      	beq.n	220be <z_timer_expiration_handler+0x5e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   220bc:	b926      	cbnz	r6, 220c8 <z_timer_expiration_handler+0x68>
	__asm__ volatile(
   220be:	f385 8811 	msr	BASEPRI, r5
   220c2:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   220c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	z_unpend_thread_no_timeout(thread);
   220c8:	4630      	mov	r0, r6
   220ca:	f006 f99f 	bl	2840c <z_unpend_thread_no_timeout>
   220ce:	2300      	movs	r3, #0
   220d0:	67f3      	str	r3, [r6, #124]	; 0x7c
   220d2:	f385 8811 	msr	BASEPRI, r5
   220d6:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   220da:	4630      	mov	r0, r6
}
   220dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   220e0:	f006 b9d8 	b.w	28494 <z_ready_thread>
   220e4:	00022061 	.word	0x00022061

000220e8 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   220e8:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   220ec:	4619      	mov	r1, r3
   220ee:	4606      	mov	r6, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   220f0:	1c4c      	adds	r4, r1, #1
{
   220f2:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   220f4:	bf08      	it	eq
   220f6:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   220fa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   220fe:	4680      	mov	r8, r0
   22100:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   22102:	d04c      	beq.n	2219e <z_impl_k_timer_start+0xb6>
   22104:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   22106:	1c6b      	adds	r3, r5, #1
   22108:	bf08      	it	eq
   2210a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   2210e:	4614      	mov	r4, r2
   22110:	d019      	beq.n	22146 <z_impl_k_timer_start+0x5e>
   22112:	ea54 0305 	orrs.w	r3, r4, r5
   22116:	d016      	beq.n	22146 <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
   22118:	f06f 0301 	mvn.w	r3, #1
   2211c:	ebb3 0a02 	subs.w	sl, r3, r2
   22120:	f04f 33ff 	mov.w	r3, #4294967295
   22124:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   22128:	f1ba 0f00 	cmp.w	sl, #0
   2212c:	f17b 0300 	sbcs.w	r3, fp, #0
   22130:	da09      	bge.n	22146 <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
   22132:	f112 34ff 	adds.w	r4, r2, #4294967295
   22136:	f145 35ff 	adc.w	r5, r5, #4294967295
   2213a:	2c01      	cmp	r4, #1
   2213c:	f175 0300 	sbcs.w	r3, r5, #0
   22140:	bfbc      	itt	lt
   22142:	2401      	movlt	r4, #1
   22144:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   22146:	f06f 0301 	mvn.w	r3, #1
   2214a:	1a1b      	subs	r3, r3, r0
   2214c:	9300      	str	r3, [sp, #0]
   2214e:	f04f 33ff 	mov.w	r3, #4294967295
   22152:	eb63 0301 	sbc.w	r3, r3, r1
   22156:	9301      	str	r3, [sp, #4]
   22158:	e9dd 2300 	ldrd	r2, r3, [sp]
   2215c:	2a00      	cmp	r2, #0
   2215e:	f173 0300 	sbcs.w	r3, r3, #0
   22162:	da0c      	bge.n	2217e <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
   22164:	f110 38ff 	adds.w	r8, r0, #4294967295
   22168:	f141 39ff 	adc.w	r9, r1, #4294967295
   2216c:	f1b8 0f00 	cmp.w	r8, #0
   22170:	f179 0300 	sbcs.w	r3, r9, #0
   22174:	bfbc      	itt	lt
   22176:	f04f 0800 	movlt.w	r8, #0
   2217a:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
   2217e:	4630      	mov	r0, r6
   22180:	f006 fa5e 	bl	28640 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   22184:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   22186:	4907      	ldr	r1, [pc, #28]	; (221a4 <z_impl_k_timer_start+0xbc>)
	timer->status = 0U;
   22188:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2218a:	4642      	mov	r2, r8
   2218c:	464b      	mov	r3, r9
   2218e:	4630      	mov	r0, r6
	timer->period = period;
   22190:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   22194:	b002      	add	sp, #8
   22196:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2219a:	f7ff be53 	b.w	21e44 <z_add_timeout>
}
   2219e:	b002      	add	sp, #8
   221a0:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   221a4:	00022061 	.word	0x00022061

000221a8 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   221a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   221ac:	4e4b      	ldr	r6, [pc, #300]	; (222dc <work_queue_main+0x134>)
{
   221ae:	b085      	sub	sp, #20
   221b0:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   221b2:	f04f 38ff 	mov.w	r8, #4294967295
   221b6:	f04f 39ff 	mov.w	r9, #4294967295
	__asm__ volatile(
   221ba:	f04f 0340 	mov.w	r3, #64	; 0x40
   221be:	f3ef 8711 	mrs	r7, BASEPRI
   221c2:	f383 8812 	msr	BASEPRI_MAX, r3
   221c6:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   221ca:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
   221ce:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
   221d2:	b985      	cbnz	r5, 221f6 <work_queue_main+0x4e>
	*flagp &= ~BIT(bit);
   221d4:	f023 0204 	bic.w	r2, r3, #4
		} else if (flag_test_and_clear(&queue->flags,
   221d8:	075d      	lsls	r5, r3, #29
	*flagp &= ~BIT(bit);
   221da:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
   221de:	d433      	bmi.n	22248 <work_queue_main+0xa0>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   221e0:	2300      	movs	r3, #0
   221e2:	e9cd 8900 	strd	r8, r9, [sp]
   221e6:	9302      	str	r3, [sp, #8]
   221e8:	f104 0288 	add.w	r2, r4, #136	; 0x88
   221ec:	4639      	mov	r1, r7
   221ee:	483c      	ldr	r0, [pc, #240]	; (222e0 <work_queue_main+0x138>)
   221f0:	f7ff fc74 	bl	21adc <z_sched_wait>
			continue;
   221f4:	e7e1      	b.n	221ba <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   221f6:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   221fa:	6829      	ldr	r1, [r5, #0]
	list->head = node;
   221fc:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   22200:	4295      	cmp	r5, r2
   22202:	d101      	bne.n	22208 <work_queue_main+0x60>
	list->tail = node;
   22204:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   22208:	f043 0302 	orr.w	r3, r3, #2
   2220c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   22210:	68eb      	ldr	r3, [r5, #12]
   22212:	f023 0304 	bic.w	r3, r3, #4
   22216:	f043 0301 	orr.w	r3, r3, #1
   2221a:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   2221c:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   2221e:	f387 8811 	msr	BASEPRI, r7
   22222:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   22226:	4628      	mov	r0, r5
   22228:	4798      	blx	r3
	__asm__ volatile(
   2222a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2222e:	f3ef 8b11 	mrs	fp, BASEPRI
   22232:	f383 8812 	msr	BASEPRI_MAX, r3
   22236:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   2223a:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2223c:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   2223e:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   22242:	d40b      	bmi.n	2225c <work_queue_main+0xb4>
	*flagp &= ~BIT(bit);
   22244:	60ea      	str	r2, [r5, #12]
   22246:	e00e      	b.n	22266 <work_queue_main+0xbe>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   22248:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   2224c:	2200      	movs	r2, #0
   2224e:	2101      	movs	r1, #1
   22250:	4628      	mov	r0, r5
   22252:	f006 f9bb 	bl	285cc <z_sched_wake>
   22256:	2800      	cmp	r0, #0
   22258:	d1f8      	bne.n	2224c <work_queue_main+0xa4>
   2225a:	e7c1      	b.n	221e0 <work_queue_main+0x38>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   2225c:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   2225e:	f023 0303 	bic.w	r3, r3, #3
   22262:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   22264:	b970      	cbnz	r0, 22284 <work_queue_main+0xdc>
	*flagp &= ~BIT(bit);
   22266:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   2226a:	f023 0302 	bic.w	r3, r3, #2
   2226e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   22272:	f38b 8811 	msr	BASEPRI, fp
   22276:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   2227a:	05d8      	lsls	r0, r3, #23
   2227c:	d49d      	bmi.n	221ba <work_queue_main+0x12>
	z_impl_k_yield();
   2227e:	f7ff fb1d 	bl	218bc <z_impl_k_yield>
}
   22282:	e79a      	b.n	221ba <work_queue_main+0x12>
	return node->next;
   22284:	6807      	ldr	r7, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22286:	f04f 0a00 	mov.w	sl, #0
   2228a:	2f00      	cmp	r7, #0
   2228c:	bf38      	it	cc
   2228e:	2700      	movcc	r7, #0
	parent->next = child;
   22290:	4653      	mov	r3, sl
		if (wc->work == work) {
   22292:	6842      	ldr	r2, [r0, #4]
   22294:	4295      	cmp	r5, r2
   22296:	4601      	mov	r1, r0
   22298:	d10e      	bne.n	222b8 <work_queue_main+0x110>
Z_GENLIST_REMOVE(slist, snode)
   2229a:	6801      	ldr	r1, [r0, #0]
   2229c:	f1ba 0f00 	cmp.w	sl, #0
   222a0:	d114      	bne.n	222cc <work_queue_main+0x124>
   222a2:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   222a4:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   222a6:	4290      	cmp	r0, r2
   222a8:	d100      	bne.n	222ac <work_queue_main+0x104>
	list->tail = node;
   222aa:	6071      	str	r1, [r6, #4]
	parent->next = child;
   222ac:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   222b0:	f7ff fc26 	bl	21b00 <z_impl_k_sem_give>
}
   222b4:	4651      	mov	r1, sl
   222b6:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   222b8:	2f00      	cmp	r7, #0
   222ba:	d0d4      	beq.n	22266 <work_queue_main+0xbe>
	return node->next;
   222bc:	683a      	ldr	r2, [r7, #0]
   222be:	2a00      	cmp	r2, #0
   222c0:	bf38      	it	cc
   222c2:	2200      	movcc	r2, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   222c4:	4638      	mov	r0, r7
   222c6:	468a      	mov	sl, r1
   222c8:	4617      	mov	r7, r2
   222ca:	e7e2      	b.n	22292 <work_queue_main+0xea>
	parent->next = child;
   222cc:	f8ca 1000 	str.w	r1, [sl]
Z_GENLIST_REMOVE(slist, snode)
   222d0:	6872      	ldr	r2, [r6, #4]
   222d2:	4290      	cmp	r0, r2
	list->tail = node;
   222d4:	bf08      	it	eq
   222d6:	f8c6 a004 	streq.w	sl, [r6, #4]
}
   222da:	e7e7      	b.n	222ac <work_queue_main+0x104>
   222dc:	20002808 	.word	0x20002808
   222e0:	200033dd 	.word	0x200033dd

000222e4 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   222e4:	68c3      	ldr	r3, [r0, #12]
{
   222e6:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   222e8:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   222ec:	079b      	lsls	r3, r3, #30
{
   222ee:	4605      	mov	r5, r0
   222f0:	460c      	mov	r4, r1
	if (ret) {
   222f2:	d50d      	bpl.n	22310 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   222f4:	2201      	movs	r2, #1
   222f6:	2100      	movs	r1, #0
   222f8:	f104 0008 	add.w	r0, r4, #8
   222fc:	f006 f983 	bl	28606 <z_impl_k_sem_init>
	parent->next = child;
   22300:	2300      	movs	r3, #0
   22302:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   22304:	4b05      	ldr	r3, [pc, #20]	; (2231c <cancel_sync_locked+0x38>)
	canceler->work = work;
   22306:	6065      	str	r5, [r4, #4]
   22308:	685a      	ldr	r2, [r3, #4]
   2230a:	b91a      	cbnz	r2, 22314 <cancel_sync_locked+0x30>
	list->head = node;
   2230c:	e9c3 4400 	strd	r4, r4, [r3]
}
   22310:	4630      	mov	r0, r6
   22312:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   22314:	6014      	str	r4, [r2, #0]
	list->tail = node;
   22316:	605c      	str	r4, [r3, #4]
}
   22318:	e7fa      	b.n	22310 <cancel_sync_locked+0x2c>
   2231a:	bf00      	nop
   2231c:	20002808 	.word	0x20002808

00022320 <submit_to_queue_locked>:
{
   22320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   22322:	68c3      	ldr	r3, [r0, #12]
   22324:	079a      	lsls	r2, r3, #30
{
   22326:	4604      	mov	r4, r0
   22328:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2232a:	f3c3 0540 	ubfx	r5, r3, #1, #1
   2232e:	d41f      	bmi.n	22370 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   22330:	075f      	lsls	r7, r3, #29
   22332:	d41f      	bmi.n	22374 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   22334:	680a      	ldr	r2, [r1, #0]
   22336:	b90a      	cbnz	r2, 2233c <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   22338:	6882      	ldr	r2, [r0, #8]
   2233a:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   2233c:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   2233e:	bf44      	itt	mi
   22340:	68a3      	ldrmi	r3, [r4, #8]
   22342:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   22344:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   22346:	bf4c      	ite	mi
   22348:	2502      	movmi	r5, #2
		ret = 1;
   2234a:	2501      	movpl	r5, #1
	if (queue == NULL) {
   2234c:	b37f      	cbz	r7, 223ae <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   2234e:	4b1b      	ldr	r3, [pc, #108]	; (223bc <submit_to_queue_locked+0x9c>)
   22350:	689b      	ldr	r3, [r3, #8]
   22352:	42bb      	cmp	r3, r7
   22354:	d111      	bne.n	2237a <submit_to_queue_locked+0x5a>
   22356:	f006 f966 	bl	28626 <k_is_in_isr>
   2235a:	f080 0001 	eor.w	r0, r0, #1
   2235e:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
   22360:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   22364:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   22366:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   2236a:	d523      	bpl.n	223b4 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   2236c:	b13a      	cbz	r2, 2237e <submit_to_queue_locked+0x5e>
   2236e:	b940      	cbnz	r0, 22382 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   22370:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   22374:	2300      	movs	r3, #0
   22376:	6033      	str	r3, [r6, #0]
	return ret;
   22378:	e013      	b.n	223a2 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   2237a:	2000      	movs	r0, #0
   2237c:	e7f0      	b.n	22360 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   2237e:	071b      	lsls	r3, r3, #28
   22380:	d4f6      	bmi.n	22370 <submit_to_queue_locked+0x50>
	parent->next = child;
   22382:	2300      	movs	r3, #0
   22384:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   22386:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   2238a:	b963      	cbnz	r3, 223a6 <submit_to_queue_locked+0x86>
	list->head = node;
   2238c:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   22390:	4638      	mov	r0, r7
   22392:	f006 f9ef 	bl	28774 <notify_queue_locked>
	*flagp |= BIT(bit);
   22396:	68e3      	ldr	r3, [r4, #12]
   22398:	f043 0304 	orr.w	r3, r3, #4
   2239c:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   2239e:	6833      	ldr	r3, [r6, #0]
   223a0:	60a3      	str	r3, [r4, #8]
}
   223a2:	4628      	mov	r0, r5
   223a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   223a6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   223a8:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   223ac:	e7f0      	b.n	22390 <submit_to_queue_locked+0x70>
		return -EINVAL;
   223ae:	f06f 0515 	mvn.w	r5, #21
   223b2:	e7df      	b.n	22374 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   223b4:	f06f 0512 	mvn.w	r5, #18
   223b8:	e7dc      	b.n	22374 <submit_to_queue_locked+0x54>
   223ba:	bf00      	nop
   223bc:	200027d0 	.word	0x200027d0

000223c0 <k_work_submit>:
{
   223c0:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   223c2:	4801      	ldr	r0, [pc, #4]	; (223c8 <k_work_submit+0x8>)
   223c4:	f006 ba46 	b.w	28854 <k_work_submit_to_queue>
   223c8:	20002190 	.word	0x20002190

000223cc <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   223cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   223ce:	b089      	sub	sp, #36	; 0x24
   223d0:	4604      	mov	r4, r0
	list->head = NULL;
   223d2:	2000      	movs	r0, #0
	list->tail = NULL;
   223d4:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   223d8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   223da:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   223de:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   223e2:	f104 0090 	add.w	r0, r4, #144	; 0x90
   223e6:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   223ea:	b31d      	cbz	r5, 22434 <k_work_queue_start+0x68>
   223ec:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   223ee:	2800      	cmp	r0, #0
   223f0:	f240 1001 	movw	r0, #257	; 0x101
   223f4:	bf08      	it	eq
   223f6:	2001      	moveq	r0, #1
	*flagp = flags;
   223f8:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   223fc:	2000      	movs	r0, #0
   223fe:	f04f 36ff 	mov.w	r6, #4294967295
   22402:	f04f 37ff 	mov.w	r7, #4294967295
   22406:	e9cd 3003 	strd	r3, r0, [sp, #12]
   2240a:	e9cd 0001 	strd	r0, r0, [sp, #4]
   2240e:	e9cd 6706 	strd	r6, r7, [sp, #24]
   22412:	4b09      	ldr	r3, [pc, #36]	; (22438 <k_work_queue_start+0x6c>)
   22414:	9400      	str	r4, [sp, #0]
   22416:	4620      	mov	r0, r4
   22418:	f7ff fc3a 	bl	21c90 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   2241c:	b125      	cbz	r5, 22428 <k_work_queue_start+0x5c>
   2241e:	6829      	ldr	r1, [r5, #0]
   22420:	b111      	cbz	r1, 22428 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   22422:	4620      	mov	r0, r4
   22424:	f006 f905 	bl	28632 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   22428:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   2242a:	b009      	add	sp, #36	; 0x24
   2242c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   22430:	f006 b904 	b.w	2863c <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   22434:	2001      	movs	r0, #1
   22436:	e7df      	b.n	223f8 <k_work_queue_start+0x2c>
   22438:	000221a9 	.word	0x000221a9

0002243c <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   2243c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2243e:	4614      	mov	r4, r2
   22440:	9001      	str	r0, [sp, #4]
   22442:	461d      	mov	r5, r3
   22444:	4608      	mov	r0, r1
	__asm__ volatile(
   22446:	f04f 0140 	mov.w	r1, #64	; 0x40
   2244a:	f3ef 8611 	mrs	r6, BASEPRI
   2244e:	f381 8812 	msr	BASEPRI_MAX, r1
   22452:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   22456:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   22458:	f011 0f0e 	tst.w	r1, #14
   2245c:	d115      	bne.n	2248a <k_work_schedule_for_queue+0x4e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2245e:	432c      	orrs	r4, r5
   22460:	d108      	bne.n	22474 <k_work_schedule_for_queue+0x38>
		return submit_to_queue_locked(work, queuep);
   22462:	a901      	add	r1, sp, #4
   22464:	f7ff ff5c 	bl	22320 <submit_to_queue_locked>
	__asm__ volatile(
   22468:	f386 8811 	msr	BASEPRI, r6
   2246c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   22470:	b002      	add	sp, #8
   22472:	bd70      	pop	{r4, r5, r6, pc}
	*flagp |= BIT(bit);
   22474:	f041 0108 	orr.w	r1, r1, #8
   22478:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   2247a:	9901      	ldr	r1, [sp, #4]
   2247c:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2247e:	3010      	adds	r0, #16
   22480:	4903      	ldr	r1, [pc, #12]	; (22490 <k_work_schedule_for_queue+0x54>)
   22482:	f7ff fcdf 	bl	21e44 <z_add_timeout>
	return ret;
   22486:	2001      	movs	r0, #1
   22488:	e7ee      	b.n	22468 <k_work_schedule_for_queue+0x2c>
	int ret = 0;
   2248a:	2000      	movs	r0, #0
   2248c:	e7ec      	b.n	22468 <k_work_schedule_for_queue+0x2c>
   2248e:	bf00      	nop
   22490:	00028805 	.word	0x00028805

00022494 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   22494:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   22496:	4801      	ldr	r0, [pc, #4]	; (2249c <k_work_schedule+0x8>)
   22498:	f7ff bfd0 	b.w	2243c <k_work_schedule_for_queue>
   2249c:	20002190 	.word	0x20002190

000224a0 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   224a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   224a2:	460c      	mov	r4, r1
   224a4:	9001      	str	r0, [sp, #4]
   224a6:	4616      	mov	r6, r2
   224a8:	461f      	mov	r7, r3
	__asm__ volatile(
   224aa:	f04f 0340 	mov.w	r3, #64	; 0x40
   224ae:	f3ef 8511 	mrs	r5, BASEPRI
   224b2:	f383 8812 	msr	BASEPRI_MAX, r3
   224b6:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   224ba:	4608      	mov	r0, r1
   224bc:	f006 f961 	bl	28782 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   224c0:	ea56 0307 	orrs.w	r3, r6, r7
   224c4:	d109      	bne.n	224da <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   224c6:	a901      	add	r1, sp, #4
   224c8:	4620      	mov	r0, r4
   224ca:	f7ff ff29 	bl	22320 <submit_to_queue_locked>
	__asm__ volatile(
   224ce:	f385 8811 	msr	BASEPRI, r5
   224d2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   224d6:	b003      	add	sp, #12
   224d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   224da:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   224dc:	4906      	ldr	r1, [pc, #24]	; (224f8 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   224de:	f043 0308 	orr.w	r3, r3, #8
   224e2:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   224e4:	9b01      	ldr	r3, [sp, #4]
   224e6:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   224e8:	f104 0010 	add.w	r0, r4, #16
   224ec:	4632      	mov	r2, r6
   224ee:	463b      	mov	r3, r7
   224f0:	f7ff fca8 	bl	21e44 <z_add_timeout>
	return ret;
   224f4:	2001      	movs	r0, #1
   224f6:	e7ea      	b.n	224ce <k_work_reschedule_for_queue+0x2e>
   224f8:	00028805 	.word	0x00028805

000224fc <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   224fc:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   224fe:	4801      	ldr	r0, [pc, #4]	; (22504 <k_work_reschedule+0x8>)
   22500:	f7ff bfce 	b.w	224a0 <k_work_reschedule_for_queue>
   22504:	20002190 	.word	0x20002190

00022508 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   22508:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
   2250a:	4806      	ldr	r0, [pc, #24]	; (22524 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   2250c:	4a06      	ldr	r2, [pc, #24]	; (22528 <z_data_copy+0x20>)
   2250e:	4907      	ldr	r1, [pc, #28]	; (2252c <z_data_copy+0x24>)
   22510:	1a12      	subs	r2, r2, r0
   22512:	f002 fcb5 	bl	24e80 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   22516:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
   2251a:	4a05      	ldr	r2, [pc, #20]	; (22530 <z_data_copy+0x28>)
   2251c:	4905      	ldr	r1, [pc, #20]	; (22534 <z_data_copy+0x2c>)
   2251e:	4806      	ldr	r0, [pc, #24]	; (22538 <z_data_copy+0x30>)
   22520:	f002 bcae 	b.w	24e80 <memcpy>
   22524:	20000000 	.word	0x20000000
   22528:	20000b64 	.word	0x20000b64
   2252c:	0002c900 	.word	0x0002c900
   22530:	00000000 	.word	0x00000000
   22534:	0002c900 	.word	0x0002c900
   22538:	20000000 	.word	0x20000000

0002253c <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   2253c:	4a02      	ldr	r2, [pc, #8]	; (22548 <boot_banner+0xc>)
   2253e:	4903      	ldr	r1, [pc, #12]	; (2254c <boot_banner+0x10>)
   22540:	4803      	ldr	r0, [pc, #12]	; (22550 <boot_banner+0x14>)
   22542:	f002 bafd 	b.w	24b40 <printk>
   22546:	bf00      	nop
   22548:	0002a0fb 	.word	0x0002a0fb
   2254c:	0002c8c8 	.word	0x0002c8c8
   22550:	0002c8d7 	.word	0x0002c8d7

00022554 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   22554:	b573      	push	{r0, r1, r4, r5, r6, lr}
   22556:	4606      	mov	r6, r0
   22558:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   2255a:	f006 f864 	bl	28626 <k_is_in_isr>
   2255e:	b980      	cbnz	r0, 22582 <z_thread_aligned_alloc+0x2e>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   22560:	4b0b      	ldr	r3, [pc, #44]	; (22590 <z_thread_aligned_alloc+0x3c>)
   22562:	689b      	ldr	r3, [r3, #8]
   22564:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   22566:	b184      	cbz	r4, 2258a <z_thread_aligned_alloc+0x36>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   22568:	2204      	movs	r2, #4
   2256a:	18aa      	adds	r2, r5, r2
   2256c:	d209      	bcs.n	22582 <z_thread_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   2256e:	2000      	movs	r0, #0
   22570:	2100      	movs	r1, #0
   22572:	e9cd 0100 	strd	r0, r1, [sp]
   22576:	f046 0104 	orr.w	r1, r6, #4
   2257a:	4620      	mov	r0, r4
   2257c:	f005 fc5d 	bl	27e3a <k_heap_aligned_alloc>
	if (mem == NULL) {
   22580:	b908      	cbnz	r0, 22586 <z_thread_aligned_alloc+0x32>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   22582:	2400      	movs	r4, #0
	}

	return ret;
   22584:	e001      	b.n	2258a <z_thread_aligned_alloc+0x36>
	*heap_ref = heap;
   22586:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   22588:	1d04      	adds	r4, r0, #4
}
   2258a:	4620      	mov	r0, r4
   2258c:	b002      	add	sp, #8
   2258e:	bd70      	pop	{r4, r5, r6, pc}
   22590:	200027d0 	.word	0x200027d0

00022594 <ct_ccc_cfg_changed>:
}
   22594:	4770      	bx	lr

00022596 <read_ct>:
{
   22596:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   22598:	240a      	movs	r4, #10
   2259a:	9402      	str	r4, [sp, #8]
   2259c:	68cc      	ldr	r4, [r1, #12]
   2259e:	9401      	str	r4, [sp, #4]
   225a0:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   225a4:	9400      	str	r4, [sp, #0]
   225a6:	f003 fdb6 	bl	26116 <bt_gatt_attr_read>
}
   225aa:	b004      	add	sp, #16
   225ac:	bd10      	pop	{r4, pc}

000225ae <turn_off_led0>:



void turn_off_led0(){
  led_handler(0, false);
} 
   225ae:	4770      	bx	lr

000225b0 <gpio_pin_set.constprop.0>:

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   225b0:	2301      	movs	r3, #1
   225b2:	fa03 f101 	lsl.w	r1, r3, r1
   225b6:	6903      	ldr	r3, [r0, #16]
   225b8:	681b      	ldr	r3, [r3, #0]
   225ba:	4219      	tst	r1, r3
	return api->port_set_bits_raw(port, pins);
   225bc:	6883      	ldr	r3, [r0, #8]
   225be:	bf0c      	ite	eq
   225c0:	68db      	ldreq	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   225c2:	691b      	ldrne	r3, [r3, #16]
   225c4:	4718      	bx	r3

000225c6 <z_impl_gpio_pin_configure.constprop.0>:
static inline int z_impl_gpio_pin_configure(const struct device *port,
   225c6:	b430      	push	{r4, r5}
	struct gpio_driver_data *data =
   225c8:	6904      	ldr	r4, [r0, #16]
	const struct gpio_driver_api *api =
   225ca:	6885      	ldr	r5, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   225cc:	2301      	movs	r3, #1
   225ce:	fa03 f201 	lsl.w	r2, r3, r1
   225d2:	6823      	ldr	r3, [r4, #0]
   225d4:	4313      	orrs	r3, r2
   225d6:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
   225d8:	f240 6201 	movw	r2, #1537	; 0x601
   225dc:	682b      	ldr	r3, [r5, #0]
}
   225de:	bc30      	pop	{r4, r5}
	return api->pin_configure(port, pin, flags);
   225e0:	4718      	bx	r3

000225e2 <turn_off_led1>:
   225e2:	4770      	bx	lr

000225e4 <turn_off_led2>:
   225e4:	4770      	bx	lr

000225e6 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   225e6:	78cb      	ldrb	r3, [r1, #3]
   225e8:	7802      	ldrb	r2, [r0, #0]
   225ea:	4053      	eors	r3, r2
   225ec:	7003      	strb	r3, [r0, #0]
   225ee:	884b      	ldrh	r3, [r1, #2]
   225f0:	7842      	ldrb	r2, [r0, #1]
   225f2:	4053      	eors	r3, r2
   225f4:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   225f6:	680a      	ldr	r2, [r1, #0]
   225f8:	7883      	ldrb	r3, [r0, #2]
   225fa:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   225fe:	7083      	strb	r3, [r0, #2]
   22600:	680a      	ldr	r2, [r1, #0]
   22602:	78c3      	ldrb	r3, [r0, #3]
   22604:	4053      	eors	r3, r2
   22606:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   22608:	79cb      	ldrb	r3, [r1, #7]
   2260a:	7902      	ldrb	r2, [r0, #4]
   2260c:	4053      	eors	r3, r2
   2260e:	7103      	strb	r3, [r0, #4]
   22610:	88cb      	ldrh	r3, [r1, #6]
   22612:	7942      	ldrb	r2, [r0, #5]
   22614:	4053      	eors	r3, r2
   22616:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   22618:	684a      	ldr	r2, [r1, #4]
   2261a:	7983      	ldrb	r3, [r0, #6]
   2261c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   22620:	7183      	strb	r3, [r0, #6]
   22622:	684a      	ldr	r2, [r1, #4]
   22624:	79c3      	ldrb	r3, [r0, #7]
   22626:	4053      	eors	r3, r2
   22628:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2262a:	7acb      	ldrb	r3, [r1, #11]
   2262c:	7a02      	ldrb	r2, [r0, #8]
   2262e:	4053      	eors	r3, r2
   22630:	7203      	strb	r3, [r0, #8]
   22632:	7a42      	ldrb	r2, [r0, #9]
   22634:	894b      	ldrh	r3, [r1, #10]
   22636:	4053      	eors	r3, r2
   22638:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   2263a:	688a      	ldr	r2, [r1, #8]
   2263c:	7a83      	ldrb	r3, [r0, #10]
   2263e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   22642:	7283      	strb	r3, [r0, #10]
   22644:	688a      	ldr	r2, [r1, #8]
   22646:	7ac3      	ldrb	r3, [r0, #11]
   22648:	4053      	eors	r3, r2
   2264a:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   2264c:	7bcb      	ldrb	r3, [r1, #15]
   2264e:	7b02      	ldrb	r2, [r0, #12]
   22650:	4053      	eors	r3, r2
   22652:	7303      	strb	r3, [r0, #12]
   22654:	89cb      	ldrh	r3, [r1, #14]
   22656:	7b42      	ldrb	r2, [r0, #13]
   22658:	4053      	eors	r3, r2
   2265a:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2265c:	68ca      	ldr	r2, [r1, #12]
   2265e:	7b83      	ldrb	r3, [r0, #14]
   22660:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   22664:	7383      	strb	r3, [r0, #14]
   22666:	68ca      	ldr	r2, [r1, #12]
   22668:	7bc3      	ldrb	r3, [r0, #15]
   2266a:	4053      	eors	r3, r2
   2266c:	73c3      	strb	r3, [r0, #15]
}
   2266e:	4770      	bx	lr

00022670 <shift_rows>:
{
   22670:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   22672:	7802      	ldrb	r2, [r0, #0]
   22674:	f88d 2000 	strb.w	r2, [sp]
   22678:	7942      	ldrb	r2, [r0, #5]
   2267a:	f88d 2001 	strb.w	r2, [sp, #1]
   2267e:	7a82      	ldrb	r2, [r0, #10]
   22680:	f88d 2002 	strb.w	r2, [sp, #2]
   22684:	7bc2      	ldrb	r2, [r0, #15]
   22686:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   2268a:	7902      	ldrb	r2, [r0, #4]
   2268c:	f88d 2004 	strb.w	r2, [sp, #4]
   22690:	7a42      	ldrb	r2, [r0, #9]
   22692:	f88d 2005 	strb.w	r2, [sp, #5]
   22696:	7b82      	ldrb	r2, [r0, #14]
   22698:	f88d 2006 	strb.w	r2, [sp, #6]
   2269c:	78c2      	ldrb	r2, [r0, #3]
   2269e:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   226a2:	7a02      	ldrb	r2, [r0, #8]
   226a4:	f88d 2008 	strb.w	r2, [sp, #8]
   226a8:	7b42      	ldrb	r2, [r0, #13]
   226aa:	f88d 2009 	strb.w	r2, [sp, #9]
   226ae:	7882      	ldrb	r2, [r0, #2]
   226b0:	f88d 200a 	strb.w	r2, [sp, #10]
   226b4:	79c2      	ldrb	r2, [r0, #7]
   226b6:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   226ba:	7b02      	ldrb	r2, [r0, #12]
   226bc:	f88d 200c 	strb.w	r2, [sp, #12]
   226c0:	7842      	ldrb	r2, [r0, #1]
   226c2:	7ac3      	ldrb	r3, [r0, #11]
   226c4:	f88d 200d 	strb.w	r2, [sp, #13]
   226c8:	7982      	ldrb	r2, [r0, #6]
   226ca:	f88d 200e 	strb.w	r2, [sp, #14]
   226ce:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   226d2:	2310      	movs	r3, #16
   226d4:	466a      	mov	r2, sp
   226d6:	4619      	mov	r1, r3
   226d8:	f002 fb4e 	bl	24d78 <_copy>
}
   226dc:	b005      	add	sp, #20
   226de:	f85d fb04 	ldr.w	pc, [sp], #4

000226e2 <mult_row_column>:
{
   226e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   226e4:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   226e6:	7808      	ldrb	r0, [r1, #0]
{
   226e8:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   226ea:	f002 fb54 	bl	24d96 <_double_byte>
   226ee:	4605      	mov	r5, r0
   226f0:	7860      	ldrb	r0, [r4, #1]
   226f2:	f002 fb50 	bl	24d96 <_double_byte>
   226f6:	78a2      	ldrb	r2, [r4, #2]
   226f8:	7863      	ldrb	r3, [r4, #1]
   226fa:	4053      	eors	r3, r2
   226fc:	78e2      	ldrb	r2, [r4, #3]
   226fe:	4053      	eors	r3, r2
   22700:	405d      	eors	r5, r3
   22702:	4045      	eors	r5, r0
   22704:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   22706:	7860      	ldrb	r0, [r4, #1]
   22708:	7827      	ldrb	r7, [r4, #0]
   2270a:	f002 fb44 	bl	24d96 <_double_byte>
   2270e:	4605      	mov	r5, r0
   22710:	78a0      	ldrb	r0, [r4, #2]
   22712:	f002 fb40 	bl	24d96 <_double_byte>
   22716:	78a3      	ldrb	r3, [r4, #2]
   22718:	405f      	eors	r7, r3
   2271a:	78e3      	ldrb	r3, [r4, #3]
   2271c:	405f      	eors	r7, r3
   2271e:	407d      	eors	r5, r7
   22720:	4045      	eors	r5, r0
   22722:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   22724:	78a0      	ldrb	r0, [r4, #2]
   22726:	7865      	ldrb	r5, [r4, #1]
   22728:	7827      	ldrb	r7, [r4, #0]
   2272a:	f002 fb34 	bl	24d96 <_double_byte>
   2272e:	406f      	eors	r7, r5
   22730:	4605      	mov	r5, r0
   22732:	78e0      	ldrb	r0, [r4, #3]
   22734:	f002 fb2f 	bl	24d96 <_double_byte>
   22738:	78e3      	ldrb	r3, [r4, #3]
   2273a:	405f      	eors	r7, r3
   2273c:	407d      	eors	r5, r7
   2273e:	4045      	eors	r5, r0
   22740:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   22742:	7820      	ldrb	r0, [r4, #0]
   22744:	f002 fb27 	bl	24d96 <_double_byte>
   22748:	7863      	ldrb	r3, [r4, #1]
   2274a:	7825      	ldrb	r5, [r4, #0]
   2274c:	405d      	eors	r5, r3
   2274e:	78a3      	ldrb	r3, [r4, #2]
   22750:	405d      	eors	r5, r3
   22752:	4045      	eors	r5, r0
   22754:	78e0      	ldrb	r0, [r4, #3]
   22756:	f002 fb1e 	bl	24d96 <_double_byte>
   2275a:	b2ed      	uxtb	r5, r5
   2275c:	4045      	eors	r5, r0
   2275e:	70f5      	strb	r5, [r6, #3]
}
   22760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022762 <bas_init>:
static int bas_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	return 0;
}
   22762:	2000      	movs	r0, #0
   22764:	4770      	bx	lr

00022766 <_ldiv5>:
{
   22766:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
	uint32_t v_lo = *v;
   2276a:	e9d0 2400 	ldrd	r2, r4, [r0]
	__asm__ ("" : "+r" (m));
   2276e:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   22772:	fba2 bc03 	umull	fp, ip, r2, r3
   22776:	eb1b 0603 	adds.w	r6, fp, r3
   2277a:	eb4c 0503 	adc.w	r5, ip, r3
	result >>= 32;
   2277e:	462f      	mov	r7, r5
	result += (uint64_t)v_hi * m;
   22780:	fba4 4503 	umull	r4, r5, r4, r3
   22784:	eb1b 0204 	adds.w	r2, fp, r4
	result >>= 32;
   22788:	f04f 0600 	mov.w	r6, #0
	result += (uint64_t)v_hi * m;
   2278c:	eb4c 0105 	adc.w	r1, ip, r5
   22790:	19d2      	adds	r2, r2, r7
   22792:	eb46 0101 	adc.w	r1, r6, r1
	result += (uint64_t)v_hi * m;
   22796:	1863      	adds	r3, r4, r1
	result >>= 32;
   22798:	4632      	mov	r2, r6
	result += (uint64_t)v_hi * m;
   2279a:	eb45 0202 	adc.w	r2, r5, r2
	*v = result;
   2279e:	e9c0 3200 	strd	r3, r2, [r0]
}
   227a2:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}

000227a6 <_get_digit>:
	if (*digit_count > 0) {
   227a6:	680b      	ldr	r3, [r1, #0]
   227a8:	2b00      	cmp	r3, #0
{
   227aa:	b570      	push	{r4, r5, r6, lr}
   227ac:	4604      	mov	r4, r0
	if (*digit_count > 0) {
   227ae:	dd0f      	ble.n	227d0 <_get_digit+0x2a>
		*fr *= 10U;
   227b0:	6822      	ldr	r2, [r4, #0]
   227b2:	6840      	ldr	r0, [r0, #4]
		--*digit_count;
   227b4:	3b01      	subs	r3, #1
   227b6:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
   227b8:	210a      	movs	r1, #10
   227ba:	fba2 5601 	umull	r5, r6, r2, r1
   227be:	fb01 6600 	mla	r6, r1, r0, r6
		*fr &= (BIT64(60) - 1U);
   227c2:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
   227c6:	e9c4 5300 	strd	r5, r3, [r4]
		rval = ((*fr >> 60) & 0xF) + '0';
   227ca:	0f30      	lsrs	r0, r6, #28
   227cc:	3030      	adds	r0, #48	; 0x30
}
   227ce:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
   227d0:	2030      	movs	r0, #48	; 0x30
   227d2:	e7fc      	b.n	227ce <_get_digit+0x28>

000227d4 <encode_uint>:
{
   227d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   227d8:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   227da:	78d3      	ldrb	r3, [r2, #3]
{
   227dc:	4614      	mov	r4, r2
	switch (specifier) {
   227de:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   227e0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
   227e4:	4606      	mov	r6, r0
   227e6:	460f      	mov	r7, r1
   227e8:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   227ea:	d02d      	beq.n	22848 <encode_uint+0x74>
   227ec:	d828      	bhi.n	22840 <encode_uint+0x6c>
		return 16;
   227ee:	2b58      	cmp	r3, #88	; 0x58
   227f0:	bf14      	ite	ne
   227f2:	250a      	movne	r5, #10
   227f4:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
   227f6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   227fa:	46aa      	mov	sl, r5
   227fc:	f04f 0b00 	mov.w	fp, #0
   22800:	4652      	mov	r2, sl
   22802:	465b      	mov	r3, fp
   22804:	4630      	mov	r0, r6
   22806:	4639      	mov	r1, r7
   22808:	f7dd fc6a 	bl	e0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2280c:	2a09      	cmp	r2, #9
   2280e:	b2d3      	uxtb	r3, r2
   22810:	d81f      	bhi.n	22852 <encode_uint+0x7e>
   22812:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   22814:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   22816:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   22818:	bf08      	it	eq
   2281a:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2281c:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   22820:	d301      	bcc.n	22826 <encode_uint+0x52>
   22822:	45c8      	cmp	r8, r9
   22824:	d812      	bhi.n	2284c <encode_uint+0x78>
	if (conv->flag_hash) {
   22826:	7823      	ldrb	r3, [r4, #0]
   22828:	069b      	lsls	r3, r3, #26
   2282a:	d505      	bpl.n	22838 <encode_uint+0x64>
		if (radix == 8) {
   2282c:	2d08      	cmp	r5, #8
   2282e:	d116      	bne.n	2285e <encode_uint+0x8a>
			conv->altform_0 = true;
   22830:	78a3      	ldrb	r3, [r4, #2]
   22832:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   22836:	70a3      	strb	r3, [r4, #2]
}
   22838:	4640      	mov	r0, r8
   2283a:	b003      	add	sp, #12
   2283c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   22840:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   22844:	2b70      	cmp	r3, #112	; 0x70
   22846:	e7d3      	b.n	227f0 <encode_uint+0x1c>
	switch (specifier) {
   22848:	2508      	movs	r5, #8
   2284a:	e7d4      	b.n	227f6 <encode_uint+0x22>
		value /= radix;
   2284c:	4606      	mov	r6, r0
   2284e:	460f      	mov	r7, r1
   22850:	e7d6      	b.n	22800 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   22852:	9a01      	ldr	r2, [sp, #4]
   22854:	2a19      	cmp	r2, #25
   22856:	bf94      	ite	ls
   22858:	3337      	addls	r3, #55	; 0x37
   2285a:	3357      	addhi	r3, #87	; 0x57
   2285c:	e7da      	b.n	22814 <encode_uint+0x40>
		} else if (radix == 16) {
   2285e:	2d10      	cmp	r5, #16
   22860:	d1ea      	bne.n	22838 <encode_uint+0x64>
			conv->altform_0c = true;
   22862:	78a3      	ldrb	r3, [r4, #2]
   22864:	f043 0310 	orr.w	r3, r3, #16
   22868:	e7e5      	b.n	22836 <encode_uint+0x62>

0002286a <outs>:
{
   2286a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2286e:	4607      	mov	r7, r0
   22870:	4688      	mov	r8, r1
   22872:	4615      	mov	r5, r2
   22874:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   22876:	4614      	mov	r4, r2
   22878:	42b4      	cmp	r4, r6
   2287a:	eba4 0005 	sub.w	r0, r4, r5
   2287e:	d302      	bcc.n	22886 <outs+0x1c>
   22880:	b93e      	cbnz	r6, 22892 <outs+0x28>
   22882:	7823      	ldrb	r3, [r4, #0]
   22884:	b12b      	cbz	r3, 22892 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   22886:	f814 0b01 	ldrb.w	r0, [r4], #1
   2288a:	4641      	mov	r1, r8
   2288c:	47b8      	blx	r7
		if (rc < 0) {
   2288e:	2800      	cmp	r0, #0
   22890:	daf2      	bge.n	22878 <outs+0xe>
}
   22892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022896 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   22896:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   22898:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   2289a:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2289c:	f912 3b10 	ldrsb.w	r3, [r2], #16
   228a0:	2b00      	cmp	r3, #0
   228a2:	bfb4      	ite	lt
   228a4:	2387      	movlt	r3, #135	; 0x87
   228a6:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   228a8:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   228ac:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   228b0:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   228b2:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   228b6:	d002      	beq.n	228be <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   228b8:	7813      	ldrb	r3, [r2, #0]
   228ba:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   228bc:	e7f4      	b.n	228a8 <gf_double+0x12>
	}
}
   228be:	bd10      	pop	{r4, pc}

000228c0 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   228c0:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   228c2:	b120      	cbz	r0, 228ce <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   228c4:	2258      	movs	r2, #88	; 0x58
   228c6:	2100      	movs	r1, #0
   228c8:	f002 fa63 	bl	24d92 <_set>
   228cc:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   228ce:	bd08      	pop	{r3, pc}

000228d0 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   228d0:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   228d2:	4604      	mov	r4, r0
   228d4:	b188      	cbz	r0, 228fa <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   228d6:	2210      	movs	r2, #16
   228d8:	2100      	movs	r1, #0
   228da:	f002 fa5a 	bl	24d92 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   228de:	2210      	movs	r2, #16
   228e0:	f104 0030 	add.w	r0, r4, #48	; 0x30
   228e4:	2100      	movs	r1, #0
   228e6:	f002 fa54 	bl	24d92 <_set>
	s->leftover_offset = 0;
   228ea:	2300      	movs	r3, #0
   228ec:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   228ee:	2200      	movs	r2, #0
   228f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   228f4:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   228f8:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   228fa:	bd10      	pop	{r4, pc}

000228fc <tc_cmac_setup>:
{
   228fc:	b570      	push	{r4, r5, r6, lr}
   228fe:	460d      	mov	r5, r1
   22900:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   22902:	4604      	mov	r4, r0
   22904:	b310      	cbz	r0, 2294c <tc_cmac_setup+0x50>
   22906:	b311      	cbz	r1, 2294e <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   22908:	2258      	movs	r2, #88	; 0x58
   2290a:	2100      	movs	r1, #0
   2290c:	f002 fa41 	bl	24d92 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   22910:	4629      	mov	r1, r5
	s->sched = sched;
   22912:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   22914:	4630      	mov	r0, r6
   22916:	f7ee f881 	bl	10a1c <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2291a:	2210      	movs	r2, #16
   2291c:	2100      	movs	r1, #0
   2291e:	4620      	mov	r0, r4
   22920:	f002 fa37 	bl	24d92 <_set>
	gf_double (s->K1, s->iv);
   22924:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   22928:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2292a:	4621      	mov	r1, r4
   2292c:	4620      	mov	r0, r4
   2292e:	f7ee f8c7 	bl	10ac0 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   22932:	4621      	mov	r1, r4
   22934:	4628      	mov	r0, r5
   22936:	f7ff ffae 	bl	22896 <gf_double>
	gf_double (s->K2, s->K1);
   2293a:	4629      	mov	r1, r5
   2293c:	f104 0020 	add.w	r0, r4, #32
   22940:	f7ff ffa9 	bl	22896 <gf_double>
	tc_cmac_init(s);
   22944:	4620      	mov	r0, r4
   22946:	f7ff ffc3 	bl	228d0 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   2294a:	2001      	movs	r0, #1
}
   2294c:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2294e:	4608      	mov	r0, r1
   22950:	e7fc      	b.n	2294c <tc_cmac_setup+0x50>

00022952 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   22952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22956:	460d      	mov	r5, r1
   22958:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2295a:	4604      	mov	r4, r0
   2295c:	2800      	cmp	r0, #0
   2295e:	d062      	beq.n	22a26 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   22960:	b912      	cbnz	r2, 22968 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   22962:	2001      	movs	r0, #1
}
   22964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   22968:	2900      	cmp	r1, #0
   2296a:	d05c      	beq.n	22a26 <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   2296c:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   22970:	ea50 0301 	orrs.w	r3, r0, r1
   22974:	d057      	beq.n	22a26 <tc_cmac_update+0xd4>
	s->countdown--;
   22976:	f110 32ff 	adds.w	r2, r0, #4294967295
	if (s->leftover_offset > 0) {
   2297a:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   2297e:	f141 33ff 	adc.w	r3, r1, #4294967295
   22982:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   22986:	f1b8 0f00 	cmp.w	r8, #0
   2298a:	d02a      	beq.n	229e2 <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2298c:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   22990:	f108 0030 	add.w	r0, r8, #48	; 0x30
   22994:	42be      	cmp	r6, r7
   22996:	4420      	add	r0, r4
   22998:	d208      	bcs.n	229ac <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2299a:	462a      	mov	r2, r5
   2299c:	4633      	mov	r3, r6
   2299e:	4631      	mov	r1, r6
   229a0:	f002 f9ea 	bl	24d78 <_copy>
			s->leftover_offset += data_length;
   229a4:	6c62      	ldr	r2, [r4, #68]	; 0x44
   229a6:	4432      	add	r2, r6
   229a8:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   229aa:	e7da      	b.n	22962 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   229ac:	463b      	mov	r3, r7
   229ae:	462a      	mov	r2, r5
   229b0:	4639      	mov	r1, r7
   229b2:	f002 f9e1 	bl	24d78 <_copy>
		data_length -= remaining_space;
   229b6:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   229b8:	2300      	movs	r3, #0
   229ba:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   229bc:	4446      	add	r6, r8
		data += remaining_space;
   229be:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   229c0:	1e63      	subs	r3, r4, #1
   229c2:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   229c6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   229ca:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   229ce:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   229d0:	ea82 0200 	eor.w	r2, r2, r0
   229d4:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   229d6:	d1f6      	bne.n	229c6 <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   229d8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   229da:	4621      	mov	r1, r4
   229dc:	4620      	mov	r0, r4
   229de:	f7ee f86f 	bl	10ac0 <tc_aes_encrypt>
   229e2:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   229e6:	2e10      	cmp	r6, #16
   229e8:	d80a      	bhi.n	22a00 <tc_cmac_update+0xae>
	if (data_length > 0) {
   229ea:	2e00      	cmp	r6, #0
   229ec:	d0b9      	beq.n	22962 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   229ee:	4633      	mov	r3, r6
   229f0:	462a      	mov	r2, r5
   229f2:	4631      	mov	r1, r6
   229f4:	f104 0030 	add.w	r0, r4, #48	; 0x30
   229f8:	f002 f9be 	bl	24d78 <_copy>
		s->leftover_offset = data_length;
   229fc:	6466      	str	r6, [r4, #68]	; 0x44
   229fe:	e7b0      	b.n	22962 <tc_cmac_update+0x10>
   22a00:	1e63      	subs	r3, r4, #1
   22a02:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   22a04:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   22a08:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   22a0c:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   22a0e:	ea82 0200 	eor.w	r2, r2, r0
   22a12:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   22a14:	d1f6      	bne.n	22a04 <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   22a16:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   22a18:	4621      	mov	r1, r4
   22a1a:	4620      	mov	r0, r4
   22a1c:	f7ee f850 	bl	10ac0 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   22a20:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   22a22:	3e10      	subs	r6, #16
   22a24:	e7df      	b.n	229e6 <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   22a26:	2000      	movs	r0, #0
   22a28:	e79c      	b.n	22964 <tc_cmac_update+0x12>

00022a2a <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   22a2a:	b570      	push	{r4, r5, r6, lr}
   22a2c:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   22a2e:	4605      	mov	r5, r0
   22a30:	b1e8      	cbz	r0, 22a6e <tc_cmac_final+0x44>
   22a32:	b369      	cbz	r1, 22a90 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   22a34:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   22a36:	2a10      	cmp	r2, #16
   22a38:	d11a      	bne.n	22a70 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   22a3a:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   22a3c:	1e63      	subs	r3, r4, #1
   22a3e:	3901      	subs	r1, #1
   22a40:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   22a44:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   22a48:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   22a4c:	4072      	eors	r2, r6
   22a4e:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   22a52:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   22a54:	ea82 0206 	eor.w	r2, r2, r6
   22a58:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   22a5a:	d1f3      	bne.n	22a44 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   22a5c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   22a5e:	4621      	mov	r1, r4
   22a60:	4628      	mov	r0, r5
   22a62:	f7ee f82d 	bl	10ac0 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   22a66:	4620      	mov	r0, r4
   22a68:	f7ff ff2a 	bl	228c0 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   22a6c:	2001      	movs	r0, #1
}
   22a6e:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   22a70:	f102 0030 	add.w	r0, r2, #48	; 0x30
   22a74:	2100      	movs	r1, #0
   22a76:	f1c2 0210 	rsb	r2, r2, #16
   22a7a:	4420      	add	r0, r4
   22a7c:	f002 f989 	bl	24d92 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   22a80:	6c63      	ldr	r3, [r4, #68]	; 0x44
   22a82:	4423      	add	r3, r4
   22a84:	2280      	movs	r2, #128	; 0x80
   22a86:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   22a8a:	f104 0120 	add.w	r1, r4, #32
   22a8e:	e7d5      	b.n	22a3c <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   22a90:	4608      	mov	r0, r1
   22a92:	e7ec      	b.n	22a6e <tc_cmac_final+0x44>

00022a94 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   22a94:	4770      	bx	lr

00022a96 <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   22a96:	b5f0      	push	{r4, r5, r6, r7, lr}
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   22a98:	f04f 0c0a 	mov.w	ip, #10
{
   22a9c:	4605      	mov	r5, r0
	while (buflen > 0 && divisor > 0) {
   22a9e:	2604      	movs	r6, #4
	uint8_t num_digits = 0;
   22aa0:	2000      	movs	r0, #0
	uint8_t divisor = 100;
   22aa2:	2464      	movs	r4, #100	; 0x64
	while (buflen > 0 && divisor > 0) {
   22aa4:	b111      	cbz	r1, 22aac <u8_to_dec+0x16>
   22aa6:	3e01      	subs	r6, #1
   22aa8:	d101      	bne.n	22aae <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   22aaa:	702e      	strb	r6, [r5, #0]
	}

	return num_digits;
}
   22aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   22aae:	42a2      	cmp	r2, r4
		digit = value / divisor;
   22ab0:	fbb2 f7f4 	udiv	r7, r2, r4
   22ab4:	b2fb      	uxtb	r3, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   22ab6:	d202      	bcs.n	22abe <u8_to_dec+0x28>
   22ab8:	2c01      	cmp	r4, #1
   22aba:	d000      	beq.n	22abe <u8_to_dec+0x28>
   22abc:	b130      	cbz	r0, 22acc <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   22abe:	3330      	adds	r3, #48	; 0x30
   22ac0:	f805 3b01 	strb.w	r3, [r5], #1
			buflen--;
   22ac4:	3901      	subs	r1, #1
			num_digits++;
   22ac6:	1c43      	adds	r3, r0, #1
			buflen--;
   22ac8:	b2c9      	uxtb	r1, r1
			num_digits++;
   22aca:	b2d8      	uxtb	r0, r3
		value -= digit * divisor;
   22acc:	fb04 2217 	mls	r2, r4, r7, r2
   22ad0:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   22ad2:	fbb4 f4fc 	udiv	r4, r4, ip
   22ad6:	e7e5      	b.n	22aa4 <u8_to_dec+0xe>

00022ad8 <read_str>:
{
   22ad8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   22adc:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   22ae0:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   22ae2:	4640      	mov	r0, r8
{
   22ae4:	461f      	mov	r7, r3
   22ae6:	460c      	mov	r4, r1
   22ae8:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   22aea:	f002 f98e 	bl	24e0a <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   22aee:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   22af2:	9300      	str	r3, [sp, #0]
   22af4:	b280      	uxth	r0, r0
   22af6:	e9cd 8001 	strd	r8, r0, [sp, #4]
   22afa:	463b      	mov	r3, r7
   22afc:	4632      	mov	r2, r6
   22afe:	4621      	mov	r1, r4
   22b00:	4628      	mov	r0, r5
   22b02:	f003 fb08 	bl	26116 <bt_gatt_attr_read>
}
   22b06:	b004      	add	sp, #16
   22b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022b0c <uECC_vli_add>:
{
   22b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   22b0e:	2400      	movs	r4, #0
{
   22b10:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   22b12:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   22b14:	b265      	sxtb	r5, r4
   22b16:	42ab      	cmp	r3, r5
   22b18:	dc00      	bgt.n	22b1c <uECC_vli_add+0x10>
}
   22b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   22b1c:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   22b20:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   22b24:	443d      	add	r5, r7
   22b26:	4405      	add	r5, r0
		carry = cond_set(val, carry, (sum != left[i]));
   22b28:	42af      	cmp	r7, r5
		uECC_word_t val = (sum < left[i]);
   22b2a:	bf8c      	ite	hi
   22b2c:	2701      	movhi	r7, #1
   22b2e:	2700      	movls	r7, #0
		result[i] = sum;
   22b30:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   22b34:	bf18      	it	ne
   22b36:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   22b38:	3401      	adds	r4, #1
   22b3a:	e7eb      	b.n	22b14 <uECC_vli_add+0x8>

00022b3c <uECC_vli_rshift1>:
	vli += num_words;
   22b3c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   22b40:	2300      	movs	r3, #0
	while (vli-- > end) {
   22b42:	4288      	cmp	r0, r1
   22b44:	d300      	bcc.n	22b48 <uECC_vli_rshift1+0xc>
}
   22b46:	4770      	bx	lr
		uECC_word_t temp = *vli;
   22b48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   22b4c:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   22b50:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   22b52:	07d3      	lsls	r3, r2, #31
   22b54:	e7f5      	b.n	22b42 <uECC_vli_rshift1+0x6>

00022b56 <vli_modInv_update>:
	if (!EVEN(uv)) {
   22b56:	6803      	ldr	r3, [r0, #0]
{
   22b58:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   22b5a:	f013 0601 	ands.w	r6, r3, #1
{
   22b5e:	4605      	mov	r5, r0
   22b60:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   22b62:	d005      	beq.n	22b70 <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   22b64:	4613      	mov	r3, r2
   22b66:	460a      	mov	r2, r1
   22b68:	4601      	mov	r1, r0
   22b6a:	f7ff ffcf 	bl	22b0c <uECC_vli_add>
   22b6e:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   22b70:	4621      	mov	r1, r4
   22b72:	4628      	mov	r0, r5
   22b74:	f7ff ffe2 	bl	22b3c <uECC_vli_rshift1>
	if (carry) {
   22b78:	b146      	cbz	r6, 22b8c <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   22b7a:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   22b7e:	3a01      	subs	r2, #1
   22b80:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   22b84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   22b88:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   22b8c:	bd70      	pop	{r4, r5, r6, pc}

00022b8e <uECC_vli_mult>:
{
   22b8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (k = 0; k < num_words; ++k) {
   22b92:	2500      	movs	r5, #0
{
   22b94:	b087      	sub	sp, #28
   22b96:	e9cd 1200 	strd	r1, r2, [sp]
	uECC_word_t r1 = 0;
   22b9a:	462c      	mov	r4, r5
	uECC_word_t r0 = 0;
   22b9c:	462a      	mov	r2, r5
	for (k = 0; k < num_words; ++k) {
   22b9e:	fa4f f885 	sxtb.w	r8, r5
   22ba2:	4543      	cmp	r3, r8
   22ba4:	dc16      	bgt.n	22bd4 <uECC_vli_mult+0x46>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   22ba6:	f04f 35ff 	mov.w	r5, #4294967295
   22baa:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   22bae:	9502      	str	r5, [sp, #8]
   22bb0:	f04f 0a00 	mov.w	sl, #0
   22bb4:	9e02      	ldr	r6, [sp, #8]
   22bb6:	fa53 fe8a 	uxtab	lr, r3, sl
   22bba:	fa4f fe8e 	sxtb.w	lr, lr
   22bbe:	45b6      	cmp	lr, r6
   22bc0:	fa5f f58a 	uxtb.w	r5, sl
   22bc4:	db2d      	blt.n	22c22 <uECC_vli_mult+0x94>
	result[num_words * 2 - 1] = r0;
   22bc6:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   22bca:	f840 2c04 	str.w	r2, [r0, #-4]
}
   22bce:	b007      	add	sp, #28
   22bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22bd4:	9e01      	ldr	r6, [sp, #4]
	for (k = 0; k < num_words; ++k) {
   22bd6:	f04f 0c00 	mov.w	ip, #0
   22bda:	eb06 0985 	add.w	r9, r6, r5, lsl #2
   22bde:	46e6      	mov	lr, ip
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   22be0:	e9cd 2402 	strd	r2, r4, [sp, #8]
	uECC_dword_t p = (uECC_dword_t)a * b;
   22be4:	9900      	ldr	r1, [sp, #0]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   22be6:	f859 7904 	ldr.w	r7, [r9], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   22bea:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
   22bee:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   22bf2:	fba7 ab06 	umull	sl, fp, r7, r6
   22bf6:	eb1a 0601 	adds.w	r6, sl, r1
   22bfa:	f10c 0c01 	add.w	ip, ip, #1
   22bfe:	eb5b 0702 	adcs.w	r7, fp, r2
		for (i = 0; i <= k; ++i) {
   22c02:	fa4f fa8c 	sxtb.w	sl, ip
   22c06:	bf2c      	ite	cs
   22c08:	2201      	movcs	r2, #1
   22c0a:	2200      	movcc	r2, #0
   22c0c:	45c2      	cmp	sl, r8
	*r2 += (r01 < p);
   22c0e:	4496      	add	lr, r2
	*r1 = r01 >> uECC_WORD_BITS;
   22c10:	463c      	mov	r4, r7
	*r0 = (uECC_word_t)r01;
   22c12:	4632      	mov	r2, r6
		for (i = 0; i <= k; ++i) {
   22c14:	dde4      	ble.n	22be0 <uECC_vli_mult+0x52>
		result[k] = r0;
   22c16:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   22c1a:	463a      	mov	r2, r7
   22c1c:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   22c1e:	4674      	mov	r4, lr
   22c20:	e7bd      	b.n	22b9e <uECC_vli_mult+0x10>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   22c22:	3501      	adds	r5, #1
   22c24:	9900      	ldr	r1, [sp, #0]
   22c26:	9e01      	ldr	r6, [sp, #4]
   22c28:	fa4f fc85 	sxtb.w	ip, r5
   22c2c:	ebae 0b0c 	sub.w	fp, lr, ip
   22c30:	eb01 058c 	add.w	r5, r1, ip, lsl #2
   22c34:	eb06 0b8b 	add.w	fp, r6, fp, lsl #2
   22c38:	4621      	mov	r1, r4
   22c3a:	2400      	movs	r4, #0
   22c3c:	459c      	cmp	ip, r3
   22c3e:	db05      	blt.n	22c4c <uECC_vli_mult+0xbe>
		result[k] = r0;
   22c40:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   22c44:	f10a 0a01 	add.w	sl, sl, #1
		result[k] = r0;
   22c48:	460a      	mov	r2, r1
   22c4a:	e7b3      	b.n	22bb4 <uECC_vli_mult+0x26>
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   22c4c:	e9cd 2104 	strd	r2, r1, [sp, #16]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   22c50:	f855 7b04 	ldr.w	r7, [r5], #4
   22c54:	f85b 6904 	ldr.w	r6, [fp], #-4
	r01 += p;
   22c58:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
	uECC_dword_t p = (uECC_dword_t)a * b;
   22c5c:	fba7 6706 	umull	r6, r7, r7, r6
   22c60:	eb16 0801 	adds.w	r8, r6, r1
   22c64:	eb57 0902 	adcs.w	r9, r7, r2
   22c68:	bf2c      	ite	cs
   22c6a:	2201      	movcs	r2, #1
   22c6c:	2200      	movcc	r2, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   22c6e:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   22c72:	4414      	add	r4, r2
	*r1 = r01 >> uECC_WORD_BITS;
   22c74:	4649      	mov	r1, r9
	*r0 = (uECC_word_t)r01;
   22c76:	4642      	mov	r2, r8
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   22c78:	fa4f fc8c 	sxtb.w	ip, ip
   22c7c:	e7de      	b.n	22c3c <uECC_vli_mult+0xae>

00022c7e <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   22c7e:	2300      	movs	r3, #0
{
   22c80:	b510      	push	{r4, lr}
		 vli[i] = 0;
   22c82:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   22c84:	b25a      	sxtb	r2, r3
   22c86:	4291      	cmp	r1, r2
   22c88:	dc00      	bgt.n	22c8c <uECC_vli_clear+0xe>
}
   22c8a:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   22c8c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   22c90:	3301      	adds	r3, #1
   22c92:	e7f7      	b.n	22c84 <uECC_vli_clear+0x6>

00022c94 <uECC_vli_isZero>:
{
   22c94:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   22c96:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   22c98:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   22c9a:	b25c      	sxtb	r4, r3
   22c9c:	42a1      	cmp	r1, r4
   22c9e:	dc03      	bgt.n	22ca8 <uECC_vli_isZero+0x14>
}
   22ca0:	fab2 f082 	clz	r0, r2
   22ca4:	0940      	lsrs	r0, r0, #5
   22ca6:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   22ca8:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   22cac:	3301      	adds	r3, #1
   22cae:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   22cb0:	e7f3      	b.n	22c9a <uECC_vli_isZero+0x6>

00022cb2 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   22cb2:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   22cb4:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   22cb6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   22cba:	f001 011f 	and.w	r1, r1, #31
   22cbe:	fa03 f101 	lsl.w	r1, r3, r1
}
   22cc2:	4008      	ands	r0, r1
   22cc4:	4770      	bx	lr

00022cc6 <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   22cc6:	3901      	subs	r1, #1
   22cc8:	b24b      	sxtb	r3, r1
{
   22cca:	4602      	mov	r2, r0
   22ccc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   22cd0:	2b00      	cmp	r3, #0
   22cd2:	da03      	bge.n	22cdc <uECC_vli_numBits+0x16>
	return (i + 1);
   22cd4:	3301      	adds	r3, #1
   22cd6:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   22cd8:	b938      	cbnz	r0, 22cea <uECC_vli_numBits+0x24>
   22cda:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   22cdc:	f851 0904 	ldr.w	r0, [r1], #-4
   22ce0:	2800      	cmp	r0, #0
   22ce2:	d1f7      	bne.n	22cd4 <uECC_vli_numBits+0xe>
   22ce4:	3b01      	subs	r3, #1
   22ce6:	b25b      	sxtb	r3, r3
   22ce8:	e7f2      	b.n	22cd0 <uECC_vli_numBits+0xa>
	digit = vli[num_digits - 1];
   22cea:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   22cee:	3b01      	subs	r3, #1
   22cf0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   22cf4:	2300      	movs	r3, #0
   22cf6:	b922      	cbnz	r2, 22d02 <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   22cf8:	3801      	subs	r0, #1
   22cfa:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   22cfe:	b200      	sxth	r0, r0
}
   22d00:	4770      	bx	lr
		digit >>= 1;
   22d02:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   22d04:	3301      	adds	r3, #1
   22d06:	e7f6      	b.n	22cf6 <uECC_vli_numBits+0x30>

00022d08 <uECC_vli_set>:
{
   22d08:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   22d0a:	2300      	movs	r3, #0
   22d0c:	b25c      	sxtb	r4, r3
   22d0e:	42a2      	cmp	r2, r4
   22d10:	dc00      	bgt.n	22d14 <uECC_vli_set+0xc>
}
   22d12:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   22d14:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   22d18:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   22d1c:	3301      	adds	r3, #1
   22d1e:	e7f5      	b.n	22d0c <uECC_vli_set+0x4>

00022d20 <uECC_vli_cmp_unsafe>:
{
   22d20:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   22d22:	3a01      	subs	r2, #1
   22d24:	b253      	sxtb	r3, r2
   22d26:	009a      	lsls	r2, r3, #2
   22d28:	2b00      	cmp	r3, #0
   22d2a:	da01      	bge.n	22d30 <uECC_vli_cmp_unsafe+0x10>
	return 0;
   22d2c:	2000      	movs	r0, #0
}
   22d2e:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   22d30:	5885      	ldr	r5, [r0, r2]
   22d32:	588c      	ldr	r4, [r1, r2]
   22d34:	42a5      	cmp	r5, r4
   22d36:	d805      	bhi.n	22d44 <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   22d38:	f1a2 0204 	sub.w	r2, r2, #4
   22d3c:	d304      	bcc.n	22d48 <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   22d3e:	3b01      	subs	r3, #1
   22d40:	b25b      	sxtb	r3, r3
   22d42:	e7f1      	b.n	22d28 <uECC_vli_cmp_unsafe+0x8>
			return 1;
   22d44:	2001      	movs	r0, #1
   22d46:	e7f2      	b.n	22d2e <uECC_vli_cmp_unsafe+0xe>
			return -1;
   22d48:	f04f 30ff 	mov.w	r0, #4294967295
   22d4c:	e7ef      	b.n	22d2e <uECC_vli_cmp_unsafe+0xe>

00022d4e <uECC_vli_equal>:
	for (i = num_words - 1; i >= 0; --i) {
   22d4e:	3a01      	subs	r2, #1
   22d50:	b253      	sxtb	r3, r2
{
   22d52:	b570      	push	{r4, r5, r6, lr}
   22d54:	009a      	lsls	r2, r3, #2
	uECC_word_t diff = 0;
   22d56:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   22d58:	2b00      	cmp	r3, #0
   22d5a:	da03      	bge.n	22d64 <uECC_vli_equal+0x16>
}
   22d5c:	1e20      	subs	r0, r4, #0
   22d5e:	bf18      	it	ne
   22d60:	2001      	movne	r0, #1
   22d62:	bd70      	pop	{r4, r5, r6, pc}
		diff |= (left[i] ^ right[i]);
   22d64:	5885      	ldr	r5, [r0, r2]
   22d66:	588e      	ldr	r6, [r1, r2]
	for (i = num_words - 1; i >= 0; --i) {
   22d68:	3b01      	subs	r3, #1
		diff |= (left[i] ^ right[i]);
   22d6a:	4075      	eors	r5, r6
   22d6c:	432c      	orrs	r4, r5
	for (i = num_words - 1; i >= 0; --i) {
   22d6e:	b25b      	sxtb	r3, r3
   22d70:	3a04      	subs	r2, #4
   22d72:	e7f1      	b.n	22d58 <uECC_vli_equal+0xa>

00022d74 <uECC_vli_sub>:
{
   22d74:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   22d76:	2400      	movs	r4, #0
{
   22d78:	4606      	mov	r6, r0
   22d7a:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   22d7c:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   22d7e:	b265      	sxtb	r5, r4
   22d80:	45ac      	cmp	ip, r5
   22d82:	dc00      	bgt.n	22d86 <uECC_vli_sub+0x12>
}
   22d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   22d86:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   22d8a:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   22d8e:	1a3d      	subs	r5, r7, r0
   22d90:	1aed      	subs	r5, r5, r3
		borrow = cond_set(val, borrow, (diff != left[i]));
   22d92:	42af      	cmp	r7, r5
		uECC_word_t val = (diff > left[i]);
   22d94:	bf34      	ite	cc
   22d96:	2701      	movcc	r7, #1
   22d98:	2700      	movcs	r7, #0
		result[i] = diff;
   22d9a:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   22d9e:	bf18      	it	ne
   22da0:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   22da2:	3401      	adds	r4, #1
   22da4:	e7eb      	b.n	22d7e <uECC_vli_sub+0xa>

00022da6 <uECC_vli_modAdd>:
{
   22da6:	b570      	push	{r4, r5, r6, lr}
   22da8:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   22dac:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   22dae:	4633      	mov	r3, r6
{
   22db0:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   22db2:	f7ff feab 	bl	22b0c <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   22db6:	b930      	cbnz	r0, 22dc6 <uECC_vli_modAdd+0x20>
   22db8:	4632      	mov	r2, r6
   22dba:	4621      	mov	r1, r4
   22dbc:	4628      	mov	r0, r5
   22dbe:	f7ff ffaf 	bl	22d20 <uECC_vli_cmp_unsafe>
   22dc2:	2801      	cmp	r0, #1
   22dc4:	d007      	beq.n	22dd6 <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   22dc6:	4633      	mov	r3, r6
   22dc8:	462a      	mov	r2, r5
   22dca:	4621      	mov	r1, r4
   22dcc:	4620      	mov	r0, r4
}
   22dce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   22dd2:	f7ff bfcf 	b.w	22d74 <uECC_vli_sub>
}
   22dd6:	bd70      	pop	{r4, r5, r6, pc}

00022dd8 <uECC_vli_modSub>:
{
   22dd8:	b570      	push	{r4, r5, r6, lr}
   22dda:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   22dde:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   22de0:	4633      	mov	r3, r6
{
   22de2:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   22de4:	f7ff ffc6 	bl	22d74 <uECC_vli_sub>
	if (l_borrow) {
   22de8:	b138      	cbz	r0, 22dfa <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   22dea:	4633      	mov	r3, r6
   22dec:	462a      	mov	r2, r5
   22dee:	4621      	mov	r1, r4
   22df0:	4620      	mov	r0, r4
}
   22df2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   22df6:	f7ff be89 	b.w	22b0c <uECC_vli_add>
}
   22dfa:	bd70      	pop	{r4, r5, r6, pc}

00022dfc <uECC_vli_mmod>:
{
   22dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22e00:	b0a5      	sub	sp, #148	; 0x94
   22e02:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   22e04:	ab14      	add	r3, sp, #80	; 0x50
   22e06:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   22e0a:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   22e0c:	4629      	mov	r1, r5
   22e0e:	4610      	mov	r0, r2
{
   22e10:	4616      	mov	r6, r2
			   uECC_vli_numBits(mod, num_words);
   22e12:	f7ff ff58 	bl	22cc6 <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   22e16:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   22e1a:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   22e1c:	2c00      	cmp	r4, #0
   22e1e:	4621      	mov	r1, r4
   22e20:	bfb8      	it	lt
   22e22:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   22e26:	4263      	negs	r3, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   22e28:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   22e2c:	f003 031f 	and.w	r3, r3, #31
	uECC_vli_clear(mod_multiple, word_shift);
   22e30:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   22e32:	f004 071f 	and.w	r7, r4, #31
   22e36:	bf58      	it	pl
   22e38:	425f      	negpl	r7, r3
	uECC_vli_clear(mod_multiple, word_shift);
   22e3a:	f7ff ff20 	bl	22c7e <uECC_vli_clear>
	if (bit_shift > 0) {
   22e3e:	2f00      	cmp	r7, #0
   22e40:	b208      	sxth	r0, r1
   22e42:	dd2b      	ble.n	22e9c <uECC_vli_mmod+0xa0>
   22e44:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   22e46:	2200      	movs	r2, #0
   22e48:	eb03 0180 	add.w	r1, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   22e4c:	f1c7 0e20 	rsb	lr, r7, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   22e50:	4613      	mov	r3, r2
   22e52:	429d      	cmp	r5, r3
   22e54:	d817      	bhi.n	22e86 <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   22e56:	006b      	lsls	r3, r5, #1
   22e58:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   22e5a:	ab04      	add	r3, sp, #16
   22e5c:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   22e60:	1e6f      	subs	r7, r5, #1
   22e62:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   22e64:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   22e66:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   22e6a:	2c00      	cmp	r4, #0
   22e6c:	da54      	bge.n	22f18 <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   22e6e:	ab24      	add	r3, sp, #144	; 0x90
   22e70:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   22e74:	462a      	mov	r2, r5
   22e76:	f856 1c88 	ldr.w	r1, [r6, #-136]
   22e7a:	4640      	mov	r0, r8
   22e7c:	f7ff ff44 	bl	22d08 <uECC_vli_set>
}
   22e80:	b025      	add	sp, #148	; 0x94
   22e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   22e86:	f856 c023 	ldr.w	ip, [r6, r3, lsl #2]
   22e8a:	fa0c f007 	lsl.w	r0, ip, r7
   22e8e:	4302      	orrs	r2, r0
   22e90:	f841 2b04 	str.w	r2, [r1], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   22e94:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   22e96:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   22e9a:	e7da      	b.n	22e52 <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   22e9c:	ab04      	add	r3, sp, #16
   22e9e:	462a      	mov	r2, r5
   22ea0:	4631      	mov	r1, r6
   22ea2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   22ea6:	f7ff ff2f 	bl	22d08 <uECC_vli_set>
   22eaa:	e7d4      	b.n	22e56 <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   22eac:	fa0f fe82 	sxth.w	lr, r2
   22eb0:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   22eb4:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   22eb8:	ab24      	add	r3, sp, #144	; 0x90
   22eba:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   22ebe:	3001      	adds	r0, #1
   22ec0:	f852 3c80 	ldr.w	r3, [r2, #-128]
   22ec4:	440b      	add	r3, r1
   22ec6:	ebbb 0303 	subs.w	r3, fp, r3
   22eca:	bf34      	ite	cc
   22ecc:	2201      	movcc	r2, #1
   22ece:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   22ed0:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   22ed2:	bf18      	it	ne
   22ed4:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   22ed6:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   22eda:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   22ede:	9b01      	ldr	r3, [sp, #4]
   22ee0:	b242      	sxtb	r2, r0
   22ee2:	429a      	cmp	r2, r3
   22ee4:	dbe2      	blt.n	22eac <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   22ee6:	1a73      	subs	r3, r6, r1
   22ee8:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   22eea:	4629      	mov	r1, r5
   22eec:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   22eee:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   22ef0:	f7ff fe24 	bl	22b3c <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   22ef4:	ab24      	add	r3, sp, #144	; 0x90
   22ef6:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   22efa:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   22efc:	f853 2c80 	ldr.w	r2, [r3, #-128]
   22f00:	f857 3c80 	ldr.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   22f04:	4648      	mov	r0, r9
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   22f06:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
	for (index = 1; shift >= 0; --shift) {
   22f0a:	3c01      	subs	r4, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   22f0c:	f847 3c80 	str.w	r3, [r7, #-128]
	for (index = 1; shift >= 0; --shift) {
   22f10:	b224      	sxth	r4, r4
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   22f12:	f7ff fe13 	bl	22b3c <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   22f16:	e7a8      	b.n	22e6a <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   22f18:	ab24      	add	r3, sp, #144	; 0x90
   22f1a:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   22f1c:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   22f20:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   22f22:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   22f26:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   22f2a:	e7d8      	b.n	22ede <uECC_vli_mmod+0xe2>

00022f2c <uECC_vli_modMult_fast>:
{
   22f2c:	b530      	push	{r4, r5, lr}
   22f2e:	461c      	mov	r4, r3
   22f30:	b091      	sub	sp, #68	; 0x44
   22f32:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   22f34:	f993 3000 	ldrsb.w	r3, [r3]
   22f38:	4668      	mov	r0, sp
   22f3a:	f7ff fe28 	bl	22b8e <uECC_vli_mult>
	curve->mmod_fast(result, product);
   22f3e:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   22f42:	4669      	mov	r1, sp
   22f44:	4628      	mov	r0, r5
   22f46:	4798      	blx	r3
}
   22f48:	b011      	add	sp, #68	; 0x44
   22f4a:	bd30      	pop	{r4, r5, pc}

00022f4c <uECC_vli_modSquare_fast>:
{
   22f4c:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   22f4e:	460a      	mov	r2, r1
   22f50:	f7ff bfec 	b.w	22f2c <uECC_vli_modMult_fast>

00022f54 <double_jacobian_default>:
{
   22f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   22f58:	f993 6000 	ldrsb.w	r6, [r3]
{
   22f5c:	b092      	sub	sp, #72	; 0x48
   22f5e:	4604      	mov	r4, r0
   22f60:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   22f62:	4610      	mov	r0, r2
   22f64:	4631      	mov	r1, r6
{
   22f66:	4615      	mov	r5, r2
   22f68:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   22f6a:	f7ff fe93 	bl	22c94 <uECC_vli_isZero>
   22f6e:	2800      	cmp	r0, #0
   22f70:	f040 8091 	bne.w	23096 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   22f74:	463a      	mov	r2, r7
   22f76:	4649      	mov	r1, r9
   22f78:	a802      	add	r0, sp, #8
   22f7a:	f7ff ffe7 	bl	22f4c <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   22f7e:	463b      	mov	r3, r7
   22f80:	aa02      	add	r2, sp, #8
   22f82:	4621      	mov	r1, r4
   22f84:	a80a      	add	r0, sp, #40	; 0x28
   22f86:	f7ff ffd1 	bl	22f2c <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   22f8a:	a902      	add	r1, sp, #8
   22f8c:	4608      	mov	r0, r1
   22f8e:	463a      	mov	r2, r7
   22f90:	f7ff ffdc 	bl	22f4c <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   22f94:	463b      	mov	r3, r7
   22f96:	462a      	mov	r2, r5
   22f98:	4649      	mov	r1, r9
   22f9a:	4648      	mov	r0, r9
   22f9c:	f7ff ffc6 	bl	22f2c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   22fa0:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   22fa4:	463a      	mov	r2, r7
   22fa6:	4629      	mov	r1, r5
   22fa8:	4628      	mov	r0, r5
   22faa:	f7ff ffcf 	bl	22f4c <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   22fae:	4643      	mov	r3, r8
   22fb0:	462a      	mov	r2, r5
   22fb2:	4621      	mov	r1, r4
   22fb4:	4620      	mov	r0, r4
   22fb6:	9600      	str	r6, [sp, #0]
   22fb8:	f7ff fef5 	bl	22da6 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   22fbc:	4643      	mov	r3, r8
   22fbe:	462a      	mov	r2, r5
   22fc0:	4629      	mov	r1, r5
   22fc2:	4628      	mov	r0, r5
   22fc4:	9600      	str	r6, [sp, #0]
   22fc6:	f7ff feee 	bl	22da6 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   22fca:	4643      	mov	r3, r8
   22fcc:	462a      	mov	r2, r5
   22fce:	4621      	mov	r1, r4
   22fd0:	4628      	mov	r0, r5
   22fd2:	9600      	str	r6, [sp, #0]
   22fd4:	f7ff ff00 	bl	22dd8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   22fd8:	463b      	mov	r3, r7
   22fda:	462a      	mov	r2, r5
   22fdc:	4621      	mov	r1, r4
   22fde:	4620      	mov	r0, r4
   22fe0:	f7ff ffa4 	bl	22f2c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   22fe4:	4643      	mov	r3, r8
   22fe6:	4622      	mov	r2, r4
   22fe8:	4621      	mov	r1, r4
   22fea:	4628      	mov	r0, r5
   22fec:	9600      	str	r6, [sp, #0]
   22fee:	f7ff feda 	bl	22da6 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   22ff2:	4643      	mov	r3, r8
   22ff4:	9600      	str	r6, [sp, #0]
   22ff6:	462a      	mov	r2, r5
   22ff8:	4621      	mov	r1, r4
   22ffa:	4620      	mov	r0, r4
   22ffc:	f7ff fed3 	bl	22da6 <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   23000:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   23002:	07db      	lsls	r3, r3, #31
   23004:	d54a      	bpl.n	2309c <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   23006:	4633      	mov	r3, r6
   23008:	4642      	mov	r2, r8
   2300a:	4621      	mov	r1, r4
   2300c:	4620      	mov	r0, r4
   2300e:	f7ff fd7d 	bl	22b0c <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   23012:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   23014:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   23016:	4620      	mov	r0, r4
   23018:	f7ff fd90 	bl	22b3c <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   2301c:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   23020:	3b01      	subs	r3, #1
   23022:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   23026:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   2302a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   2302e:	463a      	mov	r2, r7
   23030:	4621      	mov	r1, r4
   23032:	4628      	mov	r0, r5
   23034:	f7ff ff8a 	bl	22f4c <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   23038:	4643      	mov	r3, r8
   2303a:	aa0a      	add	r2, sp, #40	; 0x28
   2303c:	4629      	mov	r1, r5
   2303e:	4628      	mov	r0, r5
   23040:	9600      	str	r6, [sp, #0]
   23042:	f7ff fec9 	bl	22dd8 <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   23046:	4643      	mov	r3, r8
   23048:	aa0a      	add	r2, sp, #40	; 0x28
   2304a:	4629      	mov	r1, r5
   2304c:	4628      	mov	r0, r5
   2304e:	9600      	str	r6, [sp, #0]
   23050:	f7ff fec2 	bl	22dd8 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   23054:	a90a      	add	r1, sp, #40	; 0x28
   23056:	4608      	mov	r0, r1
   23058:	4643      	mov	r3, r8
   2305a:	462a      	mov	r2, r5
   2305c:	9600      	str	r6, [sp, #0]
   2305e:	f7ff febb 	bl	22dd8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   23062:	463b      	mov	r3, r7
   23064:	aa0a      	add	r2, sp, #40	; 0x28
   23066:	4621      	mov	r1, r4
   23068:	4620      	mov	r0, r4
   2306a:	f7ff ff5f 	bl	22f2c <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   2306e:	aa02      	add	r2, sp, #8
   23070:	4643      	mov	r3, r8
   23072:	4610      	mov	r0, r2
   23074:	4621      	mov	r1, r4
   23076:	9600      	str	r6, [sp, #0]
   23078:	f7ff feae 	bl	22dd8 <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   2307c:	4632      	mov	r2, r6
   2307e:	4629      	mov	r1, r5
   23080:	4620      	mov	r0, r4
   23082:	f7ff fe41 	bl	22d08 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   23086:	4649      	mov	r1, r9
   23088:	4628      	mov	r0, r5
   2308a:	f7ff fe3d 	bl	22d08 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   2308e:	a902      	add	r1, sp, #8
   23090:	4648      	mov	r0, r9
   23092:	f7ff fe39 	bl	22d08 <uECC_vli_set>
}
   23096:	b012      	add	sp, #72	; 0x48
   23098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   2309c:	4631      	mov	r1, r6
   2309e:	4620      	mov	r0, r4
   230a0:	f7ff fd4c 	bl	22b3c <uECC_vli_rshift1>
   230a4:	e7c3      	b.n	2302e <double_jacobian_default+0xda>

000230a6 <x_side_default>:
{
   230a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   230aa:	4615      	mov	r5, r2
   230ac:	b08a      	sub	sp, #40	; 0x28
   230ae:	4604      	mov	r4, r0
   230b0:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   230b2:	221c      	movs	r2, #28
   230b4:	2100      	movs	r1, #0
   230b6:	a803      	add	r0, sp, #12
   230b8:	f001 feed 	bl	24e96 <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   230bc:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   230be:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   230c2:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   230c4:	462a      	mov	r2, r5
   230c6:	4631      	mov	r1, r6
   230c8:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   230ca:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   230cc:	f7ff ff3e 	bl	22f4c <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   230d0:	463b      	mov	r3, r7
   230d2:	aa02      	add	r2, sp, #8
   230d4:	4621      	mov	r1, r4
   230d6:	4620      	mov	r0, r4
   230d8:	f8cd 8000 	str.w	r8, [sp]
   230dc:	f7ff fe7c 	bl	22dd8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   230e0:	462b      	mov	r3, r5
   230e2:	4632      	mov	r2, r6
   230e4:	4621      	mov	r1, r4
   230e6:	4620      	mov	r0, r4
   230e8:	f7ff ff20 	bl	22f2c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   230ec:	f8cd 8000 	str.w	r8, [sp]
   230f0:	463b      	mov	r3, r7
   230f2:	f105 0284 	add.w	r2, r5, #132	; 0x84
   230f6:	4621      	mov	r1, r4
   230f8:	4620      	mov	r0, r4
   230fa:	f7ff fe54 	bl	22da6 <uECC_vli_modAdd>
}
   230fe:	b00a      	add	sp, #40	; 0x28
   23100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023104 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   23104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23108:	b09a      	sub	sp, #104	; 0x68
   2310a:	4616      	mov	r6, r2
   2310c:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   23110:	4644      	mov	r4, r8
{
   23112:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   23114:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   23118:	9500      	str	r5, [sp, #0]
{
   2311a:	4607      	mov	r7, r0
   2311c:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2311e:	4623      	mov	r3, r4
   23120:	4602      	mov	r2, r0
   23122:	4631      	mov	r1, r6
   23124:	a802      	add	r0, sp, #8
   23126:	f7ff fe57 	bl	22dd8 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   2312a:	a902      	add	r1, sp, #8
   2312c:	4642      	mov	r2, r8
   2312e:	4608      	mov	r0, r1
   23130:	f7ff ff0c 	bl	22f4c <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   23134:	4643      	mov	r3, r8
   23136:	aa02      	add	r2, sp, #8
   23138:	4639      	mov	r1, r7
   2313a:	4638      	mov	r0, r7
   2313c:	f7ff fef6 	bl	22f2c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   23140:	4643      	mov	r3, r8
   23142:	aa02      	add	r2, sp, #8
   23144:	4631      	mov	r1, r6
   23146:	4630      	mov	r0, r6
   23148:	f7ff fef0 	bl	22f2c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   2314c:	4623      	mov	r3, r4
   2314e:	4652      	mov	r2, sl
   23150:	4649      	mov	r1, r9
   23152:	a802      	add	r0, sp, #8
   23154:	9500      	str	r5, [sp, #0]
   23156:	f7ff fe26 	bl	22da6 <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   2315a:	4623      	mov	r3, r4
   2315c:	4652      	mov	r2, sl
   2315e:	4649      	mov	r1, r9
   23160:	4648      	mov	r0, r9
   23162:	9500      	str	r5, [sp, #0]
   23164:	f7ff fe38 	bl	22dd8 <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   23168:	4623      	mov	r3, r4
   2316a:	463a      	mov	r2, r7
   2316c:	4631      	mov	r1, r6
   2316e:	a80a      	add	r0, sp, #40	; 0x28
   23170:	9500      	str	r5, [sp, #0]
   23172:	f7ff fe31 	bl	22dd8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   23176:	4643      	mov	r3, r8
   23178:	aa0a      	add	r2, sp, #40	; 0x28
   2317a:	4651      	mov	r1, sl
   2317c:	4650      	mov	r0, sl
   2317e:	f7ff fed5 	bl	22f2c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   23182:	4623      	mov	r3, r4
   23184:	4632      	mov	r2, r6
   23186:	4639      	mov	r1, r7
   23188:	a80a      	add	r0, sp, #40	; 0x28
   2318a:	9500      	str	r5, [sp, #0]
   2318c:	f7ff fe0b 	bl	22da6 <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   23190:	4642      	mov	r2, r8
   23192:	4649      	mov	r1, r9
   23194:	4630      	mov	r0, r6
   23196:	f7ff fed9 	bl	22f4c <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   2319a:	4623      	mov	r3, r4
   2319c:	aa0a      	add	r2, sp, #40	; 0x28
   2319e:	4631      	mov	r1, r6
   231a0:	4630      	mov	r0, r6
   231a2:	9500      	str	r5, [sp, #0]
   231a4:	f7ff fe18 	bl	22dd8 <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   231a8:	4623      	mov	r3, r4
   231aa:	4632      	mov	r2, r6
   231ac:	4639      	mov	r1, r7
   231ae:	a812      	add	r0, sp, #72	; 0x48
   231b0:	9500      	str	r5, [sp, #0]
   231b2:	f7ff fe11 	bl	22dd8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   231b6:	4643      	mov	r3, r8
   231b8:	aa12      	add	r2, sp, #72	; 0x48
   231ba:	4649      	mov	r1, r9
   231bc:	4648      	mov	r0, r9
   231be:	f7ff feb5 	bl	22f2c <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   231c2:	4623      	mov	r3, r4
   231c4:	4652      	mov	r2, sl
   231c6:	4649      	mov	r1, r9
   231c8:	4648      	mov	r0, r9
   231ca:	9500      	str	r5, [sp, #0]
   231cc:	f7ff fe04 	bl	22dd8 <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   231d0:	4642      	mov	r2, r8
   231d2:	a902      	add	r1, sp, #8
   231d4:	a812      	add	r0, sp, #72	; 0x48
   231d6:	f7ff feb9 	bl	22f4c <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   231da:	a912      	add	r1, sp, #72	; 0x48
   231dc:	4623      	mov	r3, r4
   231de:	aa0a      	add	r2, sp, #40	; 0x28
   231e0:	4608      	mov	r0, r1
   231e2:	9500      	str	r5, [sp, #0]
   231e4:	f7ff fdf8 	bl	22dd8 <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   231e8:	4623      	mov	r3, r4
   231ea:	463a      	mov	r2, r7
   231ec:	a912      	add	r1, sp, #72	; 0x48
   231ee:	a80a      	add	r0, sp, #40	; 0x28
   231f0:	9500      	str	r5, [sp, #0]
   231f2:	f7ff fdf1 	bl	22dd8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   231f6:	a90a      	add	r1, sp, #40	; 0x28
   231f8:	4643      	mov	r3, r8
   231fa:	aa02      	add	r2, sp, #8
   231fc:	4608      	mov	r0, r1
   231fe:	f7ff fe95 	bl	22f2c <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   23202:	4623      	mov	r3, r4
   23204:	4652      	mov	r2, sl
   23206:	a90a      	add	r1, sp, #40	; 0x28
   23208:	4650      	mov	r0, sl
   2320a:	9500      	str	r5, [sp, #0]
   2320c:	f7ff fde4 	bl	22dd8 <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   23210:	462a      	mov	r2, r5
   23212:	a912      	add	r1, sp, #72	; 0x48
   23214:	4638      	mov	r0, r7
   23216:	f7ff fd77 	bl	22d08 <uECC_vli_set>
}
   2321a:	b01a      	add	sp, #104	; 0x68
   2321c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00023220 <uECC_vli_modInv>:
{
   23220:	b5f0      	push	{r4, r5, r6, r7, lr}
   23222:	460f      	mov	r7, r1
   23224:	b0a1      	sub	sp, #132	; 0x84
   23226:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   23228:	4619      	mov	r1, r3
   2322a:	4638      	mov	r0, r7
{
   2322c:	4615      	mov	r5, r2
   2322e:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   23230:	f7ff fd30 	bl	22c94 <uECC_vli_isZero>
   23234:	b120      	cbz	r0, 23240 <uECC_vli_modInv+0x20>
		uECC_vli_clear(result, num_words);
   23236:	4630      	mov	r0, r6
   23238:	f7ff fd21 	bl	22c7e <uECC_vli_clear>
}
   2323c:	b021      	add	sp, #132	; 0x84
   2323e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_vli_set(a, input, num_words);
   23240:	4622      	mov	r2, r4
   23242:	4639      	mov	r1, r7
   23244:	4668      	mov	r0, sp
   23246:	f7ff fd5f 	bl	22d08 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   2324a:	4629      	mov	r1, r5
   2324c:	a808      	add	r0, sp, #32
   2324e:	f7ff fd5b 	bl	22d08 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   23252:	a810      	add	r0, sp, #64	; 0x40
   23254:	4621      	mov	r1, r4
   23256:	f7ff fd12 	bl	22c7e <uECC_vli_clear>
	u[0] = 1;
   2325a:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   2325c:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   2325e:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   23260:	f7ff fd0d 	bl	22c7e <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   23264:	4622      	mov	r2, r4
   23266:	a908      	add	r1, sp, #32
   23268:	4668      	mov	r0, sp
   2326a:	f7ff fd59 	bl	22d20 <uECC_vli_cmp_unsafe>
   2326e:	b928      	cbnz	r0, 2327c <uECC_vli_modInv+0x5c>
  	uECC_vli_set(result, u, num_words);
   23270:	4622      	mov	r2, r4
   23272:	a910      	add	r1, sp, #64	; 0x40
   23274:	4630      	mov	r0, r6
   23276:	f7ff fd47 	bl	22d08 <uECC_vli_set>
   2327a:	e7df      	b.n	2323c <uECC_vli_modInv+0x1c>
		if (EVEN(a)) {
   2327c:	9b00      	ldr	r3, [sp, #0]
   2327e:	07da      	lsls	r2, r3, #31
   23280:	d409      	bmi.n	23296 <uECC_vli_modInv+0x76>
			uECC_vli_rshift1(a, num_words);
   23282:	4621      	mov	r1, r4
   23284:	4668      	mov	r0, sp
   23286:	f7ff fc59 	bl	22b3c <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   2328a:	4622      	mov	r2, r4
   2328c:	4629      	mov	r1, r5
   2328e:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   23290:	f7ff fc61 	bl	22b56 <vli_modInv_update>
   23294:	e7e6      	b.n	23264 <uECC_vli_modInv+0x44>
    		} else if (EVEN(b)) {
   23296:	9b08      	ldr	r3, [sp, #32]
   23298:	07db      	lsls	r3, r3, #31
   2329a:	d407      	bmi.n	232ac <uECC_vli_modInv+0x8c>
			uECC_vli_rshift1(b, num_words);
   2329c:	4621      	mov	r1, r4
   2329e:	a808      	add	r0, sp, #32
   232a0:	f7ff fc4c 	bl	22b3c <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   232a4:	4622      	mov	r2, r4
   232a6:	4629      	mov	r1, r5
   232a8:	a818      	add	r0, sp, #96	; 0x60
   232aa:	e7f1      	b.n	23290 <uECC_vli_modInv+0x70>
		} else if (cmpResult > 0) {
   232ac:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   232ae:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   232b0:	dd1c      	ble.n	232ec <uECC_vli_modInv+0xcc>
			uECC_vli_sub(a, a, b, num_words);
   232b2:	aa08      	add	r2, sp, #32
   232b4:	4669      	mov	r1, sp
   232b6:	4668      	mov	r0, sp
   232b8:	f7ff fd5c 	bl	22d74 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   232bc:	4621      	mov	r1, r4
   232be:	4668      	mov	r0, sp
   232c0:	f7ff fc3c 	bl	22b3c <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   232c4:	4622      	mov	r2, r4
   232c6:	a918      	add	r1, sp, #96	; 0x60
   232c8:	a810      	add	r0, sp, #64	; 0x40
   232ca:	f7ff fd29 	bl	22d20 <uECC_vli_cmp_unsafe>
   232ce:	2800      	cmp	r0, #0
   232d0:	da05      	bge.n	232de <uECC_vli_modInv+0xbe>
        			uECC_vli_add(u, u, mod, num_words);
   232d2:	a910      	add	r1, sp, #64	; 0x40
   232d4:	4623      	mov	r3, r4
   232d6:	462a      	mov	r2, r5
   232d8:	4608      	mov	r0, r1
   232da:	f7ff fc17 	bl	22b0c <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   232de:	a910      	add	r1, sp, #64	; 0x40
   232e0:	4623      	mov	r3, r4
   232e2:	aa18      	add	r2, sp, #96	; 0x60
   232e4:	4608      	mov	r0, r1
   232e6:	f7ff fd45 	bl	22d74 <uECC_vli_sub>
   232ea:	e7ce      	b.n	2328a <uECC_vli_modInv+0x6a>
      			uECC_vli_sub(b, b, a, num_words);
   232ec:	a908      	add	r1, sp, #32
   232ee:	466a      	mov	r2, sp
   232f0:	4608      	mov	r0, r1
   232f2:	f7ff fd3f 	bl	22d74 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   232f6:	4621      	mov	r1, r4
   232f8:	a808      	add	r0, sp, #32
   232fa:	f7ff fc1f 	bl	22b3c <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   232fe:	4622      	mov	r2, r4
   23300:	a910      	add	r1, sp, #64	; 0x40
   23302:	a818      	add	r0, sp, #96	; 0x60
   23304:	f7ff fd0c 	bl	22d20 <uECC_vli_cmp_unsafe>
   23308:	2800      	cmp	r0, #0
   2330a:	da05      	bge.n	23318 <uECC_vli_modInv+0xf8>
        			uECC_vli_add(v, v, mod, num_words);
   2330c:	a918      	add	r1, sp, #96	; 0x60
   2330e:	4623      	mov	r3, r4
   23310:	462a      	mov	r2, r5
   23312:	4608      	mov	r0, r1
   23314:	f7ff fbfa 	bl	22b0c <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   23318:	a918      	add	r1, sp, #96	; 0x60
   2331a:	4623      	mov	r3, r4
   2331c:	aa10      	add	r2, sp, #64	; 0x40
   2331e:	4608      	mov	r0, r1
   23320:	f7ff fd28 	bl	22d74 <uECC_vli_sub>
   23324:	e7be      	b.n	232a4 <uECC_vli_modInv+0x84>

00023326 <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   23326:	7809      	ldrb	r1, [r1, #0]
   23328:	0049      	lsls	r1, r1, #1
   2332a:	b249      	sxtb	r1, r1
   2332c:	f7ff bcb2 	b.w	22c94 <uECC_vli_isZero>

00023330 <apply_z>:
{
   23330:	b5f0      	push	{r4, r5, r6, r7, lr}
   23332:	4615      	mov	r5, r2
   23334:	b089      	sub	sp, #36	; 0x24
   23336:	461c      	mov	r4, r3
   23338:	4607      	mov	r7, r0
   2333a:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   2333c:	461a      	mov	r2, r3
   2333e:	4629      	mov	r1, r5
   23340:	4668      	mov	r0, sp
   23342:	f7ff fe03 	bl	22f4c <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   23346:	4623      	mov	r3, r4
   23348:	466a      	mov	r2, sp
   2334a:	4639      	mov	r1, r7
   2334c:	4638      	mov	r0, r7
   2334e:	f7ff fded 	bl	22f2c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   23352:	4623      	mov	r3, r4
   23354:	462a      	mov	r2, r5
   23356:	4669      	mov	r1, sp
   23358:	4668      	mov	r0, sp
   2335a:	f7ff fde7 	bl	22f2c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   2335e:	4623      	mov	r3, r4
   23360:	466a      	mov	r2, sp
   23362:	4631      	mov	r1, r6
   23364:	4630      	mov	r0, r6
   23366:	f7ff fde1 	bl	22f2c <uECC_vli_modMult_fast>
}
   2336a:	b009      	add	sp, #36	; 0x24
   2336c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002336e <XYcZ_add>:
{
   2336e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23372:	b08a      	sub	sp, #40	; 0x28
   23374:	4614      	mov	r4, r2
   23376:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   2337a:	4655      	mov	r5, sl
{
   2337c:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   2337e:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   23382:	9600      	str	r6, [sp, #0]
{
   23384:	4680      	mov	r8, r0
   23386:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   23388:	462b      	mov	r3, r5
   2338a:	4602      	mov	r2, r0
   2338c:	4621      	mov	r1, r4
   2338e:	a802      	add	r0, sp, #8
   23390:	f7ff fd22 	bl	22dd8 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   23394:	a902      	add	r1, sp, #8
   23396:	4652      	mov	r2, sl
   23398:	4608      	mov	r0, r1
   2339a:	f7ff fdd7 	bl	22f4c <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   2339e:	4653      	mov	r3, sl
   233a0:	aa02      	add	r2, sp, #8
   233a2:	4641      	mov	r1, r8
   233a4:	4640      	mov	r0, r8
   233a6:	f7ff fdc1 	bl	22f2c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   233aa:	4653      	mov	r3, sl
   233ac:	aa02      	add	r2, sp, #8
   233ae:	4621      	mov	r1, r4
   233b0:	4620      	mov	r0, r4
   233b2:	f7ff fdbb 	bl	22f2c <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   233b6:	462b      	mov	r3, r5
   233b8:	464a      	mov	r2, r9
   233ba:	4639      	mov	r1, r7
   233bc:	4638      	mov	r0, r7
   233be:	9600      	str	r6, [sp, #0]
   233c0:	f7ff fd0a 	bl	22dd8 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   233c4:	4652      	mov	r2, sl
   233c6:	4639      	mov	r1, r7
   233c8:	a802      	add	r0, sp, #8
   233ca:	f7ff fdbf 	bl	22f4c <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   233ce:	a902      	add	r1, sp, #8
   233d0:	462b      	mov	r3, r5
   233d2:	4642      	mov	r2, r8
   233d4:	4608      	mov	r0, r1
   233d6:	9600      	str	r6, [sp, #0]
   233d8:	f7ff fcfe 	bl	22dd8 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   233dc:	a902      	add	r1, sp, #8
   233de:	462b      	mov	r3, r5
   233e0:	4622      	mov	r2, r4
   233e2:	4608      	mov	r0, r1
   233e4:	9600      	str	r6, [sp, #0]
   233e6:	f7ff fcf7 	bl	22dd8 <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   233ea:	462b      	mov	r3, r5
   233ec:	4642      	mov	r2, r8
   233ee:	4621      	mov	r1, r4
   233f0:	4620      	mov	r0, r4
   233f2:	9600      	str	r6, [sp, #0]
   233f4:	f7ff fcf0 	bl	22dd8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   233f8:	4653      	mov	r3, sl
   233fa:	4622      	mov	r2, r4
   233fc:	4649      	mov	r1, r9
   233fe:	4648      	mov	r0, r9
   23400:	f7ff fd94 	bl	22f2c <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   23404:	462b      	mov	r3, r5
   23406:	aa02      	add	r2, sp, #8
   23408:	4641      	mov	r1, r8
   2340a:	4620      	mov	r0, r4
   2340c:	9600      	str	r6, [sp, #0]
   2340e:	f7ff fce3 	bl	22dd8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   23412:	4653      	mov	r3, sl
   23414:	4622      	mov	r2, r4
   23416:	4639      	mov	r1, r7
   23418:	4638      	mov	r0, r7
   2341a:	f7ff fd87 	bl	22f2c <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   2341e:	462b      	mov	r3, r5
   23420:	464a      	mov	r2, r9
   23422:	4639      	mov	r1, r7
   23424:	4638      	mov	r0, r7
   23426:	9600      	str	r6, [sp, #0]
   23428:	f7ff fcd6 	bl	22dd8 <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   2342c:	4632      	mov	r2, r6
   2342e:	a902      	add	r1, sp, #8
   23430:	4620      	mov	r0, r4
   23432:	f7ff fc69 	bl	22d08 <uECC_vli_set>
}
   23436:	b00a      	add	sp, #40	; 0x28
   23438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002343c <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   2343c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23440:	b0b1      	sub	sp, #196	; 0xc4
   23442:	e9cd 0103 	strd	r0, r1, [sp, #12]
   23446:	9c3b      	ldr	r4, [sp, #236]	; 0xec
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   23448:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   2344c:	a818      	add	r0, sp, #96	; 0x60
{
   2344e:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   23450:	463a      	mov	r2, r7
{
   23452:	461e      	mov	r6, r3
	uECC_vli_set(Rx[1], point, num_words);
   23454:	f7ff fc58 	bl	22d08 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   23458:	00bb      	lsls	r3, r7, #2
   2345a:	9305      	str	r3, [sp, #20]
   2345c:	9b04      	ldr	r3, [sp, #16]
   2345e:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   23462:	4619      	mov	r1, r3
   23464:	a828      	add	r0, sp, #160	; 0xa0
   23466:	9302      	str	r3, [sp, #8]
   23468:	f7ff fc4e 	bl	22d08 <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   2346c:	f994 5000 	ldrsb.w	r5, [r4]
	if (initial_Z) {
   23470:	2e00      	cmp	r6, #0
   23472:	f000 8088 	beq.w	23586 <EccPoint_mult+0x14a>
		uECC_vli_set(z, initial_Z, num_words);
   23476:	462a      	mov	r2, r5
   23478:	4631      	mov	r1, r6
   2347a:	a808      	add	r0, sp, #32
   2347c:	f7ff fc44 	bl	22d08 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   23480:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   23484:	462a      	mov	r2, r5
   23486:	a918      	add	r1, sp, #96	; 0x60
   23488:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   2348a:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   2348e:	f7ff fc3b 	bl	22d08 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   23492:	a928      	add	r1, sp, #160	; 0xa0
   23494:	4648      	mov	r0, r9
   23496:	f7ff fc37 	bl	22d08 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   2349a:	4623      	mov	r3, r4
   2349c:	aa08      	add	r2, sp, #32
   2349e:	a928      	add	r1, sp, #160	; 0xa0
   234a0:	a818      	add	r0, sp, #96	; 0x60
   234a2:	f7ff ff45 	bl	23330 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   234a6:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   234aa:	4623      	mov	r3, r4
   234ac:	aa08      	add	r2, sp, #32
   234ae:	a928      	add	r1, sp, #160	; 0xa0
   234b0:	a818      	add	r0, sp, #96	; 0x60
   234b2:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   234b4:	4623      	mov	r3, r4
   234b6:	aa08      	add	r2, sp, #32
   234b8:	4649      	mov	r1, r9
   234ba:	4640      	mov	r0, r8
   234bc:	f7ff ff38 	bl	23330 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   234c0:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   234c4:	3d02      	subs	r5, #2
   234c6:	b22d      	sxth	r5, r5
   234c8:	2d00      	cmp	r5, #0
   234ca:	dc63      	bgt.n	23594 <EccPoint_mult+0x158>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   234cc:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   234d0:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   234d2:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   234d6:	ab10      	add	r3, sp, #64	; 0x40
   234d8:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   234dc:	43ed      	mvns	r5, r5
   234de:	ab20      	add	r3, sp, #128	; 0x80
   234e0:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   234e4:	f005 0501 	and.w	r5, r5, #1
   234e8:	ab10      	add	r3, sp, #64	; 0x40
   234ea:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   234ee:	ab20      	add	r3, sp, #128	; 0x80
   234f0:	eb03 1545 	add.w	r5, r3, r5, lsl #5

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   234f4:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   234f8:	462b      	mov	r3, r5
   234fa:	464a      	mov	r2, r9
   234fc:	4631      	mov	r1, r6
   234fe:	4640      	mov	r0, r8
   23500:	f7ff fe00 	bl	23104 <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   23504:	4653      	mov	r3, sl
   23506:	aa10      	add	r2, sp, #64	; 0x40
   23508:	a918      	add	r1, sp, #96	; 0x60
   2350a:	a808      	add	r0, sp, #32
   2350c:	9700      	str	r7, [sp, #0]
   2350e:	f7ff fc63 	bl	22dd8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   23512:	a908      	add	r1, sp, #32
   23514:	4623      	mov	r3, r4
   23516:	4632      	mov	r2, r6
   23518:	4608      	mov	r0, r1
   2351a:	f7ff fd07 	bl	22f2c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   2351e:	a908      	add	r1, sp, #32
   23520:	9a04      	ldr	r2, [sp, #16]
   23522:	4623      	mov	r3, r4
   23524:	4608      	mov	r0, r1
   23526:	f7ff fd01 	bl	22f2c <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   2352a:	a908      	add	r1, sp, #32
   2352c:	463b      	mov	r3, r7
   2352e:	4652      	mov	r2, sl
   23530:	4608      	mov	r0, r1
   23532:	f7ff fe75 	bl	23220 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   23536:	a908      	add	r1, sp, #32
   23538:	9a02      	ldr	r2, [sp, #8]
   2353a:	4623      	mov	r3, r4
   2353c:	4608      	mov	r0, r1
   2353e:	f7ff fcf5 	bl	22f2c <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   23542:	a908      	add	r1, sp, #32
   23544:	4623      	mov	r3, r4
   23546:	4642      	mov	r2, r8
   23548:	4608      	mov	r0, r1
   2354a:	f7ff fcef 	bl	22f2c <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   2354e:	9400      	str	r4, [sp, #0]
   23550:	4633      	mov	r3, r6
   23552:	4642      	mov	r2, r8
   23554:	4629      	mov	r1, r5
   23556:	4648      	mov	r0, r9
   23558:	f7ff ff09 	bl	2336e <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   2355c:	4623      	mov	r3, r4
   2355e:	aa08      	add	r2, sp, #32
   23560:	a920      	add	r1, sp, #128	; 0x80
   23562:	a810      	add	r0, sp, #64	; 0x40
   23564:	f7ff fee4 	bl	23330 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   23568:	9803      	ldr	r0, [sp, #12]
   2356a:	463a      	mov	r2, r7
   2356c:	a910      	add	r1, sp, #64	; 0x40
   2356e:	f7ff fbcb 	bl	22d08 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   23572:	9b03      	ldr	r3, [sp, #12]
   23574:	9c05      	ldr	r4, [sp, #20]
   23576:	4423      	add	r3, r4
   23578:	a920      	add	r1, sp, #128	; 0x80
   2357a:	4618      	mov	r0, r3
   2357c:	f7ff fbc4 	bl	22d08 <uECC_vli_set>
}
   23580:	b031      	add	sp, #196	; 0xc4
   23582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   23586:	4629      	mov	r1, r5
   23588:	a808      	add	r0, sp, #32
   2358a:	f7ff fb78 	bl	22c7e <uECC_vli_clear>
		z[0] = 1;
   2358e:	2301      	movs	r3, #1
   23590:	9308      	str	r3, [sp, #32]
   23592:	e775      	b.n	23480 <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   23594:	4629      	mov	r1, r5
   23596:	4650      	mov	r0, sl
   23598:	f7ff fb8b 	bl	22cb2 <uECC_vli_testBit>
   2359c:	fab0 f680 	clz	r6, r0
   235a0:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   235a2:	f1c6 0101 	rsb	r1, r6, #1
   235a6:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   235aa:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   235ae:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   235b2:	4633      	mov	r3, r6
   235b4:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   235b8:	465a      	mov	r2, fp
   235ba:	9400      	str	r4, [sp, #0]
   235bc:	e9cd 0106 	strd	r0, r1, [sp, #24]
   235c0:	f7ff fda0 	bl	23104 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   235c4:	9907      	ldr	r1, [sp, #28]
   235c6:	9806      	ldr	r0, [sp, #24]
   235c8:	9400      	str	r4, [sp, #0]
   235ca:	460b      	mov	r3, r1
   235cc:	4602      	mov	r2, r0
   235ce:	4631      	mov	r1, r6
   235d0:	4658      	mov	r0, fp
   235d2:	f7ff fecc 	bl	2336e <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   235d6:	3d01      	subs	r5, #1
   235d8:	e775      	b.n	234c6 <EccPoint_mult+0x8a>

000235da <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   235da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   235de:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   235e2:	f119 081f 	adds.w	r8, r9, #31
{
   235e6:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   235e8:	bf48      	it	mi
   235ea:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   235ee:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   235f0:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   235f4:	3524      	adds	r5, #36	; 0x24
   235f6:	4601      	mov	r1, r0
{
   235f8:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   235fa:	4643      	mov	r3, r8
   235fc:	462a      	mov	r2, r5
   235fe:	4630      	mov	r0, r6
   23600:	f7ff fa84 	bl	22b0c <uECC_vli_add>
   23604:	4604      	mov	r4, r0
   23606:	b990      	cbnz	r0, 2362e <regularize_k+0x54>
   23608:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   2360c:	da06      	bge.n	2361c <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   2360e:	4649      	mov	r1, r9
   23610:	4630      	mov	r0, r6
   23612:	f7ff fb4e 	bl	22cb2 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   23616:	1e04      	subs	r4, r0, #0
   23618:	bf18      	it	ne
   2361a:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   2361c:	4643      	mov	r3, r8
   2361e:	462a      	mov	r2, r5
   23620:	4631      	mov	r1, r6
   23622:	4638      	mov	r0, r7
   23624:	f7ff fa72 	bl	22b0c <uECC_vli_add>

	return carry;
}
   23628:	4620      	mov	r0, r4
   2362a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   2362e:	2401      	movs	r4, #1
   23630:	e7f4      	b.n	2361c <regularize_k+0x42>

00023632 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   23632:	b530      	push	{r4, r5, lr}
   23634:	4614      	mov	r4, r2
   23636:	b095      	sub	sp, #84	; 0x54
   23638:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   2363a:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   2363c:	4623      	mov	r3, r4
{
   2363e:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   23640:	a904      	add	r1, sp, #16
   23642:	9102      	str	r1, [sp, #8]
   23644:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   23646:	f7ff ffc8 	bl	235da <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   2364a:	fab0 f380 	clz	r3, r0
   2364e:	095b      	lsrs	r3, r3, #5
   23650:	aa14      	add	r2, sp, #80	; 0x50
   23652:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   23656:	8863      	ldrh	r3, [r4, #2]
   23658:	9401      	str	r4, [sp, #4]
   2365a:	3301      	adds	r3, #1
   2365c:	b21b      	sxth	r3, r3
   2365e:	9300      	str	r3, [sp, #0]
   23660:	f852 2c48 	ldr.w	r2, [r2, #-72]
   23664:	2300      	movs	r3, #0
   23666:	f104 0144 	add.w	r1, r4, #68	; 0x44
   2366a:	4628      	mov	r0, r5
   2366c:	f7ff fee6 	bl	2343c <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   23670:	4621      	mov	r1, r4
   23672:	4628      	mov	r0, r5
   23674:	f7ff fe57 	bl	23326 <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   23678:	fab0 f080 	clz	r0, r0
   2367c:	0940      	lsrs	r0, r0, #5
   2367e:	b015      	add	sp, #84	; 0x54
   23680:	bd30      	pop	{r4, r5, pc}

00023682 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   23682:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   23684:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   23686:	1e4f      	subs	r7, r1, #1
   23688:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   2368a:	428c      	cmp	r4, r1
   2368c:	f105 0501 	add.w	r5, r5, #1
   23690:	db00      	blt.n	23694 <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   23692:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   23694:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   23696:	f023 0603 	bic.w	r6, r3, #3
   2369a:	f003 0303 	and.w	r3, r3, #3
   2369e:	5996      	ldr	r6, [r2, r6]
   236a0:	00db      	lsls	r3, r3, #3
   236a2:	fa26 f303 	lsr.w	r3, r6, r3
   236a6:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   236a8:	e7ee      	b.n	23688 <uECC_vli_nativeToBytes+0x6>

000236aa <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   236aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   236ac:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   236ae:	1cd1      	adds	r1, r2, #3
   236b0:	bf48      	it	mi
   236b2:	1d91      	addmi	r1, r2, #6
   236b4:	f341 0187 	sbfx	r1, r1, #2, #8
{
   236b8:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   236ba:	f7ff fae0 	bl	22c7e <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   236be:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   236c0:	1e67      	subs	r7, r4, #1
   236c2:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   236c4:	42a2      	cmp	r2, r4
   236c6:	f105 0501 	add.w	r5, r5, #1
   236ca:	db00      	blt.n	236ce <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   236cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   236ce:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   236d0:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   236d4:	5cb2      	ldrb	r2, [r6, r2]
   236d6:	f003 0303 	and.w	r3, r3, #3
   236da:	00db      	lsls	r3, r3, #3
   236dc:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   236e0:	5842      	ldr	r2, [r0, r1]
   236e2:	431a      	orrs	r2, r3
   236e4:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   236e6:	e7ec      	b.n	236c2 <uECC_vli_bytesToNative+0x18>

000236e8 <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   236e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   236ea:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   236ec:	f991 6000 	ldrsb.w	r6, [r1]
{
   236f0:	4605      	mov	r5, r0
   236f2:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   236f4:	f7ff fe17 	bl	23326 <EccPoint_isZero>
   236f8:	bb28      	cbnz	r0, 23746 <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   236fa:	1d27      	adds	r7, r4, #4
   236fc:	4632      	mov	r2, r6
   236fe:	4629      	mov	r1, r5
   23700:	4638      	mov	r0, r7
   23702:	f7ff fb0d 	bl	22d20 <uECC_vli_cmp_unsafe>
   23706:	2801      	cmp	r0, #1
   23708:	d120      	bne.n	2374c <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   2370a:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   2370e:	4632      	mov	r2, r6
   23710:	4638      	mov	r0, r7
   23712:	f7ff fb05 	bl	22d20 <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   23716:	2801      	cmp	r0, #1
   23718:	d118      	bne.n	2374c <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   2371a:	4622      	mov	r2, r4
   2371c:	4668      	mov	r0, sp
   2371e:	f7ff fc15 	bl	22f4c <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   23722:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   23726:	4622      	mov	r2, r4
   23728:	4629      	mov	r1, r5
   2372a:	a808      	add	r0, sp, #32
   2372c:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   2372e:	4632      	mov	r2, r6
   23730:	a908      	add	r1, sp, #32
   23732:	4668      	mov	r0, sp
   23734:	f7ff fb0b 	bl	22d4e <uECC_vli_equal>
   23738:	2800      	cmp	r0, #0
		return -3;
   2373a:	bf0c      	ite	eq
   2373c:	2000      	moveq	r0, #0
   2373e:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   23742:	b011      	add	sp, #68	; 0x44
   23744:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   23746:	f04f 30ff 	mov.w	r0, #4294967295
   2374a:	e7fa      	b.n	23742 <uECC_valid_point+0x5a>
		return -2;
   2374c:	f06f 0001 	mvn.w	r0, #1
   23750:	e7f7      	b.n	23742 <uECC_valid_point+0x5a>

00023752 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   23752:	b570      	push	{r4, r5, r6, lr}
   23754:	460c      	mov	r4, r1
   23756:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   23758:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   2375a:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   2375e:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   23760:	4601      	mov	r1, r0
   23762:	4668      	mov	r0, sp
   23764:	f7ff ffa1 	bl	236aa <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   23768:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   2376c:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   23770:	18a9      	adds	r1, r5, r2
   23772:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   23776:	f7ff ff98 	bl	236aa <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   2377a:	2210      	movs	r2, #16
   2377c:	4631      	mov	r1, r6
   2377e:	4668      	mov	r0, sp
   23780:	f7ff face 	bl	22d20 <uECC_vli_cmp_unsafe>
   23784:	b128      	cbz	r0, 23792 <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   23786:	4621      	mov	r1, r4
   23788:	4668      	mov	r0, sp
   2378a:	f7ff ffad 	bl	236e8 <uECC_valid_point>
}
   2378e:	b010      	add	sp, #64	; 0x40
   23790:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   23792:	f06f 0003 	mvn.w	r0, #3
   23796:	e7fa      	b.n	2378e <uECC_valid_public_key+0x3c>

00023798 <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   23798:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2379c:	4606      	mov	r6, r0
   2379e:	b0a9      	sub	sp, #164	; 0xa4
   237a0:	4688      	mov	r8, r1
   237a2:	4614      	mov	r4, r2
   237a4:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   237a6:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   237aa:	f7ee f8f9 	bl	119a0 <uECC_get_rng>
		if (!rng_function ||
   237ae:	4603      	mov	r3, r0
   237b0:	2800      	cmp	r0, #0
   237b2:	d03e      	beq.n	23832 <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   237b4:	2140      	movs	r1, #64	; 0x40
   237b6:	a808      	add	r0, sp, #32
   237b8:	4798      	blx	r3
		if (!rng_function ||
   237ba:	b3d0      	cbz	r0, 23832 <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   237bc:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   237c0:	f112 031f 	adds.w	r3, r2, #31
   237c4:	bf48      	it	mi
   237c6:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   237ca:	466d      	mov	r5, sp
   237cc:	464a      	mov	r2, r9
   237ce:	a908      	add	r1, sp, #32
   237d0:	4628      	mov	r0, r5
   237d2:	f343 1347 	sbfx	r3, r3, #5, #8
   237d6:	f7ff fb11 	bl	22dfc <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   237da:	4622      	mov	r2, r4
   237dc:	4629      	mov	r1, r5
   237de:	a818      	add	r0, sp, #96	; 0x60
   237e0:	f7ff ff27 	bl	23632 <EccPoint_compute_public_key>
   237e4:	b318      	cbz	r0, 2382e <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   237e6:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   237ea:	1dd9      	adds	r1, r3, #7
   237ec:	bf48      	it	mi
   237ee:	f103 010e 	addmi.w	r1, r3, #14
   237f2:	462a      	mov	r2, r5
   237f4:	4640      	mov	r0, r8
   237f6:	10c9      	asrs	r1, r1, #3
   237f8:	f7ff ff43 	bl	23682 <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   237fc:	f994 1001 	ldrsb.w	r1, [r4, #1]
   23800:	aa18      	add	r2, sp, #96	; 0x60
   23802:	4630      	mov	r0, r6
   23804:	f7ff ff3d 	bl	23682 <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   23808:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   2380c:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   23810:	ab18      	add	r3, sp, #96	; 0x60
   23812:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   23816:	1870      	adds	r0, r6, r1
   23818:	f7ff ff33 	bl	23682 <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   2381c:	2220      	movs	r2, #32
   2381e:	2100      	movs	r1, #0
   23820:	4628      	mov	r0, r5
   23822:	f001 fb38 	bl	24e96 <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   23826:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   23828:	b029      	add	sp, #164	; 0xa4
   2382a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   2382e:	3f01      	subs	r7, #1
   23830:	d1bb      	bne.n	237aa <uECC_make_key+0x12>
        		return 0;
   23832:	2000      	movs	r0, #0
   23834:	e7f8      	b.n	23828 <uECC_make_key+0x90>

00023836 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   23836:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2383a:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   2383c:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   23840:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   23844:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   23848:	b0a4      	sub	sp, #144	; 0x90
   2384a:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   2384c:	1dda      	adds	r2, r3, #7
   2384e:	bf48      	it	mi
   23850:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   23854:	ad04      	add	r5, sp, #16
{
   23856:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   23858:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   2385a:	4628      	mov	r0, r5
   2385c:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   2385e:	9502      	str	r5, [sp, #8]
   23860:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   23862:	f7ff ff22 	bl	236aa <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   23866:	463a      	mov	r2, r7
   23868:	4649      	mov	r1, r9
   2386a:	a814      	add	r0, sp, #80	; 0x50
   2386c:	f7ff ff1d 	bl	236aa <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   23870:	ab14      	add	r3, sp, #80	; 0x50
   23872:	eb09 0107 	add.w	r1, r9, r7
   23876:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   2387a:	463a      	mov	r2, r7
   2387c:	f7ff ff15 	bl	236aa <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   23880:	4623      	mov	r3, r4
   23882:	4632      	mov	r2, r6
   23884:	4629      	mov	r1, r5
   23886:	4628      	mov	r0, r5
   23888:	f7ff fea7 	bl	235da <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   2388c:	fab0 f080 	clz	r0, r0
   23890:	9401      	str	r4, [sp, #4]
   23892:	ab24      	add	r3, sp, #144	; 0x90
   23894:	0940      	lsrs	r0, r0, #5
   23896:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   2389a:	8863      	ldrh	r3, [r4, #2]
   2389c:	3301      	adds	r3, #1
   2389e:	b21b      	sxth	r3, r3
   238a0:	9300      	str	r3, [sp, #0]
   238a2:	a914      	add	r1, sp, #80	; 0x50
   238a4:	2300      	movs	r3, #0
   238a6:	f850 2c88 	ldr.w	r2, [r0, #-136]
   238aa:	4608      	mov	r0, r1
   238ac:	f7ff fdc6 	bl	2343c <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   238b0:	aa14      	add	r2, sp, #80	; 0x50
   238b2:	4639      	mov	r1, r7
   238b4:	4640      	mov	r0, r8
   238b6:	f7ff fee4 	bl	23682 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   238ba:	4621      	mov	r1, r4
   238bc:	a814      	add	r0, sp, #80	; 0x50
   238be:	f7ff fd32 	bl	23326 <EccPoint_isZero>
   238c2:	af02      	add	r7, sp, #8
   238c4:	4604      	mov	r4, r0
   238c6:	2208      	movs	r2, #8
   238c8:	2100      	movs	r1, #0
   238ca:	4638      	mov	r0, r7
   238cc:	f001 fae3 	bl	24e96 <memset>
   238d0:	2220      	movs	r2, #32
   238d2:	2100      	movs	r1, #0
   238d4:	4630      	mov	r0, r6
   238d6:	f001 fade 	bl	24e96 <memset>
   238da:	2220      	movs	r2, #32
   238dc:	2100      	movs	r1, #0
   238de:	4628      	mov	r0, r5
   238e0:	f001 fad9 	bl	24e96 <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   238e4:	fab4 f084 	clz	r0, r4
   238e8:	0940      	lsrs	r0, r0, #5
   238ea:	b024      	add	sp, #144	; 0x90
   238ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000238f0 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   238f0:	4770      	bx	lr

000238f2 <get_sectors_cb>:
{
   238f2:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   238f4:	6802      	ldr	r2, [r0, #0]
   238f6:	684c      	ldr	r4, [r1, #4]
   238f8:	42a2      	cmp	r2, r4
   238fa:	d316      	bcc.n	2392a <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   238fc:	688b      	ldr	r3, [r1, #8]
   238fe:	4423      	add	r3, r4
   23900:	429a      	cmp	r2, r3
   23902:	d206      	bcs.n	23912 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   23904:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   23908:	42ab      	cmp	r3, r5
   2390a:	d304      	bcc.n	23916 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   2390c:	f06f 030b 	mvn.w	r3, #11
   23910:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   23912:	2000      	movs	r0, #0
   23914:	e00a      	b.n	2392c <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   23916:	68cd      	ldr	r5, [r1, #12]
   23918:	1b12      	subs	r2, r2, r4
   2391a:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
   2391e:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   23922:	6842      	ldr	r2, [r0, #4]
   23924:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   23926:	3301      	adds	r3, #1
   23928:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   2392a:	2001      	movs	r0, #1
}
   2392c:	bd70      	pop	{r4, r5, r6, pc}

0002392e <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   2392e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   23932:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   23934:	0840      	lsrs	r0, r0, #1
   23936:	4770      	bx	lr

00023938 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   23938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2393a:	4603      	mov	r3, r0
   2393c:	460c      	mov	r4, r1
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   2393e:	f7ff fff6 	bl	2392e <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   23942:	fab0 f080 	clz	r0, r0
   23946:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   2394a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   2394e:	00ca      	lsls	r2, r1, #3
   23950:	f8dc 6010 	ldr.w	r6, [ip, #16]
   23954:	1d17      	adds	r7, r2, #4
   23956:	b28d      	uxth	r5, r1
   23958:	3206      	adds	r2, #6
   2395a:	b956      	cbnz	r6, 23972 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   2395c:	2101      	movs	r1, #1
   2395e:	fa01 f000 	lsl.w	r0, r1, r0
   23962:	68d9      	ldr	r1, [r3, #12]
   23964:	4301      	orrs	r1, r0
   23966:	60d9      	str	r1, [r3, #12]
		b->next = c;
   23968:	f8cc 4010 	str.w	r4, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   2396c:	53dd      	strh	r5, [r3, r7]
   2396e:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   23970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   23972:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   23974:	3104      	adds	r1, #4
   23976:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   23978:	53d8      	strh	r0, [r3, r7]
   2397a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   2397e:	529e      	strh	r6, [r3, r2]
   23980:	80c5      	strh	r5, [r0, #6]
   23982:	525d      	strh	r5, [r3, r1]
   23984:	e7f4      	b.n	23970 <free_list_add+0x38>

00023986 <free_list_remove_bidx>:
{
   23986:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   23988:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   2398c:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   2398e:	4299      	cmp	r1, r3
   23990:	f102 0104 	add.w	r1, r2, #4
   23994:	d10a      	bne.n	239ac <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   23996:	2301      	movs	r3, #1
   23998:	fa03 f202 	lsl.w	r2, r3, r2
   2399c:	68c3      	ldr	r3, [r0, #12]
   2399e:	ea23 0302 	bic.w	r3, r3, r2
   239a2:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   239a4:	2300      	movs	r3, #0
   239a6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   239aa:	bd10      	pop	{r4, pc}
   239ac:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   239ae:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   239b2:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   239b6:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   239ba:	80cb      	strh	r3, [r1, #6]
   239bc:	8082      	strh	r2, [r0, #4]
}
   239be:	e7f4      	b.n	239aa <free_list_remove_bidx+0x24>

000239c0 <free_list_remove>:
{
   239c0:	b510      	push	{r4, lr}
   239c2:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   239c4:	f7ff ffb3 	bl	2392e <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   239c8:	fab0 f280 	clz	r2, r0
}
   239cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		free_list_remove_bidx(h, c, bidx);
   239d0:	f1c2 021f 	rsb	r2, r2, #31
   239d4:	4618      	mov	r0, r3
   239d6:	f7ff bfd6 	b.w	23986 <free_list_remove_bidx>

000239da <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   239da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   239de:	fab1 f581 	clz	r5, r1
   239e2:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   239e6:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   239ea:	4603      	mov	r3, r0
	if (b->next) {
   239ec:	693a      	ldr	r2, [r7, #16]
{
   239ee:	460e      	mov	r6, r1
	if (b->next) {
   239f0:	b1ca      	cbz	r2, 23a26 <alloc_chunk+0x4c>
   239f2:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   239f6:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   239f8:	4618      	mov	r0, r3
   239fa:	4621      	mov	r1, r4
   239fc:	f7ff ff97 	bl	2392e <chunk_size>
   23a00:	42b0      	cmp	r0, r6
   23a02:	d307      	bcc.n	23a14 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   23a04:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   23a06:	4621      	mov	r1, r4
   23a08:	4618      	mov	r0, r3
   23a0a:	f7ff ffbc 	bl	23986 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   23a0e:	4620      	mov	r0, r4
   23a10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   23a14:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   23a18:	f1b8 0801 	subs.w	r8, r8, #1
   23a1c:	88e1      	ldrh	r1, [r4, #6]
			b->next = next_free_chunk(h, c);
   23a1e:	6139      	str	r1, [r7, #16]
		} while (--i && b->next != first);
   23a20:	d001      	beq.n	23a26 <alloc_chunk+0x4c>
   23a22:	428a      	cmp	r2, r1
   23a24:	d1e7      	bne.n	239f6 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   23a26:	68d9      	ldr	r1, [r3, #12]
   23a28:	f1c5 0520 	rsb	r5, r5, #32
   23a2c:	f04f 34ff 	mov.w	r4, #4294967295
   23a30:	40ac      	lsls	r4, r5
	if (bmask != 0U) {
   23a32:	400c      	ands	r4, r1
   23a34:	d0eb      	beq.n	23a0e <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   23a36:	fa94 f2a4 	rbit	r2, r4
   23a3a:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   23a3e:	1d11      	adds	r1, r2, #4
   23a40:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
   23a44:	e7df      	b.n	23a06 <alloc_chunk+0x2c>

00023a46 <merge_chunks>:
{
   23a46:	b538      	push	{r3, r4, r5, lr}
   23a48:	4603      	mov	r3, r0
   23a4a:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   23a4c:	f7ff ff6f 	bl	2392e <chunk_size>
   23a50:	4611      	mov	r1, r2
   23a52:	4604      	mov	r4, r0
   23a54:	4618      	mov	r0, r3
   23a56:	f7ff ff6a 	bl	2392e <chunk_size>
   23a5a:	4404      	add	r4, r0
		((uint16_t *)cmem)[f] = val;
   23a5c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   23a60:	0061      	lsls	r1, r4, #1
		((uint16_t *)cmem)[f] = val;
   23a62:	8069      	strh	r1, [r5, #2]
	return c + chunk_size(h, c);
   23a64:	4618      	mov	r0, r3
   23a66:	4611      	mov	r1, r2
   23a68:	f7ff ff61 	bl	2392e <chunk_size>
	void *cmem = &buf[c];
   23a6c:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
   23a6e:	f823 4032 	strh.w	r4, [r3, r2, lsl #3]
}
   23a72:	bd38      	pop	{r3, r4, r5, pc}

00023a74 <split_chunks>:
{
   23a74:	b538      	push	{r3, r4, r5, lr}
   23a76:	4603      	mov	r3, r0
   23a78:	460c      	mov	r4, r1
	chunksz_t sz0 = chunk_size(h, lc);
   23a7a:	f7ff ff58 	bl	2392e <chunk_size>
	chunksz_t lsz = rc - lc;
   23a7e:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   23a80:	1aa5      	subs	r5, r4, r2
   23a82:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   23a86:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   23a88:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   23a8a:	8060      	strh	r0, [r4, #2]
   23a8c:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   23a90:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   23a92:	8044      	strh	r4, [r0, #2]
   23a94:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   23a98:	4618      	mov	r0, r3
   23a9a:	4611      	mov	r1, r2
   23a9c:	f7ff ff47 	bl	2392e <chunk_size>
	void *cmem = &buf[c];
   23aa0:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
   23aa2:	f823 5032 	strh.w	r5, [r3, r2, lsl #3]
}
   23aa6:	bd38      	pop	{r3, r4, r5, pc}

00023aa8 <free_chunk>:
{
   23aa8:	b538      	push	{r3, r4, r5, lr}
   23aaa:	4605      	mov	r5, r0
   23aac:	460c      	mov	r4, r1
	return c + chunk_size(h, c);
   23aae:	f7ff ff3e 	bl	2392e <chunk_size>
   23ab2:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   23ab4:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   23ab8:	789b      	ldrb	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   23aba:	07da      	lsls	r2, r3, #31
   23abc:	d40a      	bmi.n	23ad4 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   23abe:	4628      	mov	r0, r5
   23ac0:	f7ff ff7e 	bl	239c0 <free_list_remove>
	return c + chunk_size(h, c);
   23ac4:	4621      	mov	r1, r4
   23ac6:	4628      	mov	r0, r5
   23ac8:	f7ff ff31 	bl	2392e <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   23acc:	1822      	adds	r2, r4, r0
   23ace:	4628      	mov	r0, r5
   23ad0:	f7ff ffb9 	bl	23a46 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   23ad4:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   23ad8:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   23ada:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   23ade:	789b      	ldrb	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   23ae0:	07db      	lsls	r3, r3, #31
   23ae2:	d40c      	bmi.n	23afe <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   23ae4:	4628      	mov	r0, r5
   23ae6:	f7ff ff6b 	bl	239c0 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   23aea:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   23aee:	4622      	mov	r2, r4
   23af0:	1a61      	subs	r1, r4, r1
   23af2:	4628      	mov	r0, r5
   23af4:	f7ff ffa7 	bl	23a46 <merge_chunks>
   23af8:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   23afc:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   23afe:	4621      	mov	r1, r4
   23b00:	4628      	mov	r0, r5
}
   23b02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   23b06:	f7ff bf17 	b.w	23938 <free_list_add>

00023b0a <sys_heap_free>:
	if (mem == NULL) {
   23b0a:	b161      	cbz	r1, 23b26 <sys_heap_free+0x1c>
	struct z_heap *h = heap->heap;
   23b0c:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   23b0e:	3904      	subs	r1, #4
   23b10:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   23b12:	f021 0307 	bic.w	r3, r1, #7
   23b16:	4403      	add	r3, r0
	free_chunk(h, c);
   23b18:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   23b1a:	885a      	ldrh	r2, [r3, #2]
   23b1c:	f022 0201 	bic.w	r2, r2, #1
   23b20:	805a      	strh	r2, [r3, #2]
   23b22:	f7ff bfc1 	b.w	23aa8 <free_chunk>
}
   23b26:	4770      	bx	lr

00023b28 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   23b28:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   23b2a:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   23b2c:	b909      	cbnz	r1, 23b32 <sys_heap_alloc+0xa>
		return NULL;
   23b2e:	2000      	movs	r0, #0
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return chunk_mem(h, c);
}
   23b30:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   23b32:	68ab      	ldr	r3, [r5, #8]
   23b34:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   23b38:	d9f9      	bls.n	23b2e <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   23b3a:	310b      	adds	r1, #11
   23b3c:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   23b3e:	4621      	mov	r1, r4
   23b40:	4628      	mov	r0, r5
   23b42:	f7ff ff4a 	bl	239da <alloc_chunk>
	if (c == 0U) {
   23b46:	4606      	mov	r6, r0
   23b48:	2800      	cmp	r0, #0
   23b4a:	d0f0      	beq.n	23b2e <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   23b4c:	4601      	mov	r1, r0
   23b4e:	4628      	mov	r0, r5
   23b50:	f7ff feed 	bl	2392e <chunk_size>
   23b54:	42a0      	cmp	r0, r4
   23b56:	d908      	bls.n	23b6a <sys_heap_alloc+0x42>
		split_chunks(h, c, c + chunk_sz);
   23b58:	4434      	add	r4, r6
   23b5a:	4628      	mov	r0, r5
   23b5c:	4622      	mov	r2, r4
   23b5e:	f7ff ff89 	bl	23a74 <split_chunks>
		free_list_add(h, c + chunk_sz);
   23b62:	4621      	mov	r1, r4
   23b64:	4628      	mov	r0, r5
   23b66:	f7ff fee7 	bl	23938 <free_list_add>
	void *cmem = &buf[c];
   23b6a:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   23b6e:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   23b70:	8853      	ldrh	r3, [r2, #2]
   23b72:	f043 0301 	orr.w	r3, r3, #1
   23b76:	8053      	strh	r3, [r2, #2]
   23b78:	3004      	adds	r0, #4
	return chunk_mem(h, c);
   23b7a:	e7d9      	b.n	23b30 <sys_heap_alloc+0x8>

00023b7c <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   23b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23b80:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   23b82:	424a      	negs	r2, r1
   23b84:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   23b88:	ea31 0202 	bics.w	r2, r1, r2
{
   23b8c:	4603      	mov	r3, r0
	if (align != rew) {
   23b8e:	d00a      	beq.n	23ba6 <sys_heap_aligned_alloc+0x2a>
		return false;
   23b90:	2f04      	cmp	r7, #4
   23b92:	463a      	mov	r2, r7
   23b94:	46b9      	mov	r9, r7
   23b96:	bf28      	it	cs
   23b98:	2204      	movcs	r2, #4
		align -= rew;
   23b9a:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   23b9c:	b974      	cbnz	r4, 23bbc <sys_heap_aligned_alloc+0x40>
		return NULL;
   23b9e:	2500      	movs	r5, #0
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return mem;
}
   23ba0:	4628      	mov	r0, r5
   23ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   23ba6:	2904      	cmp	r1, #4
   23ba8:	d804      	bhi.n	23bb4 <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
   23baa:	4621      	mov	r1, r4
}
   23bac:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   23bb0:	f7ff bfba 	b.w	23b28 <sys_heap_alloc>
		rew = 0;
   23bb4:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   23bb8:	2204      	movs	r2, #4
   23bba:	e7ef      	b.n	23b9c <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
   23bbc:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
   23bbe:	68b3      	ldr	r3, [r6, #8]
   23bc0:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   23bc4:	d9eb      	bls.n	23b9e <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   23bc6:	f104 010b 	add.w	r1, r4, #11
   23bca:	4439      	add	r1, r7
   23bcc:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   23bce:	08c9      	lsrs	r1, r1, #3
   23bd0:	4630      	mov	r0, r6
   23bd2:	f7ff ff02 	bl	239da <alloc_chunk>
	if (c0 == 0) {
   23bd6:	4680      	mov	r8, r0
   23bd8:	2800      	cmp	r0, #0
   23bda:	d0e0      	beq.n	23b9e <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   23bdc:	f109 0504 	add.w	r5, r9, #4
   23be0:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   23be4:	1e7b      	subs	r3, r7, #1
   23be6:	4435      	add	r5, r6
   23be8:	441d      	add	r5, r3
   23bea:	427f      	negs	r7, r7
   23bec:	403d      	ands	r5, r7
   23bee:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   23bf2:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   23bf4:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   23bf6:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   23bf8:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   23bfa:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   23bfe:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   23c00:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   23c04:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   23c08:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   23c0c:	d208      	bcs.n	23c20 <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
   23c0e:	4601      	mov	r1, r0
   23c10:	463a      	mov	r2, r7
   23c12:	4630      	mov	r0, r6
   23c14:	f7ff ff2e 	bl	23a74 <split_chunks>
		free_list_add(h, c0);
   23c18:	4641      	mov	r1, r8
   23c1a:	4630      	mov	r0, r6
   23c1c:	f7ff fe8c 	bl	23938 <free_list_add>
	return c + chunk_size(h, c);
   23c20:	4639      	mov	r1, r7
   23c22:	4630      	mov	r0, r6
   23c24:	f7ff fe83 	bl	2392e <chunk_size>
   23c28:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   23c2a:	4284      	cmp	r4, r0
   23c2c:	d207      	bcs.n	23c3e <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
   23c2e:	4630      	mov	r0, r6
   23c30:	4622      	mov	r2, r4
   23c32:	f7ff ff1f 	bl	23a74 <split_chunks>
		free_list_add(h, c_end);
   23c36:	4621      	mov	r1, r4
   23c38:	4630      	mov	r0, r6
   23c3a:	f7ff fe7d 	bl	23938 <free_list_add>
	void *cmem = &buf[c];
   23c3e:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   23c42:	8873      	ldrh	r3, [r6, #2]
   23c44:	f043 0301 	orr.w	r3, r3, #1
   23c48:	8073      	strh	r3, [r6, #2]
   23c4a:	e7a9      	b.n	23ba0 <sys_heap_aligned_alloc+0x24>

00023c4c <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   23c4c:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   23c4e:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   23c50:	440a      	add	r2, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   23c52:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   23c56:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   23c5a:	1ad2      	subs	r2, r2, r3
{
   23c5c:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   23c5e:	08d4      	lsrs	r4, r2, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   23c60:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
   23c62:	fab4 f084 	clz	r0, r4
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   23c66:	f1c0 0024 	rsb	r0, r0, #36	; 0x24
   23c6a:	0080      	lsls	r0, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   23c6c:	1dc1      	adds	r1, r0, #7
	h->avail_buckets = 0;
   23c6e:	2500      	movs	r5, #0
	h->end_chunk = heap_sz;
   23c70:	609c      	str	r4, [r3, #8]
	h->avail_buckets = 0;
   23c72:	60dd      	str	r5, [r3, #12]
   23c74:	08c9      	lsrs	r1, r1, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   23c76:	f103 0610 	add.w	r6, r3, #16
   23c7a:	4418      	add	r0, r3
   23c7c:	4286      	cmp	r6, r0
   23c7e:	d118      	bne.n	23cb2 <sys_heap_init+0x66>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   23c80:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   23c82:	f040 0001 	orr.w	r0, r0, #1
   23c86:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
   23c88:	eb03 06c1 	add.w	r6, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   23c8c:	1a60      	subs	r0, r4, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   23c8e:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
   23c90:	801d      	strh	r5, [r3, #0]
   23c92:	8077      	strh	r7, [r6, #2]
   23c94:	189e      	adds	r6, r3, r2
   23c96:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
   23c9a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		((uint16_t *)cmem)[f] = val;
   23c9e:	8075      	strh	r5, [r6, #2]
   23ca0:	5298      	strh	r0, [r3, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   23ca2:	8862      	ldrh	r2, [r4, #2]
   23ca4:	f042 0201 	orr.w	r2, r2, #1
   23ca8:	8062      	strh	r2, [r4, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   23caa:	4618      	mov	r0, r3
}
   23cac:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   23cae:	f7ff be43 	b.w	23938 <free_list_add>
		h->buckets[i].next = 0;
   23cb2:	f846 5b04 	str.w	r5, [r6], #4
	for (int i = 0; i < nb_buckets; i++) {
   23cb6:	e7e1      	b.n	23c7c <sys_heap_init+0x30>

00023cb8 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   23cb8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   23cbc:	b2db      	uxtb	r3, r3
   23cbe:	2b09      	cmp	r3, #9
   23cc0:	d802      	bhi.n	23cc8 <char2hex+0x10>
		*x = c - '0';
   23cc2:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   23cc4:	2000      	movs	r0, #0
   23cc6:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   23cc8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   23ccc:	2b05      	cmp	r3, #5
   23cce:	d802      	bhi.n	23cd6 <char2hex+0x1e>
		*x = c - 'a' + 10;
   23cd0:	3857      	subs	r0, #87	; 0x57
   23cd2:	7008      	strb	r0, [r1, #0]
   23cd4:	e7f6      	b.n	23cc4 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   23cd6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   23cda:	2b05      	cmp	r3, #5
   23cdc:	d801      	bhi.n	23ce2 <char2hex+0x2a>
		*x = c - 'A' + 10;
   23cde:	3837      	subs	r0, #55	; 0x37
   23ce0:	e7f7      	b.n	23cd2 <char2hex+0x1a>
		return -EINVAL;
   23ce2:	f06f 0015 	mvn.w	r0, #21
}
   23ce6:	4770      	bx	lr

00023ce8 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   23ce8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   23cea:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   23cec:	f001 0001 	and.w	r0, r1, #1
   23cf0:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   23cf4:	429d      	cmp	r5, r3
   23cf6:	ea4f 0651 	mov.w	r6, r1, lsr #1
   23cfa:	d903      	bls.n	23d04 <hex2bin+0x1c>
		return 0;
   23cfc:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   23cfe:	4628      	mov	r0, r5
   23d00:	b003      	add	sp, #12
   23d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   23d04:	b158      	cbz	r0, 23d1e <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   23d06:	7820      	ldrb	r0, [r4, #0]
   23d08:	f10d 0107 	add.w	r1, sp, #7
   23d0c:	f7ff ffd4 	bl	23cb8 <char2hex>
   23d10:	2800      	cmp	r0, #0
   23d12:	dbf3      	blt.n	23cfc <hex2bin+0x14>
		buf[0] = dec;
   23d14:	f89d 3007 	ldrb.w	r3, [sp, #7]
   23d18:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   23d1c:	3401      	adds	r4, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   23d1e:	3401      	adds	r4, #1
   23d20:	4416      	add	r6, r2
   23d22:	42b2      	cmp	r2, r6
   23d24:	d0eb      	beq.n	23cfe <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   23d26:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   23d2a:	f10d 0107 	add.w	r1, sp, #7
   23d2e:	f7ff ffc3 	bl	23cb8 <char2hex>
   23d32:	2800      	cmp	r0, #0
   23d34:	dbe2      	blt.n	23cfc <hex2bin+0x14>
		buf[i] = dec << 4;
   23d36:	f89d 3007 	ldrb.w	r3, [sp, #7]
   23d3a:	011b      	lsls	r3, r3, #4
   23d3c:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   23d3e:	f814 0b02 	ldrb.w	r0, [r4], #2
   23d42:	f10d 0107 	add.w	r1, sp, #7
   23d46:	f7ff ffb7 	bl	23cb8 <char2hex>
   23d4a:	2800      	cmp	r0, #0
   23d4c:	dbd6      	blt.n	23cfc <hex2bin+0x14>
		buf[i] += dec;
   23d4e:	7813      	ldrb	r3, [r2, #0]
   23d50:	f89d 1007 	ldrb.w	r1, [sp, #7]
   23d54:	440b      	add	r3, r1
   23d56:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   23d5a:	e7e2      	b.n	23d22 <hex2bin+0x3a>

00023d5c <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                        uint16_t len)
{
   23d5c:	b410      	push	{r4}
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
   23d5e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
   23d62:	46a4      	mov	ip, r4

  return ret;
}
   23d64:	bc10      	pop	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
   23d66:	4760      	bx	ip

00023d68 <hts221_write_reg>:
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
   23d68:	b410      	push	{r4}
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
   23d6a:	6804      	ldr	r4, [r0, #0]
   23d6c:	6880      	ldr	r0, [r0, #8]
   23d6e:	46a4      	mov	ip, r4

  return ret;
}
   23d70:	bc10      	pop	{r4}
  ret = ctx->write_reg(ctx->handle, reg, data, len);
   23d72:	4760      	bx	ip

00023d74 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
   23d74:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   23d76:	2301      	movs	r3, #1
{
   23d78:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   23d7a:	aa01      	add	r2, sp, #4
   23d7c:	2120      	movs	r1, #32
{
   23d7e:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   23d80:	f7ff ffec 	bl	23d5c <hts221_read_reg>

  if (ret == 0)
   23d84:	b958      	cbnz	r0, 23d9e <hts221_data_rate_set+0x2a>
  {
    reg.odr = (uint8_t)val;
   23d86:	f89d 3004 	ldrb.w	r3, [sp, #4]
   23d8a:	f365 0301 	bfi	r3, r5, #0, #2
   23d8e:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   23d92:	aa01      	add	r2, sp, #4
   23d94:	2301      	movs	r3, #1
   23d96:	2120      	movs	r1, #32
   23d98:	4620      	mov	r0, r4
   23d9a:	f7ff ffe5 	bl	23d68 <hts221_write_reg>
  }

  return ret;
}
   23d9e:	b003      	add	sp, #12
   23da0:	bd30      	pop	{r4, r5, pc}

00023da2 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
   23da2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   23da4:	2301      	movs	r3, #1
{
   23da6:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   23da8:	aa01      	add	r2, sp, #4
   23daa:	2120      	movs	r1, #32
{
   23dac:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   23dae:	f7ff ffd5 	bl	23d5c <hts221_read_reg>

  if (ret == 0)
   23db2:	b958      	cbnz	r0, 23dcc <hts221_block_data_update_set+0x2a>
  {
    reg.bdu = val;
   23db4:	f89d 3004 	ldrb.w	r3, [sp, #4]
   23db8:	f365 0382 	bfi	r3, r5, #2, #1
   23dbc:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   23dc0:	aa01      	add	r2, sp, #4
   23dc2:	2301      	movs	r3, #1
   23dc4:	2120      	movs	r1, #32
   23dc6:	4620      	mov	r0, r4
   23dc8:	f7ff ffce 	bl	23d68 <hts221_write_reg>
  }

  return ret;
}
   23dcc:	b003      	add	sp, #12
   23dce:	bd30      	pop	{r4, r5, pc}

00023dd0 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
   23dd0:	460a      	mov	r2, r1
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
   23dd2:	2301      	movs	r3, #1
   23dd4:	210f      	movs	r1, #15
   23dd6:	f7ff bfc1 	b.w	23d5c <hts221_read_reg>

00023dda <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
   23dda:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   23ddc:	2301      	movs	r3, #1
{
   23dde:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   23de0:	aa01      	add	r2, sp, #4
   23de2:	2120      	movs	r1, #32
{
   23de4:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   23de6:	f7ff ffb9 	bl	23d5c <hts221_read_reg>

  if (ret == 0)
   23dea:	b958      	cbnz	r0, 23e04 <hts221_power_on_set+0x2a>
  {
    reg.pd = val;
   23dec:	f89d 3004 	ldrb.w	r3, [sp, #4]
   23df0:	f365 13c7 	bfi	r3, r5, #7, #1
   23df4:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   23df8:	aa01      	add	r2, sp, #4
   23dfa:	2301      	movs	r3, #1
   23dfc:	2120      	movs	r1, #32
   23dfe:	4620      	mov	r0, r4
   23e00:	f7ff ffb2 	bl	23d68 <hts221_write_reg>
  }

  return ret;
}
   23e04:	b003      	add	sp, #12
   23e06:	bd30      	pop	{r4, r5, pc}

00023e08 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   23e08:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   23e0a:	f7ee fa85 	bl	12318 <log_msg_chunk_alloc>

	if (msg != NULL) {
   23e0e:	b118      	cbz	r0, 23e18 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   23e10:	2301      	movs	r3, #1
   23e12:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   23e14:	2300      	movs	r3, #0
   23e16:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   23e18:	bd08      	pop	{r3, pc}

00023e1a <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   23e1a:	f003 bed9 	b.w	27bd0 <sys_clock_cycle_get_32>

00023e1e <dummy_timestamp>:
   23e1e:	2000      	movs	r0, #0
   23e20:	4770      	bx	lr

00023e22 <z_log_get_s_mask>:
{
   23e22:	b5f0      	push	{r4, r5, r6, r7, lr}
   23e24:	4605      	mov	r5, r0
	uint32_t mask = 0U;
   23e26:	2000      	movs	r0, #0
	uint32_t arg = 0U;
   23e28:	4603      	mov	r3, r0
	bool arm = false;
   23e2a:	4602      	mov	r2, r0
				mask |= BIT(arg);
   23e2c:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
   23e2e:	f815 4b01 	ldrb.w	r4, [r5], #1
   23e32:	b10c      	cbz	r4, 23e38 <z_log_get_s_mask+0x16>
   23e34:	428b      	cmp	r3, r1
   23e36:	d300      	bcc.n	23e3a <z_log_get_s_mask+0x18>
}
   23e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   23e3a:	2c25      	cmp	r4, #37	; 0x25
   23e3c:	d102      	bne.n	23e44 <z_log_get_s_mask+0x22>
			arm = !arm;
   23e3e:	f082 0201 	eor.w	r2, r2, #1
   23e42:	e7f4      	b.n	23e2e <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   23e44:	2a00      	cmp	r2, #0
   23e46:	d0f2      	beq.n	23e2e <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   23e48:	f044 0620 	orr.w	r6, r4, #32
   23e4c:	3e61      	subs	r6, #97	; 0x61
   23e4e:	2e19      	cmp	r6, #25
   23e50:	d8ed      	bhi.n	23e2e <z_log_get_s_mask+0xc>
			if (curr == 's') {
   23e52:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   23e54:	bf04      	itt	eq
   23e56:	fa07 f203 	lsleq.w	r2, r7, r3
   23e5a:	4310      	orreq	r0, r2
			arg++;
   23e5c:	3301      	adds	r3, #1
			arm = false;
   23e5e:	2200      	movs	r2, #0
   23e60:	e7e5      	b.n	23e2e <z_log_get_s_mask+0xc>

00023e62 <log_0>:
{
   23e62:	b538      	push	{r3, r4, r5, lr}
   23e64:	4605      	mov	r5, r0
   23e66:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   23e68:	f7ff ffce 	bl	23e08 <z_log_msg_std_alloc>

	if (msg != NULL) {
   23e6c:	b128      	cbz	r0, 23e7a <log_0+0x18>
		msg->str = str;
   23e6e:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   23e70:	4621      	mov	r1, r4
}
   23e72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   23e76:	f7ee b94f 	b.w	12118 <msg_finalize>
}
   23e7a:	bd38      	pop	{r3, r4, r5, pc}

00023e7c <log_1>:
{
   23e7c:	b570      	push	{r4, r5, r6, lr}
   23e7e:	4606      	mov	r6, r0
   23e80:	460d      	mov	r5, r1
   23e82:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   23e84:	f7ff ffc0 	bl	23e08 <z_log_msg_std_alloc>

	if (msg != NULL) {
   23e88:	b158      	cbz	r0, 23ea2 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   23e8a:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   23e8c:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   23e8e:	2101      	movs	r1, #1
   23e90:	f361 1207 	bfi	r2, r1, #4, #4
   23e94:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   23e96:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
   23e98:	4621      	mov	r1, r4
}
   23e9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   23e9e:	f7ee b93b 	b.w	12118 <msg_finalize>
}
   23ea2:	bd70      	pop	{r4, r5, r6, pc}

00023ea4 <log_2>:
{
   23ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23ea8:	4680      	mov	r8, r0
   23eaa:	460f      	mov	r7, r1
   23eac:	4616      	mov	r6, r2
   23eae:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   23eb0:	f7ff ffaa 	bl	23e08 <z_log_msg_std_alloc>

	if (msg != NULL) {
   23eb4:	b168      	cbz	r0, 23ed2 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   23eb6:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   23eb8:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   23ebc:	2202      	movs	r2, #2
   23ebe:	f362 1307 	bfi	r3, r2, #4, #4
   23ec2:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   23ec4:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
   23ec8:	4629      	mov	r1, r5
}
   23eca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   23ece:	f7ee b923 	b.w	12118 <msg_finalize>
}
   23ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023ed6 <log_3>:
{
   23ed6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23eda:	4680      	mov	r8, r0
   23edc:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   23ee0:	460f      	mov	r7, r1
   23ee2:	4616      	mov	r6, r2
   23ee4:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   23ee6:	f7ff ff8f 	bl	23e08 <z_log_msg_std_alloc>

	if (msg != NULL) {
   23eea:	b170      	cbz	r0, 23f0a <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   23eec:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   23eee:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   23ef2:	2203      	movs	r2, #3
   23ef4:	f362 1307 	bfi	r3, r2, #4, #4
   23ef8:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   23efa:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
   23efe:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
   23f00:	4649      	mov	r1, r9
}
   23f02:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   23f06:	f7ee b907 	b.w	12118 <msg_finalize>
}
   23f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00023f0e <log_n>:
{
   23f0e:	b510      	push	{r4, lr}
   23f10:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   23f12:	f000 f8dc 	bl	240ce <log_msg_create_n>
		if (msg == NULL) {
   23f16:	b120      	cbz	r0, 23f22 <log_n+0x14>
		msg_finalize(msg, src_level);
   23f18:	4621      	mov	r1, r4
}
   23f1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   23f1e:	f7ee b8fb 	b.w	12118 <msg_finalize>
}
   23f22:	bd10      	pop	{r4, pc}

00023f24 <log_hexdump>:
{
   23f24:	b510      	push	{r4, lr}
   23f26:	461c      	mov	r4, r3
			log_msg_hexdump_create(str, (const uint8_t *)data, length);
   23f28:	f000 f925 	bl	24176 <log_msg_hexdump_create>
		if (msg == NULL) {
   23f2c:	b120      	cbz	r0, 23f38 <log_hexdump+0x14>
		msg_finalize(msg, src_level);
   23f2e:	4621      	mov	r1, r4
}
   23f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   23f34:	f7ee b8f0 	b.w	12118 <msg_finalize>
}
   23f38:	bd10      	pop	{r4, pc}

00023f3a <z_log_printk>:
{
   23f3a:	b500      	push	{lr}
   23f3c:	b0a3      	sub	sp, #140	; 0x8c
   23f3e:	4602      	mov	r2, r0
   23f40:	460b      	mov	r3, r1
			length = vsnprintk(str, sizeof(str), fmt, ap);
   23f42:	a801      	add	r0, sp, #4
   23f44:	2181      	movs	r1, #129	; 0x81
   23f46:	f7ef fa61 	bl	1340c <vsnprintk>
			msg = log_msg_hexdump_create(NULL, str, length);
   23f4a:	2881      	cmp	r0, #129	; 0x81
   23f4c:	4602      	mov	r2, r0
   23f4e:	a901      	add	r1, sp, #4
   23f50:	bf28      	it	cs
   23f52:	2281      	movcs	r2, #129	; 0x81
   23f54:	2000      	movs	r0, #0
   23f56:	f000 f90e 	bl	24176 <log_msg_hexdump_create>
			if (msg == NULL) {
   23f5a:	b118      	cbz	r0, 23f64 <z_log_printk+0x2a>
			msg_finalize(msg, src_level_union.structure);
   23f5c:	f04f 0100 	mov.w	r1, #0
   23f60:	f7ee f8da 	bl	12118 <msg_finalize>
}
   23f64:	b023      	add	sp, #140	; 0x8c
   23f66:	f85d fb04 	ldr.w	pc, [sp], #4

00023f6a <z_log_get_tag>:
}
   23f6a:	2000      	movs	r0, #0
   23f6c:	4770      	bx	lr

00023f6e <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   23f6e:	2300      	movs	r3, #0
	list->head = NULL;
   23f70:	e9c0 3300 	strd	r3, r3, [r0]
}
   23f74:	4770      	bx	lr

00023f76 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   23f76:	6803      	ldr	r3, [r0, #0]
   23f78:	b923      	cbnz	r3, 23f84 <log_list_add_tail+0xe>
		list->head = msg;
   23f7a:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   23f7c:	2300      	movs	r3, #0
	list->tail = msg;
   23f7e:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   23f80:	600b      	str	r3, [r1, #0]
}
   23f82:	4770      	bx	lr
		list->tail->next = msg;
   23f84:	6843      	ldr	r3, [r0, #4]
   23f86:	6019      	str	r1, [r3, #0]
   23f88:	e7f8      	b.n	23f7c <log_list_add_tail+0x6>

00023f8a <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   23f8a:	6800      	ldr	r0, [r0, #0]
   23f8c:	4770      	bx	lr

00023f8e <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   23f8e:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   23f90:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   23f92:	b108      	cbz	r0, 23f98 <log_list_head_get+0xa>
		list->head = list->head->next;
   23f94:	6802      	ldr	r2, [r0, #0]
   23f96:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   23f98:	4770      	bx	lr

00023f9a <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   23f9a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23f9e:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   23fa0:	8903      	ldrh	r3, [r0, #8]
{
   23fa2:	f89d 7020 	ldrb.w	r7, [sp, #32]
   23fa6:	460e      	mov	r6, r1
   23fa8:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   23faa:	f3c3 028d 	ubfx	r2, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   23fae:	42a2      	cmp	r2, r4
   23fb0:	d803      	bhi.n	23fba <log_msg_hexdump_data_op+0x20>
		*length = 0;
   23fb2:	2300      	movs	r3, #0
   23fb4:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   23fb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   23fba:	680b      	ldr	r3, [r1, #0]
   23fbc:	4423      	add	r3, r4
   23fbe:	4293      	cmp	r3, r2
		*length = available_len - offset;
   23fc0:	bf84      	itt	hi
   23fc2:	1b13      	subhi	r3, r2, r4
   23fc4:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   23fc6:	2a0c      	cmp	r2, #12
	req_len = *length;
   23fc8:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   23fcc:	d92a      	bls.n	24024 <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   23fce:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   23fd0:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   23fd4:	d82d      	bhi.n	24032 <log_msg_hexdump_data_op+0x98>
		head_data = msg->payload.ext.data.bytes;
   23fd6:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   23fd8:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   23fda:	454a      	cmp	r2, r9
   23fdc:	bf28      	it	cs
   23fde:	464a      	movcs	r2, r9
   23fe0:	4615      	mov	r5, r2
		if (put_op) {
   23fe2:	4420      	add	r0, r4
   23fe4:	b317      	cbz	r7, 2402c <log_msg_hexdump_data_op+0x92>
			(void)memcpy(&head_data[offset], data, cpy_len);
   23fe6:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   23fe8:	f000 ff4a 	bl	24e80 <memcpy>
		req_len -= cpy_len;
   23fec:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   23ff0:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   23ff2:	f1b9 0f00 	cmp.w	r9, #0
   23ff6:	d0de      	beq.n	23fb6 <log_msg_hexdump_data_op+0x1c>
   23ff8:	f1b8 0f00 	cmp.w	r8, #0
   23ffc:	d0db      	beq.n	23fb6 <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   23ffe:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   24002:	454d      	cmp	r5, r9
   24004:	bf28      	it	cs
   24006:	464d      	movcs	r5, r9
		if (put_op) {
   24008:	1d20      	adds	r0, r4, #4
   2400a:	4440      	add	r0, r8
			(void)memcpy(&cont->payload.bytes[offset],
   2400c:	462a      	mov	r2, r5
		if (put_op) {
   2400e:	b1bf      	cbz	r7, 24040 <log_msg_hexdump_data_op+0xa6>
			(void)memcpy(&cont->payload.bytes[offset],
   24010:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   24012:	f000 ff35 	bl	24e80 <memcpy>
		req_len -= cpy_len;
   24016:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   2401a:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   2401e:	442e      	add	r6, r5
		offset = 0;
   24020:	2400      	movs	r4, #0
   24022:	e7e6      	b.n	23ff2 <log_msg_hexdump_data_op+0x58>
		head_data = msg->payload.single.bytes;
   24024:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   24026:	f04f 0800 	mov.w	r8, #0
   2402a:	e7d6      	b.n	23fda <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
   2402c:	4601      	mov	r1, r0
   2402e:	4630      	mov	r0, r6
   24030:	e7da      	b.n	23fe8 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   24032:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   24034:	2c1b      	cmp	r4, #27
   24036:	d9dc      	bls.n	23ff2 <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   24038:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   2403c:	3c1c      	subs	r4, #28
   2403e:	e7f9      	b.n	24034 <log_msg_hexdump_data_op+0x9a>
			(void)memcpy(data, &cont->payload.bytes[offset],
   24040:	4601      	mov	r1, r0
   24042:	4630      	mov	r0, r6
   24044:	e7e5      	b.n	24012 <log_msg_hexdump_data_op+0x78>

00024046 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   24046:	3004      	adds	r0, #4
   24048:	f3bf 8f5b 	dmb	ish
   2404c:	e850 3f00 	ldrex	r3, [r0]
   24050:	3301      	adds	r3, #1
   24052:	e840 3200 	strex	r2, r3, [r0]
   24056:	2a00      	cmp	r2, #0
   24058:	d1f8      	bne.n	2404c <log_msg_get+0x6>
   2405a:	f3bf 8f5b 	dmb	ish
}
   2405e:	4770      	bx	lr

00024060 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   24060:	7a40      	ldrb	r0, [r0, #9]
}
   24062:	0900      	lsrs	r0, r0, #4
   24064:	4770      	bx	lr

00024066 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   24066:	7a43      	ldrb	r3, [r0, #9]
   24068:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   2406c:	ea4f 1213 	mov.w	r2, r3, lsr #4
   24070:	d216      	bcs.n	240a0 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   24072:	2a03      	cmp	r2, #3
   24074:	d803      	bhi.n	2407e <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   24076:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   2407a:	6948      	ldr	r0, [r1, #20]
   2407c:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   2407e:	2901      	cmp	r1, #1
   24080:	d803      	bhi.n	2408a <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   24082:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   24086:	6988      	ldr	r0, [r1, #24]
   24088:	4770      	bx	lr
	cont = msg->payload.ext.next;
   2408a:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   2408c:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   2408e:	2906      	cmp	r1, #6
   24090:	d803      	bhi.n	2409a <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   24092:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   24096:	6848      	ldr	r0, [r1, #4]
   24098:	4770      	bx	lr
		cont = cont->next;
   2409a:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   2409c:	3907      	subs	r1, #7
		cont = cont->next;
   2409e:	e7f6      	b.n	2408e <log_msg_arg_get+0x28>
		return 0;
   240a0:	2000      	movs	r0, #0
}
   240a2:	4770      	bx	lr

000240a4 <log_msg_put>:
{
   240a4:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   240a6:	1d02      	adds	r2, r0, #4
   240a8:	f3bf 8f5b 	dmb	ish
   240ac:	e852 1f00 	ldrex	r1, [r2]
   240b0:	3901      	subs	r1, #1
   240b2:	e842 1c00 	strex	ip, r1, [r2]
   240b6:	f1bc 0f00 	cmp.w	ip, #0
   240ba:	d1f7      	bne.n	240ac <log_msg_put+0x8>
   240bc:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   240c0:	685b      	ldr	r3, [r3, #4]
   240c2:	b90b      	cbnz	r3, 240c8 <log_msg_put+0x24>
		msg_free(msg);
   240c4:	f7ee b93c 	b.w	12340 <msg_free>
}
   240c8:	4770      	bx	lr

000240ca <log_msg_str_get>:
}
   240ca:	6900      	ldr	r0, [r0, #16]
   240cc:	4770      	bx	lr

000240ce <log_msg_create_n>:
{
   240ce:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   240d2:	4681      	mov	r9, r0
   240d4:	4688      	mov	r8, r1
   240d6:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   240d8:	f7ee f91e 	bl	12318 <log_msg_chunk_alloc>
	if (msg != NULL) {
   240dc:	4604      	mov	r4, r0
   240de:	b330      	cbz	r0, 2412e <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   240e0:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   240e2:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   240e4:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   240e6:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   240e8:	8107      	strh	r7, [r0, #8]
   240ea:	d909      	bls.n	24100 <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   240ec:	2202      	movs	r2, #2
   240ee:	8102      	strh	r2, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   240f0:	f1a5 0a02 	sub.w	sl, r5, #2
	next = &msg->payload.ext.next;
   240f4:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   240f8:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   240fa:	f1ba 0f00 	cmp.w	sl, #0
   240fe:	dc0e      	bgt.n	2411e <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
   24100:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   24102:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   24106:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   2410a:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   2410c:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   2410e:	d818      	bhi.n	24142 <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
   24110:	00aa      	lsls	r2, r5, #2
   24112:	4641      	mov	r1, r8
   24114:	f104 0014 	add.w	r0, r4, #20
   24118:	f000 feb2 	bl	24e80 <memcpy>
	while (nargs != 0U) {
   2411c:	e007      	b.n	2412e <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   2411e:	f7ee f8fb 	bl	12318 <log_msg_chunk_alloc>
		if (cont == NULL) {
   24122:	4606      	mov	r6, r0
   24124:	b930      	cbnz	r0, 24134 <log_msg_create_n+0x66>
			msg_free(msg);
   24126:	4620      	mov	r0, r4
   24128:	f7ee f90a 	bl	12340 <msg_free>
			return NULL;
   2412c:	4634      	mov	r4, r6
}
   2412e:	4620      	mov	r0, r4
   24130:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   24134:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   24138:	f1aa 0a07 	sub.w	sl, sl, #7
   2413c:	6007      	str	r7, [r0, #0]
		next = &cont->next;
   2413e:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   24140:	e7db      	b.n	240fa <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
   24142:	4641      	mov	r1, r8
   24144:	2208      	movs	r2, #8
   24146:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   2414a:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   2414c:	f000 fe98 	bl	24e80 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   24150:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   24152:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   24156:	2d07      	cmp	r5, #7
   24158:	462e      	mov	r6, r5
   2415a:	bf28      	it	cs
   2415c:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   2415e:	ea4f 0986 	mov.w	r9, r6, lsl #2
   24162:	4641      	mov	r1, r8
   24164:	1d38      	adds	r0, r7, #4
   24166:	464a      	mov	r2, r9
   24168:	f000 fe8a 	bl	24e80 <memcpy>
	while (nargs != 0U) {
   2416c:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   2416e:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   24170:	44c8      	add	r8, r9
	while (nargs != 0U) {
   24172:	d1f0      	bne.n	24156 <log_msg_create_n+0x88>
   24174:	e7db      	b.n	2412e <log_msg_create_n+0x60>

00024176 <log_msg_hexdump_create>:
{
   24176:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   2417a:	f643 75ff 	movw	r5, #16383	; 0x3fff
   2417e:	4295      	cmp	r5, r2
{
   24180:	4680      	mov	r8, r0
   24182:	460e      	mov	r6, r1
   24184:	4617      	mov	r7, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   24186:	bf28      	it	cs
   24188:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
   2418a:	f7ee f8c5 	bl	12318 <log_msg_chunk_alloc>
	if (msg == NULL) {
   2418e:	4604      	mov	r4, r0
   24190:	b380      	cbz	r0, 241f4 <log_msg_hexdump_create+0x7e>
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   24192:	8902      	ldrh	r2, [r0, #8]
	msg->str = str;
   24194:	f8c0 8010 	str.w	r8, [r0, #16]
	msg->hdr.ref_cnt = 1;
   24198:	2301      	movs	r3, #1
   2419a:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   2419c:	00ab      	lsls	r3, r5, #2
   2419e:	f043 0301 	orr.w	r3, r3, #1
   241a2:	f002 0202 	and.w	r2, r2, #2
   241a6:	4313      	orrs	r3, r2
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   241a8:	2f0c      	cmp	r7, #12
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   241aa:	8103      	strh	r3, [r0, #8]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   241ac:	f100 0814 	add.w	r8, r0, #20
   241b0:	d917      	bls.n	241e2 <log_msg_hexdump_create+0x6c>
		(void)memcpy(msg->payload.ext.data.bytes,
   241b2:	2208      	movs	r2, #8
   241b4:	4631      	mov	r1, r6
   241b6:	3018      	adds	r0, #24
   241b8:	f000 fe62 	bl	24e80 <memcpy>
		msg->hdr.params.generic.ext = 1;
   241bc:	7a22      	ldrb	r2, [r4, #8]
		msg->payload.ext.next = NULL;
   241be:	2300      	movs	r3, #0
		msg->hdr.params.generic.ext = 1;
   241c0:	f042 0202 	orr.w	r2, r2, #2
		msg->payload.ext.next = NULL;
   241c4:	6163      	str	r3, [r4, #20]
		msg->hdr.params.generic.ext = 1;
   241c6:	7222      	strb	r2, [r4, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   241c8:	3608      	adds	r6, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   241ca:	3d08      	subs	r5, #8
	while (length > 0) {
   241cc:	4699      	mov	r9, r3
   241ce:	b18d      	cbz	r5, 241f4 <log_msg_hexdump_create+0x7e>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   241d0:	f7ee f8a2 	bl	12318 <log_msg_chunk_alloc>
		if (cont == NULL) {
   241d4:	4607      	mov	r7, r0
   241d6:	b980      	cbnz	r0, 241fa <log_msg_hexdump_create+0x84>
			msg_free(msg);
   241d8:	4620      	mov	r0, r4
   241da:	f7ee f8b1 	bl	12340 <msg_free>
			return NULL;
   241de:	463c      	mov	r4, r7
   241e0:	e008      	b.n	241f4 <log_msg_hexdump_create+0x7e>
		(void)memcpy(msg->payload.single.bytes, data, length);
   241e2:	462a      	mov	r2, r5
   241e4:	4631      	mov	r1, r6
   241e6:	4640      	mov	r0, r8
   241e8:	f000 fe4a 	bl	24e80 <memcpy>
		msg->hdr.params.generic.ext = 0;
   241ec:	7a23      	ldrb	r3, [r4, #8]
   241ee:	f36f 0341 	bfc	r3, #1, #1
   241f2:	7223      	strb	r3, [r4, #8]
}
   241f4:	4620      	mov	r0, r4
   241f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   241fa:	2d1c      	cmp	r5, #28
   241fc:	462f      	mov	r7, r5
   241fe:	bf28      	it	cs
   24200:	271c      	movcs	r7, #28
		*prev_cont = cont;
   24202:	f8c8 0000 	str.w	r0, [r8]
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   24206:	4631      	mov	r1, r6
		cont->next = NULL;
   24208:	f8c0 9000 	str.w	r9, [r0]
		prev_cont = &cont->next;
   2420c:	4680      	mov	r8, r0
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   2420e:	463a      	mov	r2, r7
   24210:	3004      	adds	r0, #4
   24212:	f000 fe35 	bl	24e80 <memcpy>
		data += chunk_length;
   24216:	443e      	add	r6, r7
		length -= chunk_length;
   24218:	1bed      	subs	r5, r5, r7
   2421a:	e7d8      	b.n	241ce <log_msg_hexdump_create+0x58>

0002421c <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   2421c:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   2421e:	2400      	movs	r4, #0
   24220:	9400      	str	r4, [sp, #0]
   24222:	f7ff feba 	bl	23f9a <log_msg_hexdump_data_op>
}
   24226:	b002      	add	sp, #8
   24228:	bd10      	pop	{r4, pc}

0002422a <buffer_write>:
{
   2422a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2422c:	4606      	mov	r6, r0
   2422e:	460d      	mov	r5, r1
   24230:	4614      	mov	r4, r2
   24232:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   24234:	4621      	mov	r1, r4
   24236:	4628      	mov	r0, r5
   24238:	463a      	mov	r2, r7
   2423a:	47b0      	blx	r6
	} while (len != 0);
   2423c:	1a24      	subs	r4, r4, r0
		buf += processed;
   2423e:	4405      	add	r5, r0
	} while (len != 0);
   24240:	d1f8      	bne.n	24234 <buffer_write+0xa>
}
   24242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024244 <std_print>:
{
   24244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24248:	b08e      	sub	sp, #56	; 0x38
   2424a:	af0e      	add	r7, sp, #56	; 0x38
   2424c:	4680      	mov	r8, r0
   2424e:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   24250:	f7ff ff3b 	bl	240ca <log_msg_str_get>
   24254:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   24256:	4640      	mov	r0, r8
   24258:	f7ff ff02 	bl	24060 <log_msg_nargs_get>
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   2425c:	0083      	lsls	r3, r0, #2
   2425e:	3307      	adds	r3, #7
   24260:	f023 0307 	bic.w	r3, r3, #7
   24264:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
   24268:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   2426a:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   2426c:	f04f 0900 	mov.w	r9, #0
   24270:	45d1      	cmp	r9, sl
   24272:	d116      	bne.n	242a2 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   24274:	4640      	mov	r0, r8
   24276:	f7ff fef3 	bl	24060 <log_msg_nargs_get>
   2427a:	280f      	cmp	r0, #15
   2427c:	d81e      	bhi.n	242bc <std_print+0x78>
   2427e:	e8df f010 	tbh	[pc, r0, lsl #1]
   24282:	0019      	.short	0x0019
   24284:	00260020 	.word	0x00260020
   24288:	0036002d 	.word	0x0036002d
   2428c:	004e0041 	.word	0x004e0041
   24290:	006e005d 	.word	0x006e005d
   24294:	00960081 	.word	0x00960081
   24298:	00c600ad 	.word	0x00c600ad
   2429c:	00fe00e1 	.word	0x00fe00e1
   242a0:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
   242a2:	4649      	mov	r1, r9
   242a4:	4640      	mov	r0, r8
   242a6:	f7ff fede 	bl	24066 <log_msg_arg_get>
   242aa:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   242ae:	f109 0901 	add.w	r9, r9, #1
   242b2:	e7dd      	b.n	24270 <std_print+0x2c>
		print_formatted(output, str);
   242b4:	4631      	mov	r1, r6
   242b6:	4628      	mov	r0, r5
   242b8:	f7ee f880 	bl	123bc <print_formatted>
}
   242bc:	46bd      	mov	sp, r7
   242be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   242c2:	6822      	ldr	r2, [r4, #0]
   242c4:	4631      	mov	r1, r6
   242c6:	4628      	mov	r0, r5
   242c8:	f7ee f878 	bl	123bc <print_formatted>
		break;
   242cc:	e7f6      	b.n	242bc <std_print+0x78>
		print_formatted(output, str, args[0], args[1]);
   242ce:	e9d4 2300 	ldrd	r2, r3, [r4]
   242d2:	4631      	mov	r1, r6
   242d4:	4628      	mov	r0, r5
   242d6:	f7ee f871 	bl	123bc <print_formatted>
		break;
   242da:	e7ef      	b.n	242bc <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2]);
   242dc:	68a3      	ldr	r3, [r4, #8]
   242de:	9300      	str	r3, [sp, #0]
   242e0:	e9d4 2300 	ldrd	r2, r3, [r4]
   242e4:	4631      	mov	r1, r6
   242e6:	4628      	mov	r0, r5
   242e8:	f7ee f868 	bl	123bc <print_formatted>
		break;
   242ec:	e7e6      	b.n	242bc <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   242ee:	68e3      	ldr	r3, [r4, #12]
   242f0:	9301      	str	r3, [sp, #4]
   242f2:	68a3      	ldr	r3, [r4, #8]
   242f4:	9300      	str	r3, [sp, #0]
   242f6:	e9d4 2300 	ldrd	r2, r3, [r4]
   242fa:	4631      	mov	r1, r6
   242fc:	4628      	mov	r0, r5
   242fe:	f7ee f85d 	bl	123bc <print_formatted>
		break;
   24302:	e7db      	b.n	242bc <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   24304:	6923      	ldr	r3, [r4, #16]
   24306:	9302      	str	r3, [sp, #8]
   24308:	68e3      	ldr	r3, [r4, #12]
   2430a:	9301      	str	r3, [sp, #4]
   2430c:	68a3      	ldr	r3, [r4, #8]
   2430e:	9300      	str	r3, [sp, #0]
   24310:	e9d4 2300 	ldrd	r2, r3, [r4]
   24314:	4631      	mov	r1, r6
   24316:	4628      	mov	r0, r5
   24318:	f7ee f850 	bl	123bc <print_formatted>
		break;
   2431c:	e7ce      	b.n	242bc <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   2431e:	6963      	ldr	r3, [r4, #20]
   24320:	9303      	str	r3, [sp, #12]
   24322:	6923      	ldr	r3, [r4, #16]
   24324:	9302      	str	r3, [sp, #8]
   24326:	68e3      	ldr	r3, [r4, #12]
   24328:	9301      	str	r3, [sp, #4]
   2432a:	68a3      	ldr	r3, [r4, #8]
   2432c:	9300      	str	r3, [sp, #0]
   2432e:	e9d4 2300 	ldrd	r2, r3, [r4]
   24332:	4631      	mov	r1, r6
   24334:	4628      	mov	r0, r5
   24336:	f7ee f841 	bl	123bc <print_formatted>
		break;
   2433a:	e7bf      	b.n	242bc <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   2433c:	69a3      	ldr	r3, [r4, #24]
   2433e:	9304      	str	r3, [sp, #16]
   24340:	6963      	ldr	r3, [r4, #20]
   24342:	9303      	str	r3, [sp, #12]
   24344:	6923      	ldr	r3, [r4, #16]
   24346:	9302      	str	r3, [sp, #8]
   24348:	68e3      	ldr	r3, [r4, #12]
   2434a:	9301      	str	r3, [sp, #4]
   2434c:	68a3      	ldr	r3, [r4, #8]
   2434e:	9300      	str	r3, [sp, #0]
   24350:	e9d4 2300 	ldrd	r2, r3, [r4]
   24354:	4631      	mov	r1, r6
   24356:	4628      	mov	r0, r5
   24358:	f7ee f830 	bl	123bc <print_formatted>
		break;
   2435c:	e7ae      	b.n	242bc <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   2435e:	69e3      	ldr	r3, [r4, #28]
   24360:	9305      	str	r3, [sp, #20]
   24362:	69a3      	ldr	r3, [r4, #24]
   24364:	9304      	str	r3, [sp, #16]
   24366:	6963      	ldr	r3, [r4, #20]
   24368:	9303      	str	r3, [sp, #12]
   2436a:	6923      	ldr	r3, [r4, #16]
   2436c:	9302      	str	r3, [sp, #8]
   2436e:	68e3      	ldr	r3, [r4, #12]
   24370:	9301      	str	r3, [sp, #4]
   24372:	68a3      	ldr	r3, [r4, #8]
   24374:	9300      	str	r3, [sp, #0]
   24376:	e9d4 2300 	ldrd	r2, r3, [r4]
   2437a:	4631      	mov	r1, r6
   2437c:	4628      	mov	r0, r5
   2437e:	f7ee f81d 	bl	123bc <print_formatted>
		break;
   24382:	e79b      	b.n	242bc <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   24384:	6a23      	ldr	r3, [r4, #32]
   24386:	9306      	str	r3, [sp, #24]
   24388:	69e3      	ldr	r3, [r4, #28]
   2438a:	9305      	str	r3, [sp, #20]
   2438c:	69a3      	ldr	r3, [r4, #24]
   2438e:	9304      	str	r3, [sp, #16]
   24390:	6963      	ldr	r3, [r4, #20]
   24392:	9303      	str	r3, [sp, #12]
   24394:	6923      	ldr	r3, [r4, #16]
   24396:	9302      	str	r3, [sp, #8]
   24398:	68e3      	ldr	r3, [r4, #12]
   2439a:	9301      	str	r3, [sp, #4]
   2439c:	68a3      	ldr	r3, [r4, #8]
   2439e:	9300      	str	r3, [sp, #0]
   243a0:	e9d4 2300 	ldrd	r2, r3, [r4]
   243a4:	4631      	mov	r1, r6
   243a6:	4628      	mov	r0, r5
   243a8:	f7ee f808 	bl	123bc <print_formatted>
		break;
   243ac:	e786      	b.n	242bc <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   243ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
   243b0:	9307      	str	r3, [sp, #28]
   243b2:	6a23      	ldr	r3, [r4, #32]
   243b4:	9306      	str	r3, [sp, #24]
   243b6:	69e3      	ldr	r3, [r4, #28]
   243b8:	9305      	str	r3, [sp, #20]
   243ba:	69a3      	ldr	r3, [r4, #24]
   243bc:	9304      	str	r3, [sp, #16]
   243be:	6963      	ldr	r3, [r4, #20]
   243c0:	9303      	str	r3, [sp, #12]
   243c2:	6923      	ldr	r3, [r4, #16]
   243c4:	9302      	str	r3, [sp, #8]
   243c6:	68e3      	ldr	r3, [r4, #12]
   243c8:	9301      	str	r3, [sp, #4]
   243ca:	68a3      	ldr	r3, [r4, #8]
   243cc:	9300      	str	r3, [sp, #0]
   243ce:	e9d4 2300 	ldrd	r2, r3, [r4]
   243d2:	4631      	mov	r1, r6
   243d4:	4628      	mov	r0, r5
   243d6:	f7ed fff1 	bl	123bc <print_formatted>
		break;
   243da:	e76f      	b.n	242bc <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   243dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   243de:	9308      	str	r3, [sp, #32]
   243e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   243e2:	9307      	str	r3, [sp, #28]
   243e4:	6a23      	ldr	r3, [r4, #32]
   243e6:	9306      	str	r3, [sp, #24]
   243e8:	69e3      	ldr	r3, [r4, #28]
   243ea:	9305      	str	r3, [sp, #20]
   243ec:	69a3      	ldr	r3, [r4, #24]
   243ee:	9304      	str	r3, [sp, #16]
   243f0:	6963      	ldr	r3, [r4, #20]
   243f2:	9303      	str	r3, [sp, #12]
   243f4:	6923      	ldr	r3, [r4, #16]
   243f6:	9302      	str	r3, [sp, #8]
   243f8:	68e3      	ldr	r3, [r4, #12]
   243fa:	9301      	str	r3, [sp, #4]
   243fc:	68a3      	ldr	r3, [r4, #8]
   243fe:	9300      	str	r3, [sp, #0]
   24400:	e9d4 2300 	ldrd	r2, r3, [r4]
   24404:	4631      	mov	r1, r6
   24406:	4628      	mov	r0, r5
   24408:	f7ed ffd8 	bl	123bc <print_formatted>
		break;
   2440c:	e756      	b.n	242bc <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   2440e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   24410:	9309      	str	r3, [sp, #36]	; 0x24
   24412:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   24414:	9308      	str	r3, [sp, #32]
   24416:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24418:	9307      	str	r3, [sp, #28]
   2441a:	6a23      	ldr	r3, [r4, #32]
   2441c:	9306      	str	r3, [sp, #24]
   2441e:	69e3      	ldr	r3, [r4, #28]
   24420:	9305      	str	r3, [sp, #20]
   24422:	69a3      	ldr	r3, [r4, #24]
   24424:	9304      	str	r3, [sp, #16]
   24426:	6963      	ldr	r3, [r4, #20]
   24428:	9303      	str	r3, [sp, #12]
   2442a:	6923      	ldr	r3, [r4, #16]
   2442c:	9302      	str	r3, [sp, #8]
   2442e:	68e3      	ldr	r3, [r4, #12]
   24430:	9301      	str	r3, [sp, #4]
   24432:	68a3      	ldr	r3, [r4, #8]
   24434:	9300      	str	r3, [sp, #0]
   24436:	e9d4 2300 	ldrd	r2, r3, [r4]
   2443a:	4631      	mov	r1, r6
   2443c:	4628      	mov	r0, r5
   2443e:	f7ed ffbd 	bl	123bc <print_formatted>
		break;
   24442:	e73b      	b.n	242bc <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   24444:	6b23      	ldr	r3, [r4, #48]	; 0x30
   24446:	930a      	str	r3, [sp, #40]	; 0x28
   24448:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2444a:	9309      	str	r3, [sp, #36]	; 0x24
   2444c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2444e:	9308      	str	r3, [sp, #32]
   24450:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24452:	9307      	str	r3, [sp, #28]
   24454:	6a23      	ldr	r3, [r4, #32]
   24456:	9306      	str	r3, [sp, #24]
   24458:	69e3      	ldr	r3, [r4, #28]
   2445a:	9305      	str	r3, [sp, #20]
   2445c:	69a3      	ldr	r3, [r4, #24]
   2445e:	9304      	str	r3, [sp, #16]
   24460:	6963      	ldr	r3, [r4, #20]
   24462:	9303      	str	r3, [sp, #12]
   24464:	6923      	ldr	r3, [r4, #16]
   24466:	9302      	str	r3, [sp, #8]
   24468:	68e3      	ldr	r3, [r4, #12]
   2446a:	9301      	str	r3, [sp, #4]
   2446c:	68a3      	ldr	r3, [r4, #8]
   2446e:	9300      	str	r3, [sp, #0]
   24470:	e9d4 2300 	ldrd	r2, r3, [r4]
   24474:	4631      	mov	r1, r6
   24476:	4628      	mov	r0, r5
   24478:	f7ed ffa0 	bl	123bc <print_formatted>
		break;
   2447c:	e71e      	b.n	242bc <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   2447e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   24480:	930b      	str	r3, [sp, #44]	; 0x2c
   24482:	6b23      	ldr	r3, [r4, #48]	; 0x30
   24484:	930a      	str	r3, [sp, #40]	; 0x28
   24486:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   24488:	9309      	str	r3, [sp, #36]	; 0x24
   2448a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2448c:	9308      	str	r3, [sp, #32]
   2448e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24490:	9307      	str	r3, [sp, #28]
   24492:	6a23      	ldr	r3, [r4, #32]
   24494:	9306      	str	r3, [sp, #24]
   24496:	69e3      	ldr	r3, [r4, #28]
   24498:	9305      	str	r3, [sp, #20]
   2449a:	69a3      	ldr	r3, [r4, #24]
   2449c:	9304      	str	r3, [sp, #16]
   2449e:	6963      	ldr	r3, [r4, #20]
   244a0:	9303      	str	r3, [sp, #12]
   244a2:	6923      	ldr	r3, [r4, #16]
   244a4:	9302      	str	r3, [sp, #8]
   244a6:	68e3      	ldr	r3, [r4, #12]
   244a8:	9301      	str	r3, [sp, #4]
   244aa:	68a3      	ldr	r3, [r4, #8]
   244ac:	9300      	str	r3, [sp, #0]
   244ae:	e9d4 2300 	ldrd	r2, r3, [r4]
   244b2:	4631      	mov	r1, r6
   244b4:	4628      	mov	r0, r5
   244b6:	f7ed ff81 	bl	123bc <print_formatted>
		break;
   244ba:	e6ff      	b.n	242bc <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   244bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   244be:	930c      	str	r3, [sp, #48]	; 0x30
   244c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   244c2:	930b      	str	r3, [sp, #44]	; 0x2c
   244c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   244c6:	930a      	str	r3, [sp, #40]	; 0x28
   244c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   244ca:	9309      	str	r3, [sp, #36]	; 0x24
   244cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   244ce:	9308      	str	r3, [sp, #32]
   244d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   244d2:	9307      	str	r3, [sp, #28]
   244d4:	6a23      	ldr	r3, [r4, #32]
   244d6:	9306      	str	r3, [sp, #24]
   244d8:	69e3      	ldr	r3, [r4, #28]
   244da:	9305      	str	r3, [sp, #20]
   244dc:	69a3      	ldr	r3, [r4, #24]
   244de:	9304      	str	r3, [sp, #16]
   244e0:	6963      	ldr	r3, [r4, #20]
   244e2:	9303      	str	r3, [sp, #12]
   244e4:	6923      	ldr	r3, [r4, #16]
   244e6:	9302      	str	r3, [sp, #8]
   244e8:	68e3      	ldr	r3, [r4, #12]
   244ea:	9301      	str	r3, [sp, #4]
   244ec:	68a3      	ldr	r3, [r4, #8]
   244ee:	9300      	str	r3, [sp, #0]
   244f0:	e9d4 2300 	ldrd	r2, r3, [r4]
   244f4:	4631      	mov	r1, r6
   244f6:	4628      	mov	r0, r5
   244f8:	f7ed ff60 	bl	123bc <print_formatted>
}
   244fc:	e6de      	b.n	242bc <std_print+0x78>

000244fe <log_output_flush>:
		     output->control_block->offset,
   244fe:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   24500:	6881      	ldr	r1, [r0, #8]
{
   24502:	b510      	push	{r4, lr}
   24504:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   24506:	e9d2 2300 	ldrd	r2, r3, [r2]
   2450a:	6800      	ldr	r0, [r0, #0]
   2450c:	f7ff fe8d 	bl	2422a <buffer_write>
	output->control_block->offset = 0;
   24510:	6863      	ldr	r3, [r4, #4]
   24512:	2200      	movs	r2, #0
   24514:	601a      	str	r2, [r3, #0]
}
   24516:	bd10      	pop	{r4, pc}

00024518 <out_func>:
{
   24518:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   2451a:	684b      	ldr	r3, [r1, #4]
   2451c:	681a      	ldr	r2, [r3, #0]
   2451e:	68cb      	ldr	r3, [r1, #12]
   24520:	429a      	cmp	r2, r3
{
   24522:	4605      	mov	r5, r0
   24524:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   24526:	d102      	bne.n	2452e <out_func+0x16>
		log_output_flush(out_ctx);
   24528:	4608      	mov	r0, r1
   2452a:	f7ff ffe8 	bl	244fe <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2452e:	6863      	ldr	r3, [r4, #4]
   24530:	f3bf 8f5b 	dmb	ish
   24534:	e853 2f00 	ldrex	r2, [r3]
   24538:	1c51      	adds	r1, r2, #1
   2453a:	e843 1000 	strex	r0, r1, [r3]
   2453e:	2800      	cmp	r0, #0
   24540:	d1f8      	bne.n	24534 <out_func+0x1c>
   24542:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   24546:	68a3      	ldr	r3, [r4, #8]
   24548:	549d      	strb	r5, [r3, r2]
}
   2454a:	2000      	movs	r0, #0
   2454c:	bd38      	pop	{r3, r4, r5, pc}

0002454e <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   2454e:	4603      	mov	r3, r0
   24550:	b140      	cbz	r0, 24564 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   24552:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   24554:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   24558:	2a02      	cmp	r2, #2
   2455a:	d006      	beq.n	2456a <sys_notify_validate+0x1c>
   2455c:	2a03      	cmp	r2, #3
   2455e:	d004      	beq.n	2456a <sys_notify_validate+0x1c>
   24560:	2a01      	cmp	r2, #1
   24562:	d005      	beq.n	24570 <sys_notify_validate+0x22>
		return -EINVAL;
   24564:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   24568:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   2456a:	681a      	ldr	r2, [r3, #0]
   2456c:	2a00      	cmp	r2, #0
   2456e:	d0f9      	beq.n	24564 <sys_notify_validate+0x16>
		notify->result = 0;
   24570:	2000      	movs	r0, #0
   24572:	6098      	str	r0, [r3, #8]
   24574:	4770      	bx	lr

00024576 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   24576:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   24578:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   2457c:	2a02      	cmp	r2, #2
{
   2457e:	b510      	push	{r4, lr}
   24580:	4603      	mov	r3, r0
	notify->result = res;
   24582:	6081      	str	r1, [r0, #8]
	switch (method) {
   24584:	d00a      	beq.n	2459c <sys_notify_finalize+0x26>
   24586:	2a03      	cmp	r2, #3
   24588:	d10b      	bne.n	245a2 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   2458a:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   2458c:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   2458e:	2200      	movs	r2, #0
   24590:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   24592:	b108      	cbz	r0, 24598 <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   24594:	f7fc feda 	bl	2134c <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   24598:	4620      	mov	r0, r4
   2459a:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   2459c:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   2459e:	2400      	movs	r4, #0
		break;
   245a0:	e7f5      	b.n	2458e <sys_notify_finalize+0x18>
	switch (method) {
   245a2:	2400      	movs	r4, #0
   245a4:	4620      	mov	r0, r4
   245a6:	e7f2      	b.n	2458e <sys_notify_finalize+0x18>

000245a8 <z_impl_flash_write>:
{
   245a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const struct flash_driver_api *api =
   245ac:	6886      	ldr	r6, [r0, #8]
{
   245ae:	4699      	mov	r9, r3
	if (api->write_protection != NULL) {
   245b0:	68f3      	ldr	r3, [r6, #12]
{
   245b2:	4605      	mov	r5, r0
   245b4:	460f      	mov	r7, r1
   245b6:	4690      	mov	r8, r2
	if (api->write_protection != NULL) {
   245b8:	b95b      	cbnz	r3, 245d2 <z_impl_flash_write+0x2a>
	rc = api->write(dev, offset, data, len);
   245ba:	6874      	ldr	r4, [r6, #4]
   245bc:	464b      	mov	r3, r9
   245be:	4642      	mov	r2, r8
   245c0:	4639      	mov	r1, r7
   245c2:	4628      	mov	r0, r5
   245c4:	47a0      	blx	r4
	if (api->write_protection != NULL) {
   245c6:	68f3      	ldr	r3, [r6, #12]
	rc = api->write(dev, offset, data, len);
   245c8:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
   245ca:	b943      	cbnz	r3, 245de <z_impl_flash_write+0x36>
}
   245cc:	4620      	mov	r0, r4
   245ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rc = api->write_protection(dev, false);
   245d2:	2100      	movs	r1, #0
   245d4:	4798      	blx	r3
		if (rc) {
   245d6:	4604      	mov	r4, r0
   245d8:	2800      	cmp	r0, #0
   245da:	d0ee      	beq.n	245ba <z_impl_flash_write+0x12>
   245dc:	e7f6      	b.n	245cc <z_impl_flash_write+0x24>
		(void) api->write_protection(dev, true);
   245de:	2101      	movs	r1, #1
   245e0:	4628      	mov	r0, r5
   245e2:	4798      	blx	r3
   245e4:	e7f2      	b.n	245cc <z_impl_flash_write+0x24>

000245e6 <nvs_flash_rd>:
{
   245e6:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   245e8:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   245ea:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   245ec:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   245ee:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   245f0:	fa16 f181 	uxtah	r1, r6, r1
   245f4:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   245f8:	6884      	ldr	r4, [r0, #8]
   245fa:	6824      	ldr	r4, [r4, #0]
   245fc:	46a4      	mov	ip, r4
}
   245fe:	bc70      	pop	{r4, r5, r6}
   24600:	4760      	bx	ip

00024602 <nvs_flash_block_cmp>:
{
   24602:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24606:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   24608:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2460a:	681d      	ldr	r5, [r3, #0]
   2460c:	426d      	negs	r5, r5
{
   2460e:	b089      	sub	sp, #36	; 0x24
   24610:	4681      	mov	r9, r0
   24612:	460e      	mov	r6, r1
   24614:	4617      	mov	r7, r2
	block_size =
   24616:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   2461a:	b91c      	cbnz	r4, 24624 <nvs_flash_block_cmp+0x22>
	return 0;
   2461c:	4620      	mov	r0, r4
}
   2461e:	b009      	add	sp, #36	; 0x24
   24620:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   24624:	42ac      	cmp	r4, r5
   24626:	46a0      	mov	r8, r4
   24628:	bf28      	it	cs
   2462a:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   2462c:	4643      	mov	r3, r8
   2462e:	466a      	mov	r2, sp
   24630:	4631      	mov	r1, r6
   24632:	4648      	mov	r0, r9
   24634:	f7ff ffd7 	bl	245e6 <nvs_flash_rd>
		if (rc) {
   24638:	2800      	cmp	r0, #0
   2463a:	d1f0      	bne.n	2461e <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   2463c:	4642      	mov	r2, r8
   2463e:	4669      	mov	r1, sp
   24640:	4638      	mov	r0, r7
   24642:	f000 fc0d 	bl	24e60 <memcmp>
		if (rc) {
   24646:	b920      	cbnz	r0, 24652 <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   24648:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   2464c:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   2464e:	4447      	add	r7, r8
   24650:	e7e3      	b.n	2461a <nvs_flash_block_cmp+0x18>
			return 1;
   24652:	2001      	movs	r0, #1
   24654:	e7e3      	b.n	2461e <nvs_flash_block_cmp+0x1c>

00024656 <nvs_flash_cmp_const>:
{
   24656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2465a:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2465c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2465e:	681d      	ldr	r5, [r3, #0]
   24660:	426d      	negs	r5, r5
{
   24662:	b088      	sub	sp, #32
	block_size =
   24664:	f005 0520 	and.w	r5, r5, #32
{
   24668:	4607      	mov	r7, r0
   2466a:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   2466c:	4668      	mov	r0, sp
{
   2466e:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   24670:	462a      	mov	r2, r5
   24672:	f000 fc10 	bl	24e96 <memset>
	while (len) {
   24676:	b91c      	cbnz	r4, 24680 <nvs_flash_cmp_const+0x2a>
	return 0;
   24678:	4620      	mov	r0, r4
}
   2467a:	b008      	add	sp, #32
   2467c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   24680:	42ac      	cmp	r4, r5
   24682:	46a0      	mov	r8, r4
   24684:	bf28      	it	cs
   24686:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   24688:	4643      	mov	r3, r8
   2468a:	466a      	mov	r2, sp
   2468c:	4631      	mov	r1, r6
   2468e:	4638      	mov	r0, r7
   24690:	f7ff ffb7 	bl	24602 <nvs_flash_block_cmp>
		if (rc) {
   24694:	2800      	cmp	r0, #0
   24696:	d1f0      	bne.n	2467a <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   24698:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   2469c:	4446      	add	r6, r8
   2469e:	e7ea      	b.n	24676 <nvs_flash_cmp_const+0x20>

000246a0 <nvs_flash_erase_sector>:
{
   246a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   246a4:	f8b0 a00c 	ldrh.w	sl, [r0, #12]
   246a8:	6806      	ldr	r6, [r0, #0]
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   246aa:	6a87      	ldr	r7, [r0, #40]	; 0x28
	addr &= ADDR_SECT_MASK;
   246ac:	ea4f 4811 	mov.w	r8, r1, lsr #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   246b0:	0c09      	lsrs	r1, r1, #16
{
   246b2:	4605      	mov	r5, r0
	addr &= ADDR_SECT_MASK;
   246b4:	ea4f 4808 	mov.w	r8, r8, lsl #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   246b8:	fb0a 6601 	mla	r6, sl, r1, r6
	const struct flash_driver_api *api =
   246bc:	f8d7 9008 	ldr.w	r9, [r7, #8]
	if (api->write_protection != NULL) {
   246c0:	f8d9 300c 	ldr.w	r3, [r9, #12]
   246c4:	b9b3      	cbnz	r3, 246f4 <nvs_flash_erase_sector+0x54>
	rc = api->erase(dev, offset, size);
   246c6:	f8d9 3008 	ldr.w	r3, [r9, #8]
   246ca:	4652      	mov	r2, sl
   246cc:	4631      	mov	r1, r6
   246ce:	4638      	mov	r0, r7
   246d0:	4798      	blx	r3
	if (api->write_protection != NULL) {
   246d2:	f8d9 300c 	ldr.w	r3, [r9, #12]
	rc = api->erase(dev, offset, size);
   246d6:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
   246d8:	b9ab      	cbnz	r3, 24706 <nvs_flash_erase_sector+0x66>
	if (rc) {
   246da:	b98c      	cbnz	r4, 24700 <nvs_flash_erase_sector+0x60>
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   246dc:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   246de:	89ab      	ldrh	r3, [r5, #12]
   246e0:	7912      	ldrb	r2, [r2, #4]
   246e2:	4641      	mov	r1, r8
   246e4:	4628      	mov	r0, r5
   246e6:	f7ff ffb6 	bl	24656 <nvs_flash_cmp_const>
		rc = -ENXIO;
   246ea:	1e04      	subs	r4, r0, #0
   246ec:	bf18      	it	ne
   246ee:	f06f 0405 	mvnne.w	r4, #5
   246f2:	e005      	b.n	24700 <nvs_flash_erase_sector+0x60>
		rc = api->write_protection(dev, false);
   246f4:	2100      	movs	r1, #0
   246f6:	4638      	mov	r0, r7
   246f8:	4798      	blx	r3
		if (rc) {
   246fa:	4604      	mov	r4, r0
   246fc:	2800      	cmp	r0, #0
   246fe:	d0e2      	beq.n	246c6 <nvs_flash_erase_sector+0x26>
}
   24700:	4620      	mov	r0, r4
   24702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		(void) api->write_protection(dev, true);
   24706:	2101      	movs	r1, #1
   24708:	4638      	mov	r0, r7
   2470a:	4798      	blx	r3
   2470c:	e7e5      	b.n	246da <nvs_flash_erase_sector+0x3a>

0002470e <nvs_ate_crc8_update>:
{
   2470e:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   24710:	4601      	mov	r1, r0
{
   24712:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   24714:	2207      	movs	r2, #7
   24716:	20ff      	movs	r0, #255	; 0xff
   24718:	f7ed f91c 	bl	11954 <crc8_ccitt>
	entry->crc8 = crc8;
   2471c:	71e0      	strb	r0, [r4, #7]
}
   2471e:	bd10      	pop	{r4, pc}

00024720 <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   24720:	7800      	ldrb	r0, [r0, #0]
   24722:	2801      	cmp	r0, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   24724:	bf81      	itttt	hi
   24726:	1809      	addhi	r1, r1, r0
   24728:	f101 31ff 	addhi.w	r1, r1, #4294967295
   2472c:	4240      	neghi	r0, r0
   2472e:	4001      	andhi	r1, r0
}
   24730:	4608      	mov	r0, r1
   24732:	4770      	bx	lr

00024734 <nvs_ate_valid>:
{
   24734:	b570      	push	{r4, r5, r6, lr}
   24736:	460c      	mov	r4, r1
   24738:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2473a:	2108      	movs	r1, #8
   2473c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2473e:	f7ff ffef 	bl	24720 <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   24742:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   24744:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   24746:	4621      	mov	r1, r4
   24748:	20ff      	movs	r0, #255	; 0xff
   2474a:	f7ed f903 	bl	11954 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   2474e:	79e3      	ldrb	r3, [r4, #7]
   24750:	4283      	cmp	r3, r0
   24752:	d107      	bne.n	24764 <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   24754:	89a8      	ldrh	r0, [r5, #12]
   24756:	8863      	ldrh	r3, [r4, #2]
   24758:	1b80      	subs	r0, r0, r6
	if ((nvs_ate_crc8_check(entry)) ||
   2475a:	4283      	cmp	r3, r0
   2475c:	bf2c      	ite	cs
   2475e:	2000      	movcs	r0, #0
   24760:	2001      	movcc	r0, #1
}
   24762:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   24764:	2000      	movs	r0, #0
   24766:	e7fc      	b.n	24762 <nvs_ate_valid+0x2e>

00024768 <nvs_sector_advance.isra.0>:
	*addr += (1 << ADDR_SECT_SHIFT);
   24768:	680b      	ldr	r3, [r1, #0]
   2476a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   2476e:	0c1a      	lsrs	r2, r3, #16
   24770:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   24774:	bf08      	it	eq
   24776:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   2477a:	600b      	str	r3, [r1, #0]
}
   2477c:	4770      	bx	lr

0002477e <nvs_close_ate_valid>:
{
   2477e:	b538      	push	{r3, r4, r5, lr}
   24780:	4605      	mov	r5, r0
   24782:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   24784:	f7ff ffd6 	bl	24734 <nvs_ate_valid>
   24788:	b1a0      	cbz	r0, 247b4 <nvs_close_ate_valid+0x36>
   2478a:	88a0      	ldrh	r0, [r4, #4]
   2478c:	b998      	cbnz	r0, 247b6 <nvs_close_ate_valid+0x38>
   2478e:	8822      	ldrh	r2, [r4, #0]
   24790:	f64f 73ff 	movw	r3, #65535	; 0xffff
   24794:	429a      	cmp	r2, r3
   24796:	d10d      	bne.n	247b4 <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   24798:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   2479a:	2108      	movs	r1, #8
   2479c:	f7ff ffc0 	bl	24720 <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   247a0:	8862      	ldrh	r2, [r4, #2]
   247a2:	89ab      	ldrh	r3, [r5, #12]
   247a4:	1a9b      	subs	r3, r3, r2
   247a6:	fbb3 f2f0 	udiv	r2, r3, r0
   247aa:	fb02 3010 	mls	r0, r2, r0, r3
   247ae:	fab0 f080 	clz	r0, r0
   247b2:	0940      	lsrs	r0, r0, #5
}
   247b4:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   247b6:	2000      	movs	r0, #0
   247b8:	e7fc      	b.n	247b4 <nvs_close_ate_valid+0x36>

000247ba <nvs_flash_al_wrt.part.0>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   247ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   247be:	8987      	ldrh	r7, [r0, #12]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   247c0:	4605      	mov	r5, r0
	offset += addr & ADDR_OFFS_MASK;
   247c2:	6800      	ldr	r0, [r0, #0]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   247c4:	461c      	mov	r4, r3
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   247c6:	0c0b      	lsrs	r3, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   247c8:	fa10 f181 	uxtah	r1, r0, r1
   247cc:	fb03 1707 	mla	r7, r3, r7, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   247d0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   247d2:	681e      	ldr	r6, [r3, #0]
   247d4:	4276      	negs	r6, r6
	if (blen > 0) {
   247d6:	4026      	ands	r6, r4
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   247d8:	b088      	sub	sp, #32
   247da:	4690      	mov	r8, r2
	if (blen > 0) {
   247dc:	d008      	beq.n	247f0 <nvs_flash_al_wrt.part.0+0x36>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   247de:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	return z_impl_flash_write(dev, offset, data, len);
   247e0:	4633      	mov	r3, r6
   247e2:	4639      	mov	r1, r7
   247e4:	f7ff fee0 	bl	245a8 <z_impl_flash_write>
		if (rc) {
   247e8:	b9b8      	cbnz	r0, 2481a <nvs_flash_al_wrt.part.0+0x60>
		len -= blen;
   247ea:	1ba4      	subs	r4, r4, r6
		offset += blen;
   247ec:	4437      	add	r7, r6
		data8 += blen;
   247ee:	44b0      	add	r8, r6
	if (len) {
   247f0:	b1b4      	cbz	r4, 24820 <nvs_flash_al_wrt.part.0+0x66>
		memcpy(buf, data8, len);
   247f2:	4622      	mov	r2, r4
   247f4:	4641      	mov	r1, r8
   247f6:	4668      	mov	r0, sp
   247f8:	f000 fb42 	bl	24e80 <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   247fc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   247fe:	681a      	ldr	r2, [r3, #0]
   24800:	7919      	ldrb	r1, [r3, #4]
   24802:	1b12      	subs	r2, r2, r4
   24804:	eb0d 0004 	add.w	r0, sp, r4
   24808:	f000 fb45 	bl	24e96 <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   2480c:	e9d5 030a 	ldrd	r0, r3, [r5, #40]	; 0x28
   24810:	681b      	ldr	r3, [r3, #0]
   24812:	466a      	mov	r2, sp
   24814:	4639      	mov	r1, r7
   24816:	f7ff fec7 	bl	245a8 <z_impl_flash_write>
}
   2481a:	b008      	add	sp, #32
   2481c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
end:
   24820:	4620      	mov	r0, r4
   24822:	e7fa      	b.n	2481a <nvs_flash_al_wrt.part.0+0x60>

00024824 <nvs_flash_ate_wrt>:
{
   24824:	b510      	push	{r4, lr}
   24826:	460a      	mov	r2, r1
	if (!len) {
   24828:	2308      	movs	r3, #8
   2482a:	6841      	ldr	r1, [r0, #4]
{
   2482c:	4604      	mov	r4, r0
   2482e:	f7ff ffc4 	bl	247ba <nvs_flash_al_wrt.part.0>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   24832:	2108      	movs	r1, #8
   24834:	4603      	mov	r3, r0
   24836:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   24838:	f7ff ff72 	bl	24720 <nvs_al_size.isra.0>
   2483c:	6862      	ldr	r2, [r4, #4]
   2483e:	1a12      	subs	r2, r2, r0
   24840:	6062      	str	r2, [r4, #4]
}
   24842:	4618      	mov	r0, r3
   24844:	bd10      	pop	{r4, pc}

00024846 <nvs_add_gc_done_ate>:
{
   24846:	b513      	push	{r0, r1, r4, lr}
	gc_done_ate.id = 0xffff;
   24848:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2484c:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   24850:	2300      	movs	r3, #0
{
   24852:	4604      	mov	r4, r0
	gc_done_ate.len = 0U;
   24854:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   24858:	6883      	ldr	r3, [r0, #8]
   2485a:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   2485e:	4668      	mov	r0, sp
   24860:	f7ff ff55 	bl	2470e <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   24864:	4669      	mov	r1, sp
   24866:	4620      	mov	r0, r4
   24868:	f7ff ffdc 	bl	24824 <nvs_flash_ate_wrt>
}
   2486c:	b002      	add	sp, #8
   2486e:	bd10      	pop	{r4, pc}

00024870 <nvs_prev_ate>:
{
   24870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   24872:	4605      	mov	r5, r0
   24874:	460e      	mov	r6, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   24876:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   24878:	2108      	movs	r1, #8
   2487a:	f7ff ff51 	bl	24720 <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2487e:	6831      	ldr	r1, [r6, #0]
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   24880:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   24882:	2308      	movs	r3, #8
   24884:	4628      	mov	r0, r5
   24886:	f7ff feae 	bl	245e6 <nvs_flash_rd>
	if (rc) {
   2488a:	4604      	mov	r4, r0
   2488c:	2800      	cmp	r0, #0
   2488e:	d138      	bne.n	24902 <nvs_prev_ate+0x92>
	*addr += ate_size;
   24890:	6833      	ldr	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   24892:	89a8      	ldrh	r0, [r5, #12]
	*addr += ate_size;
   24894:	443b      	add	r3, r7
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   24896:	b29a      	uxth	r2, r3
   24898:	1bc7      	subs	r7, r0, r7
   2489a:	42ba      	cmp	r2, r7
	*addr += ate_size;
   2489c:	6033      	str	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   2489e:	d130      	bne.n	24902 <nvs_prev_ate+0x92>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   248a0:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   248a2:	bf03      	ittte	eq
   248a4:	89e9      	ldrheq	r1, [r5, #14]
   248a6:	f101 31ff 	addeq.w	r1, r1, #4294967295
   248aa:	eb03 4101 	addeq.w	r1, r3, r1, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   248ae:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
   248b2:	6031      	str	r1, [r6, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   248b4:	2308      	movs	r3, #8
   248b6:	466a      	mov	r2, sp
   248b8:	4628      	mov	r0, r5
   248ba:	f7ff fe94 	bl	245e6 <nvs_flash_rd>
	if (rc) {
   248be:	4604      	mov	r4, r0
   248c0:	b9f8      	cbnz	r0, 24902 <nvs_prev_ate+0x92>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   248c2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   248c4:	466a      	mov	r2, sp
   248c6:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   248c8:	4603      	mov	r3, r0
		if (data8[i] != value) {
   248ca:	f812 0b01 	ldrb.w	r0, [r2], #1
   248ce:	4281      	cmp	r1, r0
   248d0:	d10c      	bne.n	248ec <nvs_prev_ate+0x7c>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   248d2:	3301      	adds	r3, #1
   248d4:	2b08      	cmp	r3, #8
   248d6:	d1f8      	bne.n	248ca <nvs_prev_ate+0x5a>
		*addr = fs->ate_wra;
   248d8:	686b      	ldr	r3, [r5, #4]
   248da:	e005      	b.n	248e8 <nvs_prev_ate+0x78>
		(*addr) &= ADDR_SECT_MASK;
   248dc:	6833      	ldr	r3, [r6, #0]
		(*addr) += close_ate.offset;
   248de:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   248e2:	0c1b      	lsrs	r3, r3, #16
   248e4:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   248e6:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   248e8:	6033      	str	r3, [r6, #0]
		return 0;
   248ea:	e00a      	b.n	24902 <nvs_prev_ate+0x92>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   248ec:	4669      	mov	r1, sp
   248ee:	4628      	mov	r0, r5
   248f0:	f7ff ff45 	bl	2477e <nvs_close_ate_valid>
   248f4:	2800      	cmp	r0, #0
   248f6:	d1f1      	bne.n	248dc <nvs_prev_ate+0x6c>
	return nvs_recover_last_ate(fs, addr);
   248f8:	4631      	mov	r1, r6
   248fa:	4628      	mov	r0, r5
   248fc:	f7ed ff5e 	bl	127bc <nvs_recover_last_ate>
   24900:	4604      	mov	r4, r0
}
   24902:	4620      	mov	r0, r4
   24904:	b003      	add	sp, #12
   24906:	bdf0      	pop	{r4, r5, r6, r7, pc}

00024908 <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   24908:	2300      	movs	r3, #0
   2490a:	461a      	mov	r2, r3
   2490c:	f7ee ba36 	b.w	12d7c <nvs_write>

00024910 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   24910:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   24912:	2400      	movs	r4, #0
   24914:	9400      	str	r4, [sp, #0]
   24916:	f7ee fb13 	bl	12f40 <nvs_read_hist>
	return rc;
}
   2491a:	b002      	add	sp, #8
   2491c:	bd10      	pop	{r4, pc}

0002491e <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2491e:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   24920:	f013 0307 	ands.w	r3, r3, #7
   24924:	d105      	bne.n	24932 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   24926:	6803      	ldr	r3, [r0, #0]
   24928:	2b00      	cmp	r3, #0
		evt = EVT_START;
   2492a:	bf0c      	ite	eq
   2492c:	2000      	moveq	r0, #0
   2492e:	2003      	movne	r0, #3
   24930:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   24932:	2b02      	cmp	r3, #2
   24934:	d105      	bne.n	24942 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   24936:	8b43      	ldrh	r3, [r0, #26]
   24938:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   2493a:	bf14      	ite	ne
   2493c:	2000      	movne	r0, #0
   2493e:	2004      	moveq	r0, #4
   24940:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   24942:	2b01      	cmp	r3, #1
   24944:	d105      	bne.n	24952 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   24946:	6803      	ldr	r3, [r0, #0]
   24948:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   2494a:	bf0c      	ite	eq
   2494c:	2000      	moveq	r0, #0
   2494e:	2005      	movne	r0, #5
   24950:	4770      	bx	lr
	int evt = EVT_NOP;
   24952:	2000      	movs	r0, #0
}
   24954:	4770      	bx	lr

00024956 <notify_one>:
{
   24956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2495a:	460d      	mov	r5, r1
   2495c:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2495e:	4619      	mov	r1, r3
   24960:	1d28      	adds	r0, r5, #4
{
   24962:	4690      	mov	r8, r2
   24964:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   24966:	f7ff fe06 	bl	24576 <sys_notify_finalize>
	if (cb) {
   2496a:	4604      	mov	r4, r0
   2496c:	b138      	cbz	r0, 2497e <notify_one+0x28>
		cb(mgr, cli, state, res);
   2496e:	4633      	mov	r3, r6
   24970:	4642      	mov	r2, r8
   24972:	4629      	mov	r1, r5
   24974:	4638      	mov	r0, r7
   24976:	46a4      	mov	ip, r4
}
   24978:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   2497c:	4760      	bx	ip
}
   2497e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00024982 <transition_complete>:
{
   24982:	b410      	push	{r4}
	__asm__ volatile(
   24984:	f04f 0440 	mov.w	r4, #64	; 0x40
   24988:	f3ef 8211 	mrs	r2, BASEPRI
   2498c:	f384 8812 	msr	BASEPRI_MAX, r4
   24990:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   24994:	6141      	str	r1, [r0, #20]
}
   24996:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   24998:	2101      	movs	r1, #1
   2499a:	f7ee bb39 	b.w	13010 <process_event>

0002499e <validate_args>:
{
   2499e:	b510      	push	{r4, lr}
   249a0:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   249a2:	b140      	cbz	r0, 249b6 <validate_args+0x18>
   249a4:	b139      	cbz	r1, 249b6 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   249a6:	1d08      	adds	r0, r1, #4
   249a8:	f7ff fdd1 	bl	2454e <sys_notify_validate>
	if ((rv == 0)
   249ac:	b928      	cbnz	r0, 249ba <validate_args+0x1c>
	    && ((cli->notify.flags
   249ae:	68a3      	ldr	r3, [r4, #8]
   249b0:	f033 0303 	bics.w	r3, r3, #3
   249b4:	d001      	beq.n	249ba <validate_args+0x1c>
		rv = -EINVAL;
   249b6:	f06f 0015 	mvn.w	r0, #21
}
   249ba:	bd10      	pop	{r4, pc}

000249bc <onoff_manager_init>:
{
   249bc:	b538      	push	{r3, r4, r5, lr}
   249be:	460c      	mov	r4, r1
	if ((mgr == NULL)
   249c0:	4605      	mov	r5, r0
   249c2:	b158      	cbz	r0, 249dc <onoff_manager_init+0x20>
	    || (transitions == NULL)
   249c4:	b151      	cbz	r1, 249dc <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   249c6:	680b      	ldr	r3, [r1, #0]
   249c8:	b143      	cbz	r3, 249dc <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   249ca:	684b      	ldr	r3, [r1, #4]
   249cc:	b133      	cbz	r3, 249dc <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   249ce:	221c      	movs	r2, #28
   249d0:	2100      	movs	r1, #0
   249d2:	f000 fa60 	bl	24e96 <memset>
   249d6:	612c      	str	r4, [r5, #16]
	return 0;
   249d8:	2000      	movs	r0, #0
}
   249da:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   249dc:	f06f 0015 	mvn.w	r0, #21
   249e0:	e7fb      	b.n	249da <onoff_manager_init+0x1e>

000249e2 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   249e2:	b570      	push	{r4, r5, r6, lr}
   249e4:	4604      	mov	r4, r0
   249e6:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   249e8:	f7ff ffd9 	bl	2499e <validate_args>

	if (rv < 0) {
   249ec:	1e05      	subs	r5, r0, #0
   249ee:	db31      	blt.n	24a54 <onoff_request+0x72>
   249f0:	f04f 0340 	mov.w	r3, #64	; 0x40
   249f4:	f3ef 8111 	mrs	r1, BASEPRI
   249f8:	f383 8812 	msr	BASEPRI_MAX, r3
   249fc:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   24a00:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   24a02:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   24a04:	f64f 75ff 	movw	r5, #65535	; 0xffff
   24a08:	42ab      	cmp	r3, r5
   24a0a:	f000 0207 	and.w	r2, r0, #7
   24a0e:	d02e      	beq.n	24a6e <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   24a10:	2a02      	cmp	r2, #2
   24a12:	d10e      	bne.n	24a32 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   24a14:	3301      	adds	r3, #1
   24a16:	8363      	strh	r3, [r4, #26]
	rv = state;
   24a18:	4615      	mov	r5, r2
		notify = true;
   24a1a:	2301      	movs	r3, #1
	__asm__ volatile(
   24a1c:	f381 8811 	msr	BASEPRI, r1
   24a20:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   24a24:	b1b3      	cbz	r3, 24a54 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   24a26:	2300      	movs	r3, #0
   24a28:	4631      	mov	r1, r6
   24a2a:	4620      	mov	r0, r4
   24a2c:	f7ff ff93 	bl	24956 <notify_one>
   24a30:	e010      	b.n	24a54 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   24a32:	0783      	lsls	r3, r0, #30
   24a34:	d001      	beq.n	24a3a <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   24a36:	2a06      	cmp	r2, #6
   24a38:	d10e      	bne.n	24a58 <onoff_request+0x76>
	parent->next = child;
   24a3a:	2300      	movs	r3, #0
   24a3c:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   24a3e:	6863      	ldr	r3, [r4, #4]
   24a40:	b993      	cbnz	r3, 24a68 <onoff_request+0x86>
	list->head = node;
   24a42:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   24a46:	4615      	mov	r5, r2
   24a48:	b962      	cbnz	r2, 24a64 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   24a4a:	460a      	mov	r2, r1
   24a4c:	4620      	mov	r0, r4
   24a4e:	2102      	movs	r1, #2
   24a50:	f7ee fade 	bl	13010 <process_event>
		}
	}

	return rv;
}
   24a54:	4628      	mov	r0, r5
   24a56:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   24a58:	2a05      	cmp	r2, #5
   24a5a:	bf0c      	ite	eq
   24a5c:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   24a60:	f06f 0504 	mvnne.w	r5, #4
   24a64:	2300      	movs	r3, #0
   24a66:	e7d9      	b.n	24a1c <onoff_request+0x3a>
	parent->next = child;
   24a68:	601e      	str	r6, [r3, #0]
	list->tail = node;
   24a6a:	6066      	str	r6, [r4, #4]
}
   24a6c:	e7eb      	b.n	24a46 <onoff_request+0x64>
		rv = -EAGAIN;
   24a6e:	f06f 050a 	mvn.w	r5, #10
   24a72:	e7f7      	b.n	24a64 <onoff_request+0x82>

00024a74 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   24a74:	b510      	push	{r4, lr}
	__asm__ volatile(
   24a76:	f04f 0340 	mov.w	r3, #64	; 0x40
   24a7a:	f3ef 8211 	mrs	r2, BASEPRI
   24a7e:	f383 8812 	msr	BASEPRI_MAX, r3
   24a82:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   24a86:	8b04      	ldrh	r4, [r0, #24]
   24a88:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   24a8c:	2c02      	cmp	r4, #2
   24a8e:	d00a      	beq.n	24aa6 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
   24a90:	2c01      	cmp	r4, #1
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   24a92:	bf0c      	ite	eq
   24a94:	f06f 0004 	mvneq.w	r0, #4
   24a98:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   24a9c:	f382 8811 	msr	BASEPRI, r2
   24aa0:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   24aa4:	e008      	b.n	24ab8 <onoff_release+0x44>
	mgr->refs -= 1U;
   24aa6:	8b43      	ldrh	r3, [r0, #26]
   24aa8:	3b01      	subs	r3, #1
   24aaa:	b29b      	uxth	r3, r3
   24aac:	8343      	strh	r3, [r0, #26]
	if (stop) {
   24aae:	b923      	cbnz	r3, 24aba <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   24ab0:	4621      	mov	r1, r4
   24ab2:	f7ee faad 	bl	13010 <process_event>
	int rv = state;
   24ab6:	4620      	mov	r0, r4
}
   24ab8:	bd10      	pop	{r4, pc}
	int rv = state;
   24aba:	4620      	mov	r0, r4
   24abc:	e7ee      	b.n	24a9c <onoff_release+0x28>

00024abe <onoff_sync_lock>:
	__asm__ volatile(
   24abe:	f04f 0240 	mov.w	r2, #64	; 0x40
   24ac2:	f3ef 8311 	mrs	r3, BASEPRI
   24ac6:	f382 8812 	msr	BASEPRI_MAX, r2
   24aca:	f3bf 8f6f 	isb	sy
int onoff_sync_lock(struct onoff_sync_service *srv,
		    k_spinlock_key_t *keyp)
{
	*keyp = k_spin_lock(&srv->lock);
	return srv->count;
}
   24ace:	6800      	ldr	r0, [r0, #0]
	*keyp = k_spin_lock(&srv->lock);
   24ad0:	600b      	str	r3, [r1, #0]
}
   24ad2:	4770      	bx	lr

00024ad4 <onoff_sync_finalize>:
int onoff_sync_finalize(struct onoff_sync_service *srv,
			k_spinlock_key_t key,
			struct onoff_client *cli,
			int res,
			bool on)
{
   24ad4:	b538      	push	{r3, r4, r5, lr}

	/* Clear errors visible when locked.  If they are to be
	 * preserved the caller must finalize with the previous
	 * error code.
	 */
	if (srv->count < 0) {
   24ad6:	6804      	ldr	r4, [r0, #0]
   24ad8:	2c00      	cmp	r4, #0
		srv->count = 0;
   24ada:	bfbc      	itt	lt
   24adc:	2400      	movlt	r4, #0
   24ade:	6004      	strlt	r4, [r0, #0]
	}
	if (res < 0) {
   24ae0:	2b00      	cmp	r3, #0
{
   24ae2:	460d      	mov	r5, r1
   24ae4:	4611      	mov	r1, r2
   24ae6:	f89d 2010 	ldrb.w	r2, [sp, #16]
	if (res < 0) {
   24aea:	da0c      	bge.n	24b06 <onoff_sync_finalize+0x32>
		srv->count = res;
   24aec:	6003      	str	r3, [r0, #0]
		state = ONOFF_STATE_ERROR;
   24aee:	2201      	movs	r2, #1
		 * callbacks are used only when turning on don't
		 * bother changing it.
		 */
	}

	int rv = srv->count;
   24af0:	6804      	ldr	r4, [r0, #0]
	__asm__ volatile(
   24af2:	f385 8811 	msr	BASEPRI, r5
   24af6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&srv->lock, key);

	if (cli) {
   24afa:	b111      	cbz	r1, 24b02 <onoff_sync_finalize+0x2e>
		/* Detect service mis-use: onoff does not callback on transition
		 * to off, so no client should have been passed.
		 */
		__ASSERT_NO_MSG(on);
		notify_one(NULL, cli, state, res);
   24afc:	2000      	movs	r0, #0
   24afe:	f7ff ff2a 	bl	24956 <notify_one>
	}

	return rv;
}
   24b02:	4620      	mov	r0, r4
   24b04:	bd38      	pop	{r3, r4, r5, pc}
	} else if (on) {
   24b06:	6804      	ldr	r4, [r0, #0]
   24b08:	b11a      	cbz	r2, 24b12 <onoff_sync_finalize+0x3e>
		srv->count += 1;
   24b0a:	3401      	adds	r4, #1
		srv->count -= 1;
   24b0c:	6004      	str	r4, [r0, #0]
	uint32_t state = ONOFF_STATE_ON;
   24b0e:	2202      	movs	r2, #2
   24b10:	e7ee      	b.n	24af0 <onoff_sync_finalize+0x1c>
		srv->count -= 1;
   24b12:	3c01      	subs	r4, #1
   24b14:	e7fa      	b.n	24b0c <onoff_sync_finalize+0x38>

00024b16 <arch_printk_char_out>:
}
   24b16:	2000      	movs	r0, #0
   24b18:	4770      	bx	lr

00024b1a <str_out>:
{
   24b1a:	b530      	push	{r4, r5, lr}
   24b1c:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   24b1e:	680c      	ldr	r4, [r1, #0]
   24b20:	1c55      	adds	r5, r2, #1
   24b22:	b114      	cbz	r4, 24b2a <str_out+0x10>
   24b24:	684b      	ldr	r3, [r1, #4]
   24b26:	4293      	cmp	r3, r2
   24b28:	dc01      	bgt.n	24b2e <str_out+0x14>
		ctx->count++;
   24b2a:	608d      	str	r5, [r1, #8]
}
   24b2c:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   24b2e:	3b01      	subs	r3, #1
   24b30:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   24b32:	bf08      	it	eq
   24b34:	2200      	moveq	r2, #0
   24b36:	608d      	str	r5, [r1, #8]
   24b38:	bf0c      	ite	eq
   24b3a:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   24b3c:	54a0      	strbne	r0, [r4, r2]
   24b3e:	e7f5      	b.n	24b2c <str_out+0x12>

00024b40 <printk>:
{
   24b40:	b40f      	push	{r0, r1, r2, r3}
   24b42:	b507      	push	{r0, r1, r2, lr}
   24b44:	a904      	add	r1, sp, #16
   24b46:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   24b4a:	9101      	str	r1, [sp, #4]
	z_log_printk(fmt, ap);
   24b4c:	f7ff f9f5 	bl	23f3a <z_log_printk>
}
   24b50:	b003      	add	sp, #12
   24b52:	f85d eb04 	ldr.w	lr, [sp], #4
   24b56:	b004      	add	sp, #16
   24b58:	4770      	bx	lr

00024b5a <snprintk>:
{
   24b5a:	b40c      	push	{r2, r3}
   24b5c:	b507      	push	{r0, r1, r2, lr}
   24b5e:	ab04      	add	r3, sp, #16
   24b60:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   24b64:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   24b66:	f7ee fc51 	bl	1340c <vsnprintk>
}
   24b6a:	b003      	add	sp, #12
   24b6c:	f85d eb04 	ldr.w	lr, [sp], #4
   24b70:	b002      	add	sp, #8
   24b72:	4770      	bx	lr

00024b74 <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   24b74:	2200      	movs	r2, #0
   24b76:	e9c0 2200 	strd	r2, r2, [r0]
   24b7a:	6082      	str	r2, [r0, #8]
}
   24b7c:	4770      	bx	lr

00024b7e <settings_name_steq>:
{
   24b7e:	4603      	mov	r3, r0
   24b80:	b530      	push	{r4, r5, lr}
   24b82:	4608      	mov	r0, r1
	if (next) {
   24b84:	b10a      	cbz	r2, 24b8a <settings_name_steq+0xc>
		*next = NULL;
   24b86:	2100      	movs	r1, #0
   24b88:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   24b8a:	b163      	cbz	r3, 24ba6 <settings_name_steq+0x28>
   24b8c:	b190      	cbz	r0, 24bb4 <settings_name_steq+0x36>
   24b8e:	1e41      	subs	r1, r0, #1
   24b90:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   24b92:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   24b96:	4604      	mov	r4, r0
   24b98:	f810 3b01 	ldrb.w	r3, [r0], #1
   24b9c:	b15d      	cbz	r5, 24bb6 <settings_name_steq+0x38>
   24b9e:	429d      	cmp	r5, r3
   24ba0:	d101      	bne.n	24ba6 <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   24ba2:	2d3d      	cmp	r5, #61	; 0x3d
   24ba4:	d1f5      	bne.n	24b92 <settings_name_steq+0x14>
	return 0;
   24ba6:	2000      	movs	r0, #0
   24ba8:	e004      	b.n	24bb4 <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   24baa:	2b3d      	cmp	r3, #61	; 0x3d
   24bac:	d008      	beq.n	24bc0 <settings_name_steq+0x42>
   24bae:	fab3 f083 	clz	r0, r3
   24bb2:	0940      	lsrs	r0, r0, #5
}
   24bb4:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   24bb6:	2b2f      	cmp	r3, #47	; 0x2f
   24bb8:	d1f7      	bne.n	24baa <settings_name_steq+0x2c>
		if (next) {
   24bba:	b10a      	cbz	r2, 24bc0 <settings_name_steq+0x42>
			*next = name + 1;
   24bbc:	3401      	adds	r4, #1
   24bbe:	6014      	str	r4, [r2, #0]
		return 1;
   24bc0:	2001      	movs	r0, #1
   24bc2:	e7f7      	b.n	24bb4 <settings_name_steq+0x36>

00024bc4 <settings_name_next>:
{
   24bc4:	b530      	push	{r4, r5, lr}
   24bc6:	4603      	mov	r3, r0
	if (next) {
   24bc8:	b109      	cbz	r1, 24bce <settings_name_next+0xa>
		*next = NULL;
   24bca:	2200      	movs	r2, #0
   24bcc:	600a      	str	r2, [r1, #0]
	if (!name) {
   24bce:	b16b      	cbz	r3, 24bec <settings_name_next+0x28>
   24bd0:	461a      	mov	r2, r3
   24bd2:	4614      	mov	r4, r2
   24bd4:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   24bd6:	f812 5b01 	ldrb.w	r5, [r2], #1
   24bda:	b135      	cbz	r5, 24bea <settings_name_next+0x26>
   24bdc:	2d3d      	cmp	r5, #61	; 0x3d
   24bde:	d004      	beq.n	24bea <settings_name_next+0x26>
   24be0:	2d2f      	cmp	r5, #47	; 0x2f
   24be2:	d1f6      	bne.n	24bd2 <settings_name_next+0xe>
		if (next) {
   24be4:	b109      	cbz	r1, 24bea <settings_name_next+0x26>
			*next = name + 1;
   24be6:	3401      	adds	r4, #1
   24be8:	600c      	str	r4, [r1, #0]
}
   24bea:	bd30      	pop	{r4, r5, pc}
		return 0;
   24bec:	4618      	mov	r0, r3
   24bee:	e7fc      	b.n	24bea <settings_name_next+0x26>

00024bf0 <settings_nvs_read_fn>:
{
   24bf0:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   24bf2:	4613      	mov	r3, r2
{
   24bf4:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   24bf6:	460a      	mov	r2, r1
   24bf8:	8881      	ldrh	r1, [r0, #4]
   24bfa:	6800      	ldr	r0, [r0, #0]
   24bfc:	f7ff fe88 	bl	24910 <nvs_read>
}
   24c00:	42a0      	cmp	r0, r4
   24c02:	bfa8      	it	ge
   24c04:	4620      	movge	r0, r4
   24c06:	bd10      	pop	{r4, pc}

00024c08 <settings_nvs_save>:
{
   24c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24c0c:	b097      	sub	sp, #92	; 0x5c
   24c0e:	4604      	mov	r4, r0
   24c10:	9201      	str	r2, [sp, #4]
   24c12:	469b      	mov	fp, r3
	if (!name) {
   24c14:	4689      	mov	r9, r1
   24c16:	2900      	cmp	r1, #0
   24c18:	d069      	beq.n	24cee <settings_nvs_save+0xe6>
	delete = ((value == NULL) || (val_len == 0));
   24c1a:	b1da      	cbz	r2, 24c54 <settings_nvs_save+0x4c>
   24c1c:	fabb f78b 	clz	r7, fp
   24c20:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   24c22:	8f25      	ldrh	r5, [r4, #56]	; 0x38
   24c24:	3501      	adds	r5, #1
   24c26:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   24c28:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   24c2a:	f104 0a08 	add.w	sl, r4, #8
		name_id--;
   24c2e:	1e6e      	subs	r6, r5, #1
   24c30:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   24c32:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   24c36:	d02e      	beq.n	24c96 <settings_nvs_save+0x8e>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   24c38:	234a      	movs	r3, #74	; 0x4a
   24c3a:	aa03      	add	r2, sp, #12
   24c3c:	4631      	mov	r1, r6
   24c3e:	4650      	mov	r0, sl
   24c40:	f7ff fe66 	bl	24910 <nvs_read>
		if (rc < 0) {
   24c44:	2800      	cmp	r0, #0
   24c46:	da07      	bge.n	24c58 <settings_nvs_save+0x50>
			if (rc == -ENOENT) {
   24c48:	f110 0f02 	cmn.w	r0, #2
   24c4c:	bf08      	it	eq
   24c4e:	46b0      	moveq	r8, r6
   24c50:	4635      	mov	r5, r6
   24c52:	e7ec      	b.n	24c2e <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   24c54:	2701      	movs	r7, #1
   24c56:	e7e4      	b.n	24c22 <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   24c58:	ab16      	add	r3, sp, #88	; 0x58
   24c5a:	4418      	add	r0, r3
   24c5c:	2300      	movs	r3, #0
   24c5e:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   24c62:	a903      	add	r1, sp, #12
   24c64:	4648      	mov	r0, r9
   24c66:	f000 f8e0 	bl	24e2a <strcmp>
   24c6a:	2800      	cmp	r0, #0
   24c6c:	d1f0      	bne.n	24c50 <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   24c6e:	2f00      	cmp	r7, #0
   24c70:	d03b      	beq.n	24cea <settings_nvs_save+0xe2>
   24c72:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   24c74:	42b3      	cmp	r3, r6
   24c76:	d142      	bne.n	24cfe <settings_nvs_save+0xf6>
			cf->last_name_id--;
   24c78:	4622      	mov	r2, r4
   24c7a:	1e73      	subs	r3, r6, #1
   24c7c:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   24c80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   24c84:	2302      	movs	r3, #2
   24c86:	4650      	mov	r0, sl
   24c88:	f7ee f878 	bl	12d7c <nvs_write>
			if (rc < 0) {
   24c8c:	2800      	cmp	r0, #0
   24c8e:	da36      	bge.n	24cfe <settings_nvs_save+0xf6>
}
   24c90:	b017      	add	sp, #92	; 0x5c
   24c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   24c96:	bb6f      	cbnz	r7, 24cf4 <settings_nvs_save+0xec>
	write_name = true;
   24c98:	2701      	movs	r7, #1
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   24c9a:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   24c9e:	d02b      	beq.n	24cf8 <settings_nvs_save+0xf0>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   24ca0:	f104 0508 	add.w	r5, r4, #8
   24ca4:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   24ca8:	9a01      	ldr	r2, [sp, #4]
   24caa:	465b      	mov	r3, fp
   24cac:	b289      	uxth	r1, r1
   24cae:	4628      	mov	r0, r5
   24cb0:	f7ee f864 	bl	12d7c <nvs_write>
	if (rc < 0) {
   24cb4:	2800      	cmp	r0, #0
   24cb6:	dbeb      	blt.n	24c90 <settings_nvs_save+0x88>
	if (write_name) {
   24cb8:	b157      	cbz	r7, 24cd0 <settings_nvs_save+0xc8>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   24cba:	4648      	mov	r0, r9
   24cbc:	f000 f8a5 	bl	24e0a <strlen>
   24cc0:	464a      	mov	r2, r9
   24cc2:	4603      	mov	r3, r0
   24cc4:	4641      	mov	r1, r8
   24cc6:	4628      	mov	r0, r5
   24cc8:	f7ee f858 	bl	12d7c <nvs_write>
		if (rc < 0) {
   24ccc:	2800      	cmp	r0, #0
   24cce:	dbdf      	blt.n	24c90 <settings_nvs_save+0x88>
	if (write_name_id > cf->last_name_id) {
   24cd0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   24cd2:	4543      	cmp	r3, r8
   24cd4:	d220      	bcs.n	24d18 <settings_nvs_save+0x110>
		cf->last_name_id = write_name_id;
   24cd6:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   24cd8:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   24cda:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   24cde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   24ce2:	4628      	mov	r0, r5
   24ce4:	f7ee f84a 	bl	12d7c <nvs_write>
   24ce8:	e016      	b.n	24d18 <settings_nvs_save+0x110>
   24cea:	46b0      	mov	r8, r6
   24cec:	e7d5      	b.n	24c9a <settings_nvs_save+0x92>
		return -EINVAL;
   24cee:	f06f 0015 	mvn.w	r0, #21
   24cf2:	e7cd      	b.n	24c90 <settings_nvs_save+0x88>
		return 0;
   24cf4:	2000      	movs	r0, #0
   24cf6:	e7cb      	b.n	24c90 <settings_nvs_save+0x88>
		return -ENOMEM;
   24cf8:	f06f 000b 	mvn.w	r0, #11
   24cfc:	e7c8      	b.n	24c90 <settings_nvs_save+0x88>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   24cfe:	4631      	mov	r1, r6
   24d00:	4650      	mov	r0, sl
   24d02:	f7ff fe01 	bl	24908 <nvs_delete>
			if (rc >= 0) {
   24d06:	2800      	cmp	r0, #0
   24d08:	dbc2      	blt.n	24c90 <settings_nvs_save+0x88>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   24d0a:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   24d0e:	313f      	adds	r1, #63	; 0x3f
   24d10:	b289      	uxth	r1, r1
   24d12:	4650      	mov	r0, sl
   24d14:	f7ff fdf8 	bl	24908 <nvs_delete>
	if (rc < 0) {
   24d18:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   24d1c:	e7b8      	b.n	24c90 <settings_nvs_save+0x88>

00024d1e <settings_nvs_backend_init>:
{
   24d1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   24d20:	f100 0608 	add.w	r6, r0, #8
   24d24:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
{
   24d26:	4604      	mov	r4, r0
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   24d28:	4630      	mov	r0, r6
   24d2a:	f7ed fe49 	bl	129c0 <nvs_init>
	if (rc) {
   24d2e:	4605      	mov	r5, r0
   24d30:	b970      	cbnz	r0, 24d50 <settings_nvs_backend_init+0x32>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   24d32:	2302      	movs	r3, #2
   24d34:	f10d 0206 	add.w	r2, sp, #6
   24d38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   24d3c:	4630      	mov	r0, r6
   24d3e:	f7ff fde7 	bl	24910 <nvs_read>
	if (rc < 0) {
   24d42:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   24d44:	bfac      	ite	ge
   24d46:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
		cf->last_name_id = NVS_NAMECNT_ID;
   24d4a:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
		cf->last_name_id = last_name_id;
   24d4e:	8723      	strh	r3, [r4, #56]	; 0x38
}
   24d50:	4628      	mov	r0, r5
   24d52:	b002      	add	sp, #8
   24d54:	bd70      	pop	{r4, r5, r6, pc}

00024d56 <settings_load>:
	return settings_load_subtree(NULL);
   24d56:	2000      	movs	r0, #0
   24d58:	f7ee bd3a 	b.w	137d0 <settings_load_subtree>

00024d5c <settings_delete>:
	return settings_save_one(name, NULL, 0);
   24d5c:	2200      	movs	r2, #0
   24d5e:	4611      	mov	r1, r2
   24d60:	f7ee bcfc 	b.w	1375c <settings_save_one>

00024d64 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   24d64:	4604      	mov	r4, r0
   24d66:	b508      	push	{r3, lr}
   24d68:	4608      	mov	r0, r1
   24d6a:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   24d6c:	461a      	mov	r2, r3
   24d6e:	47a0      	blx	r4
	return z_impl_z_current_get();
   24d70:	f7fc fe4c 	bl	21a0c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   24d74:	f7ef f9ea 	bl	1414c <z_impl_k_thread_abort>

00024d78 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   24d78:	b538      	push	{r3, r4, r5, lr}
   24d7a:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   24d7c:	42ab      	cmp	r3, r5
{
   24d7e:	4611      	mov	r1, r2
   24d80:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   24d82:	d804      	bhi.n	24d8e <_copy+0x16>
		(void)memcpy(to, from, from_len);
   24d84:	461a      	mov	r2, r3
   24d86:	f000 f87b 	bl	24e80 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   24d8a:	4620      	mov	r0, r4
   24d8c:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   24d8e:	2400      	movs	r4, #0
   24d90:	e7fb      	b.n	24d8a <_copy+0x12>

00024d92 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   24d92:	f000 b880 	b.w	24e96 <memset>

00024d96 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   24d96:	09c3      	lsrs	r3, r0, #7
   24d98:	005a      	lsls	r2, r3, #1
   24d9a:	4413      	add	r3, r2
   24d9c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   24da0:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   24da4:	b2c0      	uxtb	r0, r0
   24da6:	4770      	bx	lr

00024da8 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   24da8:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   24daa:	6800      	ldr	r0, [r0, #0]
   24dac:	f7ee bde2 	b.w	13974 <z_arm_fatal_error>

00024db0 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   24db0:	2100      	movs	r1, #0
   24db2:	2001      	movs	r0, #1
   24db4:	f7ee bdde 	b.w	13974 <z_arm_fatal_error>

00024db8 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   24db8:	b508      	push	{r3, lr}
	handler();
   24dba:	f7ee fd9d 	bl	138f8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   24dbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   24dc2:	f7ee beeb 	b.w	13b9c <z_arm_exc_exit>

00024dc6 <_stdout_hook_default>:
}
   24dc6:	f04f 30ff 	mov.w	r0, #4294967295
   24dca:	4770      	bx	lr

00024dcc <fputc>:
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&c, *(uintptr_t *)&stream, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
   24dcc:	f7ef bac0 	b.w	14350 <z_impl_zephyr_fputc>

00024dd0 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   24dd0:	3901      	subs	r1, #1
   24dd2:	4603      	mov	r3, r0
   24dd4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   24dd8:	b90a      	cbnz	r2, 24dde <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   24dda:	701a      	strb	r2, [r3, #0]

	return dest;
}
   24ddc:	4770      	bx	lr
		*d = *s;
   24dde:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   24de2:	e7f7      	b.n	24dd4 <strcpy+0x4>

00024de4 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
   24de4:	b570      	push	{r4, r5, r6, lr}
   24de6:	3901      	subs	r1, #1
   24de8:	4605      	mov	r5, r0
   24dea:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   24dec:	b142      	cbz	r2, 24e00 <strncpy+0x1c>
   24dee:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   24df2:	1e56      	subs	r6, r2, #1
   24df4:	b92b      	cbnz	r3, 24e02 <strncpy+0x1e>
   24df6:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   24df8:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   24dfc:	42a2      	cmp	r2, r4
   24dfe:	d1fb      	bne.n	24df8 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   24e00:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   24e02:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   24e06:	4632      	mov	r2, r6
   24e08:	e7ef      	b.n	24dea <strncpy+0x6>

00024e0a <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   24e0a:	4603      	mov	r3, r0
	size_t n = 0;
   24e0c:	2000      	movs	r0, #0

	while (*s != '\0') {
   24e0e:	5c1a      	ldrb	r2, [r3, r0]
   24e10:	b902      	cbnz	r2, 24e14 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   24e12:	4770      	bx	lr
		n++;
   24e14:	3001      	adds	r0, #1
   24e16:	e7fa      	b.n	24e0e <strlen+0x4>

00024e18 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   24e18:	4603      	mov	r3, r0
	size_t n = 0;
   24e1a:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   24e1c:	5c1a      	ldrb	r2, [r3, r0]
   24e1e:	b10a      	cbz	r2, 24e24 <strnlen+0xc>
   24e20:	4288      	cmp	r0, r1
   24e22:	d100      	bne.n	24e26 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   24e24:	4770      	bx	lr
		n++;
   24e26:	3001      	adds	r0, #1
   24e28:	e7f8      	b.n	24e1c <strnlen+0x4>

00024e2a <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   24e2a:	1e43      	subs	r3, r0, #1
   24e2c:	3901      	subs	r1, #1
   24e2e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   24e32:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   24e36:	4282      	cmp	r2, r0
   24e38:	d101      	bne.n	24e3e <strcmp+0x14>
   24e3a:	2a00      	cmp	r2, #0
   24e3c:	d1f7      	bne.n	24e2e <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   24e3e:	1a10      	subs	r0, r2, r0
   24e40:	4770      	bx	lr

00024e42 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   24e42:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   24e44:	2400      	movs	r4, #0
   24e46:	42a2      	cmp	r2, r4
   24e48:	d008      	beq.n	24e5c <strncmp+0x1a>
   24e4a:	5d03      	ldrb	r3, [r0, r4]
   24e4c:	5d0d      	ldrb	r5, [r1, r4]
   24e4e:	42ab      	cmp	r3, r5
   24e50:	d102      	bne.n	24e58 <strncmp+0x16>
   24e52:	3401      	adds	r4, #1
   24e54:	2b00      	cmp	r3, #0
   24e56:	d1f6      	bne.n	24e46 <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   24e58:	1b58      	subs	r0, r3, r5
   24e5a:	e000      	b.n	24e5e <strncmp+0x1c>
   24e5c:	2000      	movs	r0, #0
}
   24e5e:	bd30      	pop	{r4, r5, pc}

00024e60 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   24e60:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   24e62:	b15a      	cbz	r2, 24e7c <memcmp+0x1c>
   24e64:	3901      	subs	r1, #1
   24e66:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   24e68:	f810 2b01 	ldrb.w	r2, [r0], #1
   24e6c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   24e70:	42a0      	cmp	r0, r4
   24e72:	d001      	beq.n	24e78 <memcmp+0x18>
   24e74:	429a      	cmp	r2, r3
   24e76:	d0f7      	beq.n	24e68 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   24e78:	1ad0      	subs	r0, r2, r3
}
   24e7a:	bd10      	pop	{r4, pc}
		return 0;
   24e7c:	4610      	mov	r0, r2
   24e7e:	e7fc      	b.n	24e7a <memcmp+0x1a>

00024e80 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   24e80:	b510      	push	{r4, lr}
   24e82:	1e43      	subs	r3, r0, #1
   24e84:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   24e86:	4291      	cmp	r1, r2
   24e88:	d100      	bne.n	24e8c <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   24e8a:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   24e8c:	f811 4b01 	ldrb.w	r4, [r1], #1
   24e90:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   24e94:	e7f7      	b.n	24e86 <memcpy+0x6>

00024e96 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   24e96:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   24e98:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   24e9a:	4603      	mov	r3, r0
	while (n > 0) {
   24e9c:	4293      	cmp	r3, r2
   24e9e:	d100      	bne.n	24ea2 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   24ea0:	4770      	bx	lr
		*(d_byte++) = c_byte;
   24ea2:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   24ea6:	e7f9      	b.n	24e9c <memset+0x6>

00024ea8 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   24ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24eac:	4684      	mov	ip, r0
   24eae:	460f      	mov	r7, r1
	register const char *s = nptr;
   24eb0:	4605      	mov	r5, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   24eb2:	462c      	mov	r4, r5
   24eb4:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   24eb8:	2b20      	cmp	r3, #32
   24eba:	d035      	beq.n	24f28 <strtoul+0x80>
   24ebc:	f1a3 0109 	sub.w	r1, r3, #9
   24ec0:	2904      	cmp	r1, #4
   24ec2:	d931      	bls.n	24f28 <strtoul+0x80>
	} while (isspace(c));
	if (c == '-') {
   24ec4:	2b2d      	cmp	r3, #45	; 0x2d
   24ec6:	d131      	bne.n	24f2c <strtoul+0x84>
		neg = 1;
		c = *s++;
   24ec8:	786b      	ldrb	r3, [r5, #1]
   24eca:	1cac      	adds	r4, r5, #2
		neg = 1;
   24ecc:	f04f 0e01 	mov.w	lr, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   24ed0:	2a00      	cmp	r2, #0
   24ed2:	d05e      	beq.n	24f92 <strtoul+0xea>
   24ed4:	2a10      	cmp	r2, #16
   24ed6:	d109      	bne.n	24eec <strtoul+0x44>
   24ed8:	2b30      	cmp	r3, #48	; 0x30
   24eda:	d107      	bne.n	24eec <strtoul+0x44>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   24edc:	7823      	ldrb	r3, [r4, #0]
   24ede:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   24ee2:	2b58      	cmp	r3, #88	; 0x58
   24ee4:	d150      	bne.n	24f88 <strtoul+0xe0>
		c = s[1];
   24ee6:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   24ee8:	2210      	movs	r2, #16
		s += 2;
   24eea:	3402      	adds	r4, #2

	if (base == 0) {
		base = c == '0' ? 8 : 10;
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   24eec:	f04f 31ff 	mov.w	r1, #4294967295
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   24ef0:	2600      	movs	r6, #0
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   24ef2:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   24ef6:	fb02 f801 	mul.w	r8, r2, r1
   24efa:	ea6f 0808 	mvn.w	r8, r8
	for (acc = 0, any = 0;; c = *s++) {
   24efe:	4630      	mov	r0, r6
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   24f00:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   24f04:	2d09      	cmp	r5, #9
   24f06:	d818      	bhi.n	24f3a <strtoul+0x92>
			c -= '0';
   24f08:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   24f0a:	429a      	cmp	r2, r3
   24f0c:	dd25      	ble.n	24f5a <strtoul+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   24f0e:	2e00      	cmp	r6, #0
   24f10:	db20      	blt.n	24f54 <strtoul+0xac>
   24f12:	4288      	cmp	r0, r1
   24f14:	d81e      	bhi.n	24f54 <strtoul+0xac>
   24f16:	d101      	bne.n	24f1c <strtoul+0x74>
   24f18:	4543      	cmp	r3, r8
   24f1a:	dc1b      	bgt.n	24f54 <strtoul+0xac>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   24f1c:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   24f20:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   24f22:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   24f26:	e7eb      	b.n	24f00 <strtoul+0x58>
{
   24f28:	4625      	mov	r5, r4
   24f2a:	e7c2      	b.n	24eb2 <strtoul+0xa>
	} else if (c == '+') {
   24f2c:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   24f2e:	bf04      	itt	eq
   24f30:	786b      	ldrbeq	r3, [r5, #1]
   24f32:	1cac      	addeq	r4, r5, #2
	register int neg = 0, any, cutlim;
   24f34:	f04f 0e00 	mov.w	lr, #0
   24f38:	e7ca      	b.n	24ed0 <strtoul+0x28>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   24f3a:	f043 0520 	orr.w	r5, r3, #32
   24f3e:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   24f40:	2d19      	cmp	r5, #25
   24f42:	d80a      	bhi.n	24f5a <strtoul+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   24f44:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   24f48:	2d1a      	cmp	r5, #26
   24f4a:	bf34      	ite	cc
   24f4c:	2537      	movcc	r5, #55	; 0x37
   24f4e:	2557      	movcs	r5, #87	; 0x57
   24f50:	1b5b      	subs	r3, r3, r5
   24f52:	e7da      	b.n	24f0a <strtoul+0x62>
			any = -1;
   24f54:	f04f 36ff 	mov.w	r6, #4294967295
   24f58:	e7e3      	b.n	24f22 <strtoul+0x7a>
		}
	}
	if (any < 0) {
   24f5a:	2e00      	cmp	r6, #0
   24f5c:	da08      	bge.n	24f70 <strtoul+0xc8>
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   24f5e:	f7fb ff31 	bl	20dc4 <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   24f62:	2322      	movs	r3, #34	; 0x22
   24f64:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   24f66:	f04f 30ff 	mov.w	r0, #4294967295
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   24f6a:	b947      	cbnz	r7, 24f7e <strtoul+0xd6>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   24f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   24f70:	f1be 0f00 	cmp.w	lr, #0
   24f74:	d000      	beq.n	24f78 <strtoul+0xd0>
		acc = -acc;
   24f76:	4240      	negs	r0, r0
	if (endptr != NULL) {
   24f78:	2f00      	cmp	r7, #0
   24f7a:	d0f7      	beq.n	24f6c <strtoul+0xc4>
		*endptr = (char *)(any ? s - 1 : nptr);
   24f7c:	b10e      	cbz	r6, 24f82 <strtoul+0xda>
   24f7e:	f104 3cff 	add.w	ip, r4, #4294967295
   24f82:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   24f86:	e7f1      	b.n	24f6c <strtoul+0xc4>
	if (base == 0) {
   24f88:	2330      	movs	r3, #48	; 0x30
   24f8a:	2a00      	cmp	r2, #0
   24f8c:	d1ae      	bne.n	24eec <strtoul+0x44>
		base = c == '0' ? 8 : 10;
   24f8e:	2208      	movs	r2, #8
   24f90:	e7ac      	b.n	24eec <strtoul+0x44>
	if ((base == 0 || base == 16) &&
   24f92:	2b30      	cmp	r3, #48	; 0x30
   24f94:	d0a2      	beq.n	24edc <strtoul+0x34>
		base = c == '0' ? 8 : 10;
   24f96:	220a      	movs	r2, #10
   24f98:	e7a8      	b.n	24eec <strtoul+0x44>

00024f9a <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   24f9a:	b084      	sub	sp, #16
   24f9c:	ab04      	add	r3, sp, #16
   24f9e:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   24fa2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   24fa6:	2b06      	cmp	r3, #6
   24fa8:	d108      	bne.n	24fbc <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   24faa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   24fae:	2201      	movs	r2, #1
   24fb0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   24fb4:	f3bf 8f4f 	dsb	sy
        __WFE();
   24fb8:	bf20      	wfe
    while (true)
   24fba:	e7fd      	b.n	24fb8 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   24fbc:	b004      	add	sp, #16
   24fbe:	4770      	bx	lr

00024fc0 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   24fc0:	b084      	sub	sp, #16
   24fc2:	ab04      	add	r3, sp, #16
   24fc4:	e903 0007 	stmdb	r3, {r0, r1, r2}
   24fc8:	2300      	movs	r3, #0
   24fca:	f383 8811 	msr	BASEPRI, r3
   24fce:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   24fd2:	b004      	add	sp, #16
   24fd4:	4770      	bx	lr

00024fd6 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   24fd6:	b530      	push	{r4, r5, lr}
   24fd8:	b085      	sub	sp, #20
   24fda:	4604      	mov	r4, r0
   24fdc:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   24fde:	4668      	mov	r0, sp
   24fe0:	2203      	movs	r2, #3
   24fe2:	f7ff ff4d 	bl	24e80 <memcpy>
	(void)memset(res + 3, 0, 13);
   24fe6:	220d      	movs	r2, #13
   24fe8:	2100      	movs	r1, #0
   24fea:	f10d 0003 	add.w	r0, sp, #3
   24fee:	f7ff ff52 	bl	24e96 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   24ff2:	4620      	mov	r0, r4
   24ff4:	466a      	mov	r2, sp
   24ff6:	4669      	mov	r1, sp
   24ff8:	f002 fdef 	bl	27bda <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   24ffc:	4604      	mov	r4, r0
   24ffe:	b920      	cbnz	r0, 2500a <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   25000:	2203      	movs	r2, #3
   25002:	4669      	mov	r1, sp
   25004:	4628      	mov	r0, r5
   25006:	f7ff ff3b 	bl	24e80 <memcpy>

	return 0;
}
   2500a:	4620      	mov	r0, r4
   2500c:	b005      	add	sp, #20
   2500e:	bd30      	pop	{r4, r5, pc}

00025010 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   25010:	b513      	push	{r0, r1, r4, lr}
   25012:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   25014:	aa01      	add	r2, sp, #4
   25016:	3103      	adds	r1, #3
   25018:	f7ff ffdd 	bl	24fd6 <ah>
	if (err) {
   2501c:	b948      	cbnz	r0, 25032 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   2501e:	2203      	movs	r2, #3
   25020:	a901      	add	r1, sp, #4
   25022:	4620      	mov	r0, r4
   25024:	f7ff ff1c 	bl	24e60 <memcmp>
   25028:	fab0 f080 	clz	r0, r0
   2502c:	0940      	lsrs	r0, r0, #5
}
   2502e:	b002      	add	sp, #8
   25030:	bd10      	pop	{r4, pc}
		return false;
   25032:	2000      	movs	r0, #0
   25034:	e7fb      	b.n	2502e <bt_rpa_irk_matches+0x1e>

00025036 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   25036:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   25038:	1cce      	adds	r6, r1, #3
{
   2503a:	4605      	mov	r5, r0
   2503c:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   2503e:	4630      	mov	r0, r6
   25040:	2103      	movs	r1, #3
   25042:	f7f9 fed5 	bl	1edf0 <bt_rand>
	if (err) {
   25046:	b960      	cbnz	r0, 25062 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   25048:	7963      	ldrb	r3, [r4, #5]
   2504a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2504e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   25052:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   25054:	4622      	mov	r2, r4
   25056:	4631      	mov	r1, r6
   25058:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   2505a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   2505e:	f7ff bfba 	b.w	24fd6 <ah>
}
   25062:	bd70      	pop	{r4, r5, r6, pc}

00025064 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   25064:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   25066:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   25068:	2106      	movs	r1, #6
{
   2506a:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   2506c:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   25070:	f7f9 febe 	bl	1edf0 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   25074:	b918      	cbnz	r0, 2507e <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   25076:	79a3      	ldrb	r3, [r4, #6]
   25078:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2507c:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   2507e:	bd10      	pop	{r4, pc}

00025080 <get_adv_channel_map>:
{
   25080:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   25082:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   25086:	bf0c      	ite	eq
   25088:	2007      	moveq	r0, #7
   2508a:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   2508c:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   2508e:	bf48      	it	mi
   25090:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   25094:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   25096:	bf48      	it	mi
   25098:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   2509c:	4770      	bx	lr

0002509e <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2509e:	f3bf 8f5b 	dmb	ish
   250a2:	6800      	ldr	r0, [r0, #0]
   250a4:	f3bf 8f5b 	dmb	ish
}
   250a8:	4770      	bx	lr

000250aa <atomic_and>:
{
   250aa:	4603      	mov	r3, r0
}
   250ac:	f3bf 8f5b 	dmb	ish
   250b0:	e853 0f00 	ldrex	r0, [r3]
   250b4:	ea00 0201 	and.w	r2, r0, r1
   250b8:	e843 2c00 	strex	ip, r2, [r3]
   250bc:	f1bc 0f00 	cmp.w	ip, #0
   250c0:	d1f6      	bne.n	250b0 <atomic_and+0x6>
   250c2:	f3bf 8f5b 	dmb	ish
   250c6:	4770      	bx	lr

000250c8 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   250c8:	2301      	movs	r3, #1
{
   250ca:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   250cc:	fa03 f101 	lsl.w	r1, r3, r1
{
   250d0:	4604      	mov	r4, r0
	if (val) {
   250d2:	b162      	cbz	r2, 250ee <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   250d4:	f3bf 8f5b 	dmb	ish
   250d8:	e854 3f00 	ldrex	r3, [r4]
   250dc:	430b      	orrs	r3, r1
   250de:	e844 3200 	strex	r2, r3, [r4]
   250e2:	2a00      	cmp	r2, #0
   250e4:	d1f8      	bne.n	250d8 <atomic_set_bit_to+0x10>
   250e6:	f3bf 8f5b 	dmb	ish
	}
}
   250ea:	bc10      	pop	{r4}
   250ec:	4770      	bx	lr
   250ee:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   250f0:	43c9      	mvns	r1, r1
   250f2:	f7ff bfda 	b.w	250aa <atomic_and>

000250f6 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   250f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   250fa:	b087      	sub	sp, #28
   250fc:	4605      	mov	r5, r0
   250fe:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   25102:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   25106:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   2510a:	460c      	mov	r4, r1
   2510c:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   2510e:	2100      	movs	r1, #0
   25110:	2210      	movs	r2, #16
   25112:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   25114:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   25116:	f7ff febe 	bl	24e96 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   2511a:	b186      	cbz	r6, 2513e <le_adv_update.constprop.0+0x48>
		const char *name = bt_get_name();
   2511c:	f7f4 fcb4 	bl	19a88 <bt_get_name>
   25120:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   25122:	2c00      	cmp	r4, #0
   25124:	d139      	bne.n	2519a <le_adv_update.constprop.0+0xa4>
   25126:	2f00      	cmp	r7, #0
   25128:	d142      	bne.n	251b0 <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   2512a:	4658      	mov	r0, fp
   2512c:	f7ff fe6d 	bl	24e0a <strlen>
   25130:	2309      	movs	r3, #9
   25132:	f88d 3000 	strb.w	r3, [sp]
   25136:	f88d 0001 	strb.w	r0, [sp, #1]
   2513a:	f8cd b004 	str.w	fp, [sp, #4]
		if (name_type == ADV_NAME_TYPE_AD) {
   2513e:	2e01      	cmp	r6, #1
			d_len = 2;
   25140:	bf0c      	ite	eq
   25142:	2202      	moveq	r2, #2
		d_len = 1;
   25144:	2201      	movne	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   25146:	a902      	add	r1, sp, #8
   25148:	f242 0008 	movw	r0, #8200	; 0x2008
		d[0].len = ad_len;
   2514c:	e9cd 4802 	strd	r4, r8, [sp, #8]
			d[1].data = &data;
   25150:	bf04      	itt	eq
   25152:	f8cd d010 	streq.w	sp, [sp, #16]
			d[1].len = 1;
   25156:	9605      	streq	r6, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   25158:	f7ef fa06 	bl	14568 <hci_set_ad>
		if (err) {
   2515c:	4604      	mov	r4, r0
   2515e:	b978      	cbnz	r0, 25180 <le_adv_update.constprop.0+0x8a>
	if (scannable) {
   25160:	f1ba 0f00 	cmp.w	sl, #0
   25164:	d126      	bne.n	251b4 <le_adv_update.constprop.0+0xbe>
   25166:	3510      	adds	r5, #16
   25168:	f3bf 8f5b 	dmb	ish
   2516c:	e855 3f00 	ldrex	r3, [r5]
   25170:	f043 0304 	orr.w	r3, r3, #4
   25174:	e845 3200 	strex	r2, r3, [r5]
   25178:	2a00      	cmp	r2, #0
   2517a:	d1f7      	bne.n	2516c <le_adv_update.constprop.0+0x76>
   2517c:	f3bf 8f5b 	dmb	ish
}
   25180:	4620      	mov	r0, r4
   25182:	b007      	add	sp, #28
   25184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   25188:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   2518c:	3a08      	subs	r2, #8
   2518e:	2a01      	cmp	r2, #1
   25190:	d925      	bls.n	251de <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   25192:	3301      	adds	r3, #1
   25194:	4598      	cmp	r8, r3
   25196:	d1f7      	bne.n	25188 <le_adv_update.constprop.0+0x92>
   25198:	e7c5      	b.n	25126 <le_adv_update.constprop.0+0x30>
   2519a:	2300      	movs	r3, #0
   2519c:	e7fa      	b.n	25194 <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2519e:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   251a2:	3a08      	subs	r2, #8
   251a4:	2a01      	cmp	r2, #1
   251a6:	d91a      	bls.n	251de <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   251a8:	3301      	adds	r3, #1
   251aa:	4599      	cmp	r9, r3
   251ac:	d1f7      	bne.n	2519e <le_adv_update.constprop.0+0xa8>
   251ae:	e7bc      	b.n	2512a <le_adv_update.constprop.0+0x34>
   251b0:	2300      	movs	r3, #0
   251b2:	e7fa      	b.n	251aa <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   251b4:	2e02      	cmp	r6, #2
   251b6:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   251ba:	bf08      	it	eq
   251bc:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   251be:	a902      	add	r1, sp, #8
			d_len = 2;
   251c0:	bf08      	it	eq
   251c2:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   251c4:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   251c8:	bf08      	it	eq
   251ca:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   251ce:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   251d2:	f7ef f9c9 	bl	14568 <hci_set_ad>
		if (err) {
   251d6:	2800      	cmp	r0, #0
   251d8:	d0c5      	beq.n	25166 <le_adv_update.constprop.0+0x70>
   251da:	4604      	mov	r4, r0
   251dc:	e7d0      	b.n	25180 <le_adv_update.constprop.0+0x8a>
			return -EINVAL;
   251de:	f06f 0415 	mvn.w	r4, #21
   251e2:	e7cd      	b.n	25180 <le_adv_update.constprop.0+0x8a>

000251e4 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   251e4:	6843      	ldr	r3, [r0, #4]
   251e6:	f013 0008 	ands.w	r0, r3, #8
   251ea:	d00a      	beq.n	25202 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   251ec:	035a      	lsls	r2, r3, #13
   251ee:	d407      	bmi.n	25200 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   251f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
   251f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		return ADV_NAME_TYPE_SD;
   251f8:	bf0c      	ite	eq
   251fa:	2001      	moveq	r0, #1
   251fc:	2002      	movne	r0, #2
   251fe:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   25200:	2001      	movs	r0, #1
}
   25202:	4770      	bx	lr

00025204 <bt_le_adv_set_enable_legacy>:
{
   25204:	b570      	push	{r4, r5, r6, lr}
   25206:	4606      	mov	r6, r0
   25208:	b086      	sub	sp, #24
   2520a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   2520c:	f242 000a 	movw	r0, #8202	; 0x200a
   25210:	2101      	movs	r1, #1
   25212:	f7f3 fddf 	bl	18dd4 <bt_hci_cmd_create>
	if (!buf) {
   25216:	4604      	mov	r4, r0
   25218:	b1b0      	cbz	r0, 25248 <bt_le_adv_set_enable_legacy+0x44>
	if (enable) {
   2521a:	3008      	adds	r0, #8
   2521c:	b195      	cbz	r5, 25244 <bt_le_adv_set_enable_legacy+0x40>
	return net_buf_simple_add_u8(&buf->b, val);
   2521e:	2101      	movs	r1, #1
   25220:	f001 fff9 	bl	27216 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   25224:	f106 0210 	add.w	r2, r6, #16
   25228:	a903      	add	r1, sp, #12
   2522a:	4620      	mov	r0, r4
   2522c:	9500      	str	r5, [sp, #0]
   2522e:	2306      	movs	r3, #6
   25230:	f7f3 fdbe 	bl	18db0 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   25234:	2200      	movs	r2, #0
   25236:	4621      	mov	r1, r4
   25238:	f242 000a 	movw	r0, #8202	; 0x200a
   2523c:	f7f3 ff26 	bl	1908c <bt_hci_cmd_send_sync>
}
   25240:	b006      	add	sp, #24
   25242:	bd70      	pop	{r4, r5, r6, pc}
   25244:	4629      	mov	r1, r5
   25246:	e7eb      	b.n	25220 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   25248:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2524c:	e7f8      	b.n	25240 <bt_le_adv_set_enable_legacy+0x3c>

0002524e <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   2524e:	f7ff bfd9 	b.w	25204 <bt_le_adv_set_enable_legacy>

00025252 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   25252:	3018      	adds	r0, #24
   25254:	f003 bb27 	b.w	288a6 <k_work_cancel_delayable>

00025258 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   25258:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   2525a:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2525c:	b128      	cbz	r0, 2526a <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2525e:	6859      	ldr	r1, [r3, #4]
   25260:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   25262:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   25264:	4288      	cmp	r0, r1
	list->tail = node;
   25266:	bf08      	it	eq
   25268:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2526a:	4770      	bx	lr

0002526c <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2526c:	4603      	mov	r3, r0
   2526e:	6800      	ldr	r0, [r0, #0]
   25270:	2200      	movs	r2, #0
   25272:	b900      	cbnz	r0, 25276 <sys_slist_find_and_remove+0xa>
   25274:	4770      	bx	lr
   25276:	4288      	cmp	r0, r1
   25278:	d110      	bne.n	2529c <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   2527a:	6808      	ldr	r0, [r1, #0]
   2527c:	b942      	cbnz	r2, 25290 <sys_slist_find_and_remove+0x24>
   2527e:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   25280:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   25282:	4291      	cmp	r1, r2
   25284:	d100      	bne.n	25288 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   25286:	6058      	str	r0, [r3, #4]
	parent->next = child;
   25288:	2300      	movs	r3, #0
   2528a:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2528c:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   2528e:	4770      	bx	lr
	parent->next = child;
   25290:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   25292:	6858      	ldr	r0, [r3, #4]
   25294:	4281      	cmp	r1, r0
	list->tail = node;
   25296:	bf08      	it	eq
   25298:	605a      	streq	r2, [r3, #4]
}
   2529a:	e7f5      	b.n	25288 <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2529c:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2529e:	6800      	ldr	r0, [r0, #0]
   252a0:	e7e7      	b.n	25272 <sys_slist_find_and_remove+0x6>

000252a2 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   252a2:	4603      	mov	r3, r0
	size_t bytes = 0;
   252a4:	2000      	movs	r0, #0

	while (buf) {
   252a6:	b903      	cbnz	r3, 252aa <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   252a8:	4770      	bx	lr
		bytes += buf->len;
   252aa:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   252ac:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   252ae:	4410      	add	r0, r2
		buf = buf->frags;
   252b0:	e7f9      	b.n	252a6 <net_buf_frags_len+0x4>

000252b2 <att_sent>:
	if (chan->ops->sent) {
   252b2:	684b      	ldr	r3, [r1, #4]
   252b4:	695b      	ldr	r3, [r3, #20]
{
   252b6:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   252b8:	b103      	cbz	r3, 252bc <att_sent+0xa>
		chan->ops->sent(chan);
   252ba:	4718      	bx	r3
}
   252bc:	4770      	bx	lr

000252be <attr_read_type_cb>:
{
   252be:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   252c0:	68d4      	ldr	r4, [r2, #12]
   252c2:	7823      	ldrb	r3, [r4, #0]
   252c4:	3102      	adds	r1, #2
   252c6:	b913      	cbnz	r3, 252ce <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   252c8:	7021      	strb	r1, [r4, #0]
	return true;
   252ca:	2001      	movs	r0, #1
   252cc:	e006      	b.n	252dc <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   252ce:	428b      	cmp	r3, r1
   252d0:	d0fb      	beq.n	252ca <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   252d2:	8983      	ldrh	r3, [r0, #12]
   252d4:	3b02      	subs	r3, #2
   252d6:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   252d8:	2000      	movs	r0, #0
   252da:	6110      	str	r0, [r2, #16]
}
   252dc:	bd10      	pop	{r4, pc}

000252de <att_op_get_type>:
	switch (op) {
   252de:	281e      	cmp	r0, #30
   252e0:	d816      	bhi.n	25310 <att_op_get_type+0x32>
   252e2:	b308      	cbz	r0, 25328 <att_op_get_type+0x4a>
   252e4:	1e43      	subs	r3, r0, #1
   252e6:	2b1d      	cmp	r3, #29
   252e8:	d81e      	bhi.n	25328 <att_op_get_type+0x4a>
   252ea:	e8df f003 	tbb	[pc, r3]
   252ee:	2317      	.short	0x2317
   252f0:	23172317 	.word	0x23172317
   252f4:	23172317 	.word	0x23172317
   252f8:	23172317 	.word	0x23172317
   252fc:	23172317 	.word	0x23172317
   25300:	231d1d17 	.word	0x231d1d17
   25304:	1d172317 	.word	0x1d172317
   25308:	0f1b1d19 	.word	0x0f1b1d19
   2530c:	2004      	movs	r0, #4
   2530e:	4770      	bx	lr
   25310:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   25314:	2b52      	cmp	r3, #82	; 0x52
   25316:	d107      	bne.n	25328 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   25318:	2000      	movs	r0, #0
}
   2531a:	4770      	bx	lr
		return ATT_RESPONSE;
   2531c:	2002      	movs	r0, #2
   2531e:	4770      	bx	lr
		return ATT_NOTIFICATION;
   25320:	2003      	movs	r0, #3
   25322:	4770      	bx	lr
		return ATT_INDICATION;
   25324:	2005      	movs	r0, #5
   25326:	4770      	bx	lr
		return ATT_COMMAND;
   25328:	f010 0f40 	tst.w	r0, #64	; 0x40
   2532c:	bf0c      	ite	eq
   2532e:	2006      	moveq	r0, #6
   25330:	2000      	movne	r0, #0
   25332:	4770      	bx	lr
		return ATT_REQUEST;
   25334:	2001      	movs	r0, #1
   25336:	4770      	bx	lr

00025338 <chan_req_send>:
{
   25338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2533a:	688f      	ldr	r7, [r1, #8]
{
   2533c:	4604      	mov	r4, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2533e:	4638      	mov	r0, r7
{
   25340:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   25342:	f7ff ffae 	bl	252a2 <net_buf_frags_len>
   25346:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
   2534a:	4283      	cmp	r3, r0
   2534c:	d30d      	bcc.n	2536a <chan_req_send+0x32>
	req->buf = NULL;
   2534e:	2600      	movs	r6, #0
	chan->req = req;
   25350:	f8c4 10f4 	str.w	r1, [r4, #244]	; 0xf4
	err = chan_send(chan, buf, NULL);
   25354:	4632      	mov	r2, r6
	req->buf = NULL;
   25356:	608e      	str	r6, [r1, #8]
	err = chan_send(chan, buf, NULL);
   25358:	4620      	mov	r0, r4
   2535a:	4639      	mov	r1, r7
   2535c:	f7ef fc00 	bl	14b60 <chan_send>
	if (err) {
   25360:	b110      	cbz	r0, 25368 <chan_req_send+0x30>
		req->buf = buf;
   25362:	60af      	str	r7, [r5, #8]
		chan->req = NULL;
   25364:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
}
   25368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   2536a:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2536e:	e7fb      	b.n	25368 <chan_req_send+0x30>

00025370 <process_queue>:
{
   25370:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   25372:	2200      	movs	r2, #0
{
   25374:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   25376:	2300      	movs	r3, #0
   25378:	4608      	mov	r0, r1
{
   2537a:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   2537c:	f001 fea2 	bl	270c4 <net_buf_get>
	if (buf) {
   25380:	4605      	mov	r5, r0
   25382:	b160      	cbz	r0, 2539e <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   25384:	4601      	mov	r1, r0
   25386:	2200      	movs	r2, #0
   25388:	4620      	mov	r0, r4
   2538a:	f7ef fbe9 	bl	14b60 <chan_send>
		if (err) {
   2538e:	4604      	mov	r4, r0
   25390:	b118      	cbz	r0, 2539a <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   25392:	4629      	mov	r1, r5
   25394:	4630      	mov	r0, r6
   25396:	f002 ffd8 	bl	2834a <k_queue_prepend>
}
   2539a:	4620      	mov	r0, r4
   2539c:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   2539e:	f06f 0401 	mvn.w	r4, #1
   253a2:	e7fa      	b.n	2539a <process_queue+0x2a>

000253a4 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   253a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   253a6:	e9cd 2301 	strd	r2, r3, [sp, #4]
   253aa:	2300      	movs	r3, #0
   253ac:	9300      	str	r3, [sp, #0]
   253ae:	461a      	mov	r2, r3
   253b0:	f7f2 f9ea 	bl	17788 <bt_gatt_foreach_attr_type>
				  user_data);
}
   253b4:	b005      	add	sp, #20
   253b6:	f85d fb04 	ldr.w	pc, [sp], #4

000253ba <find_info_cb>:
{
   253ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   253bc:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   253be:	6817      	ldr	r7, [r2, #0]
{
   253c0:	4605      	mov	r5, r0
   253c2:	460e      	mov	r6, r1
   253c4:	4614      	mov	r4, r2
	if (!data->rsp) {
   253c6:	b963      	cbnz	r3, 253e2 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   253c8:	6850      	ldr	r0, [r2, #4]
   253ca:	2101      	movs	r1, #1
   253cc:	3008      	adds	r0, #8
   253ce:	f001 ff13 	bl	271f8 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   253d2:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   253d4:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   253d6:	781b      	ldrb	r3, [r3, #0]
   253d8:	2b00      	cmp	r3, #0
   253da:	bf0c      	ite	eq
   253dc:	2301      	moveq	r3, #1
   253de:	2302      	movne	r3, #2
   253e0:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   253e2:	68a3      	ldr	r3, [r4, #8]
   253e4:	781b      	ldrb	r3, [r3, #0]
   253e6:	2b01      	cmp	r3, #1
   253e8:	d003      	beq.n	253f2 <find_info_cb+0x38>
   253ea:	2b02      	cmp	r3, #2
   253ec:	d019      	beq.n	25422 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   253ee:	2000      	movs	r0, #0
   253f0:	e016      	b.n	25420 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   253f2:	682b      	ldr	r3, [r5, #0]
   253f4:	781b      	ldrb	r3, [r3, #0]
   253f6:	2b00      	cmp	r3, #0
   253f8:	d1f9      	bne.n	253ee <find_info_cb+0x34>
   253fa:	6860      	ldr	r0, [r4, #4]
   253fc:	2104      	movs	r1, #4
   253fe:	3008      	adds	r0, #8
   25400:	f001 fefa 	bl	271f8 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   25404:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   25406:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   25408:	885b      	ldrh	r3, [r3, #2]
   2540a:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2540c:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   2540e:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   25410:	899b      	ldrh	r3, [r3, #12]
   25412:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   25416:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   25418:	2804      	cmp	r0, #4
   2541a:	bf94      	ite	ls
   2541c:	2000      	movls	r0, #0
   2541e:	2001      	movhi	r0, #1
}
   25420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   25422:	682b      	ldr	r3, [r5, #0]
   25424:	781b      	ldrb	r3, [r3, #0]
   25426:	2b02      	cmp	r3, #2
   25428:	d1e1      	bne.n	253ee <find_info_cb+0x34>
   2542a:	6860      	ldr	r0, [r4, #4]
   2542c:	2112      	movs	r1, #18
   2542e:	3008      	adds	r0, #8
   25430:	f001 fee2 	bl	271f8 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   25434:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   25436:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   25438:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   2543a:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2543e:	3101      	adds	r1, #1
   25440:	f7ff fd1e 	bl	24e80 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   25444:	6863      	ldr	r3, [r4, #4]
   25446:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   2544a:	899b      	ldrh	r3, [r3, #12]
   2544c:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   2544e:	2812      	cmp	r0, #18
   25450:	e7e3      	b.n	2541a <find_info_cb+0x60>

00025452 <att_chan_mtu_updated>:
{
   25452:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   25454:	6806      	ldr	r6, [r0, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25456:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   25458:	b30a      	cbz	r2, 2549e <att_chan_mtu_updated+0x4c>
   2545a:	f5b2 74a2 	subs.w	r4, r2, #324	; 0x144
   2545e:	d01d      	beq.n	2549c <att_chan_mtu_updated+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   25460:	6813      	ldr	r3, [r2, #0]
   25462:	b10b      	cbz	r3, 25468 <att_chan_mtu_updated+0x16>
   25464:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   25468:	2200      	movs	r2, #0
   2546a:	4611      	mov	r1, r2
		if (chan == updated_chan) {
   2546c:	42a0      	cmp	r0, r4
   2546e:	d009      	beq.n	25484 <att_chan_mtu_updated+0x32>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   25470:	f8b4 508a 	ldrh.w	r5, [r4, #138]	; 0x8a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   25474:	f8b4 407a 	ldrh.w	r4, [r4, #122]	; 0x7a
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   25478:	42a9      	cmp	r1, r5
   2547a:	bf38      	it	cc
   2547c:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2547e:	42a2      	cmp	r2, r4
   25480:	bf38      	it	cc
   25482:	4622      	movcc	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25484:	b163      	cbz	r3, 254a0 <att_chan_mtu_updated+0x4e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25486:	f513 75a2 	adds.w	r5, r3, #324	; 0x144
   2548a:	d004      	beq.n	25496 <att_chan_mtu_updated+0x44>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2548c:	f8d3 5144 	ldr.w	r5, [r3, #324]	; 0x144
   25490:	b10d      	cbz	r5, 25496 <att_chan_mtu_updated+0x44>
   25492:	f5a5 75a2 	sub.w	r5, r5, #324	; 0x144
{
   25496:	461c      	mov	r4, r3
   25498:	462b      	mov	r3, r5
   2549a:	e7e7      	b.n	2546c <att_chan_mtu_updated+0x1a>
   2549c:	4622      	mov	r2, r4
   2549e:	4611      	mov	r1, r2
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   254a0:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   254a4:	f8b0 007a 	ldrh.w	r0, [r0, #122]	; 0x7a
   254a8:	428b      	cmp	r3, r1
   254aa:	d801      	bhi.n	254b0 <att_chan_mtu_updated+0x5e>
   254ac:	4290      	cmp	r0, r2
   254ae:	d909      	bls.n	254c4 <att_chan_mtu_updated+0x72>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   254b0:	4282      	cmp	r2, r0
   254b2:	bf38      	it	cc
   254b4:	4602      	movcc	r2, r0
   254b6:	4299      	cmp	r1, r3
   254b8:	6830      	ldr	r0, [r6, #0]
   254ba:	bf38      	it	cc
   254bc:	4619      	movcc	r1, r3
}
   254be:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   254c0:	f7f2 bdde 	b.w	18080 <bt_gatt_att_max_mtu_changed>
}
   254c4:	bc70      	pop	{r4, r5, r6}
   254c6:	4770      	bx	lr

000254c8 <attr_read_group_cb>:
	if (!data->rsp->len) {
   254c8:	68d0      	ldr	r0, [r2, #12]
   254ca:	7803      	ldrb	r3, [r0, #0]
   254cc:	3104      	adds	r1, #4
   254ce:	b913      	cbnz	r3, 254d6 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   254d0:	7001      	strb	r1, [r0, #0]
	return true;
   254d2:	2001      	movs	r0, #1
}
   254d4:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   254d6:	428b      	cmp	r3, r1
   254d8:	d0fb      	beq.n	254d2 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   254da:	6891      	ldr	r1, [r2, #8]
   254dc:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   254de:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   254e0:	3b04      	subs	r3, #4
   254e2:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   254e4:	6110      	str	r0, [r2, #16]
		return false;
   254e6:	4770      	bx	lr

000254e8 <chan_req_sent>:
	if (chan->req) {
   254e8:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   254ec:	b133      	cbz	r3, 254fc <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   254ee:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   254f2:	2300      	movs	r3, #0
   254f4:	f500 7088 	add.w	r0, r0, #272	; 0x110
   254f8:	f7fd b800 	b.w	224fc <k_work_reschedule>
}
   254fc:	4770      	bx	lr

000254fe <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   254fe:	30f0      	adds	r0, #240	; 0xf0
   25500:	f3bf 8f5b 	dmb	ish
   25504:	e850 3f00 	ldrex	r3, [r0]
   25508:	f023 0301 	bic.w	r3, r3, #1
   2550c:	e840 3200 	strex	r2, r3, [r0]
   25510:	2a00      	cmp	r2, #0
   25512:	d1f7      	bne.n	25504 <chan_rsp_sent+0x6>
   25514:	f3bf 8f5b 	dmb	ish
}
   25518:	4770      	bx	lr

0002551a <chan_cfm_sent>:
   2551a:	30f0      	adds	r0, #240	; 0xf0
   2551c:	f3bf 8f5b 	dmb	ish
   25520:	e850 3f00 	ldrex	r3, [r0]
   25524:	f023 0302 	bic.w	r3, r3, #2
   25528:	e840 3200 	strex	r2, r3, [r0]
   2552c:	2a00      	cmp	r2, #0
   2552e:	d1f7      	bne.n	25520 <chan_cfm_sent+0x6>
   25530:	f3bf 8f5b 	dmb	ish
}
   25534:	4770      	bx	lr

00025536 <att_chan_read>:
{
   25536:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2553a:	4680      	mov	r8, r0
   2553c:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2553e:	4610      	mov	r0, r2
{
   25540:	4699      	mov	r9, r3
   25542:	468b      	mov	fp, r1
   25544:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   25546:	f7ff feac 	bl	252a2 <net_buf_frags_len>
   2554a:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   2554e:	4283      	cmp	r3, r0
   25550:	d97a      	bls.n	25648 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   25552:	f8d8 3008 	ldr.w	r3, [r8, #8]
   25556:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   25558:	4630      	mov	r0, r6
   2555a:	f001 fe2b 	bl	271b4 <net_buf_frag_last>
	size_t len, total = 0;
   2555e:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   25562:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   25564:	4630      	mov	r0, r6
   25566:	f7ff fe9c 	bl	252a2 <net_buf_frags_len>
   2556a:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   2556e:	f105 0708 	add.w	r7, r5, #8
   25572:	1a24      	subs	r4, r4, r0
   25574:	4638      	mov	r0, r7
   25576:	f001 fe7a 	bl	2726e <net_buf_simple_tailroom>
   2557a:	4284      	cmp	r4, r0
   2557c:	d211      	bcs.n	255a2 <att_chan_read+0x6c>
   2557e:	4630      	mov	r0, r6
   25580:	f7ff fe8f 	bl	252a2 <net_buf_frags_len>
   25584:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   25588:	1a24      	subs	r4, r4, r0
		if (!len) {
   2558a:	bb34      	cbnz	r4, 255da <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2558c:	79b0      	ldrb	r0, [r6, #6]
   2558e:	f7f7 fce7 	bl	1cf60 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   25592:	2200      	movs	r2, #0
   25594:	2300      	movs	r3, #0
   25596:	f001 fd90 	bl	270ba <net_buf_alloc_fixed>
			if (!frag) {
   2559a:	4605      	mov	r5, r0
   2559c:	b930      	cbnz	r0, 255ac <att_chan_read+0x76>
	return total;
   2559e:	4657      	mov	r7, sl
   255a0:	e02c      	b.n	255fc <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   255a2:	4638      	mov	r0, r7
   255a4:	f001 fe63 	bl	2726e <net_buf_simple_tailroom>
   255a8:	4604      	mov	r4, r0
   255aa:	e7ee      	b.n	2558a <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   255ac:	4601      	mov	r1, r0
   255ae:	4630      	mov	r0, r6
   255b0:	f001 fe11 	bl	271d6 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   255b4:	4630      	mov	r0, r6
   255b6:	f7ff fe74 	bl	252a2 <net_buf_frags_len>
   255ba:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   255be:	f105 0708 	add.w	r7, r5, #8
   255c2:	1a24      	subs	r4, r4, r0
   255c4:	4638      	mov	r0, r7
   255c6:	f001 fe52 	bl	2726e <net_buf_simple_tailroom>
   255ca:	4284      	cmp	r4, r0
   255cc:	d21a      	bcs.n	25604 <att_chan_read+0xce>
   255ce:	4630      	mov	r0, r6
   255d0:	f7ff fe67 	bl	252a2 <net_buf_frags_len>
   255d4:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   255d8:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   255da:	68a9      	ldr	r1, [r5, #8]
   255dc:	89aa      	ldrh	r2, [r5, #12]
   255de:	f8db 7004 	ldr.w	r7, [fp, #4]
   255e2:	9803      	ldr	r0, [sp, #12]
   255e4:	f8cd 9000 	str.w	r9, [sp]
   255e8:	440a      	add	r2, r1
   255ea:	b2a3      	uxth	r3, r4
   255ec:	4659      	mov	r1, fp
   255ee:	47b8      	blx	r7
		if (read < 0) {
   255f0:	1e07      	subs	r7, r0, #0
   255f2:	da0c      	bge.n	2560e <att_chan_read+0xd8>
				return total;
   255f4:	f1ba 0f00 	cmp.w	sl, #0
   255f8:	bf18      	it	ne
   255fa:	4657      	movne	r7, sl
}
   255fc:	4638      	mov	r0, r7
   255fe:	b005      	add	sp, #20
   25600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25604:	4638      	mov	r0, r7
   25606:	f001 fe32 	bl	2726e <net_buf_simple_tailroom>
   2560a:	4604      	mov	r4, r0
   2560c:	e7e5      	b.n	255da <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   2560e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   25610:	b993      	cbnz	r3, 25638 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   25612:	4639      	mov	r1, r7
   25614:	f105 0008 	add.w	r0, r5, #8
   25618:	f001 fdee 	bl	271f8 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2561c:	4630      	mov	r0, r6
   2561e:	f7ff fe40 	bl	252a2 <net_buf_frags_len>
   25622:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
		offset += read;
   25626:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   25628:	4283      	cmp	r3, r0
		total += read;
   2562a:	44ba      	add	sl, r7
		offset += read;
   2562c:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   25630:	d9b5      	bls.n	2559e <att_chan_read+0x68>
   25632:	42a7      	cmp	r7, r4
   25634:	d096      	beq.n	25564 <att_chan_read+0x2e>
   25636:	e7b2      	b.n	2559e <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   25638:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2563a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2563c:	4639      	mov	r1, r7
   2563e:	4628      	mov	r0, r5
   25640:	4798      	blx	r3
   25642:	2800      	cmp	r0, #0
   25644:	d1e5      	bne.n	25612 <att_chan_read+0xdc>
   25646:	e7aa      	b.n	2559e <att_chan_read+0x68>
		return 0;
   25648:	2700      	movs	r7, #0
   2564a:	e7d7      	b.n	255fc <att_chan_read+0xc6>

0002564c <bt_att_status>:
{
   2564c:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2564e:	f3bf 8f5b 	dmb	ish
   25652:	680b      	ldr	r3, [r1, #0]
   25654:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   25658:	07db      	lsls	r3, r3, #31
{
   2565a:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2565c:	d519      	bpl.n	25692 <bt_att_status+0x46>
	if (!chan->att) {
   2565e:	f850 0c08 	ldr.w	r0, [r0, #-8]
   25662:	b1b0      	cbz	r0, 25692 <bt_att_status+0x46>
	if (chan->req) {
   25664:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   25668:	b99b      	cbnz	r3, 25692 <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   2566a:	3004      	adds	r0, #4
   2566c:	f7ff fdf4 	bl	25258 <sys_slist_get>
	if (!node) {
   25670:	4604      	mov	r4, r0
   25672:	b170      	cbz	r0, 25692 <bt_att_status+0x46>
	return chan_req_send(chan, req);
   25674:	4601      	mov	r1, r0
   25676:	f1a5 0008 	sub.w	r0, r5, #8
   2567a:	f7ff fe5d 	bl	25338 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2567e:	2800      	cmp	r0, #0
   25680:	da07      	bge.n	25692 <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   25682:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   25686:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   25688:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   2568a:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2568c:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2568e:	b902      	cbnz	r2, 25692 <bt_att_status+0x46>
	list->tail = node;
   25690:	609c      	str	r4, [r3, #8]
}
   25692:	bd38      	pop	{r3, r4, r5, pc}

00025694 <att_req_send_process>:
{
   25694:	b570      	push	{r4, r5, r6, lr}
   25696:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   25698:	3004      	adds	r0, #4
   2569a:	f7ff fddd 	bl	25258 <sys_slist_get>
	if (!node) {
   2569e:	4606      	mov	r6, r0
   256a0:	b1c0      	cbz	r0, 256d4 <att_req_send_process+0x40>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   256a2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   256a4:	b153      	cbz	r3, 256bc <att_req_send_process+0x28>
   256a6:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   256aa:	d007      	beq.n	256bc <att_req_send_process+0x28>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   256ac:	681c      	ldr	r4, [r3, #0]
   256ae:	b10c      	cbz	r4, 256b4 <att_req_send_process+0x20>
   256b0:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
		if (!chan->req) {
   256b4:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   256b8:	b13b      	cbz	r3, 256ca <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   256ba:	b964      	cbnz	r4, 256d6 <att_req_send_process+0x42>
Z_GENLIST_PREPEND(slist, snode)
   256bc:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   256be:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   256c0:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   256c2:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   256c4:	b933      	cbnz	r3, 256d4 <att_req_send_process+0x40>
	list->tail = node;
   256c6:	60ae      	str	r6, [r5, #8]
}
   256c8:	e004      	b.n	256d4 <att_req_send_process+0x40>
	return chan_req_send(chan, req);
   256ca:	4631      	mov	r1, r6
   256cc:	f7ff fe34 	bl	25338 <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   256d0:	2800      	cmp	r0, #0
   256d2:	dbf2      	blt.n	256ba <att_req_send_process+0x26>
}
   256d4:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   256d6:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   256da:	d004      	beq.n	256e6 <att_req_send_process+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   256dc:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   256e0:	b10b      	cbz	r3, 256e6 <att_req_send_process+0x52>
   256e2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   256e6:	4620      	mov	r0, r4
   256e8:	461c      	mov	r4, r3
   256ea:	e7e3      	b.n	256b4 <att_req_send_process+0x20>

000256ec <write_cb>:
{
   256ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   256ee:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   256f0:	4601      	mov	r1, r0
{
   256f2:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   256f4:	222a      	movs	r2, #42	; 0x2a
   256f6:	6820      	ldr	r0, [r4, #0]
   256f8:	f000 fd7d 	bl	261f6 <bt_gatt_check_perm>
   256fc:	4605      	mov	r5, r0
   256fe:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   25700:	bb20      	cbnz	r0, 2574c <write_cb+0x60>
	if (!data->req) {
   25702:	7a23      	ldrb	r3, [r4, #8]
   25704:	b1ab      	cbz	r3, 25732 <write_cb+0x46>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   25706:	2b18      	cmp	r3, #24
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   25708:	bf14      	ite	ne
   2570a:	2300      	movne	r3, #0
   2570c:	2304      	moveq	r3, #4
	write = attr->write(data->conn, attr, data->value, data->len,
   2570e:	9301      	str	r3, [sp, #4]
   25710:	8a63      	ldrh	r3, [r4, #18]
   25712:	9300      	str	r3, [sp, #0]
   25714:	68b7      	ldr	r7, [r6, #8]
   25716:	8a23      	ldrh	r3, [r4, #16]
   25718:	68e2      	ldr	r2, [r4, #12]
   2571a:	6820      	ldr	r0, [r4, #0]
   2571c:	4631      	mov	r1, r6
   2571e:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   25720:	1e03      	subs	r3, r0, #0
   25722:	db08      	blt.n	25736 <write_cb+0x4a>
   25724:	8a22      	ldrh	r2, [r4, #16]
   25726:	4293      	cmp	r3, r2
   25728:	d10e      	bne.n	25748 <write_cb+0x5c>
	data->err = 0U;
   2572a:	2300      	movs	r3, #0
   2572c:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2572e:	2501      	movs	r5, #1
   25730:	e007      	b.n	25742 <write_cb+0x56>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   25732:	2302      	movs	r3, #2
   25734:	e7eb      	b.n	2570e <write_cb+0x22>
	if (err < 0 && err >= -0xff) {
   25736:	f113 0fff 	cmn.w	r3, #255	; 0xff
   2573a:	d305      	bcc.n	25748 <write_cb+0x5c>
		return -err;
   2573c:	425b      	negs	r3, r3
   2573e:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   25740:	7523      	strb	r3, [r4, #20]
}
   25742:	4628      	mov	r0, r5
   25744:	b003      	add	sp, #12
   25746:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   25748:	230e      	movs	r3, #14
   2574a:	e7f9      	b.n	25740 <write_cb+0x54>
		return BT_GATT_ITER_STOP;
   2574c:	2500      	movs	r5, #0
   2574e:	e7f8      	b.n	25742 <write_cb+0x56>

00025750 <bt_att_sent>:
{
   25750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   25752:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
	struct bt_att *att = chan->att;
   25756:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   2575a:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2575c:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   25760:	b10b      	cbz	r3, 25766 <bt_att_sent+0x16>
		chan->sent(chan);
   25762:	4638      	mov	r0, r7
   25764:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25766:	f3bf 8f5b 	dmb	ish
   2576a:	f105 03e8 	add.w	r3, r5, #232	; 0xe8
   2576e:	e853 2f00 	ldrex	r2, [r3]
   25772:	f022 0210 	bic.w	r2, r2, #16
   25776:	e843 2100 	strex	r1, r2, [r3]
   2577a:	2900      	cmp	r1, #0
   2577c:	d1f7      	bne.n	2576e <bt_att_sent+0x1e>
   2577e:	f3bf 8f5b 	dmb	ish
	if (!att) {
   25782:	b30c      	cbz	r4, 257c8 <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   25784:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   25788:	b98b      	cbnz	r3, 257ae <bt_att_sent+0x5e>
   2578a:	6863      	ldr	r3, [r4, #4]
   2578c:	b17b      	cbz	r3, 257ae <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2578e:	1d20      	adds	r0, r4, #4
   25790:	f7ff fd62 	bl	25258 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   25794:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   25796:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   25798:	4638      	mov	r0, r7
   2579a:	f7ff fdcd 	bl	25338 <chan_req_send>
   2579e:	2800      	cmp	r0, #0
   257a0:	da12      	bge.n	257c8 <bt_att_sent+0x78>
Z_GENLIST_PREPEND(slist, snode)
   257a2:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   257a4:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   257a6:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   257a8:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   257aa:	b903      	cbnz	r3, 257ae <bt_att_sent+0x5e>
	list->tail = node;
   257ac:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   257ae:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   257b2:	4638      	mov	r0, r7
   257b4:	f7ff fddc 	bl	25370 <process_queue>
	if (!err) {
   257b8:	b130      	cbz	r0, 257c8 <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   257ba:	f104 010c 	add.w	r1, r4, #12
   257be:	4638      	mov	r0, r7
}
   257c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   257c4:	f7ff bdd4 	b.w	25370 <process_queue>
}
   257c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000257ca <read_cb>:
{
   257ca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   257ce:	f8d2 8000 	ldr.w	r8, [r2]
{
   257d2:	4606      	mov	r6, r0
	data->err = 0x00;
   257d4:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   257d6:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   257da:	7317      	strb	r7, [r2, #12]
{
   257dc:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   257de:	4631      	mov	r1, r6
   257e0:	2215      	movs	r2, #21
   257e2:	f000 fd08 	bl	261f6 <bt_gatt_check_perm>
   257e6:	4604      	mov	r4, r0
   257e8:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   257ea:	b9a0      	cbnz	r0, 25816 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   257ec:	e9cd 0000 	strd	r0, r0, [sp]
   257f0:	88ab      	ldrh	r3, [r5, #4]
   257f2:	68aa      	ldr	r2, [r5, #8]
   257f4:	4631      	mov	r1, r6
   257f6:	4640      	mov	r0, r8
   257f8:	f7ff fe9d 	bl	25536 <att_chan_read>
	if (ret < 0) {
   257fc:	1e03      	subs	r3, r0, #0
   257fe:	da0c      	bge.n	2581a <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   25800:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   25804:	bf26      	itte	cs
   25806:	425b      	negcs	r3, r3
   25808:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   2580a:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   2580c:	732b      	strb	r3, [r5, #12]
}
   2580e:	4620      	mov	r0, r4
   25810:	b002      	add	sp, #8
   25812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   25816:	463c      	mov	r4, r7
   25818:	e7f9      	b.n	2580e <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   2581a:	2401      	movs	r4, #1
   2581c:	e7f7      	b.n	2580e <read_cb+0x44>

0002581e <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2581e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25822:	4688      	mov	r8, r1
   25824:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   25826:	2101      	movs	r1, #1
   25828:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2582a:	4605      	mov	r5, r0
   2582c:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2582e:	f7ef fc8f 	bl	15150 <bt_att_chan_create_pdu>
	if (!buf) {
   25832:	4604      	mov	r4, r0
   25834:	b170      	cbz	r0, 25854 <send_err_rsp.part.0+0x36>
   25836:	2104      	movs	r1, #4
   25838:	3008      	adds	r0, #8
   2583a:	f001 fcdd 	bl	271f8 <net_buf_simple_add>
	rsp->request = req;
   2583e:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   25842:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   25844:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   25848:	4621      	mov	r1, r4
   2584a:	4628      	mov	r0, r5
}
   2584c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   25850:	f7ef bae6 	b.w	14e20 <bt_att_chan_send_rsp.constprop.0>
}
   25854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025858 <att_write_cmd>:
{
   25858:	b530      	push	{r4, r5, lr}
   2585a:	460c      	mov	r4, r1
   2585c:	b085      	sub	sp, #20
   2585e:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   25860:	f101 0008 	add.w	r0, r1, #8
   25864:	f001 fcf7 	bl	27256 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   25868:	89a2      	ldrh	r2, [r4, #12]
   2586a:	9202      	str	r2, [sp, #8]
   2586c:	68a2      	ldr	r2, [r4, #8]
   2586e:	9201      	str	r2, [sp, #4]
   25870:	2200      	movs	r2, #0
   25872:	4603      	mov	r3, r0
   25874:	9200      	str	r2, [sp, #0]
   25876:	4611      	mov	r1, r2
   25878:	4628      	mov	r0, r5
   2587a:	f7ef fd61 	bl	15340 <att_write_rsp>
}
   2587e:	b005      	add	sp, #20
   25880:	bd30      	pop	{r4, r5, pc}

00025882 <att_write_req>:
{
   25882:	b530      	push	{r4, r5, lr}
   25884:	460c      	mov	r4, r1
   25886:	b085      	sub	sp, #20
   25888:	4605      	mov	r5, r0
   2588a:	f101 0008 	add.w	r0, r1, #8
   2588e:	f001 fce2 	bl	27256 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   25892:	89a2      	ldrh	r2, [r4, #12]
   25894:	9202      	str	r2, [sp, #8]
   25896:	68a2      	ldr	r2, [r4, #8]
   25898:	9201      	str	r2, [sp, #4]
   2589a:	2200      	movs	r2, #0
   2589c:	4603      	mov	r3, r0
   2589e:	9200      	str	r2, [sp, #0]
   258a0:	2112      	movs	r1, #18
   258a2:	2213      	movs	r2, #19
   258a4:	4628      	mov	r0, r5
   258a6:	f7ef fd4b 	bl	15340 <att_write_rsp>
}
   258aa:	b005      	add	sp, #20
   258ac:	bd30      	pop	{r4, r5, pc}

000258ae <att_read_blob_req>:
{
   258ae:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   258b0:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   258b2:	8813      	ldrh	r3, [r2, #0]
   258b4:	8852      	ldrh	r2, [r2, #2]
   258b6:	9200      	str	r2, [sp, #0]
   258b8:	210c      	movs	r1, #12
   258ba:	220d      	movs	r2, #13
   258bc:	f7f0 f804 	bl	158c8 <att_read_rsp>
}
   258c0:	b003      	add	sp, #12
   258c2:	f85d fb04 	ldr.w	pc, [sp], #4

000258c6 <att_read_req>:
{
   258c6:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   258c8:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   258ca:	2200      	movs	r2, #0
   258cc:	881b      	ldrh	r3, [r3, #0]
   258ce:	9200      	str	r2, [sp, #0]
   258d0:	210a      	movs	r1, #10
   258d2:	220b      	movs	r2, #11
   258d4:	f7ef fff8 	bl	158c8 <att_read_rsp>
}
   258d8:	b003      	add	sp, #12
   258da:	f85d fb04 	ldr.w	pc, [sp], #4

000258de <att_mtu_req>:
{
   258de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   258e0:	6803      	ldr	r3, [r0, #0]
{
   258e2:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   258e4:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   258e6:	f3bf 8f5b 	dmb	ish
   258ea:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   258ee:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   258f2:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   258f6:	071b      	lsls	r3, r3, #28
   258f8:	d420      	bmi.n	2593c <att_mtu_req+0x5e>
	mtu_client = sys_le16_to_cpu(req->mtu);
   258fa:	688b      	ldr	r3, [r1, #8]
   258fc:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   258fe:	2e16      	cmp	r6, #22
   25900:	d91e      	bls.n	25940 <att_mtu_req+0x62>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   25902:	2202      	movs	r2, #2
   25904:	2103      	movs	r1, #3
   25906:	f7ef fdc7 	bl	15498 <bt_att_create_pdu>
	if (!pdu) {
   2590a:	4607      	mov	r7, r0
   2590c:	b1d0      	cbz	r0, 25944 <att_mtu_req+0x66>
	return net_buf_simple_add(&buf->b, len);
   2590e:	2102      	movs	r1, #2
   25910:	3008      	adds	r0, #8
   25912:	f001 fc71 	bl	271f8 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   25916:	2341      	movs	r3, #65	; 0x41
   25918:	7003      	strb	r3, [r0, #0]
   2591a:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   2591c:	4639      	mov	r1, r7
   2591e:	4620      	mov	r0, r4
   25920:	f7ef fa7e 	bl	14e20 <bt_att_chan_send_rsp.constprop.0>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   25924:	2e41      	cmp	r6, #65	; 0x41
   25926:	bf28      	it	cs
   25928:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   2592a:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2592c:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   25930:	f8a4 608a 	strh.w	r6, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   25934:	f7ff fd8d 	bl	25452 <att_chan_mtu_updated>
	return 0;
   25938:	4628      	mov	r0, r5
}
   2593a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   2593c:	2006      	movs	r0, #6
   2593e:	e7fc      	b.n	2593a <att_mtu_req+0x5c>
		return BT_ATT_ERR_INVALID_PDU;
   25940:	2004      	movs	r0, #4
   25942:	e7fa      	b.n	2593a <att_mtu_req+0x5c>
		return BT_ATT_ERR_UNLIKELY;
   25944:	200e      	movs	r0, #14
   25946:	e7f8      	b.n	2593a <att_mtu_req+0x5c>

00025948 <bt_att_init>:
	bt_gatt_init();
   25948:	f7f1 be7c 	b.w	17644 <bt_gatt_init>

0002594c <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2594c:	898a      	ldrh	r2, [r1, #12]
   2594e:	6889      	ldr	r1, [r1, #8]
   25950:	2300      	movs	r3, #0
   25952:	f7f0 b92b 	b.w	15bac <att_handle_rsp>

00025956 <bt_att_encrypt_change>:
	if (!att_chan->att) {
   25956:	f850 3c08 	ldr.w	r3, [r0, #-8]
{
   2595a:	b570      	push	{r4, r5, r6, lr}
   2595c:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   2595e:	f1a0 0608 	sub.w	r6, r0, #8
	if (!att_chan->att) {
   25962:	2b00      	cmp	r3, #0
   25964:	d037      	beq.n	259d6 <bt_att_encrypt_change+0x80>
	if (hci_status) {
   25966:	b171      	cbz	r1, 25986 <bt_att_encrypt_change+0x30>
		if (att_chan->req && att_chan->req->retrying) {
   25968:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   2596c:	2b00      	cmp	r3, #0
   2596e:	d032      	beq.n	259d6 <bt_att_encrypt_change+0x80>
   25970:	7c1b      	ldrb	r3, [r3, #16]
   25972:	07da      	lsls	r2, r3, #31
   25974:	d52f      	bpl.n	259d6 <bt_att_encrypt_change+0x80>
		return BT_ATT_ERR_AUTHENTICATION;
   25976:	2305      	movs	r3, #5
		att_handle_rsp(att_chan, NULL, 0, err);
   25978:	2200      	movs	r2, #0
   2597a:	4630      	mov	r0, r6
   2597c:	4611      	mov	r1, r2
}
   2597e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   25982:	f7f0 b913 	b.w	15bac <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
   25986:	6805      	ldr	r5, [r0, #0]
	bt_gatt_encrypt_change(conn);
   25988:	4628      	mov	r0, r5
   2598a:	f7f2 fb8f 	bl	180ac <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   2598e:	7a6b      	ldrb	r3, [r5, #9]
   25990:	2b01      	cmp	r3, #1
   25992:	d020      	beq.n	259d6 <bt_att_encrypt_change+0x80>
	if (!(att_chan->req && att_chan->req->retrying)) {
   25994:	f8d4 40ec 	ldr.w	r4, [r4, #236]	; 0xec
   25998:	b1ec      	cbz	r4, 259d6 <bt_att_encrypt_change+0x80>
   2599a:	7c23      	ldrb	r3, [r4, #16]
   2599c:	07db      	lsls	r3, r3, #31
   2599e:	d51a      	bpl.n	259d6 <bt_att_encrypt_change+0x80>
	if (!req->encode) {
   259a0:	68e3      	ldr	r3, [r4, #12]
   259a2:	2b00      	cmp	r3, #0
   259a4:	d0e7      	beq.n	25976 <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   259a6:	6962      	ldr	r2, [r4, #20]
   259a8:	7c61      	ldrb	r1, [r4, #17]
   259aa:	4630      	mov	r0, r6
   259ac:	f7ef fbd0 	bl	15150 <bt_att_chan_create_pdu>
	if (!buf) {
   259b0:	4605      	mov	r5, r0
   259b2:	b140      	cbz	r0, 259c6 <bt_att_encrypt_change+0x70>
	if (req->encode(buf, req->len, req->user_data)) {
   259b4:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   259b8:	68e3      	ldr	r3, [r4, #12]
   259ba:	4798      	blx	r3
   259bc:	4602      	mov	r2, r0
   259be:	b120      	cbz	r0, 259ca <bt_att_encrypt_change+0x74>
		net_buf_unref(buf);
   259c0:	4628      	mov	r0, r5
   259c2:	f7f7 fb8d 	bl	1d0e0 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   259c6:	230e      	movs	r3, #14
   259c8:	e7d6      	b.n	25978 <bt_att_encrypt_change+0x22>
	if (chan_send(att_chan, buf, NULL)) {
   259ca:	4629      	mov	r1, r5
   259cc:	4630      	mov	r0, r6
   259ce:	f7ef f8c7 	bl	14b60 <chan_send>
   259d2:	2800      	cmp	r0, #0
   259d4:	d1f4      	bne.n	259c0 <bt_att_encrypt_change+0x6a>
}
   259d6:	bd70      	pop	{r4, r5, r6, pc}

000259d8 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   259d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   259dc:	4607      	mov	r7, r0
   259de:	460d      	mov	r5, r1
   259e0:	4616      	mov	r6, r2
   259e2:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   259e4:	f7ef f9dc 	bl	14da0 <att_get>
	if (!att) {
   259e8:	4604      	mov	r4, r0
   259ea:	b938      	cbnz	r0, 259fc <bt_att_send+0x24>
		net_buf_unref(buf);
   259ec:	4628      	mov	r0, r5
   259ee:	f7f7 fb77 	bl	1d0e0 <net_buf_unref>
		return -ENOTCONN;
   259f2:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   259f6:	b002      	add	sp, #8
   259f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   259fc:	b146      	cbz	r6, 25a10 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   259fe:	f8cd 8000 	str.w	r8, [sp]
   25a02:	4633      	mov	r3, r6
   25a04:	462a      	mov	r2, r5
   25a06:	2104      	movs	r1, #4
   25a08:	4638      	mov	r0, r7
   25a0a:	f000 feae 	bl	2676a <bt_l2cap_send_cb>
   25a0e:	e7f2      	b.n	259f6 <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   25a10:	f100 060c 	add.w	r6, r0, #12
   25a14:	4629      	mov	r1, r5
   25a16:	4630      	mov	r0, r6
   25a18:	f001 fbbb 	bl	27192 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   25a1c:	2200      	movs	r2, #0
   25a1e:	2300      	movs	r3, #0
   25a20:	4630      	mov	r0, r6
   25a22:	f001 fb4f 	bl	270c4 <net_buf_get>
	if (!buf) {
   25a26:	4605      	mov	r5, r0
   25a28:	b908      	cbnz	r0, 25a2e <bt_att_send+0x56>
	return 0;
   25a2a:	2000      	movs	r0, #0
   25a2c:	e7e3      	b.n	259f6 <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25a2e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   25a30:	b1c3      	cbz	r3, 25a64 <bt_att_send+0x8c>
   25a32:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   25a36:	d015      	beq.n	25a64 <bt_att_send+0x8c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   25a38:	681c      	ldr	r4, [r3, #0]
   25a3a:	b10c      	cbz	r4, 25a40 <bt_att_send+0x68>
   25a3c:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
	return chan_send(chan, buf, cb);
   25a40:	2200      	movs	r2, #0
   25a42:	4629      	mov	r1, r5
   25a44:	f7ef f88c 	bl	14b60 <chan_send>
		if (err >= 0) {
   25a48:	2800      	cmp	r0, #0
   25a4a:	daee      	bge.n	25a2a <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25a4c:	b154      	cbz	r4, 25a64 <bt_att_send+0x8c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25a4e:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   25a52:	d004      	beq.n	25a5e <bt_att_send+0x86>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   25a54:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   25a58:	b10b      	cbz	r3, 25a5e <bt_att_send+0x86>
   25a5a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   25a5e:	4620      	mov	r0, r4
   25a60:	461c      	mov	r4, r3
   25a62:	e7ed      	b.n	25a40 <bt_att_send+0x68>
		k_queue_prepend(&att->tx_queue._queue, buf);
   25a64:	4629      	mov	r1, r5
   25a66:	4630      	mov	r0, r6
   25a68:	f002 fc6f 	bl	2834a <k_queue_prepend>
   25a6c:	e7dd      	b.n	25a2a <bt_att_send+0x52>

00025a6e <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   25a6e:	b510      	push	{r4, lr}
   25a70:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   25a72:	f7ef f995 	bl	14da0 <att_get>
	if (!att) {
   25a76:	b160      	cbz	r0, 25a92 <bt_att_req_send+0x24>
	parent->next = child;
   25a78:	2300      	movs	r3, #0
   25a7a:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   25a7c:	6883      	ldr	r3, [r0, #8]
   25a7e:	b92b      	cbnz	r3, 25a8c <bt_att_req_send+0x1e>
	list->head = node;
   25a80:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   25a84:	f7ff fe06 	bl	25694 <att_req_send_process>

	return 0;
   25a88:	2000      	movs	r0, #0
}
   25a8a:	bd10      	pop	{r4, pc}
	parent->next = child;
   25a8c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   25a8e:	6084      	str	r4, [r0, #8]
}
   25a90:	e7f8      	b.n	25a84 <bt_att_req_send+0x16>
		return -ENOTCONN;
   25a92:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   25a96:	e7f8      	b.n	25a8a <bt_att_req_send+0x1c>

00025a98 <tx_notify>:
{
   25a98:	b570      	push	{r4, r5, r6, lr}
   25a9a:	4604      	mov	r4, r0
	__asm__ volatile(
   25a9c:	f04f 0240 	mov.w	r2, #64	; 0x40
   25aa0:	f3ef 8311 	mrs	r3, BASEPRI
   25aa4:	f382 8812 	msr	BASEPRI_MAX, r2
   25aa8:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   25aac:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   25aae:	b920      	cbnz	r0, 25aba <tx_notify+0x22>
	__asm__ volatile(
   25ab0:	f383 8811 	msr	BASEPRI, r3
   25ab4:	f3bf 8f6f 	isb	sy
}
   25ab8:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   25aba:	6a61      	ldr	r1, [r4, #36]	; 0x24
   25abc:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   25abe:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   25ac0:	4288      	cmp	r0, r1
	list->tail = node;
   25ac2:	bf08      	it	eq
   25ac4:	6262      	streq	r2, [r4, #36]	; 0x24
   25ac6:	f383 8811 	msr	BASEPRI, r3
   25aca:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   25ace:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   25ad2:	f7f0 f97d 	bl	15dd0 <tx_free>
		cb(conn, user_data);
   25ad6:	4631      	mov	r1, r6
   25ad8:	4620      	mov	r0, r4
   25ada:	47a8      	blx	r5
	while (1) {
   25adc:	e7de      	b.n	25a9c <tx_notify+0x4>

00025ade <tx_complete_work>:
	tx_notify(conn);
   25ade:	3828      	subs	r0, #40	; 0x28
   25ae0:	f7ff bfda 	b.w	25a98 <tx_notify>

00025ae4 <bt_conn_reset_rx_state>:
{
   25ae4:	b510      	push	{r4, lr}
   25ae6:	4604      	mov	r4, r0
	if (!conn->rx) {
   25ae8:	6900      	ldr	r0, [r0, #16]
   25aea:	b118      	cbz	r0, 25af4 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   25aec:	f7f7 faf8 	bl	1d0e0 <net_buf_unref>
	conn->rx = NULL;
   25af0:	2300      	movs	r3, #0
   25af2:	6123      	str	r3, [r4, #16]
}
   25af4:	bd10      	pop	{r4, pc}

00025af6 <conn_cleanup>:
{
   25af6:	b570      	push	{r4, r5, r6, lr}
   25af8:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   25afa:	f100 0638 	add.w	r6, r0, #56	; 0x38
   25afe:	2200      	movs	r2, #0
   25b00:	2300      	movs	r3, #0
   25b02:	4630      	mov	r0, r6
   25b04:	f001 fade 	bl	270c4 <net_buf_get>
   25b08:	4605      	mov	r5, r0
   25b0a:	b950      	cbnz	r0, 25b22 <conn_cleanup+0x2c>
	bt_conn_reset_rx_state(conn);
   25b0c:	4620      	mov	r0, r4
   25b0e:	f7ff ffe9 	bl	25ae4 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   25b12:	f104 0058 	add.w	r0, r4, #88	; 0x58
   25b16:	2200      	movs	r2, #0
}
   25b18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   25b1c:	2300      	movs	r3, #0
   25b1e:	f7fc bced 	b.w	224fc <k_work_reschedule>
		if (tx_data(buf)->tx) {
   25b22:	6968      	ldr	r0, [r5, #20]
   25b24:	b108      	cbz	r0, 25b2a <conn_cleanup+0x34>
			tx_free(tx_data(buf)->tx);
   25b26:	f7f0 f953 	bl	15dd0 <tx_free>
		net_buf_unref(buf);
   25b2a:	4628      	mov	r0, r5
   25b2c:	f7f7 fad8 	bl	1d0e0 <net_buf_unref>
   25b30:	e7e5      	b.n	25afe <conn_cleanup+0x8>

00025b32 <bt_conn_ref>:
{
   25b32:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   25b34:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   25b38:	f3bf 8f5b 	dmb	ish
   25b3c:	6813      	ldr	r3, [r2, #0]
   25b3e:	f3bf 8f5b 	dmb	ish
		if (!old) {
   25b42:	b17b      	cbz	r3, 25b64 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   25b44:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   25b48:	1c59      	adds	r1, r3, #1
   25b4a:	e852 4f00 	ldrex	r4, [r2]
   25b4e:	429c      	cmp	r4, r3
   25b50:	d104      	bne.n	25b5c <bt_conn_ref+0x2a>
   25b52:	e842 1c00 	strex	ip, r1, [r2]
   25b56:	f1bc 0f00 	cmp.w	ip, #0
   25b5a:	d1f6      	bne.n	25b4a <bt_conn_ref+0x18>
   25b5c:	f3bf 8f5b 	dmb	ish
   25b60:	d1ea      	bne.n	25b38 <bt_conn_ref+0x6>
}
   25b62:	bd10      	pop	{r4, pc}
			return NULL;
   25b64:	4618      	mov	r0, r3
   25b66:	e7fc      	b.n	25b62 <bt_conn_ref+0x30>

00025b68 <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   25b68:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   25b6c:	f3bf 8f5b 	dmb	ish
   25b70:	e853 2f00 	ldrex	r2, [r3]
   25b74:	3a01      	subs	r2, #1
   25b76:	e843 2100 	strex	r1, r2, [r3]
   25b7a:	2900      	cmp	r1, #0
   25b7c:	d1f8      	bne.n	25b70 <bt_conn_unref+0x8>
   25b7e:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   25b82:	7883      	ldrb	r3, [r0, #2]
   25b84:	2b01      	cmp	r3, #1
   25b86:	d108      	bne.n	25b9a <bt_conn_unref+0x32>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   25b88:	f3bf 8f5b 	dmb	ish
   25b8c:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   25b90:	f3bf 8f5b 	dmb	ish
   25b94:	b90b      	cbnz	r3, 25b9a <bt_conn_unref+0x32>
		bt_le_adv_resume();
   25b96:	f7ee bf75 	b.w	14a84 <bt_le_adv_resume>
}
   25b9a:	4770      	bx	lr

00025b9c <conn_lookup_handle>:
{
   25b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25ba0:	4607      	mov	r7, r0
   25ba2:	460e      	mov	r6, r1
   25ba4:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   25ba6:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   25ba8:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   25bac:	42b4      	cmp	r4, r6
   25bae:	d103      	bne.n	25bb8 <conn_lookup_handle+0x1c>
	return NULL;
   25bb0:	2300      	movs	r3, #0
}
   25bb2:	4618      	mov	r0, r3
   25bb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   25bb8:	fb09 7004 	mla	r0, r9, r4, r7
   25bbc:	f7ff ffb9 	bl	25b32 <bt_conn_ref>
   25bc0:	4603      	mov	r3, r0
		if (!conn) {
   25bc2:	b158      	cbz	r0, 25bdc <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   25bc4:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   25bc6:	2d01      	cmp	r5, #1
   25bc8:	d002      	beq.n	25bd0 <conn_lookup_handle+0x34>
   25bca:	3d07      	subs	r5, #7
   25bcc:	2d01      	cmp	r5, #1
   25bce:	d803      	bhi.n	25bd8 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   25bd0:	881a      	ldrh	r2, [r3, #0]
   25bd2:	4542      	cmp	r2, r8
   25bd4:	d0ed      	beq.n	25bb2 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   25bd6:	4618      	mov	r0, r3
   25bd8:	f7ff ffc6 	bl	25b68 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   25bdc:	3401      	adds	r4, #1
   25bde:	e7e5      	b.n	25bac <conn_lookup_handle+0x10>

00025be0 <bt_conn_connected>:
{
   25be0:	b510      	push	{r4, lr}
   25be2:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   25be4:	f7f5 f8a2 	bl	1ad2c <bt_l2cap_connected>
	notify_connected(conn);
   25be8:	4620      	mov	r0, r4
}
   25bea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   25bee:	f7f0 b8f9 	b.w	15de4 <notify_connected>

00025bf2 <bt_conn_disconnect>:
{
   25bf2:	b538      	push	{r3, r4, r5, lr}
   25bf4:	7b43      	ldrb	r3, [r0, #13]
   25bf6:	3b02      	subs	r3, #2
   25bf8:	4604      	mov	r4, r0
   25bfa:	2b06      	cmp	r3, #6
   25bfc:	d805      	bhi.n	25c0a <bt_conn_disconnect+0x18>
   25bfe:	e8df f003 	tbb	[pc, r3]
   25c02:	0408      	.short	0x0408
   25c04:	0e0c0404 	.word	0x0e0c0404
   25c08:	0c          	.byte	0x0c
   25c09:	00          	.byte	0x00
	switch (conn->state) {
   25c0a:	f06f 057f 	mvn.w	r5, #127	; 0x7f
}
   25c0e:	4628      	mov	r0, r5
   25c10:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
   25c12:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   25c14:	2100      	movs	r1, #0
   25c16:	f7f0 fb1f 	bl	16258 <bt_conn_set_state>
		return 0;
   25c1a:	2500      	movs	r5, #0
   25c1c:	e7f7      	b.n	25c0e <bt_conn_disconnect+0x1c>
	err = bt_hci_disconnect(conn->handle, reason);
   25c1e:	8800      	ldrh	r0, [r0, #0]
   25c20:	f000 fba2 	bl	26368 <bt_hci_disconnect>
	if (err) {
   25c24:	4605      	mov	r5, r0
   25c26:	2800      	cmp	r0, #0
   25c28:	d1f1      	bne.n	25c0e <bt_conn_disconnect+0x1c>
	if (conn->state == BT_CONN_CONNECTED) {
   25c2a:	7b63      	ldrb	r3, [r4, #13]
   25c2c:	2b07      	cmp	r3, #7
   25c2e:	d1ee      	bne.n	25c0e <bt_conn_disconnect+0x1c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   25c30:	2108      	movs	r1, #8
   25c32:	4620      	mov	r0, r4
   25c34:	f7f0 fb10 	bl	16258 <bt_conn_set_state>
   25c38:	e7e9      	b.n	25c0e <bt_conn_disconnect+0x1c>

00025c3a <bt_conn_set_security>:
{
   25c3a:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   25c3c:	7b43      	ldrb	r3, [r0, #13]
   25c3e:	2b07      	cmp	r3, #7
{
   25c40:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   25c42:	d128      	bne.n	25c96 <bt_conn_set_security+0x5c>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   25c44:	7a43      	ldrb	r3, [r0, #9]
   25c46:	428b      	cmp	r3, r1
   25c48:	d228      	bcs.n	25c9c <bt_conn_set_security+0x62>
   25c4a:	7a83      	ldrb	r3, [r0, #10]
   25c4c:	428b      	cmp	r3, r1
   25c4e:	d225      	bcs.n	25c9c <bt_conn_set_security+0x62>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   25c50:	f3bf 8f5b 	dmb	ish
	if (val) {
   25c54:	060a      	lsls	r2, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   25c56:	f100 0304 	add.w	r3, r0, #4
   25c5a:	d513      	bpl.n	25c84 <bt_conn_set_security+0x4a>
   25c5c:	e853 2f00 	ldrex	r2, [r3]
   25c60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   25c64:	e843 2000 	strex	r0, r2, [r3]
   25c68:	2800      	cmp	r0, #0
   25c6a:	d1f7      	bne.n	25c5c <bt_conn_set_security+0x22>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25c6c:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   25c70:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   25c74:	72a1      	strb	r1, [r4, #10]
		return bt_smp_start_security(conn);
   25c76:	4620      	mov	r0, r4
   25c78:	f7f6 fb20 	bl	1c2bc <bt_smp_start_security>
	if (err) {
   25c7c:	b108      	cbz	r0, 25c82 <bt_conn_set_security+0x48>
		conn->required_sec_level = conn->sec_level;
   25c7e:	7a63      	ldrb	r3, [r4, #9]
   25c80:	72a3      	strb	r3, [r4, #10]
}
   25c82:	bd10      	pop	{r4, pc}
   25c84:	e853 2f00 	ldrex	r2, [r3]
   25c88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   25c8c:	e843 2000 	strex	r0, r2, [r3]
   25c90:	2800      	cmp	r0, #0
   25c92:	d0eb      	beq.n	25c6c <bt_conn_set_security+0x32>
   25c94:	e7f6      	b.n	25c84 <bt_conn_set_security+0x4a>
		return -ENOTCONN;
   25c96:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   25c9a:	e7f2      	b.n	25c82 <bt_conn_set_security+0x48>
		return 0;
   25c9c:	2000      	movs	r0, #0
   25c9e:	e7f0      	b.n	25c82 <bt_conn_set_security+0x48>

00025ca0 <bt_conn_get_security>:
}
   25ca0:	7a40      	ldrb	r0, [r0, #9]
   25ca2:	4770      	bx	lr

00025ca4 <bt_conn_is_peer_addr_le>:
{
   25ca4:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   25ca6:	7a03      	ldrb	r3, [r0, #8]
   25ca8:	428b      	cmp	r3, r1
{
   25caa:	4604      	mov	r4, r0
   25cac:	4615      	mov	r5, r2
	if (id != conn->id) {
   25cae:	d115      	bne.n	25cdc <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   25cb0:	f100 0188 	add.w	r1, r0, #136	; 0x88
   25cb4:	2207      	movs	r2, #7
   25cb6:	4628      	mov	r0, r5
   25cb8:	f7ff f8d2 	bl	24e60 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   25cbc:	b180      	cbz	r0, 25ce0 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   25cbe:	78e3      	ldrb	r3, [r4, #3]
   25cc0:	2207      	movs	r2, #7
   25cc2:	b943      	cbnz	r3, 25cd6 <bt_conn_is_peer_addr_le+0x32>
   25cc4:	f104 0196 	add.w	r1, r4, #150	; 0x96
   25cc8:	4628      	mov	r0, r5
   25cca:	f7ff f8c9 	bl	24e60 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   25cce:	fab0 f080 	clz	r0, r0
   25cd2:	0940      	lsrs	r0, r0, #5
}
   25cd4:	bd38      	pop	{r3, r4, r5, pc}
   25cd6:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   25cda:	e7f5      	b.n	25cc8 <bt_conn_is_peer_addr_le+0x24>
		return false;
   25cdc:	2000      	movs	r0, #0
   25cde:	e7f9      	b.n	25cd4 <bt_conn_is_peer_addr_le+0x30>
		return true;
   25ce0:	2001      	movs	r0, #1
   25ce2:	e7f7      	b.n	25cd4 <bt_conn_is_peer_addr_le+0x30>

00025ce4 <bt_conn_get_dst>:
}
   25ce4:	3088      	adds	r0, #136	; 0x88
   25ce6:	4770      	bx	lr

00025ce8 <bt_conn_le_conn_update>:
{
   25ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25cea:	4607      	mov	r7, r0
   25cec:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   25cee:	f242 0013 	movw	r0, #8211	; 0x2013
   25cf2:	210e      	movs	r1, #14
   25cf4:	f7f3 f86e 	bl	18dd4 <bt_hci_cmd_create>
	if (!buf) {
   25cf8:	4606      	mov	r6, r0
   25cfa:	b1d0      	cbz	r0, 25d32 <bt_conn_le_conn_update+0x4a>
   25cfc:	210e      	movs	r1, #14
   25cfe:	3008      	adds	r0, #8
   25d00:	f001 fa7a 	bl	271f8 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   25d04:	220e      	movs	r2, #14
   25d06:	4604      	mov	r4, r0
   25d08:	2100      	movs	r1, #0
   25d0a:	f7ff f8c4 	bl	24e96 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   25d0e:	883b      	ldrh	r3, [r7, #0]
   25d10:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   25d12:	882b      	ldrh	r3, [r5, #0]
   25d14:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   25d16:	886b      	ldrh	r3, [r5, #2]
   25d18:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   25d1a:	88ab      	ldrh	r3, [r5, #4]
   25d1c:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   25d1e:	88eb      	ldrh	r3, [r5, #6]
   25d20:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   25d22:	4631      	mov	r1, r6
   25d24:	2200      	movs	r2, #0
}
   25d26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   25d2a:	f242 0013 	movw	r0, #8211	; 0x2013
   25d2e:	f7f3 b9ad 	b.w	1908c <bt_hci_cmd_send_sync>
}
   25d32:	f06f 0068 	mvn.w	r0, #104	; 0x68
   25d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00025d38 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   25d38:	6010      	str	r0, [r2, #0]
}
   25d3a:	2000      	movs	r0, #0
   25d3c:	4770      	bx	lr

00025d3e <gatt_ccc_changed>:
{
   25d3e:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   25d40:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   25d42:	895a      	ldrh	r2, [r3, #10]
   25d44:	428a      	cmp	r2, r1
   25d46:	d003      	beq.n	25d50 <gatt_ccc_changed+0x12>
		ccc->value = value;
   25d48:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   25d4a:	68db      	ldr	r3, [r3, #12]
   25d4c:	b103      	cbz	r3, 25d50 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   25d4e:	4718      	bx	r3
}
   25d50:	4770      	bx	lr

00025d52 <gatt_indicate_rsp>:
{
   25d52:	b510      	push	{r4, lr}
   25d54:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   25d56:	68a3      	ldr	r3, [r4, #8]
{
   25d58:	460a      	mov	r2, r1
	if (params->func) {
   25d5a:	b10b      	cbz	r3, 25d60 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   25d5c:	4621      	mov	r1, r4
   25d5e:	4798      	blx	r3
	params->_ref--;
   25d60:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   25d62:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   25d64:	3b01      	subs	r3, #1
   25d66:	b2db      	uxtb	r3, r3
   25d68:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   25d6a:	b122      	cbz	r2, 25d76 <gatt_indicate_rsp+0x24>
   25d6c:	b91b      	cbnz	r3, 25d76 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   25d6e:	4620      	mov	r0, r4
}
   25d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   25d74:	4710      	bx	r2
}
   25d76:	bd10      	pop	{r4, pc}

00025d78 <match_uuid>:
	data->attr = attr;
   25d78:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   25d7a:	8091      	strh	r1, [r2, #4]
}
   25d7c:	2000      	movs	r0, #0
   25d7e:	4770      	bx	lr

00025d80 <ccc_set_cb>:
}
   25d80:	2000      	movs	r0, #0
   25d82:	4770      	bx	lr

00025d84 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   25d84:	2207      	movs	r2, #7
   25d86:	f7ff b87b 	b.w	24e80 <memcpy>

00025d8a <clear_ccc_cfg>:
{
   25d8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   25d8c:	2500      	movs	r5, #0
{
   25d8e:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   25d90:	4669      	mov	r1, sp
   25d92:	3001      	adds	r0, #1
   25d94:	9500      	str	r5, [sp, #0]
   25d96:	f8cd 5003 	str.w	r5, [sp, #3]
   25d9a:	f7ff fff3 	bl	25d84 <bt_addr_le_copy>
	cfg->id = 0U;
   25d9e:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   25da0:	8125      	strh	r5, [r4, #8]
}
   25da2:	b003      	add	sp, #12
   25da4:	bd30      	pop	{r4, r5, pc}

00025da6 <write_name>:
{
   25da6:	b570      	push	{r4, r5, r6, lr}
   25da8:	b092      	sub	sp, #72	; 0x48
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   25daa:	2100      	movs	r1, #0
{
   25dac:	f8bd 5058 	ldrh.w	r5, [sp, #88]	; 0x58
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   25db0:	9101      	str	r1, [sp, #4]
{
   25db2:	4616      	mov	r6, r2
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   25db4:	a802      	add	r0, sp, #8
   25db6:	223d      	movs	r2, #61	; 0x3d
{
   25db8:	461c      	mov	r4, r3
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   25dba:	f7ff f86c 	bl	24e96 <memset>
	if (offset >= sizeof(value)) {
   25dbe:	2d40      	cmp	r5, #64	; 0x40
   25dc0:	d80d      	bhi.n	25dde <write_name+0x38>
	if (offset + len >= sizeof(value)) {
   25dc2:	4425      	add	r5, r4
   25dc4:	2d40      	cmp	r5, #64	; 0x40
   25dc6:	dc0d      	bgt.n	25de4 <write_name+0x3e>
	memcpy(value, buf, len);
   25dc8:	4622      	mov	r2, r4
   25dca:	4631      	mov	r1, r6
   25dcc:	a801      	add	r0, sp, #4
   25dce:	f7ff f857 	bl	24e80 <memcpy>
	bt_set_name(value);
   25dd2:	a801      	add	r0, sp, #4
   25dd4:	f7f3 fe1e 	bl	19a14 <bt_set_name>
}
   25dd8:	4620      	mov	r0, r4
   25dda:	b012      	add	sp, #72	; 0x48
   25ddc:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25dde:	f06f 0406 	mvn.w	r4, #6
   25de2:	e7f9      	b.n	25dd8 <write_name+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   25de4:	f06f 040c 	mvn.w	r4, #12
   25de8:	e7f6      	b.n	25dd8 <write_name+0x32>

00025dea <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   25dea:	f3bf 8f5b 	dmb	ish
   25dee:	6800      	ldr	r0, [r0, #0]
   25df0:	f3bf 8f5b 	dmb	ish
}
   25df4:	4770      	bx	lr

00025df6 <gen_hash_m>:
{
   25df6:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   25df8:	6807      	ldr	r7, [r0, #0]
   25dfa:	783d      	ldrb	r5, [r7, #0]
{
   25dfc:	b089      	sub	sp, #36	; 0x24
   25dfe:	4606      	mov	r6, r0
   25e00:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   25e02:	b10d      	cbz	r5, 25e08 <gen_hash_m+0x12>
	switch (u16->val) {
   25e04:	2501      	movs	r5, #1
   25e06:	e014      	b.n	25e32 <gen_hash_m+0x3c>
   25e08:	887b      	ldrh	r3, [r7, #2]
   25e0a:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   25e0e:	d004      	beq.n	25e1a <gen_hash_m+0x24>
   25e10:	d812      	bhi.n	25e38 <gen_hash_m+0x42>
   25e12:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   25e16:	2b03      	cmp	r3, #3
   25e18:	d8f4      	bhi.n	25e04 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   25e1a:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25e1e:	2202      	movs	r2, #2
   25e20:	f10d 010e 	add.w	r1, sp, #14
   25e24:	4620      	mov	r0, r4
   25e26:	f7fc fd94 	bl	22952 <tc_cmac_update>
   25e2a:	b9e0      	cbnz	r0, 25e66 <gen_hash_m+0x70>
			state->err = -EINVAL;
   25e2c:	f06f 0315 	mvn.w	r3, #21
   25e30:	65a3      	str	r3, [r4, #88]	; 0x58
}
   25e32:	4628      	mov	r0, r5
   25e34:	b009      	add	sp, #36	; 0x24
   25e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   25e38:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   25e3c:	33ff      	adds	r3, #255	; 0xff
   25e3e:	b29b      	uxth	r3, r3
   25e40:	2b04      	cmp	r3, #4
   25e42:	d8df      	bhi.n	25e04 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   25e44:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25e48:	2202      	movs	r2, #2
   25e4a:	f10d 010e 	add.w	r1, sp, #14
   25e4e:	4620      	mov	r0, r4
   25e50:	f7fc fd7f 	bl	22952 <tc_cmac_update>
   25e54:	2800      	cmp	r0, #0
   25e56:	d0e9      	beq.n	25e2c <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   25e58:	887b      	ldrh	r3, [r7, #2]
   25e5a:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25e5e:	2202      	movs	r2, #2
   25e60:	f10d 010e 	add.w	r1, sp, #14
   25e64:	e017      	b.n	25e96 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   25e66:	887b      	ldrh	r3, [r7, #2]
   25e68:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25e6c:	2202      	movs	r2, #2
   25e6e:	f10d 010e 	add.w	r1, sp, #14
   25e72:	4620      	mov	r0, r4
   25e74:	f7fc fd6d 	bl	22952 <tc_cmac_update>
   25e78:	2800      	cmp	r0, #0
   25e7a:	d0d7      	beq.n	25e2c <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   25e7c:	2000      	movs	r0, #0
   25e7e:	2310      	movs	r3, #16
   25e80:	eb0d 0203 	add.w	r2, sp, r3
   25e84:	6877      	ldr	r7, [r6, #4]
   25e86:	9000      	str	r0, [sp, #0]
   25e88:	4631      	mov	r1, r6
   25e8a:	47b8      	blx	r7
		if (len < 0) {
   25e8c:	1e02      	subs	r2, r0, #0
   25e8e:	da01      	bge.n	25e94 <gen_hash_m+0x9e>
			state->err = len;
   25e90:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   25e92:	e7ce      	b.n	25e32 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   25e94:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25e96:	4620      	mov	r0, r4
   25e98:	f7fc fd5b 	bl	22952 <tc_cmac_update>
   25e9c:	2800      	cmp	r0, #0
   25e9e:	d1b1      	bne.n	25e04 <gen_hash_m+0xe>
   25ea0:	e7c4      	b.n	25e2c <gen_hash_m+0x36>

00025ea2 <atomic_or>:
{
   25ea2:	4603      	mov	r3, r0
}
   25ea4:	f3bf 8f5b 	dmb	ish
   25ea8:	e853 0f00 	ldrex	r0, [r3]
   25eac:	ea40 0201 	orr.w	r2, r0, r1
   25eb0:	e843 2c00 	strex	ip, r2, [r3]
   25eb4:	f1bc 0f00 	cmp.w	ip, #0
   25eb8:	d1f6      	bne.n	25ea8 <atomic_or+0x6>
   25eba:	f3bf 8f5b 	dmb	ish
   25ebe:	4770      	bx	lr

00025ec0 <atomic_and>:
{
   25ec0:	4603      	mov	r3, r0
}
   25ec2:	f3bf 8f5b 	dmb	ish
   25ec6:	e853 0f00 	ldrex	r0, [r3]
   25eca:	ea00 0201 	and.w	r2, r0, r1
   25ece:	e843 2c00 	strex	ip, r2, [r3]
   25ed2:	f1bc 0f00 	cmp.w	ip, #0
   25ed6:	d1f6      	bne.n	25ec6 <atomic_and+0x6>
   25ed8:	f3bf 8f5b 	dmb	ish
   25edc:	4770      	bx	lr

00025ede <clear_cf_cfg>:
{
   25ede:	b537      	push	{r0, r1, r2, r4, r5, lr}
   25ee0:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   25ee2:	2500      	movs	r5, #0
   25ee4:	4669      	mov	r1, sp
   25ee6:	3001      	adds	r0, #1
   25ee8:	9500      	str	r5, [sp, #0]
   25eea:	f8cd 5003 	str.w	r5, [sp, #3]
   25eee:	f7ff ff49 	bl	25d84 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   25ef2:	f104 0008 	add.w	r0, r4, #8
   25ef6:	2201      	movs	r2, #1
   25ef8:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   25efa:	340c      	adds	r4, #12
   25efc:	f7fe ffcb 	bl	24e96 <memset>
   25f00:	f3bf 8f5b 	dmb	ish
   25f04:	e854 3f00 	ldrex	r3, [r4]
   25f08:	e844 5200 	strex	r2, r5, [r4]
   25f0c:	2a00      	cmp	r2, #0
   25f0e:	d1f9      	bne.n	25f04 <clear_cf_cfg+0x26>
   25f10:	f3bf 8f5b 	dmb	ish
}
   25f14:	b003      	add	sp, #12
   25f16:	bd30      	pop	{r4, r5, pc}

00025f18 <ccc_find_cfg>:
{
   25f18:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   25f1a:	7803      	ldrb	r3, [r0, #0]
   25f1c:	4293      	cmp	r3, r2
{
   25f1e:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   25f20:	d001      	beq.n	25f26 <ccc_find_cfg+0xe>
	return NULL;
   25f22:	2000      	movs	r0, #0
}
   25f24:	bd10      	pop	{r4, pc}
	return memcmp(a, b, sizeof(*a));
   25f26:	2207      	movs	r2, #7
   25f28:	3001      	adds	r0, #1
   25f2a:	f7fe ff99 	bl	24e60 <memcmp>
		if (id == ccc->cfg[i].id &&
   25f2e:	2800      	cmp	r0, #0
   25f30:	d1f7      	bne.n	25f22 <ccc_find_cfg+0xa>
			return &ccc->cfg[i];
   25f32:	4620      	mov	r0, r4
   25f34:	e7f6      	b.n	25f24 <ccc_find_cfg+0xc>

00025f36 <find_ccc_cfg>:
{
   25f36:	b537      	push	{r0, r1, r2, r4, r5, lr}
   25f38:	460c      	mov	r4, r1
   25f3a:	1c4d      	adds	r5, r1, #1
		if (conn) {
   25f3c:	b148      	cbz	r0, 25f52 <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   25f3e:	7809      	ldrb	r1, [r1, #0]
   25f40:	462a      	mov	r2, r5
   25f42:	f7ff feaf 	bl	25ca4 <bt_conn_is_peer_addr_le>
   25f46:	2800      	cmp	r0, #0
	return NULL;
   25f48:	bf08      	it	eq
   25f4a:	2400      	moveq	r4, #0
}
   25f4c:	4620      	mov	r0, r4
   25f4e:	b003      	add	sp, #12
   25f50:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   25f52:	9000      	str	r0, [sp, #0]
   25f54:	2207      	movs	r2, #7
   25f56:	f8cd 0003 	str.w	r0, [sp, #3]
   25f5a:	4669      	mov	r1, sp
   25f5c:	4628      	mov	r0, r5
   25f5e:	f7fe ff7f 	bl	24e60 <memcmp>
   25f62:	2800      	cmp	r0, #0
	return NULL;
   25f64:	bf18      	it	ne
   25f66:	2400      	movne	r4, #0
   25f68:	e7f0      	b.n	25f4c <find_ccc_cfg+0x16>

00025f6a <sc_restore_rsp>:
{
   25f6a:	b538      	push	{r3, r4, r5, lr}
   25f6c:	4604      	mov	r4, r0
   25f6e:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   25f70:	f7f1 f970 	bl	17254 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   25f74:	b130      	cbz	r0, 25f84 <sc_restore_rsp+0x1a>
   25f76:	7a03      	ldrb	r3, [r0, #8]
   25f78:	07db      	lsls	r3, r3, #31
   25f7a:	d503      	bpl.n	25f84 <sc_restore_rsp+0x1a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   25f7c:	2101      	movs	r1, #1
   25f7e:	300c      	adds	r0, #12
   25f80:	f7ff ff8f 	bl	25ea2 <atomic_or>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   25f84:	b985      	cbnz	r5, 25fa8 <sc_restore_rsp+0x3e>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   25f86:	7a20      	ldrb	r0, [r4, #8]
   25f88:	f104 0188 	add.w	r1, r4, #136	; 0x88
   25f8c:	f7f1 f84c 	bl	17028 <find_sc_cfg>
		if (sc_cfg) {
   25f90:	4604      	mov	r4, r0
   25f92:	b148      	cbz	r0, 25fa8 <sc_restore_rsp+0x3e>
	memset(&cfg->data, 0, sizeof(cfg->data));
   25f94:	4629      	mov	r1, r5
   25f96:	2204      	movs	r2, #4
   25f98:	3008      	adds	r0, #8
   25f9a:	f7fe ff7c 	bl	24e96 <memset>
		sc_store(cfg);
   25f9e:	4620      	mov	r0, r4
}
   25fa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		sc_store(cfg);
   25fa4:	f7f0 bee8 	b.w	16d78 <sc_store>
}
   25fa8:	bd38      	pop	{r3, r4, r5, pc}

00025faa <read_appearance>:
{
   25faa:	b513      	push	{r0, r1, r4, lr}
   25fac:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   25fb0:	4610      	mov	r0, r2
	if (offset > value_len) {
   25fb2:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   25fb4:	f240 3241 	movw	r2, #833	; 0x341
   25fb8:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   25fbc:	d80d      	bhi.n	25fda <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   25fbe:	f1c1 0402 	rsb	r4, r1, #2
   25fc2:	429c      	cmp	r4, r3
   25fc4:	bfa8      	it	ge
   25fc6:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   25fc8:	f10d 0306 	add.w	r3, sp, #6
   25fcc:	4622      	mov	r2, r4
   25fce:	4419      	add	r1, r3
   25fd0:	f7fe ff56 	bl	24e80 <memcpy>
}
   25fd4:	4620      	mov	r0, r4
   25fd6:	b002      	add	sp, #8
   25fd8:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25fda:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   25fde:	e7f9      	b.n	25fd4 <read_appearance+0x2a>

00025fe0 <read_name>:
{
   25fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25fe4:	4698      	mov	r8, r3
   25fe6:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   25fea:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   25fec:	f7f3 fd4c 	bl	19a88 <bt_get_name>
   25ff0:	4607      	mov	r7, r0
				 strlen(name));
   25ff2:	f7fe ff0a 	bl	24e0a <strlen>
	if (offset > value_len) {
   25ff6:	b283      	uxth	r3, r0
   25ff8:	42b3      	cmp	r3, r6
   25ffa:	d30c      	bcc.n	26016 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   25ffc:	1b9c      	subs	r4, r3, r6
   25ffe:	4544      	cmp	r4, r8
   26000:	bfa8      	it	ge
   26002:	4644      	movge	r4, r8
   26004:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   26006:	4622      	mov	r2, r4
   26008:	19b9      	adds	r1, r7, r6
   2600a:	4628      	mov	r0, r5
   2600c:	f7fe ff38 	bl	24e80 <memcpy>
}
   26010:	4620      	mov	r0, r4
   26012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   26016:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2601a:	e7f9      	b.n	26010 <read_name+0x30>

0002601c <bt_gatt_attr_read_ccc>:
{
   2601c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   2601e:	68c9      	ldr	r1, [r1, #12]
{
   26020:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   26024:	4615      	mov	r5, r2
   26026:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   26028:	f7ff ff85 	bl	25f36 <find_ccc_cfg>
	if (cfg) {
   2602c:	b100      	cbz	r0, 26030 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   2602e:	8900      	ldrh	r0, [r0, #8]
   26030:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   26034:	2e02      	cmp	r6, #2
   26036:	d80e      	bhi.n	26056 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   26038:	f1c6 0402 	rsb	r4, r6, #2
   2603c:	42bc      	cmp	r4, r7
   2603e:	bfa8      	it	ge
   26040:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   26042:	f10d 0306 	add.w	r3, sp, #6
   26046:	4622      	mov	r2, r4
   26048:	1999      	adds	r1, r3, r6
   2604a:	4628      	mov	r0, r5
   2604c:	f7fe ff18 	bl	24e80 <memcpy>
}
   26050:	4620      	mov	r0, r4
   26052:	b003      	add	sp, #12
   26054:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   26056:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2605a:	e7f9      	b.n	26050 <bt_gatt_attr_read_ccc+0x34>

0002605c <cf_read>:
{
   2605c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2605e:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   26060:	2300      	movs	r3, #0
{
   26062:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   26066:	f88d 3004 	strb.w	r3, [sp, #4]
{
   2606a:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   2606c:	f7f1 f8f2 	bl	17254 <find_cf_cfg>
	if (cfg) {
   26070:	b128      	cbz	r0, 2607e <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   26072:	f100 0108 	add.w	r1, r0, #8
   26076:	2201      	movs	r2, #1
   26078:	a801      	add	r0, sp, #4
   2607a:	f7fe ff01 	bl	24e80 <memcpy>
	if (offset > value_len) {
   2607e:	2e01      	cmp	r6, #1
   26080:	d80d      	bhi.n	2609e <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   26082:	f1c6 0401 	rsb	r4, r6, #1
   26086:	42bc      	cmp	r4, r7
   26088:	bfa8      	it	ge
   2608a:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2608c:	ab01      	add	r3, sp, #4
   2608e:	4622      	mov	r2, r4
   26090:	1999      	adds	r1, r3, r6
   26092:	4628      	mov	r0, r5
   26094:	f7fe fef4 	bl	24e80 <memcpy>
}
   26098:	4620      	mov	r0, r4
   2609a:	b003      	add	sp, #12
   2609c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2609e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   260a2:	e7f9      	b.n	26098 <cf_read+0x3c>

000260a4 <bt_gatt_attr_read_service>:
{
   260a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   260a6:	68c9      	ldr	r1, [r1, #12]
{
   260a8:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   260ac:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   260ae:	780b      	ldrb	r3, [r1, #0]
{
   260b0:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   260b2:	b993      	cbnz	r3, 260da <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   260b4:	884b      	ldrh	r3, [r1, #2]
   260b6:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   260ba:	2d02      	cmp	r5, #2
   260bc:	d819      	bhi.n	260f2 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   260be:	f1c5 0202 	rsb	r2, r5, #2
   260c2:	4294      	cmp	r4, r2
   260c4:	bfa8      	it	ge
   260c6:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   260c8:	f10d 0306 	add.w	r3, sp, #6
   260cc:	4622      	mov	r2, r4
   260ce:	1959      	adds	r1, r3, r5
   260d0:	f7fe fed6 	bl	24e80 <memcpy>
}
   260d4:	4620      	mov	r0, r4
   260d6:	b003      	add	sp, #12
   260d8:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   260da:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   260dc:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   260e0:	d807      	bhi.n	260f2 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   260e2:	f1c5 0210 	rsb	r2, r5, #16
   260e6:	4294      	cmp	r4, r2
   260e8:	bfa8      	it	ge
   260ea:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   260ec:	4622      	mov	r2, r4
   260ee:	4429      	add	r1, r5
   260f0:	e7ee      	b.n	260d0 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   260f2:	f06f 0406 	mvn.w	r4, #6
   260f6:	e7ed      	b.n	260d4 <bt_gatt_attr_read_service+0x30>

000260f8 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   260f8:	2a02      	cmp	r2, #2
{
   260fa:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   260fc:	d108      	bne.n	26110 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   260fe:	2300      	movs	r3, #0
   26100:	f100 0188 	add.w	r1, r0, #136	; 0x88
   26104:	461a      	mov	r2, r3
   26106:	7a00      	ldrb	r0, [r0, #8]
   26108:	f7f0 ffb0 	bl	1706c <sc_save>
}
   2610c:	2002      	movs	r0, #2
   2610e:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   26110:	f7f1 fa26 	bl	17560 <sc_clear>
   26114:	e7fa      	b.n	2610c <sc_ccc_cfg_write+0x14>

00026116 <bt_gatt_attr_read>:
{
   26116:	b538      	push	{r3, r4, r5, lr}
   26118:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   2611c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   26120:	42a9      	cmp	r1, r5
{
   26122:	4610      	mov	r0, r2
	if (offset > value_len) {
   26124:	d80b      	bhi.n	2613e <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   26126:	1a6d      	subs	r5, r5, r1
   26128:	429d      	cmp	r5, r3
   2612a:	bfa8      	it	ge
   2612c:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   2612e:	9b05      	ldr	r3, [sp, #20]
   26130:	b2ad      	uxth	r5, r5
   26132:	462a      	mov	r2, r5
   26134:	4419      	add	r1, r3
   26136:	f7fe fea3 	bl	24e80 <memcpy>
}
   2613a:	4628      	mov	r0, r5
   2613c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2613e:	f06f 0506 	mvn.w	r5, #6
   26142:	e7fa      	b.n	2613a <bt_gatt_attr_read+0x24>

00026144 <bt_gatt_attr_value_handle>:
{
   26144:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   26146:	4604      	mov	r4, r0
   26148:	b910      	cbnz	r0, 26150 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   2614a:	2000      	movs	r0, #0
}
   2614c:	b002      	add	sp, #8
   2614e:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   26150:	2300      	movs	r3, #0
   26152:	f88d 3004 	strb.w	r3, [sp, #4]
   26156:	6800      	ldr	r0, [r0, #0]
   26158:	f642 0303 	movw	r3, #10243	; 0x2803
   2615c:	a901      	add	r1, sp, #4
   2615e:	f8ad 3006 	strh.w	r3, [sp, #6]
   26162:	f000 ff57 	bl	27014 <bt_uuid_cmp>
   26166:	2800      	cmp	r0, #0
   26168:	d1ef      	bne.n	2614a <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   2616a:	68e3      	ldr	r3, [r4, #12]
   2616c:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2616e:	2800      	cmp	r0, #0
   26170:	d1ec      	bne.n	2614c <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   26172:	4620      	mov	r0, r4
   26174:	f7f1 fad8 	bl	17728 <bt_gatt_attr_get_handle>
   26178:	3001      	adds	r0, #1
   2617a:	b280      	uxth	r0, r0
	return handle;
   2617c:	e7e6      	b.n	2614c <bt_gatt_attr_value_handle+0x8>

0002617e <bt_gatt_attr_read_chrc>:
{
   2617e:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   26180:	68cf      	ldr	r7, [r1, #12]
{
   26182:	b087      	sub	sp, #28
   26184:	4608      	mov	r0, r1
   26186:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   26188:	79bb      	ldrb	r3, [r7, #6]
   2618a:	f88d 3004 	strb.w	r3, [sp, #4]
{
   2618e:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   26192:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   26194:	f7ff ffd6 	bl	26144 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   26198:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2619a:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2619e:	780b      	ldrb	r3, [r1, #0]
   261a0:	b99b      	cbnz	r3, 261ca <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   261a2:	884b      	ldrh	r3, [r1, #2]
   261a4:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   261a8:	2105      	movs	r1, #5
	if (offset > value_len) {
   261aa:	42b1      	cmp	r1, r6
   261ac:	d315      	bcc.n	261da <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   261ae:	1b89      	subs	r1, r1, r6
   261b0:	42a1      	cmp	r1, r4
   261b2:	bfa8      	it	ge
   261b4:	4621      	movge	r1, r4
   261b6:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   261b8:	ab01      	add	r3, sp, #4
   261ba:	4622      	mov	r2, r4
   261bc:	1999      	adds	r1, r3, r6
   261be:	4628      	mov	r0, r5
   261c0:	f7fe fe5e 	bl	24e80 <memcpy>
}
   261c4:	4620      	mov	r0, r4
   261c6:	b007      	add	sp, #28
   261c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   261ca:	3101      	adds	r1, #1
   261cc:	2210      	movs	r2, #16
   261ce:	f10d 0007 	add.w	r0, sp, #7
   261d2:	f7fe fe55 	bl	24e80 <memcpy>
		value_len += 16U;
   261d6:	2113      	movs	r1, #19
   261d8:	e7e7      	b.n	261aa <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   261da:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   261de:	e7f1      	b.n	261c4 <bt_gatt_attr_read_chrc+0x46>

000261e0 <bt_gatt_foreach_attr>:
{
   261e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   261e2:	e9cd 2301 	strd	r2, r3, [sp, #4]
   261e6:	2300      	movs	r3, #0
   261e8:	9300      	str	r3, [sp, #0]
   261ea:	461a      	mov	r2, r3
   261ec:	f7f1 facc 	bl	17788 <bt_gatt_foreach_attr_type>
}
   261f0:	b005      	add	sp, #20
   261f2:	f85d fb04 	ldr.w	pc, [sp], #4

000261f6 <bt_gatt_check_perm>:
{
   261f6:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   261f8:	07d4      	lsls	r4, r2, #31
{
   261fa:	4605      	mov	r5, r0
   261fc:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   261fe:	d504      	bpl.n	2620a <bt_gatt_check_perm+0x14>
   26200:	f010 0f15 	tst.w	r0, #21
   26204:	d01e      	beq.n	26244 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   26206:	684b      	ldr	r3, [r1, #4]
   26208:	b1e3      	cbz	r3, 26244 <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2620a:	0793      	lsls	r3, r2, #30
   2620c:	d504      	bpl.n	26218 <bt_gatt_check_perm+0x22>
   2620e:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   26212:	d019      	beq.n	26248 <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   26214:	688b      	ldr	r3, [r1, #8]
   26216:	b1bb      	cbz	r3, 26248 <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   26218:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   2621c:	f014 0f30 	tst.w	r4, #48	; 0x30
   26220:	d103      	bne.n	2622a <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   26222:	f014 000c 	ands.w	r0, r4, #12
   26226:	d107      	bne.n	26238 <bt_gatt_check_perm+0x42>
}
   26228:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   2622a:	4628      	mov	r0, r5
   2622c:	f7ff fd38 	bl	25ca0 <bt_conn_get_security>
   26230:	2802      	cmp	r0, #2
   26232:	d8f6      	bhi.n	26222 <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   26234:	2005      	movs	r0, #5
   26236:	e7f7      	b.n	26228 <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   26238:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2623a:	2b00      	cmp	r3, #0
   2623c:	bf14      	ite	ne
   2623e:	2000      	movne	r0, #0
   26240:	200f      	moveq	r0, #15
   26242:	e7f1      	b.n	26228 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   26244:	2002      	movs	r0, #2
   26246:	e7ef      	b.n	26228 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   26248:	2003      	movs	r0, #3
   2624a:	e7ed      	b.n	26228 <bt_gatt_check_perm+0x32>

0002624c <bt_gatt_change_aware>:
{
   2624c:	b538      	push	{r3, r4, r5, lr}
   2624e:	460d      	mov	r5, r1
	cfg = find_cf_cfg(conn);
   26250:	f7f1 f800 	bl	17254 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   26254:	b910      	cbnz	r0, 2625c <bt_gatt_change_aware+0x10>
		return true;
   26256:	2501      	movs	r5, #1
}
   26258:	4628      	mov	r0, r5
   2625a:	bd38      	pop	{r3, r4, r5, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2625c:	7a03      	ldrb	r3, [r0, #8]
   2625e:	07d9      	lsls	r1, r3, #31
   26260:	d5f9      	bpl.n	26256 <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   26262:	f100 040c 	add.w	r4, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   26266:	4620      	mov	r0, r4
   26268:	f7ff fdbf 	bl	25dea <atomic_get>
   2626c:	07c2      	lsls	r2, r0, #31
   2626e:	d4f2      	bmi.n	26256 <bt_gatt_change_aware+0xa>
	if (!req) {
   26270:	2d00      	cmp	r5, #0
   26272:	d0f1      	beq.n	26258 <bt_gatt_change_aware+0xc>
   26274:	4620      	mov	r0, r4
   26276:	f7ff fdb8 	bl	25dea <atomic_get>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   2627a:	0783      	lsls	r3, r0, #30
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2627c:	f3c0 0540 	ubfx	r5, r0, #1, #1
   26280:	d509      	bpl.n	26296 <bt_gatt_change_aware+0x4a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   26282:	f06f 0102 	mvn.w	r1, #2
   26286:	4620      	mov	r0, r4
   26288:	f7ff fe1a 	bl	25ec0 <atomic_and>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2628c:	2101      	movs	r1, #1
   2628e:	4620      	mov	r0, r4
   26290:	f7ff fe07 	bl	25ea2 <atomic_or>
}
   26294:	e7e0      	b.n	26258 <bt_gatt_change_aware+0xc>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   26296:	2102      	movs	r1, #2
   26298:	e7f9      	b.n	2628e <bt_gatt_change_aware+0x42>

0002629a <ccc_delayed_store>:
{
   2629a:	b570      	push	{r4, r5, r6, lr}
		struct bt_conn *conn = ccc_store->conn_list[i];
   2629c:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   262a0:	4605      	mov	r5, r0
		if (!conn) {
   262a2:	b194      	cbz	r4, 262ca <ccc_delayed_store+0x30>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   262a4:	f104 0688 	add.w	r6, r4, #136	; 0x88
   262a8:	7a20      	ldrb	r0, [r4, #8]
   262aa:	4631      	mov	r1, r6
   262ac:	f000 f8df 	bl	2646e <bt_addr_le_is_bonded>
   262b0:	b158      	cbz	r0, 262ca <ccc_delayed_store+0x30>
			ccc_store->conn_list[i] = NULL;
   262b2:	2300      	movs	r3, #0
   262b4:	f845 3c08 	str.w	r3, [r5, #-8]
			bt_gatt_store_ccc(conn->id, &conn->le.dst);
   262b8:	7a20      	ldrb	r0, [r4, #8]
   262ba:	4631      	mov	r1, r6
   262bc:	f7f1 ff36 	bl	1812c <bt_gatt_store_ccc>
			bt_conn_unref(conn);
   262c0:	4620      	mov	r0, r4
}
   262c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   262c6:	f7ff bc4f 	b.w	25b68 <bt_conn_unref>
}
   262ca:	bd70      	pop	{r4, r5, r6, pc}

000262cc <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   262cc:	280f      	cmp	r0, #15
   262ce:	d806      	bhi.n	262de <bt_hci_evt_get_flags+0x12>
   262d0:	280d      	cmp	r0, #13
   262d2:	d80b      	bhi.n	262ec <bt_hci_evt_get_flags+0x20>
   262d4:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   262d6:	bf14      	ite	ne
   262d8:	2002      	movne	r0, #2
   262da:	2003      	moveq	r0, #3
   262dc:	4770      	bx	lr
	switch (evt) {
   262de:	2813      	cmp	r0, #19
   262e0:	d004      	beq.n	262ec <bt_hci_evt_get_flags+0x20>
   262e2:	281a      	cmp	r0, #26
   262e4:	bf14      	ite	ne
   262e6:	2002      	movne	r0, #2
   262e8:	2001      	moveq	r0, #1
   262ea:	4770      	bx	lr
   262ec:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   262ee:	4770      	bx	lr

000262f0 <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   262f0:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   262f4:	b193      	cbz	r3, 2631c <update_sec_level+0x2c>
   262f6:	7b5a      	ldrb	r2, [r3, #13]
   262f8:	07d1      	lsls	r1, r2, #31
   262fa:	d50f      	bpl.n	2631c <update_sec_level+0x2c>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   262fc:	06d2      	lsls	r2, r2, #27
   262fe:	d50b      	bpl.n	26318 <update_sec_level+0x28>
   26300:	7b1b      	ldrb	r3, [r3, #12]
   26302:	2b10      	cmp	r3, #16
   26304:	d108      	bne.n	26318 <update_sec_level+0x28>
			conn->sec_level = BT_SECURITY_L4;
   26306:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
   26308:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   2630a:	7a82      	ldrb	r2, [r0, #10]
   2630c:	7a40      	ldrb	r0, [r0, #9]
}
   2630e:	4282      	cmp	r2, r0
   26310:	bf8c      	ite	hi
   26312:	2000      	movhi	r0, #0
   26314:	2001      	movls	r0, #1
   26316:	4770      	bx	lr
			conn->sec_level = BT_SECURITY_L3;
   26318:	2303      	movs	r3, #3
   2631a:	e7f5      	b.n	26308 <update_sec_level+0x18>
		conn->sec_level = BT_SECURITY_L2;
   2631c:	2302      	movs	r3, #2
   2631e:	e7f3      	b.n	26308 <update_sec_level+0x18>

00026320 <atomic_or>:
{
   26320:	4603      	mov	r3, r0
}
   26322:	f3bf 8f5b 	dmb	ish
   26326:	e853 0f00 	ldrex	r0, [r3]
   2632a:	ea40 0201 	orr.w	r2, r0, r1
   2632e:	e843 2c00 	strex	ip, r2, [r3]
   26332:	f1bc 0f00 	cmp.w	ip, #0
   26336:	d1f6      	bne.n	26326 <atomic_or+0x6>
   26338:	f3bf 8f5b 	dmb	ish
   2633c:	4770      	bx	lr

0002633e <unpair_remote>:
{
   2633e:	460b      	mov	r3, r1
	unpair(*id, &info->addr);
   26340:	4601      	mov	r1, r0
   26342:	7818      	ldrb	r0, [r3, #0]
   26344:	f7f2 b848 	b.w	183d8 <unpair>

00026348 <sys_put_le64>:
	dst[1] = val >> 8;
   26348:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   2634c:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   2634e:	0e00      	lsrs	r0, r0, #24
   26350:	7053      	strb	r3, [r2, #1]
   26352:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   26354:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   26356:	f3c1 2007 	ubfx	r0, r1, #8, #8
   2635a:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   2635c:	7093      	strb	r3, [r2, #2]
   2635e:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   26360:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   26362:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   26364:	71d1      	strb	r1, [r2, #7]
}
   26366:	4770      	bx	lr

00026368 <bt_hci_disconnect>:
{
   26368:	b570      	push	{r4, r5, r6, lr}
   2636a:	4606      	mov	r6, r0
   2636c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   2636e:	f240 4006 	movw	r0, #1030	; 0x406
   26372:	2103      	movs	r1, #3
   26374:	f7f2 fd2e 	bl	18dd4 <bt_hci_cmd_create>
	if (!buf) {
   26378:	4604      	mov	r4, r0
   2637a:	b168      	cbz	r0, 26398 <bt_hci_disconnect+0x30>
   2637c:	2103      	movs	r1, #3
   2637e:	3008      	adds	r0, #8
   26380:	f000 ff3a 	bl	271f8 <net_buf_simple_add>
	disconn->reason = reason;
   26384:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   26386:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   26388:	4621      	mov	r1, r4
   2638a:	2200      	movs	r2, #0
}
   2638c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   26390:	f240 4006 	movw	r0, #1030	; 0x406
   26394:	f7f2 be7a 	b.w	1908c <bt_hci_cmd_send_sync>
}
   26398:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2639c:	bd70      	pop	{r4, r5, r6, pc}

0002639e <bt_le_set_data_len>:
{
   2639e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   263a0:	4607      	mov	r7, r0
   263a2:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   263a4:	f242 0022 	movw	r0, #8226	; 0x2022
   263a8:	2106      	movs	r1, #6
{
   263aa:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   263ac:	f7f2 fd12 	bl	18dd4 <bt_hci_cmd_create>
	if (!buf) {
   263b0:	4604      	mov	r4, r0
   263b2:	b170      	cbz	r0, 263d2 <bt_le_set_data_len+0x34>
   263b4:	2106      	movs	r1, #6
   263b6:	3008      	adds	r0, #8
   263b8:	f000 ff1e 	bl	271f8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   263bc:	883b      	ldrh	r3, [r7, #0]
   263be:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   263c0:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   263c2:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   263c4:	4621      	mov	r1, r4
   263c6:	f242 0022 	movw	r0, #8226	; 0x2022
}
   263ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   263ce:	f7f2 bd39 	b.w	18e44 <bt_hci_cmd_send>
}
   263d2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   263d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000263d8 <bt_le_set_phy>:
{
   263d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   263dc:	4680      	mov	r8, r0
   263de:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   263e0:	f242 0032 	movw	r0, #8242	; 0x2032
   263e4:	2107      	movs	r1, #7
{
   263e6:	f89d 9020 	ldrb.w	r9, [sp, #32]
   263ea:	4616      	mov	r6, r2
   263ec:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   263ee:	f7f2 fcf1 	bl	18dd4 <bt_hci_cmd_create>
	if (!buf) {
   263f2:	4604      	mov	r4, r0
   263f4:	b190      	cbz	r0, 2641c <bt_le_set_phy+0x44>
   263f6:	2107      	movs	r1, #7
   263f8:	3008      	adds	r0, #8
   263fa:	f000 fefd 	bl	271f8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   263fe:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   26402:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   26404:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   26406:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   26408:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   2640a:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   2640e:	4621      	mov	r1, r4
   26410:	f242 0032 	movw	r0, #8242	; 0x2032
}
   26414:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   26418:	f7f2 bd14 	b.w	18e44 <bt_hci_cmd_send>
}
   2641c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   26420:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00026424 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   26424:	6880      	ldr	r0, [r0, #8]
   26426:	f7f2 bfb9 	b.w	1939c <bt_hci_le_enh_conn_complete>

0002642a <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   2642a:	8802      	ldrh	r2, [r0, #0]
   2642c:	8843      	ldrh	r3, [r0, #2]
   2642e:	429a      	cmp	r2, r3
{
   26430:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   26432:	d818      	bhi.n	26466 <bt_le_conn_params_valid+0x3c>
   26434:	2a05      	cmp	r2, #5
   26436:	d916      	bls.n	26466 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   26438:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   2643c:	d813      	bhi.n	26466 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   2643e:	8884      	ldrh	r4, [r0, #4]
   26440:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   26444:	d20f      	bcs.n	26466 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   26446:	88c1      	ldrh	r1, [r0, #6]
   26448:	f1a1 020a 	sub.w	r2, r1, #10
   2644c:	b292      	uxth	r2, r2
   2644e:	f640 4076 	movw	r0, #3190	; 0xc76
   26452:	4282      	cmp	r2, r0
   26454:	d807      	bhi.n	26466 <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   26456:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   2645a:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   2645e:	bf34      	ite	cc
   26460:	2001      	movcc	r0, #1
   26462:	2000      	movcs	r0, #0
}
   26464:	bd10      	pop	{r4, pc}
		return false;
   26466:	2000      	movs	r0, #0
   26468:	e7fc      	b.n	26464 <bt_le_conn_params_valid+0x3a>

0002646a <bt_send>:
		return bt_hci_ecc_send(buf);
   2646a:	f7f3 bc4b 	b.w	19d04 <bt_hci_ecc_send>

0002646e <bt_addr_le_is_bonded>:

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   2646e:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   26470:	f7f4 faac 	bl	1a9cc <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   26474:	b118      	cbz	r0, 2647e <bt_addr_le_is_bonded+0x10>
   26476:	89c0      	ldrh	r0, [r0, #14]
   26478:	3800      	subs	r0, #0
   2647a:	bf18      	it	ne
   2647c:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   2647e:	bd08      	pop	{r3, pc}

00026480 <send_cmd_status>:
{
   26480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   26484:	f04f 32ff 	mov.w	r2, #4294967295
{
   26488:	4606      	mov	r6, r0
   2648a:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   2648c:	f04f 33ff 	mov.w	r3, #4294967295
   26490:	2100      	movs	r1, #0
   26492:	200f      	movs	r0, #15
   26494:	f7ef fc72 	bl	15d7c <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   26498:	2701      	movs	r7, #1
   2649a:	f100 0808 	add.w	r8, r0, #8
   2649e:	4604      	mov	r4, r0
   264a0:	7507      	strb	r7, [r0, #20]
   264a2:	2102      	movs	r1, #2
   264a4:	4640      	mov	r0, r8
   264a6:	f000 fea7 	bl	271f8 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   264aa:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   264ac:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   264ae:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   264b0:	7041      	strb	r1, [r0, #1]
   264b2:	4640      	mov	r0, r8
   264b4:	f000 fea0 	bl	271f8 <net_buf_simple_add>
	evt->ncmd = 1U;
   264b8:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   264ba:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   264bc:	8046      	strh	r6, [r0, #2]
		bt_recv(buf);
   264be:	4620      	mov	r0, r4
}
   264c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv(buf);
   264c4:	f7f3 b952 	b.w	1976c <bt_recv>

000264c8 <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   264c8:	f101 0320 	add.w	r3, r1, #32
   264cc:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   264ce:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   264d2:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   264d6:	428b      	cmp	r3, r1
   264d8:	d1f9      	bne.n	264ce <sys_memcpy_swap.constprop.0+0x6>
}
   264da:	4770      	bx	lr

000264dc <bt_hci_ecc_supported_commands>:
	supported_commands[34] |= BIT(2);
   264dc:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   264e0:	f043 0306 	orr.w	r3, r3, #6
   264e4:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	supported_commands[41] |= BIT(2);
   264e8:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   264ec:	f043 0304 	orr.w	r3, r3, #4
   264f0:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
}
   264f4:	4770      	bx	lr

000264f6 <default_CSPRNG>:
{
   264f6:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   264f8:	f7f8 fc7a 	bl	1edf0 <bt_rand>
}
   264fc:	fab0 f080 	clz	r0, r0
   26500:	0940      	lsrs	r0, r0, #5
   26502:	bd08      	pop	{r3, pc}

00026504 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   26504:	2207      	movs	r2, #7
   26506:	f7fe bcbb 	b.w	24e80 <memcpy>

0002650a <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2650a:	f3bf 8f5b 	dmb	ish
   2650e:	6800      	ldr	r0, [r0, #0]
   26510:	f3bf 8f5b 	dmb	ish
}
   26514:	4770      	bx	lr

00026516 <atomic_test_bit>:
{
   26516:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   26518:	f7ff fff7 	bl	2650a <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2651c:	4108      	asrs	r0, r1
}
   2651e:	f000 0001 	and.w	r0, r0, #1
   26522:	bd08      	pop	{r3, pc}

00026524 <adv_is_private_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   26524:	f100 0210 	add.w	r2, r0, #16
{
   26528:	b510      	push	{r4, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   2652a:	4610      	mov	r0, r2
{
   2652c:	460c      	mov	r4, r1
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   2652e:	2106      	movs	r1, #6
   26530:	f7ff fff1 	bl	26516 <atomic_test_bit>
   26534:	b130      	cbz	r0, 26544 <adv_is_private_enabled+0x20>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
   26536:	210c      	movs	r1, #12
   26538:	4610      	mov	r0, r2
   2653a:	f7ff ffec 	bl	26516 <atomic_test_bit>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   2653e:	b908      	cbnz	r0, 26544 <adv_is_private_enabled+0x20>
		*adv_enabled = true;
   26540:	2301      	movs	r3, #1
   26542:	7023      	strb	r3, [r4, #0]
}
   26544:	bd10      	pop	{r4, pc}

00026546 <atomic_or>:
{
   26546:	4603      	mov	r3, r0
}
   26548:	f3bf 8f5b 	dmb	ish
   2654c:	e853 0f00 	ldrex	r0, [r3]
   26550:	ea40 0201 	orr.w	r2, r0, r1
   26554:	e843 2c00 	strex	ip, r2, [r3]
   26558:	f1bc 0f00 	cmp.w	ip, #0
   2655c:	d1f6      	bne.n	2654c <atomic_or+0x6>
   2655e:	f3bf 8f5b 	dmb	ish
   26562:	4770      	bx	lr

00026564 <addr_res_enable>:
{
   26564:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   26566:	2101      	movs	r1, #1
{
   26568:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2656a:	f242 002d 	movw	r0, #8237	; 0x202d
   2656e:	f7f2 fc31 	bl	18dd4 <bt_hci_cmd_create>
	if (!buf) {
   26572:	4604      	mov	r4, r0
   26574:	b158      	cbz	r0, 2658e <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   26576:	4629      	mov	r1, r5
   26578:	3008      	adds	r0, #8
   2657a:	f000 fe4c 	bl	27216 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2657e:	4621      	mov	r1, r4
   26580:	2200      	movs	r2, #0
}
   26582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   26586:	f242 002d 	movw	r0, #8237	; 0x202d
   2658a:	f7f2 bd7f 	b.w	1908c <bt_hci_cmd_send_sync>
}
   2658e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   26592:	bd38      	pop	{r3, r4, r5, pc}

00026594 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   26594:	7a03      	ldrb	r3, [r0, #8]
   26596:	075b      	lsls	r3, r3, #29
{
   26598:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   2659a:	d505      	bpl.n	265a8 <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   2659c:	4601      	mov	r1, r0
   2659e:	322a      	adds	r2, #42	; 0x2a
   265a0:	f811 0b01 	ldrb.w	r0, [r1], #1
   265a4:	f7f3 bc40 	b.w	19e28 <hci_id_add>
}
   265a8:	4770      	bx	lr

000265aa <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   265aa:	f100 0210 	add.w	r2, r0, #16
{
   265ae:	b510      	push	{r4, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   265b0:	2106      	movs	r1, #6
{
   265b2:	4604      	mov	r4, r0
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   265b4:	4610      	mov	r0, r2
   265b6:	f7ff ffae 	bl	26516 <atomic_test_bit>
   265ba:	b150      	cbz	r0, 265d2 <adv_pause_enabled+0x28>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   265bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   265c0:	4610      	mov	r0, r2
   265c2:	f7ff ffc0 	bl	26546 <atomic_or>
		bt_le_adv_set_enable(adv, false);
   265c6:	4620      	mov	r0, r4
   265c8:	2100      	movs	r1, #0
}
   265ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_set_enable(adv, false);
   265ce:	f7fe be3e 	b.w	2524e <bt_le_adv_set_enable>
}
   265d2:	bd10      	pop	{r4, pc}

000265d4 <adv_rpa_invalidate>:
	if (!atomic_test_bit(adv->flags, BT_ADV_LIMITED)) {
   265d4:	f100 0210 	add.w	r2, r0, #16
{
   265d8:	b508      	push	{r3, lr}
	if (!atomic_test_bit(adv->flags, BT_ADV_LIMITED)) {
   265da:	2105      	movs	r1, #5
   265dc:	4610      	mov	r0, r2
   265de:	f7ff ff9a 	bl	26516 <atomic_test_bit>
   265e2:	b958      	cbnz	r0, 265fc <adv_rpa_invalidate+0x28>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   265e4:	f3bf 8f5b 	dmb	ish
   265e8:	e852 3f00 	ldrex	r3, [r2]
   265ec:	f023 0310 	bic.w	r3, r3, #16
   265f0:	e842 3100 	strex	r1, r3, [r2]
   265f4:	2900      	cmp	r1, #0
   265f6:	d1f7      	bne.n	265e8 <adv_rpa_invalidate+0x14>
   265f8:	f3bf 8f5b 	dmb	ish
}
   265fc:	bd08      	pop	{r3, pc}

000265fe <adv_unpause_enabled>:
   265fe:	f100 0310 	add.w	r3, r0, #16
   26602:	f3bf 8f5b 	dmb	ish
   26606:	e853 2f00 	ldrex	r2, [r3]
   2660a:	f422 4180 	bic.w	r1, r2, #16384	; 0x4000
   2660e:	e843 1c00 	strex	ip, r1, [r3]
   26612:	f1bc 0f00 	cmp.w	ip, #0
   26616:	d1f6      	bne.n	26606 <adv_unpause_enabled+0x8>
   26618:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   2661c:	0453      	lsls	r3, r2, #17
   2661e:	d502      	bpl.n	26626 <adv_unpause_enabled+0x28>
		bt_le_adv_set_enable(adv, true);
   26620:	2101      	movs	r1, #1
   26622:	f7fe be14 	b.w	2524e <bt_le_adv_set_enable>
}
   26626:	4770      	bx	lr

00026628 <bt_lookup_id_addr>:
{
   26628:	b510      	push	{r4, lr}
   2662a:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   2662c:	f7f4 f994 	bl	1a958 <bt_keys_find_irk>
		if (keys) {
   26630:	b100      	cbz	r0, 26634 <bt_lookup_id_addr+0xc>
			return &keys->addr;
   26632:	1c44      	adds	r4, r0, #1
}
   26634:	4620      	mov	r0, r4
   26636:	bd10      	pop	{r4, pc}

00026638 <bt_id_set_adv_private_addr>:
		return bt_id_set_private_addr(adv->id);
   26638:	7800      	ldrb	r0, [r0, #0]
   2663a:	f7f3 bce5 	b.w	1a008 <bt_id_set_private_addr>

0002663e <bt_id_adv_random_addr_check>:
}
   2663e:	2001      	movs	r0, #1
   26640:	4770      	bx	lr

00026642 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   26642:	7a03      	ldrb	r3, [r0, #8]
   26644:	07d9      	lsls	r1, r3, #31
   26646:	d504      	bpl.n	26652 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   26648:	f023 0301 	bic.w	r3, r3, #1
   2664c:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   2664e:	f7f3 bd85 	b.w	1a15c <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   26652:	0799      	lsls	r1, r3, #30
   26654:	d504      	bpl.n	26660 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   26656:	f023 0302 	bic.w	r3, r3, #2
   2665a:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   2665c:	f7f3 be4c 	b.w	1a2f8 <bt_id_del>
}
   26660:	4770      	bx	lr

00026662 <id_add>:
	bt_id_add(keys);
   26662:	f7f3 bd7b 	b.w	1a15c <bt_id_add>

00026666 <bt_keys_get_type>:
{
   26666:	b570      	push	{r4, r5, r6, lr}
   26668:	4604      	mov	r4, r0
   2666a:	460d      	mov	r5, r1
   2666c:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   2666e:	f7f4 f95d 	bl	1a92c <bt_keys_find>
	if (keys) {
   26672:	b938      	cbnz	r0, 26684 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   26674:	4631      	mov	r1, r6
   26676:	4628      	mov	r0, r5
   26678:	f7f4 f8e4 	bl	1a844 <bt_keys_get_addr>
	if (!keys) {
   2667c:	b110      	cbz	r0, 26684 <bt_keys_get_type+0x1e>
	keys->keys |= type;
   2667e:	89c3      	ldrh	r3, [r0, #14]
   26680:	431c      	orrs	r4, r3
   26682:	81c4      	strh	r4, [r0, #14]
}
   26684:	bd70      	pop	{r4, r5, r6, pc}

00026686 <bt_keys_add_type>:
	keys->keys |= type;
   26686:	89c3      	ldrh	r3, [r0, #14]
   26688:	4319      	orrs	r1, r3
   2668a:	81c1      	strh	r1, [r0, #14]
}
   2668c:	4770      	bx	lr

0002668e <l2cap_connected>:
}
   2668e:	4770      	bx	lr

00026690 <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   26690:	3010      	adds	r0, #16
   26692:	f002 b908 	b.w	288a6 <k_work_cancel_delayable>

00026696 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   26696:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   26698:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2669a:	b17b      	cbz	r3, 266bc <bt_l2cap_chan_remove+0x26>
   2669c:	3b08      	subs	r3, #8
   2669e:	2200      	movs	r2, #0
   266a0:	b163      	cbz	r3, 266bc <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   266a2:	428b      	cmp	r3, r1
   266a4:	f103 0408 	add.w	r4, r3, #8
   266a8:	d10f      	bne.n	266ca <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   266aa:	688b      	ldr	r3, [r1, #8]
   266ac:	b93a      	cbnz	r2, 266be <bt_l2cap_chan_remove+0x28>
   266ae:	6d42      	ldr	r2, [r0, #84]	; 0x54
	list->head = node;
   266b0:	6503      	str	r3, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   266b2:	4294      	cmp	r4, r2
   266b4:	d100      	bne.n	266b8 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   266b6:	6543      	str	r3, [r0, #84]	; 0x54
	parent->next = child;
   266b8:	2300      	movs	r3, #0
   266ba:	608b      	str	r3, [r1, #8]
}
   266bc:	bd10      	pop	{r4, pc}
   266be:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   266c0:	6d43      	ldr	r3, [r0, #84]	; 0x54
   266c2:	429c      	cmp	r4, r3
	list->tail = node;
   266c4:	bf08      	it	eq
   266c6:	6542      	streq	r2, [r0, #84]	; 0x54
}
   266c8:	e7f6      	b.n	266b8 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   266ca:	2c00      	cmp	r4, #0
   266cc:	d0f6      	beq.n	266bc <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   266ce:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   266d0:	2b00      	cmp	r3, #0
   266d2:	d0f3      	beq.n	266bc <bt_l2cap_chan_remove+0x26>
   266d4:	3b08      	subs	r3, #8
   266d6:	4622      	mov	r2, r4
   266d8:	e7e2      	b.n	266a0 <bt_l2cap_chan_remove+0xa>

000266da <bt_l2cap_chan_del>:
{
   266da:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   266dc:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   266e0:	4604      	mov	r4, r0
	if (!chan->conn) {
   266e2:	b123      	cbz	r3, 266ee <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   266e4:	686b      	ldr	r3, [r5, #4]
   266e6:	b103      	cbz	r3, 266ea <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   266e8:	4798      	blx	r3
	chan->conn = NULL;
   266ea:	2300      	movs	r3, #0
   266ec:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   266ee:	68e3      	ldr	r3, [r4, #12]
   266f0:	b10b      	cbz	r3, 266f6 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   266f2:	4620      	mov	r0, r4
   266f4:	4798      	blx	r3
	if (ops->released) {
   266f6:	69eb      	ldr	r3, [r5, #28]
   266f8:	b11b      	cbz	r3, 26702 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   266fa:	4620      	mov	r0, r4
}
   266fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   26700:	4718      	bx	r3
}
   26702:	bd70      	pop	{r4, r5, r6, pc}

00026704 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   26704:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   26706:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   26708:	b18b      	cbz	r3, 2672e <bt_l2cap_disconnected+0x2a>
   2670a:	f1b3 0008 	subs.w	r0, r3, #8
   2670e:	d00e      	beq.n	2672e <bt_l2cap_disconnected+0x2a>
   26710:	681c      	ldr	r4, [r3, #0]
   26712:	b104      	cbz	r4, 26716 <bt_l2cap_disconnected+0x12>
   26714:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   26716:	f7ff ffe0 	bl	266da <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2671a:	b144      	cbz	r4, 2672e <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2671c:	f114 0308 	adds.w	r3, r4, #8
   26720:	d002      	beq.n	26728 <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   26722:	68a3      	ldr	r3, [r4, #8]
   26724:	b103      	cbz	r3, 26728 <bt_l2cap_disconnected+0x24>
   26726:	3b08      	subs	r3, #8
{
   26728:	4620      	mov	r0, r4
   2672a:	461c      	mov	r4, r3
   2672c:	e7f3      	b.n	26716 <bt_l2cap_disconnected+0x12>
}
   2672e:	bd10      	pop	{r4, pc}

00026730 <bt_l2cap_security_changed>:
{
   26730:	b538      	push	{r3, r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   26732:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   26734:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   26736:	b1a3      	cbz	r3, 26762 <bt_l2cap_security_changed+0x32>
   26738:	f1b3 0008 	subs.w	r0, r3, #8
   2673c:	d011      	beq.n	26762 <bt_l2cap_security_changed+0x32>
   2673e:	681c      	ldr	r4, [r3, #0]
   26740:	b104      	cbz	r4, 26744 <bt_l2cap_security_changed+0x14>
   26742:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   26744:	6843      	ldr	r3, [r0, #4]
   26746:	689b      	ldr	r3, [r3, #8]
   26748:	b10b      	cbz	r3, 2674e <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   2674a:	4629      	mov	r1, r5
   2674c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2674e:	b144      	cbz	r4, 26762 <bt_l2cap_security_changed+0x32>
Z_GENLIST_PEEK_NEXT(slist, snode)
   26750:	f114 0308 	adds.w	r3, r4, #8
   26754:	d002      	beq.n	2675c <bt_l2cap_security_changed+0x2c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   26756:	68a3      	ldr	r3, [r4, #8]
   26758:	b103      	cbz	r3, 2675c <bt_l2cap_security_changed+0x2c>
   2675a:	3b08      	subs	r3, #8
{
   2675c:	4620      	mov	r0, r4
   2675e:	461c      	mov	r4, r3
   26760:	e7f0      	b.n	26744 <bt_l2cap_security_changed+0x14>
}
   26762:	bd38      	pop	{r3, r4, r5, pc}

00026764 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   26764:	3104      	adds	r1, #4
   26766:	f7ef be69 	b.w	1643c <bt_conn_create_pdu_timeout>

0002676a <bt_l2cap_send_cb>:
{
   2676a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2676e:	4614      	mov	r4, r2
   26770:	4605      	mov	r5, r0
   26772:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   26774:	f102 0008 	add.w	r0, r2, #8
   26778:	2104      	movs	r1, #4
   2677a:	461e      	mov	r6, r3
   2677c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   26780:	f000 fd51 	bl	27226 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   26784:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   26786:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   26788:	3a04      	subs	r2, #4
   2678a:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2678c:	4643      	mov	r3, r8
   2678e:	4632      	mov	r2, r6
   26790:	4621      	mov	r1, r4
   26792:	4628      	mov	r0, r5
}
   26794:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   26798:	f7ef bcb0 	b.w	160fc <bt_conn_send_cb>

0002679c <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2679c:	6d00      	ldr	r0, [r0, #80]	; 0x50
   2679e:	b160      	cbz	r0, 267ba <bt_l2cap_le_lookup_tx_cid+0x1e>
   267a0:	3808      	subs	r0, #8
   267a2:	b900      	cbnz	r0, 267a6 <bt_l2cap_le_lookup_tx_cid+0xa>
   267a4:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   267a6:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
   267aa:	428b      	cmp	r3, r1
   267ac:	d005      	beq.n	267ba <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   267ae:	f110 0308 	adds.w	r3, r0, #8
   267b2:	d001      	beq.n	267b8 <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   267b4:	6880      	ldr	r0, [r0, #8]
   267b6:	e7f2      	b.n	2679e <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   267b8:	4618      	mov	r0, r3
}
   267ba:	4770      	bx	lr

000267bc <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   267bc:	6d00      	ldr	r0, [r0, #80]	; 0x50
   267be:	b160      	cbz	r0, 267da <bt_l2cap_le_lookup_rx_cid+0x1e>
   267c0:	3808      	subs	r0, #8
   267c2:	b900      	cbnz	r0, 267c6 <bt_l2cap_le_lookup_rx_cid+0xa>
   267c4:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   267c6:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   267ca:	428b      	cmp	r3, r1
   267cc:	d005      	beq.n	267da <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   267ce:	f110 0308 	adds.w	r3, r0, #8
   267d2:	d001      	beq.n	267d8 <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   267d4:	6880      	ldr	r0, [r0, #8]
   267d6:	e7f2      	b.n	267be <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   267d8:	4618      	mov	r0, r3
}
   267da:	4770      	bx	lr

000267dc <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   267dc:	4770      	bx	lr

000267de <bt_settings_decode_key>:
{
   267de:	b570      	push	{r4, r5, r6, lr}
   267e0:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   267e2:	2100      	movs	r1, #0
{
   267e4:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   267e6:	f7fe f9ed 	bl	24bc4 <settings_name_next>
   267ea:	280d      	cmp	r0, #13
   267ec:	d118      	bne.n	26820 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   267ee:	7b23      	ldrb	r3, [r4, #12]
   267f0:	2b30      	cmp	r3, #48	; 0x30
   267f2:	d111      	bne.n	26818 <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   267f4:	2300      	movs	r3, #0
   267f6:	702b      	strb	r3, [r5, #0]
   267f8:	f104 060c 	add.w	r6, r4, #12
   267fc:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   267fe:	462a      	mov	r2, r5
   26800:	4620      	mov	r0, r4
   26802:	2301      	movs	r3, #1
   26804:	2102      	movs	r1, #2
   26806:	3402      	adds	r4, #2
   26808:	f7fd fa6e 	bl	23ce8 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   2680c:	42b4      	cmp	r4, r6
   2680e:	f105 35ff 	add.w	r5, r5, #4294967295
   26812:	d1f4      	bne.n	267fe <bt_settings_decode_key+0x20>
	return 0;
   26814:	2000      	movs	r0, #0
}
   26816:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   26818:	2b31      	cmp	r3, #49	; 0x31
   2681a:	d101      	bne.n	26820 <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   2681c:	2301      	movs	r3, #1
   2681e:	e7ea      	b.n	267f6 <bt_settings_decode_key+0x18>
		return -EINVAL;
   26820:	f06f 0015 	mvn.w	r0, #21
   26824:	e7f7      	b.n	26816 <bt_settings_decode_key+0x38>

00026826 <sys_memcpy_swap>:
	psrc += length - 1;
   26826:	1e53      	subs	r3, r2, #1
   26828:	4419      	add	r1, r3
	for (; length > 0; length--) {
   2682a:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   2682c:	f811 3901 	ldrb.w	r3, [r1], #-1
   26830:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   26834:	4290      	cmp	r0, r2
   26836:	d1f9      	bne.n	2682c <sys_memcpy_swap+0x6>
}
   26838:	4770      	bx	lr

0002683a <sys_mem_swap>:
{
   2683a:	b510      	push	{r4, lr}
   2683c:	1843      	adds	r3, r0, r1
   2683e:	eb00 0151 	add.w	r1, r0, r1, lsr #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   26842:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
		uint8_t tmp = ((uint8_t *)buf)[i];
   26846:	7802      	ldrb	r2, [r0, #0]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   26848:	f800 4b01 	strb.w	r4, [r0], #1
	for (i = 0; i < (length/2); i++) {
   2684c:	4288      	cmp	r0, r1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2684e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   26850:	d1f7      	bne.n	26842 <sys_mem_swap+0x8>
	}
}
   26852:	bd10      	pop	{r4, pc}

00026854 <smp_pairing_rsp>:
}
   26854:	2007      	movs	r0, #7
   26856:	4770      	bx	lr

00026858 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   26858:	2301      	movs	r3, #1
   2685a:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2685c:	f3bf 8f5b 	dmb	ish
   26860:	e850 2f00 	ldrex	r2, [r0]
   26864:	431a      	orrs	r2, r3
   26866:	e840 2100 	strex	r1, r2, [r0]
   2686a:	2900      	cmp	r1, #0
   2686c:	d1f8      	bne.n	26860 <atomic_set_bit+0x8>
   2686e:	f3bf 8f5b 	dmb	ish
}
   26872:	4770      	bx	lr

00026874 <smp_keypress_notif>:
{
   26874:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   26876:	210e      	movs	r1, #14
   26878:	f7ff ffee 	bl	26858 <atomic_set_bit>
}
   2687c:	2000      	movs	r0, #0
   2687e:	bd08      	pop	{r3, pc}

00026880 <bt_smp_aes_cmac>:
{
   26880:	b570      	push	{r4, r5, r6, lr}
   26882:	b0c2      	sub	sp, #264	; 0x108
   26884:	460d      	mov	r5, r1
   26886:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   26888:	4601      	mov	r1, r0
   2688a:	aa16      	add	r2, sp, #88	; 0x58
   2688c:	4668      	mov	r0, sp
{
   2688e:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   26890:	f7fc f834 	bl	228fc <tc_cmac_setup>
   26894:	b150      	cbz	r0, 268ac <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   26896:	4632      	mov	r2, r6
   26898:	4629      	mov	r1, r5
   2689a:	4668      	mov	r0, sp
   2689c:	f7fc f859 	bl	22952 <tc_cmac_update>
   268a0:	b120      	cbz	r0, 268ac <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   268a2:	4669      	mov	r1, sp
   268a4:	4620      	mov	r0, r4
   268a6:	f7fc f8c0 	bl	22a2a <tc_cmac_final>
   268aa:	b918      	cbnz	r0, 268b4 <bt_smp_aes_cmac+0x34>
		return -EIO;
   268ac:	f06f 0004 	mvn.w	r0, #4
}
   268b0:	b042      	add	sp, #264	; 0x108
   268b2:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   268b4:	2000      	movs	r0, #0
   268b6:	e7fb      	b.n	268b0 <bt_smp_aes_cmac+0x30>

000268b8 <smp_f4>:
{
   268b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   268ba:	b097      	sub	sp, #92	; 0x5c
   268bc:	4614      	mov	r4, r2
   268be:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   268c0:	2220      	movs	r2, #32
   268c2:	4601      	mov	r1, r0
   268c4:	a805      	add	r0, sp, #20
{
   268c6:	461d      	mov	r5, r3
   268c8:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   268ca:	f7ff ffac 	bl	26826 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   268ce:	2220      	movs	r2, #32
   268d0:	4631      	mov	r1, r6
   268d2:	a80d      	add	r0, sp, #52	; 0x34
   268d4:	f7ff ffa7 	bl	26826 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   268d8:	4621      	mov	r1, r4
   268da:	2210      	movs	r2, #16
   268dc:	a801      	add	r0, sp, #4
	m[64] = z;
   268de:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   268e2:	f7ff ffa0 	bl	26826 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   268e6:	463b      	mov	r3, r7
   268e8:	2241      	movs	r2, #65	; 0x41
   268ea:	a905      	add	r1, sp, #20
   268ec:	a801      	add	r0, sp, #4
   268ee:	f7ff ffc7 	bl	26880 <bt_smp_aes_cmac>
	if (err) {
   268f2:	4604      	mov	r4, r0
   268f4:	b918      	cbnz	r0, 268fe <smp_f4+0x46>
	sys_mem_swap(res, 16);
   268f6:	2110      	movs	r1, #16
   268f8:	4638      	mov	r0, r7
   268fa:	f7ff ff9e 	bl	2683a <sys_mem_swap>
}
   268fe:	4620      	mov	r0, r4
   26900:	b017      	add	sp, #92	; 0x5c
   26902:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026904 <smp_f6>:
{
   26904:	b5f0      	push	{r4, r5, r6, r7, lr}
   26906:	b097      	sub	sp, #92	; 0x5c
   26908:	4605      	mov	r5, r0
   2690a:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   2690c:	a805      	add	r0, sp, #20
   2690e:	2210      	movs	r2, #16
{
   26910:	461c      	mov	r4, r3
   26912:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   26914:	f7ff ff87 	bl	26826 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   26918:	2210      	movs	r2, #16
   2691a:	4631      	mov	r1, r6
   2691c:	a809      	add	r0, sp, #36	; 0x24
   2691e:	f7ff ff82 	bl	26826 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   26922:	4621      	mov	r1, r4
   26924:	2210      	movs	r2, #16
   26926:	a80d      	add	r0, sp, #52	; 0x34
   26928:	f7ff ff7d 	bl	26826 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   2692c:	991c      	ldr	r1, [sp, #112]	; 0x70
   2692e:	2203      	movs	r2, #3
   26930:	a811      	add	r0, sp, #68	; 0x44
   26932:	f7ff ff78 	bl	26826 <sys_memcpy_swap>
	m[51] = a1->type;
   26936:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   26938:	f814 3b01 	ldrb.w	r3, [r4], #1
   2693c:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   26940:	4621      	mov	r1, r4
   26942:	2206      	movs	r2, #6
   26944:	a812      	add	r0, sp, #72	; 0x48
   26946:	f7fe fa9b 	bl	24e80 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2694a:	4621      	mov	r1, r4
   2694c:	2206      	movs	r2, #6
   2694e:	a812      	add	r0, sp, #72	; 0x48
   26950:	f7ff ff69 	bl	26826 <sys_memcpy_swap>
	m[58] = a2->type;
   26954:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   26956:	f814 3b01 	ldrb.w	r3, [r4], #1
   2695a:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   2695e:	4621      	mov	r1, r4
   26960:	2206      	movs	r2, #6
   26962:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   26966:	f7fe fa8b 	bl	24e80 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2696a:	4621      	mov	r1, r4
   2696c:	2206      	movs	r2, #6
   2696e:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   26972:	f7ff ff58 	bl	26826 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   26976:	2210      	movs	r2, #16
   26978:	4629      	mov	r1, r5
   2697a:	a801      	add	r0, sp, #4
   2697c:	f7ff ff53 	bl	26826 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   26980:	463b      	mov	r3, r7
   26982:	2241      	movs	r2, #65	; 0x41
   26984:	a905      	add	r1, sp, #20
   26986:	a801      	add	r0, sp, #4
   26988:	f7ff ff7a 	bl	26880 <bt_smp_aes_cmac>
	if (err) {
   2698c:	4604      	mov	r4, r0
   2698e:	b918      	cbnz	r0, 26998 <smp_f6+0x94>
	sys_mem_swap(check, 16);
   26990:	2110      	movs	r1, #16
   26992:	4638      	mov	r0, r7
   26994:	f7ff ff51 	bl	2683a <sys_mem_swap>
}
   26998:	4620      	mov	r0, r4
   2699a:	b017      	add	sp, #92	; 0x5c
   2699c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002699e <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2699e:	2301      	movs	r3, #1
   269a0:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   269a2:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   269a4:	f3bf 8f5b 	dmb	ish
   269a8:	e850 2f00 	ldrex	r2, [r0]
   269ac:	401a      	ands	r2, r3
   269ae:	e840 2100 	strex	r1, r2, [r0]
   269b2:	2900      	cmp	r1, #0
   269b4:	d1f8      	bne.n	269a8 <atomic_clear_bit+0xa>
   269b6:	f3bf 8f5b 	dmb	ish
}
   269ba:	4770      	bx	lr

000269bc <smp_send.isra.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   269bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   269be:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   269c0:	2200      	movs	r2, #0
   269c2:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   269c4:	4604      	mov	r4, r0
   269c6:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   269c8:	460a      	mov	r2, r1
   269ca:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
   269ce:	2106      	movs	r1, #6
   269d0:	f7ff fecb 	bl	2676a <bt_l2cap_send_cb>
   269d4:	b128      	cbz	r0, 269e2 <smp_send.isra.0+0x26>
		net_buf_unref(buf);
   269d6:	4628      	mov	r0, r5
}
   269d8:	b003      	add	sp, #12
   269da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   269de:	f7f6 bb7f 	b.w	1d0e0 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   269e2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   269e6:	2300      	movs	r3, #0
   269e8:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
}
   269ec:	b003      	add	sp, #12
   269ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   269f2:	f7fb bd83 	b.w	224fc <k_work_reschedule>

000269f6 <smp_security_request>:
   269f6:	2007      	movs	r0, #7
   269f8:	4770      	bx	lr

000269fa <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   269fa:	f3bf 8f5b 	dmb	ish
   269fe:	6800      	ldr	r0, [r0, #0]
   26a00:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   26a04:	4108      	asrs	r0, r1
}
   26a06:	f000 0001 	and.w	r0, r0, #1
   26a0a:	4770      	bx	lr

00026a0c <update_keys_check>:
{
   26a0c:	b510      	push	{r4, lr}
   26a0e:	4603      	mov	r3, r0
	if (!keys ||
   26a10:	b1d9      	cbz	r1, 26a4a <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   26a12:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   26a14:	f010 0f24 	tst.w	r0, #36	; 0x24
   26a18:	d017      	beq.n	26a4a <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   26a1a:	7d1a      	ldrb	r2, [r3, #20]
   26a1c:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   26a1e:	7b09      	ldrb	r1, [r1, #12]
   26a20:	42a2      	cmp	r2, r4
   26a22:	bf28      	it	cs
   26a24:	4622      	movcs	r2, r4
   26a26:	4291      	cmp	r1, r2
   26a28:	d901      	bls.n	26a2e <update_keys_check+0x22>
		return false;
   26a2a:	2000      	movs	r0, #0
}
   26a2c:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   26a2e:	0682      	lsls	r2, r0, #26
   26a30:	d404      	bmi.n	26a3c <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   26a32:	7a18      	ldrb	r0, [r3, #8]
   26a34:	3800      	subs	r0, #0
   26a36:	bf18      	it	ne
   26a38:	2001      	movne	r0, #1
   26a3a:	e7f7      	b.n	26a2c <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   26a3c:	2105      	movs	r1, #5
   26a3e:	1d18      	adds	r0, r3, #4
   26a40:	f7ff ffdb 	bl	269fa <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   26a44:	2800      	cmp	r0, #0
   26a46:	d1f4      	bne.n	26a32 <update_keys_check+0x26>
   26a48:	e7ef      	b.n	26a2a <update_keys_check+0x1e>
		return true;
   26a4a:	2001      	movs	r0, #1
   26a4c:	e7ee      	b.n	26a2c <update_keys_check+0x20>

00026a4e <smp_create_pdu.isra.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   26a4e:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   26a50:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   26a52:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   26a54:	4628      	mov	r0, r5
   26a56:	2104      	movs	r1, #4
   26a58:	f7ff ffcf 	bl	269fa <atomic_test_bit>
   26a5c:	b168      	cbz	r0, 26a7a <smp_create_pdu.isra.0+0x2c>
		timeout = K_NO_WAIT;
   26a5e:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   26a60:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   26a62:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   26a64:	4608      	mov	r0, r1
   26a66:	f7ff fe7d 	bl	26764 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   26a6a:	4604      	mov	r4, r0
   26a6c:	b940      	cbnz	r0, 26a80 <smp_create_pdu.isra.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   26a6e:	2104      	movs	r1, #4
   26a70:	4628      	mov	r0, r5
   26a72:	f7ff fef1 	bl	26858 <atomic_set_bit>
}
   26a76:	4620      	mov	r0, r4
   26a78:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   26a7a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   26a7e:	e7ef      	b.n	26a60 <smp_create_pdu.isra.0+0x12>
	return net_buf_simple_add(&buf->b, len);
   26a80:	2101      	movs	r1, #1
   26a82:	3008      	adds	r0, #8
   26a84:	f000 fbb8 	bl	271f8 <net_buf_simple_add>
	hdr->code = op;
   26a88:	7006      	strb	r6, [r0, #0]
	return buf;
   26a8a:	e7f4      	b.n	26a76 <smp_create_pdu.isra.0+0x28>

00026a8c <smp_send_pairing_random>:
{
   26a8c:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   26a8e:	2104      	movs	r1, #4
{
   26a90:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   26a92:	f7ff ffdc 	bl	26a4e <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   26a96:	4604      	mov	r4, r0
   26a98:	b178      	cbz	r0, 26aba <smp_send_pairing_random+0x2e>
   26a9a:	2110      	movs	r1, #16
   26a9c:	3008      	adds	r0, #8
   26a9e:	f000 fbab 	bl	271f8 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   26aa2:	2210      	movs	r2, #16
   26aa4:	f105 0127 	add.w	r1, r5, #39	; 0x27
   26aa8:	f7fe f9ea 	bl	24e80 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   26aac:	4628      	mov	r0, r5
   26aae:	2200      	movs	r2, #0
   26ab0:	4621      	mov	r1, r4
   26ab2:	f7ff ff83 	bl	269bc <smp_send.isra.0>
	return 0;
   26ab6:	2000      	movs	r0, #0
}
   26ab8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   26aba:	2008      	movs	r0, #8
   26abc:	e7fc      	b.n	26ab8 <smp_send_pairing_random+0x2c>

00026abe <send_pairing_rsp>:
{
   26abe:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   26ac0:	2102      	movs	r1, #2
{
   26ac2:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   26ac4:	f7ff ffc3 	bl	26a4e <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   26ac8:	4604      	mov	r4, r0
   26aca:	b178      	cbz	r0, 26aec <send_pairing_rsp+0x2e>
   26acc:	2106      	movs	r1, #6
   26ace:	3008      	adds	r0, #8
   26ad0:	f000 fb92 	bl	271f8 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   26ad4:	2206      	movs	r2, #6
   26ad6:	f105 0111 	add.w	r1, r5, #17
   26ada:	f7fe f9d1 	bl	24e80 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   26ade:	4628      	mov	r0, r5
   26ae0:	2200      	movs	r2, #0
   26ae2:	4621      	mov	r1, r4
   26ae4:	f7ff ff6a 	bl	269bc <smp_send.isra.0>
	return 0;
   26ae8:	2000      	movs	r0, #0
}
   26aea:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   26aec:	2008      	movs	r0, #8
   26aee:	e7fc      	b.n	26aea <send_pairing_rsp+0x2c>

00026af0 <smp_dhkey_check>:
{
   26af0:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   26af2:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   26af6:	78db      	ldrb	r3, [r3, #3]
   26af8:	2b01      	cmp	r3, #1
{
   26afa:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   26afc:	d114      	bne.n	26b28 <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   26afe:	688e      	ldr	r6, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   26b00:	1d05      	adds	r5, r0, #4
   26b02:	2110      	movs	r1, #16
   26b04:	4628      	mov	r0, r5
   26b06:	f7ff ff4a 	bl	2699e <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   26b0a:	4631      	mov	r1, r6
   26b0c:	2210      	movs	r2, #16
   26b0e:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   26b12:	f7fe f9b5 	bl	24e80 <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   26b16:	2107      	movs	r1, #7
   26b18:	4628      	mov	r0, r5
   26b1a:	f7ff ff6e 	bl	269fa <atomic_test_bit>
   26b1e:	b128      	cbz	r0, 26b2c <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   26b20:	2109      	movs	r1, #9
   26b22:	4628      	mov	r0, r5
   26b24:	f7ff fe98 	bl	26858 <atomic_set_bit>
}
   26b28:	2000      	movs	r0, #0
   26b2a:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   26b2c:	210a      	movs	r1, #10
   26b2e:	4628      	mov	r0, r5
   26b30:	f7ff ff63 	bl	269fa <atomic_test_bit>
   26b34:	2800      	cmp	r0, #0
   26b36:	d1f3      	bne.n	26b20 <smp_dhkey_check+0x30>
		return compute_and_check_and_send_periph_dhcheck(smp);
   26b38:	4620      	mov	r0, r4
}
   26b3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   26b3e:	f7f4 bd13 	b.w	1b568 <compute_and_check_and_send_periph_dhcheck>

00026b42 <atomic_test_and_clear_bit>:
{
   26b42:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   26b44:	2301      	movs	r3, #1
   26b46:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   26b4a:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   26b4c:	f3bf 8f5b 	dmb	ish
   26b50:	e850 3f00 	ldrex	r3, [r0]
   26b54:	ea03 0c02 	and.w	ip, r3, r2
   26b58:	e840 ce00 	strex	lr, ip, [r0]
   26b5c:	f1be 0f00 	cmp.w	lr, #0
   26b60:	d1f6      	bne.n	26b50 <atomic_test_and_clear_bit+0xe>
   26b62:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   26b66:	420b      	tst	r3, r1
}
   26b68:	bf14      	ite	ne
   26b6a:	2001      	movne	r0, #1
   26b6c:	2000      	moveq	r0, #0
   26b6e:	f85d fb04 	ldr.w	pc, [sp], #4

00026b72 <smp_reset>:
{
   26b72:	b538      	push	{r3, r4, r5, lr}
   26b74:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   26b76:	1d03      	adds	r3, r0, #4
   26b78:	2500      	movs	r5, #0
   26b7a:	f3bf 8f5b 	dmb	ish
   26b7e:	e853 2f00 	ldrex	r2, [r3]
   26b82:	e843 5100 	strex	r1, r5, [r3]
   26b86:	2900      	cmp	r1, #0
   26b88:	d1f9      	bne.n	26b7e <smp_reset+0xc>
   26b8a:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   26b8e:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
   26b92:	f001 fe88 	bl	288a6 <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   26b96:	7225      	strb	r5, [r4, #8]
   26b98:	f3bf 8f5b 	dmb	ish
   26b9c:	e854 3f00 	ldrex	r3, [r4]
   26ba0:	e844 5200 	strex	r2, r5, [r4]
   26ba4:	2a00      	cmp	r2, #0
   26ba6:	d1f9      	bne.n	26b9c <smp_reset+0x2a>
   26ba8:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   26bac:	4620      	mov	r0, r4
   26bae:	2101      	movs	r1, #1
}
   26bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   26bb4:	f7ff be50 	b.w	26858 <atomic_set_bit>

00026bb8 <smp_c1>:
{
   26bb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26bbc:	b089      	sub	sp, #36	; 0x24
   26bbe:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   26bc2:	4699      	mov	r9, r3
	p1[0] = ia->type;
   26bc4:	783b      	ldrb	r3, [r7, #0]
{
   26bc6:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   26bc8:	f88d 3000 	strb.w	r3, [sp]
{
   26bcc:	460c      	mov	r4, r1
	p1[1] = ra->type;
   26bce:	f898 3000 	ldrb.w	r3, [r8]
   26bd2:	f88d 3001 	strb.w	r3, [sp, #1]
{
   26bd6:	4611      	mov	r1, r2
   26bd8:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   26bda:	2207      	movs	r2, #7
   26bdc:	f10d 0002 	add.w	r0, sp, #2
   26be0:	f7fe f94e 	bl	24e80 <memcpy>
	memcpy(p1 + 9, pres, 7);
   26be4:	2207      	movs	r2, #7
   26be6:	4649      	mov	r1, r9
   26be8:	f10d 0009 	add.w	r0, sp, #9
   26bec:	f7fe f948 	bl	24e80 <memcpy>
	while (len--) {
   26bf0:	f104 0010 	add.w	r0, r4, #16
   26bf4:	4629      	mov	r1, r5
   26bf6:	466a      	mov	r2, sp
   26bf8:	4284      	cmp	r4, r0
   26bfa:	d127      	bne.n	26c4c <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   26bfc:	462a      	mov	r2, r5
   26bfe:	4629      	mov	r1, r5
   26c00:	4630      	mov	r0, r6
   26c02:	f000 ffea 	bl	27bda <bt_encrypt_le>
	if (err) {
   26c06:	4604      	mov	r4, r0
   26c08:	b9e0      	cbnz	r0, 26c44 <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   26c0a:	2206      	movs	r2, #6
   26c0c:	f108 0101 	add.w	r1, r8, #1
   26c10:	a804      	add	r0, sp, #16
   26c12:	f7fe f935 	bl	24e80 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   26c16:	2206      	movs	r2, #6
   26c18:	1c79      	adds	r1, r7, #1
   26c1a:	f10d 0016 	add.w	r0, sp, #22
   26c1e:	f7fe f92f 	bl	24e80 <memcpy>
	(void)memset(p2 + 12, 0, 4);
   26c22:	2204      	movs	r2, #4
   26c24:	4621      	mov	r1, r4
   26c26:	a807      	add	r0, sp, #28
   26c28:	f7fe f935 	bl	24e96 <memset>
	while (len--) {
   26c2c:	f105 0010 	add.w	r0, r5, #16
   26c30:	462a      	mov	r2, r5
   26c32:	ab04      	add	r3, sp, #16
   26c34:	4282      	cmp	r2, r0
   26c36:	d112      	bne.n	26c5e <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   26c38:	462a      	mov	r2, r5
   26c3a:	4629      	mov	r1, r5
   26c3c:	4630      	mov	r0, r6
   26c3e:	f000 ffcc 	bl	27bda <bt_encrypt_le>
   26c42:	4604      	mov	r4, r0
}
   26c44:	4620      	mov	r0, r4
   26c46:	b009      	add	sp, #36	; 0x24
   26c48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   26c4c:	f814 3b01 	ldrb.w	r3, [r4], #1
   26c50:	f812 cb01 	ldrb.w	ip, [r2], #1
   26c54:	ea83 030c 	eor.w	r3, r3, ip
   26c58:	f801 3b01 	strb.w	r3, [r1], #1
   26c5c:	e7cc      	b.n	26bf8 <smp_c1+0x40>
   26c5e:	f812 1b01 	ldrb.w	r1, [r2], #1
   26c62:	f813 4b01 	ldrb.w	r4, [r3], #1
   26c66:	4061      	eors	r1, r4
   26c68:	f802 1c01 	strb.w	r1, [r2, #-1]
   26c6c:	e7e2      	b.n	26c34 <smp_c1+0x7c>

00026c6e <legacy_pairing_confirm>:
{
   26c6e:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   26c70:	1d07      	adds	r7, r0, #4
{
   26c72:	b085      	sub	sp, #20
   26c74:	4605      	mov	r5, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   26c76:	210a      	movs	r1, #10
   26c78:	4638      	mov	r0, r7
   26c7a:	f7ff febe 	bl	269fa <atomic_test_bit>
   26c7e:	bb88      	cbnz	r0, 26ce4 <legacy_pairing_confirm+0x76>
			atomic_set_bit(smp->allowed_cmds,
   26c80:	2104      	movs	r1, #4
   26c82:	4628      	mov	r0, r5
   26c84:	f7ff fde8 	bl	26858 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   26c88:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   26c8a:	f8d5 40f0 	ldr.w	r4, [r5, #240]	; 0xf0
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   26c8e:	f7ff fede 	bl	26a4e <smp_create_pdu.isra.0>
	if (!buf) {
   26c92:	4606      	mov	r6, r0
   26c94:	b1c0      	cbz	r0, 26cc8 <legacy_pairing_confirm+0x5a>
   26c96:	2110      	movs	r1, #16
   26c98:	3008      	adds	r0, #8
   26c9a:	f000 faad 	bl	271f8 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   26c9e:	f104 0396 	add.w	r3, r4, #150	; 0x96
   26ca2:	348f      	adds	r4, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   26ca4:	9002      	str	r0, [sp, #8]
   26ca6:	9301      	str	r3, [sp, #4]
   26ca8:	9400      	str	r4, [sp, #0]
   26caa:	f105 0310 	add.w	r3, r5, #16
   26cae:	f105 0209 	add.w	r2, r5, #9
   26cb2:	f105 0127 	add.w	r1, r5, #39	; 0x27
   26cb6:	f105 0047 	add.w	r0, r5, #71	; 0x47
   26cba:	f7ff ff7d 	bl	26bb8 <smp_c1>
   26cbe:	4604      	mov	r4, r0
   26cc0:	b120      	cbz	r0, 26ccc <legacy_pairing_confirm+0x5e>
		net_buf_unref(buf);
   26cc2:	4630      	mov	r0, r6
   26cc4:	f7f6 fa0c 	bl	1d0e0 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   26cc8:	2008      	movs	r0, #8
   26cca:	e009      	b.n	26ce0 <legacy_pairing_confirm+0x72>
	smp_send(smp, buf, NULL, NULL);
   26ccc:	4602      	mov	r2, r0
   26cce:	4631      	mov	r1, r6
   26cd0:	4628      	mov	r0, r5
   26cd2:	f7ff fe73 	bl	269bc <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   26cd6:	4621      	mov	r1, r4
   26cd8:	4638      	mov	r0, r7
   26cda:	f7ff fe60 	bl	2699e <atomic_clear_bit>
	return 0;
   26cde:	2000      	movs	r0, #0
}
   26ce0:	b005      	add	sp, #20
   26ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   26ce4:	2100      	movs	r1, #0
   26ce6:	4638      	mov	r0, r7
   26ce8:	f7ff fdb6 	bl	26858 <atomic_set_bit>
   26cec:	e7f7      	b.n	26cde <legacy_pairing_confirm+0x70>

00026cee <bt_smp_request_ltk>:
{
   26cee:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   26cf2:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   26cf6:	e9cd 2300 	strd	r2, r3, [sp]
   26cfa:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   26cfc:	f7f4 fb7a 	bl	1b3f4 <smp_chan_get>
	if (!smp) {
   26d00:	4605      	mov	r5, r0
   26d02:	2800      	cmp	r0, #0
   26d04:	f000 8090 	beq.w	26e28 <bt_smp_request_ltk+0x13a>
	if (ediv == 0U && rand == 0U &&
   26d08:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   26d0c:	1d07      	adds	r7, r0, #4
   26d0e:	f1b9 0f00 	cmp.w	r9, #0
   26d12:	d12a      	bne.n	26d6a <bt_smp_request_ltk+0x7c>
   26d14:	e9dd 2300 	ldrd	r2, r3, [sp]
   26d18:	4313      	orrs	r3, r2
   26d1a:	d126      	bne.n	26d6a <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   26d1c:	2103      	movs	r1, #3
   26d1e:	4638      	mov	r0, r7
   26d20:	f7ff fe6b 	bl	269fa <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   26d24:	b308      	cbz	r0, 26d6a <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   26d26:	2101      	movs	r1, #1
   26d28:	4638      	mov	r0, r7
   26d2a:	f7ff fe66 	bl	269fa <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   26d2e:	4606      	mov	r6, r0
   26d30:	b1d8      	cbz	r0, 26d6a <bt_smp_request_ltk+0x7c>
	return MIN(req->max_key_size, rsp->max_key_size);
   26d32:	7d2c      	ldrb	r4, [r5, #20]
   26d34:	7b6b      	ldrb	r3, [r5, #13]
   26d36:	429c      	cmp	r4, r3
   26d38:	bf28      	it	cs
   26d3a:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   26d3c:	4622      	mov	r2, r4
   26d3e:	f105 0147 	add.w	r1, r5, #71	; 0x47
   26d42:	4640      	mov	r0, r8
   26d44:	f7fe f89c 	bl	24e80 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   26d48:	2c0f      	cmp	r4, #15
   26d4a:	d806      	bhi.n	26d5a <bt_smp_request_ltk+0x6c>
			(void)memset(ltk + enc_size, 0,
   26d4c:	f1c4 0210 	rsb	r2, r4, #16
   26d50:	4649      	mov	r1, r9
   26d52:	eb08 0004 	add.w	r0, r8, r4
   26d56:	f7fe f89e 	bl	24e96 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   26d5a:	2101      	movs	r1, #1
   26d5c:	4638      	mov	r0, r7
   26d5e:	f7ff fd7b 	bl	26858 <atomic_set_bit>
}
   26d62:	4630      	mov	r0, r6
   26d64:	b003      	add	sp, #12
   26d66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   26d6a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   26d6e:	b983      	cbnz	r3, 26d92 <bt_smp_request_ltk+0xa4>
					     &conn->le.dst);
   26d70:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   26d74:	7a21      	ldrb	r1, [r4, #8]
   26d76:	4632      	mov	r2, r6
   26d78:	2020      	movs	r0, #32
   26d7a:	f7f3 fdd7 	bl	1a92c <bt_keys_find>
   26d7e:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   26d82:	b930      	cbnz	r0, 26d92 <bt_smp_request_ltk+0xa4>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   26d84:	7a21      	ldrb	r1, [r4, #8]
   26d86:	4632      	mov	r2, r6
   26d88:	2001      	movs	r0, #1
   26d8a:	f7f3 fdcf 	bl	1a92c <bt_keys_find>
   26d8e:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   26d92:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
   26d96:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   26d9a:	b9ee      	cbnz	r6, 26dd8 <bt_smp_request_ltk+0xea>
   26d9c:	e9dd 2300 	ldrd	r2, r3, [sp]
   26da0:	4313      	orrs	r3, r2
   26da2:	d119      	bne.n	26dd8 <bt_smp_request_ltk+0xea>
   26da4:	b388      	cbz	r0, 26e0a <bt_smp_request_ltk+0x11c>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   26da6:	89c3      	ldrh	r3, [r0, #14]
   26da8:	069a      	lsls	r2, r3, #26
   26daa:	d516      	bpl.n	26dda <bt_smp_request_ltk+0xec>
		enc_size = conn->le.keys->enc_size;
   26dac:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   26dae:	f100 011a 	add.w	r1, r0, #26
   26db2:	4622      	mov	r2, r4
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
   26db4:	4640      	mov	r0, r8
   26db6:	f7fe f863 	bl	24e80 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   26dba:	2c0f      	cmp	r4, #15
   26dbc:	d806      	bhi.n	26dcc <bt_smp_request_ltk+0xde>
			(void)memset(ltk + enc_size, 0,
   26dbe:	f1c4 0210 	rsb	r2, r4, #16
   26dc2:	4631      	mov	r1, r6
   26dc4:	eb08 0004 	add.w	r0, r8, r4
   26dc8:	f7fe f865 	bl	24e96 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   26dcc:	2101      	movs	r1, #1
   26dce:	4638      	mov	r0, r7
   26dd0:	f7ff fd42 	bl	26858 <atomic_set_bit>
		return true;
   26dd4:	2601      	movs	r6, #1
   26dd6:	e7c4      	b.n	26d62 <bt_smp_request_ltk+0x74>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   26dd8:	b1b8      	cbz	r0, 26e0a <bt_smp_request_ltk+0x11c>
   26dda:	89c3      	ldrh	r3, [r0, #14]
   26ddc:	07db      	lsls	r3, r3, #31
   26dde:	d514      	bpl.n	26e0a <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   26de0:	2208      	movs	r2, #8
   26de2:	4669      	mov	r1, sp
   26de4:	3068      	adds	r0, #104	; 0x68
   26de6:	f7fe f83b 	bl	24e60 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   26dea:	b970      	cbnz	r0, 26e0a <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   26dec:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   26df0:	2202      	movs	r2, #2
   26df2:	a90a      	add	r1, sp, #40	; 0x28
   26df4:	3070      	adds	r0, #112	; 0x70
   26df6:	f7fe f833 	bl	24e60 <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   26dfa:	4606      	mov	r6, r0
   26dfc:	b928      	cbnz	r0, 26e0a <bt_smp_request_ltk+0x11c>
		enc_size = conn->le.keys->enc_size;
   26dfe:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   26e02:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
   26e04:	3172      	adds	r1, #114	; 0x72
   26e06:	4622      	mov	r2, r4
   26e08:	e7d4      	b.n	26db4 <bt_smp_request_ltk+0xc6>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   26e0a:	210f      	movs	r1, #15
   26e0c:	4638      	mov	r0, r7
   26e0e:	f7ff fdf4 	bl	269fa <atomic_test_bit>
   26e12:	b120      	cbz	r0, 26e1e <bt_smp_request_ltk+0x130>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   26e14:	2202      	movs	r2, #2
   26e16:	2106      	movs	r1, #6
   26e18:	4620      	mov	r0, r4
   26e1a:	f7ef fbe7 	bl	165ec <bt_conn_security_changed>
	smp_reset(smp);
   26e1e:	4628      	mov	r0, r5
   26e20:	f7ff fea7 	bl	26b72 <smp_reset>
	return false;
   26e24:	2600      	movs	r6, #0
   26e26:	e79c      	b.n	26d62 <bt_smp_request_ltk+0x74>
		return false;
   26e28:	4606      	mov	r6, r0
   26e2a:	e79a      	b.n	26d62 <bt_smp_request_ltk+0x74>

00026e2c <bt_smp_irk_get>:
{
   26e2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t invalid_ir[16] = { 0 };
   26e2e:	2500      	movs	r5, #0
{
   26e30:	460c      	mov	r4, r1
	if (!memcmp(ir, invalid_ir, 16)) {
   26e32:	2210      	movs	r2, #16
   26e34:	4669      	mov	r1, sp
	uint8_t invalid_ir[16] = { 0 };
   26e36:	e9cd 5500 	strd	r5, r5, [sp]
   26e3a:	e9cd 5502 	strd	r5, r5, [sp, #8]
{
   26e3e:	4606      	mov	r6, r0
	if (!memcmp(ir, invalid_ir, 16)) {
   26e40:	f7fe f80e 	bl	24e60 <memcmp>
   26e44:	b180      	cbz	r0, 26e68 <bt_smp_irk_get+0x3c>
	dst[0] = val;
   26e46:	2301      	movs	r3, #1
	memset(&res[4], 0, 16 - 4);
   26e48:	220c      	movs	r2, #12
   26e4a:	4629      	mov	r1, r5
   26e4c:	7023      	strb	r3, [r4, #0]
	dst[1] = val >> 8;
   26e4e:	7065      	strb	r5, [r4, #1]
	dst[0] = val;
   26e50:	70a5      	strb	r5, [r4, #2]
	dst[1] = val >> 8;
   26e52:	70e5      	strb	r5, [r4, #3]
   26e54:	1d20      	adds	r0, r4, #4
   26e56:	f7fe f81e 	bl	24e96 <memset>
	err = bt_encrypt_le(key, res, res);
   26e5a:	4622      	mov	r2, r4
   26e5c:	4621      	mov	r1, r4
   26e5e:	4630      	mov	r0, r6
   26e60:	f000 febb 	bl	27bda <bt_encrypt_le>
}
   26e64:	b004      	add	sp, #16
   26e66:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   26e68:	f06f 0015 	mvn.w	r0, #21
   26e6c:	e7fa      	b.n	26e64 <bt_smp_irk_get+0x38>

00026e6e <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   26e6e:	1d03      	adds	r3, r0, #4
{
   26e70:	b573      	push	{r0, r1, r4, r5, r6, lr}
   26e72:	4605      	mov	r5, r0
   26e74:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   26e76:	4618      	mov	r0, r3
   26e78:	2103      	movs	r1, #3
   26e7a:	f7ff fdbe 	bl	269fa <atomic_test_bit>
   26e7e:	b1f0      	cbz	r0, 26ebe <smp_error+0x50>
		smp_pairing_complete(smp, reason);
   26e80:	4631      	mov	r1, r6
   26e82:	4628      	mov	r0, r5
   26e84:	f7f5 fadc 	bl	1c440 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   26e88:	2105      	movs	r1, #5
   26e8a:	4628      	mov	r0, r5
   26e8c:	f7ff fddf 	bl	26a4e <smp_create_pdu.isra.0>
	if (!buf) {
   26e90:	4604      	mov	r4, r0
   26e92:	b308      	cbz	r0, 26ed8 <smp_error+0x6a>
   26e94:	2101      	movs	r1, #1
   26e96:	3008      	adds	r0, #8
   26e98:	f000 f9ae 	bl	271f8 <net_buf_simple_add>
	rsp->reason = reason;
   26e9c:	7006      	strb	r6, [r0, #0]
   26e9e:	2600      	movs	r6, #0
   26ea0:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
   26ea4:	9600      	str	r6, [sp, #0]
   26ea6:	4633      	mov	r3, r6
   26ea8:	4622      	mov	r2, r4
   26eaa:	2106      	movs	r1, #6
   26eac:	f7ff fc5d 	bl	2676a <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   26eb0:	b118      	cbz	r0, 26eba <smp_error+0x4c>
		net_buf_unref(buf);
   26eb2:	4620      	mov	r0, r4
   26eb4:	f7f6 f914 	bl	1d0e0 <net_buf_unref>
	return 0;
   26eb8:	4630      	mov	r0, r6
}
   26eba:	b002      	add	sp, #8
   26ebc:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   26ebe:	2101      	movs	r1, #1
   26ec0:	4618      	mov	r0, r3
   26ec2:	f7ff fd9a 	bl	269fa <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   26ec6:	2800      	cmp	r0, #0
   26ec8:	d1da      	bne.n	26e80 <smp_error+0x12>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   26eca:	210f      	movs	r1, #15
   26ecc:	4618      	mov	r0, r3
   26ece:	f7ff fd94 	bl	269fa <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   26ed2:	2800      	cmp	r0, #0
   26ed4:	d1d4      	bne.n	26e80 <smp_error+0x12>
   26ed6:	e7d7      	b.n	26e88 <smp_error+0x1a>
		return -ENOBUFS;
   26ed8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   26edc:	e7ed      	b.n	26eba <smp_error+0x4c>

00026ede <bt_smp_dhkey_ready>:
{
   26ede:	b570      	push	{r4, r5, r6, lr}
   26ee0:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   26ee2:	2008      	movs	r0, #8
   26ee4:	f7f4 fae2 	bl	1b4ac <smp_find>
	if (smp) {
   26ee8:	4604      	mov	r4, r0
   26eea:	b1b8      	cbz	r0, 26f1c <bt_smp_dhkey_ready+0x3e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   26eec:	1d05      	adds	r5, r0, #4
   26eee:	2108      	movs	r1, #8
   26ef0:	4628      	mov	r0, r5
   26ef2:	f7ff fd54 	bl	2699e <atomic_clear_bit>
	if (!dhkey) {
   26ef6:	b38e      	cbz	r6, 26f5c <bt_smp_dhkey_ready+0x7e>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   26ef8:	2107      	movs	r1, #7
   26efa:	f7ff fd50 	bl	2699e <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, BT_DH_KEY_LEN);
   26efe:	4631      	mov	r1, r6
   26f00:	2220      	movs	r2, #32
   26f02:	f104 0097 	add.w	r0, r4, #151	; 0x97
   26f06:	f7fd ffbb 	bl	24e80 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   26f0a:	210a      	movs	r1, #10
   26f0c:	4628      	mov	r0, r5
   26f0e:	f7ff fd74 	bl	269fa <atomic_test_bit>
   26f12:	b168      	cbz	r0, 26f30 <bt_smp_dhkey_ready+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   26f14:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   26f16:	4628      	mov	r0, r5
   26f18:	f7ff fc9e 	bl	26858 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   26f1c:	2007      	movs	r0, #7
   26f1e:	f7f4 fac5 	bl	1b4ac <smp_find>
		if (smp) {
   26f22:	4604      	mov	r4, r0
   26f24:	b118      	cbz	r0, 26f2e <bt_smp_dhkey_ready+0x50>
			err = smp_dhkey_generate(smp);
   26f26:	f7f4 fa21 	bl	1b36c <smp_dhkey_generate>
			if (err) {
   26f2a:	4601      	mov	r1, r0
   26f2c:	b990      	cbnz	r0, 26f54 <bt_smp_dhkey_ready+0x76>
}
   26f2e:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   26f30:	2110      	movs	r1, #16
   26f32:	4628      	mov	r0, r5
   26f34:	f7ff fd61 	bl	269fa <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   26f38:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   26f3a:	2800      	cmp	r0, #0
   26f3c:	d1eb      	bne.n	26f16 <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   26f3e:	4628      	mov	r0, r5
   26f40:	f7ff fd5b 	bl	269fa <atomic_test_bit>
   26f44:	2800      	cmp	r0, #0
   26f46:	d0e9      	beq.n	26f1c <bt_smp_dhkey_ready+0x3e>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   26f48:	4620      	mov	r0, r4
   26f4a:	f7f4 fb0d 	bl	1b568 <compute_and_check_and_send_periph_dhcheck>
		if (err) {
   26f4e:	4601      	mov	r1, r0
   26f50:	2800      	cmp	r0, #0
   26f52:	d0e3      	beq.n	26f1c <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
   26f54:	4620      	mov	r0, r4
   26f56:	f7ff ff8a 	bl	26e6e <smp_error>
   26f5a:	e7df      	b.n	26f1c <bt_smp_dhkey_ready+0x3e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   26f5c:	210b      	movs	r1, #11
   26f5e:	e7f9      	b.n	26f54 <bt_smp_dhkey_ready+0x76>

00026f60 <smp_check_complete.part.0>:
static void smp_check_complete(struct bt_conn *conn, uint8_t dist_complete)
   26f60:	b510      	push	{r4, lr}
   26f62:	460c      	mov	r4, r1
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   26f64:	2106      	movs	r1, #6
   26f66:	f7ff fc19 	bl	2679c <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   26f6a:	f810 3c08 	ldrb.w	r3, [r0, #-8]
   26f6e:	ea23 0104 	bic.w	r1, r3, r4
   26f72:	f800 1c08 	strb.w	r1, [r0, #-8]
		if (!smp->local_dist && !smp->remote_dist) {
   26f76:	f830 1c08 	ldrh.w	r1, [r0, #-8]
   26f7a:	b921      	cbnz	r1, 26f86 <smp_check_complete.part.0+0x26>
}
   26f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
   26f80:	38f0      	subs	r0, #240	; 0xf0
   26f82:	f7f5 ba5d 	b.w	1c440 <smp_pairing_complete>
}
   26f86:	bd10      	pop	{r4, pc}

00026f88 <smp_ident_sent>:
	if (conn->type == BT_CONN_TYPE_LE) {
   26f88:	7881      	ldrb	r1, [r0, #2]
   26f8a:	2901      	cmp	r1, #1
   26f8c:	d101      	bne.n	26f92 <smp_ident_sent+0xa>
   26f8e:	f7ff bfe7 	b.w	26f60 <smp_check_complete.part.0>
}
   26f92:	4770      	bx	lr

00026f94 <smp_id_sent>:
	if (conn->type == BT_CONN_TYPE_LE) {
   26f94:	7883      	ldrb	r3, [r0, #2]
   26f96:	2b01      	cmp	r3, #1
   26f98:	d102      	bne.n	26fa0 <smp_id_sent+0xc>
   26f9a:	2102      	movs	r1, #2
   26f9c:	f7ff bfe0 	b.w	26f60 <smp_check_complete.part.0>
}
   26fa0:	4770      	bx	lr

00026fa2 <smp_sign_info_sent>:
	if (conn->type == BT_CONN_TYPE_LE) {
   26fa2:	7883      	ldrb	r3, [r0, #2]
   26fa4:	2b01      	cmp	r3, #1
   26fa6:	d102      	bne.n	26fae <smp_sign_info_sent+0xc>
   26fa8:	2104      	movs	r1, #4
   26faa:	f7ff bfd9 	b.w	26f60 <smp_check_complete.part.0>
}
   26fae:	4770      	bx	lr

00026fb0 <bt_smp_disconnected>:
{
   26fb0:	b570      	push	{r4, r5, r6, lr}
   26fb2:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   26fb4:	f1a0 06f0 	sub.w	r6, r0, #240	; 0xf0
	struct bt_keys *keys = chan->conn->le.keys;
   26fb8:	f850 3be8 	ldr.w	r3, [r0], #232
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   26fbc:	3cec      	subs	r4, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   26fbe:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	(void)k_work_cancel_delayable(&smp->work);
   26fc2:	f001 fc70 	bl	288a6 <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   26fc6:	2103      	movs	r1, #3
   26fc8:	4620      	mov	r0, r4
   26fca:	f7ff fd16 	bl	269fa <atomic_test_bit>
   26fce:	b1a0      	cbz	r0, 26ffa <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   26fd0:	2108      	movs	r1, #8
   26fd2:	4630      	mov	r0, r6
   26fd4:	f7f5 fa34 	bl	1c440 <smp_pairing_complete>
	if (keys) {
   26fd8:	b13d      	cbz	r5, 26fea <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   26fda:	89eb      	ldrh	r3, [r5, #14]
   26fdc:	b113      	cbz	r3, 26fe4 <bt_smp_disconnected+0x34>
   26fde:	7b6b      	ldrb	r3, [r5, #13]
   26fe0:	079b      	lsls	r3, r3, #30
   26fe2:	d502      	bpl.n	26fea <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   26fe4:	4628      	mov	r0, r5
   26fe6:	f7f3 fd01 	bl	1a9ec <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   26fea:	4630      	mov	r0, r6
   26fec:	f44f 7202 	mov.w	r2, #520	; 0x208
}
   26ff0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(smp, 0, sizeof(*smp));
   26ff4:	2100      	movs	r1, #0
   26ff6:	f7fd bf4e 	b.w	24e96 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   26ffa:	2101      	movs	r1, #1
   26ffc:	4620      	mov	r0, r4
   26ffe:	f7ff fcfc 	bl	269fa <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   27002:	2800      	cmp	r0, #0
   27004:	d1e4      	bne.n	26fd0 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   27006:	210f      	movs	r1, #15
   27008:	4620      	mov	r0, r4
   2700a:	f7ff fcf6 	bl	269fa <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2700e:	2800      	cmp	r0, #0
   27010:	d1de      	bne.n	26fd0 <bt_smp_disconnected+0x20>
   27012:	e7e1      	b.n	26fd8 <bt_smp_disconnected+0x28>

00027014 <bt_uuid_cmp>:
{
   27014:	b510      	push	{r4, lr}
   27016:	460c      	mov	r4, r1
	if (u1->type != u2->type) {
   27018:	7801      	ldrb	r1, [r0, #0]
   2701a:	7822      	ldrb	r2, [r4, #0]
   2701c:	428a      	cmp	r2, r1
{
   2701e:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   27020:	d00e      	beq.n	27040 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   27022:	4669      	mov	r1, sp
   27024:	f7f5 ff04 	bl	1ce30 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   27028:	a905      	add	r1, sp, #20
   2702a:	4620      	mov	r0, r4
   2702c:	f7f5 ff00 	bl	1ce30 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   27030:	2210      	movs	r2, #16
   27032:	f10d 0115 	add.w	r1, sp, #21
   27036:	f10d 0001 	add.w	r0, sp, #1
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2703a:	f7fd ff11 	bl	24e60 <memcmp>
   2703e:	e007      	b.n	27050 <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   27040:	2a01      	cmp	r2, #1
   27042:	d007      	beq.n	27054 <bt_uuid_cmp+0x40>
   27044:	2a02      	cmp	r2, #2
   27046:	d008      	beq.n	2705a <bt_uuid_cmp+0x46>
   27048:	b95a      	cbnz	r2, 27062 <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   2704a:	8840      	ldrh	r0, [r0, #2]
   2704c:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2704e:	1ac0      	subs	r0, r0, r3
}
   27050:	b00a      	add	sp, #40	; 0x28
   27052:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   27054:	6840      	ldr	r0, [r0, #4]
   27056:	6863      	ldr	r3, [r4, #4]
   27058:	e7f9      	b.n	2704e <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2705a:	2210      	movs	r2, #16
   2705c:	1c61      	adds	r1, r4, #1
   2705e:	3001      	adds	r0, #1
   27060:	e7eb      	b.n	2703a <bt_uuid_cmp+0x26>
	switch (u1->type) {
   27062:	f06f 0015 	mvn.w	r0, #21
   27066:	e7f3      	b.n	27050 <bt_uuid_cmp+0x3c>

00027068 <bt_uuid_create>:
	switch (data_len) {
   27068:	2a04      	cmp	r2, #4
{
   2706a:	b538      	push	{r3, r4, r5, lr}
   2706c:	460c      	mov	r4, r1
	switch (data_len) {
   2706e:	d00d      	beq.n	2708c <bt_uuid_create+0x24>
   27070:	2a10      	cmp	r2, #16
   27072:	d019      	beq.n	270a8 <bt_uuid_create+0x40>
   27074:	2a02      	cmp	r2, #2
   27076:	f04f 0300 	mov.w	r3, #0
   2707a:	d11b      	bne.n	270b4 <bt_uuid_create+0x4c>
		uuid->type = BT_UUID_TYPE_16;
   2707c:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   2707e:	784a      	ldrb	r2, [r1, #1]
   27080:	780b      	ldrb	r3, [r1, #0]
   27082:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   27086:	8043      	strh	r3, [r0, #2]
	return true;
   27088:	2001      	movs	r0, #1
}
   2708a:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   2708c:	2301      	movs	r3, #1
   2708e:	7003      	strb	r3, [r0, #0]
   27090:	78a2      	ldrb	r2, [r4, #2]
   27092:	78c9      	ldrb	r1, [r1, #3]
   27094:	7865      	ldrb	r5, [r4, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   27096:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   2709a:	7822      	ldrb	r2, [r4, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2709c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   270a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   270a4:	6042      	str	r2, [r0, #4]
		break;
   270a6:	e7ef      	b.n	27088 <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
   270a8:	2302      	movs	r3, #2
   270aa:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   270ae:	f7fd fee7 	bl	24e80 <memcpy>
		break;
   270b2:	e7e9      	b.n	27088 <bt_uuid_create+0x20>
	switch (data_len) {
   270b4:	4618      	mov	r0, r3
   270b6:	e7e8      	b.n	2708a <bt_uuid_create+0x22>

000270b8 <fixed_data_unref>:
}
   270b8:	4770      	bx	lr

000270ba <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   270ba:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   270bc:	6849      	ldr	r1, [r1, #4]
   270be:	6809      	ldr	r1, [r1, #0]
   270c0:	f7f5 bf7e 	b.w	1cfc0 <net_buf_alloc_len>

000270c4 <net_buf_get>:
{
   270c4:	b570      	push	{r4, r5, r6, lr}
   270c6:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   270c8:	f7fa f968 	bl	2139c <z_impl_k_queue_get>
	if (!buf) {
   270cc:	4605      	mov	r5, r0
   270ce:	b128      	cbz	r0, 270dc <net_buf_get+0x18>
   270d0:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   270d2:	7963      	ldrb	r3, [r4, #5]
   270d4:	f013 0301 	ands.w	r3, r3, #1
   270d8:	d102      	bne.n	270e0 <net_buf_get+0x1c>
	frag->frags = NULL;
   270da:	6023      	str	r3, [r4, #0]
}
   270dc:	4628      	mov	r0, r5
   270de:	bd70      	pop	{r4, r5, r6, pc}
   270e0:	2300      	movs	r3, #0
   270e2:	2200      	movs	r2, #0
   270e4:	4630      	mov	r0, r6
   270e6:	f7fa f959 	bl	2139c <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   270ea:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   270ec:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   270ee:	f023 0301 	bic.w	r3, r3, #1
   270f2:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   270f4:	4604      	mov	r4, r0
   270f6:	e7ec      	b.n	270d2 <net_buf_get+0xe>

000270f8 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   270f8:	6883      	ldr	r3, [r0, #8]
   270fa:	440b      	add	r3, r1
   270fc:	6003      	str	r3, [r0, #0]
}
   270fe:	4770      	bx	lr

00027100 <net_buf_slist_put>:
{
   27100:	b510      	push	{r4, lr}
	for (tail = buf; tail->frags; tail = tail->frags) {
   27102:	460b      	mov	r3, r1
   27104:	681c      	ldr	r4, [r3, #0]
   27106:	b984      	cbnz	r4, 2712a <net_buf_slist_put+0x2a>
	__asm__ volatile(
   27108:	f04f 0240 	mov.w	r2, #64	; 0x40
   2710c:	f3ef 8411 	mrs	r4, BASEPRI
   27110:	f382 8812 	msr	BASEPRI_MAX, r2
   27114:	f3bf 8f6f 	isb	sy
Z_GENLIST_APPEND_LIST(slist, snode)
   27118:	6842      	ldr	r2, [r0, #4]
   2711a:	b962      	cbnz	r2, 27136 <net_buf_slist_put+0x36>
	list->head = node;
   2711c:	6001      	str	r1, [r0, #0]
	list->tail = node;
   2711e:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   27120:	f384 8811 	msr	BASEPRI, r4
   27124:	f3bf 8f6f 	isb	sy
}
   27128:	bd10      	pop	{r4, pc}
		tail->flags |= NET_BUF_FRAGS;
   2712a:	795a      	ldrb	r2, [r3, #5]
   2712c:	f042 0201 	orr.w	r2, r2, #1
   27130:	715a      	strb	r2, [r3, #5]
   27132:	4623      	mov	r3, r4
   27134:	e7e6      	b.n	27104 <net_buf_slist_put+0x4>
	parent->next = child;
   27136:	6011      	str	r1, [r2, #0]
}
   27138:	e7f1      	b.n	2711e <net_buf_slist_put+0x1e>

0002713a <net_buf_slist_get>:
{
   2713a:	b570      	push	{r4, r5, r6, lr}
   2713c:	4603      	mov	r3, r0
	__asm__ volatile(
   2713e:	f04f 0240 	mov.w	r2, #64	; 0x40
   27142:	f3ef 8511 	mrs	r5, BASEPRI
   27146:	f382 8812 	msr	BASEPRI_MAX, r2
   2714a:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   2714e:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   27150:	b158      	cbz	r0, 2716a <net_buf_slist_get+0x30>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   27152:	6859      	ldr	r1, [r3, #4]
   27154:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   27156:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   27158:	4288      	cmp	r0, r1
	list->tail = node;
   2715a:	bf08      	it	eq
   2715c:	605a      	streq	r2, [r3, #4]
   2715e:	4602      	mov	r2, r0
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   27160:	7951      	ldrb	r1, [r2, #5]
   27162:	f011 0101 	ands.w	r1, r1, #1
   27166:	d105      	bne.n	27174 <net_buf_slist_get+0x3a>
		frag->frags = NULL;
   27168:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
   2716a:	f385 8811 	msr	BASEPRI, r5
   2716e:	f3bf 8f6f 	isb	sy
}
   27172:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_IS_EMPTY(slist)
   27174:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_GET(slist, snode)
   27176:	b129      	cbz	r1, 27184 <net_buf_slist_get+0x4a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   27178:	685e      	ldr	r6, [r3, #4]
   2717a:	680c      	ldr	r4, [r1, #0]
	list->head = node;
   2717c:	601c      	str	r4, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2717e:	42b1      	cmp	r1, r6
	list->tail = node;
   27180:	bf08      	it	eq
   27182:	605c      	streq	r4, [r3, #4]
			frag->flags &= ~NET_BUF_FRAGS;
   27184:	7954      	ldrb	r4, [r2, #5]
			frag->frags = (void *)sys_slist_get(list);
   27186:	6011      	str	r1, [r2, #0]
			frag->flags &= ~NET_BUF_FRAGS;
   27188:	f024 0401 	bic.w	r4, r4, #1
   2718c:	7154      	strb	r4, [r2, #5]
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2718e:	460a      	mov	r2, r1
   27190:	e7e6      	b.n	27160 <net_buf_slist_get+0x26>

00027192 <net_buf_put>:
{
   27192:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   27194:	460a      	mov	r2, r1
   27196:	6814      	ldr	r4, [r2, #0]
   27198:	b914      	cbnz	r4, 271a0 <net_buf_put+0xe>
}
   2719a:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   2719c:	f001 b8df 	b.w	2835e <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   271a0:	7953      	ldrb	r3, [r2, #5]
   271a2:	f043 0301 	orr.w	r3, r3, #1
   271a6:	7153      	strb	r3, [r2, #5]
   271a8:	4622      	mov	r2, r4
   271aa:	e7f4      	b.n	27196 <net_buf_put+0x4>

000271ac <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   271ac:	7902      	ldrb	r2, [r0, #4]
   271ae:	3201      	adds	r2, #1
   271b0:	7102      	strb	r2, [r0, #4]
	return buf;
}
   271b2:	4770      	bx	lr

000271b4 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   271b4:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   271b6:	4618      	mov	r0, r3
   271b8:	681b      	ldr	r3, [r3, #0]
   271ba:	2b00      	cmp	r3, #0
   271bc:	d1fb      	bne.n	271b6 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   271be:	4770      	bx	lr

000271c0 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   271c0:	6802      	ldr	r2, [r0, #0]
{
   271c2:	b510      	push	{r4, lr}
	if (parent->frags) {
   271c4:	b12a      	cbz	r2, 271d2 <net_buf_frag_insert+0x12>
   271c6:	460b      	mov	r3, r1
	while (buf->frags) {
   271c8:	461c      	mov	r4, r3
   271ca:	681b      	ldr	r3, [r3, #0]
   271cc:	2b00      	cmp	r3, #0
   271ce:	d1fb      	bne.n	271c8 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   271d0:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   271d2:	6001      	str	r1, [r0, #0]
}
   271d4:	bd10      	pop	{r4, pc}

000271d6 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   271d6:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   271d8:	4604      	mov	r4, r0
   271da:	b920      	cbnz	r0, 271e6 <net_buf_frag_add+0x10>
	buf->ref++;
   271dc:	790b      	ldrb	r3, [r1, #4]
   271de:	3301      	adds	r3, #1
   271e0:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   271e2:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   271e4:	bd10      	pop	{r4, pc}
   271e6:	4603      	mov	r3, r0
	while (buf->frags) {
   271e8:	4618      	mov	r0, r3
   271ea:	681b      	ldr	r3, [r3, #0]
   271ec:	2b00      	cmp	r3, #0
   271ee:	d1fb      	bne.n	271e8 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   271f0:	f7ff ffe6 	bl	271c0 <net_buf_frag_insert>
   271f4:	4620      	mov	r0, r4
   271f6:	e7f5      	b.n	271e4 <net_buf_frag_add+0xe>

000271f8 <net_buf_simple_add>:
	return buf->data + buf->len;
   271f8:	8883      	ldrh	r3, [r0, #4]
   271fa:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   271fc:	4419      	add	r1, r3
   271fe:	8081      	strh	r1, [r0, #4]
	return tail;
}
   27200:	18d0      	adds	r0, r2, r3
   27202:	4770      	bx	lr

00027204 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   27204:	b430      	push	{r4, r5}
   27206:	8884      	ldrh	r4, [r0, #4]
   27208:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   2720a:	18a3      	adds	r3, r4, r2
   2720c:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2720e:	1928      	adds	r0, r5, r4
}
   27210:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   27212:	f7fd be35 	b.w	24e80 <memcpy>

00027216 <net_buf_simple_add_u8>:
   27216:	8883      	ldrh	r3, [r0, #4]
   27218:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   2721a:	b510      	push	{r4, lr}
	buf->len += len;
   2721c:	1c5c      	adds	r4, r3, #1
   2721e:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   27220:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   27222:	18d0      	adds	r0, r2, r3
   27224:	bd10      	pop	{r4, pc}

00027226 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   27226:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   27228:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   2722a:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   2722c:	1a40      	subs	r0, r0, r1
	buf->len += len;
   2722e:	4411      	add	r1, r2
	buf->data -= len;
   27230:	6018      	str	r0, [r3, #0]
	buf->len += len;
   27232:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   27234:	4770      	bx	lr

00027236 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   27236:	8882      	ldrh	r2, [r0, #4]
   27238:	1a52      	subs	r2, r2, r1
{
   2723a:	4603      	mov	r3, r0
	buf->len -= len;
   2723c:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   2723e:	6800      	ldr	r0, [r0, #0]
   27240:	4408      	add	r0, r1
   27242:	6018      	str	r0, [r3, #0]
}
   27244:	4770      	bx	lr

00027246 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   27246:	4603      	mov	r3, r0
	void *data = buf->data;
   27248:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2724a:	889a      	ldrh	r2, [r3, #4]
   2724c:	1a52      	subs	r2, r2, r1
	buf->data += len;
   2724e:	4401      	add	r1, r0
	buf->len -= len;
   27250:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   27252:	6019      	str	r1, [r3, #0]

	return data;
}
   27254:	4770      	bx	lr

00027256 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   27256:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   27258:	6803      	ldr	r3, [r0, #0]
   2725a:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2725c:	2102      	movs	r1, #2
   2725e:	f7ff ffea 	bl	27236 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   27262:	4620      	mov	r0, r4
   27264:	bd10      	pop	{r4, pc}

00027266 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   27266:	6802      	ldr	r2, [r0, #0]
   27268:	6880      	ldr	r0, [r0, #8]
}
   2726a:	1a10      	subs	r0, r2, r0
   2726c:	4770      	bx	lr

0002726e <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2726e:	8883      	ldrh	r3, [r0, #4]
   27270:	88c2      	ldrh	r2, [r0, #6]
   27272:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   27274:	6803      	ldr	r3, [r0, #0]
   27276:	6880      	ldr	r0, [r0, #8]
   27278:	1a18      	subs	r0, r3, r0
}
   2727a:	1a10      	subs	r0, r2, r0
   2727c:	4770      	bx	lr

0002727e <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   2727e:	6902      	ldr	r2, [r0, #16]
   27280:	b2cb      	uxtb	r3, r1
   27282:	210c      	movs	r1, #12
   27284:	fb03 2101 	mla	r1, r3, r1, r2
   27288:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   2728a:	f000 0007 	and.w	r0, r0, #7
   2728e:	4770      	bx	lr

00027290 <set_off_state>:
	__asm__ volatile(
   27290:	f04f 0340 	mov.w	r3, #64	; 0x40
   27294:	f3ef 8211 	mrs	r2, BASEPRI
   27298:	f383 8812 	msr	BASEPRI_MAX, r3
   2729c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   272a0:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   272a2:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   272a6:	d001      	beq.n	272ac <set_off_state+0x1c>
   272a8:	428b      	cmp	r3, r1
   272aa:	d107      	bne.n	272bc <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   272ac:	2301      	movs	r3, #1
   272ae:	6003      	str	r3, [r0, #0]
	int err = 0;
   272b0:	2000      	movs	r0, #0
	__asm__ volatile(
   272b2:	f382 8811 	msr	BASEPRI, r2
   272b6:	f3bf 8f6f 	isb	sy
}
   272ba:	4770      	bx	lr
		err = -EPERM;
   272bc:	f04f 30ff 	mov.w	r0, #4294967295
   272c0:	e7f7      	b.n	272b2 <set_off_state+0x22>

000272c2 <set_starting_state>:
{
   272c2:	b510      	push	{r4, lr}
	__asm__ volatile(
   272c4:	f04f 0340 	mov.w	r3, #64	; 0x40
   272c8:	f3ef 8211 	mrs	r2, BASEPRI
   272cc:	f383 8812 	msr	BASEPRI_MAX, r3
   272d0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   272d4:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   272d6:	f003 0407 	and.w	r4, r3, #7
   272da:	2c01      	cmp	r4, #1
   272dc:	d106      	bne.n	272ec <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   272de:	6001      	str	r1, [r0, #0]
	int err = 0;
   272e0:	2000      	movs	r0, #0
	__asm__ volatile(
   272e2:	f382 8811 	msr	BASEPRI, r2
   272e6:	f3bf 8f6f 	isb	sy
}
   272ea:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   272ec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   272f0:	428b      	cmp	r3, r1
		err = -EALREADY;
   272f2:	bf14      	ite	ne
   272f4:	f04f 30ff 	movne.w	r0, #4294967295
   272f8:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   272fc:	e7f1      	b.n	272e2 <set_starting_state+0x20>

000272fe <set_on_state>:
	__asm__ volatile(
   272fe:	f04f 0340 	mov.w	r3, #64	; 0x40
   27302:	f3ef 8211 	mrs	r2, BASEPRI
   27306:	f383 8812 	msr	BASEPRI_MAX, r3
   2730a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2730e:	6803      	ldr	r3, [r0, #0]
   27310:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   27314:	f043 0302 	orr.w	r3, r3, #2
   27318:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2731a:	f382 8811 	msr	BASEPRI, r2
   2731e:	f3bf 8f6f 	isb	sy
}
   27322:	4770      	bx	lr

00027324 <onoff_started_callback>:
	return &data->mgr[type];
   27324:	6900      	ldr	r0, [r0, #16]
{
   27326:	b410      	push	{r4}
	return &data->mgr[type];
   27328:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2732a:	241c      	movs	r4, #28
   2732c:	fb03 0004 	mla	r0, r3, r4, r0
   27330:	2100      	movs	r1, #0
}
   27332:	bc10      	pop	{r4}
	notify(mgr, 0);
   27334:	4710      	bx	r2

00027336 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   27336:	2000      	movs	r0, #0
   27338:	f000 bcb1 	b.w	27c9e <nrfx_clock_stop>

0002733c <blocking_start_callback>:
{
   2733c:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2733e:	f7fa bbdf 	b.w	21b00 <z_impl_k_sem_give>

00027342 <api_stop>:
{
   27342:	b538      	push	{r3, r4, r5, lr}
   27344:	b2c9      	uxtb	r1, r1
	err = set_off_state(&subdata->flags, ctx);
   27346:	240c      	movs	r4, #12
   27348:	434c      	muls	r4, r1
{
   2734a:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   2734c:	6900      	ldr	r0, [r0, #16]
   2734e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   27352:	2180      	movs	r1, #128	; 0x80
   27354:	4418      	add	r0, r3
   27356:	f7ff ff9b 	bl	27290 <set_off_state>
	if (err < 0) {
   2735a:	2800      	cmp	r0, #0
   2735c:	db04      	blt.n	27368 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   2735e:	6869      	ldr	r1, [r5, #4]
   27360:	440c      	add	r4, r1
   27362:	6863      	ldr	r3, [r4, #4]
   27364:	4798      	blx	r3
	return 0;
   27366:	2000      	movs	r0, #0
}
   27368:	bd38      	pop	{r3, r4, r5, pc}

0002736a <api_start>:
{
   2736a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2736e:	b2c9      	uxtb	r1, r1
	err = set_starting_state(&subdata->flags, ctx);
   27370:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   27372:	6905      	ldr	r5, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
   27374:	434c      	muls	r4, r1
{
   27376:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   27378:	f104 0040 	add.w	r0, r4, #64	; 0x40
   2737c:	2180      	movs	r1, #128	; 0x80
   2737e:	4428      	add	r0, r5
{
   27380:	4690      	mov	r8, r2
   27382:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   27384:	f7ff ff9d 	bl	272c2 <set_starting_state>
	if (err < 0) {
   27388:	2800      	cmp	r0, #0
   2738a:	db06      	blt.n	2739a <api_start+0x30>
	subdata->cb = cb;
   2738c:	4425      	add	r5, r4
	subdata->user_data = user_data;
   2738e:	e9c5 870e 	strd	r8, r7, [r5, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   27392:	6873      	ldr	r3, [r6, #4]
   27394:	591b      	ldr	r3, [r3, r4]
   27396:	4798      	blx	r3
	return 0;
   27398:	2000      	movs	r0, #0
}
   2739a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002739e <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2739e:	6843      	ldr	r3, [r0, #4]
   273a0:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   273a2:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   273a6:	600b      	str	r3, [r1, #0]
}
   273a8:	2000      	movs	r0, #0
   273aa:	4770      	bx	lr

000273ac <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   273ac:	6843      	ldr	r3, [r0, #4]
   273ae:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   273b0:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   273b4:	4042      	eors	r2, r0
   273b6:	400a      	ands	r2, r1
   273b8:	4042      	eors	r2, r0
    p_reg->OUT = value;
   273ba:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   273be:	2000      	movs	r0, #0
   273c0:	4770      	bx	lr

000273c2 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   273c2:	6843      	ldr	r3, [r0, #4]
   273c4:	685b      	ldr	r3, [r3, #4]
}
   273c6:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   273c8:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   273cc:	4770      	bx	lr

000273ce <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   273ce:	6843      	ldr	r3, [r0, #4]
   273d0:	685b      	ldr	r3, [r3, #4]
}
   273d2:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   273d4:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   273d8:	4770      	bx	lr

000273da <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   273da:	6843      	ldr	r3, [r0, #4]
   273dc:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   273de:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   273e2:	404b      	eors	r3, r1
    p_reg->OUT = value;
   273e4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   273e8:	2000      	movs	r0, #0
   273ea:	4770      	bx	lr

000273ec <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   273ec:	6903      	ldr	r3, [r0, #16]
Z_GENLIST_IS_EMPTY(slist)
   273ee:	6858      	ldr	r0, [r3, #4]
{
   273f0:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   273f2:	b158      	cbz	r0, 2740c <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   273f4:	2400      	movs	r4, #0
   273f6:	4281      	cmp	r1, r0
   273f8:	d113      	bne.n	27422 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   273fa:	6808      	ldr	r0, [r1, #0]
   273fc:	b95c      	cbnz	r4, 27416 <gpio_nrfx_manage_callback+0x2a>
   273fe:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   27400:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   27402:	42a1      	cmp	r1, r4
   27404:	d100      	bne.n	27408 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   27406:	6098      	str	r0, [r3, #8]
	parent->next = child;
   27408:	2000      	movs	r0, #0
   2740a:	6008      	str	r0, [r1, #0]
	if (set) {
   2740c:	b972      	cbnz	r2, 2742c <gpio_nrfx_manage_callback+0x40>
	return 0;
   2740e:	2000      	movs	r0, #0
}
   27410:	bd30      	pop	{r4, r5, pc}
   27412:	4628      	mov	r0, r5
   27414:	e7ef      	b.n	273f6 <gpio_nrfx_manage_callback+0xa>
   27416:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   27418:	6898      	ldr	r0, [r3, #8]
   2741a:	4281      	cmp	r1, r0
	list->tail = node;
   2741c:	bf08      	it	eq
   2741e:	609c      	streq	r4, [r3, #8]
}
   27420:	e7f2      	b.n	27408 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   27422:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   27424:	4604      	mov	r4, r0
   27426:	2d00      	cmp	r5, #0
   27428:	d1f3      	bne.n	27412 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   2742a:	b13a      	cbz	r2, 2743c <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   2742c:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2742e:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   27430:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   27432:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   27434:	2800      	cmp	r0, #0
   27436:	d1ea      	bne.n	2740e <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   27438:	6099      	str	r1, [r3, #8]
}
   2743a:	e7e9      	b.n	27410 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   2743c:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   27440:	e7e6      	b.n	27410 <gpio_nrfx_manage_callback+0x24>

00027442 <pin_interrupt_configure>:
	if (!IS_ENABLED(CONFIG_GPIO_SX1509B_INTERRUPT)
   27442:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
}
   27446:	bf14      	ite	ne
   27448:	f06f 0085 	mvnne.w	r0, #133	; 0x85
   2744c:	2000      	moveq	r0, #0
   2744e:	4770      	bx	lr

00027450 <k_sem_take.constprop.0>:
	return z_impl_k_sem_take(sem, timeout);
   27450:	f7fa bb7c 	b.w	21b4c <z_impl_k_sem_take>

00027454 <port_get>:
{
   27454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27458:	b088      	sub	sp, #32
	const struct sx1509b_config *cfg = dev->config;
   2745a:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
   2745e:	6907      	ldr	r7, [r0, #16]
{
   27460:	460d      	mov	r5, r1
	if (k_is_in_isr()) {
   27462:	f001 f8e0 	bl	28626 <k_is_in_isr>
   27466:	4604      	mov	r4, r0
   27468:	bb88      	cbnz	r0, 274ce <port_get+0x7a>
	k_sem_take(&drv_data->lock, K_FOREVER);
   2746a:	f107 0620 	add.w	r6, r7, #32
   2746e:	f04f 32ff 	mov.w	r2, #4294967295
   27472:	f04f 33ff 	mov.w	r3, #4294967295
   27476:	4630      	mov	r0, r6
   27478:	f7ff ffea 	bl	27450 <k_sem_take.constprop.0>
	msg[0].buf = (uint8_t *)write_buf;
   2747c:	f10d 0205 	add.w	r2, sp, #5
   27480:	9202      	str	r2, [sp, #8]
	msg[0].len = num_write;
   27482:	2201      	movs	r2, #1
	rc = i2c_write_read(drv_data->i2c_master, cfg->i2c_slave_addr,
   27484:	6878      	ldr	r0, [r7, #4]
   27486:	9203      	str	r2, [sp, #12]
	uint8_t cmd = SX1509B_REG_DATA;
   27488:	2310      	movs	r3, #16
	msg[1].buf = (uint8_t *)read_buf;
   2748a:	f10d 0206 	add.w	r2, sp, #6
   2748e:	f88d 3005 	strb.w	r3, [sp, #5]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   27492:	2107      	movs	r1, #7
	rc = i2c_write_read(drv_data->i2c_master, cfg->i2c_slave_addr,
   27494:	f8b8 3008 	ldrh.w	r3, [r8, #8]
	msg[1].buf = (uint8_t *)read_buf;
   27498:	9205      	str	r2, [sp, #20]
	msg[1].len = num_read;
   2749a:	2202      	movs	r2, #2
	msg[0].flags = I2C_MSG_WRITE;
   2749c:	f88d 4010 	strb.w	r4, [sp, #16]
	msg[1].len = num_read;
   274a0:	9206      	str	r2, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   274a2:	f88d 101c 	strb.w	r1, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   274a6:	6881      	ldr	r1, [r0, #8]
   274a8:	688c      	ldr	r4, [r1, #8]
   274aa:	a902      	add	r1, sp, #8
   274ac:	47a0      	blx	r4
	if (rc != 0) {
   274ae:	4604      	mov	r4, r0
   274b0:	b930      	cbnz	r0, 274c0 <port_get+0x6c>
	*value = sys_be16_to_cpu(pin_data);
   274b2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   274b6:	0213      	lsls	r3, r2, #8
   274b8:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   274bc:	b29b      	uxth	r3, r3
   274be:	602b      	str	r3, [r5, #0]
	z_impl_k_sem_give(sem);
   274c0:	4630      	mov	r0, r6
   274c2:	f7fa fb1d 	bl	21b00 <z_impl_k_sem_give>
}
   274c6:	4620      	mov	r0, r4
   274c8:	b008      	add	sp, #32
   274ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EWOULDBLOCK;
   274ce:	f06f 040a 	mvn.w	r4, #10
   274d2:	e7f8      	b.n	274c6 <port_get+0x72>

000274d4 <i2c_write>:
{
   274d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	msg.len = num_bytes;
   274d6:	e9cd 1201 	strd	r1, r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   274da:	2202      	movs	r2, #2
   274dc:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   274e0:	6882      	ldr	r2, [r0, #8]
   274e2:	a901      	add	r1, sp, #4
   274e4:	6894      	ldr	r4, [r2, #8]
   274e6:	2201      	movs	r2, #1
   274e8:	47a0      	blx	r4
}
   274ea:	b004      	add	sp, #16
   274ec:	bd10      	pop	{r4, pc}

000274ee <i2c_reg_write_word_be>:
{
   274ee:	b507      	push	{r0, r1, r2, lr}
	uint8_t tx_buf[3] = { reg_addr, value >> 8, value & 0xff };
   274f0:	f88d 2004 	strb.w	r2, [sp, #4]
   274f4:	0a1a      	lsrs	r2, r3, #8
   274f6:	f88d 2005 	strb.w	r2, [sp, #5]
   274fa:	f88d 3006 	strb.w	r3, [sp, #6]
	return i2c_write(dev, tx_buf, 3, dev_addr);
   274fe:	2203      	movs	r2, #3
   27500:	460b      	mov	r3, r1
   27502:	a901      	add	r1, sp, #4
   27504:	f7ff ffe6 	bl	274d4 <i2c_write>
}
   27508:	b003      	add	sp, #12
   2750a:	f85d fb04 	ldr.w	pc, [sp], #4

0002750e <port_write>:
{
   2750e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27512:	4605      	mov	r5, r0
   27514:	4689      	mov	r9, r1
   27516:	4614      	mov	r4, r2
   27518:	4698      	mov	r8, r3
	if (k_is_in_isr()) {
   2751a:	f001 f884 	bl	28626 <k_is_in_isr>
   2751e:	bb08      	cbnz	r0, 27564 <port_write+0x56>
	const struct sx1509b_config *cfg = dev->config;
   27520:	686f      	ldr	r7, [r5, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
   27522:	692d      	ldr	r5, [r5, #16]
	k_sem_take(&drv_data->lock, K_FOREVER);
   27524:	f105 0620 	add.w	r6, r5, #32
   27528:	f04f 32ff 	mov.w	r2, #4294967295
   2752c:	f04f 33ff 	mov.w	r3, #4294967295
   27530:	4630      	mov	r0, r6
   27532:	f7ff ff8d 	bl	27450 <k_sem_take.constprop.0>
	uint16_t orig_out = *outp;
   27536:	8b28      	ldrh	r0, [r5, #24]
	int rc = i2c_reg_write_word_be(drv_data->i2c_master, cfg->i2c_slave_addr,
   27538:	8939      	ldrh	r1, [r7, #8]
	uint16_t out = ((orig_out & ~mask) | (value & mask)) ^ toggle;
   2753a:	4044      	eors	r4, r0
   2753c:	ea04 0409 	and.w	r4, r4, r9
   27540:	ea84 0408 	eor.w	r4, r4, r8
   27544:	4044      	eors	r4, r0
   27546:	b2a4      	uxth	r4, r4
	int rc = i2c_reg_write_word_be(drv_data->i2c_master, cfg->i2c_slave_addr,
   27548:	6868      	ldr	r0, [r5, #4]
   2754a:	4623      	mov	r3, r4
   2754c:	2210      	movs	r2, #16
   2754e:	f7ff ffce 	bl	274ee <i2c_reg_write_word_be>
	if (rc == 0) {
   27552:	4607      	mov	r7, r0
   27554:	b900      	cbnz	r0, 27558 <port_write+0x4a>
		*outp = out;
   27556:	832c      	strh	r4, [r5, #24]
   27558:	4630      	mov	r0, r6
   2755a:	f7fa fad1 	bl	21b00 <z_impl_k_sem_give>
}
   2755e:	4638      	mov	r0, r7
   27560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EWOULDBLOCK;
   27564:	f06f 070a 	mvn.w	r7, #10
   27568:	e7f9      	b.n	2755e <port_write+0x50>

0002756a <port_toggle_bits>:
	return port_write(dev, 0, 0, pins);
   2756a:	2200      	movs	r2, #0
{
   2756c:	460b      	mov	r3, r1
	return port_write(dev, 0, 0, pins);
   2756e:	4611      	mov	r1, r2
   27570:	f7ff bfcd 	b.w	2750e <port_write>

00027574 <port_clear_bits>:
	return port_write(dev, pins, 0, 0);
   27574:	2300      	movs	r3, #0
   27576:	461a      	mov	r2, r3
   27578:	f7ff bfc9 	b.w	2750e <port_write>

0002757c <port_set_bits>:
{
   2757c:	460a      	mov	r2, r1
	return port_write(dev, pins, pins, 0);
   2757e:	2300      	movs	r3, #0
   27580:	f7ff bfc5 	b.w	2750e <port_write>

00027584 <port_set_masked>:
	return port_write(dev, mask, value, 0);
   27584:	2300      	movs	r3, #0
   27586:	f7ff bfc2 	b.w	2750e <port_write>

0002758a <write_pin_state.isra.0>:
static int write_pin_state(const struct sx1509b_config *cfg,
   2758a:	b570      	push	{r4, r5, r6, lr}
   2758c:	460c      	mov	r4, r1
   2758e:	b086      	sub	sp, #24
	pin_buf.pins.input_disable = sys_cpu_to_be16(pins->input_disable);
   27590:	8811      	ldrh	r1, [r2, #0]
static int write_pin_state(const struct sx1509b_config *cfg,
   27592:	461e      	mov	r6, r3
	pin_buf.reg = SX1509B_REG_INPUT_DISABLE;
   27594:	2300      	movs	r3, #0
   27596:	f88d 3004 	strb.w	r3, [sp, #4]
	pin_buf.pins.input_disable = sys_cpu_to_be16(pins->input_disable);
   2759a:	020b      	lsls	r3, r1, #8
   2759c:	ea43 2311 	orr.w	r3, r3, r1, lsr #8
   275a0:	f8ad 3005 	strh.w	r3, [sp, #5]
	pin_buf.pins.long_slew = sys_cpu_to_be16(pins->long_slew);
   275a4:	8851      	ldrh	r1, [r2, #2]
   275a6:	020b      	lsls	r3, r1, #8
   275a8:	ea43 2311 	orr.w	r3, r3, r1, lsr #8
   275ac:	f8ad 3007 	strh.w	r3, [sp, #7]
	pin_buf.pins.low_drive = sys_cpu_to_be16(pins->low_drive);
   275b0:	8891      	ldrh	r1, [r2, #4]
   275b2:	020b      	lsls	r3, r1, #8
   275b4:	ea43 2311 	orr.w	r3, r3, r1, lsr #8
   275b8:	f8ad 3009 	strh.w	r3, [sp, #9]
	pin_buf.pins.pull_up = sys_cpu_to_be16(pins->pull_up);
   275bc:	88d1      	ldrh	r1, [r2, #6]
   275be:	020b      	lsls	r3, r1, #8
   275c0:	ea43 2311 	orr.w	r3, r3, r1, lsr #8
   275c4:	f8ad 300b 	strh.w	r3, [sp, #11]
	pin_buf.pins.pull_down = sys_cpu_to_be16(pins->pull_down);
   275c8:	8913      	ldrh	r3, [r2, #8]
   275ca:	0219      	lsls	r1, r3, #8
   275cc:	ea41 2113 	orr.w	r1, r1, r3, lsr #8
   275d0:	f8ad 100d 	strh.w	r1, [sp, #13]
	pin_buf.pins.open_drain = sys_cpu_to_be16(pins->open_drain);
   275d4:	8953      	ldrh	r3, [r2, #10]
   275d6:	0219      	lsls	r1, r3, #8
   275d8:	ea41 2113 	orr.w	r1, r1, r3, lsr #8
   275dc:	f8ad 100f 	strh.w	r1, [sp, #15]
	pin_buf.pins.polarity = sys_cpu_to_be16(pins->polarity);
   275e0:	8993      	ldrh	r3, [r2, #12]
   275e2:	0219      	lsls	r1, r3, #8
   275e4:	ea41 2113 	orr.w	r1, r1, r3, lsr #8
   275e8:	f8ad 1011 	strh.w	r1, [sp, #17]
	pin_buf.pins.dir = sys_cpu_to_be16(pins->dir);
   275ec:	89d3      	ldrh	r3, [r2, #14]
   275ee:	0219      	lsls	r1, r3, #8
   275f0:	ea41 2113 	orr.w	r1, r1, r3, lsr #8
   275f4:	f8ad 1013 	strh.w	r1, [sp, #19]
	pin_buf.pins.data = sys_cpu_to_be16(pins->data);
   275f8:	8a13      	ldrh	r3, [r2, #16]
static int write_pin_state(const struct sx1509b_config *cfg,
   275fa:	4605      	mov	r5, r0
	pin_buf.pins.data = sys_cpu_to_be16(pins->data);
   275fc:	021a      	lsls	r2, r3, #8
   275fe:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
   27602:	6820      	ldr	r0, [r4, #0]
   27604:	8829      	ldrh	r1, [r5, #0]
   27606:	f8ad 2015 	strh.w	r2, [sp, #21]
	if (data_first) {
   2760a:	b15e      	cbz	r6, 27624 <write_pin_state.isra.0+0x9a>
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
   2760c:	2210      	movs	r2, #16
   2760e:	f7ff ff6e 	bl	274ee <i2c_reg_write_word_be>
		if (rc == 0) {
   27612:	b928      	cbnz	r0, 27620 <write_pin_state.isra.0+0x96>
			rc = i2c_write(drv_data->i2c_master, &pin_buf.reg,
   27614:	882b      	ldrh	r3, [r5, #0]
   27616:	6820      	ldr	r0, [r4, #0]
   27618:	2211      	movs	r2, #17
   2761a:	a901      	add	r1, sp, #4
		rc = i2c_write(drv_data->i2c_master, &pin_buf.reg,
   2761c:	f7ff ff5a 	bl	274d4 <i2c_write>
}
   27620:	b006      	add	sp, #24
   27622:	bd70      	pop	{r4, r5, r6, pc}
		rc = i2c_write(drv_data->i2c_master, &pin_buf.reg,
   27624:	460b      	mov	r3, r1
   27626:	2213      	movs	r2, #19
   27628:	a901      	add	r1, sp, #4
   2762a:	e7f7      	b.n	2761c <write_pin_state.isra.0+0x92>

0002762c <sx1509b_config>:
{
   2762c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct sx1509b_config *cfg = dev->config;
   27630:	f8d0 a004 	ldr.w	sl, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
   27634:	6904      	ldr	r4, [r0, #16]
{
   27636:	460d      	mov	r5, r1
   27638:	4617      	mov	r7, r2
	if (k_is_in_isr()) {
   2763a:	f000 fff4 	bl	28626 <k_is_in_isr>
   2763e:	4683      	mov	fp, r0
   27640:	2800      	cmp	r0, #0
   27642:	f040 808f 	bne.w	27764 <sx1509b_config+0x138>
	if ((flags & GPIO_DS_ALT) != 0) {
   27646:	f417 0fa0 	tst.w	r7, #5242880	; 0x500000
   2764a:	f040 808e 	bne.w	2776a <sx1509b_config+0x13e>
	k_sem_take(&drv_data->lock, K_FOREVER);
   2764e:	f104 0920 	add.w	r9, r4, #32
   27652:	f04f 33ff 	mov.w	r3, #4294967295
   27656:	f04f 32ff 	mov.w	r2, #4294967295
   2765a:	4648      	mov	r0, r9
   2765c:	f7ff fef8 	bl	27450 <k_sem_take.constprop.0>
	if (drv_data->led_drv_enable & BIT(pin)) {
   27660:	2601      	movs	r6, #1
   27662:	8b63      	ldrh	r3, [r4, #26]
   27664:	40ae      	lsls	r6, r5
   27666:	b2b6      	uxth	r6, r6
   27668:	fa23 f505 	lsr.w	r5, r3, r5
   2766c:	ea6f 0806 	mvn.w	r8, r6
   27670:	07e9      	lsls	r1, r5, #31
   27672:	fa1f f888 	uxth.w	r8, r8
   27676:	d452      	bmi.n	2771e <sx1509b_config+0xf2>
	pins->open_drain &= ~BIT(pin);
   27678:	8a63      	ldrh	r3, [r4, #18]
   2767a:	ea03 0208 	and.w	r2, r3, r8
   2767e:	8262      	strh	r2, [r4, #18]
	if ((flags & GPIO_SINGLE_ENDED) != 0) {
   27680:	07ba      	lsls	r2, r7, #30
   27682:	d45f      	bmi.n	27744 <sx1509b_config+0x118>
	if ((flags & GPIO_PULL_UP) != 0) {
   27684:	89e3      	ldrh	r3, [r4, #14]
   27686:	06f8      	lsls	r0, r7, #27
		pins->pull_up |= BIT(pin);
   27688:	bf4c      	ite	mi
   2768a:	4333      	orrmi	r3, r6
		pins->pull_up &= ~BIT(pin);
   2768c:	ea08 0303 	andpl.w	r3, r8, r3
   27690:	81e3      	strh	r3, [r4, #14]
	if ((flags & GPIO_PULL_DOWN) != 0) {
   27692:	8a23      	ldrh	r3, [r4, #16]
   27694:	06b9      	lsls	r1, r7, #26
		pins->pull_down |= BIT(pin);
   27696:	bf4c      	ite	mi
   27698:	4333      	orrmi	r3, r6
		pins->pull_down &= ~BIT(pin);
   2769a:	ea08 0303 	andpl.w	r3, r8, r3
   2769e:	8223      	strh	r3, [r4, #16]
	if ((flags & GPIO_INPUT) != 0) {
   276a0:	8923      	ldrh	r3, [r4, #8]
   276a2:	05fa      	lsls	r2, r7, #23
		pins->input_disable &= ~BIT(pin);
   276a4:	bf4c      	ite	mi
   276a6:	ea03 0308 	andmi.w	r3, r3, r8
		pins->input_disable |= BIT(pin);
   276aa:	4333      	orrpl	r3, r6
	if ((flags & GPIO_OUTPUT) != 0) {
   276ac:	05bd      	lsls	r5, r7, #22
   276ae:	8123      	strh	r3, [r4, #8]
   276b0:	8ae3      	ldrh	r3, [r4, #22]
   276b2:	d551      	bpl.n	27758 <sx1509b_config+0x12c>
		pins->dir &= ~BIT(pin);
   276b4:	ea03 0308 	and.w	r3, r3, r8
		if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   276b8:	0578      	lsls	r0, r7, #21
		pins->dir &= ~BIT(pin);
   276ba:	82e3      	strh	r3, [r4, #22]
		if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   276bc:	d547      	bpl.n	2774e <sx1509b_config+0x122>
			pins->data &= ~BIT(pin);
   276be:	8b23      	ldrh	r3, [r4, #24]
   276c0:	ea08 0303 	and.w	r3, r8, r3
			pins->data |= BIT(pin);
   276c4:	8323      	strh	r3, [r4, #24]
			data_first = true;
   276c6:	f04f 0b01 	mov.w	fp, #1
	if ((flags & GPIO_INT_DEBOUNCE) != 0) {
   276ca:	f8b4 301d 	ldrh.w	r3, [r4, #29]
   276ce:	033a      	lsls	r2, r7, #12
		debounce->debounce_enable |= BIT(pin);
   276d0:	bf4c      	ite	mi
   276d2:	431e      	orrmi	r6, r3
		debounce->debounce_enable &= ~BIT(pin);
   276d4:	ea03 0608 	andpl.w	r6, r3, r8
   276d8:	f8a4 601d 	strh.w	r6, [r4, #29]
	rc = write_pin_state(cfg, drv_data, pins, data_first);
   276dc:	465b      	mov	r3, fp
   276de:	f104 0208 	add.w	r2, r4, #8
   276e2:	1d21      	adds	r1, r4, #4
   276e4:	f10a 0008 	add.w	r0, sl, #8
   276e8:	f7ff ff4f 	bl	2758a <write_pin_state.isra.0>
	if (rc == 0) {
   276ec:	4605      	mov	r5, r0
   276ee:	bb10      	cbnz	r0, 27736 <sx1509b_config+0x10a>
			= sys_cpu_to_be16(debounce->debounce_enable);
   276f0:	f8b4 201d 	ldrh.w	r2, [r4, #29]
		rc = i2c_write(drv_data->i2c_master,
   276f4:	6860      	ldr	r0, [r4, #4]
		debounce_buf.reg = SX1509B_REG_DEBOUNCE_CONFIG;
   276f6:	2322      	movs	r3, #34	; 0x22
   276f8:	f88d 3004 	strb.w	r3, [sp, #4]
			= debounce->debounce_config;
   276fc:	7f23      	ldrb	r3, [r4, #28]
   276fe:	f88d 3005 	strb.w	r3, [sp, #5]
			= sys_cpu_to_be16(debounce->debounce_enable);
   27702:	0213      	lsls	r3, r2, #8
   27704:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
		rc = i2c_write(drv_data->i2c_master,
   27708:	2204      	movs	r2, #4
			= sys_cpu_to_be16(debounce->debounce_enable);
   2770a:	f8ad 3006 	strh.w	r3, [sp, #6]
		rc = i2c_write(drv_data->i2c_master,
   2770e:	eb0d 0102 	add.w	r1, sp, r2
   27712:	f8ba 3008 	ldrh.w	r3, [sl, #8]
   27716:	f7ff fedd 	bl	274d4 <i2c_write>
   2771a:	4605      	mov	r5, r0
   2771c:	e00b      	b.n	27736 <sx1509b_config+0x10a>
		drv_data->led_drv_enable &= ~BIT(pin);
   2771e:	ea03 0308 	and.w	r3, r3, r8
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
   27722:	f8ba 1008 	ldrh.w	r1, [sl, #8]
   27726:	6860      	ldr	r0, [r4, #4]
		drv_data->led_drv_enable &= ~BIT(pin);
   27728:	8363      	strh	r3, [r4, #26]
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
   2772a:	2220      	movs	r2, #32
   2772c:	f7ff fedf 	bl	274ee <i2c_reg_write_word_be>
		if (rc) {
   27730:	4605      	mov	r5, r0
   27732:	2800      	cmp	r0, #0
   27734:	d0a0      	beq.n	27678 <sx1509b_config+0x4c>
   27736:	4648      	mov	r0, r9
   27738:	f7fa f9e2 	bl	21b00 <z_impl_k_sem_give>
}
   2773c:	4628      	mov	r0, r5
   2773e:	b003      	add	sp, #12
   27740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((flags & GPIO_LINE_OPEN_DRAIN) != 0) {
   27744:	077d      	lsls	r5, r7, #29
   27746:	d50a      	bpl.n	2775e <sx1509b_config+0x132>
			pins->open_drain |= BIT(pin);
   27748:	4333      	orrs	r3, r6
   2774a:	8263      	strh	r3, [r4, #18]
   2774c:	e79a      	b.n	27684 <sx1509b_config+0x58>
		} else if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   2774e:	0539      	lsls	r1, r7, #20
   27750:	d5bb      	bpl.n	276ca <sx1509b_config+0x9e>
			pins->data |= BIT(pin);
   27752:	8b23      	ldrh	r3, [r4, #24]
   27754:	4333      	orrs	r3, r6
   27756:	e7b5      	b.n	276c4 <sx1509b_config+0x98>
		pins->dir |= BIT(pin);
   27758:	4333      	orrs	r3, r6
   2775a:	82e3      	strh	r3, [r4, #22]
   2775c:	e7b5      	b.n	276ca <sx1509b_config+0x9e>
			rc = -ENOTSUP;
   2775e:	f06f 0585 	mvn.w	r5, #133	; 0x85
   27762:	e7e8      	b.n	27736 <sx1509b_config+0x10a>
		return -EWOULDBLOCK;
   27764:	f06f 050a 	mvn.w	r5, #10
   27768:	e7e8      	b.n	2773c <sx1509b_config+0x110>
		return -ENOTSUP;
   2776a:	f06f 0585 	mvn.w	r5, #133	; 0x85
   2776e:	e7e5      	b.n	2773c <sx1509b_config+0x110>

00027770 <twim_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twim_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
   27770:	b510      	push	{r4, lr}
   27772:	2200      	movs	r2, #0
   27774:	4604      	mov	r4, r0
   27776:	2101      	movs	r1, #1
   27778:	2003      	movs	r0, #3
   2777a:	f7ec f965 	bl	13a48 <z_arm_irq_priority_set>
   2777e:	4620      	mov	r0, r4
   27780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27784:	f7f6 b8f0 	b.w	1d968 <init_twim>

00027788 <twim_1_init>:
#endif

#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
   27788:	b510      	push	{r4, lr}
   2778a:	2200      	movs	r2, #0
   2778c:	4604      	mov	r4, r0
   2778e:	2101      	movs	r1, #1
   27790:	2004      	movs	r0, #4
   27792:	f7ec f959 	bl	13a48 <z_arm_irq_priority_set>
   27796:	4620      	mov	r0, r4
   27798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2779c:	f7f6 b8e4 	b.w	1d968 <init_twim>

000277a0 <stmemsc_i2c_read>:

#include "stmemsc.h"

int stmemsc_i2c_read(const struct i2c_dt_spec *stmemsc,
			     uint8_t reg_addr, uint8_t *value, uint8_t len)
{
   277a0:	b530      	push	{r4, r5, lr}
   277a2:	b089      	sub	sp, #36	; 0x24
   277a4:	4604      	mov	r4, r0
   277a6:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   277aa:	f10d 0107 	add.w	r1, sp, #7
   277ae:	461d      	mov	r5, r3
   277b0:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
   277b2:	2101      	movs	r1, #1
	return i2c_burst_read_dt(stmemsc, reg_addr, value, len);
   277b4:	e9cd 2505 	strd	r2, r5, [sp, #20]
   277b8:	9103      	str	r1, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   277ba:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
   277bc:	2100      	movs	r1, #0
	return i2c_burst_read(spec->bus, spec->addr,
   277be:	6800      	ldr	r0, [r0, #0]
   277c0:	88a3      	ldrh	r3, [r4, #4]
	msg[0].flags = I2C_MSG_WRITE;
   277c2:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   277c6:	f88d 201c 	strb.w	r2, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   277ca:	6882      	ldr	r2, [r0, #8]
   277cc:	a902      	add	r1, sp, #8
   277ce:	6894      	ldr	r4, [r2, #8]
   277d0:	2202      	movs	r2, #2
   277d2:	47a0      	blx	r4
}
   277d4:	b009      	add	sp, #36	; 0x24
   277d6:	bd30      	pop	{r4, r5, pc}

000277d8 <stmemsc_i2c_write>:

int stmemsc_i2c_write(const struct i2c_dt_spec *stmemsc,
			      uint8_t reg_addr, uint8_t *value, uint8_t len)
{
   277d8:	b530      	push	{r4, r5, lr}
   277da:	b089      	sub	sp, #36	; 0x24
   277dc:	4604      	mov	r4, r0
   277de:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = &start_addr;
   277e2:	f10d 0107 	add.w	r1, sp, #7
   277e6:	461d      	mov	r5, r3
   277e8:	9102      	str	r1, [sp, #8]
	msg[0].len = 1U;
   277ea:	2101      	movs	r1, #1
	return i2c_burst_write_dt(stmemsc, reg_addr, value, len);
   277ec:	e9cd 2505 	strd	r2, r5, [sp, #20]
   277f0:	9103      	str	r1, [sp, #12]
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   277f2:	2202      	movs	r2, #2
	msg[0].flags = I2C_MSG_WRITE;
   277f4:	2100      	movs	r1, #0
	return i2c_burst_write(spec->bus, spec->addr,
   277f6:	6800      	ldr	r0, [r0, #0]
   277f8:	88a3      	ldrh	r3, [r4, #4]
	msg[0].flags = I2C_MSG_WRITE;
   277fa:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   277fe:	f88d 201c 	strb.w	r2, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   27802:	6881      	ldr	r1, [r0, #8]
   27804:	688c      	ldr	r4, [r1, #8]
   27806:	a902      	add	r1, sp, #8
   27808:	47a0      	blx	r4
}
   2780a:	b009      	add	sp, #36	; 0x24
   2780c:	bd30      	pop	{r4, r5, pc}

0002780e <gpio_pin_set_dt>:
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
   2780e:	4603      	mov	r3, r0
   27810:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
   27812:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   27814:	7919      	ldrb	r1, [r3, #4]
   27816:	2301      	movs	r3, #1
   27818:	fa03 f101 	lsl.w	r1, r3, r1
   2781c:	6903      	ldr	r3, [r0, #16]
   2781e:	681b      	ldr	r3, [r3, #0]
   27820:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   27822:	bf18      	it	ne
   27824:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   27828:	b112      	cbz	r2, 27830 <gpio_pin_set_dt+0x22>
	return api->port_set_bits_raw(port, pins);
   2782a:	6883      	ldr	r3, [r0, #8]
   2782c:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   2782e:	4718      	bx	r3
   27830:	6883      	ldr	r3, [r0, #8]
   27832:	691b      	ldr	r3, [r3, #16]
   27834:	e7fb      	b.n	2782e <gpio_pin_set_dt+0x20>

00027836 <disable_sync>:
{
   27836:	b530      	push	{r4, r5, lr}
	int rc = onoff_sync_lock(&data->srv, &key);
   27838:	6904      	ldr	r4, [r0, #16]
	const struct driver_config *cfg = dev->config;
   2783a:	6845      	ldr	r5, [r0, #4]
{
   2783c:	b085      	sub	sp, #20
	int rc = onoff_sync_lock(&data->srv, &key);
   2783e:	a903      	add	r1, sp, #12
   27840:	4620      	mov	r0, r4
   27842:	f7fd f93c 	bl	24abe <onoff_sync_lock>
	if  ((cfg->options & OPTION_ALWAYS_ON) != 0) {
   27846:	7d29      	ldrb	r1, [r5, #20]
   27848:	f011 0101 	ands.w	r1, r1, #1
	int rc = onoff_sync_lock(&data->srv, &key);
   2784c:	4603      	mov	r3, r0
	if  ((cfg->options & OPTION_ALWAYS_ON) != 0) {
   2784e:	d114      	bne.n	2787a <disable_sync+0x44>
	} else if (rc == 1) {
   27850:	2801      	cmp	r0, #1
   27852:	d10c      	bne.n	2786e <disable_sync+0x38>
		rc = gpio_pin_set_dt(&cfg->enable, false);
   27854:	f105 000c 	add.w	r0, r5, #12
   27858:	f7ff ffd9 	bl	2780e <gpio_pin_set_dt>
   2785c:	4603      	mov	r3, r0
	return onoff_sync_finalize(&data->srv, key, NULL, rc, false);
   2785e:	2200      	movs	r2, #0
   27860:	9903      	ldr	r1, [sp, #12]
   27862:	9200      	str	r2, [sp, #0]
   27864:	4620      	mov	r0, r4
   27866:	f7fd f935 	bl	24ad4 <onoff_sync_finalize>
}
   2786a:	b005      	add	sp, #20
   2786c:	bd30      	pop	{r4, r5, pc}
		rc = -EINVAL;
   2786e:	2800      	cmp	r0, #0
   27870:	bf14      	ite	ne
   27872:	4603      	movne	r3, r0
   27874:	f06f 0315 	mvneq.w	r3, #21
   27878:	e7f1      	b.n	2785e <disable_sync+0x28>
		rc = 0;
   2787a:	2300      	movs	r3, #0
   2787c:	e7ef      	b.n	2785e <disable_sync+0x28>

0002787e <enable_sync>:
{
   2787e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc = onoff_sync_lock(&data->srv, &key);
   27880:	6905      	ldr	r5, [r0, #16]
	const struct driver_config *cfg = dev->config;
   27882:	6846      	ldr	r6, [r0, #4]
{
   27884:	460c      	mov	r4, r1
	int rc = onoff_sync_lock(&data->srv, &key);
   27886:	4628      	mov	r0, r5
   27888:	a903      	add	r1, sp, #12
   2788a:	f7fd f918 	bl	24abe <onoff_sync_lock>
	if ((rc == 0)
   2788e:	4603      	mov	r3, r0
   27890:	b940      	cbnz	r0, 278a4 <enable_sync+0x26>
	    && ((cfg->options & OPTION_ALWAYS_ON) == 0)) {
   27892:	7d32      	ldrb	r2, [r6, #20]
   27894:	07d2      	lsls	r2, r2, #31
   27896:	d405      	bmi.n	278a4 <enable_sync+0x26>
		rc = gpio_pin_set_dt(&cfg->enable, true);
   27898:	2101      	movs	r1, #1
   2789a:	f106 000c 	add.w	r0, r6, #12
   2789e:	f7ff ffb6 	bl	2780e <gpio_pin_set_dt>
   278a2:	4603      	mov	r3, r0
	return onoff_sync_finalize(&data->srv, key, cli, rc, true);
   278a4:	2201      	movs	r2, #1
   278a6:	9200      	str	r2, [sp, #0]
   278a8:	9903      	ldr	r1, [sp, #12]
   278aa:	4622      	mov	r2, r4
   278ac:	4628      	mov	r0, r5
   278ae:	f7fd f911 	bl	24ad4 <onoff_sync_finalize>
}
   278b2:	b004      	add	sp, #16
   278b4:	bd70      	pop	{r4, r5, r6, pc}

000278b6 <disable_onoff>:
	return onoff_release(&data->mgr);
   278b6:	6900      	ldr	r0, [r0, #16]
   278b8:	3004      	adds	r0, #4
   278ba:	f7fd b8db 	b.w	24a74 <onoff_release>

000278be <enable_onoff>:
	return onoff_request(&data->mgr, cli);
   278be:	6900      	ldr	r0, [r0, #16]
   278c0:	3004      	adds	r0, #4
   278c2:	f7fd b88e 	b.w	249e2 <onoff_request>

000278c6 <onoff_worker>:
{
   278c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (data->task == WORK_TASK_ENABLE) {
   278ca:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
	const struct driver_config *cfg = data->dev->config;
   278ce:	f850 3c20 	ldr.w	r3, [r0, #-32]
	onoff_notify_fn notify = data->notify;
   278d2:	6b07      	ldr	r7, [r0, #48]	; 0x30
	const struct driver_config *cfg = data->dev->config;
   278d4:	685d      	ldr	r5, [r3, #4]
	if (data->task == WORK_TASK_ENABLE) {
   278d6:	2901      	cmp	r1, #1
{
   278d8:	4604      	mov	r4, r0
	struct driver_data_onoff *data
   278da:	f1a0 0620 	sub.w	r6, r0, #32
	if (data->task == WORK_TASK_ENABLE) {
   278de:	d10f      	bne.n	27900 <onoff_worker+0x3a>
		rc = gpio_pin_set_dt(&cfg->enable, true);
   278e0:	f105 000c 	add.w	r0, r5, #12
   278e4:	f7ff ff93 	bl	2780e <gpio_pin_set_dt>
		delay_us = cfg->startup_delay_us;
   278e8:	686a      	ldr	r2, [r5, #4]
		rc = gpio_pin_set_dt(&cfg->enable, true);
   278ea:	4603      	mov	r3, r0
	data->notify = NULL;
   278ec:	2100      	movs	r1, #0
   278ee:	6321      	str	r1, [r4, #48]	; 0x30
	data->task = WORK_TASK_UNDEFINED;
   278f0:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
	finalize_transition(data, notify, delay_us, rc);
   278f4:	4630      	mov	r0, r6
   278f6:	4639      	mov	r1, r7
}
   278f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	finalize_transition(data, notify, delay_us, rc);
   278fc:	f7f6 bb5a 	b.w	1dfb4 <finalize_transition>
	} else if (data->task == WORK_TASK_DISABLE) {
   27900:	2902      	cmp	r1, #2
   27902:	d107      	bne.n	27914 <onoff_worker+0x4e>
		rc = gpio_pin_set_dt(&cfg->enable, false);
   27904:	2100      	movs	r1, #0
   27906:	f105 000c 	add.w	r0, r5, #12
   2790a:	f7ff ff80 	bl	2780e <gpio_pin_set_dt>
		delay_us = cfg->off_on_delay_us;
   2790e:	68aa      	ldr	r2, [r5, #8]
		rc = gpio_pin_set_dt(&cfg->enable, false);
   27910:	4603      	mov	r3, r0
		delay_us = cfg->off_on_delay_us;
   27912:	e7eb      	b.n	278ec <onoff_worker+0x26>
	int rc = 0;
   27914:	2300      	movs	r3, #0
	uint32_t delay_us = 0;
   27916:	461a      	mov	r2, r3
   27918:	e7e8      	b.n	278ec <onoff_worker+0x26>

0002791a <stop>:
{
   2791a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct driver_config *cfg = data->dev->config;
   2791e:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
   27922:	4604      	mov	r4, r0
	struct driver_data_onoff *data =
   27924:	1f06      	subs	r6, r0, #4
	const struct driver_config *cfg = data->dev->config;
   27926:	6858      	ldr	r0, [r3, #4]
{
   27928:	460d      	mov	r5, r1
	if ((cfg->options & OPTION_ALWAYS_ON) != 0) {
   2792a:	7d01      	ldrb	r1, [r0, #20]
   2792c:	f011 0101 	ands.w	r1, r1, #1
   27930:	d113      	bne.n	2795a <stop+0x40>
	uint32_t delay_us = cfg->off_on_delay_us;
   27932:	6887      	ldr	r7, [r0, #8]
	rc = gpio_pin_set_dt(&cfg->enable, false);
   27934:	300c      	adds	r0, #12
   27936:	f7ff ff6a 	bl	2780e <gpio_pin_set_dt>
	if (rc == -EWOULDBLOCK) {
   2793a:	f110 0f0b 	cmn.w	r0, #11
	rc = gpio_pin_set_dt(&cfg->enable, false);
   2793e:	4603      	mov	r3, r0
	if (rc == -EWOULDBLOCK) {
   27940:	d10d      	bne.n	2795e <stop+0x44>
		data->task = WORK_TASK_DISABLE;
   27942:	2302      	movs	r3, #2
   27944:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
		data->notify = notify;
   27948:	64e5      	str	r5, [r4, #76]	; 0x4c
		k_work_schedule(&data->dwork, K_NO_WAIT);
   2794a:	f104 001c 	add.w	r0, r4, #28
   2794e:	2200      	movs	r2, #0
}
   27950:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_schedule(&data->dwork, K_NO_WAIT);
   27954:	2300      	movs	r3, #0
   27956:	f7fa bd9d 	b.w	22494 <k_work_schedule>
	int rc = 0;
   2795a:	2300      	movs	r3, #0
		delay_us = 0;
   2795c:	461f      	mov	r7, r3
	finalize_transition(data, notify, delay_us, rc);
   2795e:	463a      	mov	r2, r7
   27960:	4629      	mov	r1, r5
   27962:	4630      	mov	r0, r6
}
   27964:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	finalize_transition(data, notify, delay_us, rc);
   27968:	f7f6 bb24 	b.w	1dfb4 <finalize_transition>

0002796c <start>:
{
   2796c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct driver_config *cfg = data->dev->config;
   27970:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
   27974:	4604      	mov	r4, r0
	struct driver_data_onoff *data =
   27976:	1f07      	subs	r7, r0, #4
	const struct driver_config *cfg = data->dev->config;
   27978:	6858      	ldr	r0, [r3, #4]
	if ((cfg->options & OPTION_ALWAYS_ON) != 0) {
   2797a:	7d03      	ldrb	r3, [r0, #20]
   2797c:	07db      	lsls	r3, r3, #31
{
   2797e:	460d      	mov	r5, r1
	if ((cfg->options & OPTION_ALWAYS_ON) != 0) {
   27980:	d414      	bmi.n	279ac <start+0x40>
	uint32_t delay_us = cfg->startup_delay_us;
   27982:	6846      	ldr	r6, [r0, #4]
	rc = gpio_pin_set_dt(&cfg->enable, true);
   27984:	2101      	movs	r1, #1
   27986:	300c      	adds	r0, #12
   27988:	f7ff ff41 	bl	2780e <gpio_pin_set_dt>
	if (rc == -EWOULDBLOCK) {
   2798c:	f110 0f0b 	cmn.w	r0, #11
	rc = gpio_pin_set_dt(&cfg->enable, true);
   27990:	4603      	mov	r3, r0
	if (rc == -EWOULDBLOCK) {
   27992:	d10d      	bne.n	279b0 <start+0x44>
		data->task = WORK_TASK_ENABLE;
   27994:	2301      	movs	r3, #1
   27996:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
		data->notify = notify;
   2799a:	64e5      	str	r5, [r4, #76]	; 0x4c
		k_work_schedule(&data->dwork, K_NO_WAIT);
   2799c:	f104 001c 	add.w	r0, r4, #28
   279a0:	2200      	movs	r2, #0
}
   279a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_schedule(&data->dwork, K_NO_WAIT);
   279a6:	2300      	movs	r3, #0
   279a8:	f7fa bd74 	b.w	22494 <k_work_schedule>
	int rc = 0;
   279ac:	2300      	movs	r3, #0
		delay_us = 0;
   279ae:	461e      	mov	r6, r3
	finalize_transition(data, notify, delay_us, rc);
   279b0:	4632      	mov	r2, r6
   279b2:	4629      	mov	r1, r5
   279b4:	4638      	mov	r0, r7
}
   279b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	finalize_transition(data, notify, delay_us, rc);
   279ba:	f7f6 bafb 	b.w	1dfb4 <finalize_transition>

000279be <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   279be:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   279c2:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
   279c4:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   279c6:	2500      	movs	r5, #0
	info->index = 0U;

	api->page_layout(dev, &layout, &layout_size);
   279c8:	695b      	ldr	r3, [r3, #20]
	info->start_offset = 0;
   279ca:	6025      	str	r5, [r4, #0]
{
   279cc:	460e      	mov	r6, r1
   279ce:	4617      	mov	r7, r2
	api->page_layout(dev, &layout, &layout_size);
   279d0:	4669      	mov	r1, sp
	info->index = 0U;
   279d2:	60a5      	str	r5, [r4, #8]
	api->page_layout(dev, &layout, &layout_size);
   279d4:	aa01      	add	r2, sp, #4
   279d6:	4798      	blx	r3

	while (layout_size--) {
   279d8:	e9dd 1c00 	ldrd	r1, ip, [sp]
   279dc:	4628      	mov	r0, r5
		info->size = layout->pages_size;
   279de:	f101 0e04 	add.w	lr, r1, #4
	while (layout_size--) {
   279e2:	4560      	cmp	r0, ip
   279e4:	d104      	bne.n	279f0 <flash_get_page_info+0x32>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   279e6:	f06f 0015 	mvn.w	r0, #21
}
   279ea:	b003      	add	sp, #12
   279ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		info->size = layout->pages_size;
   279f0:	f85e 5030 	ldr.w	r5, [lr, r0, lsl #3]
   279f4:	68a2      	ldr	r2, [r4, #8]
   279f6:	f8d4 9000 	ldr.w	r9, [r4]
   279fa:	6065      	str	r5, [r4, #4]
		if (offs == 0) {
   279fc:	b986      	cbnz	r6, 27a20 <flash_get_page_info+0x62>
			index_jmp = index - info->index;
   279fe:	1abb      	subs	r3, r7, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
   27a00:	f851 8030 	ldr.w	r8, [r1, r0, lsl #3]
   27a04:	4543      	cmp	r3, r8
   27a06:	bf28      	it	cs
   27a08:	4643      	movcs	r3, r8
		info->start_offset += (index_jmp * info->size);
   27a0a:	fb03 9505 	mla	r5, r3, r5, r9
		info->index += index_jmp;
   27a0e:	441a      	add	r2, r3
		if (index_jmp < layout->pages_count) {
   27a10:	4598      	cmp	r8, r3
		info->start_offset += (index_jmp * info->size);
   27a12:	6025      	str	r5, [r4, #0]
		info->index += index_jmp;
   27a14:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
   27a16:	f100 0001 	add.w	r0, r0, #1
   27a1a:	d9e2      	bls.n	279e2 <flash_get_page_info+0x24>
			return 0;
   27a1c:	2000      	movs	r0, #0
   27a1e:	e7e4      	b.n	279ea <flash_get_page_info+0x2c>
			index_jmp = (offs - info->start_offset) / info->size;
   27a20:	eba6 0309 	sub.w	r3, r6, r9
   27a24:	fbb3 f3f5 	udiv	r3, r3, r5
   27a28:	e7ea      	b.n	27a00 <flash_get_page_info+0x42>

00027a2a <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   27a2a:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   27a2c:	2200      	movs	r2, #0
   27a2e:	f7ff bfc6 	b.w	279be <flash_get_page_info>

00027a32 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   27a32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   27a36:	6883      	ldr	r3, [r0, #8]
{
   27a38:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   27a3a:	695b      	ldr	r3, [r3, #20]
{
   27a3c:	4688      	mov	r8, r1
   27a3e:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   27a40:	a901      	add	r1, sp, #4
   27a42:	aa02      	add	r2, sp, #8
   27a44:	4798      	blx	r3
	off_t off = 0;
   27a46:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   27a48:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   27a4a:	4625      	mov	r5, r4
   27a4c:	9b02      	ldr	r3, [sp, #8]
   27a4e:	42ab      	cmp	r3, r5
   27a50:	d802      	bhi.n	27a58 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   27a52:	b006      	add	sp, #24
   27a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   27a58:	9f01      	ldr	r7, [sp, #4]
   27a5a:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   27a5e:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   27a60:	687b      	ldr	r3, [r7, #4]
   27a62:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   27a64:	683a      	ldr	r2, [r7, #0]
   27a66:	42b2      	cmp	r2, r6
   27a68:	eb0a 0306 	add.w	r3, sl, r6
   27a6c:	d802      	bhi.n	27a74 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   27a6e:	3501      	adds	r5, #1
   27a70:	469a      	mov	sl, r3
   27a72:	e7eb      	b.n	27a4c <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   27a74:	4649      	mov	r1, r9
   27a76:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   27a78:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   27a7a:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   27a7c:	47c0      	blx	r8
   27a7e:	2800      	cmp	r0, #0
   27a80:	d0e7      	beq.n	27a52 <flash_page_foreach+0x20>
			off += page_info.size;
   27a82:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   27a84:	3601      	adds	r6, #1
			off += page_info.size;
   27a86:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   27a88:	e7ec      	b.n	27a64 <flash_page_foreach+0x32>

00027a8a <is_regular_addr_valid>:
{
   27a8a:	b538      	push	{r3, r4, r5, lr}
   27a8c:	4604      	mov	r4, r0
   27a8e:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   27a90:	f000 f921 	bl	27cd6 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   27a94:	4284      	cmp	r4, r0
   27a96:	d209      	bcs.n	27aac <is_regular_addr_valid+0x22>
   27a98:	2c00      	cmp	r4, #0
   27a9a:	db07      	blt.n	27aac <is_regular_addr_valid+0x22>
	    addr < 0 ||
   27a9c:	42a8      	cmp	r0, r5
   27a9e:	d305      	bcc.n	27aac <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   27aa0:	442c      	add	r4, r5
	    len > flash_size ||
   27aa2:	4284      	cmp	r4, r0
   27aa4:	bf8c      	ite	hi
   27aa6:	2000      	movhi	r0, #0
   27aa8:	2001      	movls	r0, #1
}
   27aaa:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   27aac:	2000      	movs	r0, #0
   27aae:	e7fc      	b.n	27aaa <is_regular_addr_valid+0x20>

00027ab0 <erase_op>:
{
   27ab0:	b570      	push	{r4, r5, r6, lr}
   27ab2:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   27ab4:	f000 f915 	bl	27ce2 <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   27ab8:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   27aba:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   27abc:	b10b      	cbz	r3, 27ac2 <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   27abe:	f000 f8f8 	bl	27cb2 <nrf_flash_sync_get_timestamp_begin>
{
   27ac2:	2600      	movs	r6, #0
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   27ac4:	6860      	ldr	r0, [r4, #4]
   27ac6:	f7f8 fbc7 	bl	20258 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   27aca:	68a3      	ldr	r3, [r4, #8]
   27acc:	1b5b      	subs	r3, r3, r5
   27ace:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   27ad0:	6863      	ldr	r3, [r4, #4]
   27ad2:	442b      	add	r3, r5
   27ad4:	6063      	str	r3, [r4, #4]
		if (e_ctx->enable_time_limit) {
   27ad6:	7b23      	ldrb	r3, [r4, #12]
		i++;
   27ad8:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   27ada:	b93b      	cbnz	r3, 27aec <erase_op+0x3c>
	} while (e_ctx->len > 0);
   27adc:	68a3      	ldr	r3, [r4, #8]
   27ade:	2b00      	cmp	r3, #0
   27ae0:	d1f0      	bne.n	27ac4 <erase_op+0x14>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   27ae2:	68a0      	ldr	r0, [r4, #8]
}
   27ae4:	3800      	subs	r0, #0
   27ae6:	bf18      	it	ne
   27ae8:	2001      	movne	r0, #1
   27aea:	bd70      	pop	{r4, r5, r6, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   27aec:	4630      	mov	r0, r6
   27aee:	f7f8 f83b 	bl	1fb68 <nrf_flash_sync_check_time_limit>
   27af2:	2800      	cmp	r0, #0
   27af4:	d0f2      	beq.n	27adc <erase_op+0x2c>
   27af6:	e7f4      	b.n	27ae2 <erase_op+0x32>

00027af8 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   27af8:	6843      	ldr	r3, [r0, #4]
   27afa:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   27afc:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   27b00:	05d1      	lsls	r1, r2, #23
   27b02:	d518      	bpl.n	27b36 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27b04:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   27b08:	b1aa      	cbz	r2, 27b36 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   27b0a:	f04f 0140 	mov.w	r1, #64	; 0x40
   27b0e:	f3ef 8211 	mrs	r2, BASEPRI
   27b12:	f381 8812 	msr	BASEPRI_MAX, r1
   27b16:	f3bf 8f6f 	isb	sy
   27b1a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   27b1e:	b131      	cbz	r1, 27b2e <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27b20:	2100      	movs	r1, #0
   27b22:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   27b26:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27b2a:	2101      	movs	r1, #1
   27b2c:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   27b2e:	f382 8811 	msr	BASEPRI, r2
   27b32:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   27b36:	6842      	ldr	r2, [r0, #4]
   27b38:	6852      	ldr	r2, [r2, #4]
   27b3a:	06d2      	lsls	r2, r2, #27
   27b3c:	d515      	bpl.n	27b6a <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
   27b3e:	f04f 0140 	mov.w	r1, #64	; 0x40
   27b42:	f3ef 8211 	mrs	r2, BASEPRI
   27b46:	f381 8812 	msr	BASEPRI_MAX, r1
   27b4a:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27b4e:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   27b52:	b111      	cbz	r1, 27b5a <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   27b54:	2100      	movs	r1, #0
   27b56:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   27b5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   27b5e:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   27b62:	f382 8811 	msr	BASEPRI, r2
   27b66:	f3bf 8f6f 	isb	sy
}
   27b6a:	4770      	bx	lr

00027b6c <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   27b6c:	6902      	ldr	r2, [r0, #16]
{
   27b6e:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   27b70:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   27b74:	e883 0003 	stmia.w	r3, {r0, r1}
}
   27b78:	2000      	movs	r0, #0
   27b7a:	4770      	bx	lr

00027b7c <uarte_nrfx_err_check>:
	return config->uarte_regs;
   27b7c:	6843      	ldr	r3, [r0, #4]
   27b7e:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   27b80:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   27b84:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   27b88:	4770      	bx	lr

00027b8a <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   27b8a:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   27b8c:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27b8e:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   27b92:	b940      	cbnz	r0, 27ba6 <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   27b94:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   27b96:	0792      	lsls	r2, r2, #30
   27b98:	d406      	bmi.n	27ba8 <is_tx_ready+0x1e>
   27b9a:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   27b9e:	3800      	subs	r0, #0
   27ba0:	bf18      	it	ne
   27ba2:	2001      	movne	r0, #1
   27ba4:	4770      	bx	lr
   27ba6:	2001      	movs	r0, #1
}
   27ba8:	4770      	bx	lr

00027baa <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   27baa:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   27bac:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   27bae:	681b      	ldr	r3, [r3, #0]
   27bb0:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   27bb4:	b148      	cbz	r0, 27bca <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   27bb6:	7c52      	ldrb	r2, [r2, #17]
   27bb8:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27bba:	2000      	movs	r0, #0
   27bbc:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   27bc0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27bc4:	2201      	movs	r2, #1
   27bc6:	601a      	str	r2, [r3, #0]
	return 0;
   27bc8:	4770      	bx	lr
		return -1;
   27bca:	f04f 30ff 	mov.w	r0, #4294967295
}
   27bce:	4770      	bx	lr

00027bd0 <sys_clock_cycle_get_32>:
{
   27bd0:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   27bd2:	f7f6 ff3d 	bl	1ea50 <z_nrf_rtc_timer_read>
}
   27bd6:	bd08      	pop	{r3, pc}

00027bd8 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   27bd8:	4770      	bx	lr

00027bda <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[BT_ECB_BLOCK_SIZE],
		  const uint8_t plaintext[BT_ECB_BLOCK_SIZE],
		  uint8_t enc_data[BT_ECB_BLOCK_SIZE])
{
   27bda:	b5f0      	push	{r4, r5, r6, r7, lr}
   27bdc:	b08d      	sub	sp, #52	; 0x34
   27bde:	4615      	mov	r5, r2
   27be0:	466a      	mov	r2, sp
   27be2:	f100 0310 	add.w	r3, r0, #16
   27be6:	4616      	mov	r6, r2
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
		*pdst++ = *psrc--;
   27be8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   27bec:	f802 4b01 	strb.w	r4, [r2], #1
	for (; length > 0; length--) {
   27bf0:	4298      	cmp	r0, r3
   27bf2:	d1f9      	bne.n	27be8 <bt_encrypt_le+0xe>
   27bf4:	aa04      	add	r2, sp, #16
   27bf6:	f101 0310 	add.w	r3, r1, #16
   27bfa:	4617      	mov	r7, r2
		*pdst++ = *psrc--;
   27bfc:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   27c00:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
   27c04:	428b      	cmp	r3, r1
   27c06:	d1f9      	bne.n	27bfc <bt_encrypt_le+0x22>
	BT_HEXDUMP_DBG(plaintext, BT_ECB_BLOCK_SIZE, "plaintext");

	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
	sys_memcpy_swap(plaintext_le, plaintext, BT_ECB_BLOCK_SIZE);

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   27c08:	f04f 30ff 	mov.w	r0, #4294967295
   27c0c:	f04f 31ff 	mov.w	r1, #4294967295
   27c10:	f7f7 f8ca 	bl	1eda8 <multithreading_lock_acquire>

	if (!errcode) {
   27c14:	4604      	mov	r4, r0
   27c16:	b990      	cbnz	r0, 27c3e <bt_encrypt_le+0x64>
		errcode = sdc_soc_ecb_block_encrypt(key_le, plaintext_le, enc_data_le);
   27c18:	aa08      	add	r2, sp, #32
   27c1a:	4639      	mov	r1, r7
   27c1c:	4630      	mov	r0, r6
   27c1e:	f7e4 facd 	bl	c1bc <sdc_soc_ecb_block_encrypt>
   27c22:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   27c24:	f7f7 f8c8 	bl	1edb8 <multithreading_lock_release>
	}

	if (!errcode) {
   27c28:	b94c      	cbnz	r4, 27c3e <bt_encrypt_le+0x64>
   27c2a:	1e6b      	subs	r3, r5, #1
	psrc += length - 1;
   27c2c:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
   27c30:	350f      	adds	r5, #15
		*pdst++ = *psrc--;
   27c32:	f812 1901 	ldrb.w	r1, [r2], #-1
   27c36:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   27c3a:	429d      	cmp	r5, r3
   27c3c:	d1f9      	bne.n	27c32 <bt_encrypt_le+0x58>

		BT_HEXDUMP_DBG(enc_data, BT_ECB_BLOCK_SIZE, "enc_data");
	}

	return errcode;
}
   27c3e:	4620      	mov	r0, r4
   27c40:	b00d      	add	sp, #52	; 0x34
   27c42:	bdf0      	pop	{r4, r5, r6, r7, pc}

00027c44 <rand_prio_high_vector_get>:
   27c44:	f7f7 b92c 	b.w	1eea0 <rand_prio_low_vector_get>

00027c48 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   27c48:	4668      	mov	r0, sp
   27c4a:	f020 0107 	bic.w	r1, r0, #7
   27c4e:	468d      	mov	sp, r1
   27c50:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   27c52:	f7da fe6f 	bl	2934 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   27c56:	f7eb ff11 	bl	13a7c <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   27c5a:	f7eb ff9f 	bl	13b9c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   27c5e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   27c62:	4685      	mov	sp, r0
   27c64:	4770      	bx	lr

00027c66 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   27c66:	4668      	mov	r0, sp
   27c68:	f020 0107 	bic.w	r1, r0, #7
   27c6c:	468d      	mov	sp, r1
   27c6e:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   27c70:	f7da fde2 	bl	2838 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   27c74:	f7eb ff02 	bl	13a7c <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   27c78:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   27c7c:	4685      	mov	sp, r0
   27c7e:	4770      	bx	lr

00027c80 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   27c80:	4668      	mov	r0, sp
   27c82:	f020 0107 	bic.w	r1, r0, #7
   27c86:	468d      	mov	sp, r1
   27c88:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   27c8a:	f7e3 ffdd 	bl	bc48 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   27c8e:	f7eb fef5 	bl	13a7c <_arch_isr_direct_pm>
   27c92:	f7eb ff83 	bl	13b9c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   27c96:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   27c9a:	4685      	mov	sp, r0
   27c9c:	4770      	bx	lr

00027c9e <nrfx_clock_stop>:
	switch (domain) {
   27c9e:	2801      	cmp	r0, #1
   27ca0:	d101      	bne.n	27ca6 <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   27ca2:	f7db bc79 	b.w	3598 <mpsl_clock_hfclk_release>
}
   27ca6:	4770      	bx	lr

00027ca8 <nrfx_clock_enable>:
}
   27ca8:	4770      	bx	lr

00027caa <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   27caa:	f7db ba93 	b.w	31d4 <MPSL_IRQ_CLOCK_Handler>

00027cae <nrf_flash_sync_is_required>:
	return mpsl_is_initialized();
   27cae:	f7db be69 	b.w	3984 <mpsl_is_initialized>

00027cb2 <nrf_flash_sync_get_timestamp_begin>:
}
   27cb2:	4770      	bx	lr

00027cb4 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   27cb4:	4700      	bx	r0

00027cb6 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   27cb6:	f000 bd07 	b.w	286c8 <z_impl_k_busy_wait>

00027cba <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   27cba:	f000 001f 	and.w	r0, r0, #31
   27cbe:	0080      	lsls	r0, r0, #2
   27cc0:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   27cc4:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
   27cc8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   27ccc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   27cd0:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
   27cd4:	4770      	bx	lr

00027cd6 <nrfx_nvmc_flash_size_get>:
   27cd6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   27cda:	691a      	ldr	r2, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   27cdc:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   27cde:	4350      	muls	r0, r2
   27ce0:	4770      	bx	lr

00027ce2 <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   27ce2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   27ce6:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   27ce8:	4770      	bx	lr

00027cea <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   27cea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   27cee:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   27cf0:	4770      	bx	lr

00027cf2 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   27cf2:	7b0a      	ldrb	r2, [r1, #12]
{
   27cf4:	4603      	mov	r3, r0
   27cf6:	2a03      	cmp	r2, #3
   27cf8:	d829      	bhi.n	27d4e <xfer_completeness_check+0x5c>
   27cfa:	e8df f002 	tbb	[pc, r2]
   27cfe:	2521      	.short	0x2521
   27d00:	0219      	.short	0x0219
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   27d02:	688a      	ldr	r2, [r1, #8]
   27d04:	0350      	lsls	r0, r2, #13
   27d06:	d504      	bpl.n	27d12 <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
   27d08:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
   27d0c:	6908      	ldr	r0, [r1, #16]
   27d0e:	4290      	cmp	r0, r2
   27d10:	d107      	bne.n	27d22 <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   27d12:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   27d14:	0352      	lsls	r2, r2, #13
   27d16:	d41a      	bmi.n	27d4e <xfer_completeness_check+0x5c>
   27d18:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   27d1c:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   27d1e:	4291      	cmp	r1, r2
   27d20:	d015      	beq.n	27d4e <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   27d22:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   27d24:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   27d26:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   27d2a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   27d2e:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   27d30:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   27d34:	6908      	ldr	r0, [r1, #16]
   27d36:	4290      	cmp	r0, r2
   27d38:	d1f3      	bne.n	27d22 <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
   27d3a:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   27d3e:	e7ed      	b.n	27d1c <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
   27d40:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   27d44:	6909      	ldr	r1, [r1, #16]
   27d46:	e7ea      	b.n	27d1e <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
   27d48:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   27d4c:	e7fa      	b.n	27d44 <xfer_completeness_check+0x52>
    bool transfer_complete = true;
   27d4e:	2001      	movs	r0, #1
}
   27d50:	4770      	bx	lr

00027d52 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   27d52:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   27d54:	68c1      	ldr	r1, [r0, #12]
  if (RdOff <= WrOff) {
   27d56:	428b      	cmp	r3, r1
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   27d58:	bf9d      	ittte	ls
   27d5a:	6882      	ldrls	r2, [r0, #8]
   27d5c:	18d2      	addls	r2, r2, r3
   27d5e:	f102 32ff 	addls.w	r2, r2, #4294967295
    r = RdOff - WrOff - 1u;
   27d62:	f103 33ff 	addhi.w	r3, r3, #4294967295
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   27d66:	bf94      	ite	ls
   27d68:	1a50      	subls	r0, r2, r1
    r = RdOff - WrOff - 1u;
   27d6a:	1a58      	subhi	r0, r3, r1
}
   27d6c:	4770      	bx	lr

00027d6e <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   27d6e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   27d72:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   27d76:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   27d78:	eba9 0804 	sub.w	r8, r9, r4
  if (Rem > NumBytes) {
   27d7c:	6840      	ldr	r0, [r0, #4]
   27d7e:	4590      	cmp	r8, r2
   27d80:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   27d82:	460f      	mov	r7, r1
   27d84:	4414      	add	r4, r2
  if (Rem > NumBytes) {
   27d86:	d904      	bls.n	27d92 <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   27d88:	f7fd f87a 	bl	24e80 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   27d8c:	60ec      	str	r4, [r5, #12]
}
   27d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   27d92:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
   27d94:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   27d98:	f7fd f872 	bl	24e80 <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   27d9c:	6868      	ldr	r0, [r5, #4]
   27d9e:	4622      	mov	r2, r4
   27da0:	eb07 0108 	add.w	r1, r7, r8
   27da4:	e7f0      	b.n	27d88 <_WriteNoCheck+0x1a>

00027da6 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   27da6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
   27daa:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   27dac:	4606      	mov	r6, r0
   27dae:	4689      	mov	r9, r1
   27db0:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   27db2:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   27db6:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
   27db8:	68b3      	ldr	r3, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   27dba:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
   27dbc:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   27dbe:	bf28      	it	cs
   27dc0:	18e4      	addcs	r4, r4, r3
   27dc2:	3c01      	subs	r4, #1
   27dc4:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   27dc6:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   27dc8:	42bc      	cmp	r4, r7
   27dca:	bf28      	it	cs
   27dcc:	463c      	movcs	r4, r7
   27dce:	4294      	cmp	r4, r2
   27dd0:	bf28      	it	cs
   27dd2:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
   27dd4:	4649      	mov	r1, r9
   27dd6:	4428      	add	r0, r5
   27dd8:	4622      	mov	r2, r4
   27dda:	f7fd f851 	bl	24e80 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   27dde:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   27de0:	4425      	add	r5, r4
      WrOff = 0u;
   27de2:	42ab      	cmp	r3, r5
   27de4:	bf08      	it	eq
   27de6:	2500      	moveq	r5, #0
  } while (NumBytes);
   27de8:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   27dea:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   27dec:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   27dee:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   27df0:	d1e1      	bne.n	27db6 <_WriteBlocking+0x10>
}
   27df2:	4640      	mov	r0, r8
   27df4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00027df8 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   27df8:	f7f8 bede 	b.w	20bb8 <_DoInit>

00027dfc <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   27dfc:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   27dfe:	f7ff fffb 	bl	27df8 <SEGGER_RTT_Init>

	return 0;
}
   27e02:	2000      	movs	r0, #0
   27e04:	bd08      	pop	{r3, pc}

00027e06 <z_device_state_init>:
}
   27e06:	4770      	bx	lr

00027e08 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   27e08:	b138      	cbz	r0, 27e1a <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   27e0a:	68c3      	ldr	r3, [r0, #12]
   27e0c:	8818      	ldrh	r0, [r3, #0]
   27e0e:	f3c0 0008 	ubfx	r0, r0, #0, #9
   27e12:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   27e16:	4258      	negs	r0, r3
   27e18:	4158      	adcs	r0, r3
}
   27e1a:	4770      	bx	lr

00027e1c <z_pm_save_idle_exit>:
{
   27e1c:	b508      	push	{r3, lr}
	pm_system_resume();
   27e1e:	f7eb fa2b 	bl	13278 <pm_system_resume>
}
   27e22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   27e26:	f7ff bed7 	b.w	27bd8 <sys_clock_idle_exit>

00027e2a <k_heap_init>:
{
   27e2a:	b410      	push	{r4}
   27e2c:	f100 040c 	add.w	r4, r0, #12
   27e30:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   27e34:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   27e36:	f7fb bf09 	b.w	23c4c <sys_heap_init>

00027e3a <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   27e3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27e3e:	b087      	sub	sp, #28
   27e40:	4604      	mov	r4, r0
   27e42:	460e      	mov	r6, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   27e44:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
{
   27e48:	4617      	mov	r7, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   27e4a:	f000 fc41 	bl	286d0 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   27e4e:	f104 0914 	add.w	r9, r4, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   27e52:	4605      	mov	r5, r0
   27e54:	4688      	mov	r8, r1
	__asm__ volatile(
   27e56:	f04f 0340 	mov.w	r3, #64	; 0x40
   27e5a:	f3ef 8b11 	mrs	fp, BASEPRI
   27e5e:	f383 8812 	msr	BASEPRI_MAX, r3
   27e62:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   27e66:	f104 0a0c 	add.w	sl, r4, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   27e6a:	463a      	mov	r2, r7
   27e6c:	4631      	mov	r1, r6
   27e6e:	4620      	mov	r0, r4
   27e70:	f7fb fe84 	bl	23b7c <sys_heap_aligned_alloc>
   27e74:	9005      	str	r0, [sp, #20]
		now = sys_clock_tick_get();
   27e76:	f7fa f8d9 	bl	2202c <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   27e7a:	9b05      	ldr	r3, [sp, #20]
   27e7c:	b13b      	cbz	r3, 27e8e <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   27e7e:	f38b 8811 	msr	BASEPRI, fp
   27e82:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   27e86:	4618      	mov	r0, r3
   27e88:	b007      	add	sp, #28
   27e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   27e8e:	1a2a      	subs	r2, r5, r0
   27e90:	9202      	str	r2, [sp, #8]
   27e92:	eb68 0201 	sbc.w	r2, r8, r1
   27e96:	9203      	str	r2, [sp, #12]
   27e98:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   27e9c:	2901      	cmp	r1, #1
   27e9e:	f172 0200 	sbcs.w	r2, r2, #0
   27ea2:	dbec      	blt.n	27e7e <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   27ea4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   27ea8:	4659      	mov	r1, fp
   27eaa:	e9cd 2300 	strd	r2, r3, [sp]
   27eae:	4648      	mov	r0, r9
   27eb0:	4652      	mov	r2, sl
   27eb2:	f7f9 fc49 	bl	21748 <z_pend_curr>
	__asm__ volatile(
   27eb6:	f04f 0340 	mov.w	r3, #64	; 0x40
   27eba:	f3ef 8b11 	mrs	fp, BASEPRI
   27ebe:	f383 8812 	msr	BASEPRI_MAX, r3
   27ec2:	f3bf 8f6f 	isb	sy
   27ec6:	e7d0      	b.n	27e6a <k_heap_aligned_alloc+0x30>

00027ec8 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   27ec8:	b538      	push	{r3, r4, r5, lr}
   27eca:	4604      	mov	r4, r0
   27ecc:	f04f 0340 	mov.w	r3, #64	; 0x40
   27ed0:	f3ef 8511 	mrs	r5, BASEPRI
   27ed4:	f383 8812 	msr	BASEPRI_MAX, r3
   27ed8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   27edc:	f7fb fe15 	bl	23b0a <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   27ee0:	f104 000c 	add.w	r0, r4, #12
   27ee4:	f000 fb62 	bl	285ac <z_unpend_all>
   27ee8:	b130      	cbz	r0, 27ef8 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   27eea:	4629      	mov	r1, r5
   27eec:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   27ef0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   27ef4:	f7f9 bace 	b.w	21494 <z_reschedule>
	__asm__ volatile(
   27ef8:	f385 8811 	msr	BASEPRI, r5
   27efc:	f3bf 8f6f 	isb	sy
}
   27f00:	bd38      	pop	{r3, r4, r5, pc}

00027f02 <k_mem_slab_init>:
{
   27f02:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   27f04:	2400      	movs	r4, #0
   27f06:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   27f08:	ea41 0402 	orr.w	r4, r1, r2
   27f0c:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   27f10:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   27f14:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   27f16:	d10c      	bne.n	27f32 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   27f18:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   27f1a:	42a3      	cmp	r3, r4
   27f1c:	d103      	bne.n	27f26 <k_mem_slab_init+0x24>
   27f1e:	e9c0 0000 	strd	r0, r0, [r0]
}
   27f22:	2000      	movs	r0, #0
}
   27f24:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   27f26:	6945      	ldr	r5, [r0, #20]
   27f28:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   27f2a:	3401      	adds	r4, #1
		slab->free_list = p;
   27f2c:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   27f2e:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   27f30:	e7f3      	b.n	27f1a <k_mem_slab_init+0x18>
		return -EINVAL;
   27f32:	f06f 0015 	mvn.w	r0, #21
	return rc;
   27f36:	e7f5      	b.n	27f24 <k_mem_slab_init+0x22>

00027f38 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   27f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27f3a:	4604      	mov	r4, r0
   27f3c:	460d      	mov	r5, r1
	__asm__ volatile(
   27f3e:	f04f 0340 	mov.w	r3, #64	; 0x40
   27f42:	f3ef 8611 	mrs	r6, BASEPRI
   27f46:	f383 8812 	msr	BASEPRI_MAX, r3
   27f4a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   27f4e:	6947      	ldr	r7, [r0, #20]
   27f50:	b977      	cbnz	r7, 27f70 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   27f52:	f000 fb13 	bl	2857c <z_unpend_first_thread>

		if (pending_thread != NULL) {
   27f56:	b158      	cbz	r0, 27f70 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   27f58:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   27f5a:	6142      	str	r2, [r0, #20]
   27f5c:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   27f5e:	f000 fa99 	bl	28494 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   27f62:	4631      	mov	r1, r6
   27f64:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   27f68:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   27f6c:	f7f9 ba92 	b.w	21494 <z_reschedule>
	**(char ***) mem = slab->free_list;
   27f70:	682b      	ldr	r3, [r5, #0]
   27f72:	6962      	ldr	r2, [r4, #20]
   27f74:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   27f76:	682b      	ldr	r3, [r5, #0]
   27f78:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   27f7a:	69a3      	ldr	r3, [r4, #24]
   27f7c:	3b01      	subs	r3, #1
   27f7e:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   27f80:	f386 8811 	msr	BASEPRI, r6
   27f84:	f3bf 8f6f 	isb	sy
}
   27f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00027f8a <z_impl_k_mutex_init>:
{
   27f8a:	4603      	mov	r3, r0
	mutex->owner = NULL;
   27f8c:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   27f8e:	e9c3 0002 	strd	r0, r0, [r3, #8]
   27f92:	e9c3 3300 	strd	r3, r3, [r3]
}
   27f96:	4770      	bx	lr

00027f98 <clear_event_registrations>:
	while (num_events--) {
   27f98:	2314      	movs	r3, #20
{
   27f9a:	b570      	push	{r4, r5, r6, lr}
   27f9c:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
   27fa0:	2400      	movs	r4, #0
   27fa2:	2601      	movs	r6, #1
	while (num_events--) {
   27fa4:	4281      	cmp	r1, r0
   27fa6:	d100      	bne.n	27faa <clear_event_registrations+0x12>
}
   27fa8:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   27faa:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   27fae:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   27fb2:	f003 031f 	and.w	r3, r3, #31
   27fb6:	2b08      	cmp	r3, #8
   27fb8:	d80d      	bhi.n	27fd6 <clear_event_registrations+0x3e>
   27fba:	fa06 f303 	lsl.w	r3, r6, r3
   27fbe:	f413 7f8b 	tst.w	r3, #278	; 0x116
   27fc2:	d008      	beq.n	27fd6 <clear_event_registrations+0x3e>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   27fc4:	f851 3c14 	ldr.w	r3, [r1, #-20]
   27fc8:	b12b      	cbz	r3, 27fd6 <clear_event_registrations+0x3e>
	sys_dnode_t *const prev = node->prev;
   27fca:	f851 5c10 	ldr.w	r5, [r1, #-16]
	prev->next = next;
   27fce:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   27fd0:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   27fd2:	e941 4405 	strd	r4, r4, [r1, #-20]
   27fd6:	f382 8811 	msr	BASEPRI, r2
   27fda:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   27fde:	f04f 0340 	mov.w	r3, #64	; 0x40
   27fe2:	f3ef 8211 	mrs	r2, BASEPRI
   27fe6:	f383 8812 	msr	BASEPRI_MAX, r3
   27fea:	f3bf 8f6f 	isb	sy
   27fee:	3914      	subs	r1, #20
   27ff0:	e7d8      	b.n	27fa4 <clear_event_registrations+0xc>

00027ff2 <add_event>:
{
   27ff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27ff4:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   27ff6:	e9d0 2300 	ldrd	r2, r3, [r0]
   27ffa:	4290      	cmp	r0, r2
   27ffc:	4604      	mov	r4, r0
   27ffe:	460d      	mov	r5, r1
   28000:	d105      	bne.n	2800e <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   28002:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   28004:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   28008:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2800a:	6065      	str	r5, [r4, #4]
}
   2800c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   2800e:	2b00      	cmp	r3, #0
   28010:	d0f7      	beq.n	28002 <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   28012:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   28014:	b100      	cbz	r0, 28018 <add_event+0x26>
   28016:	3860      	subs	r0, #96	; 0x60
   28018:	b107      	cbz	r7, 2801c <add_event+0x2a>
   2801a:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2801c:	4639      	mov	r1, r7
   2801e:	f000 f9ec 	bl	283fa <z_sched_prio_cmp>
	if ((pending == NULL) ||
   28022:	2800      	cmp	r0, #0
   28024:	dced      	bgt.n	28002 <add_event+0x10>
	return list->head == list;
   28026:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28028:	42b4      	cmp	r4, r6
   2802a:	d0ea      	beq.n	28002 <add_event+0x10>
   2802c:	2e00      	cmp	r6, #0
   2802e:	bf38      	it	cc
   28030:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   28032:	2e00      	cmp	r6, #0
   28034:	d0e5      	beq.n	28002 <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   28036:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   28038:	b101      	cbz	r1, 2803c <add_event+0x4a>
   2803a:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   2803c:	4638      	mov	r0, r7
   2803e:	f000 f9dc 	bl	283fa <z_sched_prio_cmp>
   28042:	2800      	cmp	r0, #0
   28044:	dd05      	ble.n	28052 <add_event+0x60>
	sys_dnode_t *const prev = successor->prev;
   28046:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   28048:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   2804c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2804e:	6075      	str	r5, [r6, #4]
			return;
   28050:	e7dc      	b.n	2800c <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   28052:	6863      	ldr	r3, [r4, #4]
   28054:	42b3      	cmp	r3, r6
   28056:	d0d4      	beq.n	28002 <add_event+0x10>
   28058:	6836      	ldr	r6, [r6, #0]
   2805a:	e7ea      	b.n	28032 <add_event+0x40>

0002805c <register_events>:
{
   2805c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   28060:	2500      	movs	r5, #0
{
   28062:	468b      	mov	fp, r1
   28064:	4614      	mov	r4, r2
   28066:	461f      	mov	r7, r3
   28068:	4682      	mov	sl, r0
	int events_registered = 0;
   2806a:	462e      	mov	r6, r5
	event->poller = NULL;
   2806c:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   2806e:	455d      	cmp	r5, fp
   28070:	db02      	blt.n	28078 <register_events+0x1c>
}
   28072:	4630      	mov	r0, r6
   28074:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28078:	f04f 0340 	mov.w	r3, #64	; 0x40
   2807c:	f3ef 8911 	mrs	r9, BASEPRI
   28080:	f383 8812 	msr	BASEPRI_MAX, r3
   28084:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   28088:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2808c:	f003 031f 	and.w	r3, r3, #31
   28090:	3b01      	subs	r3, #1
   28092:	2b07      	cmp	r3, #7
   28094:	d80f      	bhi.n	280b6 <register_events+0x5a>
   28096:	e8df f003 	tbb	[pc, r3]
   2809a:	041e      	.short	0x041e
   2809c:	0e0e0a0e 	.word	0x0e0e0a0e
   280a0:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
   280a2:	f8da 3010 	ldr.w	r3, [sl, #16]
   280a6:	689b      	ldr	r3, [r3, #8]
   280a8:	b12b      	cbz	r3, 280b6 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   280aa:	2302      	movs	r3, #2
   280ac:	e020      	b.n	280f0 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   280ae:	f8da 3010 	ldr.w	r3, [sl, #16]
   280b2:	681b      	ldr	r3, [r3, #0]
   280b4:	bb8b      	cbnz	r3, 2811a <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   280b6:	bb47      	cbnz	r7, 2810a <register_events+0xae>
   280b8:	7823      	ldrb	r3, [r4, #0]
   280ba:	b333      	cbz	r3, 2810a <register_events+0xae>
	switch (event->type) {
   280bc:	f89a 300d 	ldrb.w	r3, [sl, #13]
   280c0:	f003 031f 	and.w	r3, r3, #31
   280c4:	3b01      	subs	r3, #1
   280c6:	2b07      	cmp	r3, #7
   280c8:	d830      	bhi.n	2812c <register_events+0xd0>
   280ca:	e8df f003 	tbb	[pc, r3]
   280ce:	2833      	.short	0x2833
   280d0:	2f2f282f 	.word	0x2f2f282f
   280d4:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
   280d6:	f8da 3010 	ldr.w	r3, [sl, #16]
   280da:	689b      	ldr	r3, [r3, #8]
   280dc:	2b00      	cmp	r3, #0
   280de:	d0ea      	beq.n	280b6 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   280e0:	2301      	movs	r3, #1
   280e2:	e005      	b.n	280f0 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   280e4:	f8da 3010 	ldr.w	r3, [sl, #16]
   280e8:	6a1b      	ldr	r3, [r3, #32]
   280ea:	2b00      	cmp	r3, #0
   280ec:	d0e3      	beq.n	280b6 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   280ee:	2310      	movs	r3, #16
	event->state |= state;
   280f0:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   280f4:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   280f8:	f3c2 3145 	ubfx	r1, r2, #13, #6
   280fc:	430b      	orrs	r3, r1
   280fe:	f363 3252 	bfi	r2, r3, #13, #6
   28102:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   28106:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   2810a:	f389 8811 	msr	BASEPRI, r9
   2810e:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   28112:	3501      	adds	r5, #1
   28114:	f10a 0a14 	add.w	sl, sl, #20
   28118:	e7a9      	b.n	2806e <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2811a:	2304      	movs	r3, #4
   2811c:	e7e8      	b.n	280f0 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   2811e:	f8da 0010 	ldr.w	r0, [sl, #16]
   28122:	4622      	mov	r2, r4
   28124:	4651      	mov	r1, sl
   28126:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   28128:	f7ff ff63 	bl	27ff2 <add_event>
	event->poller = poller;
   2812c:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   28130:	3601      	adds	r6, #1
   28132:	e7ea      	b.n	2810a <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   28134:	f8da 0010 	ldr.w	r0, [sl, #16]
   28138:	4622      	mov	r2, r4
   2813a:	4651      	mov	r1, sl
   2813c:	e7f4      	b.n	28128 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   2813e:	f8da 0010 	ldr.w	r0, [sl, #16]
   28142:	4622      	mov	r2, r4
   28144:	4651      	mov	r1, sl
   28146:	3024      	adds	r0, #36	; 0x24
   28148:	e7ee      	b.n	28128 <register_events+0xcc>

0002814a <signal_poll_event>:
{
   2814a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2814e:	6884      	ldr	r4, [r0, #8]
{
   28150:	4605      	mov	r5, r0
   28152:	460e      	mov	r6, r1
	if (poller != NULL) {
   28154:	b144      	cbz	r4, 28168 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   28156:	7863      	ldrb	r3, [r4, #1]
   28158:	2b01      	cmp	r3, #1
   2815a:	d138      	bne.n	281ce <signal_poll_event+0x84>
	if (!z_is_thread_pending(thread)) {
   2815c:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   28160:	f013 0302 	ands.w	r3, r3, #2
   28164:	d10a      	bne.n	2817c <signal_poll_event+0x32>
		poller->is_polling = false;
   28166:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   28168:	68eb      	ldr	r3, [r5, #12]
   2816a:	f3c3 3145 	ubfx	r1, r3, #13, #6
   2816e:	430e      	orrs	r6, r1
	event->poller = NULL;
   28170:	2000      	movs	r0, #0
	event->state |= state;
   28172:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   28176:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   28178:	60eb      	str	r3, [r5, #12]
	return retcode;
   2817a:	e00d      	b.n	28198 <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   2817c:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   28180:	f04f 31ff 	mov.w	r1, #4294967295
   28184:	f06f 0001 	mvn.w	r0, #1
   28188:	428b      	cmp	r3, r1
   2818a:	bf08      	it	eq
   2818c:	4282      	cmpeq	r2, r0
   2818e:	d105      	bne.n	2819c <signal_poll_event+0x52>
		poller->is_polling = false;
   28190:	2300      	movs	r3, #0
   28192:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   28194:	f06f 000a 	mvn.w	r0, #10
}
   28198:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2819c:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   281a0:	4640      	mov	r0, r8
   281a2:	f000 f943 	bl	2842c <z_unpend_thread>
	arch_thread_return_value_set(thread,
   281a6:	2e08      	cmp	r6, #8
   281a8:	bf0c      	ite	eq
   281aa:	f06f 0303 	mvneq.w	r3, #3
   281ae:	2300      	movne	r3, #0
   281b0:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   281b2:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   281b6:	06db      	lsls	r3, r3, #27
   281b8:	d102      	bne.n	281c0 <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
   281ba:	f854 7c48 	ldr.w	r7, [r4, #-72]
   281be:	b10f      	cbz	r7, 281c4 <signal_poll_event+0x7a>
		poller->is_polling = false;
   281c0:	2300      	movs	r3, #0
   281c2:	e7d0      	b.n	28166 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   281c4:	4640      	mov	r0, r8
   281c6:	f000 f965 	bl	28494 <z_ready_thread>
		poller->is_polling = false;
   281ca:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   281cc:	e7cc      	b.n	28168 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   281ce:	2b02      	cmp	r3, #2
   281d0:	d1f6      	bne.n	281c0 <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   281d2:	7823      	ldrb	r3, [r4, #0]
   281d4:	2b00      	cmp	r3, #0
   281d6:	d0c7      	beq.n	28168 <signal_poll_event+0x1e>
   281d8:	f854 7c04 	ldr.w	r7, [r4, #-4]
   281dc:	2f00      	cmp	r7, #0
   281de:	d0f4      	beq.n	281ca <signal_poll_event+0x80>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   281e0:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   281e4:	f1a4 0914 	sub.w	r9, r4, #20
   281e8:	f104 0014 	add.w	r0, r4, #20
   281ec:	f000 fa28 	bl	28640 <z_abort_timeout>
		twork->poll_result = 0;
   281f0:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   281f4:	4649      	mov	r1, r9
   281f6:	4638      	mov	r0, r7
   281f8:	f000 fb2c 	bl	28854 <k_work_submit_to_queue>
		poller->is_polling = false;
   281fc:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   28200:	e7b2      	b.n	28168 <signal_poll_event+0x1e>

00028202 <k_poll_event_init>:
{
   28202:	b510      	push	{r4, lr}
	event->type = type;
   28204:	04d2      	lsls	r2, r2, #19
   28206:	0209      	lsls	r1, r1, #8
   28208:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   2820c:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   28210:	430a      	orrs	r2, r1
   28212:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   28214:	2400      	movs	r4, #0
	event->type = type;
   28216:	430a      	orrs	r2, r1
	event->obj = obj;
   28218:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   2821c:	6084      	str	r4, [r0, #8]
}
   2821e:	bd10      	pop	{r4, pc}

00028220 <z_handle_obj_poll_events>:
{
   28220:	4603      	mov	r3, r0
	return list->head == list;
   28222:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   28224:	4283      	cmp	r3, r0
   28226:	d008      	beq.n	2823a <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   28228:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2822c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2822e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   28230:	2300      	movs	r3, #0
	node->prev = NULL;
   28232:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   28236:	f7ff bf88 	b.w	2814a <signal_poll_event>
}
   2823a:	4770      	bx	lr

0002823c <queue_insert>:
{
   2823c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28240:	4699      	mov	r9, r3
   28242:	4604      	mov	r4, r0
   28244:	f89d 3020 	ldrb.w	r3, [sp, #32]
   28248:	460d      	mov	r5, r1
   2824a:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2824c:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   28250:	f04f 0240 	mov.w	r2, #64	; 0x40
   28254:	f3ef 8711 	mrs	r7, BASEPRI
   28258:	f382 8812 	msr	BASEPRI_MAX, r2
   2825c:	f3bf 8f6f 	isb	sy
	if (is_append) {
   28260:	b103      	cbz	r3, 28264 <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
   28262:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   28264:	4630      	mov	r0, r6
   28266:	f000 f989 	bl	2857c <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   2826a:	b158      	cbz	r0, 28284 <queue_insert+0x48>
   2826c:	2400      	movs	r4, #0
   2826e:	67c4      	str	r4, [r0, #124]	; 0x7c
   28270:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   28274:	f000 f90e 	bl	28494 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   28278:	4630      	mov	r0, r6
   2827a:	4639      	mov	r1, r7
   2827c:	f7f9 f90a 	bl	21494 <z_reschedule>
	return 0;
   28280:	2000      	movs	r0, #0
   28282:	e00c      	b.n	2829e <queue_insert+0x62>
	if (alloc) {
   28284:	f1b9 0f00 	cmp.w	r9, #0
   28288:	d01b      	beq.n	282c2 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   2828a:	2108      	movs	r1, #8
   2828c:	f7fa f962 	bl	22554 <z_thread_aligned_alloc>
		if (anode == NULL) {
   28290:	b938      	cbnz	r0, 282a2 <queue_insert+0x66>
	__asm__ volatile(
   28292:	f387 8811 	msr	BASEPRI, r7
   28296:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2829a:	f06f 000b 	mvn.w	r0, #11
}
   2829e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   282a2:	2301      	movs	r3, #1
		anode->data = data;
   282a4:	f8c0 8004 	str.w	r8, [r0, #4]
   282a8:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   282aa:	6803      	ldr	r3, [r0, #0]
   282ac:	f003 0203 	and.w	r2, r3, #3
   282b0:	b95d      	cbnz	r5, 282ca <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   282b2:	6823      	ldr	r3, [r4, #0]
   282b4:	4313      	orrs	r3, r2
   282b6:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   282b8:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   282ba:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   282bc:	b973      	cbnz	r3, 282dc <queue_insert+0xa0>
	list->tail = node;
   282be:	6060      	str	r0, [r4, #4]
}
   282c0:	e00c      	b.n	282dc <queue_insert+0xa0>
	node->next_and_flags = flags;
   282c2:	f8c8 9000 	str.w	r9, [r8]
}
   282c6:	4640      	mov	r0, r8
   282c8:	e7ef      	b.n	282aa <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   282ca:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   282cc:	f033 0303 	bics.w	r3, r3, #3
   282d0:	d110      	bne.n	282f4 <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   282d2:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   282d4:	6862      	ldr	r2, [r4, #4]
   282d6:	b93a      	cbnz	r2, 282e8 <queue_insert+0xac>
	list->head = node;
   282d8:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   282dc:	2104      	movs	r1, #4
   282de:	f104 0010 	add.w	r0, r4, #16
   282e2:	f7ff ff9d 	bl	28220 <z_handle_obj_poll_events>
   282e6:	e7c7      	b.n	28278 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   282e8:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   282ea:	f003 0303 	and.w	r3, r3, #3
   282ee:	4303      	orrs	r3, r0
   282f0:	6013      	str	r3, [r2, #0]
   282f2:	e7e4      	b.n	282be <queue_insert+0x82>
   282f4:	4313      	orrs	r3, r2
   282f6:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   282f8:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   282fa:	f003 0303 	and.w	r3, r3, #3
   282fe:	4303      	orrs	r3, r0
   28300:	602b      	str	r3, [r5, #0]
}
   28302:	e7eb      	b.n	282dc <queue_insert+0xa0>

00028304 <z_queue_node_peek>:
{
   28304:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   28306:	4604      	mov	r4, r0
   28308:	b130      	cbz	r0, 28318 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2830a:	6802      	ldr	r2, [r0, #0]
   2830c:	0793      	lsls	r3, r2, #30
   2830e:	d003      	beq.n	28318 <z_queue_node_peek+0x14>
		ret = anode->data;
   28310:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   28312:	b109      	cbz	r1, 28318 <z_queue_node_peek+0x14>
			k_free(anode);
   28314:	f000 fb07 	bl	28926 <k_free>
}
   28318:	4620      	mov	r0, r4
   2831a:	bd10      	pop	{r4, pc}

0002831c <z_impl_k_queue_init>:
	list->head = NULL;
   2831c:	2300      	movs	r3, #0
	list->tail = NULL;
   2831e:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   28322:	f100 0308 	add.w	r3, r0, #8
	list->tail = (sys_dnode_t *)list;
   28326:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   2832a:	f100 0310 	add.w	r3, r0, #16
   2832e:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   28332:	4770      	bx	lr

00028334 <k_queue_append>:
{
   28334:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   28336:	2301      	movs	r3, #1
   28338:	9300      	str	r3, [sp, #0]
   2833a:	2300      	movs	r3, #0
{
   2833c:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2833e:	4619      	mov	r1, r3
   28340:	f7ff ff7c 	bl	2823c <queue_insert>
}
   28344:	b003      	add	sp, #12
   28346:	f85d fb04 	ldr.w	pc, [sp], #4

0002834a <k_queue_prepend>:
{
   2834a:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   2834c:	2300      	movs	r3, #0
{
   2834e:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   28350:	9300      	str	r3, [sp, #0]
   28352:	4619      	mov	r1, r3
   28354:	f7ff ff72 	bl	2823c <queue_insert>
}
   28358:	b003      	add	sp, #12
   2835a:	f85d fb04 	ldr.w	pc, [sp], #4

0002835e <k_queue_append_list>:
{
   2835e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28362:	4605      	mov	r5, r0
   28364:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   28366:	460c      	mov	r4, r1
   28368:	b391      	cbz	r1, 283d0 <k_queue_append_list+0x72>
   2836a:	b38a      	cbz	r2, 283d0 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2836c:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   28370:	f04f 0340 	mov.w	r3, #64	; 0x40
   28374:	f3ef 8811 	mrs	r8, BASEPRI
   28378:	f383 8812 	msr	BASEPRI_MAX, r3
   2837c:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   28380:	4638      	mov	r0, r7
   28382:	f000 f8fb 	bl	2857c <z_unpend_first_thread>
   28386:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   2838a:	b920      	cbnz	r0, 28396 <k_queue_append_list+0x38>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2838c:	686b      	ldr	r3, [r5, #4]
   2838e:	b9cb      	cbnz	r3, 283c4 <k_queue_append_list+0x66>
	list->head = node;
   28390:	602c      	str	r4, [r5, #0]
	list->tail = node;
   28392:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   28394:	e00a      	b.n	283ac <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   28396:	6144      	str	r4, [r0, #20]
   28398:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   2839c:	f000 f87a 	bl	28494 <z_ready_thread>
		head = *(void **)head;
   283a0:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   283a2:	4638      	mov	r0, r7
   283a4:	f000 f8ea 	bl	2857c <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   283a8:	2c00      	cmp	r4, #0
   283aa:	d1ee      	bne.n	2838a <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   283ac:	2104      	movs	r1, #4
   283ae:	f105 0010 	add.w	r0, r5, #16
   283b2:	f7ff ff35 	bl	28220 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   283b6:	4638      	mov	r0, r7
   283b8:	4641      	mov	r1, r8
   283ba:	f7f9 f86b 	bl	21494 <z_reschedule>
	return 0;
   283be:	2000      	movs	r0, #0
}
   283c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   283c4:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   283c6:	f001 0103 	and.w	r1, r1, #3
   283ca:	430c      	orrs	r4, r1
   283cc:	601c      	str	r4, [r3, #0]
}
   283ce:	e7e0      	b.n	28392 <k_queue_append_list+0x34>
		return -EINVAL;
   283d0:	f06f 0015 	mvn.w	r0, #21
   283d4:	e7f4      	b.n	283c0 <k_queue_append_list+0x62>

000283d6 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   283d6:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   283da:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   283dc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   283de:	2300      	movs	r3, #0
	node->prev = NULL;
   283e0:	e9c0 3300 	strd	r3, r3, [r0]
}
   283e4:	4770      	bx	lr

000283e6 <unpend_thread_no_timeout>:
{
   283e6:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   283e8:	f7ff fff5 	bl	283d6 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   283ec:	7b43      	ldrb	r3, [r0, #13]
   283ee:	f023 0302 	bic.w	r3, r3, #2
   283f2:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   283f4:	2300      	movs	r3, #0
   283f6:	6083      	str	r3, [r0, #8]
}
   283f8:	bd08      	pop	{r3, pc}

000283fa <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   283fa:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   283fe:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   28402:	4283      	cmp	r3, r0
		return b2 - b1;
   28404:	bf14      	ite	ne
   28406:	1ac0      	subne	r0, r0, r3
	return 0;
   28408:	2000      	moveq	r0, #0
}
   2840a:	4770      	bx	lr

0002840c <z_unpend_thread_no_timeout>:
{
   2840c:	b508      	push	{r3, lr}
   2840e:	f04f 0340 	mov.w	r3, #64	; 0x40
   28412:	f3ef 8111 	mrs	r1, BASEPRI
   28416:	f383 8812 	msr	BASEPRI_MAX, r3
   2841a:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2841e:	f7ff ffe2 	bl	283e6 <unpend_thread_no_timeout>
	__asm__ volatile(
   28422:	f381 8811 	msr	BASEPRI, r1
   28426:	f3bf 8f6f 	isb	sy
}
   2842a:	bd08      	pop	{r3, pc}

0002842c <z_unpend_thread>:
{
   2842c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2842e:	f04f 0340 	mov.w	r3, #64	; 0x40
   28432:	f3ef 8411 	mrs	r4, BASEPRI
   28436:	f383 8812 	msr	BASEPRI_MAX, r3
   2843a:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2843e:	f7ff ffd2 	bl	283e6 <unpend_thread_no_timeout>
	__asm__ volatile(
   28442:	f384 8811 	msr	BASEPRI, r4
   28446:	f3bf 8f6f 	isb	sy
}
   2844a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_abort_timeout(&thread->base.timeout);
   2844e:	3018      	adds	r0, #24
   28450:	f000 b8f6 	b.w	28640 <z_abort_timeout>

00028454 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   28454:	4603      	mov	r3, r0
   28456:	b920      	cbnz	r0, 28462 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   28458:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   2845c:	b90a      	cbnz	r2, 28462 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   2845e:	f7eb bb37 	b.w	13ad0 <arch_swap>
   28462:	f383 8811 	msr	BASEPRI, r3
   28466:	f3bf 8f6f 	isb	sy
}
   2846a:	4770      	bx	lr

0002846c <z_reschedule_unlocked>:
	__asm__ volatile(
   2846c:	f04f 0340 	mov.w	r3, #64	; 0x40
   28470:	f3ef 8011 	mrs	r0, BASEPRI
   28474:	f383 8812 	msr	BASEPRI_MAX, r3
   28478:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2847c:	f7ff bfea 	b.w	28454 <z_reschedule_irqlock>

00028480 <z_priq_dumb_best>:
{
   28480:	4603      	mov	r3, r0
	return list->head == list;
   28482:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28484:	4283      	cmp	r3, r0
   28486:	d003      	beq.n	28490 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   28488:	2800      	cmp	r0, #0
   2848a:	bf38      	it	cc
   2848c:	2000      	movcc	r0, #0
   2848e:	4770      	bx	lr
	struct k_thread *thread = NULL;
   28490:	2000      	movs	r0, #0
}
   28492:	4770      	bx	lr

00028494 <z_ready_thread>:
{
   28494:	b510      	push	{r4, lr}
   28496:	f04f 0340 	mov.w	r3, #64	; 0x40
   2849a:	f3ef 8411 	mrs	r4, BASEPRI
   2849e:	f383 8812 	msr	BASEPRI_MAX, r3
   284a2:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   284a6:	f7f9 f8bb 	bl	21620 <ready_thread>
	__asm__ volatile(
   284aa:	f384 8811 	msr	BASEPRI, r4
   284ae:	f3bf 8f6f 	isb	sy
}
   284b2:	bd10      	pop	{r4, pc}

000284b4 <z_thread_timeout>:
{
   284b4:	b510      	push	{r4, lr}
   284b6:	4601      	mov	r1, r0
	__asm__ volatile(
   284b8:	f04f 0340 	mov.w	r3, #64	; 0x40
   284bc:	f3ef 8411 	mrs	r4, BASEPRI
   284c0:	f383 8812 	msr	BASEPRI_MAX, r3
   284c4:	f3bf 8f6f 	isb	sy
		if (!killed) {
   284c8:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   284cc:	f013 0f28 	tst.w	r3, #40	; 0x28
   284d0:	d10d      	bne.n	284ee <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   284d2:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   284d6:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   284d8:	b10b      	cbz	r3, 284de <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   284da:	f7ff ff84 	bl	283e6 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   284de:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   284e2:	f023 0314 	bic.w	r3, r3, #20
   284e6:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   284ea:	f7f9 f899 	bl	21620 <ready_thread>
	__asm__ volatile(
   284ee:	f384 8811 	msr	BASEPRI, r4
   284f2:	f3bf 8f6f 	isb	sy
}
   284f6:	bd10      	pop	{r4, pc}

000284f8 <add_to_waitq_locked>:
{
   284f8:	b538      	push	{r3, r4, r5, lr}
   284fa:	4604      	mov	r4, r0
   284fc:	460d      	mov	r5, r1
	unready_thread(thread);
   284fe:	f7f9 f8e5 	bl	216cc <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   28502:	7b63      	ldrb	r3, [r4, #13]
   28504:	f043 0302 	orr.w	r3, r3, #2
   28508:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2850a:	b1b5      	cbz	r5, 2853a <add_to_waitq_locked+0x42>
	return list->head == list;
   2850c:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   2850e:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28510:	429d      	cmp	r5, r3
   28512:	bf08      	it	eq
   28514:	2300      	moveq	r3, #0
   28516:	2b00      	cmp	r3, #0
   28518:	bf38      	it	cc
   2851a:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2851c:	b19b      	cbz	r3, 28546 <add_to_waitq_locked+0x4e>
	int32_t b1 = thread_1->base.prio;
   2851e:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   28522:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   28526:	4291      	cmp	r1, r2
   28528:	d008      	beq.n	2853c <add_to_waitq_locked+0x44>
		return b2 - b1;
   2852a:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   2852c:	2a00      	cmp	r2, #0
   2852e:	dd05      	ble.n	2853c <add_to_waitq_locked+0x44>
	sys_dnode_t *const prev = successor->prev;
   28530:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   28532:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   28536:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   28538:	605c      	str	r4, [r3, #4]
}
   2853a:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   2853c:	686a      	ldr	r2, [r5, #4]
   2853e:	4293      	cmp	r3, r2
   28540:	d001      	beq.n	28546 <add_to_waitq_locked+0x4e>
   28542:	681b      	ldr	r3, [r3, #0]
   28544:	e7ea      	b.n	2851c <add_to_waitq_locked+0x24>
	sys_dnode_t *const tail = list->tail;
   28546:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   28548:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   2854c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2854e:	606c      	str	r4, [r5, #4]
   28550:	e7f3      	b.n	2853a <add_to_waitq_locked+0x42>

00028552 <z_unpend1_no_timeout>:
{
   28552:	b510      	push	{r4, lr}
	__asm__ volatile(
   28554:	f04f 0340 	mov.w	r3, #64	; 0x40
   28558:	f3ef 8411 	mrs	r4, BASEPRI
   2855c:	f383 8812 	msr	BASEPRI_MAX, r3
   28560:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   28564:	f7ff ff8c 	bl	28480 <z_priq_dumb_best>
		if (thread != NULL) {
   28568:	4601      	mov	r1, r0
   2856a:	b108      	cbz	r0, 28570 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   2856c:	f7ff ff3b 	bl	283e6 <unpend_thread_no_timeout>
	__asm__ volatile(
   28570:	f384 8811 	msr	BASEPRI, r4
   28574:	f3bf 8f6f 	isb	sy
}
   28578:	4608      	mov	r0, r1
   2857a:	bd10      	pop	{r4, pc}

0002857c <z_unpend_first_thread>:
{
   2857c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2857e:	f04f 0340 	mov.w	r3, #64	; 0x40
   28582:	f3ef 8511 	mrs	r5, BASEPRI
   28586:	f383 8812 	msr	BASEPRI_MAX, r3
   2858a:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2858e:	f7ff ff77 	bl	28480 <z_priq_dumb_best>
		if (thread != NULL) {
   28592:	4604      	mov	r4, r0
   28594:	b120      	cbz	r0, 285a0 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   28596:	f7ff ff26 	bl	283e6 <unpend_thread_no_timeout>
   2859a:	3018      	adds	r0, #24
   2859c:	f000 f850 	bl	28640 <z_abort_timeout>
	__asm__ volatile(
   285a0:	f385 8811 	msr	BASEPRI, r5
   285a4:	f3bf 8f6f 	isb	sy
}
   285a8:	4620      	mov	r0, r4
   285aa:	bd38      	pop	{r3, r4, r5, pc}

000285ac <z_unpend_all>:
{
   285ac:	b538      	push	{r3, r4, r5, lr}
   285ae:	4605      	mov	r5, r0
	int need_sched = 0;
   285b0:	2000      	movs	r0, #0
	return list->head == list;
   285b2:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   285b4:	42a5      	cmp	r5, r4
   285b6:	d000      	beq.n	285ba <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   285b8:	b904      	cbnz	r4, 285bc <z_unpend_all+0x10>
}
   285ba:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   285bc:	4620      	mov	r0, r4
   285be:	f7ff ff35 	bl	2842c <z_unpend_thread>
		z_ready_thread(thread);
   285c2:	4620      	mov	r0, r4
   285c4:	f7ff ff66 	bl	28494 <z_ready_thread>
		need_sched = 1;
   285c8:	2001      	movs	r0, #1
   285ca:	e7f2      	b.n	285b2 <z_unpend_all+0x6>

000285cc <z_sched_wake>:
{
   285cc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   285ce:	f04f 0340 	mov.w	r3, #64	; 0x40
   285d2:	f3ef 8511 	mrs	r5, BASEPRI
   285d6:	f383 8812 	msr	BASEPRI_MAX, r3
   285da:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   285de:	f7ff ff4f 	bl	28480 <z_priq_dumb_best>
		if (thread != NULL) {
   285e2:	4604      	mov	r4, r0
   285e4:	b150      	cbz	r0, 285fc <z_sched_wake+0x30>
   285e6:	67c1      	str	r1, [r0, #124]	; 0x7c
   285e8:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   285ea:	f7ff fefc 	bl	283e6 <unpend_thread_no_timeout>
   285ee:	3018      	adds	r0, #24
   285f0:	f000 f826 	bl	28640 <z_abort_timeout>
			ready_thread(thread);
   285f4:	4620      	mov	r0, r4
   285f6:	f7f9 f813 	bl	21620 <ready_thread>
			ret = true;
   285fa:	2001      	movs	r0, #1
	__asm__ volatile(
   285fc:	f385 8811 	msr	BASEPRI, r5
   28600:	f3bf 8f6f 	isb	sy
}
   28604:	bd38      	pop	{r3, r4, r5, pc}

00028606 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   28606:	b15a      	cbz	r2, 28620 <z_impl_k_sem_init+0x1a>
   28608:	428a      	cmp	r2, r1
   2860a:	d309      	bcc.n	28620 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2860c:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   28610:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   28614:	e9c0 0000 	strd	r0, r0, [r0]
   28618:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2861c:	2000      	movs	r0, #0
   2861e:	4770      	bx	lr
		return -EINVAL;
   28620:	f06f 0015 	mvn.w	r0, #21
}
   28624:	4770      	bx	lr

00028626 <k_is_in_isr>:
   28626:	f3ef 8005 	mrs	r0, IPSR
}
   2862a:	3800      	subs	r0, #0
   2862c:	bf18      	it	ne
   2862e:	2001      	movne	r0, #1
   28630:	4770      	bx	lr

00028632 <z_impl_k_thread_name_set>:
}
   28632:	f06f 0057 	mvn.w	r0, #87	; 0x57
   28636:	4770      	bx	lr

00028638 <k_thread_name_get>:
}
   28638:	2000      	movs	r0, #0
   2863a:	4770      	bx	lr

0002863c <z_impl_k_thread_start>:
	z_sched_start(thread);
   2863c:	f7f9 b828 	b.w	21690 <z_sched_start>

00028640 <z_abort_timeout>:
{
   28640:	b510      	push	{r4, lr}
	__asm__ volatile(
   28642:	f04f 0240 	mov.w	r2, #64	; 0x40
   28646:	f3ef 8411 	mrs	r4, BASEPRI
   2864a:	f382 8812 	msr	BASEPRI_MAX, r2
   2864e:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   28652:	6803      	ldr	r3, [r0, #0]
   28654:	b13b      	cbz	r3, 28666 <z_abort_timeout+0x26>
			remove_timeout(to);
   28656:	f7f9 fbaf 	bl	21db8 <remove_timeout>
			ret = 0;
   2865a:	2000      	movs	r0, #0
	__asm__ volatile(
   2865c:	f384 8811 	msr	BASEPRI, r4
   28660:	f3bf 8f6f 	isb	sy
}
   28664:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   28666:	f06f 0015 	mvn.w	r0, #21
   2866a:	e7f7      	b.n	2865c <z_abort_timeout+0x1c>

0002866c <z_get_next_timeout_expiry>:
{
   2866c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2866e:	f04f 0340 	mov.w	r3, #64	; 0x40
   28672:	f3ef 8411 	mrs	r4, BASEPRI
   28676:	f383 8812 	msr	BASEPRI_MAX, r3
   2867a:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   2867e:	f7f9 fbb5 	bl	21dec <next_timeout>
	__asm__ volatile(
   28682:	f384 8811 	msr	BASEPRI, r4
   28686:	f3bf 8f6f 	isb	sy
}
   2868a:	bd10      	pop	{r4, pc}

0002868c <z_set_timeout_expiry>:
{
   2868c:	b570      	push	{r4, r5, r6, lr}
   2868e:	4604      	mov	r4, r0
   28690:	460d      	mov	r5, r1
	__asm__ volatile(
   28692:	f04f 0340 	mov.w	r3, #64	; 0x40
   28696:	f3ef 8611 	mrs	r6, BASEPRI
   2869a:	f383 8812 	msr	BASEPRI_MAX, r3
   2869e:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   286a2:	f7f9 fba3 	bl	21dec <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   286a6:	2801      	cmp	r0, #1
   286a8:	dd05      	ble.n	286b6 <z_set_timeout_expiry+0x2a>
   286aa:	42a0      	cmp	r0, r4
   286ac:	db03      	blt.n	286b6 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   286ae:	4629      	mov	r1, r5
   286b0:	4620      	mov	r0, r4
   286b2:	f7f6 fb3f 	bl	1ed34 <sys_clock_set_timeout>
	__asm__ volatile(
   286b6:	f386 8811 	msr	BASEPRI, r6
   286ba:	f3bf 8f6f 	isb	sy
}
   286be:	bd70      	pop	{r4, r5, r6, pc}

000286c0 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   286c0:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   286c2:	f7f9 fcb3 	bl	2202c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   286c6:	bd08      	pop	{r3, pc}

000286c8 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   286c8:	b108      	cbz	r0, 286ce <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   286ca:	f7eb be77 	b.w	143bc <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   286ce:	4770      	bx	lr

000286d0 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   286d0:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   286d2:	1c4b      	adds	r3, r1, #1
   286d4:	bf08      	it	eq
   286d6:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   286da:	4604      	mov	r4, r0
   286dc:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   286de:	d013      	beq.n	28708 <sys_clock_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   286e0:	ea54 0105 	orrs.w	r1, r4, r5
   286e4:	d103      	bne.n	286ee <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   286e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   286ea:	f7f9 bc9f 	b.w	2202c <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   286ee:	f06f 0101 	mvn.w	r1, #1
   286f2:	1a0a      	subs	r2, r1, r0
   286f4:	f04f 31ff 	mov.w	r1, #4294967295
   286f8:	eb61 0305 	sbc.w	r3, r1, r5
   286fc:	2a00      	cmp	r2, #0
   286fe:	f173 0100 	sbcs.w	r1, r3, #0
   28702:	db02      	blt.n	2870a <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   28704:	4610      	mov	r0, r2
   28706:	4619      	mov	r1, r3
}
   28708:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
   2870a:	f7f9 fc8f 	bl	2202c <sys_clock_tick_get>
   2870e:	2c01      	cmp	r4, #1
   28710:	f175 0300 	sbcs.w	r3, r5, #0
   28714:	bfbc      	itt	lt
   28716:	2401      	movlt	r4, #1
   28718:	2500      	movlt	r5, #0
   2871a:	1820      	adds	r0, r4, r0
   2871c:	eb45 0101 	adc.w	r1, r5, r1
   28720:	e7f2      	b.n	28708 <sys_clock_timeout_end_calc+0x38>

00028722 <k_timer_init>:
	timer->status = 0U;
   28722:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   28724:	e9c0 1208 	strd	r1, r2, [r0, #32]
   28728:	f100 0218 	add.w	r2, r0, #24
   2872c:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   28730:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   28734:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   28736:	6343      	str	r3, [r0, #52]	; 0x34
}
   28738:	4770      	bx	lr

0002873a <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2873a:	b510      	push	{r4, lr}
   2873c:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   2873e:	f7ff ff7f 	bl	28640 <z_abort_timeout>

	if (inactive) {
   28742:	b9b0      	cbnz	r0, 28772 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   28744:	6a63      	ldr	r3, [r4, #36]	; 0x24
   28746:	b10b      	cbz	r3, 2874c <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   28748:	4620      	mov	r0, r4
   2874a:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   2874c:	f104 0018 	add.w	r0, r4, #24
   28750:	f7ff feff 	bl	28552 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   28754:	b168      	cbz	r0, 28772 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   28756:	f7ff fe9d 	bl	28494 <z_ready_thread>
	__asm__ volatile(
   2875a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2875e:	f3ef 8011 	mrs	r0, BASEPRI
   28762:	f383 8812 	msr	BASEPRI_MAX, r3
   28766:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   2876a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   2876e:	f7ff be71 	b.w	28454 <z_reschedule_irqlock>
   28772:	bd10      	pop	{r4, pc}

00028774 <notify_queue_locked>:
	if (queue != NULL) {
   28774:	b120      	cbz	r0, 28780 <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   28776:	2200      	movs	r2, #0
   28778:	4611      	mov	r1, r2
   2877a:	3088      	adds	r0, #136	; 0x88
   2877c:	f7ff bf26 	b.w	285cc <z_sched_wake>
}
   28780:	4770      	bx	lr

00028782 <unschedule_locked>:
	bool ret = flag_test(flagp, bit);
   28782:	68c3      	ldr	r3, [r0, #12]
{
   28784:	b510      	push	{r4, lr}
	*flagp &= ~BIT(bit);
   28786:	f023 0208 	bic.w	r2, r3, #8
	return (*flagp & BIT(bit)) != 0U;
   2878a:	f3c3 04c0 	ubfx	r4, r3, #3, #1
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2878e:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   28790:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   28792:	d502      	bpl.n	2879a <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   28794:	3010      	adds	r0, #16
   28796:	f7ff ff53 	bl	28640 <z_abort_timeout>
}
   2879a:	4620      	mov	r0, r4
   2879c:	bd10      	pop	{r4, pc}

0002879e <cancel_async_locked>:
{
   2879e:	4603      	mov	r3, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   287a0:	68c0      	ldr	r0, [r0, #12]
{
   287a2:	b510      	push	{r4, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   287a4:	0784      	lsls	r4, r0, #30
   287a6:	f3c0 0140 	ubfx	r1, r0, #1, #1
   287aa:	d416      	bmi.n	287da <cancel_async_locked+0x3c>
	*flagp &= ~BIT(bit);
   287ac:	f020 0404 	bic.w	r4, r0, #4
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   287b0:	0740      	lsls	r0, r0, #29
		queue_remove_locked(work->queue, work);
   287b2:	689a      	ldr	r2, [r3, #8]
	*flagp &= ~BIT(bit);
   287b4:	60dc      	str	r4, [r3, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   287b6:	d510      	bpl.n	287da <cancel_async_locked+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   287b8:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
   287bc:	b168      	cbz	r0, 287da <cancel_async_locked+0x3c>
   287be:	4283      	cmp	r3, r0
   287c0:	d11d      	bne.n	287fe <cancel_async_locked+0x60>
Z_GENLIST_REMOVE(slist, snode)
   287c2:	6818      	ldr	r0, [r3, #0]
   287c4:	b999      	cbnz	r1, 287ee <cancel_async_locked+0x50>
   287c6:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	list->head = node;
   287ca:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   287ce:	428b      	cmp	r3, r1
   287d0:	d101      	bne.n	287d6 <cancel_async_locked+0x38>
	list->tail = node;
   287d2:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
	parent->next = child;
   287d6:	2200      	movs	r2, #0
   287d8:	601a      	str	r2, [r3, #0]
	return flags_get(&work->flags) & K_WORK_MASK;
   287da:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   287dc:	f012 000f 	ands.w	r0, r2, #15
	*flagp |= BIT(bit);
   287e0:	bf1e      	ittt	ne
   287e2:	f042 0202 	orrne.w	r2, r2, #2
   287e6:	60da      	strne	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   287e8:	f002 000f 	andne.w	r0, r2, #15
}
   287ec:	bd10      	pop	{r4, pc}
   287ee:	6008      	str	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   287f0:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
   287f4:	4283      	cmp	r3, r0
	list->tail = node;
   287f6:	bf08      	it	eq
   287f8:	f8c2 1084 	streq.w	r1, [r2, #132]	; 0x84
}
   287fc:	e7eb      	b.n	287d6 <cancel_async_locked+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   287fe:	4601      	mov	r1, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28800:	6800      	ldr	r0, [r0, #0]
   28802:	e7db      	b.n	287bc <cancel_async_locked+0x1e>

00028804 <work_timeout>:
{
   28804:	b513      	push	{r0, r1, r4, lr}
   28806:	f04f 0340 	mov.w	r3, #64	; 0x40
   2880a:	f3ef 8411 	mrs	r4, BASEPRI
   2880e:	f383 8812 	msr	BASEPRI_MAX, r3
   28812:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   28816:	2300      	movs	r3, #0
   28818:	9301      	str	r3, [sp, #4]
	bool ret = flag_test(flagp, bit);
   2881a:	f850 3c04 	ldr.w	r3, [r0, #-4]
	*flagp &= ~BIT(bit);
   2881e:	f023 0208 	bic.w	r2, r3, #8
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   28822:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   28824:	f840 2c04 	str.w	r2, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   28828:	d505      	bpl.n	28836 <work_timeout+0x32>
		queue = dw->queue;
   2882a:	6983      	ldr	r3, [r0, #24]
   2882c:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   2882e:	a901      	add	r1, sp, #4
   28830:	3810      	subs	r0, #16
   28832:	f7f9 fd75 	bl	22320 <submit_to_queue_locked>
	__asm__ volatile(
   28836:	f384 8811 	msr	BASEPRI, r4
   2883a:	f3bf 8f6f 	isb	sy
}
   2883e:	b002      	add	sp, #8
   28840:	bd10      	pop	{r4, pc}

00028842 <k_work_init>:
{
   28842:	b538      	push	{r3, r4, r5, lr}
   28844:	4604      	mov	r4, r0
   28846:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   28848:	2210      	movs	r2, #16
   2884a:	2100      	movs	r1, #0
   2884c:	f7fc fb23 	bl	24e96 <memset>
   28850:	6065      	str	r5, [r4, #4]
}
   28852:	bd38      	pop	{r3, r4, r5, pc}

00028854 <k_work_submit_to_queue>:
{
   28854:	b537      	push	{r0, r1, r2, r4, r5, lr}
   28856:	9001      	str	r0, [sp, #4]
   28858:	4608      	mov	r0, r1
	__asm__ volatile(
   2885a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2885e:	f3ef 8511 	mrs	r5, BASEPRI
   28862:	f383 8812 	msr	BASEPRI_MAX, r3
   28866:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   2886a:	a901      	add	r1, sp, #4
   2886c:	f7f9 fd58 	bl	22320 <submit_to_queue_locked>
   28870:	4604      	mov	r4, r0
	__asm__ volatile(
   28872:	f385 8811 	msr	BASEPRI, r5
   28876:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   2887a:	2800      	cmp	r0, #0
   2887c:	dd04      	ble.n	28888 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   2887e:	f7f9 f8cb 	bl	21a18 <z_impl_k_is_preempt_thread>
   28882:	b108      	cbz	r0, 28888 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   28884:	f7f9 f81a 	bl	218bc <z_impl_k_yield>
}
   28888:	4620      	mov	r0, r4
   2888a:	b003      	add	sp, #12
   2888c:	bd30      	pop	{r4, r5, pc}

0002888e <k_work_init_delayable>:
{
   2888e:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   28890:	2230      	movs	r2, #48	; 0x30
{
   28892:	4604      	mov	r4, r0
   28894:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   28896:	2100      	movs	r1, #0
   28898:	f7fc fafd 	bl	24e96 <memset>
   2889c:	f44f 7380 	mov.w	r3, #256	; 0x100
   288a0:	6065      	str	r5, [r4, #4]
   288a2:	60e3      	str	r3, [r4, #12]
}
   288a4:	bd38      	pop	{r3, r4, r5, pc}

000288a6 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   288a6:	b538      	push	{r3, r4, r5, lr}
   288a8:	4604      	mov	r4, r0
	__asm__ volatile(
   288aa:	f04f 0340 	mov.w	r3, #64	; 0x40
   288ae:	f3ef 8511 	mrs	r5, BASEPRI
   288b2:	f383 8812 	msr	BASEPRI_MAX, r3
   288b6:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   288ba:	f7ff ff62 	bl	28782 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   288be:	4620      	mov	r0, r4
   288c0:	f7ff ff6d 	bl	2879e <cancel_async_locked>
	__asm__ volatile(
   288c4:	f385 8811 	msr	BASEPRI, r5
   288c8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   288cc:	bd38      	pop	{r3, r4, r5, pc}

000288ce <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   288ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   288d0:	4604      	mov	r4, r0
   288d2:	460d      	mov	r5, r1
	__asm__ volatile(
   288d4:	f04f 0340 	mov.w	r3, #64	; 0x40
   288d8:	f3ef 8711 	mrs	r7, BASEPRI
   288dc:	f383 8812 	msr	BASEPRI_MAX, r3
   288e0:	f3bf 8f6f 	isb	sy
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   288e4:	68c3      	ldr	r3, [r0, #12]
   288e6:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   288ea:	2b00      	cmp	r3, #0
   288ec:	bf14      	ite	ne
   288ee:	2601      	movne	r6, #1
   288f0:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   288f2:	d009      	beq.n	28908 <k_work_cancel_delayable_sync+0x3a>
	(void)unschedule_locked(dwork);
   288f4:	f7ff ff45 	bl	28782 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   288f8:	4620      	mov	r0, r4
   288fa:	f7ff ff50 	bl	2879e <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   288fe:	4629      	mov	r1, r5
   28900:	4620      	mov	r0, r4
   28902:	f7f9 fcef 	bl	222e4 <cancel_sync_locked>
   28906:	4603      	mov	r3, r0
	__asm__ volatile(
   28908:	f387 8811 	msr	BASEPRI, r7
   2890c:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   28910:	b13b      	cbz	r3, 28922 <k_work_cancel_delayable_sync+0x54>
	return z_impl_k_sem_take(sem, timeout);
   28912:	f04f 32ff 	mov.w	r2, #4294967295
   28916:	f04f 33ff 	mov.w	r3, #4294967295
   2891a:	f105 0008 	add.w	r0, r5, #8
   2891e:	f7f9 f915 	bl	21b4c <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   28922:	4630      	mov	r0, r6
   28924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00028926 <k_free>:
	if (ptr != NULL) {
   28926:	b120      	cbz	r0, 28932 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   28928:	1f01      	subs	r1, r0, #4
   2892a:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2892e:	f7ff bacb 	b.w	27ec8 <k_heap_free>
}
   28932:	4770      	bx	lr

00028934 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   28934:	4770      	bx	lr
	...

00028938 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   28938:	f7f8 b806 	b.w	20948 <SystemInit>
